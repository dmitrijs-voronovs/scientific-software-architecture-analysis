quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"e I answer your question and layout my logic, I want to mention that I am **_not_** suggesting fastp is not doing its job, **_neither am I stating that fastp is working incorrectly_**. Now to my answer(s) and logic:; 1. With fastp, I am not sure if adapter trimming happens first and then quality trimming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:997,adapter,adapter-trimming,997,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['adapter'],['adapter-trimming']
Integrability,"e Staden package, FYI:. ```; ‚ùØ make VERBOSE=1 [12:30:35]; /usr/local/Cellar/cmake/3.13.4/bin/cmake -S/Users/gabriel/Projects/salmon-0.13.1 -B/Users/gabriel/Projects/salmon-0.13.1/build --check-build-system CMakeFiles/Makefile.cmake 0; /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_progress_start /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/progress.marks; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/Makefile2 all; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libcereal.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/st",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:1035,Depend,DependInfo,1035,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['Depend'],['DependInfo']
Integrability,"e code for the v3 sample that ran without generating error messages:. ```; ID=5k_pbmc_v3. R1a=../Reads/5k_pbmc_v3_S1_L001_R1_001.fastq.gz; R1b=../Reads/5k_pbmc_v3_S1_L002_R1_001.fastq.gz; R1c=../Reads/5k_pbmc_v3_S1_L003_R1_001.fastq.gz; R1d=../Reads/5k_pbmc_v3_S1_L004_R1_001.fastq.gz. R2a=../Reads/5k_pbmc_v3_S1_L001_R2_001.fastq.gz; R2b=../Reads/5k_pbmc_v3_S1_L002_R2_001.fastq.gz; R2c=../Reads/5k_pbmc_v3_S1_L003_R2_001.fastq.gz; R2d=../Reads/5k_pbmc_v3_S1_L004_R2_001.fastq.gz. TYPE=10xV3; #for MAP, download from UCSC Table Browser, and remove 1st line (and then manually add SARS-COV-2 genes); MAP=../../Ref_Generation/SARS_COV_2-hg38_RefSeq_2column.txt; REF=../../Ref_Generation/SARS_COV_2-hg38_salmon; CBWL=/net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt. ../../Ref_Generation/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISR --chromium -1 $R1a $R1b $R1c $R1d -2 $R2a $R2b $R2c $R2d -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL; ```. That v3 white list is even **larger** than the v2 white list:. ```; cwarden$ wc -l /net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt; 6794880 /net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt; ```. So, that is part of why I was confused. However, before I start running the analysis with the shorter set of barcodes unique for this sample, here are the commands that I believe you were asking about. ```; cwarden$ wc -l ../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv; 737280 ../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv; cwarden$ wc -l ../CellRanger/5309-CT-2/outs/filtered_feature_bc_matrix/barcodes.tsv; 9974 ../CellRanger/5309-CT-2/outs/filtered_feature_bc_matrix/barcodes.tsv; ```. I would prefer to have an option where I could potentially conclude the cell count is different than provided by CellRanger. . However, I will at least check to confirm this solves the problem with the error message that I am seeing (with the much smaller cell barcode list).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879347665:1979,message,message,1979,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879347665,1,['message'],['message']
Integrability,"e correct command line `salmon quant` options for Lexogen/QuantSeq _(this will be referred to as QS in the rest of the message(s))_ ?. `salmon quant --threads 16 --noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in my final summarized table (after tximpo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:1016,Adapter,Adapter,1016,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Adapter'],['Adapter']
Integrability,"e relative tradeoffs and merits of different alignment approaches). * Salmon and RSEM use related but distinct optimization algorithms by default. RSEM uses the EM algorithm, and salmon uses the variational Bayesian EM algorithm. The latter tends to induce more sparse solutions. This is simply because they are optimizing slightly different objectives. It is very difficult to say in general if one is ""better"" than the other in a blanket way, but [there is previous literature to support that the VBEM may be more accurate](https://academic.oup.com/bioinformatics/article/29/18/2292/239795). However, while RSEM only implements the EM algorithm, salmon actually implements and provides a switch to use either. So, if you want to test the effect of this difference, you can run salmon with the `--useEM` algorithm. This will tell salmon to use the ""classic"" EM algorithm and will eliminate this source of variation. * As with the other question you asked, there may be a _small_ discrepancy depending on when enforcement of a stranded library kicks in under salmon's `A` library type. You can eliminate that variable by simply providing `-l SF` to match the library type being used with RSEM. * Coming back to the `IndelSoftclipSingleend` parameter I mentioned in the first point; RSEM disallows indels in the alignments that it quantifies. This means that to produce RSEM-compatible input, STAR must not align reads that contain indels. While this won't generally have a big effect for many transcripts, it can certainly affect the abundance estimates for transcripts in your sample where the sample you are quantifying has (indel) variation with respect to the reference annotation. We touch upon that a bit as well in the [paper I mentioned above](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8). * Finally, and likely the smallest source of potential differences, is that there are other implementation details that differ between salmon and RSEM (e.g. exactly how th",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590:3543,depend,depending,3543,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590,2,['depend'],['depending']
Integrability,"e""). For the pipeline I'm building it would be ideal if I didn't have to specify the strandedness of the library as I'm not the one preparing the samples and it's not always easy to get that information from the scientist in the lab. As such, it would be great if I can use the default strandedness argument to STAR (""Unstranded"") and let salmon ""do the right thing"" by letting it choose the libType for me. With that in mind, if I let salmon choose for me (-l A) am I risking throwing out any data?. Right, so in this case, STAR should produce all highest-scoring valid alignments regardless of orientation. Then, when running salmon with `-l A` it will detect the strandedness and only discard alignments compatible with the appropriate strand type (which may be unstranded if that is the protocol). Salmon is pretty conservative about reporting when there is any ambiguity. By default, if the strand bias is stronger than a few percent. In a stranded protocol, it will report and if it infers more than a few percent of fragments no having a valid alignment. So you can always double-check samples where the strandedness is at all ambiguous. > In addition, if a transcript was aligned in a unstranded manner and ended up aligning to the wrong location due to ambiguity between the positive orientation of one transcript and the negative orientation of another, can salmon correct this by reassigning it to the right transcript based on the joint probability of all the other alignments (if you can't tell I'm at the edge of my BS zone)?. If there is not an alignment to the correct location _in addition to_ the wrong location, then no. If you run salmon in alignment mode, it will assign each fragment probabilistically to the set of transcripts to which it aligns. There is, by definition, a probability of 0 for a fragment being assigned to a location where it doesn't align. That is, the reported alignment positions should contain the true alignment. STAR is pretty good at reporting all equa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733417813:1074,protocol,protocol,1074,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733417813,1,['protocol'],['protocol']
Integrability,"e():12729039; approximateContigTotalLength: 1607258836; counters for complex kmers:; (prec>1 & succ>1)=133010 | (succ>1 & isStart)=7442 | (prec>1 & isEnd)=7516 | (isStart & isEnd)=2442; contig count: 11353512 element count: 2210067304 complex nodes: 150410; # of ones in rank vector: 11353511; [2023-03-15 20:35:10.185] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2023-03-15 20:35:10.185] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory illerney.index; size = 2210067304; -----------------------------------------; | Loading contigs | Time = 451.61 ms; -----------------------------------------; size = 2210067304; -----------------------------------------; | Loading contig boundaries | Time = 180.73 ms; -----------------------------------------; Number of ones: 11353511; Number of ones per inventory item: 512; Inventory entries filled: 22175; 11353511; [2023-03-15 20:35:13.921] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2023-03-15 20:35:13.997] [puff::index::jointLog] [info] contig count for validation: 11,353,511; [2023-03-15 20:35:19.728] [puff::index::jointLog] [info] Total # of Contigs : 11,353,511; [2023-03-15 20:35:19.728] [puff::index::jointLog] [info] Total # of numerical Contigs : 11,353,511; [2023-03-15 20:35:20.804] [puff::index::jointLog] [info] Total # of contig vec entries: 16,343,267; [2023-03-15 20:35:20.804] [puff::index::jointLog] [info] bits per offset entry 24; [2023-03-15 20:35:22.331] [puff::index::jointLog] [info] Done constructing the contig vector. 11353512; [2023-03-15 20:35:25.697] [puff::index::jointLog] [info] # segments = 11,353,511; [2023-03-15 20:35:25.697] [puff::index::jointLog] [info] total length = 2,210,067,304; [2023-03-15 20:35:28.518] [puff::index::jointLog] [info] Reading the reference files ...; [2023-03-15 20:35:37.482] [puff::index::jointLog] [info] positional integer width = 32; [2023-03-15 20:35:37.482] [puf",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/837:3726,wrap,wrapping,3726,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/837,1,['wrap'],['wrapping']
Integrability,"eads.fq > aln.sam`. This approach seems to employ a splicing aware algorithm against a genomic reference, using canonical splicing signals to help map the transcripts. However, this method doesn't seem to be applicable to Salmon given the requirement that the reads are aligned directly to the transcriptome (hence the need to account for splicing with '_-ac splice_' is lost). An alternative approach I've seen (i.e., the one used in ONT's own DGE [pipeline](https://github.com/nanoporetech/pipeline-transcriptome-de)) is to use minimap2 to align to the transcriptome reference but to retain a large number of secondary mappings (-N 100 in minimap2):. `minimap2 -ax map-ont -N 100 transcriptome.fa reads.fq`. This makes more sense in terms of the _-ax_ preset used, but I guess I'm just wondering then what the optimal input for Salmon would be in order to get the most accurate count data? I know secondary mappings are important for the algorithm to calculate uncertainty / maximum likelihood, but is there an recommend number of these to retain? The logic behind allowing for a high number of secondary alignments when using a transcriptome reference is to account for the high similarity among isoforms. From a high-level view I could see how this might be problematic though, depending on how Salmon actually uses the alternate mappings (i.e., is it just for the statistics or does it affect the counts as well?). . I've also seen groups toying with adjusting the _-p_ setting in minimap2 which sets the minimal ratio of the secondary to primary alignment score that is allowed in order to report the secondary mapping. Surveying the forums and discussion boards, values of _-N_ ranging from the default of 5 to 100 and of _-p_ ranging from 0 to 1, (i.e., anything) seem to be acceptable. Given this ambiguity, I figured going to the 'source' and asking the creators what Salmon actually wants might be beneficial, so if yall have done any testing or have recommendations I'd very appreciative.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/790:1993,depend,depending,1993,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/790,1,['depend'],['depending']
Integrability,"emature_group %in% names(gencode) & !duplicated(anot.pre$premature_group) &; anot.pre$premature_group %in% anot[anot$transcript_source == 'ensembl_havana']$transcript_id; ]$premature_group[1]. chosenOnesM <- anot.pre[; strand(anot.pre) == '-' & !grepl(';', anot.pre$premature_group) & anot.pre$premature_group %in% names(gencode) & !duplicated(anot.pre$premature_group) &; anot.pre$premature_group %in% anot[anot$transcript_source == 'ensembl_havana']$transcript_id; ]$premature_group[1]. chosenOnes <- c(chosenOnesP, chosenOnesM). # subset chosed ones; anot.ori <- anot; anot.pre.ori <- anot.pre. anot <- anot[anot$transcript_id %in% chosenOnes, ]; anot.pre <- anot.pre[anot.pre$premature_group %in% chosenOnes, ]. # sanity check (make sure strand information is the same for pre and mature RNA counterparts); all(; sort(paste(strand(anot), anot$transcript_id) %>% unique) ==; sort(paste(strand(anot.pre), anot.pre$premature_group) %>% unique); ) %>% print. ### Mature transcript sequences ####; message('Creating mature transcript sequences...'). # subset pos sorted exons, split by tx ID, concatenate exon seq per transcript using unlist; mature.tx <- lapply(; X = split(dna[anot], anot$transcript_id),; FUN = unlist; ) %>% DNAStringSet. message('... now getting reverse complements of mature transcripts on the minus strand...'). mature.tx[names(mature.tx) %in% anot[strand(anot) == '-', ]$transcript_id] <- reverseComplement(; mature.tx[names(mature.tx) %in% anot[strand(anot) == '-', ]$transcript_id]; ). ### Premature transcript sequences ####; message('Creating premature transcript sequences...'). premature.tx <- dna[anot.pre]. message('... now getting reverse complements of premature transcripts on the minus strand...'). premature.tx[names(premature.tx) %in% anot.pre[strand(anot.pre) == '-', ]$premature_group] <- reverseComplement(; premature.tx[names(premature.tx) %in% anot.pre[strand(anot.pre) == '-', ]$premature_group]; ). names(premature.tx) <- anot.pre$premature_group # paste0(a",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:7388,message,message,7388,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['message'],['message']
Integrability,"ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test; Running tests...; Test project /salmon/build; Start 1: unit_tests; 1/2 Test #1: unit_tests ....................... Passed 0.37 sec; Start 2: salmon_read_test_quasi; 2/2 Test #2: salmon_read_test_quasi ........... Passed 1.80 sec. 100% tests passed, 0 tests failed out of 2. Total Test time (real) = 2.17 sec; ```. The `make test` command itself runs the test the builds the index and maps the reads against it. Either way, I can do that explicitly too (from within build):. ```; $ ./src/salmon index -t ../sample_data/transcripts.fasta -i sample_idx; ```. returns succesfully with a built index. ```; ...; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] contig count for validation: 23; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] Total # of Contigs : 23; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] Total # of numerical Contigs : 23; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] Total # of contig vec entries: 36; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] bits per offset entry 6; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] Done constructing the contig vector. 24; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] # segments = 23; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] total length = 19592; [2023-03-10 05:51:33.748] [puff::index::jointLog] [info] Reading the reference files ...; [2023-03-10 05:51:33.750] [puff::index::jointLog] [info] positional integer width = 15; [2023-03-10 05:51:33.750] [puff::index::jointLog] [info] seqSize = 19592; [2023-03-10",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:3361,wrap,wrapping,3361,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['wrap'],['wrapping']
Integrability,"estion related to a strange message in the log out file after Salmon indexing on a very small genome with my own generated transcriptome and decoy. I'm running Salmon v1.0.0 index on the transcriptome of Candida parapsilosis which has a small genome of 26mbp. I created the transcriptome using Cufflinks gffread on my reference genome fasta and gff3. I created the decoy by concatenating the whole genome to the transcriptome [as it was described in the manual](https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode). . I am running using the following options:. `salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i cpar_salmon_index -k 31; `. After indexing using a kmer size threshold of -k 31, I see the following message in the log out file ""filter size not provided. ntHll estimated 12754610 distinct k-mers, setting filter size to 2^28."" . 2^28 seems very high compared to 31 bp set using -k 31. I'm also curious why, after setting a k size, it printed the message ""filter size not provided."". I've pasted a more complete snippet of the log out file text below. Does everything look like it's run successfully? I'm concerned since I am running on a small genome and with my own generated decoy and transcriptome. Does it look like this running as it should, or is there a bug that I should provide more details about?. > [puff::index::jointLog] [info] Filter size not provided; ; > estimating from number of distinct k-mers; > [puff::index::jointLog] [info] ntHll estimated 1275461; > 0 distinct k-mers, setting filter size to 2^28; > Threads = 12; > Vertex length = 31; > Hash functions = 5; > Filter size = 268435456; > Capacity = 2; > Files: ; > cpar_salmon_index/ref_k31_fixed.fa; > --------------------------------------------------------------------------------; > Round 0, 0:268435456; > Pass	Filling	Filtering; > 1	0	8	; > 2	4	0; > True junctions count = 18712; > False junctions count = 40617; > Hash table size = 59329; > Candidate m",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/510:1026,message,message,1026,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/510,1,['message'],['message']
Integrability,"expression matrices with high sequencing depth depending on amount of mapped reads, if I understand well. >Use Alevin w/o any modification to the fastq on both of your sample to generate the gene count matrices. I already did that, in downstream analyses I have a batch effect issue related to the sequencing depth. >that's why we recommend using the Seurat package downstream of the Alevin quantified matrices. I have some experience with downstream analyses with Seurat, Pagoda, Scater, scanpy and a few other tools, and I am aware of batch correction methods like CCA or MNN. But that is not what I am looking for here. I did both CCA and MNN but I loose some important information in the resulting eigenspaces or corrected matrix. I believe the proper way to correct my batch effect is to simply fix the difference between my two libraries, ie. the sequencing depth in this case. As I explained in my first message, cellranger aggregate (subsampling based on the amount of mapped reads) works very well in my case, correct the effect without any loss or modification of important genes in our scientific question. Not CCA or MNN. I would like to be able to do the same from the alevin quantifications. So I am looking for a proper way to apply a correction before/during/after the alevin quantification, in a way similar to what cellranger do with STAR. Alternatively, could a subsampling covariate be added to the probalistic quantification model of alevin (if I understand it well), in sort that such a discrepency bewteen samples would be corrected?. I did look at the mappedUMI file:. ![image](https://user-images.githubusercontent.com/34892073/47551835-85ef9380-d903-11e8-893f-2a684576437b.png). So an option you would recommend is to simply compute the subsampling coefficient for a median ratio bewteen samples? I am expecting quite uneven distributions/variance in the mappedUMI between samples (partly due to a huge difference in term of proliferation that occur with a fraction of cells",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913:1729,message,message,1729,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913,2,['message'],['message']
Integrability,"fastq.gz |head -n 4`; @SRR6327122.1 1 length=88; CGGCCACAAGATCGCCTTTTTATCCCTCGCCCAGAGCACCCCCCGACCCCACATCCCCTGCTTCACGGCCCCCCTCGCGGCCTACCCG; +SRR6327122.1 1 length=88; --7-<7----7---77----77A-7--7-A7-7---7-A-A7<F-777-77-A---A<A----77--77------------7------. * Which which program options were used?; One can download the data and results tarball; [bcNotFound-2018-07-19.tar.gz](https://github.com/COMBINE-lab/salmon/files/2211985/bcNotFound-2018-07-19.tar.gz).; First, I indexed the reference using:; `salmon index -k 31 -t transposon_sequence_set.fa -i index`; Then, I ran Alevin using the following command:; `salmon alevin -l ISR -1 SRR6327122_1.fastq.gz -2 SRR6327122_2.fastq.gz --chromium -i index -p 2 -o alevin_output --tgMap transposon_sequence_set.fa.tsv --whitelist cell_barcode_seq.txt --dumpCsvCounts`. **Expected behavior**; A clear and concise description of what you expected to happen.; The count matrix be saved when Alevin is done. **Screenshots**; The full output messages are:; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to alevin_output/logs; ### salmon (single-cell-based) v0.10.2; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { SRR6327122_1.fastq.gz }; ### [ mates2 ] => { SRR6327122_2.fastq.gz }; ### [ chromium ] => { }; ### [ index ] => { index }; ### [ threads ] => { 2 }; ### [ output ] => { alevin_output }; ### [ tgMap ] => { transposon_sequence_set.fa.tsv }; ### [ whitelist ] => { cell_barcode_seq.txt }; ### [ dumpCsvCounts ] => { }. [2018-07-19 18:24:03.053] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-19 18:24:03.059] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 87 Million barc",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:3210,message,messages,3210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['message'],['messages']
Integrability,fix typos in help message,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/26:18,message,message,18,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/26,1,['message'],['message']
Integrability,"g build step for 'libtbb'; cd /opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss && make ""CXXFLAGS= -UDO_ITT_NOTIFY"" lambdas=1 compiler=gcc cfg=release tbb_build_prefix=LIBS; make[3]: Entering directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss'; Created ./build/LIBS_release and ..._debug directories; make -C ""./build/LIBS_debug"" -r -f ../../build/Makefile.tbb cfg=debug; make[4]: Entering directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss/build/LIBS_debug'; ../../build/Makefile.tbb:31: CONFIG: cfg=debug arch=intel64 compiler=gcc target=linux runtime=cc4.8_libc2.15_kernel4.0.9; g++ -o x86_rtm_rw_mutex.o -c -MMD -DTBB_USE_DEBUG -DDO_ITT_NOTIFY -g -O0 -DUSE_PTHREAD -m64 -mrtm -fPIC -D__TBB_BUILD=1 -Wall -Wno-parentheses -Wno-non-virtual-dtor -UDO_ITT_NOTIFY -std=c++0x -D_TBB_CPP0X -I../../src -I../../src/rml/include -I../../include ../../src/tbb/x86_rtm_rw_mutex.cpp; /tmp/ccgalJzL.s: Assembler messages:; /tmp/ccgalJzL.s:628: Error: no such instruction: `xtest'; /tmp/ccgalJzL.s:656: Error: no such instruction: `xabort $255'; /tmp/ccgalJzL.s:665: Error: no such instruction: `xabort $255'; /tmp/ccgalJzL.s:671: Error: no such instruction: `xend'; /tmp/ccgalJzL.s:840: Error: no such instruction: `xbegin .L56'; /tmp/ccgalJzL.s:1012: Error: no such instruction: `xbegin .L73'; /tmp/ccgalJzL.s:1269: Error: no such instruction: `xabort $255'; make[4]: *** [x86_rtm_rw_mutex.o] Error 1; make[4]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss/build/LIBS_debug'; make[3]: *** [tbb] Error 2; make[3]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss'; make[2]: *** [libtbb-prefix/src/libtbb-stamp/libtbb-build] Error 2; make[2]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2'; make[1]: *** [CMakeFiles/libtbb.dir/all] Error 2; make[1]: Leaving directory `/opt/local/salmon-index/resources/salmo",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/20:1148,message,messages,1148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/20,1,['message'],['messages']
Integrability,"good suggestion. [https://sites.google.com/site/ummslogos/_/rsrc/1489610858836/home/apple-icon-76x76.png]. Javier E. Irazoqui, PhD; Associate Professor; Department of Microbiology and Physiological Systems; UMass Medical School. 368 Plantation Street; Albert Sherman Center; Room AS8.1053; Worcester, MA 01605. (774) 455-3797; Skype: javierirazoqui. Confidentiality Notice:; This e-mail message, including any attachments, is for the sole use of the intended recipient(s) and may contain confidential, proprietary and privileged information. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please contact the sender immediately and destroy or permanently delete all copies of the original message. On Feb 12, 2018, at 12:21 PM, Marcel Bargull <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi @jirazoqui<https://github.com/jirazoqui> and @pdellorusso<https://github.com/pdellorusso>,; beware that if you install via a .tar.gz file, you make conda ignore all dependencies. It's somewhat equivalent to conda install --no-deps ... and thus I wouldn't recommend doing something like that.; Until we fix the dependencies in Bioconda, can you, if possible, use a separate Conda environment for salmon with conda create -c bioconda -c conda-forge --name salmon salmon. In this new environment you wouldn't have any dependency version conflict. ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364996006>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AiohHe_b7YX4kqzddLHJT7ZK6s1PhJgoks5tUHM1gaJpZM4SAonB>.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364996252:387,message,message,387,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364996252,5,"['depend', 'message']","['dependencies', 'dependency', 'message']"
Integrability,"have a public 10xV2 sample that I am reprocessing ([SRR13313130](https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR13313130)). More specifically, I believe that the sample should be **10X Genomics 5' v1**. I am using the following command:. ```; ID=5309-CT-2; R1=../Reads/5309-CT-2_S01_L005_R1_001.fastq.gz; R2=../Reads/5309-CT-2_S01_L005_R2_001.fastq.gz. TYPE=10xV2; #for MAP, download from UCSC Table Browser, and remove 1st line (and then manually add SARS-COV-2 genes); MAP=/path/to/SARS_COV_2-hg38_RefSeq_2column.txt; REF=/path/to/SARS_COV_2-hg38_salmon; CBWL=/path/to/737K-august-2016.txt. salmon alevin -l ISR --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL; ```. If I use the V3 barcode list, then I _don't_ get an error message. However, I got more discordant cell counts between CellRanger and STARsolo. The Kallisto cell barcode recovery rate was also low (<10%). So, I thought there error was that different cell barcodes should be used for this sample. I think that matches, what I saw on this FAQ page from 10x Genomics:. https://kb.10xgenomics.com/hc/en-us/articles/115004506263-What-is-a-barcode-whitelist-. So, I downloaded the [737k-august-2016.txt](https://github.com/10XGenomics/cellranger/blob/master/lib/python/cellranger/barcodes/737K-august-2016.txt) file from 10x, and I am testing using that. However, I am now receiving the following error message:. ```; [2021-07-07 17:07:44.192] [alevinLog] [info] Done importing white-list Barcodes; [2021-07-07 17:07:44.192] [alevinLog] [error] Wrong whitelist provided; Please check https://salmon.readthedocs.io/en/develop/alevin.html#whitelist; ```. On the [website linked](https://salmon.readthedocs.io/en/develop/alevin.html#whitelist), I see a note saying ""**Not 10x 724k whitelist**"". However, I apologize that I don't think I understand this note (and the exact file name is different). Should I be doing some differently when running Alevin for this sample?. Thank you very much. Sincerely,; Charles",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682:1402,message,message,1402,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682,1,['message'],['message']
Integrability,"he premature sequences on the minus strand as I had to do for the mature sequences. Yet, I did that anyway. I initially did test my protocol to ensure it produced identical transcript sequences to Gencode, but I only did this for mature sequences. All seemed fine for both + and - strand transcripts. After your feedback, I compared the premature sequences in my transcript fasta against the transcript fasta from Gencode. As you can see in the smoothed dot plots below, the premature sequences of transcripts on the minus strand are in the wrong orientation and have the wrong complementarity!. ![Screenshot from 2021-04-24 00-35-05](https://user-images.githubusercontent.com/10429333/115947355-0d96c880-a495-11eb-92a6-d8d2233c8d2b.png). I included my R code below for this test case for anyone who might stumble upon this issue. Under the code headers ‚ÄúMature transcript sequences‚Äù and ‚ÄúPremature transcript sequences‚Äù, you can observe that I used identical protocols for sequence subsetting, yet in the mature case the strand information in the GRanges seems to be disregarded when subsetting from Biostrings, but in the premature case the strand information is used. Of course, this problem is out of the scope of this forum so it will be okay to close this issue. I will reach out to the developers of GenomicRanges and Biostrings to point out this potential problem and seek their guidance. Thank you again for all your help. Rached. ```; # setwd('wd'). options(scipen = 9999). libraries <- lapply(; X = c('data.table', 'magrittr', 'rtracklayer', 'Biostrings', 'reshape2', 'ggplot2'),; FUN = library, character.only = TRUE; ). ### Inputs ####; anot.gtf <- '../../shared_data/annotations/Ensembl/Homo_sapiens.GRCh38.101.gtf.gz' # Ensembl GTF; genome.fasta <- '../../shared_data/annotations/Ensembl/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz' # Genome fasta from Ensembl; gencode.tx.fasta <- '../../shared_data/annotations/Gencode/gencode.v35.transcripts.fa.gz' # Gencode transcript FASTA. do",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:3164,protocol,protocols,3164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['protocol'],['protocols']
Integrability,"hello! have you by any chance figured it out? I have quite similiar problem. . I am running salmon v.1.1.0 on my ubuntu machine with 128GB of RAM. I set the limit for vitrual memory at ~75GB to not overload the system:. ```bash; ‚óã ‚Üí ulimit -a; core file size (blocks, -c) 0; data seg size (kbytes, -d) unlimited; scheduling priority (-e) 0; file size (blocks, -f) unlimited; pending signals (-i) 514510; max locked memory (kbytes, -l) 65536; max memory size (kbytes, -m) unlimited; open files (-n) 1024; pipe size (512 bytes, -p) 8; POSIX message queues (bytes, -q) 819200; real-time priority (-r) 0; stack size (kbytes, -s) 8192; cpu time (seconds, -t) unlimited; max user processes (-u) 514510; virtual memory (kbytes, -v) 75331648; file locks (-x) unlimited; ```. I am building the index with the following command:. ```bash; salmon index \; -t /mnt/rescomp/ref/hg38/gentrome.fa.gz \; -i /mnt/rescomp/ref/hg38/salmon_index -k 31 \; --decoys /mnt/rescomp/ref/hg38/decoys.txt \; --threads 16 \; --gencode |& tee logs/salmon_index.log; ```. gentrome is created based on the gencode transcriptome (v33) and genome primary algnment sequence (GRCh38.p13). [salmon_index.log](https://github.com/COMBINE-lab/salmon/files/4392725/salmon_index.log). The output directory:; ```; ‚óã ‚Üí ll /mnt/rescomp/ref/hg38/salmon_index; total 7.9G; drwxr-sr-x 1 37304 723 4.0K Mar 27 01:36 ./; drwxr-sr-x 1 37304 723 4.0K Mar 26 22:13 ../; -rw-r--r-- 1 37304 723 888K Mar 27 00:32 complete_ref_lens.bin; -rw-r--r-- 1 37304 723 31K Mar 27 00:27 duplicate_clusters.tsv; -rw-r--r-- 1 37304 723 674M Mar 27 01:46 path.bin; -rw-r--r-- 1 37304 723 55 Mar 27 01:46 pre_indexing.log; -rw-r--r-- 1 37304 723 40K Mar 27 01:46 ref_indexing.log; -rw-r--r-- 1 37304 723 3.3G Mar 27 00:32 ref_k31_fixed.fa; -rw-r--r-- 1 37304 723 703 Mar 27 00:32 ref_sigs.json; -rw-r--r-- 1 37304 723 4.1G Mar 27 01:36 tmp_dbg.bin; ```; I know for a fact that the memory usage did not go over 16GB. Any hints how to proceed?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-604919589:539,message,message,539,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-604919589,1,['message'],['message']
Integrability,"hey @kvittingseerup, glad to hear you find refgenie useful. . Currently, there is no way to view the recipe inputs using the web interface or server API. That said, it is possible to track this information down... For example, for [`hg38/salmon_sa_index`](http://refgenomes.databio.org/v2/asset/hg38/salmon_sa_index/splash?tag=default) asset look at the ""asset_parents"" section to find out what assets were used to create the salmon index. Then, by looking at [this file](https://github.com/refgenie/refgenomes.databio.org/blob/master/asset_pep/recipe_inputs.csv) you can find out what are the sources of the files we used to create the parent `fasta*` assets in question. . As an aside, we're working on a [new recipe system](https://github.com/refgenie/refgenie/issues/198) that will enable serving this kind of data on http://refgenomes.databio.org/.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/614#issuecomment-770049957:129,interface,interface,129,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/614#issuecomment-770049957,1,['interface'],['interface']
Integrability,"hi @k3yavi,. Thanks for your help! I'm glad it's a quick fix. As for the dataset, I am not sure why the read length is 25bp. The [paper I pulled it from](https://www.ncbi.nlm.nih.gov/pubmed/29545397) stated that they used the standard DropSeq protocol and did not seem to mention and changes in CB and UMI length. In the case that they did change those lengths, what options can I use to set the pipeline?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258#issuecomment-408179330:243,protocol,protocol,243,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258#issuecomment-408179330,1,['protocol'],['protocol']
Integrability,"i didn't try to fix the star index, it was created automatically by the; bcbio_nextgen pipeline i was using. i did add my story to the issue in the; star github repo mentioned in the biostars thread:; https://github.com/alexdobin/STAR/issues/1140. On Tue, Aug 2, 2022 at 11:27 AM HeedukOh ***@***.***> wrote:. > i ran into the same problem and apparently it's a STAR issue:; > https://www.biostars.org/p/486346/; >; > ""...it seems STAR is doing something during the indexing step which is; > causing a slight mismatch for 23 of the transcripts.""; >; > Hi,; > Thanks for the reply!; > I see that you used Salmon for indexing to get around this issue. Did you; > figure out a way to make STAR work after that, or did you stick with Salmon?; >; > ‚Äî; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/785#issuecomment-1202823526>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABGJSQSM6CJ2GDKQF3UOZKLVXE47NANCNFSM5ZOT3OOQ>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/785#issuecomment-1205698238:1047,Message,Message,1047,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/785#issuecomment-1205698238,1,['Message'],['Message']
Integrability,"ile describes the option '-t transcripts.fa' for this purpose:. > ./bin/salmon quant -t transcripts.fa -l <LIBTYPE> -a aln.bam -o salmon_quant. Also the command-line help 'salmon quant --help-alignment' names the same options:. alignment input options:. -l [ --libType ] arg Format string describing the library ; type; -a [ --alignments ] arg input alignment (BAM) file(s).; -t [ --targets ] arg FASTA format file containing target ; transcripts. The 'salmon quant' command doesn't recognize either the short or long form of this option and stops execution immediately. There is no difference if the full set of options for a quantification run are provided or only this option. . **To Reproduce**; salmon quant -t Homo_sapiens.GRCh37.87.cdna.all.fa; salmon quant --targets Homo_sapiens.GRCh37.87.cdna.all.fa. Specifically, please provide at least the following information:. * Which version of salmon was used?; 0.12.0 and 0.11.3; * How was salmon installed (compiled, downloaded executable, through bioconda)?; downloaded executable (salmon-0.12.0_linux_x86_64.tar.gz, salmon-0.11.3-linux_x86_64.tar.gz); * Which reference (e.g. transcriptome) was used?; any, independant of transcriptome; * Which read files were used?; not applicable; * Which which program options were used?; other options than '-t/--targets' were irrelevant for provoking the error . **Expected behavior**; Salmon should run and process the alignment file in BAM format. **Screenshots**; --- Error messages ------------------; Exception : [unrecognised option '-t']. Exiting.; Exception : [unrecognised option '--targets']. Exiting.; --------------------------------------. **Desktop (please complete the following information):**; - OS: Ubuntu Linux; - Version:; Linux nnn 4.15.0-36-generic #39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux; No LSB modules are available.; Distributor ID:	Ubuntu; Description:	Ubuntu 16.04.4 LTS; Release:	16.04; Codename:	xenial. **Additional context**; none",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/343:1794,message,messages,1794,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/343,1,['message'],['messages']
Integrability,"in:: Calling scalable_allocation_command(TBBMALLOC_CLEAN_ALL_BUFFERS, 0);; allowedIn: 21; Max Junction ID: 14896947; seen.size():119175585 kmerInfo.size():14896948; approximateContigTotalLength: 1087128541; counters for complex kmers:; (prec>1 & succ>1)=3126880 | (succ>1 & isStart)=773 | (prec>1 & isEnd)=671 | (isStart & isEnd)=30; contig count: 24974474 element count: 3020582944 complex nodes: 3128354; # of ones in rank vector: 24974473; [2022-06-01 18:28:09.708] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2022-06-01 18:28:09.708] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory Mus_musculus.GRCm39_v1.8.0_decoy.index; size = 3020582944. | Loading contigs | Time = 469.49 ms. size = 3020582944. | Loading contig boundaries | Time = 242.8 ms. Number of ones: 24974473; Number of ones per inventory item: 512; Inventory entries filled: 48779; 24974473; [2022-06-01 18:28:15.208] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2022-06-01 18:28:15.619] [puff::index::jointLog] [info] contig count for validation: 24,974,473; [2022-06-01 18:28:31.732] [puff::index::jointLog] [info] Total # of Contigs : 24,974,473; [2022-06-01 18:28:31.732] [puff::index::jointLog] [info] Total # of numerical Contigs : 24,974,473; [2022-06-01 18:28:33.958] [puff::index::jointLog] [info] Total # of contig vec entries: 345,523,986; [2022-06-01 18:28:33.958] [puff::index::jointLog] [info] bits per offset entry 29; [2022-06-01 18:28:53.341] [puff::index::jointLog] [info] Done constructing the contig vector. 24974474; [2022-06-01 18:29:07.368] [puff::index::jointLog] [info] # segments = 24,974,473; [2022-06-01 18:29:07.368] [puff::index::jointLog] [info] total length = 3,020,582,944; [2022-06-01 18:29:07.850] [puff::index::jointLog] [info] Reading the reference files ...; [2022-06-01 18:29:20.813] [puff::index::jointLog] [info] positional integer width = 32; [2022-06-01 18:29:20.813] [pu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783:12826,wrap,wrapping,12826,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783,1,['wrap'],['wrapping']
Integrability,"in; drwxrwxr-x. 2 modules modules 4096 Dec 6 10:59 include; lrwxrwxrwx. 1 modules modules 5 Dec 6 11:10 lib -> lib64; drwxrwxr-x. 2 modules modules 4096 Dec 6 11:07 lib64; ls -al $ROOT_LIBTBB; total 16; drwxrwxr-x. 4 modules modules 4096 Dec 6 11:48 .; drwxrwxr-x. 3 modules modules 4096 Dec 6 11:40 ..; drwxrwxr-x. 3 modules modules 4096 Dec 6 11:40 include; lrwxrwxrwx. 1 modules modules 5 Dec 6 11:48 lib -> lib64; drwxrwxr-x. 2 modules modules 4096 Dec 6 11:40 lib64. ```. Even after I had hacked up the CMakeLists.txt file to set some of these it still wouldn't build. For instance in that file:; ```; ## Try and find TBB first; if(DEFINED ENV{ROOT_LIBTBB}); message(""ROOT_LIBTBB in env""); set(ROOT_LIBTBB ); set(TBB_DIR $ENV{ROOT_LIBTBB}); set(TBB_INCLUDE_DIRS ${TBB_DIR}/include); set(TBB_INCLUDE_DIR ${TBB_DIR}/include); set(TBB_LIBRARY_DIRS ${TBB_DIR}/lib); set(TBB_LIBRARY ${TBB_DIR}/lib); set(TBB_LIB_DIR ${TBB_DIR}/lib); set(TBB_VERSION ""2019.6""); set(TBB_FOUND TRUE); else(); message(""ROOT_LIBTBB NOT in env""); find_package(TBB 2018.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy); endif(). if (${TBB_FOUND}); ```. But apparently that wasn't enough, because:. ```; cmake \; -DCMAKE_INSTALL_PREFIX:PATH=$TOPDIR \; .. ...; TBB_LIBRARIES = ; -- Configuring done; CMake Error at external/pufferfish/external/twopaco/CMakeLists.txt:11 (add_dependencies):; The dependency target ""tbb"" of target ""graphdump"" does not exist.; ```. This doesn't work obviously, but here are the mods to CMakeLists.txt that I tried:. ```; diff -au CMakeLists.txt.dist CMakeLists.txt; --- CMakeLists.txt.dist 2019-12-06 10:40:58.430641796 -0800; +++ CMakeLists.txt 2019-12-06 13:14:57.292041895 -0800; @@ -387,7 +387,10 @@; ##; set(Boost_ADDITIONAL_VERSIONS ""1.59.0"" ""1.60.0"" ""1.61.0"" ""1.62.0"" ""1.63.0"" ""1.64.0"" ""1.65.0"" ""1.66.0"" ""1.67.0"" ""1.68.0"" ""1.69.0"" ""1.70.0"" ""1.71.0""); if (NOT BOOST_RECONFIGURE); -find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); +set(BOOST_INCLUDE",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460:2311,message,message,2311,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460,1,['message'],['message']
Integrability,"ing incorrectly_**. Now to my answer(s) and logic:; 1. With fastp, I am not sure if adapter trimming happens first and then quality trimming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondri",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1161,adapter,adapter,1161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['adapter'],['adapter']
Integrability,"ing the matrix combination step. I have downloaded edgeR to my home directory on my school's supercomputer, in addition to many other unsuccessful attempts at solving the issue. My main issue is that I've used the same code before without this issue, so I don't know exactly what is wrong now. I'm fairly new to bioinformatics and find it confusing, so any help is appreciated!. Here is my job script:. #!/bin/bash; #SBATCH --partition=debug; #SBATCH --account=PAS1725; #SBATCH --job-name=salmon_part2_cd-hit; #SBATCH --time=01:00:00; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=48. module load python; module load trinityrnaseq/2.15.1; module load samtools; module load salmon/1.4.0; module load R/4.1.0-gnu9.1; R. /apps/trinityrnaseq/2.15.1/util/abundance_estimates_to_matrix.pl --est_method salmon --gene_trans_map /fs/scratch/PAS1725/transcriptomics/trinity_cd-hit_fasta.gene_trans_map --name_sample_by_basedir --out_prefix transcript_counts /fs/scratch/PAS1725/transcriptomics/salmon_part1_cd-hit_output_files/A1/quant.sf ... [other files omitted for space]. Here is my error message:. /apps/trinityrnaseq/2.15.1/util/support_scripts/run_TMM_scale_matrix.pl --matrix transcript_counts.isoform.TPM.not_cross_norm > transcript_counts.isoform.TMM.EXPR.matrixCMD: R --no-save --no-restore --no-site-file --no-init-file -q < transcript_counts.isoform.TPM.not_cross_norm.runTMM.R 1>&2 ; > library(edgeR); Error in library(edgeR) : there is no package called ‚ÄòedgeR‚Äô; Execution halted; Error, cmd: R --no-save --no-restore --no-site-file --no-init-file -q < transcript_counts.isoform.TPM.not_cross_norm.runTMM.R 1>&2 died with ret (256) at /apps/trinityrnaseq/2.15.1/util/support_scripts/run_TMM_scale_matrix.pl line 105.; Error, CMD: /apps/trinityrnaseq/2.15.1/util/support_scripts/run_TMM_scale_matrix.pl --matrix transcript_counts.isoform.TPM.not_cross_norm > transcript_counts.isoform.TMM.EXPR.matrix died with ret 6400 at /apps/trinityrnaseq/2.15.1/util/abundance_estimates_to_matrix.pl line 386.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/855:1347,message,message,1347,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/855,1,['message'],['message']
Integrability,"inly does seem very low. To answer your specific questions first:; 1) I'm not sure --- let's try tor find out; 2) I don't think so (if they are part of your index, they should be aligned against); 3) If there are many transcripts / targets you expect to be sequenced but which aren't present in this set, that can affect the mapping rate, but not likely to take it down to 6%. Here are the things I'd investigate --- roughly in order: . 1) In addition to the fraction of reads STAR mapped (which you report above), what fraction of the reads are assigned to features by featureCounts? In some cases, when there is a failure of rRNA depletion of polyA selection, you can end up with an experiment where most of the sequenced RNA comes from rRNA not present in the reference transcriptome. In this case, STAR will be able to align the reads to the genome, but you won't see these reads mapping to annotated features (and you also won't see them showing up in your transcript level quantifications). So, it may be worth to take a look at the count of reads assigned to the feature set of genes by featureCounts. 2) Above, it looks like a considerable number of fragments were discarded due to no alignment reaching the required alignment score (`11,448,458` fragments discarded because of this). Have you tried to adapter / quality trim the data? Does this have any effect on the mapping rate?. 3) If the above don't reveal any clues, I'd be happy to try to take a look at the data if you can share it. I'd be quite surprised if STAR is aligning a lot of reads *to transcriptome features* that are being missed by salmon. Nonetheless, if you pass the proper flags to STAR (including `--quantMode TranscriptomeSAM`), then you can use the SAM/BAM file generated by STAR to perform quantification with salmon (i.e. use STAR's alignments to do _transcript-level_ quantification). I'd be happy to help dig further on any of these, so please feel free to reach out if you find anything interesting. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054:1381,adapter,adapter,1381,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054,1,['adapter'],['adapter']
Integrability,"isabling range-factorized equivalence classes. ; [2021-05-19 18:46:25.303] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-19 18:46:25.303] [jointLog] [info] parsing read library format; [2021-05-19 18:46:25.303] [jointLog] [info] There is 1 library.; [2021-05-19 18:46:25.429] [jointLog] [info] Loading pufferfish index; [2021-05-19 18:46:25.429] [jointLog] [info] Loading dense pufferfish index.; [2021-05-19 18:46:27.087] [jointLog] [info] done; [2021-05-19 18:46:27.087] [jointLog] [info] Index contained 141,069 targets; [2021-05-19 18:46:32.618] [jointLog] [info] Number of decoys : 0; [2021-05-19 18:46:33.428] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-19 18:49:27.444] [jointLog] [error] . [2021-05-19 18:49:27.506] [jointLog] [error] Processing reads : Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid. ```; For rabbitQC's log; ```; Detecting adapter sequence for read1...; CCCAGCCATAACACAGTATCAAACTCCACTATTTGTCTGATCCGTACTTATTACAGCCGT. Detecting adapter sequence for read2...; CCAACTTGGTCTACAAGACGCCACATCCCCTATTATAGAAGAGCTAATAAATTTCCATGA. Read1 before filtering:; total reads: 44178187; total bases: 2140649565; Q20 bases: 1899503304(88.7349%); Q30 bases: 1839878933(85.9496%). Read1 after filtering:; total reads: 34172299; total bases: 1775386278; Q20 bases: 1762557969(99.2774%); Q30 bases: 1737891531(97.8881%). Read2 before filtering:; total reads: 44178187; total bases: 2233386484; Q20 bases: 2180294210(97.6228%); Q30 bases: 2141791820(95.8988%). Read2 aftering filtering:; total reads: 34172299; total bases: 1749324083; Q20 bases: 1731172028(98.9623%); Q30 bases: 1700577336(97.2134%). Filtering result:; reads passed filter: 68344598; reads failed due to low quality: 11353966; reads failed due to too many N: 40048; reads failed due to too short: 8617762; reads with adapter trimmed: 382600; bases trimmed due to adapters: 6",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660:2507,adapter,adapter,2507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660,1,['adapter'],['adapter']
Integrability,"latest commit https://github.com/COMBINE-lab/salmon/commit/093b5a98e16cab7c3934c0a7c222549644c39728 will generalize the `write_fastq` for all the protocols. @PeteHaitch Thanks again for making the pull request, do let us know how does the quantified matrix looks at the end for the Cel-Seq2 protocol or what more we can do in Alevin to help improve the results. Closing this issue for now but feel free to open it again if have any other problem.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418789461:146,protocol,protocols,146,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418789461,2,['protocol'],"['protocol', 'protocols']"
Integrability,"les modules 5 Dec 6 11:48 lib -> lib64; drwxrwxr-x. 2 modules modules 4096 Dec 6 11:40 lib64. ```. Even after I had hacked up the CMakeLists.txt file to set some of these it still wouldn't build. For instance in that file:; ```; ## Try and find TBB first; if(DEFINED ENV{ROOT_LIBTBB}); message(""ROOT_LIBTBB in env""); set(ROOT_LIBTBB ); set(TBB_DIR $ENV{ROOT_LIBTBB}); set(TBB_INCLUDE_DIRS ${TBB_DIR}/include); set(TBB_INCLUDE_DIR ${TBB_DIR}/include); set(TBB_LIBRARY_DIRS ${TBB_DIR}/lib); set(TBB_LIBRARY ${TBB_DIR}/lib); set(TBB_LIB_DIR ${TBB_DIR}/lib); set(TBB_VERSION ""2019.6""); set(TBB_FOUND TRUE); else(); message(""ROOT_LIBTBB NOT in env""); find_package(TBB 2018.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy); endif(). if (${TBB_FOUND}); ```. But apparently that wasn't enough, because:. ```; cmake \; -DCMAKE_INSTALL_PREFIX:PATH=$TOPDIR \; .. ...; TBB_LIBRARIES = ; -- Configuring done; CMake Error at external/pufferfish/external/twopaco/CMakeLists.txt:11 (add_dependencies):; The dependency target ""tbb"" of target ""graphdump"" does not exist.; ```. This doesn't work obviously, but here are the mods to CMakeLists.txt that I tried:. ```; diff -au CMakeLists.txt.dist CMakeLists.txt; --- CMakeLists.txt.dist 2019-12-06 10:40:58.430641796 -0800; +++ CMakeLists.txt 2019-12-06 13:14:57.292041895 -0800; @@ -387,7 +387,10 @@; ##; set(Boost_ADDITIONAL_VERSIONS ""1.59.0"" ""1.60.0"" ""1.61.0"" ""1.62.0"" ""1.63.0"" ""1.64.0"" ""1.65.0"" ""1.66.0"" ""1.67.0"" ""1.68.0"" ""1.69.0"" ""1.70.0"" ""1.71.0""); if (NOT BOOST_RECONFIGURE); -find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); +set(BOOST_INCLUDEDIR ""/usr/include/boost169""); +set(BOOST_LIBRARYDIR ""/usr/lib64/boost169""); +set(Boost_FOUND 1); +; message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); message(""Boost_FOUND = ${Boost_FOUND}""); @@ -571,7 +574,22 @@; endif(); ; ## Try and find TBB first; -find_package(TBB 2018.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy); +if(DEF",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460:2686,depend,dependency,2686,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460,1,['depend'],['dependency']
Integrability,"llocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_insert_loop<std::integral_constant<bool, false>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=this@entry=0x7fffffffc520, hv=..., b=..., key=...); at /u/user/tmp/salmon/include/cuckoohash_map.hh:1086; #14 0x00000000007a8540 in uprase_fn<std::__cxx11::basic_string<char>&, cuckoohash_map<Key, T, Hash, KeyEqual, Allocator, SLOT_PER_BUCKET>::upsert(K&&, F, Args&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>; Args = {int}; Key = std::__cxx11::basic_string<char>; T = unsigned int; Hash = BarcodeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #12 0x00000000007a69ac in cuckoo_fast_double<std::integral_constant<bool, false>, std::integral_constant<bool, true> >; (current_hp=<optimized out>, this=0x7fffffffc520) at /u/user/tmp/salmon/include/cuckoohash_map.hh:1583; #13 cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:8781,Protocol,ProtocolT,8781,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,3,"['Protocol', 'protocol']","['ProtocolT', 'protocols']"
Integrability,"llocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_insert_loop<std::integral_constant<bool, false>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=this@entry=0x7fffffffc520, hv=..., b=..., key=...); at /u/user/tmp/salmon/include/cuckoohash_map.hh:1086; #14 0x00000000007a8540 in uprase_fn<std::__cxx11::basic_string<char>&, cuckoohash_map<Key, T, Hash, KeyEqual, Allocator, SLOT_PER_BUCKET>::upsert(K&&, F, Args&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>; Args = {int}; Key = std::__cxx11::basic_string<char>; T = unsigned int; Hash = BarcodeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #15 upsert<std::__cxx11::basic_string<char>&, densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:10743,Protocol,ProtocolT,10743,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,6,"['Protocol', 'protocol']","['ProtocolT', 'protocols']"
Integrability,"lmonIndex::build(this=<unavailable>, indexDir=(m_pathname = ""athal_index""), idxOpt=<unavailable>) at SalmonIndex.hpp:76; frame #17: 0x00000000009839c3 salmon`salmonIndex(argc=<unavailable>, argv=<unavailable>, (null)=<unavailable>) at BuildSalmonIndex.cpp:236; frame #18: 0x000000000097a673 salmon`main [inlined] std::__1::__function::__value_func<int (int, char const**, std::__1::unique_ptr<SalmonIndex, std::__1::default_delete<SalmonIndex> >&)>::operator(this=<unavailable>, __args=<unavailable>, __args=<unavailable>, __args=<unavailable>)(int&&, char const**&&, std::__1::unique_ptr<SalmonIndex, std::__1::default_delete<SalmonIndex> >&) const at functional:1884:16 ; frame #19: 0x000000000097a648 salmon`main [inlined] std::__1::function<int (int, char const**, std::__1::unique_ptr<SalmonIndex, std::__1::default_delete<SalmonIndex> >&)>::operator(this=<unavailable>, __arg=<unavailable>, __arg=<unavailable>, __arg=<unavailable>)(int, char const**, std::__1::unique_ptr<SalmonIndex, std::__1::default_delete<SalmonIndex> >&) const at functional:2556; frame #20: 0x000000000097a648 salmon`main(argc=<unavailable>, argv=<unavailable>) at Salmon.cpp:274; frame #21: 0x000000000046bbf0 salmon`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1_c.c:75:7; ```; Given that the crash is happening in a stream.Put() call, I presume that the stream must not be open and this should have been caught earlier. ```; template <typename StreamType>; class BasicOStreamWrapper {; public:; typedef typename StreamType::char_type Ch;; BasicOStreamWrapper(StreamType& stream) : stream_(stream) {}. void Put(Ch c) {; stream_.put(c);; }; ```; If you can provide any clues as to where in this lengthy backtrace the problem actually begins, it would be appreciated.; I used minimal changes to the raw dist to get this working.; Separately installed dependencies:. cereal 1.3.0.10; libgff 2.0.0; tbb 2020.3; boost-libs 1.72.0. Pufferfish 1.6.0 and staden-io_lib 1.14.8.1 are embedded in the build. Best,. Jason",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/725:7324,depend,dependencies,7324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/725,1,['depend'],['dependencies']
Integrability,"lt still segfaults. It still needed an edit of the CMakeLists.txt file. Still, for future reference:. ```; pversion=1.2.1; package=salmon; TOPDIR=/usr/common/modules/el8/x86_64/software/${package}/${pversion}-CentOS-vanilla; wget https://github.com/COMBINE-lab/salmon/archive/v1.2.1.tar.gz; gunzip -c v1.2.1.tar.gz | tar -xf -; /bin/rm v1.2.1.tar.gz; cd ${package}-${pversion}; mv CMakeLists.txt CMakeLists.txt.dist; cat >mypatch <<'EOD'; --- CMakeLists.txt.dist	2020-04-21 22:31:07.000000000 -0700; +++ CMakeLists.txt	2020-06-09 14:55:02.733885772 -0700; @@ -419,6 +419,10 @@; find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); +message(""Forcing Boost_FOUND to TRUE""); +set(Boost_FOUND TRUE); +set(Boost_LIBRARY_DIRS ""/usr/lib64/boost169""); +set(Boost_LIBRARIES -lboost_iostreams -lboost_filesystem -lboost_system -lboost_timer -lboost_chrono -lboost_program_options); message(""Boost_FOUND = ${Boost_FOUND}""); endif(); ; EOD; patch -p0 <mypatch; module load cmake; module load io_lib; module load libgff; module load libtbb; mkdir build; cd build; export CFLAGS=""-g -O0""; export CXXFLAGS=""-g -O0""; cmake \; -DCMAKE_INSTALL_PREFIX=$TOPDIR \; -DSTADEN_ROOT=$ROOT_IO_LIB \; -DGFF_ROOT=$ROOT_LIBGFF \; -DTBB_ROOT=$ROOT_LIBTBB \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_09.log; make -j 4 2>&1 | tee build_2020_06_09.log. ```. Since it was compiled ""-g -O0"" this time it was easier to step through it. Well, somewhat. In Salmon.cpp line 195 is the last place a break point works. If one is set for 197 it segfaults before reaching it. Line 195 is:. `	 po::store(parsed, vm);; `; I tried briefly to trace inward from there but couldn't make heads or tails of the path it was taking through an endless series of headers.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641612831:722,message,message,722,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641612831,4,['message'],['message']
Integrability,may be try creating a new environment and/or specify the version of salmon you wan't to install ? it can happen sometimes based on the dependency structure already installed in your environment. You can also the pre build binaries from https://github.com/COMBINE-lab/salmon/releases. It's more of an issue with conda than salmon itself. Closing this one but let us know if you still face any issue.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/461#issuecomment-565296541:135,depend,dependency,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/461#issuecomment-565296541,1,['depend'],['dependency']
Integrability,"mming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1324,adapter,adapters,1324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,2,['adapter'],['adapters']
Integrability,"n the 'quant' step. Here is the skinny:; - ERCC + latest human ensembl transcriptome; - Index builds fine -- no apparent issues; - Quant step fails with the following output:. ``` bash; LD_LIBRARY_PATH=~/software/SalmonBeta-0.4.2_DebianSqueeze/lib; ~/software/SalmonBeta-0.4.2_DebianSqueeze/bin/salmon quant -i index/hs_ens_ercc.sidx --libType IU --output output/salmon -1 reads_1.fastq -2 reads_2.fastq; Version Info: This is the most recent version of Salmon.; # salmon (smem-based) v0.4.2; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { index/hs_ens_ercc.sidx }; # [ libType ] => { IU }; # [ output ] => { output/salmon }; # [ mates1 ] => { reads_1.fastq }; # [ mates2 ] => { reads_2.fastq }; Logs will be written to output/salmon/logs; there is 1 lib; [2015-08-23 21:58:57.438] [jointLog] [info] parsing read library format; [bns_restore_core] Parse error reading index/hs_ens_ercc.sidx/bwaidx.amb; ```. I've provided a reproducible and self-contained Snakefile that only depends on the binaries being dumped in `~/software` and the reads_*fastq below. Let me know if there is anything I can do to help. Thanks a bunch!. Harold. ---. ``` python; ercc_fa = 'index/ERCC.fa'; ens_fa = 'index/Homo_sapiens.GRCh38.cdna.all.fa'; ens_ercc_fa = 'index/hs_ens_ercc.fa'; ens_ercc_sidx = 'index/hs_ens_ercc.sidx'. SALMON_PRE = '~/software/SalmonBeta-0.4.2_DebianSqueeze'; SALMON = 'LD_LIBRARY_PATH={0}/lib; {0}/bin/salmon'.format(SALMON_PRE). rule all:; input:; ens_ercc_fa,; ens_ercc_sidx,; 'output/salmon/quant.sf'. rule download_ens:; output:; ens_fa; params:; dl = 'ftp://ftp.ensembl.org/pub/release-81/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'; threads: 1; shell:; 'curl {params.dl} | zcat > {output}'. rule download_ercc:; output:; ercc_fa; params:; dl = 'http://bio.math.berkeley.edu/kallisto/transcriptomes/ERCC.fa.gz'; threads: 1; shell:; 'curl {params.dl} | zcat > {output}'. rule merge_ercc:; input:; ens_fa,; ercc_fa; output:; ens_ercc_fa; shell:; 'cat {input",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/12:1069,depend,depends,1069,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/12,1,['depend'],['depends']
Integrability,"nds ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libcereal.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /A",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:1778,Depend,DependInfo,1778,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['Depend'],['DependInfo']
Integrability,"nerates the compacted colored de Bruijn graph from the input sequence is based on a very elegant algorithm that couples a Bloom filter with an exact hash table, and makes two (or more) passes over the input to identify all of the junctions in the reference (which directly implies all unitigs). To make the algorithm work efficiently, one needs to have an estimate for the number of distinct k-mers that will be encountered in the reference sequence. If the estimate is too big, one wastes memory. If the estimate is too small, the Bloom filter is not big enough, it doesn't filter efficiently, and the algorithm ends up putting way too much data in the exact hash table. In order to determine how to set the Bloom filter size appropriately, we take the following approach. If the Bloom filter size isn't provided directly (_note_: this is _not_ the same as the k-mer size, this is an estimate of the total number of distinct k-mers in the entire input data), then we make a call to a function defined in the [ntCard](https://github.com/bcgsc/ntCard) library. This is a program designed specifically for cardinality estimation of k-mers in sequencing data. Based on the estimated number of distinct k-mers, we use the standard equations (derived from the theory behind Bloom filters) to set the Bloom filter to be of the smallest possible size that still achieves a relatively low, pre-specified, false positive rate. The message you are seeing is that the estimates suggest the Bloom filter should be of size 2^28 *bits*, which is ~ 33.55MB ‚Äî pretty small, actually. This is because ntCard estimated 12,754,610 distinct k-mers (31-mers) in your input dataset, which doesn't seem unreasonable. In short, I think the output you observe here seems completely reasonable and in line with the data you are providing. However, I understand how all of this output might to make sense if you're not familiar with everything going on behind the scenes. Please let me know if this answers your question. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/510#issuecomment-616713186:2418,message,message,2418,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/510#issuecomment-616713186,1,['message'],['message']
Integrability,"nes, ]; anot.pre <- anot.pre[anot.pre$premature_group %in% chosenOnes, ]. # sanity check (make sure strand information is the same for pre and mature RNA counterparts); all(; sort(paste(strand(anot), anot$transcript_id) %>% unique) ==; sort(paste(strand(anot.pre), anot.pre$premature_group) %>% unique); ) %>% print. ### Mature transcript sequences ####; message('Creating mature transcript sequences...'). # subset pos sorted exons, split by tx ID, concatenate exon seq per transcript using unlist; mature.tx <- lapply(; X = split(dna[anot], anot$transcript_id),; FUN = unlist; ) %>% DNAStringSet. message('... now getting reverse complements of mature transcripts on the minus strand...'). mature.tx[names(mature.tx) %in% anot[strand(anot) == '-', ]$transcript_id] <- reverseComplement(; mature.tx[names(mature.tx) %in% anot[strand(anot) == '-', ]$transcript_id]; ). ### Premature transcript sequences ####; message('Creating premature transcript sequences...'). premature.tx <- dna[anot.pre]. message('... now getting reverse complements of premature transcripts on the minus strand...'). premature.tx[names(premature.tx) %in% anot.pre[strand(anot.pre) == '-', ]$premature_group] <- reverseComplement(; premature.tx[names(premature.tx) %in% anot.pre[strand(anot.pre) == '-', ]$premature_group]; ). names(premature.tx) <- anot.pre$premature_group # paste0(anot.pre$premature_group, '_premature') # premature rna indicator. ### Dot plots ####; smoothDot <- function(s1, s2, w = 10) {. s1a <- sapply(; X = 1:(length(s1) - w + 1),; function(z) paste(s1[ z:(z + w - 1) ], collapse = ''); ). s2a <- sapply(; X = 1:(length(s2) - w + 1),; function(z) paste(s2[ z:(z + w - 1) ], collapse = ''); ). s2b <- sapply( # considering the reversed y sequence per window; X = 1:(length(s2) - w + 1),; function(z) paste(s2[ z:(z + w - 1) ] %>% rev, collapse = ''); ). outer(s1a, s2a, FUN = '==') | outer(s1a, s2b, FUN = '=='); }. to.plot <- lapply(; setNames(nm = chosenOnes),; function(x) {. # out <- outer(as.vector",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:8029,message,message,8029,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['message'],['message']
Integrability,"ngth 5 --barcodeLength 14 -1 /tmp/tmp.fyLlOm2tjU/p1.fa -2 /tmp/tmp.fyLlOm2tjU/p2.fa -r read-I1_si-ACTTCACT_lane-001-chunk-001.fastq.gz; read-I1_si-ACTTCACT_lane-002-chunk-000.fastq.gz; read-I1_si-ACTTCACT_lane-003-chunk-003.fastq.gz; read-I1_si-ACTTCACT_lane-004-chunk-002.fastq.gz; read-I1_si-CGAAGTTG_lane-001-chunk-001.fastq.gz; read-I1_si-CGAAGTTG_lane-002-chunk-000.fastq.gz; read-I1_si-CGAAGTTG_lane-003-chunk-003.fastq.gz; read-I1_si-CGAAGTTG_lane-004-chunk-002.fastq.gz; read-I1_si-GAGCACGC_lane-001-chunk-001.fastq.gz; read-I1_si-GAGCACGC_lane-002-chunk-000.fastq.gz; read-I1_si-GAGCACGC_lane-003-chunk-003.fastq.gz; read-I1_si-GAGCACGC_lane-004-chunk-002.fastq.gz; read-I1_si-TTCGTGAA_lane-001-chunk-001.fastq.gz; read-I1_si-TTCGTGAA_lane-002-chunk-000.fastq.gz; read-I1_si-TTCGTGAA_lane-003-chunk-003.fastq.gz; read-I1_si-TTCGTGAA_lane-004-chunk-002.fastq.gz]; Version Info: This is the most recent version of Salmon.; [2018-09-11 16:28:53.145] [alevinLog] [info] A custom protocol (END, BC length, UMI length) = (5, 14, 5) is being used. Updating UMI k-mer length accordingly.; Logs will be written to ../../alevin_15_pc/logs; ### salmon (single-cell-based) v0.11.2; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { read-I1_si-ACTTCACT_lane-001-chunk-001.fastq.gz read-I1_si-ACTTCACT_lane-002-chunk-000.fastq.gz read-I1_si-ACTTCACT_lane-003-chunk-003.fastq.gz read-I1_si-ACTTCACT_lane-004-chunk-002.fastq.gz read-I1_si-CGAAGTTG_lane-001-chunk-001.fastq.gz read-I1_si-CGAAGTTG_lane-002-chunk-000.fastq.gz read-I1_si-CGAAGTTG_lane-003-chunk-003.fastq.gz read-I1_si-CGAAGTTG_lane-004-chunk-002.fastq.gz read-I1_si-GAGCACGC_lane-001-chunk-001.fastq.gz read-I1_si-GAGCACGC_lane-002-chunk-000.fastq.gz read-I1_si-GAGCACGC_lane-003-chunk-003.fastq.gz read-I1_si-GAGCACGC_lane-004-chunk-002.fastq.gz read-I1_si-TTCGTGAA_lane-001-chunk-001.fastq.gz read-I1_si-TTCGTGAA_lane-002-chunk-000.fastq.gz read-I1_si-TTCGTGAA_lane-003-chunk-003.fastq.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:5488,protocol,protocol,5488,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['protocol'],['protocol']
Integrability,"not.ori <- anot; anot.pre.ori <- anot.pre. anot <- anot[anot$transcript_id %in% chosenOnes, ]; anot.pre <- anot.pre[anot.pre$premature_group %in% chosenOnes, ]. # sanity check (make sure strand information is the same for pre and mature RNA counterparts); all(; sort(paste(strand(anot), anot$transcript_id) %>% unique) ==; sort(paste(strand(anot.pre), anot.pre$premature_group) %>% unique); ) %>% print. ### Mature transcript sequences ####; message('Creating mature transcript sequences...'). # subset pos sorted exons, split by tx ID, concatenate exon seq per transcript using unlist; mature.tx <- lapply(; X = split(dna[anot], anot$transcript_id),; FUN = unlist; ) %>% DNAStringSet. message('... now getting reverse complements of mature transcripts on the minus strand...'). mature.tx[names(mature.tx) %in% anot[strand(anot) == '-', ]$transcript_id] <- reverseComplement(; mature.tx[names(mature.tx) %in% anot[strand(anot) == '-', ]$transcript_id]; ). ### Premature transcript sequences ####; message('Creating premature transcript sequences...'). premature.tx <- dna[anot.pre]. message('... now getting reverse complements of premature transcripts on the minus strand...'). premature.tx[names(premature.tx) %in% anot.pre[strand(anot.pre) == '-', ]$premature_group] <- reverseComplement(; premature.tx[names(premature.tx) %in% anot.pre[strand(anot.pre) == '-', ]$premature_group]; ). names(premature.tx) <- anot.pre$premature_group # paste0(anot.pre$premature_group, '_premature') # premature rna indicator. ### Dot plots ####; smoothDot <- function(s1, s2, w = 10) {. s1a <- sapply(; X = 1:(length(s1) - w + 1),; function(z) paste(s1[ z:(z + w - 1) ], collapse = ''); ). s2a <- sapply(; X = 1:(length(s2) - w + 1),; function(z) paste(s2[ z:(z + w - 1) ], collapse = ''); ). s2b <- sapply( # considering the reversed y sequence per window; X = 1:(length(s2) - w + 1),; function(z) paste(s2[ z:(z + w - 1) ] %>% rev, collapse = ''); ). outer(s1a, s2a, FUN = '==') | outer(s1a, s2b, FUN = '=='); }. ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:7943,message,message,7943,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['message'],['message']
Integrability,"nt algorithms like Bowtie2 and BWA-MEM with respect to both sensitivity and specificity. Here, you are likely seeing a manifestation of the former. Specifically, greedy behavior can lead to spurious matches. Many of these spurious matches are filtered out when applying a consensus mechanism to the series of matches produced by a read; however, this can result in the read going unmapped. We have noticed this behavior where spurious matches can ""mask"" better overall mappings, and we have developed an algorithm to overcome these limitations (called selective-alignment). This is currently implemented in [this branch](https://github.com/COMBINE-lab/salmon/tree/rescue-orphan) of the Salmon repo (if you want to test it out and have trouble building, we can build you a linux executable). This algorithm explores more potential mappings and then applies a fast algorithm for filtering potentially poor ones. In our benchmarks, it exhibits sensitivity and specificity very close to Bowtie2 (which is among the best of the alignment-based methods we considered). Also, I will note that, though the speed and statistical optimization procedures used in fast transcript abundance estimation tools make them a potentially desirable choice for microbiomic / metagenomic abundance estimation, their indices are typically optimized for speed and not size. For small numbers of bacterial species this can be okay, but if one wishes to index large collections of species, the memory usage can become a problem. To this end, we have developed a new indexing scheme (software [here](https://github.com/COMBINE-lab/pufferfish), slightly out-of-date pre-print [here](https://www.biorxiv.org/content/early/2017/09/21/191874)). That code already implements a tool for taxonomic read assignment (a la the excellent [Kraken](https://github.com/DerrickWood/kraken)), but not yet abundance estimation (that is coming soon). So, depending on how much you want to scale up, you might want to keep an eye on that as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/196#issuecomment-365337297:2237,depend,depending,2237,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/196#issuecomment-365337297,1,['depend'],['depending']
Integrability,"nt-697125235) in other mapping issue reports, it's possible that there could be multiple fragments in those numbers that contribute to a single read, meaning the unaccounted number is probably higher:. > The number you are looking at is the number of discarded mappings, not the number of discarded fragments. The difference is that every fragment can have many potential mappings. The number you are looking at is the total number of attempted alignments that failed to achieve the threshold score. Luckily, salmon reports both numbers. The number of fragments for which all alignments failed to reach the score threshold is 4,196,417; given in aux_info.json by ""num_fragments_filtered_vm"": 4196417. One point to note is that these are all fragments for which mapping is attempted (they had at least one k-mer match the reference), but no alignment was valid up to the threshold. You could try running the quantification again with --softclip to allow softclipping of the reads and see if any considerable fraction of these 4196417 failed to align because they overhang the annotated transcripts or contain adapters etc. Nonetheless, even if all of these mapped, the rate would still be ~72%. The remainder of the reads didn't even have a matching k-mer in common with the reference transcriptome, which means they are exceedingly unlikely to have come from the transcripts that were indexed. Further explanation of what these metadata numbers mean would be very helpful to me. Also useful would be a statistic (or more than one statistic) that fully categorises the read alignments or non-alignments. **Desktop (please complete the following information):**; - OS: Debian; - `uname-a`: Linux musculus 6.7.9-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.7.9-2 (2024-03-13) x86_64 GNU/Linux; - `lsb_release -a`; ```; No LSB modules are available.; Distributor ID: Debian; Description: Debian GNU/Linux trixie/sid; Release: n/a; Codename: trixie; ```. **Additional context**. I'm not really after an explanatio",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/925:8741,adapter,adapters,8741,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/925,1,['adapter'],['adapters']
Integrability,"oading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>6442720932; Index requested greater than vector's size: 6442720996>6442720932; Index requested greater than vector's size: 6442721060>6442720932; Index requested greater than vector's size: 6442721124>6442720932; Index requested greater than vector's size: 6442721188>6442720932; Index requested greater than vector's size: 6442721252>6442720932; Index requested greater than vector's size: 6442721316>6442720932; Index requested greater than vector's size: 6442721380>6442720932; Index requested greater than vector's size: 6442721444>6442720932; ...; ```. The index does not finish loading, and so salmon does not enter read quantification routines. **To Reproduce**. * Which version of salmon was used? 1.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? ; Github release tarball; * Which reference (e.g. transcriptome) was used?; Gencode v32, with additional elements representing genic introns and intergenic spaces.; * Which read files were used?; NCBI SRA run accession GSM2392582; * Which which program options were used?; --no-version-check --libType ISR --threads 4 --seqBias --gcBias --useVBOpt. **Expected behavior**; I expected index loading to complete successfully.; **Desktop (please complete the following information):**; - OS: CentOS6. **Additional context**; I've uploaded the index file archive [here](https://www.icloud.com/iclouddrive/00DWWhkSucg2BTWLuFswSHwvQ#rapmap_issue_8_index) and the transcripts fasta file [here](https://www.icloud.com/iclouddrive/0oCdFG64TJe0IlvkYyIUZRfSQ#rapmap_issue_8_transcripts).",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:2641,rout,routines,2641,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,1,['rout'],['routines']
Integrability,"odeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #15 upsert<std::__cxx11::basic_string<char>&, densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:554; #16 densityCalculator<alevin::protocols::Chromium> (parser=<optimized out>, aopt=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; (gdb); #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x000000",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:12160,protocol,protocols,12160,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['protocol'],['protocols']
Integrability,"odel for data generated from any technology and that's what we have been trying to do with salmon for years, piece by piece. Having said that, we don't mean to discourage people from trying salmon, that's one of the way we learn how can we improve the model even further. Now, coming back to your original question about using QuantSeq with salmon and how the paper above approach to solve it. I have a couple of thoughts:; 1.) Like you said, from the reading of their command line argument they didn't use the `nolengthcorrection` and I am surprised about the results myself. Since you have experience with the technology, you are best person to explore the difference in using and not using the length correction with salmon, that's why I shared.; 2.) Salmon models the transcript lengths in its quantification model. The basic intuition being longer length transcripts have higher probability of a read being sampled from them and has to be corrected for when using relative count metrices (like TPM) to avoid length bias. The logic behind `noLengthCorrection` is to _not_ correct for length for 3' protocol since we expect all the reads from one end of the transcript and if we do length correction, I hypothesize, we might end up biasing the estimates on the opposite direction; however the effect size of this hypothesis is still an open question and seemingly from the results from the paper it has minor effect. On the flip side may be it does have effect but their baseline estimates were not great and any improvement is good, for that again since you have experience with the data it's good to know / test what's going on.; 3.) A little experimental thought, although `noLengthCorrection` flag can generate decent estimates, it's actually fully disabling the length effect, which in my opinion we can do better as you look at Figure 1B of the paper it shows some length based affect but again we don't know how much difference it can create in generating the estimates. . I Hope it helps .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565256512:2085,protocol,protocol,2085,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565256512,2,['protocol'],['protocol']
Integrability,"oduce**; First, I put the UMI in front of the barcode.; `zcat R2.fastq.gz | paste - - - - | awk '{print $1"" ""$2""\n""substr($3,9,8)substr($3,1,8)substr($3,17)""\n""$4""\n""$5}' | pigz -p8 > R2_Alevin.fq.gz`. then, I run Alevin with:; `salmon alevin -lA -i ref_genome/index/ --barcodeLength 8 --umiLength 8 --end 5 -1 fq/R2_Alevin.fq.gz -2 fq/R1.fastq.gz -p 8 --tgMap ref_genome/gencode.vM20.tx2gene.tsv -o alevin_out --dumpUmiGraph --dumpFeatures --dumpCsvCounts --whitelist BC.whitelist`. This seems to work: the library is 47M and the _filtered_cb_frequency.txt_ contains 43M assigned barcodes in total. The _MappedUmi.txt_ contains 18.5M UMIs, fitting perfectly with the reported alignment rate of ~40% (which is relatively low, but OK for this library). Also if I use the `--dumpfq` option, the barcodes and UMIs are nicely attached to the sequencing reads. Strangely, if I sum the entries in the CSV or binary quant matrix, I get ~3.75M reads. ; ; I was able to run the 10x PBMC4k example and there, the sum of the count matrix entries indeed fitted the reported UMI counts and mapping rate. . Specifically, please provide at least the following information:. * Which version of salmon was used?; salmon 0.13.1. * How was salmon installed (compiled, downloaded executable, through bioconda)?; downloaded executable and bioconda give the same result. * Which reference (e.g. transcriptome) was used?; mouse gencode vM20 (mm10). * Which read files were used?; adapted celseq2 protocol. * Which program options were used?; See above. **Expected behavior**; I expected a total of 18.5M counts in the quant matrix, where the sums per barcode fit those reported in the _MappedUmi.txt_ Is my assumption that the quant matrix should only contain integers correct?. **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem. **Desktop (please complete the following information):**; Ubuntu 18.04.1 LTS. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361:1933,protocol,protocol,1933,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361,1,['protocol'],['protocol']
Integrability,"ok, this is not really a bug but I think it needs attention. i am using anaconda environment for many tools and keep it updated as much as possible with the `conda update --all` command. but the bottleneck is salmon, which has very old dependencies, and it's a dilemma either to update salmon from 0.8.1 (pretty old buggy version) to the latest one (0.11.3) and downgrade a bunch of other important packages, or vice versa. **Describe the bug**; a bug is a species of animal kingdom, a small insect (just kidding). **To Reproduce**; Steps and data to reproduce the behavior:; ```; $ conda update salmon; Solving environment: done. ## Package Plan ##. environment location: /home/software/anaconda2. added / updated specs: ; - salmon. The following packages will be downloaded:. package | build; ---------------------------|-----------------; salmon-0.11.3 | h86b0361_2 2.9 MB bioconda; blas-1.0 | mkl 6 KB; numpy-1.14.3 | py27h28100ab_1 41 KB; ------------------------------------------------------------; Total: 3.0 MB. The following packages will be UPDATED:. jemalloc: 4.5.0-0 bioconda --> 5.1.0-hfc679d8_0 conda-forge; libgcc-ng: 7.2.0-hdf63c60_3 conda-forge --> 8.2.0-hdf63c60_1 ; libstdcxx-ng: 7.2.0-hdf63c60_3 conda-forge --> 8.2.0-hdf63c60_1 ; salmon: 0.8.1-0 bioconda --> 0.11.3-h86b0361_2 bioconda . The following packages will be DOWNGRADED:. blas: 1.1-openblas conda-forge --> 1.0-mkl ; fastqc: 0.11.7-5 bioconda --> 0.11.6-2 bioconda ; gsl: 2.4-blas_openblash47a8a8e_1 conda-forge [blas_openblas] --> 2.1-2 conda-forge; numpy: 1.15.1-py27_blas_openblashd3ea46f_1 conda-forge [blas_openblas] --> 1.14.3-py27h28100ab_1 ; openjdk: 8.0.144-zulu8.23.0.3_2 conda-forge --> 8.0.121-1 ; scikit-learn: 0.19.2-py27_blas_openblasha84fab4_201 conda-forge [blas_openblas] --> 0.19.1-py27hedc7406_0 ; scipy: 1.1.0-py27_blas_openblash7943236_201 conda-forge [blas_openblas] --> 1.1.0-py27hd20e5f9_0; ```. **Expected behavior**; salmon should be updated to the latest version without the requirement of d",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/286:236,depend,dependencies,236,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/286,1,['depend'],['dependencies']
Integrability,old dependencies in anaconda environment,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/286:4,depend,dependencies,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/286,1,['depend'],['dependencies']
Integrability,"omatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is simply to align one of these samples to the genome with a tool like STAR or HISAT2 and look at their mapping rate to known features. If it's similar, then the other reads could be accounted for by e.g. intron retention or even contamination. Finally, [@vals has an excellent series of blog posts on investigating and addressing low mapping rates](http://www.nxn.se/valent/2017/9/18/low-mapping-rate-5-human-dna-contamination); - bbmap Command ([based of this biostars post](https://www.biostars.org/p/143019/#210890)):; `bbmap.sh in=read_1.fq.gz ref=rRNA_Chlor_Mito.fa maxindel=1 minid=0.95 outu=clean_read_1.fq.gz nodisk`; - Strategy:; `use the rRNA+Mito+Chloroplast file and map the reads using bbmap, then collect the unmapped reads (clean_read_1.fq.gz) for my downstream analysis`. 2. **_STEP 2 - run bbduk.sh on the outu files from bbmap step -- the outu stands for output unmapped - as stated in the logic above, anything that is unmapped to the rRNA_Chlor_Mito.fa is a clean read for downstream analysis_**. I use bbduk with adapter trimming and quality trimming in same command line - also, the adapters.fa file that ships with BBTools can be used in all runs. Hope that helps.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:3423,adapter,adapter,3423,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['adapter'],"['adapter', 'adapters']"
Integrability,"ou'd expect to get more mappings) than when you specify ""ISR"". The ""A"" flag just looks at how the first 10,000 reads map and guesses the library type based on that. On thing to make sure of is that your reads aren't ""ordered"" in any way, such that you'd expect the first 10,000 to deviate in any meaningful way from the statistics of the reads of the reads. > Is it better to build assemblies with strand-aware flags? If so, does it usually make a large difference to quantification results, or a minor one? I don't know what protocol the sequencing facility used, but I am sure I could ask them. I gather from my recent reading that the extra information gained by using a stranded protocol is worthwhile, so I would expect that the sequencing facility used one, but why doesn't Trinity or MEGAHIT detect the sequecing protocol that was used? . So there are really 2 questions here. *If* the data are stranded, then yes, it's worthwhile to use stranded flags in both assembly and quantification. This is because stranded protocols will allow you to better disambiguate (a) overlapping genes and (b) reads that are ambiguous between sequence-similar genes that happen to reside on different strands. The *second* question is why Trinity or MEGAHIT wouldn't detect this. The main reason for this is that these are assembly tools. Without access to a reference genome, there is no principled way for these tools to know what the orientation of a read is _a priori_, so they generally rely on the user to specify if the reads are stranded or unstranded. > Or, if you have to specify it, why do none of the example Trinity commands I've come across include this option? It doesn't strike me as a commonly used specification in making assemblies. The Trinity command to specify the strandedness is `--SS_lib_type` (see e.g. [here](https://scilifelab.github.io/courses/ngsintro/1604/labs/rnaseqDenovo)). By default, Trinity will assume unstranded reads (as that's the safest default assumption). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/840#issuecomment-1493034427:1486,protocol,protocols,1486,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/840#issuecomment-1493034427,1,['protocol'],['protocols']
Integrability,"owcell1/read-I1_si-CGAAGTTG_lane-001-chunk-001.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-CGAAGTTG_lane-002-chunk-000.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-CGAAGTTG_lane-003-chunk-003.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-CGAAGTTG_lane-004-chunk-002.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-GAGCACGC_lane-001-chunk-001.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-GAGCACGC_lane-002-chunk-000.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-GAGCACGC_lane-003-chunk-003.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-GAGCACGC_lane-004-chunk-002.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-TTCGTGAA_lane-001-chunk-001.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-TTCGTGAA_lane-002-chunk-000.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-TTCGTGAA_lane-003-chunk-003.fastq.gz; ./fastq/fastqs/flowcell1/read-I1_si-TTCGTGAA_lane-004-chunk-002.fastq.gz]; Version Info: This is the most recent version of salmon.; [2018-12-06 11:14:56.513] [alevinLog] [info] A custom protocol (END, BC length, UMI length) = (5, 14, 5) is being used. Updating UMI k-mer length accordingly.; Logs will be written to ./fastq/test/logs; [2018-12-06 11:14:56.533] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; ### alevin (dscRNA-seq quantification) v0.12.0; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ gemcode ] => { }; ### [ index ] => { ./transcripts_index_salmon/ }; ### [ threads ] => { 8 }; ### [ output ] => { ./fastq/test/ }; ### [ tgMap ] => { ./hg_transcriptome/tx2tx.tsv }; ### [ end ] => { 5 }; ### [ umiLength ] => { 5 }; ### [ barcodeLength ] => { 14 }; ### [ dumpCsvCounts ] => { }; ### [ mates1 ] => { /tmp/tmp.p28w2nGvAn/p1.fa }; ### [ mates2 ] => { /tmp/tmp.p28w2nGvAn/p2.fa }; ### [ unmatedReads ] => { ./fastq/fastqs/flowcell1/read-I1_si-ACTTCACT_lane-001-chunk-001.fastq.gz ./fastq/fastqs/flowcell1/read-I1_si-ACTTCACT_lane-002-chunk-000.fastq.gz ./fastq/fastqs/flowcell1/read-I",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:2046,protocol,protocol,2046,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['protocol'],['protocol']
Integrability,"path/to/logs/%x_%j.out; #SBATCH --ntasks=6; #SBATCH --time=02:00:00; #SBATCH --cpus-per-task=2; #SBATCH --mem-per-cpu=30G; module load parallel # parallel/20150822-GCC-4.9.2; module load Anaconda3/2022.05; conda activate Salmon. parallel --jobs 6 --header : --colsep ',' \; 'salmon quant -I /path/to/index/folder/ \; -l A\; -1 /path/to/""{fastq_1}"" \; -2 /path/to/""{fastq_2}""\; --writeUnmappedNames \; --validateMappings \; --recoverOrphans\; --gcBias \; --seqBias \; --recoverOrphans\; -o /path/to/output/{Samples} \; --threads 2' :::: /path/to/sheet_with_sample_and_fastq_names.csv; ```; Specifically, please provide at least the following information:. * Which version of salmon was used?; Both 1.10.2 and 1.10.3 were tested. ; * How was salmon installed (compiled, downloaded executable, through bioconda)?; Used bioconda; * Which reference (e.g. transcriptome) was used?; GRCh38 ; * Which read files were used?; Illumina NovaSeq. Merged fastq based on direction (fastq split across lanes and had to add top off data) with zcat, used cutadapt for adapter trimming. . * Which which program options were used?; Ribodetector was used to get rid of rRNA contamination. Used output of non rRNA files with Salmon quant. **Expected behavior**; A clear and concise description of what you expected to happen.; Salmon Quant outputting of .sf files. **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem.; From SLURM generated error file. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; HPCS: Red Hat Server 7.9. **Additional context**; Add any other context about the problem here.; Removal of --recoverOrphans leads to jobs finishing to completion. . Oddly enough, with --recoverOrphans dropped, I start seeing output into .err files I set in SLURM rather than in the .log file with each folder. .",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/961:1832,adapter,adapter,1832,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/961,1,['adapter'],['adapter']
Integrability,"possible with the `conda update --all` command. but the bottleneck is salmon, which has very old dependencies, and it's a dilemma either to update salmon from 0.8.1 (pretty old buggy version) to the latest one (0.11.3) and downgrade a bunch of other important packages, or vice versa. **Describe the bug**; a bug is a species of animal kingdom, a small insect (just kidding). **To Reproduce**; Steps and data to reproduce the behavior:; ```; $ conda update salmon; Solving environment: done. ## Package Plan ##. environment location: /home/software/anaconda2. added / updated specs: ; - salmon. The following packages will be downloaded:. package | build; ---------------------------|-----------------; salmon-0.11.3 | h86b0361_2 2.9 MB bioconda; blas-1.0 | mkl 6 KB; numpy-1.14.3 | py27h28100ab_1 41 KB; ------------------------------------------------------------; Total: 3.0 MB. The following packages will be UPDATED:. jemalloc: 4.5.0-0 bioconda --> 5.1.0-hfc679d8_0 conda-forge; libgcc-ng: 7.2.0-hdf63c60_3 conda-forge --> 8.2.0-hdf63c60_1 ; libstdcxx-ng: 7.2.0-hdf63c60_3 conda-forge --> 8.2.0-hdf63c60_1 ; salmon: 0.8.1-0 bioconda --> 0.11.3-h86b0361_2 bioconda . The following packages will be DOWNGRADED:. blas: 1.1-openblas conda-forge --> 1.0-mkl ; fastqc: 0.11.7-5 bioconda --> 0.11.6-2 bioconda ; gsl: 2.4-blas_openblash47a8a8e_1 conda-forge [blas_openblas] --> 2.1-2 conda-forge; numpy: 1.15.1-py27_blas_openblashd3ea46f_1 conda-forge [blas_openblas] --> 1.14.3-py27h28100ab_1 ; openjdk: 8.0.144-zulu8.23.0.3_2 conda-forge --> 8.0.121-1 ; scikit-learn: 0.19.2-py27_blas_openblasha84fab4_201 conda-forge [blas_openblas] --> 0.19.1-py27hedc7406_0 ; scipy: 1.1.0-py27_blas_openblash7943236_201 conda-forge [blas_openblas] --> 1.1.0-py27hd20e5f9_0; ```. **Expected behavior**; salmon should be updated to the latest version without the requirement of downgrading of its dependencies. Linux nscc04 2.6.32-696.30.1.el6.x86_64 #1 SMP Fri May 18 11:50:44 EDT 2018 x86_64 x86_64 x86_64 GNU/Linux",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/286:2019,depend,dependencies,2019,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/286,1,['depend'],['dependencies']
Integrability,"pping rate using hisat2. But in fact, DNAs are removed in my RNA extraction process...and poly-T was used to select mRNAs during the library construction...; 3. Not using pre-mature transcripts so reads mapping to introns are discarded: I am not sure if this is a valid point since we usually quantify mature mRNAs, not pre-mature ones.; 4. Library type: my library was constructed in a stranded way. The program detected my libtype as ISR:; ```; {; ""read_files"": ""[ DS_1_HW_FM_1P.fq.gz, DS_1_HW_FM_2P.fq.gz]"",; ""expected_format"": ""ISR"",; ""compatible_fragment_ratio"": 1.0,; ""num_compatible_fragments"": 18651686,; ""num_assigned_fragments"": 18651686,; ""num_frags_with_concordant_consistent_mappings"": 17799536,; ""num_frags_with_inconsistent_or_orphan_mappings"": 864409,; ""strand_mapping_bias"": 0.0001987858838992702,; ""MSF"": 0,; ""OSF"": 0,; ""ISF"": 3539,; ""MSR"": 0,; ""OSR"": 0,; ""ISR"": 17799536,; ""SF"": 419781,; ""SR"": 441089,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; }; ```; When I change the libtype to a broader category, such as IU, the mapping rates slightly increased from ~55% to 65%, also I got more counts in each transcript, but this introduced higher strand mapping bias (Appeared as a warning message). ; 5. many short reads: No... in my case, the majority of the reads are ~150bp. And I used k=31 (default).; 6. Read trimming: I trimmed the adaptors and low-quality bases from the ends. One thing I noticed in my FastQC report is that I have warnings for 'Per Base Sequence Content'. I can see a fluctuation of nucleotides in around the first 12bp of each run due to a biased selection of random primers. This is so common in RNA-seq data so I did not trim the first several bases...Not sure if this can cause the low mapping rate.; One of my fastQC reports:. [DS_1_HW_FM_1P_fastqc.html.zip](https://github.com/COMBINE-lab/salmon/files/4730665/DS_1_HW_FM_1P_fastqc.html.zip). So...Is there a way I can increase the mapping rates? Or do I need to? My trimmed reads are all of very high quality so",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533:2628,message,message,2628,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533,1,['message'],['message']
Integrability,"probably unrelated, but also unexpected. Make test on my linux and osx box looks like:. ```; $ make test; Running tests...; Test project /Users/rob/salmon/build; Start 1: unit_tests; 1/3 Test #1: unit_tests ....................... Passed 0.13 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 0.87 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 0.39 sec. 100% tests passed, 0 tests failed out of 3. Total Test time (real) = 1.41 sec; ```. It looks the same on the continuous integration server : . ```; Running tests...; /usr/local/cmake-3.9.2/bin/ctest --force-new-ctest-process ; Test project /home/travis/build/COMBINE-lab/salmon/build; Start 1: unit_tests; 1/3 Test #1: unit_tests ....................... Passed 0.13 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 2.55 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.72 sec; 100% tests passed, 0 tests failed out of 3; Total Test time (real) = 4.41 sec; ```. Also, you can look, in the build directory, in the subdirectory `Testing/Temporary/LastTestsFailed.log` which will give details of which specific test failed.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393676260:562,integrat,integration,562,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393676260,1,['integrat'],['integration']
Integrability,"quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is simply to align one of these samples to the genome with a tool like STAR or HISAT2 and look at their mapping rate to known features. If it's similar, then the other reads could be accounted for by e.g. intron retention or even contamination. Finally, [@vals has an excellent series of blog posts on investigating and addressing low mapping rates](http://www.nxn.se/valent/2017/9/18/low-mappin",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1805,adapter,adapter,1805,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,2,['adapter'],['adapter']
Integrability,"r_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Cas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:4411,adapter,adapter,4411,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['adapter'],['adapter']
Integrability,"ranscriptome (with no decoys) gives me a mapping rate of `0.00378202832148367%`. The first thing I did was to quality and adapter trim the data (using `fastp -i SRR9007475.fastq.gz -o SRR9007475_trimmed.fastq.gz -q 10 -w 8`) and ... whoa. This is the fastp html report [fastp.html.zip](https://github.com/COMBINE-lab/salmon/files/4176345/fastp.html.zip). So the first astounding statistic, the mean read length before trimming is 51bp (these are relatively short single-end reads). The mean read length after trimming is 21bp! So, the average read length is, in fact, less than the k-mer length used for indexing (default is k=31). On the trimmed data, the mapping rate goes up to `2.3545475882931305%`, still very low, but now there's somewhat of an explanation, the average read is shorter than a single k-mer. So, the next thing I tried was indexing with a smaller k; a _really_ small one in this case,`k=15`. Then, I re-ran on the _trimmed_ reads (the fact that the trimming took us from 51-21bp suggests that the reads had a lot of low quality bases, adapter contamination, or both). Under this setting, I still get a very low mapping rate, but it was _much_ higher ‚Äî `16.766993524863488%`. The final thing I tried was seeing how the mapping rate changed as I altered `--minScoreFraction`, which is the salmon parameter that determines the alignment score that a read must achieve in order to be mapped validly. The default is 0.65. This means that the read cannot have a score < 0.65 * the maximum achievable score for the read given it's length. In the case of a 21bp read, the best score would be a score of 42, so a read must obtain a score >= 27 in order to be mapped. This is already a pretty poor mapping, but I reduced it even more to 0.3 (so any read with a score > 12 would pass). This led to a mapping rate of `~46%`. However, at this point, I'm not sure I would be confident in such mappings. For example, the situation here would be a 21bp read with multiple mismatches and, much of",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583799668:1452,adapter,adapter,1452,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583799668,1,['adapter'],['adapter']
Integrability,"referred to as QS in the rest of the message(s))_ ?. `salmon quant --threads 16 --noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in my final summarized table (after tximport). I got a colSum for all my samples and then checked the numbers for the transc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:1101,Adapter,Adapter,1101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Adapter'],['Adapter']
Integrability,"rge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir : /usr/local/Caskroom/miniforge/base/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/conda-forge/osx-arm64; https://conda.anaconda.org/conda-forge/noarch; package cache : /usr/local/Caskroom/miniforge/base/pkgs; /Users/Benjamin/.conda/pkgs; envs directories : /usr/local/Caskroom/miniforge/base/envs; /Users/Benjamin/.conda/envs; platform : osx-arm64; user-agent : conda/4.12.0 requests/2.27.1 CPython/3.9.13 Darwin/21.5.0 OSX/12.4; UID:GID : 501:20; netrc file : None; offline mode : False. An unexpected error has occurred. Conda has prepared the above report. If submitted, this report will be used by core maintainers to improve; future releases of conda.; Would you like conda to send this report to the core maintainers?. [y/N]: y; Upload did not complete. Thank you for helping to improve conda.; Opt-in to always sending reports (and not see this message again); by running. $ conda config --set report_errors true; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:6565,message,message,6565,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['message'],['message']
Integrability,"rity-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs) for you. #### How do I upgrade my CodeQL engine?; No need! New versions of the CodeQL analysis are constantly deployed on GitHub.com; your repository will automatically benefit from the most recently released version. #### The analysis doesn‚Äôt seem to be working; If you get an error in GitHub Actions that indicates that CodeQL wasn‚Äôt able to analyze your code, please [follow the instructions here](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow) to debug the analysis. #### How do I disable LGTM.com?; If you have LGTM‚Äôs automatic pull request analysis enabled, then you can [follow these steps to disable the LGTM pull request analysis](https://lgtm.com/help/lgtm/managing-automated-code-review#disabling-pr-integration). You don‚Äôt actually need to remove your repository from LGTM.com; it will automatically be removed in the next few months as part of the deprecation of LGTM.com ([more info here](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/)). #### Which source code hosting platforms does code scanning support?; GitHub code scanning is deeply integrated within GitHub itself. If you‚Äôd like to scan source code that is hosted elsewhere, we suggest that you create a mirror of that code on GitHub. #### How do I know this PR is legitimate?; This PR is filed by the official LGTM.com GitHub App, in line with the [deprecation timeline that was announced on the official GitHub Blog](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). The proposed GitHub Action workflow uses the [official open source GitHub CodeQL Action](https://github.com/github/codeql-action/). If you have any other questions or concerns, please",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/815:3989,integrat,integration,3989,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/815,1,['integrat'],['integration']
Integrability,"salmon does run and completes normally so I guess it's just the warning; from jemalloc. . Is this expected for sailfish also? I get the same message about malloc.; . On 2017-04-18 09:55, Rob Patro wrote:. > I think that's the right binary. You can check the sha256 sum:; > ; > rob at Robs-MacBook-Pro in ~/Salmon-0.8.2_macOX_10.12; > $ shasum -a256 bin/salmon; > 7be1c57e1a83956cc9c18f75aed3b2376c93595de7dec215041fe3065528b527 bin/salmon; > ; > You can also check the libraries that salmon is seeing:; > ; > rob at Robs-MacBook-Pro in ~/Salmon-0.8.2_macOX_10.12; > $ otool -L bin/salmon; > bin/salmon:; > /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.8); > /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0); > /usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.5); > @rpath/libtbbmalloc_proxy.dylib (compatibility version 0.0.0, current version 0.0.0); > @rpath/libtbbmalloc.dylib (compatibility version 0.0.0, current version 0.0.0); > @rpath/libtbb.dylib (compatibility version 0.0.0, current version 0.0.0); > /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.4.0); > ; > but, again, the library of interest with respect to this message (jemalloc) is linked statically. Out of curiosity, is this message a warning or error (i.e. does salmon run or return a non-zero exit code). The message you're seeing is actually expected if jemalloc was compiled without debug mode turned off (because apple did some funny business with the allocator in OS X 10.12). ; > ; > --; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub [1], or mute the thread [2].; . Links:; ------; [1]; https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294852033; [2]; https://github.com/notifications/unsubscribe-auth/AA45u0ozBxeE-i6orJcGrgIw4NstAXNvks5rxMDegaJpZM4Ktuq4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294858583:141,message,message,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294858583,4,['message'],['message']
Integrability,"salmon version 1.5.1; Running with the following keystrokes:; salmon quant -i contig_index -l A -1 R1.fastq -2 R2.fastq -o salmonoutput (screenshot attached as ""command""). It keeps throwing the attached error message (as log).; Ive verified the R1 and R2 have the same number of entries using grep to count the number of ""@"" symbols. These match. The lines of each file are the same as well. (screenshot also attached as ""size""); ![Command](https://user-images.githubusercontent.com/50889111/134416661-77de22d1-5fc4-4b89-a21d-940948fdc4b8.png); ![Size](https://user-images.githubusercontent.com/50889111/134416664-21c6373f-57be-4c8d-b917-68aa16262f57.png); <img width=""1314"" alt=""Log"" src=""https://user-images.githubusercontent.com/50889111/134416666-5dcf3843-ef06-45b1-bb77-6c2dbae9e6e4.png"">. I'm not sure what to do from here; Please help.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/709:209,message,message,209,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/709,1,['message'],['message']
Integrability,salmon version message in sam file,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/342:15,message,message,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/342,1,['message'],['message']
Integrability,"so.2 (0x00007f859aa08000); libgomp.so.1 => /u/user/local/lib64/libgomp.so.1 (0x00007f859a7e7000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f859a5df000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f859a2de000); libgcc_s.so.1 => /u/user/local/lib64/libgcc_s.so.1 (0x00007f859a0c8000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8599d1d000); /lib64/ld-linux-x86-64.so.2 (0x00007f859b286000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7ff",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:1808,wrap,wrapper,1808,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['wrap'],['wrapper']
Integrability,"ssed 278000000 positions^M^Mprocessed 279000000 positions^M^Mprocessed 280000000 positions^M^Mprocessed 281000000 positions^M^Mprocessed 282000000 positions^M^Mprocessed 283000000 positions^M^Mprocessed 284000000 positions^M^Mprocessed 285000000 positions^M^Mprocessed 286000000 positions^M^Mprocessed 287000000 positions^M^Mprocessed 288000000 positions^M^Mprocessed 289000000 positions; khash had 109134690 keys; saving hash to disk . . . done; Elapsed time: 12.6069s; [2018-06-25 19:29:02.297] [jLog] [info] done building index; ```. It would be more interesting to see what filename is used for the index. Showing the ""basename"" of the index file is not very helpful. I would prefer to see the filename(s) on the beginning and end lines:. ```; index [""Homo_sapiens.GRCh38.cdna.all""] did not previously exist . . . creating it; [2018-06-25 19:25:57.122] [jLog] [info] building index; ...; [2018-06-25 19:29:02.297] [jLog] [info] done building index; ```. 5. The duplicates have same sequence or ID or both? The message should be clearer. I wonder what are these duplicates in a human cdna predicted, as available from `ftp://ftp.ensembl.org/pub/release-92/fasta/homo_sapiens/cdna`; :. ```; [2018-06-25 19:26:07.480] [jointLog] [warning] Removed 11768 transcripts that were sequence duplicates of indexed transcripts.; ```. 6. For the bwa-based index again, the logs are too verbose on one hand and on the second, they do not say what files were created. I doubt any file with *prefix* `Homo_sapiens.GRCh38.cdna.all/bwaidx` was created. ```; + salmon index -t Homo_sapiens.GRCh38.cdna.all.fa -i Homo_sapiens.GRCh38.cdna.all --type fmd; outputPrefix = ""Homo_sapiens.GRCh38.cdna.all/bwaidx""; [2018-06-25 19:29:02.497] [jLog] [info] building index; [bwa_index] Pack FASTA... 2.87 sec; [bwa_index] Construct BWT for the packed sequence...; [BWTIncCreate] textLength=609536484, availableWord=54888760; [BWTIncConstructFromPacked] 10 iterations done. 87569268 characters processed.; [BWTIncConstructFromP",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/242:13184,message,message,13184,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/242,1,['message'],['message']
Integrability,tLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:45:33.234] [jointLog] [info] Starting optimizer; [2016-12-13 22:45:33.516] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:45:33.523] [jointLog] [info] iteration = 0 | max rel diff. = 299.95; [2016-12-13 22:45:34.217] [jointLog] [info] iteration = 100 | max rel diff. = 0.122252; [2016-12-13 22:45:34.912] [jointLog] [info] iteration = 200 | max rel diff. = 0.102915; [2016-12-13 22:45:35.612] [jointLog] [info] iteration = 300 | max rel diff. = 0.145792; [2016-12-13 22:45:36.357] [jointLog] [info] iteration = 400 | max rel diff. = 0.217489; [2016-12-13 22:45:37.055] [jointLog] [info] iteration = 500 | max rel diff. = 0.0159298; [2016-12-13 22:45:37.628] [jointLog] [info] iteration = 569 | max rel diff. = 0.00958049; [2016-12-13 22:45:37.653] [jointLog] [info] Finished optimizer; [2016-12-13 22:45:37.653] [jointLog] [info] writing output. [2016-12-13 22:45:38.213] [jointLog] [info] Starting Gibbs Sampler; 100% [=====================================================] in 31s; [2016-12-13 22:46:10.451] [jointLog] [info] Finished Gibbs Sampler; [2016-12-13 22:46:10.451] [jointLog] [warning] NOTE: Read Lib [SRR2454059.fq.gz] :. Detected a *potential* strand bias > 1% in an unstranded protocol check the file: test_quant/lib_format_counts.json for details; ```. i.e. I don't seem to get the complaints from the Gibbs sampler and all output files look to be created properly. I'm trying to figure out what could be different.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:3652,protocol,protocol,3652,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['protocol'],['protocol']
Integrability,"ta.json, will retry with next repodata source.; Collecting package metadata (repodata.json): / Killed. this is the first time I've encountered an issue where something that is ""supposed"" to be there can't be found. Adam H. Freedman, PhD; Data Scientist; Faculty of Arts & Sciences Informatics Group; Harvard University; 38 Oxford St; Cambridge, MA 02138; phone: +001 310 415 7145; ________________________________; From: Rob Patro ***@***.***>; Sent: Sunday, October 29, 2023 10:01 AM; To: COMBINE-lab/salmon ***@***.***>; Cc: Freedman, Adam ***@***.***>; State change ***@***.***>; Subject: Re: [COMBINE-lab/salmon] anaconda version of salmon outdated, missing decoys option (Issue #895). I'm going to cc @dpryan79<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_dpryan79&d=DwMFaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=mSC4skssR3kpqIDO5fXv00Vk9PrFQeVf0OH62EOgXZ9hbM31qjkaQra0z60JiEA_&s=hPsmfTmSAfiwDhS2JFQyD0EUHl5m5sbj_n46DYj6tdM&e=> on this ‚Äî does it just not finish? It seems to work within our GitHub CI, where we have to grab the prebuilt salmon to test simpleaf. ‚Äî; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_issues_895-23issuecomment-2D1784122719&d=DwMFaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=mSC4skssR3kpqIDO5fXv00Vk9PrFQeVf0OH62EOgXZ9hbM31qjkaQra0z60JiEA_&s=6Y-rQOzzAA-t9QV8NyfcMVeySD2an4xeN1HsDqa6VpQ&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ADBMMUDFRQIHN4AMNBHWCN3YBZOUTAVCNFSM6AAAAAA6UYYPGOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTOOBUGEZDENZRHE&d=DwMFaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=mSC4skssR3kpqIDO5fXv00Vk9PrFQeVf0OH62EOgXZ9hbM31qjkaQra0z60JiEA_&s=ckSFRx1FekMV-wL0KtdZFPdtgCB1DiAziHIsdrF0cKQ&e=>.; You are receiving this because you modified the open/close state.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784126021:2291,Message,Message,2291,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784126021,1,['Message'],['Message']
Integrability,"ter poly-A clipping); counted k-mers for 80000 transcripts[2016-11-04 12:41:39.926] [jointLog] [warning] Entry with header [ENST00000436204], had length less than the k-mer length of 31 (perhaps after poly-A clipping); counted k-mers for 90000 transcripts[2016-11-04 12:41:40.016] [jointLog] [warning] Entry with header [ENST00000473810], had length less than the k-mer length of 31 (perhaps after poly-A clipping); counted k-mers for 140000 transcripts[2016-11-04 12:41:40.568] [jointLog] [warning] Entry with header [ENST00000437226], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:40.570] [jointLog] [warning] Entry with header [ENST00000428001], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:40.574] [jointLog] [warning] Entry with header [ENST00000445788], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:40.576] [jointLog] [warning] Entry with header [ENST00000489969], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:40.578] [jointLog] [warning] Entry with header [ENST00000411692], had length less than the k-mer length of 31 (perhaps after poly-A clipping); counted k-mers for 150000 transcriptsElapsed time: 2.85251s. Replaced 6009 non-ATCG nucleotides; Clipped poly-A tails from 1120 transcripts; Building rank-select dictionary and saving to disk done; Elapsed time: 0.0151688s; Writing sequence data to file . . . done; Elapsed time: 0.13411s; [info] Building 32-bit suffix array (length of generalized text is 258980005); ...; ...; [more messages here]; ...; ...; khash had 99651131 keys; saving hash to disk . . . done; Elapsed time: 4.98016s; [2016-11-04 12:45:45.948] [jLog] [info] done building index; ```. So the index builds successfully. The process took ~3 min on my local machine. I wonder what could be happening on your end. Is the process using any resources, or just hanging?. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/100#issuecomment-258484912:6130,message,messages,6130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/100#issuecomment-258484912,1,['message'],['messages']
Integrability,"thank you @alpapan, your post in this open issue had the information that helped me build the latest version of salmon (1.10.0 at this time) on Ubuntu 20 and 22. The documentation at https://salmon.readthedocs.io/en/latest/building.html#requirements-for-building-from-source was not helping with the build errors reported here, which is what I encountered too. . In my case the problem was that I had a custom build of libstaden installed (that I did not want to remove) that cmake was picking up, but which triggered those many libcurl linking errors (misleadingly I would say, since it seems to be related to the way libstaden is installed, not directly libcurl related, which is fine on my system). Here it is the build recipe that worked for me on Ubuntu 20/22:; ```; sudo apt install libboost-iostreams-dev libboost-chrono-dev libboost-filesystem-dev \; libboost-timer-dev libboost-program-options-dev ; PREFIX=$HOME/sw # or wherever you want it; mkdir build && cd build; cmake -DNO_IPO=TRUE -DFETCH_STADEN=TRUE -DCMAKE_INSTALL_PREFIX=${PREFIX} ..; make -j6; make install; ```; Note that the installation message states:; `Please add $PREFIX/lib to your LD_LIBRARY_PATH` ; .. but that does not seem to be needed, the linker seems to resolve those libraries properly in the installation directory.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-1445139922:1110,message,message,1110,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-1445139922,1,['message'],['message']
Integrability,"the barcode detection - my usual approach with alevin at least is to let it try to estimate a ""real"" cell number, but if it's way off from our experimental expectations, to inject --expectCells ncells and let that serve as a starting point (with subsequent filtering). That has worked reasonably well in the past for me , and seems to be an option for alevin-fry as well. I don't know whether that is poor practice in the long run...it came from a place of seeing far too many weak knee plots early in the droplet scRNA-seq days. Are you generally more trusting of these estimates these days?. So one of the nice aspects of the alevin to alevin-fry pipeline is that it's relatively easy to try different filtering approaches since the initial mapping process only has to happen once. In general, the knee detection method is pretty good, and often gives a reasonable cell count. However, this isn't always the case. What we find in the alevin-fry pre-print is that it tends to be slightly more conservative than if you did e.g. unfiltered quantification followed by filtering with something like `DropletUtils` (but usually only slightly). The knee method is basically the iterative knee finding procedure from UMI-tools, with some slight tweaks to the parameters. However, unlike alevin, alevin-fry also supports unfiltered quantification. In this case, you provide an `unfiltered-permitlist`, which is a set of acceptable barcodes (not necessarily all expected to be present), and alevin-fry will correct against this. This will tend to produce a _lot_ of quantified cells, since we quantify any barcode matching 10 or more reads (by default, this value is modifiable on the command line). So, such unfiltered matrices definitely need to be filtered after quantification. However, for protocols with an external permit list, or those where you can reasonably derive a list of potential expected barcodes, it's less stringent and therefore potentially a bit more sensitive than knee-based filtering.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988967759:1845,protocol,protocols,1845,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988967759,1,['protocol'],['protocols']
Integrability,"the item.**; **WARNING: Target ""unitTests"" requests linking to directory ""/users/work/jake/bin/zlib-1.2.11/"". Targets may link only to libraries. CMake is dropping the item.**. So I actually went back a step and check my initial cmake command in the ../salmon-0.8.2/build/ directory. It also had the same issue and therefore wasn't building correctly. I started the install again from ../salmon-0.8.2/build/ using the following: . cmake -DBOOST_ROOT=/users/work/jake/bin/boost_1_64_0/ -DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h .. . It seemed to work nicely and I got all the build files to propagate into the ../salmon-0.8.2/build/ directory. From here I ran 'make' which did a whole bunch of things I hadn't seen it do yet, so assumably it was working as intended. This is until it got to the following stage:. Scanning dependencies of target libbwa; [ 48%] Creating directories for 'libbwa'; [ 49%] Performing download step for 'libbwa'; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 125 0 125 0 0 167 0 --:--:-- --:--:-- --:--:-- 167; 0 0 0 219k 0 0 123k 0 --:--:-- 0:00:01 --:--:-- 326k; bwa-master.tar.gz: OK; bwa-0.7.12.3/.gitignore; bwa-0.7.12.3/.travis.yml; bwa-0.7.12.3/COPYING; bwa-0.7.12.3/ChangeLog; bwa-0.7.12.3/Makefile; bwa-0.7.12.3/NEWS.md; bwa-0.7.12.3/QSufSort.c; bwa-0.7.12.3/QSufSort.h; bwa-0.7.12.3/README-alt.md; bwa-0.7.12.3/README.md; bwa-0.7.12.3/bamlite.c; bwa-0.7.12.3/bamlite.h; bwa-0.7.12.3/bntseq.c; bwa-0.7.12.3/bntseq.h; bwa-0.7.12.3/bwa.1; bwa-0.7.12.3/bwa.c; bwa-0.7.12.3/bwa.h; bwa-0.7.12.3/bwakit/; bwa-0.7.12.3/bwakit/README.md; bwa-0.7.12.3/bwakit/bwa-postalt.js; bwa-0.7.12.3/bwakit/run-HLA; bwa-0.7.12.3/bwakit/run-bwamem; bwa-0.7.12.3/bwakit/run-gen-ref; bwa-0.7.12.3/bwakit/typeHLA-selctg.js; bwa-0.7.12.3/bwakit/typeHLA.js; bwa-0.7.12.3/bwakit/typeHLA.sh; bwa-0.7.12.3/bwamem.c; bwa-0.7.12.3/bwamem.h; bwa-0.7.12.3/bwamem_extra.c; bwa-0.7.12.3/bwamem_pair.c; bwa-0.7.12.3/bwape.c; bwa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:1114,depend,dependencies,1114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,2,['depend'],['dependencies']
Integrability,"the unique-region-derived prior... . But as I think about it... I realize I don't *really* know the underlying algorithmic details of the existing implements. But it would be **amazing** if you could incorporate this type of information into Salmon. I really hope some progress can be made here! . Thanks again for helping me out and showing interest in the motivating problem!. P.S.,; As a total aside, I've been working with this large yeast RNAseq dataset and eventually reached the same conclusions as the selective alignment paper and other recent ones; that is, the most important aspect for getting good transcript-level quantifications is not aligning to the genome vs. aligning to the transcriptome, but rather having an accurate transcriptome annotation to begin with. I saw **huge** gains from updating my transcriptome annotation to include UTRs, especially given differences in coverage bias between samples... for example, if the actual transcript is 500 bp but the gene body is only 200 bp, slight coverage biases can propagate non-linearly and cause huge problems downstream. This got me thinking... if the end goal is differential expression analysis (and obviously this is not *always* the end goal), what if we just discard the notion of a pre-defined transcriptome and stick with equivalence classes, then do differential expression analysis on the equivalence classes themselves (perhaps calculated against the whole genome... this is feasible in yeast, maybe not in humans), then only after discovering significant differential expression one could work backwards to interpret the changes. Is this a crazy idea? Or not crazy at all and already routine? I know salmon can dump the counts to each equivalence class already so it's not hard for me to *do* what I just described, but I'm wondering if you have any opinions/insights into this idea. Thanks again!. ![snr40_isoforms](https://user-images.githubusercontent.com/10292386/81047610-a17c1880-8e6f-11ea-8012-a6695afd68db.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623963851:5236,rout,routine,5236,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623963851,2,['rout'],['routine']
Integrability,"this is the error I am getting. . ```; The package ""salmon"" has no matches.; There are these packages and versions available:. NULL. Error in install_CondaTools(tools = ""salmon"", env = ""RNAseq_analysis"", :; The package and/or version are not available in conda. Check above for details.; In addition: Warning message:; In system(paste(pathToConda, ""search --quiet --json"", package_input, :; running command '/Users/vittoriobontempi/Library/r-miniconda/bin/conda search --quiet --json ""salmon"" -c bioconda -c defaults -c conda-forge 2>/dev/null' had status 1; ```. any help will be greatly appreciated. thank you!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724:309,message,message,309,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724,1,['message'],['message']
Integrability,"true, write: false }; 2021-12-06 15:37:20 INFO paired : false, ref_count : 226,030, num_chunks : 6,923; 2021-12-06 15:37:21 INFO tg-map contained 60,603 genes mapping to 226,030 transcripts.; 2021-12-06 15:37:21 INFO read 2 file-level tags; 2021-12-06 15:37:21 INFO read 2 read-level tags; 2021-12-06 15:37:21 INFO read 1 alignemnt-level tags; 2021-12-06 15:37:21 INFO File-level tag values FileTags { bclen: 24, umilen: 10 }; ‚†ì [00:00:00] [‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†ê [00:00:00] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†Å [00:00:00] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†¥ [00:00:01] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†§ [00:00:01] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†Å [00:00:01] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†§ [00:00:01] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†† [00:00:02] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñë‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†ê [00:00:03] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñë‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†ã [00:00:03] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñë‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†Ñ [00:00:04] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñë‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†à [00:00:04] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü‚ïü‚ïü‚ïü] ‚†ô [00:00:04] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ñå‚ïü‚ïü] 6551/6923 ; 2021-12-06 15:37:26 WARN ; found connected component with 30679 vertices, resolved into 18 UMIs over 10 genes with trivial resolution.; [00:00:07] [‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢‚ï¢] 6923/6923 finished quantifying 6,923 cells.2021-12-06 15:37:28 INFO processed 26,250,078 total read records; ```. - Found that 6913 out of 6923 (>99%) barcodes are present in the submitted data.; - Finally ran a correlation b/w the alevin-fry output (located in `res/alevin`) and submitted data. Here are the results:. ![image](https://user-images.githubusercontent.com/12998572/144936078-b4e0ab3e-de1e-4b5d-8000-8c71109f27ae.png). ```; Min. 1st Qu. Median Mean 3rd Qu. Max. ; 0.03701 0.74469 0.88377 0.83131 0.94898 1.00000 ; ```. This demonstrates that alevin performs well with split-seq protocol. Let me know what you think, @jeremymsimon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-987334414:6647,protocol,protocol,6647,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-987334414,1,['protocol'],['protocol']
Integrability,"ttr', 'rtracklayer', 'Biostrings', 'reshape2', 'ggplot2'),; FUN = library, character.only = TRUE; ). ### Inputs ####; anot.gtf <- '../../shared_data/annotations/Ensembl/Homo_sapiens.GRCh38.101.gtf.gz' # Ensembl GTF; genome.fasta <- '../../shared_data/annotations/Ensembl/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz' # Genome fasta from Ensembl; gencode.tx.fasta <- '../../shared_data/annotations/Gencode/gencode.v35.transcripts.fa.gz' # Gencode transcript FASTA. dotPlot.fname <- '../ouput/dotPlots.pdf'. ### Read exon annotations ####; message('Loading Ensembl exon annotation (1-22, X, Y, MT)...'). chromosomes <- c(1:22, 'X', 'Y', 'MT'). anot <- import(anot.gtf, feature = 'exon') %>% sort; anot <- anot[seqnames(anot) %in% chromosomes, ]. # append gene and transcript version numbers to IDs; anot$gene_id <- paste(anot$gene_id, anot$gene_version, sep = '.'); anot$transcript_id <- paste(anot$transcript_id, anot$transcript_version, sep = '.'). ### Create premature transcript annotations ####; message('Creating premature transcript annotation...'). anot.pre <- split(anot, anot$transcript_id); anot.pre <- anot.pre[lengths(anot.pre) > 1] %>% range %>% unlist %>% sort # only consider transcripts with > 1 exon. anot.pre$transcript_range <- as.character(anot.pre); anot.pre$gene_id <- anot[match(names(anot.pre), anot$transcript_id), ]$gene_id. # collapse replicate pre-mature transcripts per gene...; names(anot.pre) <- anot.pre$premature_group <- sapply(; split(; names(anot.pre),; paste(anot.pre$gene_id, anot.pre$transcript_range, sep = '_'); ),; paste, collapse = ';'; )[; paste(anot.pre$gene_id, anot.pre$transcript_range, sep = '_'); ]. # ... need to convert GR to data.table before unique because unique method for GR class ignores metadata and rownames; anot.pre <- as.data.table(anot.pre) %>% unique %>% makeGRangesFromDataFrame(., keep.extra.columns = T); names(anot.pre) <- anot.pre$premature_group. ### Read human genome sequence ####; message('Loading genome sequence...'). dna <-",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:4737,message,message,4737,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['message'],['message']
Integrability,"ubdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:4683,adapter,adapters,4683,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['adapter'],['adapters']
Integrability,update single-cell protocol documentation,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/723:19,protocol,protocol,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/723,1,['protocol'],['protocol']
Integrability,upgrade CMakeLists.txt to use external copies of dependencies & no downloading,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19:49,depend,dependencies,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19,1,['depend'],['dependencies']
Integrability,"vidence that they are _inherently_ uncertain given the read evidence and alignments used for quantification. The tool described in that paper, called [`terminus`](https://github.com/COMBINE-lab/terminus), is a tool for automatically finding such groups of transcripts. Anyway, once you have the Gibbs samples in hand, we can walk you though how to do some assessment of these transcripts (tagging @hiraksarkar here since he's most likely to have access to scripts that will let us look at the posterior samples from individual transcripts). Similarly, if you can provide the quantification directory, we can help examine this too. If this is the case, that the posterior distributions are highly anti-correlated, it is likely that the ambiguity you are seeing is simply inherent given the alignments salmon is being provided. If you have the quantification folder resulting from the same sample using selective alignment, we could compare and contrast the two. At that point, there are a few options depending on how deeply you want to dive. You could try to see how STAR and selective alignment are mapping differently to these transcripts. One potential difference is that STAR is _a lot_ more happy to softclip reads, which selective alignment won't do by default (you can test the effect with the `--softclipOverhangs` to allow selective alignment to softclip reads that hang off the transcript end or `--softclip` to allow softclips anywhere). Note that selective alignment may _still_ be a bit more conservative than STAR about softclips simply because of the nature of the scoring function it uses. This might give you a sense if one of these alignment methodologies is more consistent with your expectations in this case. Another option is to consider doing a grouping with `terminus`. This will reduce the set of ""genes"" that you can call as DE, because it will be happy to group together transcripts from different genes. However, it should help considerably in eliminating DE from highly-un",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115:3323,depend,depending,3323,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115,2,['depend'],['depending']
Integrability,"within the barcode read, ie something that could be handled with different `bc-geometry`, but maybe that's all you meant in terms of differing implementations. Regarding the BC1 and how it could be two sequences for the same sample - this is confusing to explain in text format, but all comes down to the sequential nature of how the cells acquire barcodes in this protocol. We start with a 96-well plate, where each of the top 48 wells contain BOTH an oligo-dT barcode and random hexamer barcode. The samples then get added to each well. Biochemistry happens. Then you pool all the cells together, split them back out into 48 wells again, and each well gets its own BC2. Then repeat for BC3. . So a given transcript may get amplified via one of two amplification primers (oligo-dT or random hexamer), but after that, will get a single BC2 sequence and BC3 sequence added after that. In Fig 1A of the Rosenberg paper, it's as though there isn't _just_ an orange sequence carrying out reverse transcription, there are actually two different (known) sequences associated with different routes of amplification per cell. . The net effect is that a given cell can contain transcripts that have a sequence like this:; AACGTGAT-CTGTAGCC-ACACAGAA. or like this:; GATAGACA-CTGTAGCC-ACACAGAA. where maybe the first sequence was amplified by oligo-dT and the second was amplified via a random hexamer. Because they have the same BC2 and BC3 sequence, and the BC1 sequences match a known pairing, we know they come from the same cell and therefore the data should be merged. . Any lab running these experiments will have a table of known pairings (ie the two barcodes added to each of first 48 wells), so that they can be merged and treated as though they came from the same cell. This can either be handled upstream of salmon/alevin as a preprocessing step, like what my slow perl script can do, or it can be handled internally. Having alevin do the collapsing would likely be a lot faster and means the FASTQs",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-937918722:1273,rout,routes,1273,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-937918722,2,['rout'],['routes']
Integrability,"x (which is the colored De Bruijn graph). I understand that this index (along with all the equivalence class) remains the same even when gene counts of different RNA-Seq samples are estimated. But I am a bit confused about the alignment-based method. In this case, salmon does not require an index since it has the actual alignments. If we have multiple samples, which are mapped to the same transcriptome will Salmon return the same set of equivalence classes? Since the samples are different the weights will change and so will the reads mapped to each equivalence class but will the set of eq. classes change?. The index remains the same when different samples are processed, just as with a traditional alignment tool like STAR or HISAT2. However, the set of equivalence classes are _not_ fixed between samples. The equivalence classes are induced by the specific set of aligned or mapped reads. Further, salmon adopts a notion of [range-factorized equivalence classes](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) in which the equivalence relation depends not only on the transcripts to which a read aligns or maps, but also on the conditional probabilities of the fragment being generated from these transcripts, which itself depends on experiment-specific parameters like the fragment length distribution. Thus, it is not the case under either its own builtin lightweight (selective) alignment, nor when operating with an external BAM file, that the set of equivalence classes produced by salmon will be the same across samples. The equivalence classes are _based_ on the underlying reference sequence, but are sample specific and induced both by the specific patterns of multimapping as well as by the sample-specific parameters (like the fragment length distribution). Thus, if you wish to perform some type of equivalence-class type analysis over multiple samples, you'll need to take the union over the equivalence classes observed in each of them. I hope this helps!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/579#issuecomment-717279405:2657,depend,depends,2657,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/579#issuecomment-717279405,2,['depend'],['depends']
Integrability,"yep, at least in my understanding, the 3' single cell 10x protocol goes through the process of cDNA fragmentation post amplification. I think you can more information from [here](https://assets.ctfassets.net/an68im79xiti/4tjk4KvXzTWgTs8f3tvUjq/2259891d68c53693e753e1b45e42de2d/CG000183_ChromiumSingleCell3__v3_UG_Rev_C.pdf)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/574#issuecomment-713246157:58,protocol,protocol,58,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/574#issuecomment-713246157,1,['protocol'],['protocol']
Modifiability," --noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in my final summarized table (after tximport). I got a colSum for all my samples and then checked the numbers for the transcripts and the decoys - this lead me to post my original question on this thread.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:1177,Adapt,Adapter,1177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Adapt'],['Adapter']
Modifiability," /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2502,config,configuration,2502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['config'],['configuration']
Modifiability," 195 ; --> 196 adata._inplace_subset_var(gene_subset); 197 ; 198 s = np.sum(~gene_subset). /primary/projects/mnp/tools/anaconda3/envs/alevin_env/lib/python3.7/site-packages/anndata/_core/anndata.py in _inplace_subset_var(self, index); 1214 Same as `adata = adata[:, index]`, but inplace.; 1215 """"""; -> 1216 adata_subset = self[:, index].copy(); 1217 self._init_as_actual(adata_subset, dtype=self._X.dtype); 1218 . /primary/projects/mnp/tools/anaconda3/envs/alevin_env/lib/python3.7/site-packages/anndata/_core/anndata.py in __getitem__(self, index); 1048 """"""Returns a sliced view of the object.""""""; 1049 oidx, vidx = self._normalize_indices(index); -> 1050 return AnnData(self, oidx=oidx, vidx=vidx, asview=True); 1051 ; 1052 def _remove_unused_categories(self, df_full, df_sub, uns):. /primary/projects/mnp/tools/anaconda3/envs/alevin_env/lib/python3.7/site-packages/anndata/_core/anndata.py in __init__(self, X, obs, var, uns, obsm, varm, layers, raw, dtype, shape, filename, filemode, asview, obsp, varp, oidx, vidx); 280 if not isinstance(X, AnnData):; 281 raise ValueError(""`X` has to be an AnnData object.""); --> 282 self._init_as_view(X, oidx, vidx); 283 else:; 284 self._init_as_actual(. /primary/projects/mnp/tools/anaconda3/envs/alevin_env/lib/python3.7/site-packages/anndata/_core/anndata.py in _init_as_view(self, adata_ref, oidx, vidx); 328 self._varp = adata_ref.varp._view(self, vidx); 329 # hackish solution here, no copy should be necessary; --> 330 uns_new = deepcopy(self._adata_ref._uns); 331 # need to do the slicing before setting the updated self._n_obs, self._n_vars; 332 self._n_obs = self._adata_ref.n_obs # use the original n_obs here. /primary/projects/mnp/tools/anaconda3/envs/alevin_env/lib/python3.7/copy.py in deepcopy(x, memo, _nil); 148 copier = _deepcopy_dispatch.get(cls); 149 if copier:; --> 150 y = copier(x, memo); 151 else:; 152 try:. /primary/projects/mnp/tools/anaconda3/envs/alevin_env/lib/python3.7/copy.py in _deepcopy_dict(x, memo, deepcopy); 239 memo[id(",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/526:6226,layers,layers,6226,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/526,1,['layers'],['layers']
Modifiability," arise in some instances (like with many splicing isoforms or alternative transcriptional start/stop sites). . I'm curious to know how things progress on the issue. It seems like using the coverage as evidence of the transcript ""not being expressed at all"" may be too binary for this problem, certainly in real data, including my own, there are serious coverage dropoffs with long genes or low sequencing depth, and it doesn't mean the transcript is not expressed. Second, regarding unique mappers to the ""super transcript,"" this highlights the problem with using gene bodies that do not incorporate UTRs as in my examples above. The quantification can only be as good as the ground truth transcriptome you're working with, and so every gene is going to be a bit wrong if UTRs are not included in the transcriptome sequence. For my real data analysis, I've dealt with this by 1) adding UTRs to all genes whenever possible, and if no UTR data is given, then extending each gene body by ~100 bp in either direction (if two genes end up overlapping a bit, this ends up not being problematic at all because of how salmon apportions reads in accordance with the length bias model). Second, I set the mapping flags to --softclip and --minScoreFraction 0.3; this helps a LOT since if one read mate pair maps perfectly within a gene and the other is in an unannotated UTR region, it will still assign the read correctly to the gene. . Lastly, for solving the problem at hand with the ""super transcript"" scenario and using coverage... perhaps instead of looking for regions of zero coverage, you could keep track of the overall variance in read depth over a gene and assign reads in a way that minimizes variance; in my example, since the super transcripts has regions of very high read depth, zero read depth, and intermediate, the total variance in read depth across the gene would be quite high, while the variance over the sub-transcripts would be much lower. Similarly, in a scenario with a gene that has",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-670495465:1233,extend,extending,1233,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-670495465,1,['extend'],['extending']
Modifiability," configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/CommandLineTools/usr/bin/cc; configure:5150: checking for C compiler version; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc --version >&5; Apple clang version 15.0.0 (clang-1500.0.40.1); Target: arm64-apple-darwin22.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; configure:5170: $? = 0; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -v >&5; Apple clang version 15.0.0 (clang-1500.0.40.1); Target: arm64-apple-darwin22.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; configure:5170: $? = 0; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -V >&5; clang: error: argument to '-V' is missing (expected 1 value); clang: error: no input files; configure:5170: $? = 1; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -qversion >&5; clang: error: unknown argument '-qversion'; did you mean '--version'?; clang: error: no input files; configure:5170: $? = 1; configure:5190: checking whether the C compiler works; configure:5212: /Library/Developer/CommandLineTools/usr/bin/cc conftest.c >&5; ld: library 'System' not found; clang: error: linker command failed with exit code 1 (use -v to see invocation); configure:5216: $? = 1; configure:5254: result: no; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""XZ Utils""; | #define PACKAGE_TARNAME ""xz""; | #define PACKAGE_VERSION ""5.2.2""; | #define PACKAGE_STRING ""XZ Utils 5.2.2""; | #define PACKAGE_BUGREPORT ""lasse.collin@tukaani.org""; | #define PACKAGE_URL ""http://tukaani.org/xz/""; | #define NDEBUG 1; | #define HAVE_ENCODER_LZMA1 1; | #define HAVE_ENCODER_LZMA2 1; | #define HAVE_ENCODER_DELTA 1; | #define HAVE_ENCODER_X86 1; | #define HAVE_ENCODER_POWERPC 1; | #define HAVE_ENCODER_IA64 1; | #d",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:5800,config,configure,5800,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,7,['config'],['configure']
Modifiability," decoys or the organism's genome as a decoy whenever possible. . 4) Related to @k3yavi's response and my elaboration above: we have dropped quasi-mapping from 1.0.0 (though something akin to it may return in the future if there is sufficient demand and if the shortcomings described in the manuscript can be overcome). However, as I mention in part 3 above, this doesn't mean it's not possible to use v1.0.0 without an explicit decoy sequence. The `--decoy` flag of the indexing command is optional, not required. We will update this in the documentation making it more explicit. However, as @k3yavi points out, it is true that if you wish to use quasi-mapping and selective-alignment against the full genome on the same machine, you will need both versions, as quasi-mapping is supported only in the [RapMap](https://github.com/COMBINE-lab/RapMap/tree/develop-salmon), while indexing something on the scale of the genome when not using the [pufferfish-based](https://github.com/COMBINE-lab/pufferfish/tree/develop) index has tremendous memory requirements (as is not recommended ). 5 & 6) To re-iterate @k3yavi's answer --- the extra flags used in the pre-print were only for the purpose of holding as many variables fixed as possible when comparing different approaches. It continues to be recommended to use the VBEM over the EM; it seems to perform better with respect to the ways in which we can measure and such improvements have also been documented in [other work](https://www.ncbi.nlm.nih.gov/pubmed/23821651). The _main_ effect of `--mimicBT2` is to discard orphan alignments for the purposes of quantification. This is a more strict requirement than the default behavior of allowing orphans if there is no satisfactory alignment of both ends of a fragment. However, there is no obvious reason why it is better behavior than accounting for these orphan fragments (when appropriately adjusting the conditional probability given their distance from the transcript boundaries, as salmon does).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390:2602,variab,variables,2602,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390,2,['variab'],['variables']
Modifiability," described in the Bowtie2 manual)](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#bowtie2-options-dovetail) are considered discordant. This is the same default behavior imposed by Bowtie2. If you look in the `meta_info.json` file for some of these samples (which is in the `aux_info` subdirectory of the quantification directory for a sample), you can see how many mappings are being discarded by virtue of being dovetail mappings. It is possible to allow such alignments (consider them as concordant) by passing the `--allowDovetail` flag. It is not the case that such alignments are always ""bad"", its simply that one would not expect many fragments to align in such a way, and if these constitute the overwhelming majority of the mappings, one might be suspicious about the underlying data. * Selective alignment actually _aligns_ the reads to the transcriptome. For this purpose, it performs end-to-end alignment. This means that if you suspect that the sample may contain adapters or very low-quality read ends, the reads should be trimmed prior to quantification. It is, therefore, worth checking how the mapping rate changes for some of these samples if the reads are trimmed first. * Selective alignment is more robust than quasi-mapping to the chosen value of `-k`, the minimum match length used when searching for alignments. I noticed that some of the samples contain relatively short reads, so you might see if the mapping rate changes if you adopt a smaller value of `-k` in the index (e.g. we use `23` in the [pre-print](https://www.biorxiv.org/content/10.1101/657874v2.full.pdf)). * You mention that this index doesn't contain any decoy sequence. This of course, should not affect the mapping rate. However, I'd be quite curious to see if you index the reference using the _whole genome_ as decoy (i.e. the SAF method from the pre-print), how many reads are discarded because they map better to a decoy sequence (this information can also be obtained from `meta_info.json`). Thi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-582734798:2780,adapt,adapters,2780,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-582734798,2,['adapt'],['adapters']
Modifiability," selective-alignment default of 0.35.; [2021-05-19 18:46:25.303] [jointLog] [info] parsing read library format; [2021-05-19 18:46:25.303] [jointLog] [info] There is 1 library.; [2021-05-19 18:46:25.429] [jointLog] [info] Loading pufferfish index; [2021-05-19 18:46:25.429] [jointLog] [info] Loading dense pufferfish index.; [2021-05-19 18:46:27.087] [jointLog] [info] done; [2021-05-19 18:46:27.087] [jointLog] [info] Index contained 141,069 targets; [2021-05-19 18:46:32.618] [jointLog] [info] Number of decoys : 0; [2021-05-19 18:46:33.428] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-19 18:49:27.444] [jointLog] [error] . [2021-05-19 18:49:27.506] [jointLog] [error] Processing reads : Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid. ```; For rabbitQC's log; ```; Detecting adapter sequence for read1...; CCCAGCCATAACACAGTATCAAACTCCACTATTTGTCTGATCCGTACTTATTACAGCCGT. Detecting adapter sequence for read2...; CCAACTTGGTCTACAAGACGCCACATCCCCTATTATAGAAGAGCTAATAAATTTCCATGA. Read1 before filtering:; total reads: 44178187; total bases: 2140649565; Q20 bases: 1899503304(88.7349%); Q30 bases: 1839878933(85.9496%). Read1 after filtering:; total reads: 34172299; total bases: 1775386278; Q20 bases: 1762557969(99.2774%); Q30 bases: 1737891531(97.8881%). Read2 before filtering:; total reads: 44178187; total bases: 2233386484; Q20 bases: 2180294210(97.6228%); Q30 bases: 2141791820(95.8988%). Read2 aftering filtering:; total reads: 34172299; total bases: 1749324083; Q20 bases: 1731172028(98.9623%); Q30 bases: 1700577336(97.2134%). Filtering result:; reads passed filter: 68344598; reads failed due to low quality: 11353966; reads failed due to too many N: 40048; reads failed due to too short: 8617762; reads with adapter trimmed: 382600; bases trimmed due to adapters: 6698794; reads corrected by overlap analysis: 123572; bases corrected by overlap analysis: 125602. Duplication rate: 1.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660:2610,adapt,adapter,2610,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660,1,['adapt'],['adapter']
Modifiability," that we can see:; ```; salmon quant -i ../data/references/salmon-1.4.0-ncbi-GRCm39_AND_egfp_Annot109 -l ISF \; -1 trimmomatic/AAV_204M_TCCTGGTA_L001_R1_001.fastq.qualtrim.paired.fastq \; -2 trimmomatic/AAV_204M_TCCTGGTA_L001_R2_001.fastq.qualtrim.paired.fastq \; --numBootstraps=30 \; --validateMappings --recoverOrphans \; -o salmon/AAV_204M_TCCTGGTA_L001 \; --seqBias --gcBias --writeUnmappedNames -p 8. #it ran for a while and then did:; processed 3,000,000 fragmentsintLog] [info] First decoy index : 129,698; hits: 760,262, hits per frag: 0.254757Segmentation fault; ```. I tried running just the R1 fastq file and it finished fine without a segfault. Mapping rates were ~15%. **To Reproduce**; Specific to particular fastq files . Specifically, please provide at least the following information:. * Which version of salmon was used?; 1.4.0; * How was salmon installed (compiled, downloaded executable, through bioconda)?; compiled using CMake with gcc version 8.2.0 (not by me); easybuild config file is at https://github.com/IGBIllinois/easybuild/blob/master/easyconfigs/s/Salmon/Salmon-1.4.0-IGB-gcc-8.2.0.eb. * Which reference (e.g. transcriptome) was used?; Custom reference of NCBI GRCm39 + egfp protein, although same segfault occurs when using plain GRCm39 that has worked for many other SE and PE projects; * Which read files were used?; Owned by PI; I may or may not be able to send a pair to you; * Which which program options were used?; See above example. **Expected behavior**; Finishing without segfault like the first sample did. I can send you the salmon_quant.log or any other file that would be useful. **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; OS CentOS 7.8; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. **Additional context**; Add any other context ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/668:1438,config,config,1438,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/668,1,['config'],['config']
Modifiability," transcript by salmon) as well as to the genome. It is quite common that the mapping rate to the genome is higher than that to the transcriptome. This is much more a result of what you are aligning _to_ than the aligner. If you were to take the transcriptome, and align to it using Hisat2 with `--no-spliced-alignment` and `--end-to-end` (since there won't be splice junctions when you align to the transcriptome), I'd expect you to get a similar mapping rate as you see in salmon. > I also noticed a high number of mappings discarded because of alignment score. I also wonder why the number of mappings discarded can be larger than num of processed (57113760, the reads number in 1_1.fq.gz). . Good question. The number you are looking at is the number of discarded _mappings_, not the number of discarded _fragments_. The difference is that every fragment can have many potential mappings. The number you are looking at is the total number of attempted _alignments_ that failed to achieve the threshold score. Luckily, salmon reports both numbers. The number of fragments for which _all_ alignments failed to reach the score threshold is `4,196,417`; given in `aux_info.json` by ` ""num_fragments_filtered_vm"": 4196417`. One point to note is that these are all fragments for which mapping is attempted (they had at least one k-mer match the reference), but no alignment was valid up to the threshold. You could try running the quantification again with `--softclip` to allow softclipping of the reads and see if any considerable fraction of these `4196417` failed to align because they overhang the annotated transcripts or contain adapters etc. Nonetheless, even if all of these mapped, the rate would still be ~72%. The remainder of the reads didn't even have a matching k-mer in common with the reference transcriptome, which means they are exceedingly unlikely to have come from the transcripts that were indexed. > Thanks. You're welcome! Please let me know if you have any follow-up questions.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697125235:2029,adapt,adapters,2029,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697125235,1,['adapt'],['adapters']
Modifiability," v0.8 and 1.2.1. The one that seems most relevant here is the introduction of selective-alignment to replace the quasi-mapping procedure that was originally used in salmon. Selective-alignment actually scores the mappings found to the transcriptome, and rejects alignments whose quality is below a (user-specified) threshold. Here, you can see that, in 1.2.1. * 39 fragments are mapped within the score threshold; * 216 fragments are discarded because no mapping location has an alignment score above the threshold. all together, this means that the total number of ""mapped"" fragments in 1.2.1 is very similar to 0.8 (1.2.1 maps 39+216 = 255, while 0.8 maps 254). However, 1.2.1 discards 216 of the fragments because no mapping is sufficiently good. The default for ""sufficiently good"", by the way, is to have an alignment score of at least 65% of the maximum possible for a read of the given length. For typical RNA-seq data, this is actually quite liberal / generous, and is similar to the type of noise in alignment that Bowtie2 allows with the sensitive flag. In general, the heuristics used in 1.2.1 (selective-alignment) tend to be more sensitive than those used in 0.8 (quasi-mapping), since the mappings are then validated using alignment scoring. However, this does mean that the quality of the alignment along the whole read matters. Thus, it is more important to do quality / adapter trimming in the newer version compared to the older one. There is also a flag in 1.2.1 (`--softclip`) that will allow mismatches / gaps at the ends of reads to not detract from the alignment score. So, these are the main differences. However, looking at the output logs you provided, a couple of basic questions did come to mind. Why are there so few reads to begin with? Even in 0.8, only 254 reads mapped, which is obviously a very small number of reads. Is there something non-typical about this sample? Is it a full RNA-seq sample? Are these reads something atypical (like long reads ‚Äî ONT or PacBio)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/542#issuecomment-651332239:1497,adapt,adapter,1497,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/542#issuecomment-651332239,1,['adapt'],['adapter']
Modifiability,"$ sudo make install; [ 7%] Built target libcereal; [ 14%] Built target libdivsufsort; [ 21%] Built target libstadenio; [ 28%] Built target libbwa; [ 36%] Built target libgff; [ 42%] Built target libspdlog; [ 47%] Built target ksw2pp_basic; [ 49%] Built target ksw2pp_sse4; [ 52%] Built target ksw2pp_sse2; [ 53%] Built target ksw2pp; [ 55%] Built target alevin_core; [ 69%] Built target salmon_core; [ 74%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /usr/local/lib; -- Up-to-date: /usr/local/lib/libtbbmalloc.so; -- Up-to-date: /usr/local/lib/pkgconfig; -- Up-to-date: /usr/local/lib/libtbb.so; -- Up-to-date: /usr/local/lib/libtbb.so.2; -- Up-to-date: /usr/local/lib/libtbbmalloc_proxy.so.2; -- Up-to-date: /usr/local/lib/libtbbmalloc_proxy.so; -- Up-to-date: /usr/local/lib/libtbbmalloc.so.2; -- Up-to-date: /usr/local/bin/salmon; -- Up-to-date: /usr/local/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly. Please add /usr/local/bin to your PATH; Please add /usr/local/lib to your LD_LIBRARY_PATH. $ make test; Running tests...; Test project salmon/build; Start 1: unit_tests; 1/3 Test #1: unit_tests .......................***Failed 0.02 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.67 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.62 sec. 67% tests passed, 1 tests failed out of 3. Total Test time (real) = 3.32 sec. The following tests FAILED:; 	 1 - unit_tests (Failed); Errors while running CTest; Makefile:151: recipe for target 'test' failed; make: *** [test] Error 8",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393691425:494,config,configuration,494,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393691425,1,['config'],['configuration']
Modifiability,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**. **Describe the bug**; I installed salmon using cmake command. i.e mkdir build/.. cd build... cmake and i encountered these; **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * latest version 1.0. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.a (found version ""1.2.11""); CMake Error at CMakeLists.txt:319 (find_package):; By not providing ""FindIconv.cmake"" in CMAKE_MODULE_PATH this project has; asked CMake to find a package configuration file provided by ""Iconv"", but; CMake did not find one. Could not find a package configuration file provided by ""Iconv"" with any of; the following names:. IconvConfig.cmake; iconv-config.cmake. Add the installation prefix of ""Iconv"" to CMAKE_PREFIX_PATH or set; ""Iconv_DIR"" to a directory containing one of the above files. If ""Iconv""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; See also ""/home/iipr/trinityrnaseq-Trinity-v2.8.5/salmon/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/iipr/trinityrnaseq-Trinity-v2.8.5/salmon/build/CMakeFiles/CMakeError.log""; **Desktop (please complete the following information):**; - OS: Ubuntu; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453:725,config,configuration,725,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453,4,"['Config', 'config']","['Configuring', 'config', 'configuration']"
Modifiability,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; Either. **Describe the bug**; This is really a feature request -- apologies if it shouldn't go here. Bowtie and similar tools (e.g. STAR) can use memory mapping or shared memory for the genome index. This has a nice benefit: in scenarios where N Bowtie processes simultaneously aligning to the same index on the same system, the index memory footprint is incurred once (not N times). I may soon be running many simultaneous `salmon quant` processes on the sam system, all quantifying with respect to the same (human) transcriptome index. The memory footprint is around 3GB, which adds up when there are many `salmon quants`s. I don't expect to have lots of free RAM on this system, since other simultaneously-running processes will be aligning and incurring a much larger footprint (but using shared memory). If salmon used memory mapping or shared memory for the index, I basically wouldn't have to worry about the peak memory footprint breaking the budget. Hence the request!. **To Reproduce**; Steps and data to reproduce the behavior:. * I looked in the issues and in the documentation for Salmon 0.11.3 and couldn't find any indication this is supported.; * I ran a bunch of simultaneous `salmon quant`s w/r/t the same index on a Linux system. Running `top` showed a very low number in the `SHR` column for those processes (with a high number, ~3GB, in the `RES` column), consistent with their not using shared memory or memory mapping. **Expected behavior**; A good way to test if it's working is to run simultaneous processes w/ same index and check the `SHR` column in `top`. If it's working, that should should be some large size. **Screenshots**; N/A. **Desktop (please complete the following information):**; I'm mainly interested in seeing this feature for Linux, but it's great if it works elsewhere too. Some of these mechanisms are more portable than others. **Additional context**; N/A",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/335:1938,portab,portable,1938,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/335,1,['portab'],['portable']
Modifiability,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; alevin. **Describe the bug**; I am trying to use Alevin to quantify a single cell RNA-Seq 10x Genomics CHROMIUM dataset. I am using Salmon 0.10.2, and it does not produce the count matrix. The output folder contains nothing but the log files. Specifically, I get the following error:; `[2018-07-19 16:27:46.916] [alevinLog] [error] Barcode not found in frequency table`; The full messages are bellow. **To Reproduce**; Steps and data to reproduce the behavior:; I explain how to download the data and reproduce the issue in the following. Specifically, please provide at least the following information:; * Which version of salmon was used?; 0.10.2. * How was salmon installed (compiled, downloaded executable, through bioconda)?; conda config --append channels conda-forge; conda config --append channels bioconda; conda install salmon=0.10.2. * Which reference (e.g. transcriptome) was used?; I am interested only in the transposons. Therefore, I am using the ""canonical DNA sequences of the transposable elements from species in the genus Drosophila"", which are available from the [Bergman](https://github.com/bergmanlab/transposons) Lab. Specifically, I use [this](https://github.com/bergmanlab/transposons/blob/master/current/transposon_sequence_set.fa) fasta file. The first 3 lines are:; >FBte0000104; GTGACATATCCATAAGTCCCTAAGACTTAAGCATATGCCTACATACTAATACACTTACAA; CACATACACCCCAATACAACATACACTACTCCGGATGTACCCAACAGATACCAGATAAGA; In another study, I have successfully used Salmon to quantify transposon expression from bulk RNA-Seq data with a mapping rate of 2%, which is enough for the kind of analysis that I am interested in. * Which read files were used?; The [SRR6327122](https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR6327122) run. The fastq files can be downloaded in a couple of hours using the SRA Toolkit, e.g.,; `fastq-dump --split-files --gzip --outdir ./ SRR6327122`; The first few lines of the ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:823,config,config,823,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,2,['config'],['config']
Modifiability,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; alevin. **Describe the bug**; We have an adapted Celseq2 protocol, where read1 (42bp) is used as the sequencing read and read2 (also 42bp) contains (5' -> 3') the barcode (8bp), UMI (8bp), 26 remaining nt's. Alevin seems to run fine, but the quant matrix has a very low UMI count, which does not fit with the _MappedUMI.txt_ file or the reported alignment rate.; ; **To Reproduce**; First, I put the UMI in front of the barcode.; `zcat R2.fastq.gz | paste - - - - | awk '{print $1"" ""$2""\n""substr($3,9,8)substr($3,1,8)substr($3,17)""\n""$4""\n""$5}' | pigz -p8 > R2_Alevin.fq.gz`. then, I run Alevin with:; `salmon alevin -lA -i ref_genome/index/ --barcodeLength 8 --umiLength 8 --end 5 -1 fq/R2_Alevin.fq.gz -2 fq/R1.fastq.gz -p 8 --tgMap ref_genome/gencode.vM20.tx2gene.tsv -o alevin_out --dumpUmiGraph --dumpFeatures --dumpCsvCounts --whitelist BC.whitelist`. This seems to work: the library is 47M and the _filtered_cb_frequency.txt_ contains 43M assigned barcodes in total. The _MappedUmi.txt_ contains 18.5M UMIs, fitting perfectly with the reported alignment rate of ~40% (which is relatively low, but OK for this library). Also if I use the `--dumpfq` option, the barcodes and UMIs are nicely attached to the sequencing reads. Strangely, if I sum the entries in the CSV or binary quant matrix, I get ~3.75M reads. ; ; I was able to run the 10x PBMC4k example and there, the sum of the count matrix entries indeed fitted the reported UMI counts and mapping rate. . Specifically, please provide at least the following information:. * Which version of salmon was used?; salmon 0.13.1. * How was salmon installed (compiled, downloaded executable, through bioconda)?; downloaded executable and bioconda give the same result. * Which reference (e.g. transcriptome) was used?; mouse gencode vM20 (mm10). * Which read files were used?; adapted celseq2 protocol. * Which program options were used?; See above. **Expected ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361:127,adapt,adapted,127,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361,1,['adapt'],['adapted']
Modifiability,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; alevin; **Describe the bug**; A clear and concise description of what the bug is.; I am running the following command on some sci-rna-seq3 samples and it seems to not work as expected. ; `salmon alevin -i af_splici/dm6_splici_idx/ -l ISR -1 data/SRR17122012_1.fastq -2 data/SRR17122012_2.fastq -o SRR17122012 --tgMap transcriptome_splici_fl52/transcriptome_splici_fl52_t2g.tsv -p 28 --sciseq3 --justAlign`; I then took the output into alevin-fry to create a generate-permit-list and it gives me the error that salmon hasn't added the extra bps to account for the chemistry; ""thread 'main' panicked at 'assertion failed: `(left == right)`; left: `20`,; right: `19`: found barcodes of different lenghts 20 and 19', src/cellfilter.rs:203:13; note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace""; Thus I re-ran salmon alevin without the --justAlign flag and it seems to hit a different error; ""### alevin (dscRNA-seq quantification) v1.9.0; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ index ] => { af_splici/dm6_splici_idx/ }; ### [ libType ] => { ISR }; ### [ mates1 ] => { data/SRR17122012_1.fastq }; ### [ mates2 ] => { data/SRR17122012_2.fastq }; ### [ output ] => { SRR17122012 }; ### [ tgMap ] => { transcriptome_splici_fl52/transcriptome_splici_fl52_t2g.tsv }; ### [ threads ] => { 28 }; ### [ sciseq3 ] => { }. [2022-11-28 21:13:57.772] [alevinLog] [info] Found all transcripts to gene mappings; [2022-11-28 21:13:57.781] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 10 Million barcodes. [2022-11-28 21:14:01.454] [alevinLog] [info] Done barcode density calculation.; [2022-11-28 21:14:01.454] [alevinLog] [info] # Barcodes Used: 1 / 10285890.; [2022-11-28 21:14:01.455] [alevinLog] [error] Can't find left Boundary.; Please Report this issue on github."". Specifically, please provide at least the following information:. * Which version of",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/813:871,variab,variable,871,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/813,1,['variab'],['variable']
Modifiability,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; salmon. **Describe the bug**; I installed Salmon 1.5.2 from binaries, and load it via the module environment (alter or set shell variables such as `PATH` to make the installation visible). The problem is that Salmon overrides the link to the C math standard library. . ```; # without Salmon in my PATH; ldd /home/eboileau/.miniconda3/envs/scNapBar-dev/bin/python3 ; libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f1d2bd45000). # with Salmon in my PATH (loaded via module load salmon/1.5.2); libm.so.6 => /biosw/salmon/1.5.2/lib/libm.so.6 (0x00007f1fa67c0000) ; ```. The latter seem to be incompatible with the Python installation, and results in. ```; import numpy; ImportError: /biosw/salmon/1.5.2/lib/libm.so.6: symbol __get_cpu_features version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference; ```. I do not understand why this is happening, and the question is why Salmon has it's own copy of *libm.so.6*?; Is this library different? . **To Reproduce**; Load salmon/1.5.2 via module environment. I am able to run both my python script and Salmon after deleting Salmon's own copy of *libm.so.6*.; Is this expected to alter Salmon's results in any way?. **Expected behavior**; Salmon does not modify the link to *libm.so.6*. **Desktop (please complete the following information):**; - Linux atlas 4.19.0-17-amd64 SMP Debian 4.19.194-3 (2021-07-18) x86_64 GNU/Linux; - salmon 1.5.2; - Python 3.7.6; - conda 4.9.2; - Modules Release 4.2.2 (2019-02-17). **Questions**; - Why Salmon has it's own copy of *libm.so.6*? Is it safe to delete it, and is this expected to alter Salmon's results in any way?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/710:215,variab,variables,215,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/710,1,['variab'],['variables']
Modifiability,"**_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1401,adapt,adapter,1401,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,2,['adapt'],['adapter']
Modifiability,"--noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in my final summarized table (after tximport). I got a colSum for all my samples and then checked the numbers for the transcripts and the decoys - this lead me to post my original question on this thread.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:1273,Adapt,Adapter,1273,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Adapt'],['Adapter']
Modifiability,"-0.7.12.3/bwamem.c; bwa-0.7.12.3/bwamem.h; bwa-0.7.12.3/bwamem_extra.c; bwa-0.7.12.3/bwamem_pair.c; bwa-0.7.12.3/bwape.c; bwa-0.7.12.3/bwase.c; bwa-0.7.12.3/bwase.h; bwa-0.7.12.3/bwaseqio.c; bwa-0.7.12.3/bwashm.c; bwa-0.7.12.3/bwt.c; bwa-0.7.12.3/bwt.h; bwa-0.7.12.3/bwt_gen.c; bwa-0.7.12.3/bwt_lite.c; bwa-0.7.12.3/bwt_lite.h; bwa-0.7.12.3/bwtaln.c; bwa-0.7.12.3/bwtaln.h; bwa-0.7.12.3/bwtgap.c; bwa-0.7.12.3/bwtgap.h; bwa-0.7.12.3/bwtindex.c; bwa-0.7.12.3/bwtsw2.h; bwa-0.7.12.3/bwtsw2_aux.c; bwa-0.7.12.3/bwtsw2_chain.c; bwa-0.7.12.3/bwtsw2_core.c; bwa-0.7.12.3/bwtsw2_main.c; bwa-0.7.12.3/bwtsw2_pair.c; bwa-0.7.12.3/example.c; bwa-0.7.12.3/fastmap.c; bwa-0.7.12.3/is.c; bwa-0.7.12.3/kbtree.h; bwa-0.7.12.3/khash.h; bwa-0.7.12.3/kopen.c; bwa-0.7.12.3/kseq.h; bwa-0.7.12.3/ksort.h; bwa-0.7.12.3/kstring.c; bwa-0.7.12.3/kstring.h; bwa-0.7.12.3/ksw.c; bwa-0.7.12.3/ksw.h; bwa-0.7.12.3/kthread.c; bwa-0.7.12.3/kvec.h; bwa-0.7.12.3/main.c; bwa-0.7.12.3/malloc_wrap.c; bwa-0.7.12.3/malloc_wrap.h; bwa-0.7.12.3/maxk.c; bwa-0.7.12.3/pemerge.c; bwa-0.7.12.3/qualfa2fq.pl; bwa-0.7.12.3/utils.c; bwa-0.7.12.3/utils.h; bwa-0.7.12.3/xa2multi.pl; [ 50%] No patch step for 'libbwa'; [ 50%] No update step for 'libbwa'; [ 51%] No configure step for 'libbwa'; [ 51%] Performing build step for 'libbwa'; /bin/ld: cannot find -lz; collect2: error: ld returned 1 exit status; make[3]: *** [bwa] Error 1; make[2]: *** [libbwa-prefix/src/libbwa-stamp/libbwa-build] Error 2; make[1]: *** [CMakeFiles/libbwa.dir/all] Error 2; make: *** [all] Error 2. So as you said I'd say its having issued finding the zlibs library. Similar to how I used 'DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h' to specify the zlib library for 'cmake', is there a way to do it for the 'make' command? I've tried using the following but haven't had success:; make -I /users/work/jake/bin/zlib-1.2.11/zlib.h; make --include-dir=/users/work/jake/bin/zlib-1.2.11/zlib.h. Sorry for the very basic questions.... I'm kind of learning as I go.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:3373,config,configure,3373,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,2,['config'],['configure']
Modifiability,"-cell RNA-seq experiment because map to introns. <img width=""400"" alt=""image"" src=""https://user-images.githubusercontent.com/5101911/69015737-65272f80-0997-11ea-87ab-9237e105622a.png"">. ### Loss of reads by using exonic references. Both Alevin and Cell ranger count only reads aligned to exons by default, thus losing some 35% of the reads. Large intronic proportions are a general feature of single-cell RNA-seq, for example the 10X PBMCs has ~20-25%, and nuclear data sets have 46% intronic reads in [[source](https://kb.10xgenomics.com/hc/en-us/articles/360000087552-Why-do-I-have-a-high-percentage-of-reads-mapping-to-intronic-regions-)]. . **So the best way to increase library 'quality' / counting statistics (which is my prime concern) seem to be including reads mapped to introns ‚Äì leading to hopefully a large increase in UMIs.**. ### Considerations: separate, additive signals. Since exons and introns contain different biological signal, ideally I would like to count as:. 1. Exon only 		(current)* ; 2. Intron only 		(as control / comparison to 1.) ; 3. Exon + intron 	(finally, for boosting statistics) . Where 2 would be a complementary set to 1, so that no read is counted as both intron and exon, and thus 1+2 =~ 3. . \* _I am not sure what happens to a read that maps to an exon/intron junction using the default Alevin and 10x Cell Ranger pipelines, but I assume both count it as exonic._. ### Solution by counting programs. - There is a way to build a ""pre-mRNA"" reference for 10X Cell ranger as described [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/references#premrna). . - I wondered if Alevin can be adapted to this aim? I guess besides all complete transcript models, you need to add one more: the pre-mRNA. (While some complexity can theoretically arise by the serial nature of splicing, I would ignore it at first). Would that be a good idea, or the advantage of Alevin would evaporate if we include introns?. Thanks!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/450:1827,adapt,adapted,1827,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/450,1,['adapt'],['adapted']
Modifiability,".; terminate called without an active exception; /cm/local/apps/sge/var/spool/compute-060/job_scripts/9987283: line 31: 1629 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Softw; are/Salmon-0.7.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/GENCODE/GRCh38_hg38/transcripts/salmon_index_gencode.v25.tr; anscripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test2/${ID}; **** Job ends ****; Wed Mar 8 11:53:40 EST 2017; ```. as well as the `gdb` output for it's core dump file:. ```bash; $ gdb core.1629; GNU gdb (GDB) Red Hat Enterprise Linux (7.2-60.el6_4.1); Copyright (C) 2010 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Missing separate debuginfo for the main executable file; Try: yum --disablerepo='*' --enablerepo='*-debug*' install /usr/lib/debug/.build-id/f2/3c99ed06abf17dd0ee1073eac092487ac62314; [New Thread 1629]; [New Thread 1707]; [New Thread 1708]; [New Thread 1709]; Core was generated by `/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.7.2_linux_x86_64/b'.; Program terminated with signal 6, Aborted.; #0 0x00000037e2032625 in ?? (); ""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/core.1629"" is a core file.; Please specify an executable to debug.; (gdb) q; ```. and the SGE info:. ```bash; $ qacct -j 9987283 -t 2; ==============================================================; qname shared.q; hostname compute-060.cm.cluster; group lieber_jaffe; owner lcollado; project NONE; department defaultdepartment; jobname step6-salmon_test2.gsk_phaseII; jobnumber 9987283; taskid",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:30579,config,configured,30579,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['config'],['configured']
Modifiability,"/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is simply to align one of these samples to the genome with a tool like STAR or HISAT2 and look at their mapping rate to known features. If it's similar, then the other reads could be accounted for by ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1583,adapt,adapter,1583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,2,['adapt'],['adapter']
Modifiability,"/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:4522,adapt,adapters,4522,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['adapt'],['adapters']
Modifiability,"/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir : /usr/local/Caskroom/miniforge/base/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/conda-forge/osx-arm64; https://conda.anaconda.org/conda-forge/noarch; package cache : /usr/local/Caskroom/miniforge/base/pkgs; /Users/Benjamin/.conda/pkgs; envs directories : /usr/local/Caskroom/miniforge/base/envs; /Users/Benjamin/.conda/envs; platform : osx-arm64; user-agent : conda/4.12.0 requests/2.27.1 CPython/3.9.13 Darwin/21.5.0 OSX/12.4; UID:GID : 501:20; netrc file : None; offline mode : False. An unexpected error has occurred. Conda has prepared the above report. If submitted, this report will be used by core m",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:5322,config,config,5322,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['config'],['config']
Modifiability,"1 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -rdynamic CMakeFiles/unitTests.dir/__/tests/UnitTests.cpp.o CMakeFiles/unitTests.dir/FragmentLengthDistribution.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/rank9b.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/bit_array.c.o -o unitTests -L/home/mathog/src/salmon/lib -L/home/mathog/src/salmon/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" libsalmon_core.a libalevin_core.a -lgff -lpthread ../external/install/lib/libstaden-read.a -lz ../external/install/lib/libdivsufsort.a ../external/install/lib/libdivsufsort64.a ../external/install/lib/libbwa.a -lm -llzma -lbz2 -ltbb -lgomp -lrt ../external/install/lib/libjemalloc.a -lrt -ldl ../external/install/lib/libjemalloc.a -ldl`. Oh, I also had to update automake and autoconf because the 2 year old versions on this system were not new enough. Is there a static binary version of salmon available for download, Linux 64 bit? It looks like the default links are that way anyway, and that would save me what looks like at least another day of fighting with Cmake to force it to actually build a working make file. . You are developing on something like a recent Fedora or Ubuntu? In my experience packages which use boost and cmake inevitably cause a great great deal of pain when they are built on platforms like Centos or RHEL where long term support is one of the goals. They work fine on platforms which are cutting edge, but backwards compatibility extends back maybe 6 months or a year, tops.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719:4137,extend,extends,4137,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719,1,['extend'],['extends']
Modifiability,"303] [jointLog] [info] There is 1 library.; [2021-05-19 18:46:25.429] [jointLog] [info] Loading pufferfish index; [2021-05-19 18:46:25.429] [jointLog] [info] Loading dense pufferfish index.; [2021-05-19 18:46:27.087] [jointLog] [info] done; [2021-05-19 18:46:27.087] [jointLog] [info] Index contained 141,069 targets; [2021-05-19 18:46:32.618] [jointLog] [info] Number of decoys : 0; [2021-05-19 18:46:33.428] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-19 18:49:27.444] [jointLog] [error] . [2021-05-19 18:49:27.506] [jointLog] [error] Processing reads : Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid. ```; For rabbitQC's log; ```; Detecting adapter sequence for read1...; CCCAGCCATAACACAGTATCAAACTCCACTATTTGTCTGATCCGTACTTATTACAGCCGT. Detecting adapter sequence for read2...; CCAACTTGGTCTACAAGACGCCACATCCCCTATTATAGAAGAGCTAATAAATTTCCATGA. Read1 before filtering:; total reads: 44178187; total bases: 2140649565; Q20 bases: 1899503304(88.7349%); Q30 bases: 1839878933(85.9496%). Read1 after filtering:; total reads: 34172299; total bases: 1775386278; Q20 bases: 1762557969(99.2774%); Q30 bases: 1737891531(97.8881%). Read2 before filtering:; total reads: 44178187; total bases: 2233386484; Q20 bases: 2180294210(97.6228%); Q30 bases: 2141791820(95.8988%). Read2 aftering filtering:; total reads: 34172299; total bases: 1749324083; Q20 bases: 1731172028(98.9623%); Q30 bases: 1700577336(97.2134%). Filtering result:; reads passed filter: 68344598; reads failed due to low quality: 11353966; reads failed due to too many N: 40048; reads failed due to too short: 8617762; reads with adapter trimmed: 382600; bases trimmed due to adapters: 6698794; reads corrected by overlap analysis: 123572; bases corrected by overlap analysis: 125602. Duplication rate: 1.23916%. Insert size peak (evaluated by paired-end reads): 1. JSON report: RabbitQC.json; HTML report: SRR1852518.html; ```; Best,; Ci",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660:3443,adapt,adapter,3443,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660,2,['adapt'],"['adapter', 'adapters']"
Modifiability,"; Processors active: 0 1 2 3 4 5 6 7 8 9 10 11; Primary memory available: 64.00 gigabytes; Default processor set: 650 tasks, 3562 threads, 12 processors; Load average: 1.14, Mach factor: 10.84; /bin/machine = unknown; /usr/bin/oslevel = unknown; /bin/universe = unknown. PATH: /Users/jeremybono/miniforge3/bin; PATH: /Users/jeremybono/miniforge3/condabin; PATH: /opt/homebrew/bin; PATH: /opt/homebrew/sbin; PATH: /usr/local/bin; PATH: /System/Cryptexes/App/usr/bin; PATH: /usr/bin; PATH: /bin; PATH: /usr/sbin; PATH: /sbin; PATH: /Users/jeremybono/Downloads/bbmap; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin. ## ----------- ##; ## Core tests. ##; ## ----------- ##. configure:2959: checking build system type; configure:2973: result: arm-apple-darwin22.6.0; configure:2993: checking host system type; configure:3006: result: arm-apple-darwin22.6.0; configure:3066: checking if debugging code should be compiled; configure:3082: result: no; configure:3122: checking which encoders to build; configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:3000,config,configure,3000,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,2,['config'],['configure']
Modifiability,"> > Hmm strange! But `conda install salmon` still gives the same error for me.; > ; > Hi @charlotte-west,; > ; > Can you please try the following?; > ; > ```; > CONDA_SUBDIR=osx-64 conda create -n rosetta # create a new environment; > conda activate rosetta; > conda env config vars set CONDA_SUBDIR=osx-64 # subsequent commands use intel packages; > conda install salmon; > ```; > ; > These instructions came from (here)[https://github.com/Haydnspass/miniforge#rosetta-on-mac-with-apple-silicon-hardware] and have worked for me on my M1 laptop. My understanding is that conda / bioconda are still working on having worker nodes that can pre-compile native M1 executables. So, until that work is complete, it may be necessary to run certain native packages in a Rosetta environment. Let me know if this works for you.; > ; > Best, Rob. it worked for me but i had to remove the comments starting with the `#`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1384299365:271,config,config,271,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1384299365,1,['config'],['config']
Modifiability,"> Hi Brian,; > ; > In general, I would argue that one should be cautious with removing PCR duplicates in RNA-seq data (unless you are dealing with reads with UMI tags). This is because reads that align to the same reference position can easily have come from alternative transcripts sharing the same underlying sequence. Hence, the normal tests used to infer PCR duplicates with e.g. DNA-seq reads can yield false-positives in RNA-seq. This is particularly true for highly abundant transcripts (or transcripts from highly-abundant genes).; > ; > We are currently working on the code that will do duplicate removal when UMI tags are present. That methodology can be extended to remove duplicates even without UMI tags --- though I'd generally caution against that for the reasons mentioned above. However, for the time being, if you have a strong need or desire to filter PCR duplicates, you could use alignment-based Salmon with a BAM file that has duplicates removed.; > ; > Finally, regarding the error you are getting during SAM validation; this sounds like a different issue. Would you mind providing a piece of that SAM file for me to take a look at? Specifically, I don't believe the quasi-mapping output file should even contain unmapped reads (unless you consider unmapped mates of orphaned reads).; > ; > --Rob. It is in the latest Salmon release?. Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-446191570:665,extend,extended,665,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-446191570,1,['extend'],['extended']
Modifiability,"> Hmm strange! But `conda install salmon` still gives the same error for me. Hi @charlotte-west,. Can you please try the following?. ```; CONDA_SUBDIR=osx-64 conda create -n rosetta # create a new environment; conda activate rosetta; conda env config vars set CONDA_SUBDIR=osx-64 # subsequent commands use intel packages; conda install salmon; ```. These instructions came from (here)[https://github.com/Haydnspass/miniforge#rosetta-on-mac-with-apple-silicon-hardware] and have worked for me on my M1 laptop. My understanding is that conda / bioconda are still working on having worker nodes that can pre-compile native M1 executables. So, until that work is complete, it may be necessary to run certain native packages in a Rosetta environment. Let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671:244,config,config,244,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671,1,['config'],['config']
Modifiability,"> Thanks!! Looking into it, replied. Hi,. I am having a similar issue when running salmon 1.4 on stranded single end data. Transcript count is over 4,000 for certain genes when analyzed by STAR, but salmon does not detect the transcript. Is there any newer version of this branch or suggested configuration that I can use to test my data? Thank you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-1145373488:293,config,configuration,293,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-1145373488,1,['config'],['configuration']
Modifiability,"@Gaura this sort of frameshift in the barcodes is a known issue, and can be computationally challenging (at least for existing methods). zUMIs, for example, does an automatic barcode detection based on fixed barcode positions like we're doing here with alevin, so it would mis-detect cells like the shifted ones you pasted above. For SPLiT-seq, we do know exactly which barcodes go into the wells, however, so it is technically possible to restrict based on all possible known combinations of barcodes instead and be more positionally flexible. But deciding how many indel bases are allowable, and presumably doing multiple passes through the data to establish an include-list could be time-consuming. Further, the zUMIs developer rightly mentions [in this thread](https://github.com/sdparekh/zUMIs/issues/63) that there are likely going to be _many_ unused barcode combinations this way, so lots of time could be spent looking for ""cells"" that don't actually exist in the data. The authors of the paper from which our test dataset was derived describe in their methods using a Drop-seq computational framework, so I'm not sure which approach theirs is more similar to. . The simplest approach here is certainly the automatic detection, but it will come at the cost of losing meaningful reads to frameshift errors. . My guess is this falls well out of the scope of alevin, but if you're interested in improving on that, there may be a middle ground between the two approaches above, one that I'm not sure if your group or others have attempted for other methods: we could essentially do a 2-pass barcode detection. The first pass would restrict based on positions like we're already doing, and establish an include-list of possible barcodes seen in the data. Then we could pass through the barcode sequences a second time, looking only for those sequence combinations, but allowing 1-2bp flexibility in the positions they occur, potentially rescuing some of the ones missed during the first pass. This",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985554883:535,flexible,flexible,535,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985554883,2,['flexible'],['flexible']
Modifiability,"@bgruening So I've tried some runs today with higher memory configurations and can still reproduce the segfault. I'm going to continue on and try to write up a reproducer for @dpryan79 [here](https://github.com/bioconda/bioconda-recipes/issues/10662#issuecomment-415967622). **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=25000`**; - `scontrol show job 94`; ```; JobId=94 Name=g990_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901667 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:07:32 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T15:36:41 EligibleTime=2018-08-27T15:36:41; StartTime=2018-08-27T15:36:41 EndTime=2018-08-27T15:44:13; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:21595; ReqNodeList=(null) ExcNodeList=(null); NodeList=w19; BatchHost=w19; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=25000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/990; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/990/tool_script.sh: line 50: 5713 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; ip-172-31-30-93 kernel: [ 681.083866] salmon[4167]: segfault at 2641a i",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:60,config,configurations,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['config'],['configurations']
Modifiability,"@cihanerkut and @EricDeveaud,. We just released 1.2.1, which is on the release page, and dockerhub, and should propagate to bioconda soon. It adds support for the `SALMON_NO_VERSION_CHECK` environment variable. If you set `SALMON_NO_VERSION_CHECK` to either `1` or `TRUE` in the environment where salmon is running, it will skip the version check. I hope this helps!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617830312:201,variab,variable,201,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617830312,1,['variab'],['variable']
Modifiability,"@cliftonlewis: could you tell us version of alevin-fry are you using? ; @rob-p: The cellbarcode length should be 21. It is variable b/w 19 or 20 so AC or A is added to make it 21. It could be the odd-even error we saw on previous version of alevin-fry. Wrt the run without `--justAlign`, I would need to take a closer look.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1332726376:123,variab,variable,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1332726376,1,['variab'],['variable']
Modifiability,@k3yavi . I cannot get it to update even on new env. My command is; ```; conda install -c bioconda salmon=1.0.0; ```; and it freezes everytime; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/461#issuecomment-567461956:277,flexible,flexible,277,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/461#issuecomment-567461956,1,['flexible'],['flexible']
Modifiability,"@rob-p . I did notice that the header was missing so I am looking into getting the original. I downloaded/unzipped the files you sent and seem to still have the same issue, though. ; ```; $ conda activate salmon; $ cd ~/opt/anaconda2/envs/salmon; $ ./bin/salmon quant -l IU -t transcripts.fa -a sample_alignments.sam -o quant_directory; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.2.0; # [ program ] => salmon ; # [ command ] => quant ; # [ libType ] => { IU }; # [ targets ] => { transcripts.fa }; # [ alignments ] => { sample_alignments.sam }; # [ output ] => { quant_directory }; Logs will be written to quant_directory/logs; [2020-04-21 11:46:41.365] [jointLog] [critical] Note: Alignment-free mapping (i.e. mapping without subsequent selective-alignment) has not yet been throughly tested under the pufferfish-based index and using the pufferfish-based mapping strategies. Thus, disabling of selective-alignment is not currently allowed. We may, potentially explore re-enabling this option in future versions of salmon. ```. To set up Salmon, I entered the following per the Getting Started Guide:; `$ conda config --add channels conda-forge`; `$ conda config --add channels bioconda`; `$ conda create -n salmon salmon`. Then, set the wd to `~opt/anaconda2/envs/salmon`. To run, I dropped the `transcripts.fa` and `seq.bam`/`seq.sam` file into the ~opt/anaconda2/envs/salmon and ran it. I noticed that if I moved the files to an entirely separate directory or deleted them all together and ran `./bin/salmon quant -l IU -t transcripts.fa -a sample_alignments.sam -o quant_directory`, the same error came up. Is it possible that there is an issue with Salmon reading the files?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617263834:1157,config,config,1157,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617263834,2,['config'],['config']
Modifiability,"@rob-p I would request that you try out bbduk and bbmap for quality/adapter trimming and contaminant removal.; > Thank you for verifying @zhangchipku, For the time being, I can recommend `fastp` as a fairly efficient / fast trimmer that. It might even be able to work in a streaming fashion so that you could pipe the trimmed reads directly to salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-592995074:68,adapt,adapter,68,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-592995074,1,['adapt'],['adapter']
Modifiability,"@sjackman ,. Thanks for raising this question. I actually think that making the barcode processing phase of alevin a bit more general sounds like an excellent idea. Right now, the barcode processing is parameterized by a class that describes the barcode layout etc. These are represented, basically, as C++ policy classes. However, having a custom policy (specified in e.g. a YAML file or some such) wouldn't be too difficult to do, and might make the barcode processing useful in a larger context. We'd be happy to help implement this and see if it works in your context. One question to resolve first, though (please chime in here @k3yavi) is what assumptions make sense for bar code correction in each datatype. That is, do we expect similar-ish numbers and distributions of barcodes, etc. so that our ""knee-in-the-curve"" heuristics still make sense?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395180151:202,parameteriz,parameterized,202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395180151,1,['parameteriz'],['parameterized']
Modifiability,"@vbontempi96,. Thanks to @genomax, working from an M1, it seems likely that the issue is your order of Conda channels. Given an empty channel list, try the following:. ```; conda config --add channels defaults; conda config --add channels bioconda; conda config --add channels conda-forge; conda create -n salmon salmon; ```. This should allow you to get the latest salmon (currently 1.6.0) on an M1 from bioconda. Please feel free to re-open if this doesn't work for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-984952328:179,config,config,179,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-984952328,3,['config'],['config']
Modifiability,"@zhangchipku,. Yes, it seems that the biggest culprit here is `num_fragments_filtered_vm`. That is the number of fragments filtered because the best alignment failed to reach the threshold for a ""valid"" alignment. Here, `47,470,013` fragments are discarded entirely because they didn't have an alignment meeting the required quality. If these fragments (which do have matching MEMs, because alignment was carried out for them) were mapped, then the overall mapping rate would go up to `50,729,814 + 47,470,013 = 98,199,827 / 107,275,750 = ~91.5%`. Now, I wouldn't expect _all_ of these to be mappable, and some alignments might not be feasible at any reasonable quality whatsoever. My recommendation would be as follows. First, have you trimmed these reads (using e.g. `fastp` or `TrimGalore` or some such)? Very low quality read ends or (more likely) adapter contamination could cause the reads that have matching MEMs to fail to align within the required score threshold. My first recommendation would be to trim the reads and see how the mapping rate changes. Second, the required alignment score is a user-alterable parameter. By changing `--minScoreFraction` to be lower, you can allow reads with even lower alignment scores to be counted for quantification. The default value is `0.65`, so you could explore what happens if you lower this number. The number represents the fraction of the maximum achievable alignment score that a read must obtain to be considered a valid alignment. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586473052:852,adapt,adapter,852,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586473052,1,['adapt'],['adapter']
Modifiability,A PR noting the differences in my approach to #269.; The one that I think needs addressing is in `writeFastq` (https://github.com/COMBINE-lab/salmon/compare/develop...PeteHaitch:develop?expand=1#diff-bf2f37cd9ea77a5c454a5bd860a924ee); without some change to this the `UMI` and `CB` are incorrectly extracted for CEL-Seq2. ; I simply commented out the original lines and modified it as needed for CEL-Seq2 in order to test my modified version.; I guess some sort of protocol-specific conditional is needed here. The remainder are minor/cosmetic choices of variable names (please feel free to ignore!).,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/285:555,variab,variable,555,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/285,1,['variab'],['variable']
Modifiability,"Add [sci-rna-seq3 protocol](https://www.nature.com/articles/s41586-019-0969-x) to salmon alevin. To use this protocol pass the `--sciseq3` flag. The details of library preparation can be seen [here](https://teichlab.github.io/scg_lib_structs/methods_html/sci-RNA-seq3.html). Briefly, the reads have 9-10 bp hairpin adaptor index, and 10bp reverse transcription index which together make the cell barcode of 19-20 bp in length; an 8 bp UMI which follows a 6bp anchor sequence CAGAGC. . Summary of changes:; 1. `--sciseq3` flag added to process sci-rna-seq3 reads; 2. a local copy of single cell protocol is created before barcodes and UMI are extracted to allow share the position of anchor sequence and avoid searching twice; 3. In case the barcode is 19bp, `A` is added as the last nucleotide to make the cell barcodes length 20 bp for all barcodes. It was tested on data from the [Nature paper](https://www.nature.com/articles/s41586-019-0969-x). Correlation b/w the counts from the GEO submission [GSE119945](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE119945) and sum of spliced, unspliced reads with and without ambiguous counts using `usa` mode in alevin-fry gave reasonable looking correlations. ; Results for one of the fastq files:; ![image](https://user-images.githubusercontent.com/12998572/128923136-eefa8738-f87e-4f67-bba6-5cc1648ce194.png). ```; Min. 1st Qu. Median Mean 3rd Qu. Max. ; 0.4594 0.7805 0.8295 0.8253 0.8736 0.9943 ; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/695:315,adapt,adaptor,315,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/695,1,['adapt'],['adaptor']
Modifiability,"After generating issue #48, I took the recommendation of switching to the standard EM algorithm, but I'm having further problems. However, I don't think the problem was with the Variational EM algorithm, but an issue with how the dataset is behaving. . This is with the same dataset as before (single end, rRNA-depleted, second-strand protocol, extreme depth of 170M+ reads). I have the options --useFSPD and --biasCorrect turned on with library type ""SF""; the full call is . ```; salmon quant -i $SALMON_DIR -l SF -r <(gzip -c -d $IN_FILE) -o $OUTPUT \; --numBootstraps 100 --useFSPD --geneMap $GENES \; --biasCorrect -p 59; ```. I had attempted to use wasabi and run sleuth, but I got an error where the number of transcripts passing the initial filter was ""NA"". I then discovered that for four samples, many of the transcripts had ""-nan"" generated for the ""NumReads"" column, and this led to all of them having ""-nan"" for the TPM column. One sample had ~100 that failed, but the other three had a variable 106K-109K out of 176K total transcripts fail. No warning or error was thrown during the quantifying or EM optimization steps, so I don't know what happened. Interesting, I should note that the NaNs are only generated when both biasCorrect and useFSPD are turned on. NaNs are not generated when I use only one or neither option. (this was only tested with one sample though). If you have immediate suggestions, that would be great. Otherwise, I can work on generating a test dataset.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/50:999,variab,variable,999,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/50,1,['variab'],['variable']
Modifiability,"After starting a blank Ubuntu machine, and then executing:. ```; sudo apt-get update && \; sudo apt-get -y install screen git curl gcc make g++ python-dev unzip \; default-jre pkg-config libncurses5-dev r-base-core r-cran-gplots \; python-matplotlib python-pip python-virtualenv sysstat fastqc \; trimmomatic bowtie samtools blast2; sudo apt-get -y install cmake libboost-all-dev liblzma-dev. curl -O -L https://github.com/COMBINE-lab/salmon/archive/v0.5.0.tar.gz. tar xzf v0.5.0.tar.gz; cd salmon-0.5.0; cmake .; make; ```. gives. ```; In file included from /home/ubuntu/salmon-0.5.0/include/BAMQueue.hpp:146:0,; from /home/ubuntu/salmon-0.5.0/include/AlignmentLibrary.hpp:14,; from /home/ubuntu/salmon-0.5.0/src/SalmonUtils.cpp:13:; /home/ubuntu/salmon-0.5.0/include/BAMQueue.tpp: In function 'bool checkProperPairedNames_(const char*, const char*, uint32_t)':; /home/ubuntu/salmon-0.5.0/include/BAMQueue.tpp:247:33: error: 'BOOST_LIKELY' was not declared in this scope; if (BOOST_LIKELY(nameLen > 1)) {; ^; ```. I'm not sure if this is a Boost version requirement, or what -- looks like I have boost 1.54 installed. Suggestions welcome!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/24:180,config,config,180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/24,1,['config'],['config']
Modifiability,"Ah, my bad. I assumed you were running featureCounts via the pipeline. Thanks for clarifying. Happy to incorporate changes into the pipeline in the future if they improve the default behaviour. For now, you can tweak the settings you provide the pipeline to incorporate the `--softclipOverhangs` parameter. You can put the snippet below in a file called `custom.config` and pass to the pipeline on the CLI with `-c custom.config`:. ```; process {; withName: '.*:QUANTIFY_SALMON:SALMON_QUANT' {; ext.args = '--softclipOverhangs'; }; }; ```. Let me know if you have any problems with this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1239100429:362,config,config,362,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1239100429,2,['config'],['config']
Modifiability,"Ahh, that's the number of *mappings* discarded. No need to worry about that. Basically, that's the number of places where seeding was tried, but alignment failed. This is very common in alignment (a seed can't be extended to a high quality alignment). The number of fragments discarded is what matters (number of fragments where all alignment locations failed). The strand bias signifies that your library is likely strand specific, though you are mapping in unstranded mode. This means that even alignments that don't agree with the stranded protocol will be allowed. This looks like ISR (first read from the reverse strand) by the looks of it. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126583954:213,extend,extended,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126583954,1,['extend'],['extended']
Modifiability,"Also, I assumed (according to the documentation) that these underflow and overflow errors inherit from `std::runtime_error`, but I've updated the try/catch with a more generic exception class just in case they are not.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393631624:90,inherit,inherit,90,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393631624,1,['inherit'],['inherit']
Modifiability,"Asked from a colleague claiming it was better to use ""correct"" values (ie, given by the RNASeq platform) for fragment length distribution, I tried to use this option. However, I did not understood a few thing about them in the documentation, and could not figure out the answer from the code...; The documentation states that these options give the mean and standard deviation of a truncated normal variable used to model the distribution. However, it is not clear if they correspond of the (¬µ, sigma) parameters of the Gaussian that _will_ be truncated (as is usually given) or _after_ truncation, as is easy to estimate by sample mean and sample standard deviation. These values may be quite different, I guess, if truncation is indeed important.; From the code, I found that the values are stored in the fragLenDistMean and fragLenDistPriorSD slots of the SalmonOpts, and that their default values are 200 and 80. However, I could not find any place where these slots were used again (a grep on all .cpp files in src did not found any result except the lines in SalmonQuantify.cpp and SalmonQuantifyAlignments.cpp that seem to parse the command line options:; ` (; ""fldMean"",; po::value<size_t>(&(sopt.fragLenDistPriorMean))->default_value(200),; ""The mean used in the fragment length distribution prior""); (; ""fldSD"",; po::value<size_t>(&(sopt.fragLenDistPriorSD))->default_value(80),; ""The standard deviation used in the fragment length distribution ""; ""prior""); `; However, I do not use C++ so I may have missed something in the role of the `po` namespace.; Could you give any hint of where these values are used, so I can understand what is there exact meaning?; Thanks in advance",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127:399,variab,variable,399,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127,1,['variab'],['variable']
Modifiability,"C 1; | #define HAVE_ENCODER_IA64 1; | #define HAVE_ENCODER_ARM 1; | #define HAVE_ENCODER_ARMTHUMB 1; | #define HAVE_ENCODER_SPARC 1; | #define HAVE_DECODER_LZMA1 1; | #define HAVE_DECODER_LZMA2 1; | #define HAVE_DECODER_DELTA 1; | #define HAVE_DECODER_X86 1; | #define HAVE_DECODER_POWERPC 1; | #define HAVE_DECODER_IA64 1; | #define HAVE_DECODER_ARM 1; | #define HAVE_DECODER_ARMTHUMB 1; | #define HAVE_DECODER_SPARC 1; | #define HAVE_MF_HC3 1; | #define HAVE_MF_HC4 1; | #define HAVE_MF_BT2 1; | #define HAVE_MF_BT3 1; | #define HAVE_MF_BT4 1; | #define HAVE_CHECK_CRC32 1; | #define HAVE_CHECK_CRC64 1; | #define HAVE_CHECK_SHA256 1; | #define ASSUME_RAM 128; | #define PACKAGE ""xz""; | #define VERSION ""5.2.2""; | /* end confdefs.h. */; | ; | int; | main (); | {; | ; | ;; | return 0;; | }; configure:5259: error: in `/Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2':; configure:5261: error: C compiler cannot create executables; See `config.log' for more details. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=arm-apple-darwin22.6.0; ac_cv_env_CCASFLAGS_set=; ac_cv_env_CCASFLAGS_value=; ac_cv_env_CCAS_set=; ac_cv_env_CCAS_value=; ac_cv_env_CC_set=set; ac_cv_env_CC_value=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_env_CFLAGS_set=set; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=set; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_LDFLAGS_set=set; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_LT_SYS_LIBRARY_PATH_set=; ac_cv_env_LT_SYS_LIBRARY_PATH_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_host=arm-apple-darwin22.6.0; ac_cv_path_install='/usr/bin/install -c'; ac_cv_prog_AWK=awk; ac_cv_prog_ac_ct_CC=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_prog_make_make_set=yes; am_cv_make_support_nested_variables=ye",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:8001,variab,variables,8001,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['variab'],['variables']
Modifiability,Configure error installing salmon,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:0,Config,Configure,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['Config'],['Configure']
Modifiability,"Could you please share one of the output directories? It's not immediately obvious what the problem might be, since the log ends with . ```; [2020-06-03 23:47:15.955] [jointLog] [info] Computing gene-level abundance estimates; ```. which suggests the function to aggregate abundances to the gene level should be activated. On a related note, though we are definitely interesting in figuring out what might being going awry here, the recommended way to aggregate transcript-level abundances from salmon to the gene level is to use [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html), as it accounts for across-sample variability in expressed gene length, and makes it trivial to get your corresponding gene counts into a downstream DE tool like DESeq2, EdgeR, etc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/530#issuecomment-638453196:642,variab,variability,642,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/530#issuecomment-638453196,1,['variab'],['variability']
Modifiability,"Currently on develop branch, there is a build error. https://travis-ci.org/COMBINE-lab/salmon/builds/418288039; https://api.travis-ci.org/v3/job/415232259/log.txt. ```; cd /home/travis/build/COMBINE-lab/salmon/external/boost_1_66_0 && CC=/usr/bin/gcc-7 CXX=/usr/bin/g++-7 /home/travis/build/COMBINE-lab/salmon/external/boost_1_66_0/b2 -d0 -j2 --with-iostreams --with-atomic --with-chrono --with-container --with-date_time --with-exception --with-filesystem --with-graph --with-graph_parallel --with-math --with-program_options --with-system --with-locale --with-timer toolset=gcc toolset=gcc cxxflags=-std=c++14 ""cxxflags= -std=c++14 -I/home/travis/build/COMBINE-lab/salmon/external/install/include -L/home/travis/build/COMBINE-lab/salmon/external/install/lib"" link=static install. g++: error: unrecognized command line option ‚Äò-std=c++14‚Äô; ```. I suspect the `g++` (Not `g++-N`) is wrongly used for to build boost.; As a result, the old version `g++` version 4.8 does not support `-std=c++14`. Maybe. https://www.boost.org/doc/libs/1_66_0/more/getting_started/unix-variants.html; https://stackoverflow.com/questions/5346454/building-boost-with-different-gcc-version. Maybe below kind of process is necessary if CC=gcc-N. ```; $ echo ""using gcc : 7 : /usr/bin/g++-7 ; "" >> tools/build/src/user-config.jam; $ ./bootstrap.sh ...; $ ./b2 --toolset=gcc-7 ...; ```. Here is my work to fix the issue.; Still working in progress.; But you can imagine how I am trying to fix it. I am not familiar with the `cmake`.; https://github.com/junaruga/salmon/commit/6cb73098155f0e776d4eb68bc639f3d761dd8963. If possible, I want you to fix this issue :)",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/275:1294,config,config,1294,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/275,1,['config'],['config']
Modifiability,"Dear Salmon team,. We have previously been using salmon 0.8.1 for our RNA sequencing analysis pipeline and wanted to upgrade to the latest version (1.3.0). Upon comparing the quant.sf output from salmon 0.8.1 to 1.3.0 (see command below), we noticed that we had far less transcripts with a TPM of unequal 0 in the quant.sf file generated by salmon 1.3.0 compared to the quant.sf output from salmon 0.8.1. . cmd1 = (""{salmon} --no-version-check quant --libType {libType} ""; "" --targets {salmon_ref} --useVBOpt --numBootstraps 50 ""; "" --seqBias --gcBias --geneMap {salmon_gtf}""; "" --sampleOut --sampleUnaligned --threads {threads}""; "" --alignments {input_files[1]} --output {output_dir}/salmon""). I have downsampled the bam file on which we tested the two salmon versions, which can be found here: https://drive.google.com/file/d/1-3ZCXlYkBsu4wyYBgbgQQUbqRwICsyLB/view?usp=sharing . As the error model was not used in salmon 0.8.1, and is now run if the flag ‚ÄìnoErrorModel is not set, I furthermore ran salmon 1.3.0 without the error model and performed another run with the error model and range factorization (set to 4 as recommended) enabled. . For this particular downsampled bam file, salmon 0.8.1 got 36.9% of TPM‚Äôs unequal 0 but for all three differently configured salmon 1.3.0 runs that number drops to 7.3%. . Is this drastic reduction in detected transcripts in the newer version the result of fewer false positives compared to the old salmon version?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/562:1260,config,configured,1260,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/562,1,['config'],['configured']
Modifiability,"Excellent! Now we should do some internal testing to see if this has any negative performance impact on machines that _do_ have SSE4. Then we can determine if we can just make this the default, or if it's worth cutting a release under 2 configurations.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-610602162:237,config,configurations,237,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-610602162,1,['config'],['configurations']
Modifiability,"FYI, I'm taking another crack at an official FreeBSD port, but still hitting some gnarly issues with 1.5.2, so it might be a while. https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon; https://github.com/outpaddling/freebsd-ports-wip/tree/master/pufferfish; https://github.com/COMBINE-lab/salmon/issues/502. 1. The cmake system still forces downloading pufferfish during configure, which is forbidden in the ports system (like many other package managers). All downloads must occur during fetch phase and be verified using locally stored checksums. This would be easy to work around using GH_TUPLE, which downloads additional distfiles during fetch phase, except that fetchPufferfish.sh doesn't just extract the pufferfish dist, but has a long list of ""cp"" commands to copy pieces of it to ${INSTALL_DIR}. That's not something I'm inclined to tamper with since it will likely change with new versions and hence be a headache to maintain over time. It would be ideal if salmon could work with a separately installed pufferfish as it does with many other dependencies. This would make the port much cleaner.; 2. The code is not compatible with onetbb 2021.3, which is the current FreeBSD ports version.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-917642392:387,config,configure,387,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-917642392,1,['config'],['configure']
Modifiability,"FYI, miniconda works fine on FreeBSD. It's not too difficult to configure manually, but to make it even easier:. As root:. ```; pkg install auto-admin linux-miniconda-installer; auto-install-linux_base; ```; As a non-root user:. ```; miniconda-installer; conda-shell; conda config --add channels conda-forge; conda config --add channels bioconda; conda create -n salmon salmon; ```; Note: Just running `conda install salmon` instead of `conda create -n salmon salmon` will install a very old version rather than the latest. This utilizes the Linux compatibility module, which simply adds Linux system calls to the FreeBSD kernel. Unlike a virtual machine, there's no performance penalty and memory overhead is trivial. In fact, Linux binaries sometimes run slightly faster on FreeBSD than they do on Linux. Average speed is about the same. I'd only use conda as a stop-gap, though. There's a large and growing selection of bioinformatics software in FreeBSD ports that can be more easily installed and used, e.g. 'pkg install samtools bwa'. Also I'm working on a native FreeBSD port for salmon:. https://github.com/COMBINE-lab/salmon/issues/162. Best,. Jason",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-917648051:64,config,configure,64,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-917648051,6,['config'],"['config', 'configure']"
Modifiability,"For clarification: From memory, using the same cluster, I had the same error at the same stage but only with particular data sets and confirmed this was not an issue of available memory. @k3yavi may remember some more of the details but we never got to the bottom of it. . @Acribbs Testing on another cluster would be a good idea in case this is a very specific cluster configuration issue",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458160685:370,config,configuration,370,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458160685,1,['config'],['configuration']
Modifiability,"From the `alevin-fry` repo (by @fransua). ```; Hi,; I cannot find clear help on read_geometry. There are a couple of examples but they do not seem to work for me and I am struggling to change them.; Specifically I have several questions:. what does the ""read_geometry"" refers to? I saw that it is usually set to ""2[1-end]"", but why only read 2, and when does the whole read is not a read?. what is the pattern of inclusion exclusion? 1-10 starts at the first nucleotide but includes the ninth or the tenth too?. How does alevin-fry deals with unexact position, for instance in my case the cell tag can start anywhere between position 85 and 115 because of a variable polyA before. thanks. ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/816:658,variab,variable,658,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/816,1,['variab'],['variable']
Modifiability,"Greetings,. When trying to debug test failure, I ended up with an incomplete error messages which turned out to stem from a typo in the variable name, so I took the liberty to make the whole message a bit more verbose to help with the present and future debugging. I thought you might be interested.; Have a nice day, :); √âtienne.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/810:136,variab,variable,136,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/810,1,['variab'],['variable']
Modifiability,"Hello all, . I really wish Salmon was easier to install. . When running: . _cmake -DFETCH_BOOST=TRUE -DCMAKE_INSTALL_PREFIX='/home/.../salmon-master/'_. I get the following message: . _Making Release build; running /home/Documents/apps/salmon-master/scripts/fetchRapMap.sh 2>&1; /home/Documents/apps/salmon-master/scripts/fetchRapMap.sh: line 33: curl: command not found; -- fetch RAPMAP exit code 127. CMake Error at CMakeLists.txt:265 (message):; Could not fetch RapMap source [fetchRapMap.sh returned exit code 127]. -- Configuring incomplete, errors occurred!; See also ""/home/krablab/Documents/apps/salmon-master/CMakeFiles/CMakeOutput.log"".; See also ""/home/krablab/Documents/apps/salmon-master/CMakeFiles/CMakeError.log""._. This seems to be an issue that keeps coming up. What is the proper way to solve it? ; Thanks in advance",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/331:523,Config,Configuring,523,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/331,1,['Config'],['Configuring']
Modifiability,"Hello salmon team! @jamorrison and I were looking through the code and seeing how best we could contribute a new single-cell RNA-seq technology. Our approach (STORM-seq https://www.biorxiv.org/content/10.1101/2022.03.14.484332v3) has made use of salmon for the pre-print and recently been extended to include UMIs. Thus, we would love to make use of the alevin fry framework if possible. It's paired-end, but without a cell barcode and uses `-l ISR` as the library type in salmon. The read structure looks like this:. Read 1; biological read. Read 2; UMI (8bp) + Linker (6bp) + biological read. We've started looking through the `SingleCellProtocols.hpp` header file to add in STORM, but wanted to ask what would be the best way to go about contributing a new technology like this. Also, without the cell barcode, would it make sense to have a small function to add a synthetic barcode if the length of the cell barcode is 0?. Thanks again for a great tool!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/805:289,extend,extended,289,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/805,1,['extend'],['extended']
Modifiability,"Hello, salmon developer!; I am working on an arm HPC machine. And when I tried to build with salmon on it. I found a little problem in the CMakeLists.txt. ```; not setting -DHAVE_NUMERIC_LIMITS128; CMake Error at /home/hzwi/arm_software/biosoft/cmake-3.23.0-linux-aarch64/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Iconv (missing: Iconv_LIBRARY); Call Stack (most recent call first):; /home/houzhuangwei/arm_software/biosoft/cmake-3.23.0-linux-aarch64/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE); /home/hzw/arm_software/biosoft/cmake-3.23.0-linux-aarch64/share/cmake-3.23/Modules/FindIconv.cmake:165 (find_package_handle_standard_args); CMakeLists.txt:362 (find_package); ```; It seems the cmake can not found the right path of libiconv.; So I change the CMakeLists.txt the 362-365 line.; ```; find_package(Iconv REQUIRED); if(NOT Iconv_IS_BUILT_IN); set(ICONV_LIB Iconv::Iconv); endif(); ```; ```; find_package(iconv); if(NOT Iconv_IS_BUILT_IN); set(ICONV_LIB Iconv::Iconv); endif(); ```; or ; I use the -D in the cmake like; ```; cmake -DFETCH_BOOST=TRUE -DBOOST_ROOT=/path/boost -DCMAKE_INSTALL_PREFIX=/path/salmon-1.8.0/salmon_install -DIconv_LIBRARY=/path/libiconv-1.16/iconv_install/lib ; ```; Then the configure was success",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/776:1304,config,configure,1304,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/776,1,['config'],['configure']
Modifiability,"Hello,; I would like to use alevin for quantification of 10x 5' PE. 10x 5' PE contains cDNA in read1 as well as read2. Could you tell me how to specify the --read-geometry to use both read1 and read2 for quantification. The configuration of the library is as follows; read1 BC16bp-UMI10bp-TSO13bp-cDNA5'; read2 cDNA3'. I tried the following library options, but I got ""Total 0.00 UMI after deduplicating.; `-l ISF --bc-geometry 1[1-16] --umi-geometry 1[17-26] --read-geometry ""1[40-end]2[1-end]""`. I also tried `""1[40-end] 2[1-end]""` and `""1[40-end],2[1-end]""` by changing the delimiter, but they were not quantified in the same way. On the other hand, ""1[40-end]"" and ""2[1-end]"" were quantified well. Best,; Yoshi",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/886:224,config,configuration,224,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/886,1,['config'],['configuration']
Modifiability,"Hello,; I'm trying to compile salmon into arm64 linux system, but I'm getting the error bellow:; ```; ...; Found Jemalloc library --- using this memory allocator; CPACK_SOURCE_IGNORE_FILES = /src/PCA.cpp;/src/PCAUtils.cpp;/build/;/scripts/AggregateToGeneLevel.py;/scripts/ExpressionTools.py;/scripts/GenerateExpressionFiles.sh;/scripts/ParseSoftFile.py;/scripts/PlotCorrelation.py;/scripts/junk;/scripts/sfstrace.log;/scripts/SFPipeline.py;/bin/;/lib/;/sample_data/;PublishREADMEToWebsite.sh;/external/;/src/obsolete/;/include/obsolete/;WebsiteHeader.txt;/experimental_configs/;.git/; TBB_LIBRARIES = /usr/lib/aarch64-linux-gnu/libtbbmalloc_proxy.so;/usr/lib/aarch64-linux-gnu/libtbbmalloc.so;/usr/lib/aarch64-linux-gnu/libtbb.so;/usr/lib/aarch64-linux-gnu/libtbb.so; -- Configuring done; -- Generating done; -- Build files have been written to: /root/salmon-0.14.2/build; [ 34%] Completed 'libtbb'; [ 39%] Built target libtbb; Makefile:162: recipe for target 'all' failed; make: *** [all] Error 2. ```. How to fix this?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/433:771,Config,Configuring,771,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/433,1,['Config'],['Configuring']
Modifiability,"Hey @rob-p and @k3yavi! Avi and I have chatted a bit about this offline, and [I've commented about this in the past](https://github.com/COMBINE-lab/salmon/discussions/629#discussioncomment-777414), but I'm currently attempting to extend alevin's use to the newer combinatorial indexing experiments like [SPLiT-seq](https://science.sciencemag.org/content/360/6385/176) or the commercial solution, [ParseBio](https://www.parsebiosciences.com/) (the biotech formerly known as SplitBio). Now that you support different barcode geometries and allow the user to specify where these barcodes should be expected, this _should_ be doable. . I've downloaded the [raw data from the original SPLiT-seq paper](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM3017261), and we have some ParseBio data of our own; my goal is to help you all write a vignette on this once we get the details worked out. . In short, the R1 file contains cDNA sequence, and R2 contains a 10bp UMI followed by 3 different barcodes in the following arrangements (note: ParseBio seems to shift BC1 up a few bp, to 79-86):; - UMI: 1-10; - BC3: 11-18; - BC2: 49-56; - BC1: 87-94. The intervening bases are a combination of common and variable sequences. The other wrinkle with these approaches is that the cDNA can be amplified using either oligo-dT or random hexamer barcodes. The net effect of this is that BC1 can be one of two options, and some barcode combinations need to be pooled to represent the same cell. For example:. AACGTGAT-CTGTAGCC-ACACAGAA; GATAGACA-CTGTAGCC-ACACAGAA. may be the same cell, amplified by two different means. . We know how the BC1s are paired, so Avi suggested pre-processing the R2 FASTQ file such that we locate random hexamer BC1 sequences and modify them to the matched oligo-dT sequence. In the above example, we'd correct some R2 reads that contain ""GATAGACA"" in the 87-94 position to ""AACGTGAT"". I [wrote a script](https://github.com/jeremymsimon/SPLITseq) (in perl because I'm old-school) that d",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699:230,extend,extend,230,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699,1,['extend'],['extend']
Modifiability,"Hey Rob. It looks like this was an error in the way I was calling `salmon index`. I've wrapped salmon in a python based pipeline where I manage creation of index files using configuration files. To call `salmon index` I was previously iterating on standard error, capturing your err and logging it after reformatting a bit. It looks like what was happening is:. 1. I opened a subprocess and executed salmon; 2. Salmon worked properly; 3. Salmon stopped producing output on stderr (and sent an EOF marker?) and so my script exited; - killing salmon prematurely; - truncating the salmon index (In a way that salmon found perfectly acceptable during `salmon quant`; - frustrating me quite a bit. I fixed this by doing the right thing and blocking for the process to return an exit code:. ```diff; p = Popen(cmd, stderr=PIPE); - for line in p.stderr:; - line = line.decode(); - if line.endswith('\n'):; - logging.info(line.rstrip()); - else:; - logging.info(line); + _, err = p.communicate(); + logging.info(err); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303738589:174,config,configuration,174,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303738589,1,['config'],['configuration']
Modifiability,"Hey,; I have a question regarding the --seqBias flag, your documentation suggests it is specifically applied to random hexameric primers. But on the contrary it is based on Variable length Markov Model, is it feasible to use this flag for analysing the libraries made with random nonameric primers ?; Thank you",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/880:173,Variab,Variable,173,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/880,1,['Variab'],['Variable']
Modifiability,"Hi :). I was already successfully using Salmon before, but unfortunately a storage node of the computing cluster I am using crashed and now I am running into trouble re-installing it. . I downloaded ""salmon-master.zip"", unzipped it and changed into the salmon-master folder. Further, I ran the following command:. > cmake -DCMAKE_INSTALL_PREFIX=/scratch/hpc-prf-ptma2/ptma2001/salmon-master -DFETCH_BOOST=TRUE. The configuration starts, but finally runs into the following error:. > -- Configuring done; > CMake Error: The following variables are used in this project, but they are set to NOTFOUND.; > Please set them or make sure they are set and tested correctly in the CMake files:; > CURL_LIBRARY; > linked by target ""salmon"" in directory /scratch/hpc-prf-ptma2/ptma2001/salmon-master/src; > linked by target ""unitTests"" in directory /scratch/hpc-prf-ptma2/ptma2001/salmon-master/src; > ; > -- Generating done; > CMake Generate step failed. Build files cannot be regenerated correctly. Would you have an idea how I could circumnavigate that issue?. Thanks a lot in advance for your time and help!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/729:415,config,configuration,415,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/729,3,"['Config', 'config', 'variab']","['Configuring', 'configuration', 'variables']"
Modifiability,"Hi @Beatzekatze,. The issue with test 1 seems to be from CMake being unable to find the unit test to execute under certain configurations. I'll consider this a bug in the CMake file, and look into fixing it. The failure of tests 2 and 3 is more interesting, as one would definitely not expect this given that the program compiled without error. Does indexing fail only with `--type fmd`, or also with `--type quasi` (or no `--type` as that is the default)? Would it be possible to run the command under gdb and report the stack trace? That would be something like:. ```; $ gdb --args salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; ```. and then, when you encounter the segfault issuing the back-trace `bt` command. This would give insight into where, exactly this is showing up. One issue I've seen before is when the resident installation of Boost is _not_ compiled with `--std=c++11` (or 14 or 17), since this leads to an incompatible ABI between salmon and the Boost library. If that's what's going on, it should be evident from the backtrace. Finally, while I'd want to figure out what's going on with this build from source, it would also be useful to know if you encounter the same behavior when installing via bioconda. Thanks for the detailed report!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404223014:123,config,configurations,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404223014,1,['config'],['configurations']
Modifiability,"Hi @Ci-TJ,. This suggests that the FASTQ files were ""desynchronized"" during / after trimming somehow. Salmon requires that the FASTQ files are synchronized. So, if the trimmer decides to discard a read from the first read file, it must also discard the corresponding read from the second read file. I'm not specifically familiar with RabbitQC, but most quality / adapter trimmers have an option to separate out any reads that become orphaned during trimming so that the output paired FASTQ files remain synchronized. You should make sure that any such options are passed during QC. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660#issuecomment-846252372:363,adapt,adapter,363,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660#issuecomment-846252372,1,['adapt'],['adapter']
Modifiability,"Hi @ECuris,. Indeed, this seems to be a case where the code evolved and the documentation has yet to catch up. The defaults are `fldMean` = 250 and `fldSD` = 25. The relevant code is here (https://github.com/COMBINE-lab/salmon/blob/master/src/SalmonQuantify.cpp#L2260). This defines how default values are set for these parameters. I'll make a note to update the documentation to be consistent with these changes (which were made to be more in line with modern protocols, though there's still no good universal parameters for things that can vary so widely between experiments).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-286760710:60,evolve,evolved,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-286760710,1,['evolve'],['evolved']
Modifiability,"Hi @PeteHaitch ,; Thanks for your interest in *Alevin*.; Although in current Alevin we have concentrated mainly on learning more about Droplet based 3'-tagged single cell protocols, especially 10x; we are very much interested in extending it towards other protocols like CEL-seq.; However, there are couple of challenges/difference which should be considered before incorporating it into the Alevin pipeline. Currently Alevin relies on the fact that the droplet based protocols use PCR amplification of the library and the UMI deduplication phase of Alevin assumes an exponential model, I am not sure how true is this with CEL-seq? Another issue is that CEL-seq is a Fluidigm based system while the current application for Alevin is for microfluidics based. In general we have observed that the 10x cell isolation step is pretty robust in reporting the Cellular Barcodes(CB) and although we have a probabilisitic model to handle the CB based uncertainty but the ambiguous case like that are very less frequent, (although not true for Drop-Seq). Having said that, we might have to do some analysis to actually figure out the right model for Barcode correction in Fluidigm based system. Also, please do let us know of your experience in using the solution proposed in #247 . Looking forward to hearing back from you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-414162302:229,extend,extending,229,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-414162302,2,['extend'],['extending']
Modifiability,"Hi @PlantDr430,. Thanks for the detailed report. I have a general thought, and then a more specific thought given your use case and parameter settings. The general thought is that it is _not_ true, broadly, that one should expect transcript (or even gene) abundances to stay the same under a change of annotation. The estimates computed by salmon (and by all transcript-level abundance estimation tools) is one that maximizes the likelihood of the data (or maximizes the ELBO in the case of VI) _conditioned on_ the observed fragments and the _transcripts_. When one changes the transcripts, they change the variable upon which the inference is conditioned, and the results, in general, can change (a lot, or a little bit). This is specifically most prone to happen when transcripts / genes are added to the annotation that are similar to other transcripts or genes in the annotation. Now, my specific thought based on your settings of parameters. They are _quite_ different, but the three big factors I see here are (1) the setting for `--scoreExp`, (2) the setting(s) for dovetail and softclipOverhangs and (3) the setting for `--consensusSlack` Why are they a big deal?. * `--scoreExp` determines how much we down-weight scores sub-optimal alignments. Setting `--scoreExp` to 0 says that a sub-optimal alignment, at least in terms of the alignment probability is _just as good as the optimal alignment_. So, imagine you had a few read length regions of a pair of genes that each differed by 1 or 2 SNPs. When `--scoreExp` is 0, then the model considers alignments (say to transcript 2) with 2 substitutions to be just as likely as alignments (say to transcript 1) that are perfect (with no substitutions). While you can play around with different values of `--scoreExp` to determine how differences from the optimal alignment should be weighted, I'd strongly suggest against setting `--scoreExp` equal to 0. * `--allowDovetail` and `--softclipOverhangs` may or may not have a significant effect bas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-632953613:608,variab,variable,608,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-632953613,1,['variab'],['variable']
Modifiability,"Hi @Ray6283,. The `bootstraps.gz` file is not designed to be read as plain text. The file encodes information in binary. If you are interested in extract the information encoded in those files, the easiest thing to do is likely to read them in using the [`fishpond`](https://bioconductor.org/packages/release/bioc/html/fishpond.html) package. Looking at the code there will also show you exactly how those files are packed. The same is true for the bias files. The format for those is documented [here](https://salmon.readthedocs.io/en/latest/file_formats.html#sequence-specific-bias-files) and [here](https://salmon.readthedocs.io/en/latest/file_formats.html#fragment-gc-bias-files), those these are binary encoded files and not designed for human consumption. For the bias files, even if you did read them in, the information is not trivially interpretable (e.g. the parameters of the variable length Markov model, etc.). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-1792970641:887,variab,variable,887,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-1792970641,1,['variab'],['variable']
Modifiability,"Hi @Rhinogradentia,. This error occurs when there is a binary mismatch between the library used to compile salmon versus that used to run it. Specifically, this occurs when the boost library is _not_ compiled with a modern ABI (Application Binary Interface) ‚Äî when boost was not compiled in a way compatible with C++11/14/17/20. Are you using the version installed via bioconda, or the pre-compiled binary from github, or have you compiled this yourself? You can [use the `LD_LIBRARY_PATH`](https://stackoverflow.com/questions/13428910/how-to-set-the-environmental-variable-ld-library-path-in-linux) to set things so that the appropriate version of the library is discovered first. You want the version of boost that is found first (the one appearing earliest in the `LD_LIBRARY_PATH`) to be matched to the one with which salmon was compiled.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696812977:565,variab,variable-ld-library-path-in-linux,565,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696812977,1,['variab'],['variable-ld-library-path-in-linux']
Modifiability,"Hi @RoebideBruijn,. If you've already run `cmake ..`, you must `rm CMakeCache.txt` and `rm -fr CMakeFiles` before running `cmake -DFETCH_BOOST=TRUE`. This is because CMake will cache variables between runs, and it won't properly interpret the flag to fetch boost. Also, can you show the entire sequence of steps you're executing to build? It looks like the camke file can't be found. Are you running cmake from within a build directory, or are you running it from the top-level directory?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449035144:183,variab,variables,183,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449035144,1,['variab'],['variables']
Modifiability,"Hi @SFonsecaCosta , . Some variability is expected since the read alignment methods are different. It's worth checking and generating summary stats for the unquantified genes, for example, their expression across samples, or if all the unquantified genes are mitochondrial/ribosomal of some sort.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/803#issuecomment-1263615944:27,variab,variability,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/803#issuecomment-1263615944,1,['variab'],['variability']
Modifiability,"Hi @TizianaS92,. One problem is that CMake is rather annoying with caching environment variables and versions. Could you see what happens if you `rm -fr` your `build` directory and then try again (this will obliterate `CMakeCache.txt` and the `CMakeFiles` subdirectory.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/388#issuecomment-505859344:87,variab,variables,87,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/388#issuecomment-505859344,1,['variab'],['variables']
Modifiability,"Hi @Toseph,. Thank you for the detailed report. I am actually surprised that it agreed to compile, since the CMake file should check for GCC >= 5.2 (https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L102). The reason for that check is that this is the version of GCC we have on our CI servers, and GCC 5 is, I believe, the first C++14 feature-complete version of GCC. Nonetheless, the gcc release pages suggest that 4.9 does support polymorphic lambdas. What concerns me though is that your backtrace has references to e.g. `/usr/include/c++/4.8.2/bits/unique_ptr.h:262:16`. GCC 4.8.2 is _not_ C++14 compatible, and does not support polymorphic lambdas. Do you have any idea why the compiler might be looking into headers included from GCC 4.8.2?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422878261:448,polymorphi,polymorphic,448,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422878261,2,['polymorphi'],['polymorphic']
Modifiability,"Hi @diyang1354,. It is recommended to do adapter trimming prior to mapping and quantification (standard practices actually involve adapter and _light_ quality trimming of reads). Adapter contamination could affect the mapping rate, especially if selective-alignment, which is recommended, is being used.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/398#issuecomment-511428337:41,adapt,adapter,41,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/398#issuecomment-511428337,3,"['Adapt', 'adapt']","['Adapter', 'adapter']"
Modifiability,"Hi @francicco ,. Can you try the following?. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.10.1; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394452979:58,config,config,58,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394452979,2,['config'],['config']
Modifiability,"Hi @gaberoo,. I rebased this in develop since this is where we make changes, so that this will be in the next release. There was one change I had to make. There was a place where a string variable was being checked to determine the existence of a library (e.g. `if (${SUFFARRAY_LIB})` I believe). It seems CMake interprets even the empty string as TRUE here, so I had to change this to the corresponding `FOUND` variable. Otherwise, the changes all seem to have worked beautifully. Thanks again.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-473300118:188,variab,variable,188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-473300118,2,['variab'],['variable']
Modifiability,"Hi @gringer,. Yes, we can add a section for this in the docs. It will replace the old way for specifying geometry soon, as its just easier and more flexible. We talk about it in the 1.4.0 release notes. I copy the relevant info below (@k3yavi pulled for the 1-based indexing and won out ... this time):. generic barcode / umi / read geometry syntax : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:. --read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read 2, and it spans from the first index 1 (this syntax used 1-based indexing) until the end of the read. Likewise, the barcode derives from read 1 and occupies positions 1-16, and the UMI comes from read 1 and occupies positions 17-26. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify --bc-geometry 1[1-8,16-23] to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with --rad or --sketch and preparing a RAD file for alevin-fry. If you are running classic alevin, the barcode must reside on a single read. The robust parsing of the flexible geometry syntax is made possible by the cpp-peglib project.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777884823:148,flexible,flexible,148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777884823,4,['flexible'],['flexible']
Modifiability,"Hi @guidohooiveld, . Regarding your questions:. (1) The motivation behind asking users to use Bioconda to install the binary is to limit the number of variables we may encounter when someone is reporting a bug --- i.e. if there are fewer distribution channels there is less maintenance overhead. Nonetheless, as you can see, I've had to make the binary available anyway, because it was the only way some people could easily get the program. Therefore, I think I'll start attaching binaries to releases again. (2) Yes, though this functionality is not part of Salmon itself. I *highly* recommend the [MultiQC](http://multiqc.info/) tool. MultiQC has a salmon module, which will parse all of the salmon log files in an experiment directory and produce a report. This report will contain the mapping percentages for all of the samples extracted from the salmon logs (and will color them nicely). It will also produce other QC information from the salmon runs. We are currently working on an improved multi-QC module, which will also provide summaries for things like GC / seq bias by analyzing the models that salmon learns, but this module isn't yet complete. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405442271:151,variab,variables,151,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405442271,2,['variab'],['variables']
Modifiability,"Hi @k3yavi , thank you for the reply. Yes, you are right, it seems the problem is indeed in the whitelist `known_cb.txt`. However, I cannot seem to find out what exactly is going on with the file. When I wrote a python script to check the length of each cell barcode in `known_cb.txt`, _all_ of them are 16 bp long. This is the python script:. ```; $ cat print_length.py; with open('known_cb.txt') as fh:; for i in fh:; print(len(i)); ```. since each line has 16 bp barcode and a `\n` character, it outputs 17, which is expected. However, when I used `awk` to check the length, I expected `awk` to output 16, but it actually output 17:. ```; $ awk '{print length($0);}' known_cb.txt | head -2; 17; 17; ```. There might be some hidden characters that I missed. Any idea what's going?. Now, I have cleaned the `known_cb.txt`, and `alevin` runs without problem. For combinatorial indexing, good to known that it will be supported in future. I guess depending on assays, it needs to be a bit more flexible than the current options. The current options have only `--chromium` and `--dropseq` available. However, there are a few different combinatorial indexing assays. For `sci-RNA-seq`, the cell barcodes are within `I1.fastq`, `I2.fastq` and `R1.fastq`. Only `R2.fastq` is useful for gene quantification. For `sci-ATAC-seq`, the cell barcodes (this is just my educational guess) are within `I1.fastq` and `I2.fastq`, and both `R1.fastq` and `R2.fastq` contain useful information from the genome. For other plate-based method, there will be well barcodes and plate barcodes, which could be located in any of those 4 fastq files depends on the design. The cell barcodes will be a combination of well barcodes and plate barcodes. Thank you very much for the help. Regards,; Xi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420807198:993,flexible,flexible,993,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420807198,1,['flexible'],['flexible']
Modifiability,"Hi @k3yavi ,. Thanks a lot for you reply. ; Yes I agree that variability is expected, but my point is why these ~ 400 genes did not appear/exported in the quant.genes.sf file? some reason in special? Because they should be reported as well no?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/803#issuecomment-1263626603:61,variab,variability,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/803#issuecomment-1263626603,1,['variab'],['variability']
Modifiability,"Hi @k3yavi, ; I just re-read this post and I believe that in the CEL-Seq2 protocol, read_1 has first the UMI and then the CB and then polyT... because the sequencing starts with the Illumina adapter (see image below from paper). . Thanks!; ![13059_2016_938_fig1_html](https://user-images.githubusercontent.com/39304679/49376447-edbda900-f70f-11e8-85d7-b86b15c477d5.gif)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/311#issuecomment-443709804:191,adapt,adapter,191,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/311#issuecomment-443709804,1,['adapt'],['adapter']
Modifiability,"Hi @k3yavi,. Thanks for the reply!. Let's take the PBMC 4K as example. Looking at the summary sheet from 10x: ; http://cf.10xgenomics.com/samples/cell-exp/2.1.0/pbmc4k/pbmc4k_web_summary.html. They detected 4,340 cells with a median UMI count of 3,866 per cell. That means ~17M UMIs in the count matrix, which is in the same order what I find with Alevin. I am not sure if/where Alevin reports the number of mapped reads (maybe it is the number of hits?), but this is not of much importance. Indeed, the total UMI count is **much** lower than the number of sequenced/mapped/barcoded reads (~190M), which is expected. However, using the `--dumpUmiGraph` option provides a file ""MappedUMI.txt"" which I assume are the number of deduplicated UMIs mapped per cell/barcode (summed over all genes). The sum of over all the barcodes = 17M in this case and the sum per barcode = the sum in the quant_mat. This does not hold for the adapted cel-seq2 protocol. sum mapped UMI != summed quant_mat.gz. I am making a mistake, or is there something wrong?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-490098177:923,adapt,adapted,923,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-490098177,1,['adapt'],['adapted']
Modifiability,"Hi @kayDaramola ,. The download you will get from the releases page is the source. You will either need to build / compile it from source or, alternatively, install the binary using bioconda (recommended). Finally, you can try [this](https://github.com/COMBINE-lab/salmon/files/2099291/salmon-latest_linux_x86_64.tar.gz) pre-compiled binary for Linux, though we are trying to move to bioconda for all binary distribution as it makes support easier by removing a major variable.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398558525:468,variab,variable,468,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398558525,1,['variab'],['variable']
Modifiability,"Hi @kvittingseerup,. Basic adapter and quality trimming should be done. There's some [nice work by Matt MacManes](https://www.frontiersin.org/articles/10.3389/fgene.2014.00013/full) showing that you should be careful about aggressive quality trimming, but light quality trimming is usually beneficial. This is particularly important if the underlying aligner isn't doing local alignment (e.g. STAR will likely just softclip bad bases).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/390#issuecomment-506744431:27,adapt,adapter,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/390#issuecomment-506744431,1,['adapt'],['adapter']
Modifiability,"Hi @kvittingseerup,. No need to apologize, I think it was I who was not clear. What I am saying is that this is *already* the way that Salmon handles such a case. That is, if you have a paired-end read, and one of the reads maps but the other doesn't (due to e.g., adapter contamination or just very low quality), then Salmon will consider the remaining (mapping) end of the read as representative of an entire fragment, and will resolve the fragment origin accordingly during optimization. Generally, not having both ends of a paired-end read leads to increased ambiguity, but this isn't a particularly big problem if it only happens to a generally small fraction of the reads. Further, since you cannot reliably infer the implied fragment length on a transcript from only a single-end read, such mappings will not contribute to the bias model. Again, however, as long as this doesn't happen to the vast majority of fragments, it should have only a negligible effect on quantification and bias correction. Please let me know if this description makes sense. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355881997:265,adapt,adapter,265,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355881997,2,['adapt'],['adapter']
Modifiability,"Hi @lauraht,. So I decided to explore just one of these to see if I could figure out what might be going on. The below is with respect to `SRR9007475`. So first, even though I processed the data with the latest version of the develop branch (which will become 1.2.0), I got basically identical results to what you reported. Simply aligning the data against an index built on a human Gencode v26 transcriptome (with no decoys) gives me a mapping rate of `0.00378202832148367%`. The first thing I did was to quality and adapter trim the data (using `fastp -i SRR9007475.fastq.gz -o SRR9007475_trimmed.fastq.gz -q 10 -w 8`) and ... whoa. This is the fastp html report [fastp.html.zip](https://github.com/COMBINE-lab/salmon/files/4176345/fastp.html.zip). So the first astounding statistic, the mean read length before trimming is 51bp (these are relatively short single-end reads). The mean read length after trimming is 21bp! So, the average read length is, in fact, less than the k-mer length used for indexing (default is k=31). On the trimmed data, the mapping rate goes up to `2.3545475882931305%`, still very low, but now there's somewhat of an explanation, the average read is shorter than a single k-mer. So, the next thing I tried was indexing with a smaller k; a _really_ small one in this case,`k=15`. Then, I re-ran on the _trimmed_ reads (the fact that the trimming took us from 51-21bp suggests that the reads had a lot of low quality bases, adapter contamination, or both). Under this setting, I still get a very low mapping rate, but it was _much_ higher ‚Äî `16.766993524863488%`. The final thing I tried was seeing how the mapping rate changed as I altered `--minScoreFraction`, which is the salmon parameter that determines the alignment score that a read must achieve in order to be mapped validly. The default is 0.65. This means that the read cannot have a score < 0.65 * the maximum achievable score for the read given it's length. In the case of a 21bp read, the best score would be ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583799668:518,adapt,adapter,518,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583799668,1,['adapt'],['adapter']
Modifiability,"Hi @lparsons,. Thanks for bringing this to our attention. There are just too many different places to remember to bump the version. This one was in the Python configuration script for the ReadTheDocs pages. Anyway, I've finally properly scripted the ""version_bump"" process, so this should happen automatically in the future (and is fixes as of 0.11.1). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/259#issuecomment-408574511:159,config,configuration,159,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/259#issuecomment-408574511,1,['config'],['configuration']
Modifiability,"Hi @mishaprochazka and @jdidion,. Thanks @jdidion for pinging me on this. Somehow, Gmail has decided that all GitHub notifications (except those that explicitly tag me, but somehow I missed this one) should go to SPAM. So, I've been missing some of the newer issues here. The short answer is that the documentation needs to be updated. When salmon was originally published, we made use of [RapMap](https://github.com/COMBINE-lab/RapMap) as the underlying mapper, which performed quasi-mapping against an index that consisted of a suffix array and a hash over k-mers pointing to prefixes in the suffix array (similar to the strategy used by STAR, but using much longer k-mers to improve lookup speed). We referred to this index as the quasi-index. As the software evolved and we continued to improve the mapping methodology, we eventually transitioned over to an index based on [our pufferfish data structure](https://github.com/COMBINE-lab/pufferfish). In addition to the new data structure, this coincided with our move over to selective-alignment as the mapping algorithm, and all of this happened at the 1.0.0 release (this is why, for example, indices built before 1.0.0 are not compatible with salmon > 1.0.0; a topic on which there have been a few GitHub issues). However, given the fact that the documentation and software are linked only through manual human intervention (we haven't leveled up to e.g. having salmon be a [literate program](https://en.wikipedia.org/wiki/Literate_programming) yet), these two sometimes get out of sync. This is an instance of that. We have maintained the functionality of the `--writeMappings` feature, and in fact, even augmented it. However, we have not replaced the antiquated `quasi-index` terminology in the documentation. The TLDR is that you can use `--writeMappings` with the index you built with the `salmon index` command, and it should work fine. If you are mapping against an index without decoy sequences, then the output format will be basically ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524:763,evolve,evolved,763,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524,1,['evolve'],['evolved']
Modifiability,"Hi @mr-c,. First of all, **thank you** for your monumental effort in supporting salmon as a Debian package. I think this is fantastic. I'm also not a CMake expert, but I've failed with it enough times to start to get a handle. I have actually moved to the latest version of Jellyfish (v2.2.3) in the [quasimapping branch](https://github.com/COMBINE-lab/salmon/tree/quasimapping), which will be merged back into master as soon as we've finished porting the bootstrapping feature from [sailfish-master](https://github.com/kingsfordgroup/sailfish). Regarding supporting external versions of the libraries ‚Äî this absolutely makes sense. What is the standard location where they are assumed to be installed? In this case I can search with a `FindPackage` before I attempt to download them. From the list above, I see two potential problem libraries:; - bwa ‚Äî We actually use a modified version of bwa that accepts and uses an extra parameter that specifies the suffix array sampling frequency. Specifically, we, by default, use a denser sampling of the suffix array to trade off extra space usage for more speed in lookup. The standard bwa, therefore, probably wouldn't work.; - jellyfish ‚Äî I actually tried to use jellyfish without obtaining the source and building it early on in development. I ran into an issue where the config.h file generated during compile wasn't installed by Jellyfish, and this caused runtime failures when Salmon was running. It seems to me that either (1) config.h should be installed with jellyfish by default or (2) it shouldn't be necessary to use jellyfish as a library. However, as far as I know, this issue persists in the latest version of jellyfish (if you want to use it as a library as we do, and not just as a k-mer counter). For the remaining libraries, we just use the standard versions, so this should be _OK_.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144721158:1320,config,config,1320,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144721158,2,['config'],['config']
Modifiability,"Hi @oligomyeggo,. Thank you for the **incredibly** detailed report :). The problem is the following (derived from your `B13_MeOH_cells_Jurkat_Cas9_EGR1_1_simulated.out.err.txt` log above):. ```; ### [ index ] => { /beevol/home/winklerc/projects/scifi_pipeline/scifi/ref/idx/complete_ref_lens.bin }; ```. So it looks like what your rule is passing to the mapping command is not the path to the index directory, but the path to this specific file, `complete_ref_lens.bin` **within** the index directory. The argument passed to the `-i` flag of `salmon alevin` must be the directory where all of the index files live. I think you just need to have the directory itself stored in a variable upon index creation, and then you can pass it to the mapping rule. Let me know if this helps!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/713#issuecomment-941839528:678,variab,variable,678,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/713#issuecomment-941839528,1,['variab'],['variable']
Modifiability,"Hi @pinin4fjords ,. Apologies for the delayed response and thanks for your interest in Alevin.; Unfortunately, there is no one straight answer for your question. ; Other people have been using Alevin for various microwell based protocols like (CEL-seq https://github.com/COMBINE-lab/salmon/issues/269 ) but from our side we have not extensively tested alevin on non-droplet based protocols. However, we are open to provide any kind of help you may need to test the microwell-seq protocol and extend the support for alevin. If you happen to have been already testing alevin please let us know of your experience and how we can improve aleivn.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/358#issuecomment-490089165:492,extend,extend,492,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/358#issuecomment-490089165,1,['extend'],['extend']
Modifiability,"Hi @rfarouni ,. Thanks a lot for raising the issue.; It looks like a corner case with the custom barcode length and I'd have to push a hot-fix for it. Basically, it's failing in the initial sanity check stage where it assumes we can provide only one single-cell protocol type. Give me like half an hour to make the changes and I'll push the fix to the develop. If you can compile salmon from source that's great, otherwise I can also forward a linux portable binary.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638385340:450,portab,portable,450,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638385340,1,['portab'],['portable']
Modifiability,"Hi @rob-p . Before I answer your question and layout my logic, I want to mention that I am **_not_** suggesting fastp is not doing its job, **_neither am I stating that fastp is working incorrectly_**. Now to my answer(s) and logic:; 1. With fastp, I am not sure if adapter trimming happens first and then quality trimming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Not",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:266,adapt,adapter,266,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,10,['adapt'],"['adapter', 'adapter-trimming', 'adapters']"
Modifiability,Hi @rob-p . Thanks for the elaborate answer - makes a lot of sense. The problem is that adapter contamination typically occures because the fragments were smaller than the sequence length we sequence into the adapters - and it can occur for a larger fraction of the reads (I've seen up to 50% of reads affected in the 3'end) making it non-negligible. That is why I suggested the extension in the first place. I think it makes a lot of sense to trim adapters away - both because they reduce the number of compatible reads - mostly because the failure to do so will result in an overestimation of the fragment length. . Now that I think about it I don't think we should trim reads based on quality as that will lead to an underestimation of the read length - or what do you think?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355909325:88,adapt,adapter,88,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355909325,3,['adapt'],"['adapter', 'adapters']"
Modifiability,"Hi @rob-p . Thanks for the quick reply. Indeed my salmon index does not include lncRNAs, but my sequencing does. For indexing, I only used UCSC RefSeq transcripts (which I believe contains only protein coding transcripts that exclude most of lncRNAs). But this does not seem to suffice to explain the low mapping rate as Wikipedia says ""[Quantitatively, lncRNAs demonstrate ~10-fold lower abundance than mRNAs in a population of cells.](https://en.wikipedia.org/wiki/Long_non-coding_RNA#Abundance)"". To answer your questions:; 1. I used `htseq-count`, and here are the overall statistics (out of 149347870 record pairs processed):; ```; stat	""-s yes""	""-s reverse""; __no_feature	135258158	44917653; __ambiguous	39301	594958; __too_low_aQual	0	0; __not_aligned	0	0; __alignment_not_unique	7430169	7430169; ```. 2. I haven't done quality/adapter trimming as the data really looks clean and of high quality according to FastQC report. 3. Unfortunately I can't share the raw data yet but I will try your suggestion to quantify with STAR at the transcript level.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-847091597:835,adapt,adapter,835,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-847091597,1,['adapt'],['adapter']
Modifiability,"Hi @rob-p . Thanks for the quick reply. Salmon was installed through bioconda. I'm pretty new to working in the console, but these are the commands I used:. `$ conda config --add channels conda-forge`; `$ conda config --add channels bioconda`; `$ conda create -n salmon salmon`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421376969:166,config,config,166,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421376969,2,['config'],['config']
Modifiability,"Hi @rob-p . Thanks for the thanksgiving release of salmon. We saw salmon 1.3.0 for July 4th, salmon 1.4.0 for Thanksgiving, hopefully we would see 1.5.0 for Christmas and 1.6.0 for New Year :) . Keep up the great work. I see that you have salmon now available for ARM machines - https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0. As myself and @patrick-douglas has requested here - https://github.com/COMBINE-lab/salmon/issues/424 - the ability to compile salmon on ARM is great. A question: Will this work if I do a bioconda install or do I need to compile using the tar.gz file. I am using the ARM based conda from https://github.com/Archiconda/build-tools/releases/download/0.2.3/Archiconda3-0.2.3-Linux-aarch64.sh and with that I could do ; ``` ; conda config --add channels c4aarch64 && conda config --add channels defaults && conda config --add channels anaconda && conda config --add channels bioconda && conda config --add channels conda-forge ; ; conda install -c bioconda -c conda-forge -y nextflow bbmap numpy fastqc. ```. I don't see arch64 for salmon in bioconda here - https://anaconda.org/bioconda/salmon",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734442247:765,config,config,765,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734442247,5,['config'],['config']
Modifiability,"Hi @rob-p . Totally understood (even more severe current limitations here) - survey completed. I think there'll ""always"" be Illumina-level coding (we use it to multiplex samples or cells), but I suspect most (all?) wild-west method will be some form of using the one read for barcoding. So as long as I can stipulate which bases in the read are which kind of barcode (cell/molecular) that'd be a good start. Of course having more mature methods than the current [drop-seq protocol](http://mccarrolllab.com/wp-content/uploads/2016/03/Drop-seqAlignmentCookbookv1.2Jan2016.pdf) to error correct, remove poly-A, remove adaptor sequences etc. always very welcome. (I suspect @vals is onto something... I still struggle to be entirely convinced that UMIs, as currently used, have the long-term legs that some people think.)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-282741659:615,adapt,adaptor,615,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-282741659,1,['adapt'],['adaptor']
Modifiability,"Hi @rob-p @k3yavi . A question (or feature enhancement); When I am doing salmon indexing, is there a metadata file that will capture info about the salmon version used for indexing. Why am I asking this: I am developing a high throughput pipeline (with bbmap, bbduk, etc and then salmon) where I use salmon 1.1.0 for quantification - in this scenario, independent users have to build their own salmon indices and I want to trap/capture the situation where the user has used a different salmon version of indexing. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/498:43,enhance,enhancement,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/498,1,['enhance'],['enhancement']
Modifiability,"Hi @rob-p and all,. Thank you for the wonderful tool.; I've been using Salmon for some time now, and have encountered a question.; How is Salmon affected by different read lengths and adapters?. I have a dataset with 5%-15% adapters at 3' of read. How will salmon output be affected if:; 1) I don't remove them; 2) I trim all reads down; 3) use an adapter trimming program - resulting in reads with different length. . Thank you",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/634:184,adapt,adapters,184,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/634,3,['adapt'],"['adapter', 'adapters']"
Modifiability,"Hi @rob-p,. I'm not seeing any links in your post (I assume that the references to ""this file"" were meant to be pointers to GENCODE's FTP files). Just to make sure, here are links to the files I've been working with:. - Decoy FASTA: [GRCm38.p6](http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M24/GRCm38.p6.genome.fa.gz); - Transcriptome: [GENCODE vM24](http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M24/gencode.vM24.primary_assembly.annotation.gtf.gz). In order to create the requisite FASTA of the transcripts from this GTF, I used [gffread](https://github.com/gpertea/gffread) (version 0.11.6). I'll look into trying to write the index to a local scratch directory. The temporary directory for these nodes is similarly mounted via NFS and we are actively discouraged from writing anything to `/tmp` itself (`$TMPDIR` points to to the mounted drive for programs that obey this environment variable).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590575743:927,variab,variable,927,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590575743,1,['variab'],['variable']
Modifiability,"Hi @rob-p,. would it be possible to add a feature similar to `salmon quant` like `--read-geometry 1[1-end]` (as in Alevin) to define which part of both R1 (and R2) should be used for the quantification? That would omit the need for trimming in case of adapters and make salmon workflows even more lightweight. best,; -Alex",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/743:252,adapt,adapters,252,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/743,1,['adapt'],['adapters']
Modifiability,"Hi @rob-p. I'm using a SGE-based cluster. The disk I'm writing to is a networked disk that is mounted via NFS on the machines the cluster runs on. I've attached the output of running `qconf -sconf`, which provides details on how the cluster has been configured (I've edited out some lines about the admin e-mails, etc.). I'm not sure how useful much of this information is. A lot of it has to do with scheduling of jobs -- how many jobs/resources users can attempt to claim, that kind of thing. Let me know if there's something else that would be more useful in this context. I've also attached the log that was generated by the indexing run itself (just for the 17mer index), just in case. I can say one thing from having inspected the logs of these things failing a number of times before I finally caved and started giving it insane amounts of memory: by far the longest time and (most likely) the biggest resource hog is between the first and second pass. Even with only 16GB, it manages to complete the first pass (it still takes quite a while, though):. ```; Pass	Filling	Filtering; 1	718	3236	; 2	1839	237; ```. [qconf-sconf.txt](https://github.com/COMBINE-lab/salmon/files/4172585/qconf-sconf.txt); [index_GRCm38_GENCODE_M23_PRI_17mer.log.txt](https://github.com/COMBINE-lab/salmon/files/4172594/index_GRCm38_GENCODE_M23_PRI_17mer.log.txt). EDIT: Oh, I should also probably say, that I'm only seeing this slowdown on index creation. I'm sure that was implied, but I just wanted to be clear that at the moment, I'm happy enough to let the index build for a few hours every once in a while. I'm still saving huge amounts of mapping time, relative to ""full"" aligners.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-583567362:250,config,configured,250,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-583567362,2,['config'],['configured']
Modifiability,"Hi @silvanopiazza,. It would seem that this pre-compiled binary is making use of an instruction that is not available on the CPU on which you are executing `salmon`. In this case, there are a few alternatives:. * Try and run the command through a Docker image ‚Äî the latest salmon is always available on [Dockerhub](https://hub.docker.com/layers/8712688/combinelab/salmon/latest/images/sha256-1c0b7e5b8a0996b6080cfc76fcd4e565f8c92689fe3cf1debc8b7493ae964c14?context=repo).; * Try and [install salmon via bioconda](https://anaconda.org/bioconda/salmon). The bioconda build may be making fewer assumptions about the target architecture than the pre-compiled github binary.; * Compile salmon from source locally. This will, of course, guarantee to only use instructions available on your hardware, though it's the most involved of these options.; ; Let me know if any of these work for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1143871440:338,layers,layers,338,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1143871440,1,['layers'],['layers']
Modifiability,"Hi @tamuanand,. Sure; is there anything specific about bbduk and bbmap for quality / adapter trimming that you think would be provided beyond or in addition to what fastp provides? Also, we have a beta implementation of soft-clipping and are looking for a wide net of testing data. Any suggestions to that end would be welcome!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597344801:85,adapt,adapter,85,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597344801,1,['adapt'],['adapter']
Modifiability,"Hi @tamuanand,. Thanks for the suggestion. You're right, of course, and we should change the wording in that readme. The cause of the sequence similarity is not always known, and frankly, not important for our particular application. We adopted this term as shorthand given it's common use and also because the version of MashMap used to compute these sequence-similar regions was introduced in the paper [A fast adaptive algorithm for computing whole-genome homology maps](https://academic.oup.com/bioinformatics/article/34/17/i748/5093242). In the preprint itself, we're generally careful to simply refer to these as sequence-similar regions ;).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499476462:413,adapt,adaptive,413,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499476462,2,['adapt'],['adaptive']
Modifiability,"Hi @tillea! Thanks for the added details, I'll try and repro with these. I noticed 2 other differences and wonder if they matter. The first is that your configure does `DUSE_SHARED_LIBS=TRUE`. Could there be shared libs found at runtime other than what is linked during compile?. The other is that you seem to be doing an in source build. I.e. building directly in the salmon dir rather than in a build directory. I'm actually a bit surprised the build works in that way, as it isn't designed to be an in source build. I can try and see if either of those matter on my end, but wonder if you have insight into either. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463775612:153,config,configure,153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463775612,1,['config'],['configure']
Modifiability,"Hi @tillea,. It seems this is exactly the problem. The build deps here are not quite correct. There are dependencies that salmon no longer has, and some of the dependencies it does have are out of date and can't be used from upstream (e.g. libstaden in the latest version, among others). On the bright side, it's not the dynamic linking alone that is problematic. The following works fine on my end:. ```{bash}; $ docker pull debian:testing; $ docker run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt-get update; $ apt-get upgrade; $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev libtbb-dev libtbb12 liblzma-dev libjemalloc2 pkg-config libgff-dev; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ mkdir build && cd build; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE ..; $ make -j8; $ make install; $ make test; ```. This is preferring dynamic linking, and the resulting installed executable runs fine without a segfault. Can you try this on your end? Then the thing to do may be to find what is discordant between the packages I install above and what gets pulled in by `apt build-dep salmon`. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464182279:795,config,config,795,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464182279,1,['config'],['config']
Modifiability,"Hi @tseemann, you can now use `-DBOOST_BUILD_THREADS=<desired threads>` during configuration to control this. Let me know if it works.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/412#issuecomment-549180097:79,config,configuration,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/412#issuecomment-549180097,1,['config'],['configuration']
Modifiability,"Hi @wdecoster,. Thanks for reporting this. One restriction that needs to be better documented (actually, I have to make sure it is properly documented at all!) is that the library type should come _before_ the reads they describe. That is, you should consider passing `-l SF -r {}` rather than `-r {} -l SF`. The reason for this is that the `-r` and `-1,-2` parameters are repeatable so you could, conceivably, pass multiple reads of different library types. However, this is a feature that nobody uses and frankly doesn't make too much sense (so I'll consider removing it in the future to simplify library type parsing). For the time being, I'll also consider printing a warning message when a read file is encountered without an explicitly pre-defined library type (in that case, the behavior, as you saw, is to assume an unstranded library). Could you let me know if passing `-l` before `-r` resolves the issue for you. As to your other suggestion. The internal capitalization rules follow those for camel-case naming of variables (as opposed to separating words with`_`). However, I realize this is somewhat esoteric and even among those who are familiar with such conventions, an arbitrary preference. I'll look into aliasing this flag (and maybe others) to be usable with different names as well. I just have to check how to do this (and if it is possible) with boost's program options.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/177#issuecomment-347524360:1024,variab,variables,1024,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/177#issuecomment-347524360,2,['variab'],['variables']
Modifiability,"Hi Andreas,. So I don't know if there is a easy way to get the specific list of reverse dependencies, but then we can cross-check it with my explicit list above:. ```; build-essential; git ; libboost-all-dev ; liblzma-dev ; libbz2-dev ; cmake ; zlib1g-dev ; curl ; unzip ; wget ; libcurl4-openssl-dev ; libtbb-dev ; libtbb12 ; liblzma-dev ; libjemalloc2 ; pkg-config ; libgff-dev; ```. One thing I noticed during build is that, while I included `libjemalloc2` here, the salmon build procedure still downloaded and built `jemalloc`. However, I don't _think_ jemalloc is the thing causing the segfault. Regarding dependencies that can't be used ‚Äî the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:360,config,config,360,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,1,['config'],['config']
Modifiability,"Hi Brian,. In general, I would argue that one should be cautious with removing PCR duplicates in RNA-seq data (unless you are dealing with reads with UMI tags). This is because reads that align to the same reference position can easily have come from alternative transcripts sharing the same underlying sequence. Hence, the normal tests used to infer PCR duplicates with e.g. DNA-seq reads can yield false-positives in RNA-seq. This is particularly true for highly abundant transcripts (or transcripts from highly-abundant genes). We are currently working on the code that will do duplicate removal when UMI tags are present. That methodology can be extended to remove duplicates even without UMI tags --- though I'd generally caution against that for the reasons mentioned above. However, for the time being, if you have a strong need or desire to filter PCR duplicates, you could use alignment-based Salmon with a BAM file that has duplicates removed. Finally, regarding the error you are getting during SAM validation; this sounds like a different issue. Would you mind providing a piece of that SAM file for me to take a look at? Specifically, I don't believe the quasi-mapping output file should even contain unmapped reads (unless you consider unmapped mates of orphaned reads). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-305317281:650,extend,extended,650,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-305317281,1,['extend'],['extended']
Modifiability,"Hi George,. This will require some upstream changes to the SAM writing code, but I don't think it should be too hard. We could add this to the roadmap. I'll tag this as an enhancement. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/756#issuecomment-1068650251:172,enhance,enhancement,172,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/756#issuecomment-1068650251,1,['enhance'],['enhancement']
Modifiability,"Hi Hari,. Some thoughts on your questions:. > I had to use mem_free=34G for building index. Is that expected?. Certainly, it is _not_ the case that index creation should require 34G of physical memory. When indexing the genome and transcriptome in dense mode, we typically expect it to require <20G of physical RAM (and <4 for just the transcriptome). However, we have noticed some strange behavior in the past about how compute clusters manage process allocation ‚Äî sometimes, it seems, one must overcommit. Given the diversity of different software on which different compute clusters run, as well as the manifold way sysadmins may configure these things, we've not found a universal explanation / conclusion yet, but it does seem that the resources actually required (e.g. if you run salmon index under `/usr/bin/time` and look at the resources) are less than what should be requested. The differences in the sha256 sums are a bit strange and I don't have a great explanation for them. One difference is that I built with the head of the develop branch (which has version tag 1.3.1). That describes a difference in `versionInfo.json` but nothing upstream in the index building should have changed, so I am not sure why the other files would have different sha256 sums. I can try with the pre-compiled binary and see if my results match yours. In the meantime, please keep me posted. If index building ends up worth for you with a different configuration, it would be good to check this off of our list of TODOs, and if not, it would be good to get to the bottom of it. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674528707:633,config,configure,633,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674528707,2,['config'],"['configuration', 'configure']"
Modifiability,"Hi Mohsen and Rob,. So sorry if you've already been troubleshooting the example data I gave you. I realized that that is not a good example of the problem. In this example, there are snR40 and snR40_genomic transcripts, representing processed and pre-processed isoforms. However, it just so happens that there is residual adapter on some of the reads I provided and the first nucleotide of the adapter sequence actually matches the first nucleotide of the longer, genomic version of this transcript, therefore, the genomic variant gets a slightly better alignment score, as it should. After hard trimming any residual adapter the results for this transcript were a lot better (although still not quite the ratio I would expect). I have quite a few examples like this and I'm fairly sure they are not *all* explained by alignment of adapter sequences. However, I just wanted to let you know in case you were already troubleshooting my example data. I'm aggregating a handful more general examples of the same problem, but ones without a trivial solution like the one I provided. The files are too large to attach on github directly, though, do you have a preferred way to share the files? Maybe a google drive?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-642954815:322,adapt,adapter,322,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-642954815,4,['adapt'],['adapter']
Modifiability,"Hi Nate,. Can you tell me / do you know how boost was compiled? The error you're getting looks like what happens when the version of boost against which salmon is attempting to link was not built with >= C++11. Basically, the newest version of salmon requires C++14 (which GCC 8 obviously supports). However, there are binary incompatibilities between pre-C++11 and post-C++11 code libraries. So, whatever version of boost you link against must have been compiled with at least `--std=c++11`. One option is to let salmon fetch and build boost for you by putting `-DFETCH_BOOST=TRUE` in the cmake configuration flags when calling `cmake`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436830925:596,config,configuration,596,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436830925,1,['config'],['configuration']
Modifiability,"Hi Nazeeefa,. Is the relevant file `libtbbmalloc_proxy.so.2` actually present in that directory? What are the contents of `path/to/salmondir/lib`? If you are in an environment with bioconda, you can also try installing tbb through that system as well to ensure you have the shared library. Unfortunately, TBB is pretty much the one library that is not possible to link statically. Also, which shell are you using? The syntax for exporting an environment variable is different in different shells.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/219#issuecomment-386299893:454,variab,variable,454,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/219#issuecomment-386299893,1,['variab'],['variable']
Modifiability,"Hi Rich,. The issue with pre-compiled OSX binaries is that they are difficult to make portable across OSX versions. This is why we strongly suggest installing Salmon (especially for OSX) through [Bioconda](https://bioconda.github.io/). This greatly eases installation and updating, and doesn't require admin privileges. On OSX, you can try the following:. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.9.1; ```. This should take care of all relevant dependencies as well as e.g. library locations and placement. Could you please give this a try and let me know if it works for you?. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-381997508:86,portab,portable,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-381997508,3,"['config', 'portab']","['config', 'portable']"
Modifiability,"Hi Rob & Team, . First and foremost, my thanks for developing such a great and versatile tool, very grateful for your work. . I'm hoping for some words of wisdom. We've got some data from Lexogen CORALL libraries (parired end + UMI). One of the main benefits in using this kit, is the lack of fragmentation step, instead there is Displacement Stop Primers (DSP) which are theoretically randomly distributed. . One approach we've taken is to trim adapters, and collapse UMIs (from STAR alignment). Following these steps, we've got theoretically clean data, so using `samtools fastq` to make a Salmon-friendly input. We observed a very unusual fragment length distribution with this, it looks largely poisson. I've rationalised this as the fragments being particularly short after UMI + Adaptor trimming, and given the random nature of DSPs, this could make some sense. One thing that stuck out in my mind was ordering of the reads (which were coord sorted), thus they'd be coming into salmon that way, breaking an assumption of the streaming EM algorithm. . We're currently name sorting the reads prior to Salmon quantification, but I wonder if you could explain if this unusual FLD could be a consequence of position sorted fastq, or any other thoughts you have around this situation? The good news is that ultimately, the same high level biology comes out of the quantifications whichever way do it. . Thanks for any insight. Andrew",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/765:446,adapt,adapters,446,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/765,2,"['Adapt', 'adapt']","['Adaptor', 'adapters']"
Modifiability,"Hi Rob and team. I am obtaining the following errors in some of my samples but not all and I cannot figure out what is happening. I am using salmon to see if specific genes are present (apart from a general quantification). I. In order to do that I run the following code:; Code (example):; `salmon quant -l A -i /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/spikein/Flox5YFP0_B07_R/index -p 6 -o /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/bcbiotx/tmpTest2/quant -1 <(gzip -cd /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R1_Flox5YFP0_B07_R.trimmed.fastq.gz) -2 <(gzip -cd /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R2_Flox5YFP0_B07_R.trimmed.fastq.gz); `; Some samples finish the quantification while others return the error. Some samples should have the genes while others not. The reads are 25 long and there is variability in the total number of reads among all the samples. . Please, indicate me what other information you may need. Thank you in advance,. Best,. Victor. ERROR:; `[2017-02-09 13:51:38.119] [jointLog] [info] parsing read library format; [2017-02-09 13:51:38.119] [jointLog] [info] There is 1 library.; [2017-02-09 13:51:38.559] [stderrLog] [info] Loading Suffix Array; [2017-02-09 13:51:38.560] [stderrLog] [info] Loading Transcript Info; [2017-02-09 13:51:38.561] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-02-09 13:51:38.562] [stderrLog] [info] There were 2 set bits in the bit array; [2017-02-09 13:51:38.562] [stderrLog] [info] Computing transcript lengths; [2017-02-09 13:51:38.562] [stderrLog] [info] Waiting to finish loading hash; [2017-02-09 13:51:38.562] [stderrLog] [info] Done loading index; [2017-02-09 13:51:38.557] [jointLog] [info] Loading Quasi index; [2017-02-09 13:51:38.558] [jointLog] [info] Loading 32-bit quasi index; [2017-02-09 13:51:38.562] [jointLog] [info] done; processed 3500000 fragmentsjointLog] [info] Index contained 2 targets; hits: 0, hits per frag: 0; [2017-02-09 13:51:48.488] [",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119:866,variab,variability,866,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119,1,['variab'],['variability']
Modifiability,"Hi Rob, . Thanks for the quick reply. I'm looking into it and will try this with an updated install of GCC >= 5.2.; The system default gcc is 4.8.5 but I set it to use a different install using environment modules to load gcc-4.9.2 but some environment variables may not have been set correctly, hence why the build file switches to a lower-version GCC but it isn't clear why it looks for 4.8.2 despite that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422891645:253,variab,variables,253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422891645,2,['variab'],['variables']
Modifiability,"Hi Rob, thanks for the quick reply.; I tried what you suggested and I tried with adding the bioconda channel but still got the same error, however adding the conda-forge and bioconda channels to the conda config solved it. Maybe it needed access to conda-forge to find the boost and libcxx packages?. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.9.1; Solving environment: done. ## Package Plan ##. environment location: /Users/Jb_Macbook/miniconda3/envs/salmon. added / updated specs: ; - salmon=0.9.1. The following packages will be downloaded:. package | build; ---------------------------|-----------------; tk-8.6.7 | 0 3.0 MB conda-forge; mkl_random-1.0.1 | py36_0 371 KB conda-forge; boost-1.64.0 | py36_4 304 KB conda-forge; libiconv-1.15 | 0 1.3 MB conda-forge; clangdev-4.0.0 | default_0 62.8 MB conda-forge; bzip2-1.0.6 | 1 145 KB conda-forge; xz-5.2.3 | 0 304 KB conda-forge; certifi-2018.1.18 | py36_0 143 KB conda-forge; pip-9.0.3 | py36_0 1.7 MB conda-forge; tbb-2018_20171205 | 0 404 KB conda-forge; boost-cpp-1.64.0 | 1 16.2 MB conda-forge; ncurses-5.9 | 10 1.1 MB conda-forge; jemalloc-4.5.0 | 0 4.1 MB bioconda; salmon-0.9.1 | 1 2.6 MB bioconda; numpy-1.14.2 | py36ha9ae307_1 4.0 MB; sqlite-3.20.1 | 2 1.4 MB conda-forge; setuptools-39.0.1 | py36_0 552 KB conda-forge; llvmdev-4.0.0 | default_0 100.9 MB conda-forge; icu-58.2 | 0 22.7 MB conda-forge; readline-7.0 | 0 383 KB conda-forge; libcxx-4.0.0 | 1 1.1 MB conda-forge; zlib-1.2.11 | 0 95 KB conda-forge; libxml2-2.9.8 | 0 1.9 MB conda-forge; wheel-0.31.0 | py36_0 62 KB conda-forge; python-3.6.5 | 1 13.9 MB conda-forge; mkl_fft-1.0.1 | py36_1 146 KB conda-forge; ------------------------------------------------------------; Total: 241.7 MB; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379821279:205,config,config,205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379821279,3,['config'],['config']
Modifiability,"Hi Rob,. Thanks for the clarity regarding the effect of insert size distribution on quantification. That does resolve this issue, and gives me a path going forward using Salmon for this data. However, I am trying to use Salmon for small RNA-Seq data, where the insert size is equal to read length for most reads after adapter trimming. Would it be possible to add a flag to use read length as a proxy for insert size, potentially with a fallback to fldMean/fldSD in the case of full-length, untrimmed reads? This is something I would be willing to contribute myself, if it sounds appropriate. Thanks,; Gautam",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/605#issuecomment-752064194:318,adapt,adapter,318,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/605#issuecomment-752064194,1,['adapt'],['adapter']
Modifiability,"Hi rob-p,; `gcc -version ` tells me its version `6.3.0` of the GCC compiler. . ```; c+\+ -v; Using built-in specs.; COLLECT_GCC=c++; COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-alpine-linux-musl/6.3.0/lto-wrapper; Target: x86_64-alpine-linux-musl; Configured with: /home/buildozer/aports/main/gcc/src/gcc-6.3.0/configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-alpine-linux-musl --host=x86_64-alpine-linux-musl --target=x86_64-alpine-linux-musl --with-pkgversion='Alpine 6.3.0' --enable-checking=release --disable-fixed-point --disable-libstdcxx-pch --disable-multilib --disable-nls --disable-werror --disable-symvers --enable-__cxa_atexit --enable-default-pie --enable-cloog-backend --enable-languages=c,c++,objc,java,fortran,ada --disable-libssp --disable-libmpx --disable-libmudflap --disable-libsanitizer --enable-shared --enable-threads --enable-tls --with-system-zlib --with-linker-hash-style=gnu; Thread model: posix; gcc version 6.3.0 (Alpine 6.3.0); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-343658308:248,Config,Configured,248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-343658308,2,"['Config', 'config']","['Configured', 'configure']"
Modifiability,"Hi, Rob. I'm seeing this same error `Cannot find source file`; ```; -- Configuring done; CMake Error at src/CMakeLists.txt:113 (add_executable):; Cannot find source file:; /tmp/salmon-20180222-8345-abjxc0/salmon-0.8.2/external/install/src/rapmap/RapMapFileSystem.cpp; Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp; .hxx .in .txx; ```; See the complete build log at https://circleci.com/gh/brewsci/homebrew-bio/491; Any ideas?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367590842:71,Config,Configuring,71,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367590842,1,['Config'],['Configuring']
Modifiability,"Hi,. I am getting the following when building Salmon (gcc/g++ 4.8.2, and boost from `-DFETCH_BOOST=TRUE` when calling cmake). ```; (...); [ 64%] Performing build step for 'libtbb'; cd /opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss && make ""CXXFLAGS= -UDO_ITT_NOTIFY"" lambdas=1 compiler=gcc cfg=release tbb_build_prefix=LIBS; make[3]: Entering directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss'; Created ./build/LIBS_release and ..._debug directories; make -C ""./build/LIBS_debug"" -r -f ../../build/Makefile.tbb cfg=debug; make[4]: Entering directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss/build/LIBS_debug'; ../../build/Makefile.tbb:31: CONFIG: cfg=debug arch=intel64 compiler=gcc target=linux runtime=cc4.8_libc2.15_kernel4.0.9; g++ -o x86_rtm_rw_mutex.o -c -MMD -DTBB_USE_DEBUG -DDO_ITT_NOTIFY -g -O0 -DUSE_PTHREAD -m64 -mrtm -fPIC -D__TBB_BUILD=1 -Wall -Wno-parentheses -Wno-non-virtual-dtor -UDO_ITT_NOTIFY -std=c++0x -D_TBB_CPP0X -I../../src -I../../src/rml/include -I../../include ../../src/tbb/x86_rtm_rw_mutex.cpp; /tmp/ccgalJzL.s: Assembler messages:; /tmp/ccgalJzL.s:628: Error: no such instruction: `xtest'; /tmp/ccgalJzL.s:656: Error: no such instruction: `xabort $255'; /tmp/ccgalJzL.s:665: Error: no such instruction: `xabort $255'; /tmp/ccgalJzL.s:671: Error: no such instruction: `xend'; /tmp/ccgalJzL.s:840: Error: no such instruction: `xbegin .L56'; /tmp/ccgalJzL.s:1012: Error: no such instruction: `xbegin .L73'; /tmp/ccgalJzL.s:1269: Error: no such instruction: `xabort $255'; make[4]: *** [x86_rtm_rw_mutex.o] Error 1; make[4]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss/build/LIBS_debug'; make[3]: *** [tbb] Error 2; make[3]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss'; make[2]: *** [libtbb-prefix/src/libtbb-stamp/libtbb-build] Error 2; make[2]: Leaving directory `/opt/local/sa",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/20:735,CONFIG,CONFIG,735,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/20,1,['CONFIG'],['CONFIG']
Modifiability,"Hi,. I am testing Alevin, and would like to compare against Cell Ranger on my data set. While primary mapping statistics indicate more reads mapped, I would like to compare the results in the final analysis, in Seurat. Many steps rely on HGNC Gene symbols as opposed to Ensemble IDs. ### What is the best way to convert ensembl IDs to gene symbol in Alevin?. Alevin (aligned as in this [gist](https://gist.github.com/k3yavi/c501705ed2d29b12b0d10cf78b3ed001#file-alevin-default-ipynb), imported to R in this [tutorial](https://combine-lab.github.io/alevin-tutorial/2018/running-alevin/)) returns ensembl IDs in format like ""ENSG00000215910.7"". ```R; require(""fishpond""); require(""tximport""); ; files <- file.path(""[...]/alevin/quants_mat.gz""); file.exists(files); txi <- tximport(files, type=""alevin"");; rownames( txi$counts); ``` . I am currently converting these using biomart with suboptimal adaptations:. ```R; BiocManager::install(""biomaRt""); require('biomaRt'); mart <- useDataset(""hsapiens_gene_ensembl"", useMart(""ensembl"")); genes <- rownames(txi$counts); df$id <- NA; meta.genes <- getBM(attributes = c(""ensembl_gene_id"",""external_gene_name"", ""description""), ; values = genes, mart = mart ); ```; Manual adaptations:. 1. I trim IDs after dot (""ENSG00000215910.7"" ‚Üí ""ENSG00000215910‚Äù); 2. I remove NA values (not all trimmed gene IDs are found in biomaRt); 3. I add up counts of genes (per ENS.ID) with the same gene symbol, e.g. ‚ÄúY_RNA‚Äù or ‚ÄúHSPA14‚Äù. ```R; g.LookUp = meta.genes[,2]; names(g.LookUp) = meta.genes[,1]; ; # 1. Trim; ensembl_ID.simple =str_split_fixed(genes,pattern = '\\.', n=2)[,1]; ; genes.converted = g.LookUp[ensembl_ID.simple]; any.duplicated(genes.converted); ; # ...etc; ```. Is there a better way to convert IDs, possibly implemented in Alevin / Salmon?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/448:894,adapt,adaptations,894,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/448,2,['adapt'],['adaptations']
Modifiability,"Hi,. I am using Salmon v 1.10.1 do perform selective alignment on paired end RNAseq samples and I have trouble to interpret the output statistics (i.e succesfully mapped pairs ....); Here is my command line on a sample containing 34,462,097 pairs (After cleaning, adapter removal, rRNA trimming). **salmon quant -i $IndexDir -l A -1 $forward -2 $reverse -p 8 --seqBias --gcBias ‚ÄìuseVBOpt --discardOrphansQuasi ‚ÄìconsensusSlack 0.35 --minScoreFraction 0.8 --decoyThreshold 1 -o $OutputDir/$pairname_Output**. Here is the the output statistics of the alignment; [Salmon_quant_output.txt](https://github.com/COMBINE-lab/salmon/files/11768911/Salmon_quant_output.txt). So I have few questions : . 1- Where is idicated the numer of processed pairs, i.e. the number of pairs in the sample ?. 2- Does the mapping rate correspond to the reads that will be used for the quantification (i.e. succesfully mapped and that were above every filtering thresholds) or this % also takes into account the discarded mapping ? This is of great importance to tell if the mapping step is good or not. 3- Counted 20,588,460 total reads in the equivalence classes What does this mean ? Is it the numner of pairs that mapped (discarded and not discarded or only the ones that are kept for quentification). 4- What is the difference between mapping discarded and fragment discarded ? To count the number if pairs that did not map to my reference should I sum Number of mappings discarded because of alignment score + Number of fragments entirely discarded because of alignment score + Number of fragments discarded because they are best-mapped to decoys + Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets. Thanks in advance for your time and answers,,. Florian Rocher",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/852:264,adapt,adapter,264,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/852,1,['adapt'],['adapter']
Modifiability,"Hi,. I did refactoring for `.travis.yml`.; This pull-request is for develop branch. * Aligned with 2 spaces indent.; * Removed tailing space.; * Removed old commended out lines on bottom area.; We can check past modification with `git log -p .travis.yml`.; So, I think we can remove the comment lines.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/292:11,refactor,refactoring,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/292,1,['refactor'],['refactoring']
Modifiability,"Hi,. I thought I would extend this issue rather than creating a new issue. Happy to create new if that would be better. I'm using the docker version of Salmon (latest version). I have also mounted a local directory. I'm getting the same error. (Note I have tried several different versions of the command, including the --no-version-check command). salmon index --gencode ; -t /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/gentrome.fa ; -d /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/decoys.txt ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index. Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [2019-07-01 12:32:42.622] [jLog] [info] building index; [2019-07-01 12:32:42.628] [jointLog] [info] [Step 1 of 4] : counting k-mers. <Several warnings about transcripts that are disliked>. [2019-07-01 12:33:02.020] [jointLog] [info] Replaced 3801867 non-ATCG nucleotides; [2019-07-01 12:33:02.020] [jointLog] [info] Clipped poly-A tails from 1630 transcripts; [2019-07-01 12:33:02.041] [jointLog] [info] Building rank-select dictionary and saving to disk; [2019-07-01 12:33:02.248] [jointLog] [info] done; Elapsed time: 0.20793s; [2019-07-01 12:33:02.252] [jointLog] [info] Writing sequence data to file . . . ; [2019-07-01 12:33:04.501] [jointLog] [info] done; Elapsed time: 2.24861s; [2019-07-01 12:33:04.572] [jointLog] [info] Building 32-bit suffix array (length of generalized text is 469043886); [2019-07-01 12:33:08.681] [jointLog] [info] Building suffix array . . . ; success; saving to disk . . . done; Elapsed time: 61.4932s; done; Elapsed time: 171.743s; processed 12000000 positionsKilled. I can send log files if required. The problem I have is that I cannot seem to run quant without the quant function. salmon quant --validateMappings ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index -l IU ; -1 /home/RnaSeq/fastq/DM_4a_H_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562:23,extend,extend,23,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562,1,['extend'],['extend']
Modifiability,"Hi,. If I don't trim the adaptors and still use --ont will I still get correct quantification? Is adaptor trimming very essential? Is there a way I can use salmon without adaptor trimming?. Also, can you please clarify about the secondary alignmenmts if these are included in Salmon or not?. Thanks,; Harsha; ________________________________; From: Feng Yan ***@***.***>; Sent: 08 January 2024 23:30; To: COMBINE-lab/salmon ***@***.***>; Cc: Harshangda Karan Puri ***@***.***>; Author ***@***.***>; Subject: Re: [COMBINE-lab/salmon] Quantification in Alignment mode for Nanopore Data (Issue #903). also interested to know how Salmon uses secondary alignment. Because I found this tutorial https://combine-lab.github.io/salmon-tutorials/2021/ont-long-read-quantification/ [combine-lab.github.io]<https://urldefense.com/v3/__https://combine-lab.github.io/salmon-tutorials/2021/ont-long-read-quantification/__;!!PDiH4ENfjr2_Jw!GTZeAEdMSJcSBTPXhWuSsmLuX2WDzuNuNgqT04lADpRqOWyHssr_JALdqVa1JBOS9RHGRa9M6SeJKoxo6T7o5_O0bvsV-KkgNb45i4uTnGob8fw$> actually includes secondary alignments.; And based on my experience, secondary alignments are used by Salmon, because when I give a BAM before and after removing secondary (-F 256 flag in samtools), the results are different. ‚Äî; Reply to this email directly, view it on GitHub [github.com]<https://urldefense.com/v3/__https://github.com/COMBINE-lab/salmon/issues/903*issuecomment-1881982972__;Iw!!PDiH4ENfjr2_Jw!GTZeAEdMSJcSBTPXhWuSsmLuX2WDzuNuNgqT04lADpRqOWyHssr_JALdqVa1JBOS9RHGRa9M6SeJKoxo6T7o5_O0bvsV-KkgNb45i4uTEiG0xQE$>, or unsubscribe [github.com]<https://urldefense.com/v3/__https://github.com/notifications/unsubscribe-auth/A3SZAPCLOZYB72ZEIEEXH43YNR6S7AVCNFSM6AAAAABANBCPNSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQOBRHE4DEOJXGI__;!!PDiH4ENfjr2_Jw!GTZeAEdMSJcSBTPXhWuSsmLuX2WDzuNuNgqT04lADpRqOWyHssr_JALdqVa1JBOS9RHGRa9M6SeJKoxo6T7o5_O0bvsV-KkgNb45i4uTntkMlxE$>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/903#issuecomment-1884769339:25,adapt,adaptors,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/903#issuecomment-1884769339,3,['adapt'],"['adaptor', 'adaptors']"
Modifiability,"Hi,. Yes, I did install with bioconda. Thanks for the link to the precompiled; version, which I downloaded and unzipped. I'm sorry to be so ignorant (my; unix knowledge is 25 years out of date) but how/where should I install; this?. Also, currently ""which salmon"" gives me the bioconda version. I guess I; will need to add the path to the precompiled version on the end of my PATH; environment variable?. Thanks,; Michael. On Sat, Nov 24, 2018 at 3:51 PM Rob Patro <notifications@github.com> wrote:. > Hi @michael-brent <https://github.com/michael-brent> ,; >; > Did you, by any chance, install via bioconda? There is a known issue with; > the bioconda build on OSX. Can you try this; > <https://github.com/COMBINE-lab/salmon/files/2383948/salmon_0.11.4-pre_OSX.tar.gz>; > pre-compiled binary in the meantime to see if it works for you?; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441398017>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ArM27mCF3NQcGVuZHpU3-8mb2_6WI7NIks5uyb9egaJpZM4YxmdA>; > .; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441447779:394,variab,variable,394,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441447779,1,['variab'],['variable']
Modifiability,"Hi,; I seem to be having problems with installing Salmon on my mac.; I've tried doing this using ; **1. brew install salmon:**; brew install salmon; Updating Homebrew...; ==> Auto-updated Homebrew!; Updated 2 taps (homebrew/core, homebrew/science).; ==> Updated Formulae; homebrew/science/seqan. ==> Installing salmon from homebrew/science; ==> Downloading https://github.com/COMBINE-lab/salmon/archive/v0.7.2.tar.gz; Already downloaded: /Users/sangrim/Library/Caches/Homebrew/salmon-0.7.2.tar.gz; ==> cmake . -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG -DCMAKE_INSTALL_PREFIX=/usr/local/Cellar/salmon/0.7.2 -DCMA; ==> make install; üç∫ /usr/local/Cellar/salmon/0.7.2: 6 files, 8.5M, built in 7 minutes 8 seconds; sangrim@C02Q7CT1G8WN:~/bin$> salmon; **salmon(2034,0x7fffbc21a3c0) malloc: *** malloc_zone_unregister() failed for 0x7fffbc210000**. and also,; **2. compiling from the osx tarball; the installation seemingly succeeds,**; Install the project...; /usr/local/Cellar/cmake/3.7.1/bin/cmake -P cmake_install.cmake; -- Install configuration: """"; -- Up-to-date: /Users/../bin/salmon-0.7.2/lib; -- Up-to-date: /Users/../bin/salmon-0.7.2/lib/pkgconfig; -- Installing: /Users/../bin/salmon-0.7.2/bin/salmon; -- Installing: /Users/../bin/salmon-0.7.2/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly. Please add /Users/../bin/salmon-0.7.2/bin to your PATH; Please add /Users/../bin/salmon-0.7.2/lib to your DYLD_FALLBACK_LIBRARY_PATH. ...and then make test, hangs...; Running tests...; /usr/local/Cellar/cmake/3.7.1/bin/ctest --force-new-ctest-process ; Test project /Users/maheshsangrithi/bin/salmon-0.7.2/build; Start 1: unit_tests; ........Ctrl+C to cancel...; then if ./salmon is run, I get the same error...; salmon(2034,0x7fffbc21a3c0) malloc: *** malloc_zone_unregister() failed for 0x7fffbc210000. Thanks in advance for your help.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/112:1056,config,configuration,1056,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/112,1,['config'],['configuration']
Modifiability,"Hi,; I was skimming through some of the code and other open issues on support for other library (cell barcode/umi) designs. It looks like there is code for supporting inDrop libraries, but I wasn't sure which parameters I'd need to set. I have inDrop v2 libraries that I'd like to process and am just trying to figure out if we'll need to write our own extensions or if there is already code in place that we can test. Related to some of the comments about the best model for UMI correction in #269 ; The inDrop (at least the v2 protocol) is based on the CEL-Seq like chemistry -- which uses (in vitro transcription) IVT for the initial amplification rather than PCR. From what I've seen so far, the 2 main flavors of single cell RNA-Seq library construction chemistry are; 1. CelSeq/inDrop; polyA capture -> Reverse transcription (RT) for 1st strand cDNA synthesis -> 2nd strand synthesis -> IVT (linear) amplification -> fragmentation -> RT again to convert back to cDNA -> final PCR to amplify library and add Illumina adapters. 2. DropSeq/10X; polyA capture -> RT with template switching -> PCR amplification of cDNA -> fragmentation followed by variable library construction (either transposon/Nextera based or more traditional --frag, end repair, a-tail and adapter ligation) -> final PCR to amplify library and add Illumina adapters. Thanks so much!; Julie",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/339:1022,adapt,adapters,1022,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/339,4,"['adapt', 'variab']","['adapter', 'adapters', 'variable']"
Modifiability,"Hi,; it goes literally in panic: . ```; panic: runtime error: slice bounds out of range. goroutine 1 [running]:; github.com/sylabs/singularity/internal/pkg/util/uri.Split(0x7ffd422b2b65, 0x1f, 0xc00003c195, 0xc0004852f0, 0xc0004e5c78, 0x929217); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/internal/pkg/util/uri/uri.go:104 +0x13e; github.com/sylabs/singularity/cmd/singularity/cli.replaceURIWithImage(0x19d2a60, 0xc0000b8900, 0x11, 0x12); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/cmd/singularity/cli/actions.go:189 +0x5d; github.com/sylabs/singularity/vendor/github.com/spf13/cobra.(*Command).execute(0x19d2a60, 0xc000030160, 0x12, 0x12, 0x19d2a60, 0xc000030160); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/vendor/github.com/spf13/cobra/command.go:755 +0x4ed; github.com/sylabs/singularity/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x19d65c0, 0x0, 0xf6, 0xfc0b01); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/vendor/github.com/spf13/cobra/command.go:852 +0x2fd; github.com/sylabs/singularity/vendor/github.com/spf13/cobra.(*Command).Execute(0x19d65c0, 0x4, 0x1133611); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/vendor/github.com/spf13/cobra/command.go:800 +0x2b; github.com/sylabs/singularity/cmd/singularity/cli.ExecuteSingularity(); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/cmd/singularity/cli/singularity.go:114 +0x110; main.main(); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/cmd/singularity/cli.go:16 +0x20; ```; with -e you clean environment before running container.; I haven't found how to add the environmental variable, but logging in as shell and exporting the variable, it works ( or at least, I discover that I have to rebuild the index since it was built with the old verision in RapMap). I'll see if there is another way to import the variable or I'll build an image with the env; Thanks ; Claudio",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553005722:1705,variab,variable,1705,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553005722,3,['variab'],['variable']
Modifiability,"Hrmm --- [this](https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L366) is the relevant part of the CMakeFile that builds this. It uses the `CC` and `CXX` variables, but doesn't explicitly pass along any others. The first thing to check is what variables the bwa makefile respects, and then to propagate these along via CMake.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/89#issuecomment-246025112:170,variab,variables,170,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/89#issuecomment-246025112,2,['variab'],['variables']
Modifiability,"I actually think that (as @mr-c points out), the `config.h` file isn't necessary with newer versions of Jellyfish. I'm removing the dependency upstream.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195644865:50,config,config,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195644865,1,['config'],['config']
Modifiability,"I am encountering two issues when I follow the instructions for installing salmon 1.10.1:https://salmon.readthedocs.io/en/latest/building.html#installation; I am installing on a mac studio (M2 max) running Ventura. . The first issue I run into is that my understanding of the instructions suggests that I should be in the ""build"" directory when I run cmake. However, if I do that it returns an error about CMakeLists.txt not being in that location. I noticed that is in the salmon directory so I ran cmake from there and it seemed to work fine. But, I'm not sure if that is leading to the problems I am having downstream. . The second issue is when I run make I get an error associated with configuring liblzma (error 77). I have pasted the console log below. I appreciate any suggestions and apologize if I missed something obvious. . This file contains any messages produced by compilers while; running configure, to aid debugging if configure makes a mistake. It was created by XZ Utils configure 5.2.2, which was; generated by GNU Autoconf 2.69. Invocation command line was. $ /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/configure --prefix=/Users/jeremybono/Downloads/salmon-1.10.1/external/install CC=/Library/Developer/CommandLineTools/usr/bin/cc CXX=/Library/Developer/CommandLineTools/usr/bin/c++ CFLAGS= CPPFLAGS= LDFLAGS=. ## --------- ##; ## Platform. ##; ## --------- ##. hostname = Jeremys-Mac-Studio.local; uname -m = arm64; uname -r = 22.6.0; uname -s = Darwin; uname -v = Darwin Kernel Version 22.6.0: Wed Jul 5 22:21:53 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6020. /usr/bin/uname -p = arm; /bin/uname -X = unknown. /bin/arch = unknown; /usr/bin/arch -k = unknown; /usr/convex/getsysinfo = unknown; /usr/bin/hostinfo = Mach kernel version:; 	 Darwin Kernel Version 22.6.0: Wed Jul 5 22:21:53 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6020; Kernel configured for up to 12 processors.; 12 processors are physically available.; 12 processors are logically ava",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:691,config,configuring,691,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,4,['config'],"['configure', 'configuring']"
Modifiability,"I changed the BUILD_COMMAND to use gmake. I also ran 'export MAKE=gmake', and used gmake to run the output of cmake. . BUILD_COMMAND sh -c ""gmake ${QUIET_MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}"". Unfortunately, the BWA included with Salmon is broken on FreeBSD. . kthread.c:70:2: error: unknown type name 'int64_t'. The one on Git (https://github.com/lh3/bwa) works though. So I modified DOWNLOAD_COMMAND to grab the one from Git. . DOWNLOAD_COMMAND git clone https://github.com/lh3/bwa bwa-master. Next problem, it tries to build TBB and fails. This is two problems, because I have TBB, I passed it the path, and it fails to use it. The output of cmake says:. -- Could NOT find TBB (missing: tbbmalloc_proxy) (found suitable version ""2018.0"", minimum required is ""4.4""). tbbmalloc_proxy.h is present in /usr/local/include/tbb. Moving on, TBB fails to build because it's hard coded to use make. I fixed this and it built. BUILD_COMMAND gmake ${QUIET_MAKE} CXXFLAGS=${TBB_CXXFLAGS} lambdas=1 compiler=${TBB_COMPILER} cfg=release tbb_build_prefix=LIBS. Staden-io_lib fails to build with: ; /usr/bin/ld: undefined reference to symbol `pthread_create@@FBSD_1.0' (try adding -lthr); //lib/libthr.so.3: could not read symbols: Bad value. As advertised, -lthr fixed this issue. ; CONFIGURE_COMMAND ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR> LDFLAGS=-lthr CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}. This leads me to an error I can't fix on my own. /home/esiefker/salmon/fresh-salmon/include/BWAMemStaticFuncs.hpp:36:36: error:; use of undeclared identifier 'MEM_F_SELF_OVLP'; int start_width = (opt->flag & MEM_F_SELF_OVLP)? 2 : 1;. There is a similar Debian bug which is fixed: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=818397. I could not find the fix mentioned. https://github.com/COMBINE-lab/salmon/commits/master?author=satta. I have done my best, but I am stuck. I hope this is helpful for those more skilled than I.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415:1434,config,configure,1434,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415,1,['config'],['configure']
Modifiability,I don't think `config.h` is needed when compiling against prebuilt `libjellyfish*.so`; when building salmon for Debian I explicitly patched out the include and everything built just fine. http://anonscm.debian.org/cgit/debian-med/salmon.git/plain/debian/patches/jellyfish-update,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195452002:15,config,config,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195452002,1,['config'],['config']
Modifiability,"I have used ""U"" as was default in config.yml for pipeline-transcriptome-de but now I am thinking it should be stranded but i am not understanding the reverse part? Should it not be SF as this is essentially single-read and the baseball sequence is output as 5' to 3' of original RNA molecule despite being sequenced in the reverse from 3' to 5'.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/211#issuecomment-822139485:34,config,config,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/211#issuecomment-822139485,1,['config'],['config']
Modifiability,"I increased ram to 24G. Segmentation fault happens even faster. I have fiddled with swap memory, to no avail, but I am not a good swap fiddler.; libs with malloc in their name, installed in directory /salmon-latest_linux_x86_64/ib adjacent to /salmon-latest_linux_x86_64/bin, are the same as elsewhere already on my system. conda and bioconda are not available for FreeBSD. What OS would work?; I have looked through the published papers and find no mention of which OS should work. My attempted command for compiling the sources from unzipped directory salmon-0.14.1 is: cmake -S src -B build; Many errors result, starting with:; TBB_LIBRARIES = ; Setting libdivsufsort = /external/install/lib/libdivsufsort.a; Setting libdivsufsort64 = /external/install/lib/libdivsufsort64.a; -- Configuring done; CMake Error at CMakeLists.txt:196 (add_executable):; Cannot find source file:. /tests/UnitTests.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at CMakeLists.txt:196 (add_executable):; Target ""unitTests"" links to target ""Threads::Threads"" but the target was; not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?. CMake Error at CMakeLists.txt:162 (add_library):; Cannot find source file:. /src/jellyfish/mer_dna.cc. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. Apparently the so-called sources do not include many files ending in .cpp, for instance. Please, I repeat, what linux OS should be able to install salmon? ; And/Or what command could compile salmon?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522626638:782,Config,Configuring,782,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522626638,1,['Config'],['Configuring']
Modifiability,I made myself a plot to illustrate @roryk 's approach (hopefully got it right)- just leaving it here in case others are interested. ![compare_droplet_threshold](https://user-images.githubusercontent.com/5775915/57373557-9032fa00-7190-11e9-9cec-15b0a32f88aa.png). Code here: https://github.com/ebi-gene-expression-group/jon-sandbox/tree/master/droplet_cutoffs.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490391990:323,sandbox,sandbox,323,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490391990,1,['sandbox'],['sandbox']
Modifiability,"I saw there was an earlier issue that discussed PCR duplicate removal (https://github.com/COMBINE-lab/salmon/issues/136). I am specifically curious about this response:. > We are currently working on the code that will do duplicate removal when UMI tags are present. That methodology can be extended to remove duplicates even without UMI tags. I am wondering if the functionality was ever added. I am not interested in removing duplicates, but it would be nice to see their estimated levels as a QC measure. Is this information available somewhere? If not, maybe there is some other related metric?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/307:291,extend,extended,291,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/307,1,['extend'],['extended']
Modifiability,I think the longer-term solution is for us to _directly_ support BAM writing. This would obviate the need of passing the output through `samtools`. I will mark this issue as an enhancement to remind us to look into what will be involved in doing that (while we work on addressing the more obvious issues you raise).,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/242#issuecomment-400067553:177,enhance,enhancement,177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/242#issuecomment-400067553,1,['enhance'],['enhancement']
Modifiability,"I think you're right wrt conda. I was able to install 1.10.2 with mamba fairly easily. We've been moving away from conda (towards mamba) but this didn't cross my mind when I was playing in my sandbox. Might be some cluster latency issues combined with conda's snail's pace causing the problem on our end. Thx for the quick replies!. Adam H. Freedman, PhD; Data Scientist; Faculty of Arts & Sciences Informatics Group; Harvard University; 38 Oxford St; Cambridge, MA 02138; phone: +001 310 415 7145; ________________________________; From: Rob Patro ***@***.***>; Sent: Sunday, October 29, 2023 11:01 AM; To: COMBINE-lab/salmon ***@***.***>; Cc: Freedman, Adam ***@***.***>; Mention ***@***.***>; Subject: Re: [COMBINE-lab/salmon] anaconda version of salmon outdated, missing decoys option (Issue #895). Hi @adamfreedman<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_adamfreedman&d=DwMCaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=40O3raH84f_BIZ3HF7nqTYSO2FehGrGHL9b7sqT7LIpWZjFmA3BLxNDTHoz420jp&s=kxY9gCLGWZJp-dp7l31S6M5u2RuUTeWXVrKmaydpo5o&e=>,. I think this is just conda being very very very slow (and potentially broken). The following works fine for me (and finishes in ~1 minute):. mamba create -n salmon -c conda-forge -c bioconda salmon=1.10.2. Can you use the mamba resolver in your environment? Conda has become hardly usable over the years, but mamba works quite well as a fast replacement. I'll also note that I swapped the order of conda-forge and bioconda as the docs specify that bioconda should preferably come last in the list of channels. --Rob. ‚Äî; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_issues_895-23issuecomment-2D1784137337&d=DwMCaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=40O3raH84f_BIZ3HF7nqTYSO2FehGrGHL9b7sqT7LIpWZjFmA3BLxNDTHoz420jp&s=GNiCXqUbJLM16QBJ5PNAqv-rsgDdpCpcvezPXO_riWk&e=>, or unsubscribe<",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784196835:192,sandbox,sandbox,192,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784196835,2,['sandbox'],['sandbox']
Modifiability,"I think your first suggestion would be the best option - although not sure you want worm transcripts in your decoy file. An alternative is to just quantify the entire collection of sequences. This is what [our pipeline](https://github.com/Novartis/pisces) does. This mostly just consists of running salmon plus some functionality for building custom index files and splitting output for multi-species analysis. You can specify your GTF/FASTA pairs using a [config file](https://github.com/Novartis/pisces/blob/9936079ac75d4b75be95bad5bc962465e8c5f458/pisces/config.json#L46-L49) and the pipeline builds index files, helps run salmon and some basic QC, and outputs separate expression matrices for each individual organism - normalized back to TPM space. The approach seems to work well and is flexible enough for users to specify custom transcriptomes for chimeric/mixed samples or extensive genetic engineering.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/901#issuecomment-1828116329:457,config,config,457,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/901#issuecomment-1828116329,3,"['config', 'flexible']","['config', 'flexible']"
Modifiability,"I tried running Alevin again from the new branch and it still seems to be spawning a large number of unexpected threads. Thanks again for all of the help I really appreciate it and I hope you both have a great weekend. ```; GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1; Copyright (C) 2014 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from /u/user/local/bin/salmon...done.; (gdb) run alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:581,config,configured,581,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,3,['config'],"['configuration', 'configured']"
Modifiability,"I used autotools back in 2008 or so (when I was still working in computer graphics). I found it to be horribly archaic (not that CMake is a bastion of clarity). Also, as opaque as CMake sometimes is, I at least found it easier to discover how to force it to do what I wanted than with autotools. That being said, I feel like it is one of these situations where, if you are a wizard with the tool, everything seems relatively easy and straightforward (e.g. Guillaume uses autotools for Jellyfish, and he seems to have internalized all of the quirks fairly well). I guess I long for a configuration and build DSL that has an actual nice language, rather than the somewhat crazy invocations required by autotools and CMake. Then again, the annals of history are strewn with the wreckage of deprecated and defunct attempts to make better build systems.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195457891:583,config,configuration,583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195457891,1,['config'],['configuration']
Modifiability,"I wonder if the max 1-edit distance restriction is too stringent for 21 length barcodes. One important flag to play with is the `--minScoreFraction`. The basic rule to set that is define [here](https://github.com/COMBINE-lab/salmon/blob/91091fc3650a3220f657a9f31616916513f0ad02/src/SalmonUtils.cpp#L3242-L3253). The gist being say if we wan't max k-edit we allow all the reads above the following threshold score (as in the log ):. ```; [2020-06-04 17:55:11.700] [alevinLog] [info] set CITE-seq minScoreFraction parameter to : 0.797619; ```; i.e. we use the equation `(max_score + edit_cost) - 0.5) / max_score`; where `max_score` = 2 * length of barcode = 2 * 21 = 42,; and `edit_cost`= `min( k * (mismatch - match), k * (go + ge - match)`;; `mismatch` penalty = -4; `match` = 2; `go` gap open penalty = -4; `ge` gap extend penalty = -2. For k=1, we had `edit_cost = 8` leading to automatic setting of `minScoreFraction` of 0.797619.; we have looked at 15 length barcodes, but it's possible longer barcodes might have more sequencing error. Let's try allowing more edits i.e. k=2, by setting `--minScoreFraction 0.607` and see if it improves the mapping rate.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639235133:818,extend,extend,818,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639235133,1,['extend'],['extend']
Modifiability,I'll check that Homebrew installs the Jellyfish config.h file.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195604141:48,config,config,48,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195604141,1,['config'],['config']
Modifiability,"I'm having a similar problem, also using an M1 mac. I've tried your solution @rob-p, as well as updating conda, creating a new environment specifically for salmon, it still doesn't work. I get the following error:. ```; $ conda install -c bioconda salmon 3s Py salmon; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve. PackagesNotFoundError: The following packages are not available from current channels:. - salmon. Current channels:. - https://conda.anaconda.org/bioconda/osx-arm64; - https://conda.anaconda.org/bioconda/noarch; - https://conda.anaconda.org/conda-forge/osx-arm64; - https://conda.anaconda.org/conda-forge/noarch; - https://repo.anaconda.com/pkgs/main/osx-arm64; - https://repo.anaconda.com/pkgs/main/noarch; - https://repo.anaconda.com/pkgs/r/osx-arm64; - https://repo.anaconda.com/pkgs/r/noarch. To search for alternate channels that may provide the conda package you're; looking for, navigate to. https://anaconda.org. and use the search bar at the top of the page.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137109855:397,flexible,flexible,397,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137109855,2,['flexible'],['flexible']
Modifiability,I'm trying to build version 0.6 and I get the following error:. ```; cd /root/soft/salmon/salmon-0.6.0/build/src && /usr/local/bin/cmake -E cmake_link_script CMakeFiles/salmon.dir/link.txt --verbose=1; /opt/rh/devtoolset-2/root/usr/bin/c++ -pthread -funroll-loops -fPIC -fomit-frame-pointer -Ofast -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -static-libstdc++ -Wno-deprecated-register -Wno-unused-local-typedefs -L/opt/rh/devtoolset-2/root/usr/lib64 -L/opt/rh/devtoolset-2/root/usr/lib CMakeFiles/salmon.dir/QSufSort.c.o CMakeFiles/salmon.dir/is.c.o CMakeFiles/salmon.dir/bwt_gen.c.o CMakeFiles/salmon.dir/bwtindex.c.o CMakeFiles/salmon.dir/xxhash.c.o CMakeFiles/salmon.dir/CollapsedEMOptimizer.cpp.o CMakeFiles/salmon.dir/CollapsedGibbsSampler.cpp.o CMakeFiles/salmon.dir/Salmon.cpp.o CMakeFiles/salmon.dir/BuildSalmonIndex.cpp.o CMakeFiles/salmon.dir/SalmonQuantify.cpp.o CMakeFiles/salmon.dir/FragmentLengthDistribution.cpp.o CMakeFiles/salmon.dir/FragmentStartPositionDistribution.cpp.o CMakeFiles/salmon.dir/SequenceBiasModel.cpp.o CMakeFiles/salmon.dir/StadenUtils.cpp.o CMakeFiles/salmon.dir/TranscriptGroup.cpp.o CMakeFiles/salmon.dir/GZipWriter.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/RapMapFileSystem.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/RapMapSAIndexer.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/RapMapSAIndex.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/RapMapSAMapper.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/RapMapUtils.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/HitManager.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/rank9b.cpp.o CMakeFiles/salmon.dir/__/external/install/src/rapmap/bit_array.c.o CMakeFiles/salmon.dir/FASTAParser.cpp.o CMakeFiles/salmon.dir/ErrorModel.cpp.o CMakeFiles/salmon.dir/AlignmentModel.cpp.o CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/43:385,variab,variable,385,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/43,1,['variab'],['variable']
Modifiability,"ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 4 }; ### [ output ] => { BM_1/alevin }; ### [ mates1 ] => { ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz }; ### [ mates2 ] => { ./BM_1/run1/bm_S10_L001_R2_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:2071,config,configuration,2071,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['config'],['configuration']
Modifiability,"If an adapter is not trimmed, will it affect the mapping rate?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/398:6,adapt,adapter,6,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/398,1,['adapt'],['adapter']
Modifiability,Interesting. One thing that changed is that we finally upgraded the Docker image used in our continuous integration server from CentOS5 to CentOS6; I wonder if that might cause some portability issues. Could you try installing via Bioconda to see if that executable gives you the same trouble?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752905:182,portab,portability,182,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752905,1,['portab'],['portability']
Modifiability,Is it necessary to trim adapters before using salmon?,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/398:24,adapt,adapters,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/398,1,['adapt'],['adapters']
Modifiability,"Is there a way to compile Salmon to a 32-bit architecture by any chance? I ask because I'd like to have single-cell tutorials on sandbox.bio v2 that use Salmon. But to power the platform, I'm running a 32-bit/i686 Debian OS in the browser üò¨. When I try to compile it in a [i386/debian:bookworm-20230904-slim](https://hub.docker.com/r/i386/debian/) Docker container, this is the error I get:. ```; 1075.0 -- Build files have been written to: /root/build/salmon/external/oneTBB-2021.5.0; 1075.2 [ 14%] Performing build step for 'libtbb'; 1075.7 [ 2%] Building CXX object src/tbb/CMakeFiles/tbb.dir/address_waiter.cpp.o; 1079.6 [ 5%] Building CXX object src/tbb/CMakeFiles/tbb.dir/allocator.cpp.o; 1083.2 [ 7%] Building CXX object src/tbb/CMakeFiles/tbb.dir/arena.cpp.o; 1087.7 In file included from /usr/lib/gcc/i686-linux-gnu/12/include/x86gprintrin.h:89,; 1087.7 from /usr/lib/gcc/i686-linux-gnu/12/include/immintrin.h:27,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/../../include/oneapi/tbb/detail/_machine.h:42,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/../../include/oneapi/tbb/detail/_utils.h:26,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/task_dispatcher.h:20,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/arena.cpp:17:; 1087.7 /usr/lib/gcc/i686-linux-gnu/12/include/waitpkgintrin.h: In function 'tbb::detail::r1::prolonged_pause()':; 1087.7 /usr/lib/gcc/i686-linux-gnu/12/include/waitpkgintrin.h:53:1: error: inlining failed in call to 'always_inline' '_tpause(unsigned int, unsigned long long)': target specific option mismatch; 1087.7 53 | _tpause (unsigned int __A, unsigned long long __B); 1087.7 | ^~~~~~~; 1087.7 compilation terminated due to -Wfatal-errors.; 1087.8 make[5]: *** [src/tbb/CMakeFiles/tbb.dir/build.make:104: src/tbb/CMakeFiles/tbb.dir/arena.cpp.o] Error 1; 1087.8 make[4]: *** [CMakeFiles/Makefile2:170: src/tbb/CMakeFiles/tbb.dir/all] Error 2; 1087.8 make[3]: *** [Makefile:156: all] Er",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/872:129,sandbox,sandbox,129,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/872,1,['sandbox'],['sandbox']
Modifiability,"Is there any possibility of implementing the `--gcBias` option for single-end reads? I have a dataset where this would be very useful. I suppose in order to do this you'd need to assign an end point to each transcript whose start point is represented by a single read. You could either just assume every fragment's length is equal to the given mean fragment length, or maybe use the fragment length distribution implied by the mean and SD to compute, for each nucleotide past the end of the read, the probability that the fragment extends to that nucleotide, and then use that as a weight. Obviously this would require a warning to the user to set the fragment length mean and SD parameters to appropriate values for their data.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/83:531,extend,extends,531,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/83,1,['extend'],['extends']
Modifiability,"It depends what type of ""replicates"" these are. If these are biological replicates, then they should _definitely_ be run separately. Biological replicates contain crucial information about the variability of expression that can be expected in a given condition, and all downstream differential expression tools will use this information. If these are ""technical"" replicates, then there should be little harm in quantifying them together (of course, then one has a 2 condition experiment with only 1 biological replicate per-condition ... which is a big problem if one wishes to analyze e.g. differential expression).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/190#issuecomment-400080695:193,variab,variability,193,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/190#issuecomment-400080695,1,['variab'],['variability']
Modifiability,"It looks like #734 would allow this barcode method to be specified directly:. Long original read geometry - `1{b[9]f[ACTGGCCTGCGA]b[9]f[GGTAGCGGTGACA]b[9]u[8]}2{r}`; Short ""enhanced"" read geometry - `1{x[0-3]b[9]f[GTGA]b[9]f[GACA]b[9]u[8]}2{r}`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/628#issuecomment-1298023583:173,enhance,enhanced,173,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/628#issuecomment-1298023583,1,['enhance'],['enhanced']
Modifiability,"It would be good to get your modifications accepted into BWA & Jellyfish. Re: `libgff` I did indeed package it as a separate library for Debian: https://packages.debian.org/source/sid/libgff. staden-io ships `io_lib-config` which reports on how to compile against the library. ```; mcrusoe@mrcdev:~$ io_lib-config ; Usage: io_lib-config [option]. where 'option' is any one of:. --cflags C and preprocessor flags (eg -I/foo/include); --libs Link-line parameters, eg -L/foo/lib -lstaden-read; --version List io_lib version number. mcrusoe@mrcdev:~$ io_lib-config --cflags; -I/usr/include; mcrusoe@mrcdev:~$ io_lib-config --libs; -L/usr/lib/x86_64-linux-gnu -lstaden-read -Wl,-z,relro -lm -lpthread -lcurl -lz; mcrusoe@mrcdev:~$ io_lib-config --version; 1.14.7; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195346502:216,config,config,216,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195346502,6,['config'],['config']
Modifiability,"It's ignoring the environment variable `$CPPFLAGS` which has the search path for `zlib.h`. ```; $ env |grep CPPFLAGS; CPPFLAGS=-isystem/home/linuxbrew/.linuxbrew/include; ```. This workaround works, but doesn't work on a system without root access. ``` sh; sudo apt-get install libz-dev; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193960137:30,variab,variable,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193960137,1,['variab'],['variable']
Modifiability,It's quite unfortunate that TBB doesn't have an environment variable that can be used to limit the number of threads like openMP does.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396092938:60,variab,variable,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396092938,1,['variab'],['variable']
Modifiability,"Just an idea. Would it be possible to assign an environment variable, such as SALMON_NO_VERSION_CHECK, whose existence overrides version checking? This wouldn't break compatibility with older scripts because they wouldn't have the variable in the first place. In non-networked nodes, an admin can simply set this variable and users will run salmon as usual.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617326919:60,variab,variable,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617326919,6,['variab'],['variable']
Modifiability,Just an update in case anyone else is encountering this issue. I was able to install salmon using these instructions: CONDA_SUBDIR=osx-64 conda create -n rosetta; conda activate rosetta; conda env config vars set CONDA_SUBDIR=osx-64; conda install salmon,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912#issuecomment-1954908448:197,config,config,197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912#issuecomment-1954908448,1,['config'],['config']
Modifiability,"LUDE DIRS = $blah/salmon-0.10.2/external/install/include; BOOST LIB DIR = $blah/salmon-0.10.2/external/install/lib; BOOST LIBRARIES =; Build system will build libdivsufsort; ==================================================================; Build system will fetch and build the Cereal serialization library; ==================================================================; Build system will fetch and build BWA (for Salmon); ==================================================================; -- Found TBB: /apps/gentoo/usr/include (found suitable version ""2018.0"", minimum required is ""2018.0"") found components: tbb tbbmalloc tbbmalloc_proxy; TBB_LIBRARIES = /apps/gentoo/usr/lib/libtbbmalloc_proxy.so;/apps/gentoo/usr/lib/libtbbmalloc.so;/apps/gentoo/usr/lib/libtbb.so; Build system will compile libgff; ==================================================================; ==================================================================; Build system will compile Staden IOLib; ==================================================================; Build system will fetch SPDLOG; ==================================================================; -- Found PkgConfig: /apps/gentoo/usr/bin/pkg-config (found version ""0.29.2""); -- Found Jemalloc: /apps/gentoo/usr/lib/libjemalloc.so (found version """"); Found Jemalloc library --- using this memory allocator; CPACK_SOURCE_IGNORE_FILES = /src/PCA.cpp;/src/PCAUtils.cpp;/build/;/scripts/AggregateToGeneLevel.py;/scripts/ExpressionTools.py;/scripts/GenerateExpressionFiles.sh;/scripts/ParseSoftFile.py;/scripts/PlotCorrelation.py;/scripts/junk;/scripts/sfstrace.log;/scripts/SFPipeline.py;/bin/;/lib/;/sample_data/;PublishREADMEToWebsite.sh;/external/;/src/obsolete/;/include/obsolete/;WebsiteHeader.txt;/experimental_configs/;.git/; TBB_LIBRARIES = /apps/gentoo/usr/lib/libtbbmalloc_proxy.so;/apps/gentoo/usr/lib/libtbbmalloc.so;/apps/gentoo/usr/lib/libtbb.so; -- Configuring done; CMake Error at src/CMakeLists.txt:158 (add_executable):; Cannot ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:4192,config,config,4192,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,1,['config'],['config']
Modifiability,"Looking back to the [earlier post](https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-640962684), I wonder if this stems from CMake not being able to properly find Boost on its own. Granted, the CMake / Boost infrastructure has never been great, partly due to the complexity of salmon's CMake configuration, and partly due to the strange way that CMake, itself, handles Boost versions.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641546215:304,config,configuration,304,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641546215,1,['config'],['configuration']
Modifiability,Looks like it's not in 1.54 - http://www.boost.org/doc/libs/1_54_0/libs/config/doc/html/boost_config/boost_macro_reference.html,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/24#issuecomment-152767712:72,config,config,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/24#issuecomment-152767712,1,['config'],['config']
Modifiability,No worries - and that is exactly what I thought could be possible :-). Just out of curiosity - how would Salmon currently handle if half of a read could be quasi-mapped to a transcript but the second half did not fit anywhere (due to it being very low quality or sequencing adapter contamination)?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-353287536:274,adapt,adapter,274,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-353287536,1,['adapt'],['adapter']
Modifiability,"No, I believe that config.h was it. Otherwise, I just use the already installed headers and the pre-compiled library `libjellyfish-2.0`.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195466899:19,config,config,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195466899,1,['config'],['config']
Modifiability,"Nominally, you can use `info locals` and `p x` (where x is a specific variable name) to look at the value of variables in the stack. However, without debug flags, the ability to peek at such values is questionable. Alternatively we could log the values that gamma is being called with before each call . . . but that's going to lead to some crazy logs until the hang occurs.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267842038:70,variab,variable,70,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267842038,2,['variab'],"['variable', 'variables']"
Modifiability,"Nope; nothing special. Once you've installed conda, you simply do:. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.10.1; ```. then it will give you instructions on how to activate the environment to run salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394755128:81,config,config,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394755128,4,['config'],['config']
Modifiability,"OK --- I think I fixed it; can you re-download the v0.6.0 binary and see if the segfault goes away for you? I think it was the result of failing to give a particular class a default constructor --- a certain variable was being initialized properly on my newer compiler, but that was not the case on the older compiler on the VM where I build the binary. ~~If this resolves the issue for you, I'll probably bump to v0.6.1 just in case anyone tries to build from the source tarball on an older compiler.~~ (I already moved the v0.6.0 tag to point to the new commit and updated the binaries. Hopefully nobody fell through the cracks with the old source tarball, but this doesn't seem like something worth bumping a release for --- assuming my minor change fixes the issue for you as well).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168364366:208,variab,variable,208,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168364366,1,['variab'],['variable']
Modifiability,"Oh wow; I had no idea about libgff :). Regarding Jellyfish, there's not a source ""change"" required upstream, rather the fact that I seem to require the `config.h` file that is not installed during the ""normal"" Jellyfish install process. I don't know if you have any idea how one might get around that. Regarding staden, thanks for brining this to my attention. It will probably take a bit for me to wrap my head around the right way to access this information in CMake, but I'll see what I can manage to cobble together on that front (I really wish there was something better, with a less horrendous ""language"" than CMake, but nothing I know of exists that works nearly as well ""out of the box"").",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195436157:153,config,config,153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195436157,1,['config'],['config']
Modifiability,"Oh, I should've pushed my PR sooner!; Thanks!; I'll take a look how it compares to what I did. ; One thing to note is that it'd be useful to be able to specify the length of the CB - we use 8 bp in our slightly-adapted CEL-Seq2 protocol.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418579796:211,adapt,adapted,211,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418579796,1,['adapt'],['adapted']
Modifiability,"Ok, salmon V1.0.0 finished in 5H 15 min, so about 5 times faster, the exact same library and parameters, and achieved almost the same mapping rate (85.1058% with V1.2.0 vs 84.6341% with V1.0.0) attaching log. I must add I did not trim this library for adapters nor quality, nor did anything to it. Just mapped as is. But fastQC showed excellent levels of quality even at the ends and no or minimal adapter content. ; Also no changes have been done one my OS other than regular updates, but still Ubuntu 18.04. I don't remember any specific changes I've done to it. ; Pearson's correlation in transcript abundance (isoform lelvel) is 0.9984013. Spearman's is 0.9899048. ; Also, I did checked that salmon was actually using 4 threads in both cases, and it was fully using those.; [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/4707443/salmon_quant.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636447127:252,adapt,adapters,252,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636447127,2,['adapt'],"['adapter', 'adapters']"
Modifiability,"Ok, when I attempt the build the way you say above, I get the following error during CMake:. ```; -- fetch PUFFERFISH exit code 127; CMake Error at CMakeLists.txt:317 (message):; Could not fetch pufferfish source [fetchPufferfish.sh returned exit code; 127]. -- Configuring incomplete, errors occurred!; See also ""/salmon-1.10.0/build/CMakeFiles/CMakeOutput.log"".; ```. It seems `wget`, `curl` and `unzip` were missing, and I had to install them. After that, I was able to build and install. At that point, I was able to reproduce the issue! So, it seems to me the underlying problem is coming from one of the upstream dependencies (i.e. libraries being linked to). I will try see if I can find the offender. In general, we like to statically link salmon for exactly this reason. Outside of package systems with which I am familiar (e.g. conda), we don't have a lot of experience in specifying dependent package version constrains, which I believe to be at fault here.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463973824:262,Config,Configuring,262,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463973824,1,['Config'],['Configuring']
Modifiability,Portable cpuRelax,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/547:0,Portab,Portable,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/547,1,['Portab'],['Portable']
Modifiability,Quantification matrix with adapted Celseq2 protocol,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361:27,adapt,adapted,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361,1,['adapt'],['adapted']
Modifiability,Refactor .travis.yml.,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/292:0,Refactor,Refactor,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/292,1,['Refactor'],['Refactor']
Modifiability,Refactoring,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/665:0,Refactor,Refactoring,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/665,1,['Refactor'],['Refactoring']
Modifiability,"Rob,. 	I let you know on the forum page, but just ot make sure it worked and I was ; able to index my transcriptome. Thank you!. Best wishes,; Rich; > On Apr 17, 2018, at 9:44 AM, Rob Patro <notifications@github.com> wrote:; > ; > Hi Rich,; > ; > The issue with pre-compiled OSX binaries is that they are difficult to make portable across OSX versions. This is why we strongly suggest installing Salmon (especially for OSX) through Bioconda. This greatly eases installation and updating, and doesn't require admin privileges. On OSX, you can try the following:; > ; > $ conda config --add channels conda-forge; > $ conda config --add channels bioconda; > $ conda create -n salmon salmon=0.9.1; > ; > This should take care of all relevant dependencies as well as e.g. library locations and placement. Could you please give this a try and let me know if it works for you?; > ; > Best,; > Rob; > ; > ‚Äî; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; > . Richard A. Friedman, PhD; Associate Research Scientist,; Biomedical Informatics Shared Resource; Herbert Irving Comprehensive Cancer Center (HICCC); Lecturer,; Department of Biomedical Informatics (DBMI); Room 825; Irving Cancer Research Center ; Columbia University Herbert and Florence Irving Medical Center; 1130 St. Nicholas Ave; New York, NY 10032; (212)851-4765 (voice); raf4@cumc.columbia.edu. http://www.columbia.edu/~raf4/index.html. ‚ÄúWill there still be ""Classics Illustrated‚Äù by the time I have children? I cannot; imagine raising kids without ""Classics Illustrated‚Äù .‚Äù -Rose Friedman, age 20",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-382031768:323,portab,portable,323,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-382031768,3,"['config', 'portab']","['config', 'portable']"
Modifiability,"Rob,. Brilliant - I forgot that I built the boost libraries from whatever version of gcc was on the standard distribution. I have included -DFETCH_BOOST=TRUE, do you know why I am receiving the following error regarding a missing when executing make?. [ 5%] Performing configure step for 'libboost'; Building Boost.Build engine with toolset gcc... tools/build/src/engine/bin.linuxx86_64/b2; Detecting Python version... 2.7; Detecting Python root... /usr; Unicode/ICU support for Boost.Regex?... not found.; Generating Boost.Build configuration in project-config.jam... Bootstrapping is done. To build, run:. ./b2. To adjust configuration, edit 'project-config.jam'.; Further information:. - Command line help:; ./b2 --help. - Getting started guide:; http://www.boost.org/more/getting_started/unix-variants.html. - Boost.Build documentation:; http://www.boost.org/build/doc/html/index.html. using gcc : : /opt/gcc-8.2.0/bin/g++ ); [ 6%] Performing build step for 'libboost'; opt.jam: No such file or directory; /opt/salmon/external/boost_1_66_0/tools/build/src/build/toolset.jam:43: in toolset.using; ERROR: rule ""opt.init"" unknown in module ""toolset"".; /opt/salmon/external/boost_1_66_0/tools/build/src/build-system.jam:461: in process-explicit-toolset-requests; /opt/salmon/external/boost_1_66_0/tools/build/src/build-system.jam:527: in load; /opt/salmon/external/boost_1_66_0/tools/build/src/kernel/modules.jam:295: in import; /opt/salmon/external/boost_1_66_0/tools/build/src/kernel/bootstrap.jam:139: in boost-build; /opt/salmon/external/boost_1_66_0/boost-build.jam:17: in module scope; make[2]: *** [libboost-prefix/src/libboost-stamp/libboost-build] Error 1; make[1]: *** [CMakeFiles/libboost.dir/all] Error 2; make: *** [all] Error 2. Thanks for all your help!. Nate",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436834099:269,config,configure,269,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436834099,10,['config'],"['config', 'configuration', 'configure']"
Modifiability,Salom 0.9.1 gives errors when configuring and doesn't find installed libraries,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181:30,config,configuring,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181,1,['config'],['configuring']
Modifiability,Set the compiler to build boost from environment variables.,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/276:49,variab,variables,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/276,1,['variab'],['variables']
Modifiability,"So, on a fresh docker image of ubuntu 16.04.4, I was not able to reproduce this yet. Here is my current output:. ```; [100%] Linking CXX executable salmon; ../../external/install/lib/libstaden-read.a(libstaden_read_la-open_trace_file.o): In function `find_file_url':; open_trace_file.c:(.text+0xec4): warning: the use of `tempnam' is dangerous, better use `mkstemp'; [100%] Built target salmon; root@e08cc9670e4a:/salmon-0.10.2/build# make install; [ 6%] Built target libdivsufsort; [ 12%] Built target libbz2; [ 17%] Built target liblzma; [ 24%] Built target libcereal; [ 31%] Built target libgff; [ 36%] Built target libbwa; [ 42%] Built target libstadenio; [ 48%] Built target libspdlog; [ 50%] Built target ksw2pp_sse4; [ 52%] Built target alevin_core; [ 55%] Built target ksw2pp_sse2; [ 60%] Built target ksw2pp_basic; [ 60%] Built target ksw2pp; [ 73%] Built target salmon_core; [ 77%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon-0.10.2/lib; -- Installing: /salmon-0.10.2/lib/libtbb.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc_proxy.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc.so.2; -- Installing: /salmon-0.10.2/lib/libtbb.so.2; -- Installing: /salmon-0.10.2/lib/pkgconfig; -- Installing: /salmon-0.10.2/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon-0.10.2/bin/salmon; -- Installing: /salmon-0.10.2/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon-0.10.2/bin to your PATH; Please add /salmon-0.10.2/lib to your LD_LIBRARY_PATH; ==========================================================================; root@e08cc9670e4a:/salmon-0.10.2/build# make test; Running tests...; Test project /salmon-0.10.2/build; Start 1: unit_tests; 1/3 Test #1: unit_tests ....................... Passed 0.1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268:979,config,configuration,979,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268,1,['config'],['configuration']
Modifiability,"Some progress. Found a src rpm for cereal, rebuilt that into an RPM and installed. Then this (ROOT_* env variables come from the respective module load commands):. ```; cmake \; -DCMAKE_INSTALL_PREFIX=$TOPDIR \; -DSTADEN_ROOT=$ROOT_IO_LIB \; -DGFF_ROOT=$ROOT_LIBGFF \; -DTBB_ROOT=$ROOT_LIBTBB \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_09.log; ```; found everything. The ""make"" went along pretty well until here:; ```; [100%] Linking CXX executable salmon; cd /usr/common/src/salmon-1.2.1/build/src && /usr/common/src/cmake-3.17.1/bin/cmake -E cmake_link_script CMakeFiles/salmon.dir/link.txt --verbose=1; /usr/lib64/ccache/c++ -O3 -DNDEBUG -flto -fno-fat-lto-objects CMakeFiles/salmon.dir/EMUtils.cpp.o CMakeFiles/salmon.dir/CollapsedEMOptimizer.cpp.o CMakeFiles/salmon.dir/CollapsedCellOptimizer.cpp.o CMakeFiles/salmon.dir/CollapsedGibbsSampler.cpp.o CMakeFiles/salmon.dir/Salmon.cpp.o CMakeFiles/salmon.dir/BuildSalmonIndex.cpp.o CMakeFiles/salmon.dir/Graph.cpp.o CMakeFiles/salmon.dir/DedupUMI.cpp.o CMakeFiles/salmon.dir/Alevin.cpp.o CMakeFiles/salmon.dir/AlevinHash.cpp.o CMakeFiles/salmon.dir/SalmonAlevin.cpp.o CMakeFiles/salmon.dir/WhiteList.cpp.o CMakeFiles/salmon.dir/SalmonQuantify.cpp.o CMakeFiles/salmon.dir/FragmentLengthDistribution.cpp.o CMakeFiles/salmon.dir/FragmentStartPositionDistribution.cpp.o CMakeFiles/salmon.dir/GZipWriter.cpp.o CMakeFiles/salmon.dir/SalmonQuantMerge.cpp.o CMakeFiles/salmon.dir/ProgramOptionsGenerator.cpp.o CMakeFiles/salmon.dir/FASTAParser.cpp.o CMakeFiles/salmon.dir/AlignmentModel.cpp.o CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o CMakeFiles/salmon.dir/BAMUtils.cpp.o -o salmon -L/usr/common/src/salmon-1.2.1/lib -L/usr/common/src/salmon-1.2.1/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" ../external/pufferfish/src/libpuffer.a libs",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641531162:105,variab,variables,105,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641531162,1,['variab'],['variables']
Modifiability,Some refactoring to clean some of the argument parsing and to allow future new features. * argument parsing; * allow early load of the index,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/665:5,refactor,refactoring,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/665,1,['refactor'],['refactoring']
Modifiability,"Success???. ```; $ gdb -ex ""attach $(pgrep salmon | head -1)"" -ex bt -ex detach -ex quit; GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1; Copyright (C) 2016 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word"".; Attaching to process 29332; [New LWP 29334]; [New LWP 29335]; [New LWP 29336]; [New LWP 21224]; [New LWP 21225]; [New LWP 21226]; [New LWP 21227]; [New LWP 21228]; [New LWP 21229]; [New LWP 21230]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; 0x00007fcb8cf73789 in __ieee754_log_avx (x=<optimized out>) at ../sysdeps/ieee754/dbl-64/e_log.c:193; 193	../sysdeps/ieee754/dbl-64/e_log.c: No such file or directory.; #0 0x00007fcb8cf73789 in __ieee754_log_avx (x=<optimized out>) at ../sysdeps/ieee754/dbl-64/e_log.c:193; #1 0x0000000000637ccc in double std::gamma_distribution<double>::operator()<pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> > >(pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> >&, std::gamma_distribution<double>::param_type const&) (); #2 0x0000000000634b8d in tbb::inter",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267488748:457,config,configured,457,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267488748,3,['config'],"['configuration', 'configured']"
Modifiability,"Thank you @rob-p for commenting, I presumed that could be the case for reads from unspliced pre-mRNAs that are even extending a small fraction into the introns (hence better scoring on the decoys). The 2 FASTQ files for one of the samples I was describing above can be found as R4171*.fastq.gz at this globus link: http://research.libd.org/globus/jhpce_bsp2-dlpfc/index.html. I used just the main chromosomes with Gencode v41 annotation (slightly ""curated"" to remove read-through and ""retained intron"" annotated transcripts). I am attaching 3 `meta_info.json` outputs for the 3 ways I ran salmon on this sample:. - [tx_only.meta_info.json.gz](https://github.com/COMBINE-lab/salmon/files/11006627/tx_only.meta_info.json.gz) : no decoys, **without** `--validateMappings`; - [gentrome_full.meta_info.json.gz](https://github.com/COMBINE-lab/salmon/files/11006628/gentrome_full.meta_info.json.gz) : with `--validateMappings`, decoys are full chromosome sequences appended to the transcripts file, ; - [gentrome_mashed.meta_info.json.gz](https://github.com/COMBINE-lab/salmon/files/11006629/gentrome_mashed.meta_info.json.gz) : with `--validateMappings`, decoys prepared with mashmap as instructed [here](https://github.com/COMBINE-lab/SalmonTools/blob/master/README.md). It would be great to be able to use Salmon's ""wicked fast"" mapping engine to estimate intronic and intergenic reads at the same time, so I'm considering to make better use of the `writeMappings` output for that purpose, by preparing the decoys in a specific way (extracting intronic and intergenic sequences as distinctively labeled decoys and count the mappings to each label from Salmon's SAM output -- would that work?). I am wondering, due to pre-mRNAs found in rRNA-depletion (ribo-zero) samples, it might be better to artifically add the unspliced transcripts into the mix along with the ""reference"" annotation transcripts, so they also get quantified during the EM-guided probabilistic distribution of reads across this mix of p",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/779#issuecomment-1474451463:116,extend,extending,116,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/779#issuecomment-1474451463,2,['extend'],['extending']
Modifiability,"Thanks @k3yavi !If you can forward me a Linux portable binary that would be great. Whenever I try to compile something on my computer, I fail half of the time . I have Ubuntu 18.04. I will ask permission to share with you part of the data and get back to you. Also, does Alevin use 10x cell barcode whitelist internally to correct barcodes? And do you recommend using the `--naiveEqclass`; option when there are only 64 guide sequences as features?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638487530:46,portab,portable,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638487530,2,['portab'],['portable']
Modifiability,"Thanks @mikelove . I believe tximeta can be used only for human/mouse? In my case, it is not human/mouse. @rob-p and @mikelove - Based on my reading of the salmon documentation, isn't it that the NumReads/TPM etc made available after lengthCorrection. Extending this, the NumReads in quant.sf corresponds to the estimated count value for each transcript and correlated by effective length. My idea is to therefore use the countsFromAbundance=‚ÄúlengthScaledTPM‚Äù to compute counts that are on the same scale as original counts and not correlated with transcript length across samples. Given this - Is this below also valid (after salmon quant). ```; salmon_tx2gene_data = tximport(files, type=""salmon"", tx2gene=tx2gene,; countsFromAbundance = ""lengthScaledTPM""). # generate CSV for archival/use-for-other-purposes ; # then read in the csv and use with DESeq. write.csv(as.data.frame(salmon_tx2gene_data$counts),; file = ""lengthScaledTPM_tx2gene_counts.csv""). # other code for reading in csv, design_metadata etc. dds <- DESeqDataSetFromMatrix (countData = salmon_tx2gene_data$counts,; colData = coldata, ~ condition). ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719784814:252,Extend,Extending,252,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719784814,1,['Extend'],['Extending']
Modifiability,"Thanks @rob-p,. Your explanations are helpful, and I think it may my concern may just be more associated with your general thought as I've tested this with multiple parameters. The one I represented here was just an example, but I also can see how the parameters can be affecting these results. It was just strange to see such a huge shift with the addition/removal of one gene, which makes me think it more associated with how the inference of the variables are conditioned. . As for providing the meta_info.json files, I currently have thousands of them as I am running triplicates of ~150 parameter combinations for multiple tissue types and stages. In the end I don't think it will be necessary as we will likely be changing our approach a bit, which should be fine with the system I have in place. . Also, as for `--scoreExp` our main goal is to try and use Salmon to get quantification of individual genes (primary versus spliced forms). From my analysis, it appears that some genes perform better with scores > 0, however, some genes do perform better with a `--scoreExp` of 0. Although, this could be a factor in running Salmon with such a narrow view (i.e. two transcripts and some housekeeping genes) and might not be the case as more genes are added to the run.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633062608:449,variab,variables,449,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633062608,1,['variab'],['variables']
Modifiability,"Thanks for the details @cljacobs. We'll see if we can get a Docker image up to reproduce this under RH7. Our development machine is ubuntu based, and our CI is CentOS. It also builds on the environment used by bioconda. So it looks like we'll need a RH image to reproduce this. Out of curiosity, does anything happen differently if you pass `-DNO_IPO=TRUE` during the `cmake` configure step? That disables interprocedural optimization (whole program link-time optimization).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558716670:376,config,configure,376,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558716670,1,['config'],['configure']
Modifiability,"Thanks for the recommendation. I'll definitely take a look at it. It is true that we typically suggest that you drop singletons if they are created during e.g. adapter / quality trimming etc.. However, it is also the case that one really may only want to consider very ""light"" quality trimming for RNA-seq data [as suggested by Matt MacManes](https://www.frontiersin.org/articles/10.3389/fgene.2014.00013/full). . If the trimming leads to the loss of a large number of reads, my initial reaction would be to try an understand why. One could always ""re-synchronize"" the singletons by providing them with fake mates, which would cause them to be mapped and treated as orphans during quantification. However, again, it's probably worth understanding why an experiment ends up with a lot of singletons before going through the trouble of accounting for them.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/240#issuecomment-400061755:160,adapt,adapter,160,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/240#issuecomment-400061755,1,['adapt'],['adapter']
Modifiability,Thanks for the speedy replies. I tried running alevin with 8 threads and it ends up leading to the same error and backtrace. I can see a large number of threads still spawning through GDB. I have had these kinds of issues before with OpenMP and I usually had to specify an environment variable to limit the threads. I compiled salmon with the download boost etc option:. ```; linux-vdso.so.1 (0x00007ffc90379000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f859b069000); libtbbmalloc_proxy.so.2 => /u/user/tmp/salmon/build-debug/src/../../external/install/lib/libtbbmalloc_proxy.so.2 (0x00007f859ae66000); libtbbmalloc.so.2 => /u/user/tmp/salmon/build-debug/src/../../external/install/lib/libtbbmalloc.so.2 (0x00007f859ac36000); libtbb.so.2 => /u/user/tmp/salmon/build-debug/src/../../external/install/lib/libtbb.so.2 (0x00007f859aa08000); libgomp.so.1 => /u/user/local/lib64/libgomp.so.1 (0x00007f859a7e7000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f859a5df000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f859a2de000); libgcc_s.so.1 => /u/user/local/lib64/libgcc_s.so.1 (0x00007f859a0c8000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8599d1d000); /lib64/ld-linux-x86-64.so.2 (0x00007f859b286000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enab,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:285,variab,variable,285,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['variab'],['variable']
Modifiability,"Thanks, I usually do not trim reads. I am surprised to see such a difference from version 0.8.3. Do you have a recommendation for --minScoreFraction if I do not trim reads? Or maybe I should go back to NOT using --validateMappings?; For testing purposes, I will try trimming the reads for this sample. Will report back.; Oh, and this sample was prepared by ultra-low RNA input protocol, so the issues of adapter contamination could be present.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586475673:404,adapt,adapter,404,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586475673,1,['adapt'],['adapter']
Modifiability,That sounds like a very good way of doing it :-). I'm sorry I was not clear enough - my question was acutally meant for a single sequence - let me try again:; Lets say we have a read pair where one mate maps fine - but the other mate have a problem - half of it is an adapter (or low quality sequence with to many errors). How would Salmon currently handle this situation where the first half of a sequence (e.g. nt 1-50) could be quasi-mapped to a transcript but the second half (nt 51-100) did not match anywhere? Would the the second half cause the whole sequence to be discarded or would it be enough that the first half matched for it to be considered/counted?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-354955072:268,adapt,adapter,268,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-354955072,2,['adapt'],['adapter']
Modifiability,"That's amazing @Gaura. This feature has been frequently requested by multiple users but I never got a chance to work on this, thanks a lot for the PR. Give me some time to go over the PR and if everything looks Ok, we can merge it in into the next release cycle. May I ask previous version of inDrop had an issue with variable length barcodes, did they solved that issue in v2 ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/703#issuecomment-920921204:318,variab,variable,318,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/703#issuecomment-920921204,1,['variab'],['variable']
Modifiability,The GCC compiler has a long standing bug. You should clean the build directory and pass `-DNO_IPO=TRUE` to the `cmake` configure step. This will disable LTO and allow the compilation to complete.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/860#issuecomment-1620414936:119,config,configure,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/860#issuecomment-1620414936,1,['config'],['configure']
Modifiability,The languages of both autotools and CMake are pretty terrible. I actually like the Make language; I think it gets a bad wrap. Other than `config.h` was there any other files of Jellyfish that were missing from the install that you needed?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195461547:138,config,config,138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195461547,1,['config'],['config']
Modifiability,"There should be easy ways to handle reading line-buffered input from two file descriptors, where both file descriptors could be identical, and then passing these streams internally to buffers to be chunked for multithreaded processing. This would give you one code path for ingesting data, and the command line interface could remain the same as it is currently, with the possible addition of mapping the `-` symbol to `/dev/fd/0`. Is there really much to be gained from buffering all input in byte chunks up front? Remembering that unix pipes are buffered somewhat by default anyway? There has to be an acceptable way to handle line-based input in a more flexible way. In Python I would do:. ``` python; import argparse. example_parser = argparse.ArgumentParser(); example_parser.add_argument('-fq1', type=argparse.FileType('r')); example_parser.add_argument('-fq2', type=argparse.FileType('r')); args = parser.parse_args(). for line1, line2 in zip(args.fq1, args.fq2):; do_stuff_with_lines(); ```. You could then call the program flexibly:. ``` bash; $ example -fq1 file1.fq -fq2 file2.fq; $ example -fq1 <(gzip -dc file1.fq.gz) -fq2 <(gzip -dc file2.fq.gz); $ other_interleaved_process | example -fq1 - -fq2 -; ```. The caveat for the code above is that you would want to replace `argparse.FileType` with some class that reads 4 lines at a time - I'm sure there's no shortage of Python FASTQ readers that do that. And I know that you're looking for C++ libraries that perform well for your purposes, and my Python example is just a toy, but I think designing the option parser to at least **accept** streams and file-like objects and handle them using the same code path would be a worthy reason to refactor a bit.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168545456:656,flexible,flexible,656,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168545456,2,"['flexible', 'refactor']","['flexible', 'refactor']"
Modifiability,"This PR introduces a new feature that will allow users to specify custom single cell protocols and use with alevin. Custom Geometry (--custom-geo) should be used when:; 1. Barcode or umi have variable lengths; 2. There is known fixed sequence in the reads; 3. There is some sequence to be excluded; From the input peglib spec it creates a regex. Boost regex library is used to parse the reads. Apart from small tests on multiple outlier cases, it was tested on a sci-RNA-seq3 sample SRR7827207 for speed. For this the spec is `--custom-geo 1{b[9-10]f[CAGAGC]u[8]b[10]}2{r}`. It says:; - Read 1 starts with barcode of variable length 9-10 bp, followed by; - A fixed sequence CAGAGC, then; - A umi of length 8, and lastly; - barcode of length 10.; - The second read is all biological. The barcodes are concatenated in the output and a padding sequence is added to make the length as max length + 1. The extra base is added so that we don't introduce spurious matches in barcode. For example, if the barcodes have length 3-4 bp and the two barcodes are `ATG` and `ATGA`, after padding they will be `ATGAC` and `ATGAA` resp. Adding just `A` to shorter barcode would result in a spurious match. . Since `--custom-geo` uses regex, it is slower than protocol specific flag. The time with 8 threads on a large Ubuntu 20 machine:. 1. Using `--sciseq3`:; ```; real 1m0.425s; user 7m21.501s; sys 0m2.964s; ```; 2. Using `--custom-geo`; ```; real 1m39.887s; user 11m55.602s; sys 0m6.839s; ```; Notably, it is about 66% slower. However, it allows support for almost all current and future protocols. . There will be a tutorial shortly on how and when to use this and how is it different from other flags such as `--umi-geometry`, `--read-geometry` and `--bc-geomtery`. There is scope of speed improvement in the future along with integration of all custom geometry processing protocols.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/734:192,variab,variable,192,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/734,2,['variab'],['variable']
Modifiability,"This is an installation problem. I am getting a link-time error building Salmon 1.0.0 with GCC 7.3.0 and CMake 3.12.1. The error occurs immediately after ""[100%] Linking CXX executable salmon"". The OS is RHEL6. Here's the output:. ```; /software/Core/GCCcore/7.3.0/include/c++/7.3.0/bits/shared_ptr_base.h:522: error: undefined reference to 'vtable for std::_Sp_counted_ptr_inplace<spdlog::logger, std::allocator<spdlog::logger>, (__gnu_cxx::_Lock_policy)2>'; /software/Compiler/GCCcore/7.3.0/binutils/2.30/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function; /software/Compiler/GCCcore/7.3.0/binutils/2.30/bin/ld.gold: the symbol should have been defined by a plugin; /software/Core/GCCcore/7.3.0/include/c++/7.3.0/bits/shared_ptr_base.h:522: error: undefined reference to 'vtable for std::_Sp_counted_ptr_inplace<spdlog::async_logger, std::allocator<spdlog::async_logger>, (__gnu_cxx::_Lock_policy)2>'; /software/Compiler/GCCcore/7.3.0/binutils/2.30/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function; /software/Compiler/GCCcore/7.3.0/binutils/2.30/bin/ld.gold: the symbol should have been defined by a plugin; ```. Googling this error implies an issue with the code, not a missing library.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/455:703,plugin,plugin,703,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/455,2,['plugin'],['plugin']
Modifiability,"This is related to https://github.com/COMBINE-lab/salmon/issues/272. * Now there are 2 test cases on Travis CI, adding one case.; * Added code for speed up such as `git - depth: 1`, `make -j 4`.; * Refactoring. Removed tailing spaces. Notes:; * I added `gcc-5`'s case as maybe it is minimal support version of gcc for this project.; * I want to replace current case `gcc-7` to latest version `gcc-8` if you like.; * Total running time (""Ran for"" on the Travis page.) becomes faster than current situation. In my repository, total running time is ""15 min 11 sec"", seeing current master branch's test is around 17 min+. See [1]; * Removed `travis_wait`. Without the command, the default behavior is ""when a long running command or compile step regularly takes longer than 10 minutes without producing any output"". [2] I have not faced the situation when I did debug. ; * There are commented out area at the bottom of `.travis.yml`. However as we can run `git log -p .travis.yml` to check past modification, shall we remove the commented out ""whitelist"" area?. [1] https://travis-ci.org/junaruga/salmon/builds/417976633; [2] https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/273:198,Refactor,Refactoring,198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/273,1,['Refactor'],['Refactoring']
Modifiability,"This pull-request is for develop branch.; This fixes https://github.com/COMBINE-lab/salmon/issues/275 . The reason of the build error was because b2 was always built with ""gcc"".; I added something like below code. ```; echo ""using gcc : ${CC_VERSION} : ${CMAKE_CXX_COMPILER} ;"" > ${CMAKE_CURRENT_SOURCE_DIR}/external/boost_1_66_0/tools/build/src/user-config.jam. /path/to/b2 .. toolset=${CC} ...; ```; ; There are still challenges to fix it. 1. The `make test` was finished with timeout. When setting `travis_wait 30 make test`, still failed with the timeout. Maybe we need to change the unit test logic to output something (log or progress bar) regularly to `stdout` during the test process or change the test logic itself. It is freezing at the below point. ```; /usr/local/cmake-3.9.2/bin/ctest --force-new-ctest-process ; Test project /home/travis/build/junaruga/salmon/build; Start 1: unit_tests; ```. 2. The `b2` parameter string `toolset=gcc-7 cxxflags=-std=c++14` is duplicated like this. Maybe we can change the logic in `CMakeLists.txt`. ```; CC=/usr/bin/gcc-7 CXX=/usr/bin/g++-7 /home/travis/build/junaruga/salmon/external/boost_1_66_0/b2 -d0 -j2 --with-iostreams --with-atomic --with-chrono --with-container --with-date_time --with-exception --with-filesystem --with-graph --with-graph_parallel --with-math --with-program_options --with-system --with-locale --with-timer toolset=gcc-7 toolset=gcc-7 cxxflags=-std=c++14 ""cxxflags= -std=c++14 -I/home/travis/build/junaruga/salmon/external/install/include -L/home/travis/build/junaruga/salmon/external/install/lib"" link=static install; ```. 3. `CMakeLists.txt` and `cmake/*.cmake` have a mixture of the different code formatting style. Aligning for formatting those make us read the files easier. I found the useful information for that. [1][2][3][4].; * 2 or 4 space indent?; * ""Tab"" indent is unintentionally used maybe.; * `set(...)` or `set (...)`.; * `set or SET`. [1] the KDE cmake coding style: https://community.kde.org/Policies/CMake",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/276:351,config,config,351,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/276,1,['config'],['config']
Modifiability,"To partially answer my own question, I think [you need 50k reads](https://github.com/COMBINE-lab/salmon/blob/a2f6912b3f9f9af91e3a4b0d74adcb3bdc4c9a32/include/LibraryTypeDetector.hpp#L157) to get a proper strandedness assessment, and I don't think it's configurable.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/938#issuecomment-2166074428:252,config,configurable,252,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/938#issuecomment-2166074428,1,['config'],['configurable']
Modifiability,"URL ""http://tukaani.org/xz/""; | #define NDEBUG 1; | #define HAVE_ENCODER_LZMA1 1; | #define HAVE_ENCODER_LZMA2 1; | #define HAVE_ENCODER_DELTA 1; | #define HAVE_ENCODER_X86 1; | #define HAVE_ENCODER_POWERPC 1; | #define HAVE_ENCODER_IA64 1; | #define HAVE_ENCODER_ARM 1; | #define HAVE_ENCODER_ARMTHUMB 1; | #define HAVE_ENCODER_SPARC 1; | #define HAVE_DECODER_LZMA1 1; | #define HAVE_DECODER_LZMA2 1; | #define HAVE_DECODER_DELTA 1; | #define HAVE_DECODER_X86 1; | #define HAVE_DECODER_POWERPC 1; | #define HAVE_DECODER_IA64 1; | #define HAVE_DECODER_ARM 1; | #define HAVE_DECODER_ARMTHUMB 1; | #define HAVE_DECODER_SPARC 1; | #define HAVE_MF_HC3 1; | #define HAVE_MF_HC4 1; | #define HAVE_MF_BT2 1; | #define HAVE_MF_BT3 1; | #define HAVE_MF_BT4 1; | #define HAVE_CHECK_CRC32 1; | #define HAVE_CHECK_CRC64 1; | #define HAVE_CHECK_SHA256 1; | #define ASSUME_RAM 128; | #define PACKAGE ""xz""; | #define VERSION ""5.2.2""; | /* end confdefs.h. */; | ; | int; | main (); | {; | ; | ;; | return 0;; | }; configure:5259: error: in `/Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2':; configure:5261: error: C compiler cannot create executables; See `config.log' for more details. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=arm-apple-darwin22.6.0; ac_cv_env_CCASFLAGS_set=; ac_cv_env_CCASFLAGS_value=; ac_cv_env_CCAS_set=; ac_cv_env_CCAS_value=; ac_cv_env_CC_set=set; ac_cv_env_CC_value=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_env_CFLAGS_set=set; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=set; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_LDFLAGS_set=set; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_LT_SYS_LIBRARY_PATH_set=; ac_cv_env_LT_SYS_LIBRARY_PATH_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_host=arm-apple-darwin22",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:7782,config,configure,7782,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"Using the rest of the same configure flags without `-DUSE_SHARED_LIBS=TRUE`, the build does not link properly. I think you should try building without these extra flags. Since the LTO seems not to be a problem on this system, a simple `cmake .. && make` should work. In the mean time, I'll try and pare back the configure command line to find the maximum viable interpolation between our different configurations. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464012294:27,config,configure,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464012294,6,['config'],"['configurations', 'configure']"
Modifiability,"Well, I was just in the middle of writing a comment saying ""it's been running for 6 hours with no hang, I don't think it's gonna happen"", and then it just hung. Here's the backtrace from gdb:. ```; $ gdb -ex ""attach $(pgrep salmon | head -1)"" -ex bt -ex detach -ex quit; GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1; Copyright (C) 2016 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word"".; Attaching to process 29153; [New LWP 29155]; [New LWP 29156]; [New LWP 29157]; [New LWP 18084]; [New LWP 18085]; [New LWP 18086]; [New LWP 18087]; [New LWP 18088]; [New LWP 18089]; [New LWP 18090]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; 0x0000000000578b90 in __log_finite@plt (); #0 0x0000000000578b90 in __log_finite@plt (); #1 0x0000000000637ccc in double std::gamma_distribution<double>::operator()<pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> > >(pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> >&, std::gamma_distribution<double>::param_type const&) (); #2 0x0000000000634b8d in tbb::interface",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267534520:638,config,configured,638,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267534520,3,['config'],"['configuration', 'configured']"
Modifiability,"Wicked fast indeed! Are there any plans to extend salmon to also detect gene fusion events? There isn't a fast and accurate way to do that yet, only approaches requiring full alignments. Most often a base-perfect breakpoint isn't required, an estimate within a hash length is fine. We are a heavy user of bcbio and are also running the full STAR alignment just for gene fusions, which really sucks. Any ideas would be much appreciated.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52:43,extend,extend,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52,1,['extend'],['extend']
Modifiability,"Yep, it aligns with https://github.com/COMBINE-lab/salmon/issues/328, where the user confirms it works out for him in a local computer while failing on his cluster environment. We should figure out this cluster config which is making `alevin` segfault as its becoming recurrent issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458197495:211,config,config,211,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458197495,1,['config'],['config']
Modifiability,"Yes ! it's other error that I can't find . but I try : . ```; Last login: Thu Jun 30 15:14:51 on ttys002; Benjamin@u932-ulm-2-57030119-6834 ~ % conda config --add channels defaults; conda config --add channels bioconda; conda config --add channels conda-forge; Warning: 'conda-forge' already in 'channels' list, moving to the top; Benjamin@u932-ulm-2-57030119-6834 ~ % conda install salmon; Collecting package metadata (current_repodata.json): failed. CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://conda.anaconda.org/conda-forge/osx-arm64/current_repodata.json>; Elapsed: -. An HTTP error occurred when trying to retrieve this URL.; HTTP errors are often intermittent, and a simple retry will get you on your way.; 'https://conda.anaconda.org/conda-forge/osx-arm64'; ```. ```; Benjamin@u932-ulm-2-57030119-6834 ~ % conda config --show channels ; channels:; - conda-forge; - bioconda; - defaults; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171223414:150,config,config,150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171223414,8,['config'],['config']
Modifiability,"You are right on the spot. ; After trimming, every problem went away:; ""num_processed"": 102482661,; ""num_mapped"": 85812375,; ""num_decoy_fragments"": 760387,; ""num_dovetail_fragments"": 1265734,; ""num_fragments_filtered_vm"": 7722295,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 293676436,; ""percent_mapped"": 83.7335546937057,. I would really like to have the soft clipping feature though. With salmon being so fast, trimming step basically takes more time than the salmon quantification step. A lot of us are now turning to cloud platforms and are charged by the the computing time. Some other questions unrelated to this topic:; For snRNA-seq like 10X platform, do you recommend just trimming read2?; From what I read out of documentation, decoy enhanced index would only work with --validateMapping. Would Alevin only work with non-decoy index then?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586530740:759,enhance,enhanced,759,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586530740,1,['enhance'],['enhanced']
Modifiability,"```; Benjamin@u932-ulm-2-57030119-6834 ~ % conda install salmon; Collecting package metadata (current_repodata.json): failed. CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://conda.anaconda.org/conda-forge/osx-arm64/current_repodata.json>; Elapsed: -. An HTTP error occurred when trying to retrieve this URL.; HTTP errors are often intermittent, and a simple retry will get you on your way.; 'https://conda.anaconda.org/conda-forge/osx-arm64'; ```. ```; Benjamin@u932-ulm-2-57030119-6834 ~ % conda config --show channels; channels:; - conda-forge; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171204474:509,config,config,509,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171204474,2,['config'],['config']
Modifiability,"```bash; $ qacct -j 9958683 -t 3; ==============================================================; qname shared.q; hostname compute-068.cm.cluster; group lieber_jaffe; owner lcollado; project NONE; department defaultdepartment; jobname step6-txQuant-alzheimer.gsk_phaseII; jobnumber 9958683; taskid 3; account sge; priority 0; qsub_time Mon Mar 6 23:18:58 2017; start_time Mon Mar 6 23:19:12 2017; end_time Tue Mar 7 17:27:45 2017; granted_pe local; slots 1; failed 0; exit_status 0; ru_wallclock 65313; ru_utime 25600.565; ru_stime 29552.966; ru_maxrss 6548296; ru_ixrss 0; ru_ismrss 0; ru_idrss 0; ru_isrss 0; ru_minflt 1662027; ru_majflt 369; ru_nswap 0; ru_inblock 0; ru_oublock 56256; ru_msgsnd 0; ru_msgrcv 0; ru_nsignals 0; ru_nvcsw 801190; ru_nivcsw 2880329; cpu 55153.531; mem 403295.295; io 17.447; iow 0.000; maxvmem 9.065G; arid undefined; ```. For task 1 the maxvmem was 9.072G and for task 2 9.061G. I then ran a test requesting a minimum of 10 GB of free RAM and a max of 11 GB, which in theory should work unless `salmon` uses variable amounts of memory with the same data. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=10G,h_vmem=11G,h_fsize=100G; #$ -N step6-salmon_test.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test.$TASK_ID.txt; #$ -e ./logs/salmon_test.$TASK_ID.txt; #$ -m a; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-p",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:21197,variab,variable,21197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['variab'],['variable']
Modifiability,`cmake && make install` _should_ work --- the fetching should happen during the configuration (i.e. `cmake`) phase.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367760156:80,config,configuration,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367760156,1,['config'],['configuration']
Modifiability,"`extract-libdivsufsort.cmake` is auto-generated during configuration. However, the zip itself is grabbed as part of RapMap (specifically, it resides [here](https://github.com/COMBINE-lab/RapMap/tree/master/external)). I can take a look at what would be required to make it a tarball there (or, conversely, if there is a way to force CMake to use `unzip` rather than `cmake -E tar xfz`.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193784017:55,config,configuration,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193784017,1,['config'],['configuration']
Modifiability,"a64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/CommandLineTools/usr/bin/cc; configure:5150: checking for C co",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4282,config,configure,4282,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"abriel/Projects/salmon-0.13.1/build/CMakeFiles/libcereal.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; checking whether the C compiler works... yes; checking for C compiler default output file name... a.out",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:1953,config,configure,1953,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['config'],['configure']
Modifiability,"aco_m@med0113 1_bootstrappedAlevin]$ ls -al alevin; total 1; drwxrwxr-x 2 amonaco_m hpc-ag-zinzen 4096 Mar 3 11:00 .; drwxrwxr-x 3 amonaco_m hpc-ag-zinzen 4096 Mar 3 11:00 ..; -rw-rw-r-- 1 amonaco_m hpc-ag-zinzen 0 Mar 3 11:00 alevin.log; ```. I have used Salmon Alevin before on this dataset - without the bootstrap option - while providing the Cell Ranger whitelisted barcodes, and everything has gone smoothly (same script as below, commented out line). I have tried increasing the allotted memory and thread number as well, but with no change in outcome. Have you ever encountered something like this or could address me to where the issue may be (I'm assuming something to do with the bootstrap)?. *****Script I submit:*****; ```; #!/bin/bash; # expected run time ; #SBATCH --time=24:00:00 ; # Combine stderr and stdout log files into the stdout log file.; #SBATCH -o without -e; # Keep current environment variables.; #SBATCH --export=variables; # number of cores; #SBATCH -n 30; # expected memory to be used; #SBATCH ‚Äîmem=50000; # Specify queue via expected length of job. ; #SBATCH --partition=medium; # Set the log directory.; #SBATCH -o logs. ####declarations; conda activate salmon. Read1=$1 # fastq file - CB+UMI; Read2=$2 # fastq file - insert read; index=$3 # directory from salmon index; outDir=$4 # output directory; tsv=$5 # tsv containing txp-gene-id pairs; whitelist=$6 # cell ranger output barcodes. salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist --numCellBootstraps 20 --dumpFeatures. #salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist. ```. Thank you in advance!; Anna. -------------------------; Additional FYI:; ```; (salmon) [amonaco_m@med0113 1_bootstrappedAlevin]$ salmon version; Version Info: This is the most recent version of salmon.; salmon v1.4.0. Usage: salmon -h|--help or ; salmon -v|--version or ; salmon -c|--cite or ; salmon [--n",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/636:1771,variab,variables,1771,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/636,1,['variab'],['variables']
Modifiability,"almon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; checking whether the C compiler works... yes; checking for C compiler default output file name... a.out; checking for suffix of executables...; checking whether we are cross compiling... configure: error: in `/Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib':; configure: error: cannot run C compiled programs.; If you meant to cross compile, use `--host'.; See `config.log' for more details; make[2]: *** [libstadenio-prefix/src/libstadenio-stamp/libstadenio-configure] Error 1; make[1]: *** [CMakeFiles/libstadenio.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:2666,variab,variables,2666,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,5,"['config', 'variab']","['config', 'configure', 'variables']"
Modifiability,"almon.; Exception : [Error: FMD indexing is not supported in this version of salmon.]; /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index was invoked improperly.; For usage information, try /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index --help; Exiting.; #this worked OK; /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type puff. ```; Here is what happens in gdb for the version I built:. ```; gdb --args salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; GNU gdb (GDB) Red Hat Enterprise Linux 8.2-6.el8; Copyright (C) 2018 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable secti",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:1666,config,configuration,1666,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,2,['config'],['configuration']
Modifiability,"and poly-T was used to select mRNAs during the library construction...; 3. Not using pre-mature transcripts so reads mapping to introns are discarded: I am not sure if this is a valid point since we usually quantify mature mRNAs, not pre-mature ones.; 4. Library type: my library was constructed in a stranded way. The program detected my libtype as ISR:; ```; {; ""read_files"": ""[ DS_1_HW_FM_1P.fq.gz, DS_1_HW_FM_2P.fq.gz]"",; ""expected_format"": ""ISR"",; ""compatible_fragment_ratio"": 1.0,; ""num_compatible_fragments"": 18651686,; ""num_assigned_fragments"": 18651686,; ""num_frags_with_concordant_consistent_mappings"": 17799536,; ""num_frags_with_inconsistent_or_orphan_mappings"": 864409,; ""strand_mapping_bias"": 0.0001987858838992702,; ""MSF"": 0,; ""OSF"": 0,; ""ISF"": 3539,; ""MSR"": 0,; ""OSR"": 0,; ""ISR"": 17799536,; ""SF"": 419781,; ""SR"": 441089,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; }; ```; When I change the libtype to a broader category, such as IU, the mapping rates slightly increased from ~55% to 65%, also I got more counts in each transcript, but this introduced higher strand mapping bias (Appeared as a warning message). ; 5. many short reads: No... in my case, the majority of the reads are ~150bp. And I used k=31 (default).; 6. Read trimming: I trimmed the adaptors and low-quality bases from the ends. One thing I noticed in my FastQC report is that I have warnings for 'Per Base Sequence Content'. I can see a fluctuation of nucleotides in around the first 12bp of each run due to a biased selection of random primers. This is so common in RNA-seq data so I did not trim the first several bases...Not sure if this can cause the low mapping rate.; One of my fastQC reports:. [DS_1_HW_FM_1P_fastqc.html.zip](https://github.com/COMBINE-lab/salmon/files/4730665/DS_1_HW_FM_1P_fastqc.html.zip). So...Is there a way I can increase the mapping rates? Or do I need to? My trimmed reads are all of very high quality so I do expect a mapping rate of >70%. I would appreciate it if this could be clarified.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533:2777,adapt,adaptors,2777,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533,1,['adapt'],['adaptors']
Modifiability,"arwin22.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; configure:5170: $? = 0; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -v >&5; Apple clang version 15.0.0 (clang-1500.0.40.1); Target: arm64-apple-darwin22.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; configure:5170: $? = 0; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -V >&5; clang: error: argument to '-V' is missing (expected 1 value); clang: error: no input files; configure:5170: $? = 1; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -qversion >&5; clang: error: unknown argument '-qversion'; did you mean '--version'?; clang: error: no input files; configure:5170: $? = 1; configure:5190: checking whether the C compiler works; configure:5212: /Library/Developer/CommandLineTools/usr/bin/cc conftest.c >&5; ld: library 'System' not found; clang: error: linker command failed with exit code 1 (use -v to see invocation); configure:5216: $? = 1; configure:5254: result: no; configure: failed program was:; | /* confdefs.h */; | #define PACKAGE_NAME ""XZ Utils""; | #define PACKAGE_TARNAME ""xz""; | #define PACKAGE_VERSION ""5.2.2""; | #define PACKAGE_STRING ""XZ Utils 5.2.2""; | #define PACKAGE_BUGREPORT ""lasse.collin@tukaani.org""; | #define PACKAGE_URL ""http://tukaani.org/xz/""; | #define NDEBUG 1; | #define HAVE_ENCODER_LZMA1 1; | #define HAVE_ENCODER_LZMA2 1; | #define HAVE_ENCODER_DELTA 1; | #define HAVE_ENCODER_X86 1; | #define HAVE_ENCODER_POWERPC 1; | #define HAVE_ENCODER_IA64 1; | #define HAVE_ENCODER_ARM 1; | #define HAVE_ENCODER_ARMTHUMB 1; | #define HAVE_ENCODER_SPARC 1; | #define HAVE_DECODER_LZMA1 1; | #define HAVE_DECODER_LZMA2 1; | #define HAVE_DECODER_DELTA 1; | #define HAVE_DECODER_X86 1; | #define HAVE_DECODER_POWERPC 1; | #define HAVE_DECODER_IA64 1; | #define HAVE_DECODER_ARM 1; | #define HAVE_DECODER_ARMTHUMB 1; | #define HAVE_DECODER_SPARC 1; | #define HAVE_MF_HC3 1; | #define HAVE_",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:6461,config,configure,6461,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,3,['config'],['configure']
Modifiability,c_cv_build=arm-apple-darwin22.6.0; ac_cv_env_CCASFLAGS_set=; ac_cv_env_CCASFLAGS_value=; ac_cv_env_CCAS_set=; ac_cv_env_CCAS_value=; ac_cv_env_CC_set=set; ac_cv_env_CC_value=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_env_CFLAGS_set=set; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=set; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_LDFLAGS_set=set; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_LT_SYS_LIBRARY_PATH_set=; ac_cv_env_LT_SYS_LIBRARY_PATH_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_host=arm-apple-darwin22.6.0; ac_cv_path_install='/usr/bin/install -c'; ac_cv_prog_AWK=awk; ac_cv_prog_ac_ct_CC=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_prog_make_make_set=yes; am_cv_make_support_nested_variables=yes; gl_cv_posix_shell=/bin/sh. ## ----------------- ##; ## Output variables. ##; ## ----------------- ##. ACLOCAL='${SHELL} /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/build-aux/missing aclocal-1.15'; AMDEPBACKSLASH='\'; AMDEP_FALSE='#'; AMDEP_TRUE=''; AMTAR='$${TAR-tar}'; AM_BACKSLASH='\'; AM_CFLAGS=''; AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'; AM_DEFAULT_VERBOSITY='1'; AM_V='$(V)'; AR=''; AS=''; AUTOCONF='${SHELL} /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/build-aux/missing autoconf'; AUTOHEADER='${SHELL} /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/build-aux/missing autoheader'; AUTOMAKE='${SHELL} /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/build-aux/missing automake-1.15'; AWK='awk'; CC='/Library/Developer/CommandLineTools/usr/bin/cc'; CCAS=''; CCASDEPMODE=''; CCASFLAGS=''; CCDEPMODE=''; CFLAGS=''; CFLAG_VISIBILITY=''; COND_ASM_X86_64_FALSE=''; COND_ASM_X86_64_TRUE='#'; COND_ASM_X86_FALSE=''; COND_ASM_X86_TRUE='#'; COND_CHECK_CRC32_FALSE='#'; COND_CHECK_CRC32_TRUE=''; COND,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:9054,variab,variables,9054,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['variab'],['variables']
Modifiability,"cking if debugging code should be compiled; configure:3082: result: no; configure:3122: checking which encoders to build; configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4105,config,configure,4105,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"comment-777414), but I'm currently attempting to extend alevin's use to the newer combinatorial indexing experiments like [SPLiT-seq](https://science.sciencemag.org/content/360/6385/176) or the commercial solution, [ParseBio](https://www.parsebiosciences.com/) (the biotech formerly known as SplitBio). Now that you support different barcode geometries and allow the user to specify where these barcodes should be expected, this _should_ be doable. . I've downloaded the [raw data from the original SPLiT-seq paper](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM3017261), and we have some ParseBio data of our own; my goal is to help you all write a vignette on this once we get the details worked out. . In short, the R1 file contains cDNA sequence, and R2 contains a 10bp UMI followed by 3 different barcodes in the following arrangements (note: ParseBio seems to shift BC1 up a few bp, to 79-86):; - UMI: 1-10; - BC3: 11-18; - BC2: 49-56; - BC1: 87-94. The intervening bases are a combination of common and variable sequences. The other wrinkle with these approaches is that the cDNA can be amplified using either oligo-dT or random hexamer barcodes. The net effect of this is that BC1 can be one of two options, and some barcode combinations need to be pooled to represent the same cell. For example:. AACGTGAT-CTGTAGCC-ACACAGAA; GATAGACA-CTGTAGCC-ACACAGAA. may be the same cell, amplified by two different means. . We know how the BC1s are paired, so Avi suggested pre-processing the R2 FASTQ file such that we locate random hexamer BC1 sequences and modify them to the matched oligo-dT sequence. In the above example, we'd correct some R2 reads that contain ""GATAGACA"" in the 87-94 position to ""AACGTGAT"". I [wrote a script](https://github.com/jeremymsimon/SPLITseq) (in perl because I'm old-school) that does this and allows for mismatches within 1 hamming distance. I'm sure someone could port this to python, rust, or C/C++ and speed this step up substantially, but it seems to work ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699:1199,variab,variable,1199,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699,1,['variab'],['variable']
Modifiability,"configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/Command",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4227,config,configure,4227,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"dif; }. Determining if the function pthread_create exists in the pthreads failed with the following output:; Change Dir: /home/bli/src/salmon/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/make"" ""cmTC_dd9f2/fast""; /usr/bin/make -f CMakeFiles/cmTC_dd9f2.dir/build.make CMakeFiles/cmTC_dd9f2.dir/build; make[1]: Entering directory '/home/bli/src/salmon/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_dd9f2.dir/CheckFunctionExists.c.o; /usr/bin/cc -DCHECK_FUNCTION_EXISTS=pthread_create -o CMakeFiles/cmTC_dd9f2.dir/CheckFunctionExists.c.o -c /usr/share/cmake-3.7/Modules/CheckFunctionExists.c; Linking C executable cmTC_dd9f2; /usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_dd9f2.dir/link.txt --verbose=1; /usr/bin/cc -DCHECK_FUNCTION_EXISTS=pthread_create CMakeFiles/cmTC_dd9f2.dir/CheckFunctionExists.c.o -o cmTC_dd9f2 -rdynamic -lpthreads ; /usr/bin/ld: cannot find -lpthreads; collect2: error: ld returned 1 exit status; CMakeFiles/cmTC_dd9f2.dir/build.make:97: recipe for target 'cmTC_dd9f2' failed; make[1]: *** [cmTC_dd9f2] Error 1; make[1]: Leaving directory '/home/bli/src/salmon/CMakeFiles/CMakeTmp'; Makefile:126: recipe for target 'cmTC_dd9f2/fast' failed; make: *** [cmTC_dd9f2/fast] Error 2. ```. Some search on the internet suggests me that sometimes `-lpthread` should be used instead of `-lpthreads`. And indeed, if I try to compile the following code:; ```; #include <pthread.h>. int main(int argc, char** argv); {; (void)argv;; #ifndef pthread_create; return ((int*)(&pthread_create))[argc];; #else; (void)argc;; return 0;; #endif; }; ```. I observe a failure with `-lpthreads`:; ```; $ cc -lpthreads /home/bli/src/salmon/CMakeFiles/CMakeTmp/CheckSymbolExists.c; /usr/bin/ld: cannot find -lpthreads; collect2: error: ld returned 1 exit status; ```. And a success with `-lpthread`:. ```; $ cc -lpthread /home/bli/src/salmon/CMakeFiles/CMakeTmp/CheckSymbolExists.c; $ ; ```. However, I'm unable to find where I can fix this in the whole configuration and build process.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/207:3572,config,configuration,3572,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/207,1,['config'],['configuration']
Modifiability,"e *full* decoy index is substantially larger than the index on just the transcriptome (after all, it is indexing the entire human genome in addition to the transcriptome). One thing you might try to test this hypothesis, other than requesting to build on a node with more RAM, is to compute a hash (e.g. md5 or sha256 sum) on all of the files in the index, and also record their sizes. Then we can build the index on the same version of the files on our end and compare. Second ‚Äî and perhaps more importantly for your end goal ‚Äî the main purpose of the decoy-aware index is to improve specificity rather than sensitivity. That is, the decoys are designed to help avoid _spurious_ mapping of reads to an annotated transcript when a better explanation for the read exists elsewhere in the genome. However, the reads that are mapped to decoys are not otherwise used for quantification. Thus, using the decoy aware transcriptome index is unlikely to improve your mapping rate. I agree that your mapping rate does seem rather low. There are a few potential culprits here, and some diagnostics we can look at to see what might be going wrong. First, you can take a look at the file `aux_info/meta_info.json` in the salmon quantification directories to get a few more details about why reads were not mapped. If you share one of those files here I can describe the relevant fields. Also, I have two more rather common things to consider that might affect the mapping rate. One is to add the sequence for the ribosomal RNAs to your transcriptome before indexing and then quantifying. If your mapping rate increases considerably, this is evidence of rather inefficient depletion prior to sequencing. The other thing to consider is to do basic adapter / quality trimming on the reads to see if that affects your mapping rate at all. I hope these two different responses are useful, and I'll keep this issue open so feel free to reply here with any further questions or discoveries you make regarding the above.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/603#issuecomment-744162850:2071,adapt,adapter,2071,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/603#issuecomment-744162850,1,['adapt'],['adapter']
Modifiability,"e HAVE_ENCODER_DELTA 1; | #define HAVE_ENCODER_X86 1; | #define HAVE_ENCODER_POWERPC 1; | #define HAVE_ENCODER_IA64 1; | #define HAVE_ENCODER_ARM 1; | #define HAVE_ENCODER_ARMTHUMB 1; | #define HAVE_ENCODER_SPARC 1; | #define HAVE_DECODER_LZMA1 1; | #define HAVE_DECODER_LZMA2 1; | #define HAVE_DECODER_DELTA 1; | #define HAVE_DECODER_X86 1; | #define HAVE_DECODER_POWERPC 1; | #define HAVE_DECODER_IA64 1; | #define HAVE_DECODER_ARM 1; | #define HAVE_DECODER_ARMTHUMB 1; | #define HAVE_DECODER_SPARC 1; | #define HAVE_MF_HC3 1; | #define HAVE_MF_HC4 1; | #define HAVE_MF_BT2 1; | #define HAVE_MF_BT3 1; | #define HAVE_MF_BT4 1; | #define HAVE_CHECK_CRC32 1; | #define HAVE_CHECK_CRC64 1; | #define HAVE_CHECK_SHA256 1; | #define ASSUME_RAM 128; | #define PACKAGE ""xz""; | #define VERSION ""5.2.2""; | /* end confdefs.h. */; | ; | int; | main (); | {; | ; | ;; | return 0;; | }; configure:5259: error: in `/Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2':; configure:5261: error: C compiler cannot create executables; See `config.log' for more details. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=arm-apple-darwin22.6.0; ac_cv_env_CCASFLAGS_set=; ac_cv_env_CCASFLAGS_value=; ac_cv_env_CCAS_set=; ac_cv_env_CCAS_value=; ac_cv_env_CC_set=set; ac_cv_env_CC_value=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_env_CFLAGS_set=set; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=set; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_LDFLAGS_set=set; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_LT_SYS_LIBRARY_PATH_set=; ac_cv_env_LT_SYS_LIBRARY_PATH_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_host=arm-apple-darwin22.6.0; ac_cv_path_install='/usr/bin/install -c'; ac_cv_prog_AWK=awk; ac_cv_prog_ac_ct_CC=/Library/Developer/CommandLineToo",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:7872,config,configure,7872,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,2,['config'],"['config', 'configure']"
Modifiability,"e I answer your question and layout my logic, I want to mention that I am **_not_** suggesting fastp is not doing its job, **_neither am I stating that fastp is working incorrectly_**. Now to my answer(s) and logic:; 1. With fastp, I am not sure if adapter trimming happens first and then quality trimming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:997,adapt,adapter-trimming,997,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['adapt'],['adapter-trimming']
Modifiability,"e correct command line `salmon quant` options for Lexogen/QuantSeq _(this will be referred to as QS in the rest of the message(s))_ ?. `salmon quant --threads 16 --noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in my final summarized table (after tximpo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:1016,Adapt,Adapter,1016,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Adapt'],['Adapter']
Modifiability,"ed using the `2.1.3.tar.gz` tarball from GitHub, but after adding `autoreconf -i` to the `CONFIGURE_COMMAND`, this leads to the same problem. ``` diff; --- salmon-0.4.2/CMakeLists.txt.orig 2015-06-15 02:31:09.000000000 +0200; +++ salmon-0.4.2/CMakeLists.txt 2015-08-18 21:13:29.684010359 +0200; @@ -357,14 +366,14 @@; message(""==================================================================""); ExternalProject_Add(libjellyfish; DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external; - URL ftp://ftp.genome.umd.edu/pub/jellyfish/jellyfish-2.1.3.tar.gz; - SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.1.3; + URL https://github.com/gmarcais/Jellyfish/releases/download/v2.2.3/jellyfish-2.2.3.tar.gz; + SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.3; INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install; - CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.1.3/configure --prefix=<INSTALL_DIR> CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}; + CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.3/configure --prefix=<INSTALL_DIR> CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}; BUILD_COMMAND ${MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}; BUILD_IN_SOURCE 1; INSTALL_COMMAND make install && ; - cp config.h <INSTALL_DIR>/include/jellyfish-2.1.3/jellyfish/ &&; + cp config.h <INSTALL_DIR>/include/jellyfish-2.2.3/jellyfish/ &&; cp config.h <INSTALL_DIR>/include/; ). --- salmon-0.4.2/src/CMakeLists.txt.orig 2015-08-18 21:21:14.892734948 +0200; +++ salmon-0.4.2/src/CMakeLists.txt 2015-08-18 21:20:51.292295094 +0200; @@ -42,7 +42,7 @@; ${GAT_SOURCE_DIR}/external; ${GAT_SOURCE_DIR}/external/cereal/include; ${GAT_SOURCE_DIR}/external/install/include; -${GAT_SOURCE_DIR}/external/install/include/jellyfish-2.1.3; +${GAT_SOURCE_DIR}/external/install/include/jellyfish-2.2.3; ${GAT_SOURCE_DIR}/external/install/include/bwa; ${Z",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/11:1988,config,configure,1988,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/11,1,['config'],['configure']
Modifiability,"efault. RSEM uses the EM algorithm, and salmon uses the variational Bayesian EM algorithm. The latter tends to induce more sparse solutions. This is simply because they are optimizing slightly different objectives. It is very difficult to say in general if one is ""better"" than the other in a blanket way, but [there is previous literature to support that the VBEM may be more accurate](https://academic.oup.com/bioinformatics/article/29/18/2292/239795). However, while RSEM only implements the EM algorithm, salmon actually implements and provides a switch to use either. So, if you want to test the effect of this difference, you can run salmon with the `--useEM` algorithm. This will tell salmon to use the ""classic"" EM algorithm and will eliminate this source of variation. * As with the other question you asked, there may be a _small_ discrepancy depending on when enforcement of a stranded library kicks in under salmon's `A` library type. You can eliminate that variable by simply providing `-l SF` to match the library type being used with RSEM. * Coming back to the `IndelSoftclipSingleend` parameter I mentioned in the first point; RSEM disallows indels in the alignments that it quantifies. This means that to produce RSEM-compatible input, STAR must not align reads that contain indels. While this won't generally have a big effect for many transcripts, it can certainly affect the abundance estimates for transcripts in your sample where the sample you are quantifying has (indel) variation with respect to the reference annotation. We touch upon that a bit as well in the [paper I mentioned above](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8). * Finally, and likely the smallest source of potential differences, is that there are other implementation details that differ between salmon and RSEM (e.g. exactly how the fragment length distribution is used to compute the effective transcript length, exactly how the alignment score of a read is used to as",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590:3660,variab,variable,3660,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590,2,['variab'],['variable']
Modifiability,"elieve I am trying to add an assay. Here is the relevant code section and the error I receive:; ```; DefaultAssay(object = image.data) <- ""Spatial""; brain[['slice']] <- image.data; Error in `[[<-`:; ! Cannot add new cells with [[<-; Run `rlang::last_trace()` to see where the error occurred.; > rlang::last_trace(); <error/rlang_error>; Error in `[[<-`:; ! Cannot add new cells with [[<-; ---; Backtrace:; ‚ñÜ; 1. ‚îú‚îÄmethods (local) `[[<-`(`*tmp*`, ""slice"", value = `<VisiumV2[,600]>`); 2. ‚îî‚îÄSeuratObject (local) `[[<-`(`*tmp*`, ""slice"", value = `<VisiumV2[,600]>`); Run rlang::last_trace(drop = FALSE) to see 1 hidden frame.; ```. I checked that Seurat has not changed the `sobj[[""ASSAYNAME""]] <- MYASSAYOBJECT` syntax in the same R session by following [this tutorial](https://satijalab.org/seurat/articles/multimodal_vignette) up to the line where the `adt` assay is added and confirmed that the resulting object had two assays present. I think this may be a versioning issue related to what types of objects can be added into layers (aka slots) in a Seurat object. For reference, here are some details of the objects involved:; ```; > class(brain); [1] ""Seurat""; attr(,""package""); [1] ""SeuratObject""; > class(image.data); [1] ""VisiumV2""; attr(,""package""); [1] ""Seurat""; ```. It is worth noting that I installed Salmon using the docker image found [here](https://hub.docker.com/r/combinelab/salmon) approximately three months ago. The version number I see is `1.10.3`. Below is my sessionInfo output as well. My best guess is that I have to adjust the object type for `image.data` here to something that can be coerced into a slot in the `brain` Seurat object, but I am not sure what object that should be. Let me know if I am making a simple mistake here too, I am quite rusty with the nuances of R. Thank you for your consideration and I hope to hear from the team soon!. ```; > sessionInfo(); R version 4.3.3 (2024-02-29); Platform: x86_64-conda-linux-gnu (64-bit); Running under: Ubuntu 22.04.4 LT",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/942:1239,layers,layers,1239,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/942,1,['layers'],['layers']
Modifiability,"es 4096 Dec 6 11:40 ..; drwxrwxr-x. 3 modules modules 4096 Dec 6 11:40 include; lrwxrwxrwx. 1 modules modules 5 Dec 6 11:48 lib -> lib64; drwxrwxr-x. 2 modules modules 4096 Dec 6 11:40 lib64. ```. Even after I had hacked up the CMakeLists.txt file to set some of these it still wouldn't build. For instance in that file:; ```; ## Try and find TBB first; if(DEFINED ENV{ROOT_LIBTBB}); message(""ROOT_LIBTBB in env""); set(ROOT_LIBTBB ); set(TBB_DIR $ENV{ROOT_LIBTBB}); set(TBB_INCLUDE_DIRS ${TBB_DIR}/include); set(TBB_INCLUDE_DIR ${TBB_DIR}/include); set(TBB_LIBRARY_DIRS ${TBB_DIR}/lib); set(TBB_LIBRARY ${TBB_DIR}/lib); set(TBB_LIB_DIR ${TBB_DIR}/lib); set(TBB_VERSION ""2019.6""); set(TBB_FOUND TRUE); else(); message(""ROOT_LIBTBB NOT in env""); find_package(TBB 2018.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy); endif(). if (${TBB_FOUND}); ```. But apparently that wasn't enough, because:. ```; cmake \; -DCMAKE_INSTALL_PREFIX:PATH=$TOPDIR \; .. ...; TBB_LIBRARIES = ; -- Configuring done; CMake Error at external/pufferfish/external/twopaco/CMakeLists.txt:11 (add_dependencies):; The dependency target ""tbb"" of target ""graphdump"" does not exist.; ```. This doesn't work obviously, but here are the mods to CMakeLists.txt that I tried:. ```; diff -au CMakeLists.txt.dist CMakeLists.txt; --- CMakeLists.txt.dist 2019-12-06 10:40:58.430641796 -0800; +++ CMakeLists.txt 2019-12-06 13:14:57.292041895 -0800; @@ -387,7 +387,10 @@; ##; set(Boost_ADDITIONAL_VERSIONS ""1.59.0"" ""1.60.0"" ""1.61.0"" ""1.62.0"" ""1.63.0"" ""1.64.0"" ""1.65.0"" ""1.66.0"" ""1.67.0"" ""1.68.0"" ""1.69.0"" ""1.70.0"" ""1.71.0""); if (NOT BOOST_RECONFIGURE); -find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); +set(BOOST_INCLUDEDIR ""/usr/include/boost169""); +set(BOOST_LIBRARYDIR ""/usr/lib64/boost169""); +set(Boost_FOUND 1); +; message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); message(""Boost_FOUND = ${Boost_FOUND}""); @@ -571,7 +574,22 @@; endif(); ; ## ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460:2573,Config,Configuring,2573,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460,1,['Config'],['Configuring']
Modifiability,"esting. $ docker run -it debian:testing. $ apt-get update. $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev. $ git clone https://github.com/COMBINE-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Ins",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1314,config,configuration,1314,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['config'],['configuration']
Modifiability,"ext, those samples have very high rRNA contamination (half of the dataset). Below are my codes (sorry for the snakemake syntax) and mapping results for each method:. **Salmon version:** v1.1.0; <details><summary>Salmon run w/ SFA method</summary>; <p>. ```python; rule salmon_meta:; input:; ref= REFERENCE,; tcp= TRANSCRIPTS; output:; gent= ""results/salmon/decoy/gentrome.fa"",; decoy= ""results/salmon/decoy/decoys.txt"",; bak=""results/salmon/decoy/decoys.txt.bak""; conda:; ""../envs/salmon.yaml""; shell:; """"""; grep ""^>"" {input.ref} | cut -d "" "" -f 1 > {output.decoy}; sed -i.bak -e 's/>//g' {output.decoy}; cat {input.tcp} {input.ref} > {output.gent}; """""". rule salmon_index:; input:; gent= ""results/salmon/decoy/gentrome.fa"",; decoy= ""results/salmon/decoy/decoys.txt"",; output:; directory(""results/salmon/index""); conda:; ""../envs/salmon.yaml""; threads:20; shell:; """"""; salmon index -p {threads} -t {input.gent} -d {input.decoy} -i {output}; """""". if config[""salmon""][""mapping_mode""]:; rule salmon_quant_mapping:; input:; r1=""results/trimmed/{smp}_R1_val_1.fq.gz"",; r2=""results/trimmed/{smp}_R2_val_2.fq.gz"",; index = ""results/salmon/index""; output:; directory(""results/salmon/quant/{smp}_salmon_quant""),; mappings=""results/salmon/quant/{smp}_salmon_quant/{smp}_salmon_mappings""; log:; 		""results/salmon/logs/{smp}.salmon.log""; conda:; ""../envs/salmon.yaml""; threads:20; shell:; """"""; salmon quant -i {input.index} -l A -1 {input.r1} -2 {input.r2} -o {output} --validateMappings --gcBias --seqBias --writeUnmappedNames --writeMappings={output.mappings} -p {threads} --numBootstraps 100; """"""; ```. </p>; </details>. <details><summary>Mapping rates w/ SFA method</summary>; <p>. ![image](https://user-images.githubusercontent.com/42179487/73188783-62605d80-40f1-11ea-87ef-e16050f94e60.png). </p>; </details>. <details><summary>cmd_info.json (SFA)</summary>; <p>. ```json; {; ""salmon_version"": ""1.1.0"",; ""index"": ""results/salmon/index"",; ""libType"": ""A"",; ""mates1"": ""results/trimmed/ILWN_RNAseq_G002_ATCACG_",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/479:1510,config,config,1510,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/479,1,['config'],['config']
Modifiability,"fmd; Version Info: This is the most recent version of salmon.; Exception : [Error: FMD indexing is not supported in this version of salmon.]; /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index was invoked improperly.; For usage information, try /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index --help; Exiting.; #this worked OK; /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type puff. ```; Here is what happens in gdb for the version I built:. ```; gdb --args salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; GNU gdb (GDB) Red Hat Enterprise Linux 8.2-6.el8; Copyright (C) 2018 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.prop",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:1613,config,configured,1613,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['config'],['configured']
Modifiability,"gz; Already downloaded: /Users/Benjamin/Library/Caches/Homebrew/downloads/b27a343a5c5128c674be4986b6c0bb348bc77d521662866976898bd4768fd8bb--salmon-1.3.0.tar.gz; ==> Installing salmon from brewsci/bio; ==> cmake .; Last 15 lines from /Users/Benjamin/Library/Logs/Homebrew/salmon/01.cmake:; Build system will fetch and use JEMalloc; ==================================================================; CPACK_SOURCE_IGNORE_FILES = /src/PCA.cpp;/src/PCAUtils.cpp;/build/;/scripts/AggregateToGeneLevel.py;/scripts/ExpressionTools.py;/scripts/GenerateExpressionFiles.sh;/scripts/ParseSoftFile.py;/scripts/PlotCorrelation.py;/scripts/junk;/scripts/sfstrace.log;/scripts/SFPipeline.py;/bin/;/lib/;/sample_data/;PublishREADMEToWebsite.sh;/external/;/src/obsolete/;/include/obsolete/;WebsiteHeader.txt;/experimental_configs/;.git/; CC: /opt/homebrew/Library/Homebrew/shims/mac/super/clang; CC version: ; version: 1.0.0; Building basic pufferfish components for salmon; setting -DHAVE_NUMERIC_LIMITS128; -- Could NOT find PkgConfig (missing: PKG_CONFIG_EXECUTABLE) ; -- Could NOT find Jemalloc (missing: JEMALLOC_LIBRARY JEMALLOC_INCLUDE_DIR) ; NO_IPO = FALSE; TBB_LIBRARIES = /tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/external/install/lib/libtbb.dylib;/tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/external/install/lib/libtbbmalloc.dylib; -- Configuring incomplete, errors occurred!; See also ""/tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/CMakeFiles/CMakeOutput.log"".; See also ""/tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/CMakeFiles/CMakeError.log"". Do not report this issue to Homebrew/brew or Homebrew/core!. Benjamin@macbook-pro ~ % salmon ; zsh: exec format error: salmon; Benjamin@macbook-pro ~ % ; ```; I try via bioconda but I got a HTTPerror . and by building from source and I don't understand how to do it from the website . How can I do it on macOS Monterey M1 Max chip ? . thanks a lot for you help in advance . Since it's the v 1.3.0 is it possible to update the brew formula to 1.9.0 ?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/787:1595,Config,Configuring,1595,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/787,1,['Config'],['Configuring']
Modifiability,"h and other protected branches ‚Äî this keeps the analysis results on your repository‚Äôs *Security* tab up to date.; * Once a week at a fixed time ‚Äî to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions). #### What types of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to on LGTM.com: we‚Äôve enabled the [`security-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs) for you. #### How do I upgrade my CodeQL engine?; No need! New versions of the CodeQL analysis are constantly deployed on GitHub.com; your repository will automatically benefit from the most recently released version. #### The analysis doesn‚Äôt seem to be working; If you get an error in GitHub Actions that indicates that CodeQL wasn‚Äôt able to analyze your code, please [follow the instructions here](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow) to debug the analysis. #### How do I disable LGTM.com?; If you have LGTM‚Äôs automatic pull request analysis enabled, then you can [follow these steps to disable the LGTM pull request analysis](https://lgtm.com/help/lgtm/managing-automated-code-review#disabling-pr-integration). You don‚Äôt actually need to remove your repository from LGTM.com; it will automatically be remo",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/815:3116,config,configuring-code-scanning,3116,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/815,1,['config'],['configuring-code-scanning']
Modifiability,"h the order that the libraries are specified to gcc in or that gcc needs a `-lz` flag. However I don't even know where that gcc command is coming from. **To Reproduce**. This is difficult, because I would assume that the errors I'm seeing are specific to my machine. However I can say that I ran; ```; ./cmake-3.14.5-Linux-x86_64/bin/cmake -DFETCH_BOOST=TRUE; ```. and then. ```; make; ```. **Expected behavior**; I expected the project to build and produce a binary I could use to test my changes. **Desktop (please complete the following information):**; - OS: Ubuntu 18.04; - Version:. ```; lsb_release -a; No LSB modules are available.; Distributor ID:	Ubuntu; Description:	Ubuntu 18.04.2 LTS; Release:	18.04; Codename:	bionic; kurt@kurtputer:~/Development/refinebio-collab$ uname -a; Linux kurtputer 4.15.0-51-generic #55-Ubuntu SMP Wed May 15 14:27:21 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux; ```. **Additional context**; I was able to fix the following errors with these resolutions:; ```; ERROR:; CMake Error: The following variables are used in this project, but they are set to NOTFOUND.; Please set them or make sure they are set and tested correctly in the CMake files:; CURL_LIBRARY; linked by target ""salmon"" in directory /home/kurt/Development/salmon/src; linked by target ""unitTests"" in directory /home/kurt/Development/salmon/src; RESOLUTION:; sudo apt-get install libcurl4-openssl-dev; ----------------------------------; ERROR:; Performing download step for 'libbz2'; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 227 100 227 0 0 1013 0 --:--:-- --:--:-- --:--:-- 1013; 100 16207 0 16207 0 0 34336 0 --:--:-- --:--:-- --:--:-- 166k; bzip2-1.0.6.tar.gz: FAILED; sha256sum: WARNING: 1 computed checksum did NOT match; bzip2-1.0.6.tar.gz did not match expected SHA256! Exiting.; CMakeFiles/libbz2.dir/build.make:89: recipe for target 'libbz2-prefix/src/libbz2-stamp/libbz2-download' failed; make[2]: *** [libbz2-prefix/src/l",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/383:3182,variab,variables,3182,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/383,1,['variab'],['variables']
Modifiability,"hecking which encoders to build; configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: r",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4194,config,configure,4194,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"here, for instance. What do the flags and qualities represent?. It is just a SAM file without CIGAR strings. The flags have the same (normal) interpretation for SAM records. However the CIGAR strings are not meaningful (apart from what is required for the file to undergo valid processing with samtools). The records additionally contain tags about the number of targets to which a fragment multi-maps, and the alignment score of the read pair to the current target (in the `AS` flag). The records themself are just normal SAM records, but with a trivial CIGAR strong. > More importantly, is there a way to filter the pseudobam files to find the reads corresponding to the counts/NumReads in the quant.sf output file? Do the normal samtools quality and flag filters work to subset e.g. uniquely-mapped reads, or do those concepts not really apply to these pseudobams?. There is no easy way to filter so the above condition is satisfied, as the NumReads are obtained by proportional allocation of the reads according to the underlying probabilistic model of salmon. Specifically, the NumReads column of the quantification file corresponds to summing over the _expectation_ of all of the latent variables that represent fragment to transcript assignment so that, apart from uniquely-mapped reads, there is no way to say that a fragment _definitely_ came from a transcript. However, you should still be able to easily filter out uniquely mapped reads, and you can interpret them in a relatively unambiguous way. Also, you could filter on the `AS` tag as well. For a given read, if there is a single transcript where the `AS` value is much larger than the others for this read, it is overwhelmingly likely that the read originated from the transcript with the unique best `AS` score. @shangguandong1996 : The SAM file _does_ contain positions (and orientations, and alignment scores) for each read. It is simply that the positions are with respect to the transcriptome and not with respect to the genome.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639065653:2438,variab,variables,2438,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639065653,2,['variab'],['variables']
Modifiability,"ically available.; 12 processors are logically available.; Processor type: arm64e (ARM64E); Processors active: 0 1 2 3 4 5 6 7 8 9 10 11; Primary memory available: 64.00 gigabytes; Default processor set: 650 tasks, 3562 threads, 12 processors; Load average: 1.14, Mach factor: 10.84; /bin/machine = unknown; /usr/bin/oslevel = unknown; /bin/universe = unknown. PATH: /Users/jeremybono/miniforge3/bin; PATH: /Users/jeremybono/miniforge3/condabin; PATH: /opt/homebrew/bin; PATH: /opt/homebrew/sbin; PATH: /usr/local/bin; PATH: /System/Cryptexes/App/usr/bin; PATH: /usr/bin; PATH: /bin; PATH: /usr/sbin; PATH: /sbin; PATH: /Users/jeremybono/Downloads/bbmap; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin. ## ----------- ##; ## Core tests. ##; ## ----------- ##. configure:2959: checking build system type; configure:2973: result: arm-apple-darwin22.6.0; configure:2993: checking host system type; configure:3006: result: arm-apple-darwin22.6.0; configure:3066: checking if debugging code should be compiled; configure:3082: result: no; configure:3122: checking which encoders to build; configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:2908,config,configure,2908,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,2,['config'],['configure']
Modifiability,igure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/CommandLineTools/usr/bin/cc; configure:5150: checking for C compiler version; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc --version >&5; Apple clang version 15.0.0 (clang-1500.0.40.1); Target: arm64-apple-darwin22.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; configure:5170: $? = 0; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -v >&5; Apple clang version 15.0.0 (clang-1500.0.40.1); Target: arm64-apple-darwin22.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; configure:5170: $? = 0; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -V >&5; clang: error: argument to '-V' is missing (expected 1 value); clang: error: no input files; configure:5170: $? = 1; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc -qversion >&5; clang: error: unknown argument '-qversion'; did you mean '--version'?; clang: error: no input files; configure:5170: $? = 1; configure:5190: checking whether the C compiler works; configure:5212: /Library/Developer/CommandLineTools/usr/bin/cc conftest.c >&5; ld: library 'System' not found; clang: error: linker command failed with exit code 1 (use -v to see invocation); configure:5216: $? = 1; configure:5254: result: no; configure: failed program was:; | /* confdefs.h ,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:5543,config,configure,5543,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,2,['config'],['configure']
Modifiability,"ild system will compile libgff; ==================================================================; ==================================================================; Build system will compile Staden IOLib; ==================================================================; Build system will fetch SPDLOG; ==================================================================; -- Found PkgConfig: /apps/gentoo/usr/bin/pkg-config (found version ""0.29.2""); -- Found Jemalloc: /apps/gentoo/usr/lib/libjemalloc.so (found version """"); Found Jemalloc library --- using this memory allocator; CPACK_SOURCE_IGNORE_FILES = /src/PCA.cpp;/src/PCAUtils.cpp;/build/;/scripts/AggregateToGeneLevel.py;/scripts/ExpressionTools.py;/scripts/GenerateExpressionFiles.sh;/scripts/ParseSoftFile.py;/scripts/PlotCorrelation.py;/scripts/junk;/scripts/sfstrace.log;/scripts/SFPipeline.py;/bin/;/lib/;/sample_data/;PublishREADMEToWebsite.sh;/external/;/src/obsolete/;/include/obsolete/;WebsiteHeader.txt;/experimental_configs/;.git/; TBB_LIBRARIES = /apps/gentoo/usr/lib/libtbbmalloc_proxy.so;/apps/gentoo/usr/lib/libtbbmalloc.so;/apps/gentoo/usr/lib/libtbb.so; -- Configuring done; CMake Error at src/CMakeLists.txt:158 (add_executable):; Cannot find source file:. $blah/salmon-0.10.2/external/install/src/rapmap/RapMapFileSystem.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at src/CMakeLists.txt:160 (add_executable):; Cannot find source file:. $blah/salmon-0.10.2/external/install/src/rapmap/rank9b.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at src/CMakeLists.txt:158 (add_executable):; No SOURCES given to target: salmon. CMake Error at src/CMakeLists.txt:160 (add_executable):; No SOURCES given to target: unitTests. -- Build files have been written to: $blah/salmon-0.10.2; $blah/salmon-0.10.2 $ make; make: *** No targets specified and no makefile found. Stop.; $blah/salmon-0.10.2 $; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:4909,Config,Configuring,4909,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,1,['Config'],['Configuring']
Modifiability,"improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository ‚Äî take a look! Whilst we've attempted to make use of the existing configuration that you had on LGTM.com, there may be some differences in environment used to build the project. We hope that in most cases it will not require significant changes to achieve a successful analysis. Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation on how to configure a CodeQL workflow. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request ‚Äî to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch and other protected branches ‚Äî this keeps the analysis results on your repository‚Äôs *Security* tab up to date.; * Once a week at a fixed time ‚Äî to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-act",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/815:1562,config,configuring-code-scanning,1562,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/815,2,['config'],"['configure', 'configuring-code-scanning']"
Modifiability,"ing incorrectly_**. Now to my answer(s) and logic:; 1. With fastp, I am not sure if adapter trimming happens first and then quality trimming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondri",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1161,adapt,adapter,1161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['adapt'],['adapter']
Modifiability,"ing which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/CommandLineTools/usr/bin/cc; configure:5150: checking for C compiler version; configure:5159: /Library/Deve",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4327,config,configure,4327,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"inly does seem very low. To answer your specific questions first:; 1) I'm not sure --- let's try tor find out; 2) I don't think so (if they are part of your index, they should be aligned against); 3) If there are many transcripts / targets you expect to be sequenced but which aren't present in this set, that can affect the mapping rate, but not likely to take it down to 6%. Here are the things I'd investigate --- roughly in order: . 1) In addition to the fraction of reads STAR mapped (which you report above), what fraction of the reads are assigned to features by featureCounts? In some cases, when there is a failure of rRNA depletion of polyA selection, you can end up with an experiment where most of the sequenced RNA comes from rRNA not present in the reference transcriptome. In this case, STAR will be able to align the reads to the genome, but you won't see these reads mapping to annotated features (and you also won't see them showing up in your transcript level quantifications). So, it may be worth to take a look at the count of reads assigned to the feature set of genes by featureCounts. 2) Above, it looks like a considerable number of fragments were discarded due to no alignment reaching the required alignment score (`11,448,458` fragments discarded because of this). Have you tried to adapter / quality trim the data? Does this have any effect on the mapping rate?. 3) If the above don't reveal any clues, I'd be happy to try to take a look at the data if you can share it. I'd be quite surprised if STAR is aligning a lot of reads *to transcriptome features* that are being missed by salmon. Nonetheless, if you pass the proper flags to STAR (including `--quantMode TranscriptomeSAM`), then you can use the SAM/BAM file generated by STAR to perform quantification with salmon (i.e. use STAR's alignments to do _transcript-level_ quantification). I'd be happy to help dig further on any of these, so please feel free to reach out if you find anything interesting. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054:1381,adapt,adapter,1381,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054,1,['adapt'],['adapter']
Modifiability,"ir='${docdir}'; includedir='${prefix}/include'; infodir='${datarootdir}/info'; install_sh='${SHELL} /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/build-aux/install-sh'; libdir='${exec_prefix}/lib'; libexecdir='${exec_prefix}/libexec'; localedir='${datarootdir}/locale'; localstatedir='${prefix}/var'; mandir='${datarootdir}/man'; mkdir_p='$(MKDIR_P)'; oldincludedir='/usr/include'; pdfdir='${docdir}'; prefix='/Users/jeremybono/Downloads/salmon-1.10.1/external/install'; program_transform_name='s,x,x,'; psdir='${docdir}'; sbindir='${exec_prefix}/sbin'; sharedstatedir='${prefix}/com'; sysconfdir='${prefix}/etc'; target_alias=''; xz=''. ## ----------- ##; ## confdefs.h. ##; ## ----------- ##. /* confdefs.h */; #define PACKAGE_NAME ""XZ Utils""; #define PACKAGE_TARNAME ""xz""; #define PACKAGE_VERSION ""5.2.2""; #define PACKAGE_STRING ""XZ Utils 5.2.2""; #define PACKAGE_BUGREPORT ""lasse.collin@tukaani.org""; #define PACKAGE_URL ""http://tukaani.org/xz/""; #define NDEBUG 1; #define HAVE_ENCODER_LZMA1 1; #define HAVE_ENCODER_LZMA2 1; #define HAVE_ENCODER_DELTA 1; #define HAVE_ENCODER_X86 1; #define HAVE_ENCODER_POWERPC 1; #define HAVE_ENCODER_IA64 1; #define HAVE_ENCODER_ARM 1; #define HAVE_ENCODER_ARMTHUMB 1; #define HAVE_ENCODER_SPARC 1; #define HAVE_DECODER_LZMA1 1; #define HAVE_DECODER_LZMA2 1; #define HAVE_DECODER_DELTA 1; #define HAVE_DECODER_X86 1; #define HAVE_DECODER_POWERPC 1; #define HAVE_DECODER_IA64 1; #define HAVE_DECODER_ARM 1; #define HAVE_DECODER_ARMTHUMB 1; #define HAVE_DECODER_SPARC 1; #define HAVE_MF_HC3 1; #define HAVE_MF_HC4 1; #define HAVE_MF_BT2 1; #define HAVE_MF_BT3 1; #define HAVE_MF_BT4 1; #define HAVE_CHECK_CRC32 1; #define HAVE_CHECK_CRC64 1; #define HAVE_CHECK_SHA256 1; #define ASSUME_RAM 128; #define PACKAGE ""xz""; #define VERSION ""5.2.2"". configure: exit 77; ""5.2.2"". configure: exit 77. Steps and data to reproduce the behavior:; salmon-1.10.1/cmake -DFETCH_BOOST=TRUE; make. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:16748,config,configure,16748,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,2,['config'],['configure']
Modifiability,"isabling range-factorized equivalence classes. ; [2021-05-19 18:46:25.303] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-19 18:46:25.303] [jointLog] [info] parsing read library format; [2021-05-19 18:46:25.303] [jointLog] [info] There is 1 library.; [2021-05-19 18:46:25.429] [jointLog] [info] Loading pufferfish index; [2021-05-19 18:46:25.429] [jointLog] [info] Loading dense pufferfish index.; [2021-05-19 18:46:27.087] [jointLog] [info] done; [2021-05-19 18:46:27.087] [jointLog] [info] Index contained 141,069 targets; [2021-05-19 18:46:32.618] [jointLog] [info] Number of decoys : 0; [2021-05-19 18:46:33.428] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-19 18:49:27.444] [jointLog] [error] . [2021-05-19 18:49:27.506] [jointLog] [error] Processing reads : Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid. ```; For rabbitQC's log; ```; Detecting adapter sequence for read1...; CCCAGCCATAACACAGTATCAAACTCCACTATTTGTCTGATCCGTACTTATTACAGCCGT. Detecting adapter sequence for read2...; CCAACTTGGTCTACAAGACGCCACATCCCCTATTATAGAAGAGCTAATAAATTTCCATGA. Read1 before filtering:; total reads: 44178187; total bases: 2140649565; Q20 bases: 1899503304(88.7349%); Q30 bases: 1839878933(85.9496%). Read1 after filtering:; total reads: 34172299; total bases: 1775386278; Q20 bases: 1762557969(99.2774%); Q30 bases: 1737891531(97.8881%). Read2 before filtering:; total reads: 44178187; total bases: 2233386484; Q20 bases: 2180294210(97.6228%); Q30 bases: 2141791820(95.8988%). Read2 aftering filtering:; total reads: 34172299; total bases: 1749324083; Q20 bases: 1731172028(98.9623%); Q30 bases: 1700577336(97.2134%). Filtering result:; reads passed filter: 68344598; reads failed due to low quality: 11353966; reads failed due to too many N: 40048; reads failed due to too short: 8617762; reads with adapter trimmed: 382600; bases trimmed due to adapters: 6",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660:2507,adapt,adapter,2507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660,1,['adapt'],['adapter']
Modifiability,"itHub, but after adding `autoreconf -i` to the `CONFIGURE_COMMAND`, this leads to the same problem. ``` diff; --- salmon-0.4.2/CMakeLists.txt.orig 2015-06-15 02:31:09.000000000 +0200; +++ salmon-0.4.2/CMakeLists.txt 2015-08-18 21:13:29.684010359 +0200; @@ -357,14 +366,14 @@; message(""==================================================================""); ExternalProject_Add(libjellyfish; DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external; - URL ftp://ftp.genome.umd.edu/pub/jellyfish/jellyfish-2.1.3.tar.gz; - SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.1.3; + URL https://github.com/gmarcais/Jellyfish/releases/download/v2.2.3/jellyfish-2.2.3.tar.gz; + SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.3; INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install; - CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.1.3/configure --prefix=<INSTALL_DIR> CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}; + CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/external/jellyfish-2.2.3/configure --prefix=<INSTALL_DIR> CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}; BUILD_COMMAND ${MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${JELLYFISH_CXX_FLAGS}; BUILD_IN_SOURCE 1; INSTALL_COMMAND make install && ; - cp config.h <INSTALL_DIR>/include/jellyfish-2.1.3/jellyfish/ &&; + cp config.h <INSTALL_DIR>/include/jellyfish-2.2.3/jellyfish/ &&; cp config.h <INSTALL_DIR>/include/; ). --- salmon-0.4.2/src/CMakeLists.txt.orig 2015-08-18 21:21:14.892734948 +0200; +++ salmon-0.4.2/src/CMakeLists.txt 2015-08-18 21:20:51.292295094 +0200; @@ -42,7 +42,7 @@; ${GAT_SOURCE_DIR}/external; ${GAT_SOURCE_DIR}/external/cereal/include; ${GAT_SOURCE_DIR}/external/install/include; -${GAT_SOURCE_DIR}/external/install/include/jellyfish-2.1.3; +${GAT_SOURCE_DIR}/external/install/include/jellyfish-2.2.3; ${GAT_SOURCE_DIR}/external/install/include/bwa; ${ZLIB_INCLUDE_DIR}; ${TBB_INCLUDE_DIRS}; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/11:2176,config,configure,2176,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/11,4,['config'],"['config', 'configure']"
Modifiability,"ld be compiled; configure:3082: result: no; configure:3122: checking which encoders to build; configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3213: checking which decoders to build; configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: res",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4133,config,configure,4133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"le; running configure, to aid debugging if configure makes a mistake. It was created by XZ Utils configure 5.2.2, which was; generated by GNU Autoconf 2.69. Invocation command line was. $ /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/configure --prefix=/Users/jeremybono/Downloads/salmon-1.10.1/external/install CC=/Library/Developer/CommandLineTools/usr/bin/cc CXX=/Library/Developer/CommandLineTools/usr/bin/c++ CFLAGS= CPPFLAGS= LDFLAGS=. ## --------- ##; ## Platform. ##; ## --------- ##. hostname = Jeremys-Mac-Studio.local; uname -m = arm64; uname -r = 22.6.0; uname -s = Darwin; uname -v = Darwin Kernel Version 22.6.0: Wed Jul 5 22:21:53 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6020. /usr/bin/uname -p = arm; /bin/uname -X = unknown. /bin/arch = unknown; /usr/bin/arch -k = unknown; /usr/convex/getsysinfo = unknown; /usr/bin/hostinfo = Mach kernel version:; 	 Darwin Kernel Version 22.6.0: Wed Jul 5 22:21:53 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6020; Kernel configured for up to 12 processors.; 12 processors are physically available.; 12 processors are logically available.; Processor type: arm64e (ARM64E); Processors active: 0 1 2 3 4 5 6 7 8 9 10 11; Primary memory available: 64.00 gigabytes; Default processor set: 650 tasks, 3562 threads, 12 processors; Load average: 1.14, Mach factor: 10.84; /bin/machine = unknown; /usr/bin/oslevel = unknown; /bin/universe = unknown. PATH: /Users/jeremybono/miniforge3/bin; PATH: /Users/jeremybono/miniforge3/condabin; PATH: /opt/homebrew/bin; PATH: /opt/homebrew/sbin; PATH: /usr/local/bin; PATH: /System/Cryptexes/App/usr/bin; PATH: /usr/bin; PATH: /bin; PATH: /usr/sbin; PATH: /sbin; PATH: /Users/jeremybono/Downloads/bbmap; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin; PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin. ## ----------- ##; ## Core tests. ##; ## --",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:1892,config,configured,1892,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configured']
Modifiability,"line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir : /usr/local/Caskroom/miniforge/base/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/conda-forge/osx-arm64; https://conda.anaconda.org/conda-forge/noarch; package cache : /usr/local/Caskroom/miniforge/base/pkgs; /Users/Benjamin/.conda/pkgs; envs directories : /usr/local/Caskroom/miniforge/base/envs; /Users/Benjamin/.conda/envs; platform : osx-arm64; user-agent : conda/4.12.0 requests/2.27.1 CPython/3.9.13 Darwin/21.5.0 OSX/12.4; UID:GID : 501:20; netrc file : None; offline mode : False. An unexpected error has occurred. Conda has prepared the above report. If submitted, this report will be used by core maintainers to improve; future releases of conda.; Would you like co",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:5372,config,config,5372,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['config'],['config']
Modifiability,"ling on a mac studio (M2 max) running Ventura. . The first issue I run into is that my understanding of the instructions suggests that I should be in the ""build"" directory when I run cmake. However, if I do that it returns an error about CMakeLists.txt not being in that location. I noticed that is in the salmon directory so I ran cmake from there and it seemed to work fine. But, I'm not sure if that is leading to the problems I am having downstream. . The second issue is when I run make I get an error associated with configuring liblzma (error 77). I have pasted the console log below. I appreciate any suggestions and apologize if I missed something obvious. . This file contains any messages produced by compilers while; running configure, to aid debugging if configure makes a mistake. It was created by XZ Utils configure 5.2.2, which was; generated by GNU Autoconf 2.69. Invocation command line was. $ /Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2/configure --prefix=/Users/jeremybono/Downloads/salmon-1.10.1/external/install CC=/Library/Developer/CommandLineTools/usr/bin/cc CXX=/Library/Developer/CommandLineTools/usr/bin/c++ CFLAGS= CPPFLAGS= LDFLAGS=. ## --------- ##; ## Platform. ##; ## --------- ##. hostname = Jeremys-Mac-Studio.local; uname -m = arm64; uname -r = 22.6.0; uname -s = Darwin; uname -v = Darwin Kernel Version 22.6.0: Wed Jul 5 22:21:53 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6020. /usr/bin/uname -p = arm; /bin/uname -X = unknown. /bin/arch = unknown; /usr/bin/arch -k = unknown; /usr/convex/getsysinfo = unknown; /usr/bin/hostinfo = Mach kernel version:; 	 Darwin Kernel Version 22.6.0: Wed Jul 5 22:21:53 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6020; Kernel configured for up to 12 processors.; 12 processors are physically available.; 12 processors are logically available.; Processor type: arm64e (ARM64E); Processors active: 0 1 2 3 4 5 6 7 8 9 10 11; Primary memory available: 64.00 gigabytes; Default processor set: 650 tasks, 35",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:1141,config,configure,1141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Modifiability,"ll' failed; make: *** [all] Error 2. **To Reproduce**; Steps and data to reproduce the behavior:; 1. run a docker container using ubuntu:18.04 as image. 2. (packages I installed); apt-get install -y gcc g++ make wget git curl libtbb2-dbg libtbb-dev unzip zlib1g-dev libcurl4-openssl-dev liblzma-dev libbz2-dev libcereal-dev libgff-dev libpkgconfig-perl libjemalloc-dev; /*; gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0; g++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0; GNU Make 4.1; */; wget https://github.com/Kitware/CMake/releases/download/v3.13.4/cmake-3.13.4-Linux-x86_64.sh /*cmake version 3.13.4*/. 3. git clone https://github.com/COMBINE-lab/salmon.git; I'm at the top commit: commit 0813a0a287c2bd80071511830befe5d786a59ad1 (HEAD -> master, tag: v1.4.0, origin/master, origin/HEAD). 4. In directory salmon/build, I type; cmake -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR=/usr/include -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../stage .. =============At last, getting these:; -- Configuring done; -- Generating done; -- Build files have been written to: /root/salmon/build. 5. In directory salmon/build, I type; make. ===========Then crashed here; [ 86%] Built target unitTests; Scanning dependencies of target salmon; [ 86%] Building CXX object src/CMakeFiles/salmon.dir/EMUtils.cpp.o; c++: error: -pg and -fomit-frame-pointer are incompatible; src/CMakeFiles/salmon.dir/build.make:62: recipe for target 'src/CMakeFiles/salmon.dir/EMUtils.cpp.o' failed; make[2]: *** [src/CMakeFiles/salmon.dir/EMUtils.cpp.o] Error 1; CMakeFiles/Makefile2:790: recipe for target 'src/CMakeFiles/salmon.dir/all' failed; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; Makefile:162: recipe for target 'all' failed; make: *** [all] Error 2. Specifically, please provide at least the following information:. * Which version of salmon was used? v1.4.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? compiled; * Which reference (e.g. transcriptome) was used? Encountered compile error, s",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/608:1695,Config,Configuring,1695,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/608,1,['Config'],['Configuring']
Modifiability,"mming OR vice-versa. I could not find info on this from their README and **_I could be wrong here with my next line_** - [Based on Figure 1 of this paper, it looks to me as though quality trimming is done before adapter trimming](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6129281/figure/bty560-F1/). - [To quote Brian Bushnell (author of BBTools)]( http://seqanswers.com/forums/showpost.php?p=140819&postcount=5), . > It's best to do adapter-trimming first, then quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1324,adapt,adapters,1324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,2,['adapt'],['adapters']
Modifiability,"n/cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_NO_BOOST_CMAKE=BOOL:ON -DBOOST_LIBRARYDIR=/usr/lib64 -DBOOST_INCLUDEDIR=/usr/include/boost157 ../CMakeLists.txt' >try_cmake.log 2>&1 &; `. Then tried to build it. ```; cd ..; nice scl enable devtoolset-4 'make' >build_2018_06_13d.log 2>&1 &. ```. It failed at this command because of missing boost symbols in a link operation, my reading is that the command does not include anything to link boost libraries. So telling cmake where the libraries are, where the include files are, and that boost was found was not sufficient. There must be some other set of symbols which need to be defined. `/opt/rh/devtoolset-4/root/usr/bin/c++ -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -rdynamic CMakeFiles/unitTests.dir/__/tests/UnitTests.cpp.o CMakeFiles/unitTests.dir/FragmentLengthDistribution.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/rank9b.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/bit_array.c.o -o unitTests -L/home/mathog/src/salmon/lib -L/home/mathog/src/salmon/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" libsalmon_core.a libalevin_core.a -lgff -lpthread ../external/install/lib/libstaden-read.a -lz ../external/install/lib/libdivsufsort.a ../external/install/lib/libdivsufsort64.a ../external/install/lib/libbwa.a -lm -llzma -lbz2 -l",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719:2163,variab,variable,2163,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719,2,['variab'],['variable']
Modifiability,"naseq-Trinity-v2.6.6/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; Process_cmd::process_cmd(""salmon --no-version-check quant -i /home/federicoplazzi/test_""...) called at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/salmon_runner.pl line 26; Trinity run failed. Must investigate error above.; warning, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../Trinity --single ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa"" --output ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out"" --CPU 1 --max_memory 1G --run_as_paired --SS_lib_type F --seqType fa --trinity_complete --full_cleanup failed with ret: 512, going to retry.; succeeded(0), failed(1) 100% completed. We are sorry, commands in file: [FailedCommands] failed. :-(. Error, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/ParaFly -c recursive_trinity.cmds -CPU 4 -v -shuffle died with ret 256 at /usr/local/bin/Trinity line 2581.; main::process_cmd(""/usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/P""...) called at /usr/local/bin/Trinity line 3244; main::run_partitioned_cmds(""recursive_trinity.cmds"") called at /usr/local/bin/Trinity line 2239; main::run_recursive_trinity(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/ch""...) called at /usr/local/bin/Trinity line 2001; main::run_chrysalis(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/in""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., 200, 500, ""RF"", ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""...) called at /usr/local/bin/Trinity line 1664; main::run_Trinity() called at /usr/local/bin/Trinity line 1317; eval {...} called at /usr/local/bin/Trinity line 1316. Trinity run failed. Must investigate error above.; ```. Do you have any suggestions?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:3254,plugin,plugins,3254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['plugin'],['plugins']
Modifiability,"ndefined reference to `boost::program_options::abstract_variables_map::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const'; libsalmon_core.a(SalmonUtils.cpp.o): In function `salmon::utils::validateOptionsMapping_(SalmonOpts&, boost::program_options::variables_map&)':; SalmonUtils.cpp:(.text+0xd13f): undefined reference to `boost::program_options::abstract_variables_map::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const'; libsalmon_core.a(SalmonUtils.cpp.o): In function `salmon::utils::processQuantOptions(SalmonOpts&, boost::program_options::variables_map&, int)':; SalmonUtils.cpp:(.text+0xeb97): undefined reference to `boost::program_options::abstract_variables_map::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const'; SalmonUtils.cpp:(.text+0xec0a): undefined reference to `boost::program_options::abstract_variables_map::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const'; libsalmon_core.a(SalmonUtils.cpp.o):SalmonUtils.cpp:(.text+0xf846): more undefined references to `boost::program_options::abstract_variables_map::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const' follow; collect2: error: ld returned 1 exit status; make[2]: *** [src/unitTests] Error 1; make[1]: *** [src/CMakeFiles/unitTests.dir/all] Error 2; make: *** [all] Error 2. I have the following environment variables set:. INCLUDE=/opt/boost-1.67.0/include:/opt/gcc-8.2.0/include; C_INDLUE_PATH=/opt/boost-1.67.0/include; LD_LIBRARY_PATH=/opt/boost-1.67.0/lib:/opt/gcc-8.2.0/lib64:/opt/gcc-8.2.0/lib/gcc/x86_64-pc-linux-gnu/8.2.0; CPLUS_INCLUDE_PATH=/opt/boost-1.67.0/include:/opt/gcc-8.2.0/include; CXX=/opt/gcc-8.2.0/bin/g++; CC=/opt/gcc-8.2.0/bin/gcc. My cmake command was simply cmake -DCMAKE_INSTALL_PREFIX:PATH=/opt/salmon ../. Thanks!. -Nate",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309:2338,variab,variables,2338,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309,1,['variab'],['variables']
Modifiability,"nt-697125235) in other mapping issue reports, it's possible that there could be multiple fragments in those numbers that contribute to a single read, meaning the unaccounted number is probably higher:. > The number you are looking at is the number of discarded mappings, not the number of discarded fragments. The difference is that every fragment can have many potential mappings. The number you are looking at is the total number of attempted alignments that failed to achieve the threshold score. Luckily, salmon reports both numbers. The number of fragments for which all alignments failed to reach the score threshold is 4,196,417; given in aux_info.json by ""num_fragments_filtered_vm"": 4196417. One point to note is that these are all fragments for which mapping is attempted (they had at least one k-mer match the reference), but no alignment was valid up to the threshold. You could try running the quantification again with --softclip to allow softclipping of the reads and see if any considerable fraction of these 4196417 failed to align because they overhang the annotated transcripts or contain adapters etc. Nonetheless, even if all of these mapped, the rate would still be ~72%. The remainder of the reads didn't even have a matching k-mer in common with the reference transcriptome, which means they are exceedingly unlikely to have come from the transcripts that were indexed. Further explanation of what these metadata numbers mean would be very helpful to me. Also useful would be a statistic (or more than one statistic) that fully categorises the read alignments or non-alignments. **Desktop (please complete the following information):**; - OS: Debian; - `uname-a`: Linux musculus 6.7.9-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.7.9-2 (2024-03-13) x86_64 GNU/Linux; - `lsb_release -a`; ```; No LSB modules are available.; Distributor ID: Debian; Description: Debian GNU/Linux trixie/sid; Release: n/a; Codename: trixie; ```. **Additional context**. I'm not really after an explanatio",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/925:8741,adapt,adapters,8741,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/925,1,['adapt'],['adapters']
Modifiability,"nt; ReadExperimentT = ReadExperiment<EquivalenceClassBuilder<TGValue> >; size_t = long unsigned int]::__lambda33}) (fastx_parser::FastxParser<fastx_parser::ReadSeq>*&)‚Äô; get_deleter()(__p);; ^; /opt/build/salmon/src/SalmonQuantify.cpp:1964:39: note: candidate is:; auto parserPtrDeleter = [&salmonOpts](auto* p) -> void {; ^; /opt/build/salmon/src/SalmonQuantify.cpp:1964:53: note: processReadLibrary(ReadExperimentT&, ReadLibrary&, SalmonIndex*, std::vector<Transcript>&, ClusterForest&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&, bool, std::atomic<bool>&, ForgettingMassCalculator&, FragmentLengthDistribution&, SalmonOpts&, double, bool, std::mutex&, size_t, std::vector<std::vector<AlignmentGroup<AlnT> > >&, volatile bool&) [with AlnT = rapmap::utils::QuasiAlignment; ReadExperimentT = ReadExperiment<EquivalenceClassBuilder<TGValue> >; size_t = long unsigned int]::__lambda33; auto parserPtrDeleter = [&salmonOpts](auto* p) -> void {; ^; /opt/build/salmon/src/SalmonQuantify.cpp:1964:53: note: candidate expects 0 arguments, 1 provided; make[2]: *** [src/CMakeFiles/salmon.dir/SalmonQuantify.cpp.o] Error 1; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; make: *** [all] Error 2`. * Which version of salmon was used?; Salmon 0.3.2; * How was salmon installed (compiled, downloaded executable, through bioconda)?; Cloned from git as latest source and attempted to cmake + make && make install . **Expected behavior**; A clear and concise description of what you expected to happen.; Expecting the makefile to use c++14 correctly to process the ""auto p"" variable the way it is intended within the template functions. See SalmonQuantify.cpp:1964 with errors regarding ""p was not declared in this scope"". . **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; Centos 7 ; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; 7.4",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296:50080,variab,variable,50080,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296,1,['variab'],['variable']
Modifiability,"nzen 36540416 Mar 3 11:00 core.39485; -rw-rw-r-- 1 amonaco_m hpc-ag-zinzen 0 Mar 3 11:00 logs; (salmon) [amonaco_m@med0113 1_bootstrappedAlevin]$ ls -al alevin; total 1; drwxrwxr-x 2 amonaco_m hpc-ag-zinzen 4096 Mar 3 11:00 .; drwxrwxr-x 3 amonaco_m hpc-ag-zinzen 4096 Mar 3 11:00 ..; -rw-rw-r-- 1 amonaco_m hpc-ag-zinzen 0 Mar 3 11:00 alevin.log; ```. I have used Salmon Alevin before on this dataset - without the bootstrap option - while providing the Cell Ranger whitelisted barcodes, and everything has gone smoothly (same script as below, commented out line). I have tried increasing the allotted memory and thread number as well, but with no change in outcome. Have you ever encountered something like this or could address me to where the issue may be (I'm assuming something to do with the bootstrap)?. *****Script I submit:*****; ```; #!/bin/bash; # expected run time ; #SBATCH --time=24:00:00 ; # Combine stderr and stdout log files into the stdout log file.; #SBATCH -o without -e; # Keep current environment variables.; #SBATCH --export=variables; # number of cores; #SBATCH -n 30; # expected memory to be used; #SBATCH ‚Äîmem=50000; # Specify queue via expected length of job. ; #SBATCH --partition=medium; # Set the log directory.; #SBATCH -o logs. ####declarations; conda activate salmon. Read1=$1 # fastq file - CB+UMI; Read2=$2 # fastq file - insert read; index=$3 # directory from salmon index; outDir=$4 # output directory; tsv=$5 # tsv containing txp-gene-id pairs; whitelist=$6 # cell ranger output barcodes. salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist --numCellBootstraps 20 --dumpFeatures. #salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist. ```. Thank you in advance!; Anna. -------------------------; Additional FYI:; ```; (salmon) [amonaco_m@med0113 1_bootstrappedAlevin]$ salmon version; Version Info: This is the most recent version of s",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/636:1742,variab,variables,1742,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/636,1,['variab'],['variables']
Modifiability,"oduce**; First, I put the UMI in front of the barcode.; `zcat R2.fastq.gz | paste - - - - | awk '{print $1"" ""$2""\n""substr($3,9,8)substr($3,1,8)substr($3,17)""\n""$4""\n""$5}' | pigz -p8 > R2_Alevin.fq.gz`. then, I run Alevin with:; `salmon alevin -lA -i ref_genome/index/ --barcodeLength 8 --umiLength 8 --end 5 -1 fq/R2_Alevin.fq.gz -2 fq/R1.fastq.gz -p 8 --tgMap ref_genome/gencode.vM20.tx2gene.tsv -o alevin_out --dumpUmiGraph --dumpFeatures --dumpCsvCounts --whitelist BC.whitelist`. This seems to work: the library is 47M and the _filtered_cb_frequency.txt_ contains 43M assigned barcodes in total. The _MappedUmi.txt_ contains 18.5M UMIs, fitting perfectly with the reported alignment rate of ~40% (which is relatively low, but OK for this library). Also if I use the `--dumpfq` option, the barcodes and UMIs are nicely attached to the sequencing reads. Strangely, if I sum the entries in the CSV or binary quant matrix, I get ~3.75M reads. ; ; I was able to run the 10x PBMC4k example and there, the sum of the count matrix entries indeed fitted the reported UMI counts and mapping rate. . Specifically, please provide at least the following information:. * Which version of salmon was used?; salmon 0.13.1. * How was salmon installed (compiled, downloaded executable, through bioconda)?; downloaded executable and bioconda give the same result. * Which reference (e.g. transcriptome) was used?; mouse gencode vM20 (mm10). * Which read files were used?; adapted celseq2 protocol. * Which program options were used?; See above. **Expected behavior**; I expected a total of 18.5M counts in the quant matrix, where the sums per barcode fit those reported in the _MappedUmi.txt_ Is my assumption that the quant matrix should only contain integers correct?. **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem. **Desktop (please complete the following information):**; Ubuntu 18.04.1 LTS. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361:1917,adapt,adapted,1917,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361,1,['adapt'],['adapted']
Modifiability,"omatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is simply to align one of these samples to the genome with a tool like STAR or HISAT2 and look at their mapping rate to known features. If it's similar, then the other reads could be accounted for by e.g. intron retention or even contamination. Finally, [@vals has an excellent series of blog posts on investigating and addressing low mapping rates](http://www.nxn.se/valent/2017/9/18/low-mapping-rate-5-human-dna-contamination); - bbmap Command ([based of this biostars post](https://www.biostars.org/p/143019/#210890)):; `bbmap.sh in=read_1.fq.gz ref=rRNA_Chlor_Mito.fa maxindel=1 minid=0.95 outu=clean_read_1.fq.gz nodisk`; - Strategy:; `use the rRNA+Mito+Chloroplast file and map the reads using bbmap, then collect the unmapped reads (clean_read_1.fq.gz) for my downstream analysis`. 2. **_STEP 2 - run bbduk.sh on the outu files from bbmap step -- the outu stands for output unmapped - as stated in the logic above, anything that is unmapped to the rRNA_Chlor_Mito.fa is a clean read for downstream analysis_**. I use bbduk with adapter trimming and quality trimming in same command line - also, the adapters.fa file that ships with BBTools can be used in all runs. Hope that helps.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:3423,adapt,adapter,3423,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['adapt'],"['adapter', 'adapters']"
Modifiability,"oper/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; checking whether the C compiler works... yes; checking for C compiler default output file name... a.out; checking for suffix of executables...; checking whether we are cross compiling... configure: error: in `/Users/gabriel/Proje",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:2056,config,configure,2056,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['config'],['configure']
Modifiability,"ot:. You might have heard that we‚Äôve integrated LGTM‚Äôs underlying CodeQL analysis engine natively into GitHub. The result is [**GitHub code scanning**](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)!. With LGTM fully integrated into code scanning, we are focused on improving CodeQL within the native GitHub code scanning experience. In order to take advantage of current and future improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository ‚Äî take a look! Whilst we've attempted to make use of the existing configuration that you had on LGTM.com, there may be some differences in environment used to build the project. We hope that in most cases it will not require significant changes to achieve a successful analysis. Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation on how to configure a CodeQL workflow. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request ‚Äî to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/815:1212,config,configuration,1212,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/815,1,['config'],['configuration']
Modifiability,"p TBB CMakeCache.txt; //TBB debug library directory; TBB_DEBUG_LIBRARY_DIRS:PATH=; TBB_INCLUDE_DIR:PATH=/home/ryan/src/salmon/external/install/include; //TBB include directory; TBB_INCLUDE_DIRS:PATH=/home/ryan/src/salmon/external/install/include; TBB_LIBRARY:FILEPATH=/home/ryan/src/salmon/external/install/lib/libtbb.so; TBB_LIBRARY_DEBUG:FILEPATH=TBB_LIBRARY_DEBUG-NOTFOUND; //TBB library directory; TBB_LIBRARY_DIRS:PATH=/home/ryan/src/salmon/external/install/lib; TBB_MALLOC_LIBRARY:FILEPATH=/home/ryan/src/salmon/external/install/lib/libtbbmalloc.so; TBB_MALLOC_LIBRARY_DEBUG:FILEPATH=TBB_MALLOC_LIBRARY_DEBUG-NOTFOUND; TBB_RECONFIGURE:UNINITIALIZED=TRUE; TBB_WILL_RECONFIGURE:UNINITIALIZED=FALSE; //ADVANCED property for variable: TBB_DEBUG_LIBRARY_DIRS; TBB_DEBUG_LIBRARY_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_INCLUDE_DIR; TBB_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_INCLUDE_DIRS; TBB_INCLUDE_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY; TBB_LIBRARY-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY_DEBUG; TBB_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY_DIRS; TBB_LIBRARY_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_MALLOC_LIBRARY; TBB_MALLOC_LIBRARY-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_MALLOC_LIBRARY_DEBUG; TBB_MALLOC_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; ```. Also, here's the output of every hardware/OS reporting command I can think of:. ```; $ cat /proc/cpuinfo; processor : 0; vendor_id : GenuineIntel; cpu family : 6; model : 63; model name : Intel(R) Xeon(R) CPU E5-2623 v3 @ 3.00GHz; stepping : 2; microcode : 0x36; cpu MHz : 3300.000; cache size : 10240 KB; physical id : 0; siblings : 8; core id : 0; cpu cores : 4; apicid : 0; initial apicid : 0; fpu : yes; fpu_exception : yes; cpuid level : 15; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36; clflush dts a",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266953657:813,variab,variable,813,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266953657,8,['variab'],['variable']
Modifiability,"p.so.1 (0x00007f859a7e7000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f859a5df000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f859a2de000); libgcc_s.so.1 => /u/user/local/lib64/libgcc_s.so.1 (0x00007f859a0c8000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8599d1d000); /lib64/ld-linux-x86-64.so.2 (0x00007f859b286000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:1870,config,configure,1870,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['config'],['configure']
Modifiability,"p:256:32: error: ‚Äòclass RapMapSAIndex<long int, spp::sparse_hash_map<long unsigned int, rapmap::utils::SAInterval<long int>, rapmap::utils::KmerKeyHasher, std::equal_to<long unsigned int>, spp::libc_allocator<std::pair<const long unsigned int, rapmap::utils::SAInterval<long int> > > > >‚Äô has no member named ‚ÄòisDecoy‚Äô; decoy = quasiIndex64_->isDecoy(tid);; .../salmon/include/SalmonIndex.hpp:260:43: error: ‚Äòclass RapMapSAIndex<int, FrugalBooMap<long unsigned int, rapmap::utils::SAInterval<int> > >‚Äô has no member named ‚ÄòisDecoy‚Äô; decoy = quasiIndexPerfectHash32_->isDecoy(tid);; .../salmon/include/SalmonIndex.hpp:262:32: error: ‚Äòclass RapMapSAIndex<int, spp::sparse_hash_map<long unsigned int, rapmap::utils::SAInterval<int>, rapmap::utils::KmerKeyHasher, std::equal_to<long unsigned int>, spp::libc_allocator<std::pair<const long unsigned int, rapmap::utils::SAInterval<int> > > > >‚Äô has no member named ‚ÄòisDecoy‚Äô; decoy = quasiIndex32_->isDecoy(tid);; ```. In investigating this further, it appears that the version of RapMap being downloaded and compiled (release salmon-v0.14.1, according to scripts/fetchRapMap.sh) is missing the commit that introduced the isDecoy() function for the RapMapSAIndex class (what appears to be commit COMBINE-lab/RapMap@152ed9026005f4a823988c4893386079aa663a53, with changes in COMBINE-lab/RapMap@55ef430ec8c3b130666c8f3855073a79c6236fb4 on the develop-salmon branch). (Also, was it intentional that two releases of RapMap were made on the same commit? Both salmon-v0.14.0 and salmon-v0.14.1 releases appear to have been made on commit COMBINE-lab/RapMap@89dbe45481dac12ac8cffd6d5d924699c5ad7e04.). Adjusting the fetchRapMap.sh script to use the SVER and EXPECTED_SHA256SUM variables back to their values in commit COMBINE-lab/salmon@cf07385f2164698eda5b9869dd4865fec747840d, then re-running the script, and recompiling produces no errors, and the tests all run. Hope that helps, and thanks for all your work in developing Salmon!. Best regards,; Patrick Reilly",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/418:2108,variab,variables,2108,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/418,1,['variab'],['variables']
Modifiability,"path/to/logs/%x_%j.out; #SBATCH --ntasks=6; #SBATCH --time=02:00:00; #SBATCH --cpus-per-task=2; #SBATCH --mem-per-cpu=30G; module load parallel # parallel/20150822-GCC-4.9.2; module load Anaconda3/2022.05; conda activate Salmon. parallel --jobs 6 --header : --colsep ',' \; 'salmon quant -I /path/to/index/folder/ \; -l A\; -1 /path/to/""{fastq_1}"" \; -2 /path/to/""{fastq_2}""\; --writeUnmappedNames \; --validateMappings \; --recoverOrphans\; --gcBias \; --seqBias \; --recoverOrphans\; -o /path/to/output/{Samples} \; --threads 2' :::: /path/to/sheet_with_sample_and_fastq_names.csv; ```; Specifically, please provide at least the following information:. * Which version of salmon was used?; Both 1.10.2 and 1.10.3 were tested. ; * How was salmon installed (compiled, downloaded executable, through bioconda)?; Used bioconda; * Which reference (e.g. transcriptome) was used?; GRCh38 ; * Which read files were used?; Illumina NovaSeq. Merged fastq based on direction (fastq split across lanes and had to add top off data) with zcat, used cutadapt for adapter trimming. . * Which which program options were used?; Ribodetector was used to get rid of rRNA contamination. Used output of non rRNA files with Salmon quant. **Expected behavior**; A clear and concise description of what you expected to happen.; Salmon Quant outputting of .sf files. **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem.; From SLURM generated error file. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; HPCS: Red Hat Server 7.9. **Additional context**; Add any other context about the problem here.; Removal of --recoverOrphans leads to jobs finishing to completion. . Oddly enough, with --recoverOrphans dropped, I start seeing output into .err files I set in SLURM rather than in the .log file with each folder. .",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/961:1832,adapt,adapter,1832,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/961,1,['adapt'],['adapter']
Modifiability,"quality-trimming, because if you do quality-trimming first, sometimes adapters will be partially trimmed and become too short to be recognized as adapter sequence. When you run BBDuk with both quality-trimming and adapter-trimming in the same run, it will do adapter-trimming first, then quality-trimming. 2. I very well know that the advantage of using fastp is that it can do adapter trimming, etc in a automatic fashion - no need to provide external sequences (example adapter sequences). Yes, I know one can also provide a fasta file of adapters and fatsp will work off it. There are many fatsp issues in GH about adapter detection:. - fail to detect adpaters automatically - (https://github.com/OpenGene/fastp/issues/222 and https://github.com/OpenGene/fastp/issues/205). - [incorrect automatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is simply to align one of these samples to the genome with a tool like STAR or HISAT2 and look at their mapping rate to known features. If it's similar, then the other reads could be accounted for by e.g. intron retention or even contamination. Finally, [@vals has an excellent series of blog posts on investigating and addressing low mapping rates](http://www.nxn.se/valent/2017/9/18/low-mappin",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:1805,adapt,adapter,1805,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,2,['adapt'],['adapter']
Modifiability,"quest('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir : /usr/local/Caskroom/miniforge/base/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/conda-forge/osx-arm64; https://conda.anaconda.org/conda-forge/noarch; package cache : /usr/local/Caskroom/miniforge/base/pkgs; /Users/Benjamin/.conda/pkgs; envs directories : /usr/local/Caskroom/miniforge/base/envs; /Users/Benjamin/.conda/envs; platform : osx-arm64; user-agent : conda/4.12.0 requests/2.27.1 CPython/3.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:4952,variab,variables,4952,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['variab'],['variables']
Modifiability,"r -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find Iconv (missing: Iconv_LIBRARY); Call Stack (most recent call first):; /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindIconv.cmake:120 (find_package_handle_standard_args); CMakeLists.txt:362 (find_package). -- Configuring incomplete, errors occurred!; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeOutput.log"".; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeError.log"".; ```; I'm also attaching the full CMake logs. This is right at the edge of my knowledge, so I'm not 100% sure I got libiconv installed correctly. Compilation completed without error, and I added the bin, include, and lib directories to PATH, CPATH, and LD_LIBRARY_PATH, respectively. [CMakeError.log](https://github.com/COMBINE-lab/salmon/files/6665942/CMakeError.log); [CMakeOutput.log](https://github.com/COMBINE-lab/salmon/files/6665943/CMakeOutput.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:2427,Config,Configuring,2427,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,1,['Config'],['Configuring']
Modifiability,"r_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Cas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:4411,adapt,adapter,4411,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['adapt'],['adapter']
Modifiability,"ranscriptome (with no decoys) gives me a mapping rate of `0.00378202832148367%`. The first thing I did was to quality and adapter trim the data (using `fastp -i SRR9007475.fastq.gz -o SRR9007475_trimmed.fastq.gz -q 10 -w 8`) and ... whoa. This is the fastp html report [fastp.html.zip](https://github.com/COMBINE-lab/salmon/files/4176345/fastp.html.zip). So the first astounding statistic, the mean read length before trimming is 51bp (these are relatively short single-end reads). The mean read length after trimming is 21bp! So, the average read length is, in fact, less than the k-mer length used for indexing (default is k=31). On the trimmed data, the mapping rate goes up to `2.3545475882931305%`, still very low, but now there's somewhat of an explanation, the average read is shorter than a single k-mer. So, the next thing I tried was indexing with a smaller k; a _really_ small one in this case,`k=15`. Then, I re-ran on the _trimmed_ reads (the fact that the trimming took us from 51-21bp suggests that the reads had a lot of low quality bases, adapter contamination, or both). Under this setting, I still get a very low mapping rate, but it was _much_ higher ‚Äî `16.766993524863488%`. The final thing I tried was seeing how the mapping rate changed as I altered `--minScoreFraction`, which is the salmon parameter that determines the alignment score that a read must achieve in order to be mapped validly. The default is 0.65. This means that the read cannot have a score < 0.65 * the maximum achievable score for the read given it's length. In the case of a 21bp read, the best score would be a score of 42, so a read must obtain a score >= 27 in order to be mapped. This is already a pretty poor mapping, but I reduced it even more to 0.3 (so any read with a score > 12 would pass). This led to a mapping rate of `~46%`. However, at this point, I'm not sure I would be confident in such mappings. For example, the situation here would be a 21bp read with multiple mismatches and, much of",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583799668:1452,adapt,adapter,1452,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583799668,1,['adapt'],['adapter']
Modifiability,"referred to as QS in the rest of the message(s))_ ?. `salmon quant --threads 16 --noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in my final summarized table (after tximport). I got a colSum for all my samples and then checked the numbers for the transc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:1101,Adapt,Adapter,1101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Adapt'],['Adapter']
Modifiability,"rge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir : /usr/local/Caskroom/miniforge/base/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/conda-forge/osx-arm64; https://conda.anaconda.org/conda-forge/noarch; package cache : /usr/local/Caskroom/miniforge/base/pkgs; /Users/Benjamin/.conda/pkgs; envs directories : /usr/local/Caskroom/miniforge/base/envs; /Users/Benjamin/.conda/envs; platform : osx-arm64; user-agent : conda/4.12.0 requests/2.27.1 CPython/3.9.13 Darwin/21.5.0 OSX/12.4; UID:GID : 501:20; netrc file : None; offline mode : False. An unexpected error has occurred. Conda has prepared the above report. If submitted, this report will be used by core maintainers to improve; future releases of conda.; Would you like conda to send this report to the core maintainers?. [y/N]: y; Upload did not complete. Thank you for helping to improve conda.; Opt-in to always sending reports (and not see this message again); by running. $ conda config --set report_errors true; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:6601,config,config,6601,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['config'],['config']
Modifiability,"so.2 (0x00007f859aa08000); libgomp.so.1 => /u/user/local/lib64/libgomp.so.1 (0x00007f859a7e7000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f859a5df000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f859a2de000); libgcc_s.so.1 => /u/user/local/lib64/libgcc_s.so.1 (0x00007f859a0c8000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8599d1d000); /lib64/ld-linux-x86-64.so.2 (0x00007f859b286000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7ff",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:1851,Config,Configured,1851,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['Config'],['Configured']
Modifiability,"so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] =",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2370,config,configuration,2370,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['config'],['configuration']
Modifiability,"ssue and comments therein](https://github.com/COMBINE-lab/salmon/issues/489)). The second and more fundamental thing going on is that the observed behavior is intended. Even with a single thread of execution provided to salmon for mapping and quantification, there is a separate background thread that simply consumes reads from file and puts them in memory for quantification, and while e.g. pairing information between files is guaranteed to be preserved, exact read order is not. This can lead to differences in the order in which reads are processed and, as a result, differences in the initialization conditions of the optimization. The ultimate result is that for transcripts that have large inferential uncertainty, different numbers of reads can be assigned between runs. We have thought *a lot* about this behavior, what it means, and how the `NumRead` values should best be communicated to users. At the end of the day, the `NumReads` constitute the expected value of latent variables inferred in a _very_ high-dimensional space (# of parameters is at least the number of transcripts). Therefore, there are certain transcripts, whose estimated number of reads simply have _tremendous_ inferential uncertainty ‚Äî and small perturbations in the initial conditions of the optimization will lead to different estimated values for their abundances. For those transcripts where you observe such fluctuations between runs, this is simply evidence that the precision that can be confidently placed on those estimates is below the degree of variation you observe. Treating these transcripts in downstream analysis as more certain can easily lead to spurious inferences regarding things like differential transcript expression or usage. . One can make an argument for trying to provide a way to enforce removal of this variation (which, granted, would be a challenge). However, the reason we decided against even attempting this is because it doesn't properly address any issue with respect to an actua",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858:1568,variab,variables,1568,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858,2,['variab'],['variables']
Modifiability,"t (6) at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; Process_cmd::process_cmd(""salmon --no-version-check quant -i /home/federicoplazzi/test_""...) called at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/salmon_runner.pl line 26; Trinity run failed. Must investigate error above.; warning, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../Trinity --single ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa"" --output ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out"" --CPU 1 --max_memory 1G --run_as_paired --SS_lib_type F --seqType fa --trinity_complete --full_cleanup failed with ret: 512, going to retry.; succeeded(0), failed(1) 100% completed. We are sorry, commands in file: [FailedCommands] failed. :-(. Error, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/ParaFly -c recursive_trinity.cmds -CPU 4 -v -shuffle died with ret 256 at /usr/local/bin/Trinity line 2581.; main::process_cmd(""/usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/P""...) called at /usr/local/bin/Trinity line 3244; main::run_partitioned_cmds(""recursive_trinity.cmds"") called at /usr/local/bin/Trinity line 2239; main::run_recursive_trinity(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/ch""...) called at /usr/local/bin/Trinity line 2001; main::run_chrysalis(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/in""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., 200, 500, ""RF"", ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""...) called at /usr/local/bin/Trinity line 1664; main::run_Trinity() called at /usr/local/bin/Trinity line 1317; eval {...} called at /usr/local/bin/Trinity line 1316. Trinity run failed. Must investigate error above.; ```. D",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:3066,plugin,plugins,3066,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['plugin'],['plugins']
Modifiability,"te called without an active exception; /cm/local/apps/sge/var/spool/compute-051/job_scripts/9987275: line 31: 41232 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Softw; are/Salmon-0.7.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/GENCODE/GRCh38_hg38/transcripts/salmon_index_gencode.v25.tr; anscripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test/${ID}; **** Job ends ****; Wed Mar 8 11:37:36 EST 2017; ```. and the core dump file shows that the program was terminated:. ```bash; $ gdb core.41232; GNU gdb (GDB) Red Hat Enterprise Linux (7.2-60.el6_4.1); Copyright (C) 2010 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Missing separate debuginfo for the main executable file; Try: yum --disablerepo='*' --enablerepo='*-debug*' install /usr/lib/debug/.build-id/f2/3c99ed06abf17dd0ee1073eac092487ac62314; [New Thread 41232]; [New Thread 41236]; [New Thread 41235]; [New Thread 41234]; Core was generated by `/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.7.2_linux_x86_64/b'.; Program terminated with signal 6, Aborted.; #0 0x0000003612832625 in ?? (); ""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/core.41232"" is a core file.; Please specify an executable to debug.; (gdb) q; ```. The SGE information shows that it basically reached 10.7 GB of RAM:. ```bash; $ qacct -j 9987275 -t 3; ==============================================================; qname shared.q; hostname compute-051.cm.cluster; group lieber_jaffe; owner lcollado; project NONE; department defaultdepartment; jobname st",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:24853,config,configured,24853,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['config'],['configured']
Modifiability,"ted to ""word""...; Reading symbols from /u/user/local/bin/salmon...done.; (gdb) run alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 4 }; ### [ output ] => { BM_1/alevin }; ### [ mates1 ] =",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:1939,config,configuration,1939,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['config'],['configuration']
Modifiability,"ubdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = self.get_connection(request.url, proxies); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:4683,adapt,adapters,4683,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['adapt'],['adapters']
Modifiability,"x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/CommandLineTools/usr/bin/cc; configure:5150: checking for C compiler version; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc --version >&5; Apple clang version 15.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4416,config,configure,4416,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,24,"['config', 'variab']","['configure', 'variables']"
Modifiability,"zma2 delta x86 powerpc ia64 arm armthumb sparc; configure:3644: checking which match finders to build; configure:3695: result: hc3 hc4 bt2 bt3 bt4; configure:3713: checking which integrity checks to build; configure:3755: result: crc32 crc64 sha256; configure:3792: checking if assembler optimizations should be used; configure:3816: result: no; configure:3847: checking if small size is preferred over speed; configure:3865: result: no; configure:3881: checking if threading support is wanted; configure:3907: result: yes, posix; configure:3940: checking how much RAM to assume if the real amount is unknown; configure:3955: result: 128 MiB; configure:4085: checking if library symbol versioning should be used; configure:4108: result: no; configure:4126: checking for a shell that conforms to POSIX; configure:4167: result: /bin/sh; configure:4208: checking for a BSD-compatible install; configure:4276: result: /usr/bin/install -c; configure:4287: checking whether build environment is sane; configure:4342: result: yes; configure:4493: checking for a thread-safe mkdir -p; configure:4532: result: build-aux/install-sh -c -d; configure:4539: checking for gawk; configure:4569: result: no; configure:4539: checking for mawk; configure:4569: result: no; configure:4539: checking for nawk; configure:4569: result: no; configure:4539: checking for awk; configure:4555: found /usr/bin/awk; configure:4566: result: awk; configure:4577: checking whether make sets $(MAKE); configure:4599: result: yes; configure:4628: checking whether make supports nested variables; configure:4645: result: yes; configure:4771: checking whether ln -s works; configure:4775: result: yes; configure:4795: checking for style of include used by make; configure:4823: result: GNU; configure:4894: checking for gcc; configure:4921: result: /Library/Developer/CommandLineTools/usr/bin/cc; configure:5150: checking for C compiler version; configure:5159: /Library/Developer/CommandLineTools/usr/bin/cc --version >&5; Apple clang",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:4387,config,configure,4387,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['config'],['configure']
Performance,"	maker	three_prime_utr	207479	207903	.	+	.	ID ""Bany_03723-RA:three_prime_utr""; Parent ""Bany_03723-RA""; gene_id Bany_03723; original_biotype three_prime_UTR; transcript_id ""Bany_03723-RA"" ; ```. The log report I got:; ```; [2020-06-03 23:42:18.303] [jointLog] [info] setting maxHashResizeThreads to 36; [2020-06-03 23:42:18.303] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-06-03 23:42:18.303] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-06-03 23:42:18.303] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-03 23:42:18.303] [jointLog] [info] parsing read library format; [2020-06-03 23:42:18.303] [jointLog] [info] There is 1 library.; [2020-06-03 23:42:18.445] [jointLog] [info] Loading pufferfish index; [2020-06-03 23:42:18.446] [jointLog] [info] Loading dense pufferfish index.; [2020-06-03 23:42:18.906] [jointLog] [info] done; [2020-06-03 23:42:18.907] [jointLog] [info] Index contained 29,658 targets; [2020-06-03 23:42:18.922] [jointLog] [info] Number of decoys : 0; [2020-06-03 23:47:07.075] [jointLog] [info] Computed 96,808 rich equivalence classes for further processing; [2020-06-03 23:47:07.075] [jointLog] [info] Counted 22,215,758 total reads in the equivalence classes ; [2020-06-03 23:47:07.131] [jointLog] [warning] 0.00138398% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 1. [2020-06-03 23:47:07.131] [jointLog] [info] Number of mappings discarded because of alignment score : 50,180,647; [2020-06-03 23:47:07.131] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 5,461,169; [2020-06-03 23:47:07.131] [jointLog] [info] Number of fragments discarded because they are ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/530:4033,Load,Loading,4033,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/530,1,['Load'],['Loading']
Performance,"[32mprocessed[31m 66000000 [32mfragments[0m; hits: 92174292, hits per frag: 1.39669[A. [32mprocessed[31m 66500000 [32mfragments[0m; hits: 92872684, hits per frag: 1.39669[A. [32mprocessed[31m 67000000 [32mfragments[0m; hits: 93570589, hits per frag: 1.39668[A. [32mprocessed[31m 67500000 [32mfragments[0m; hits: 94262793, hits per frag: 1.39659[A. [32mprocessed[31m 68000000 [32mfragments[0m; hits: 94956043, hits per frag: 1.39652[A. [32mprocessed[31m 68500000 [32mfragments[0m; hits: 95648744, hits per frag: 1.39643. [1m[2017-03-30 11:30:33.005] [jointLog] [info] Computed 505448 rich equivalence classes for further processing; [00m[1m[2017-03-30 11:30:33.005] [jointLog] [info] Counted 30438349 total reads in the equivalence classes ; [00m. [1m[2017-03-30 11:30:50.309] [jointLog] [info] Mapping rate = 44.3635%. [00m[1m[2017-03-30 11:30:50.309] [jointLog] [info] finished quantifyLibrary(); [00m[1m[2017-03-30 11:30:56.208] [jointLog] [info] Starting optimizer; [00m[1m[2017-03-30 11:32:15.204] [jointLog] [info] Marked 4 weighted equivalence classes as degenerate; [00m[1m[2017-03-30 11:32:15.413] [jointLog] [info] iteration = 0 | max rel diff. = 13.3708; [00m[1m[2017-03-30 11:32:31.128] [jointLog] [info] iteration = 100 | max rel diff. = 0.096809; [00m[1m[2017-03-30 11:32:46.546] [jointLog] [info] iteration = 200 | max rel diff. = 0.0617045; [00m[1m[2017-03-30 11:33:01.476] [jointLog] [info] iteration = 300 | max rel diff. = 0.0375335; [00m[1m[2017-03-30 11:33:16.917] [jointLog] [info] iteration = 400 | max rel diff. = 0.0281626; [00m[1m[2017-03-30 11:33:32.635] [jointLog] [info] iteration = 500 | max rel diff. = 0.0213515; [00m[1m[2017-03-30 11:33:48.229] [jointLog] [info] iteration = 600 | max rel diff. = 0.0163419; [00m[1m[2017-03-30 11:34:05.482] [jointLog] [info] iteration = 700 | max rel diff. = 0.0161512; [00m[1m[2017-03-30 11:34:22.202] [jointLog] [info] iteration = 800 | max rel diff. = 0.0161512; [00m[1m[2",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:23684,optimiz,optimizer,23684,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['optimiz'],['optimizer']
Performance," ""Index requested greater than vector's size"". The log reads:. ```; -----------------------------------------; | Loading contig table | Time = 12.954 s; -----------------------------------------; size = 35010142; -----------------------------------------; | Loading contig offsets | Time = 269.18 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 7.8427 ms; -----------------------------------------; -----------------------------------------; | Loading eq table | Time = 3.3896 s; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.8301 s; -----------------------------------------; size = 3567796961; Number of ones: 35010141; Number of ones per inventory item: 512; Inventory entries filled: 68380; -----------------------------------------; | Loading contig boundaries | Time = 11.288 s; -----------------------------------------; size = 3567796961; -----------------------------------------; | Loading sequence | Time = 7.763 s; -----------------------------------------; size = 2517492731; -----------------------------------------; | Loading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>6442720932; Index requested greater than vector's size: 6442720996>6442720932; Index requested greater than vector's size: 6442721060>6442720932; Index requested greater than vector's size: 6442721124>6442720932; Index requested greater than vector's size: 6442721188>6442720932; Index requested greater than vector's size: 6442721252>6442720932; Index requested greater than vect",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:1422,Load,Loading,1422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,1,['Load'],['Loading']
Performance," # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:23:49.875] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:23:49.875] [jointL",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:7809,Load,Loading,7809,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance," ### [ command ] => quant ; ### [ index ] => { salmon_sa_index }; ### [ libType ] => { ISR }; ### [ mates1 ] => { testData/XX_R1.fastq.gz }; ### [ mates2 ] => { testData/XX_R2.fastq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { XX_2 }; Logs will be written to XX_2/logs; [2020-08-13 09:35:38.575] [jointLog] [info] setting maxHashResizeThreads to 12; [2020-08-13 09:35:38.576] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:1500,Load,Loading,1500,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance," ### [ index ] => { /mnt/hgfs/Data/reference_data/mm10/default }; ### [ unmatedReads ] => { /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz }; ### [ output ] => { out }; ### [ threads ] => { 6 }; ### [ validateMappings ] => { }; Logs will be written to out/logs; [2021-09-20 16:20:48.240] [jointLog] [info] setting maxHashResizeThreads to 6; [2021-09-20 16:20:48.240] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:20:48.240] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:20:48.240] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:20:48.240] [jointLog] [info] parsing read library format; [2021-09-20 16:20:48.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:4465,Load,Loading,4465,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance," #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevin }; ### [ mates1 ] => { /dev/fd/63 }; ### [ mates2 ] => { /dev/fd/62 }; ### [ index ] => { /u/user/ref/cellranger/salmon/trans",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2609,load,loading,2609,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['load'],['loading']
Performance," -c 8; #SBATCH --mem=50G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J index_Salmon. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. salmon index -t ~/data/genome/MSU7_transcript.fasta -i ~/data/genome/MSU7_transcript.index --type quasi -k 31. **I then run transcript abundance estimate pipeline for the raw-reads and the trimmed reads as follows:**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l A \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_old/${line} --seqBias --gcBias. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l A \; -1 ~/results/trimmingSheng/${line}1.paired.fastq \; -2 ~/results/trimmingSheng/${line}2.paired.fastq --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_new/${line} --seqBias --gcBias. **Steps and data to reproduce the behavior: for version 0.12**; module load Cufflinks/2.2.1; gffread MSU7_all.gff3 -g all.chrs.fasta -w MSU7_newtranscript.fasta. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=50G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J index_Salmon. module load Salmon/0.12.0-IGB-gcc-8.2.0. salmon index -t ~/data/genome/MSU7_newtranscript.fasta -i ~/data/genome/MSU7new_transcript.index --type quasi -k 31. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:2291,load,load,2291,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['load'],['load']
Performance," -r Sample1_r1_trimmed.fastq -p 5 -o quants/Sample1_quant. Logs will be written to quants/Sample1_quant/logs; [2017-10-25 10:57:25.879] [jointLog] [info] parsing read library format; [2017-10-25 10:57:25.879] [jointLog] [info] There is 1 library.; [2017-10-25 10:57:26.002] [jointLog] [info] Loading Quasi index; [2017-10-25 10:57:26.002] [jointLog] [info] Loading 32-bit quasi index; [2017-10-25 10:57:26.012] [jointLog] [info] done; [2017-10-25 10:57:26.012] [jointLog] [info] Index contained 28 targets; [2017-10-25 10:57:26.003] [stderrLog] [info] Loading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapping rate = 0%. [2017-10-25 10:58:22.293] [jointLog] [info] finished quantifyLibrary(); [2017-10-25 10:58:22.295] [jointLog] [info] Starting optimizer; [2017-10-25 10:58:22.308] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-10-25 10:58:22.308] [jointLog] [info] iteration = 0 | max rel diff. = 0.455425; [2017-10-25 10:58:22.308] [jointLog] [info] iteration = 50 | max rel diff. = -1.79769e+308; [2017-10-25 10:58:22.308] [jointLog] [error] ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:1479,load,loading,1479,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,1,['load'],['loading']
Performance," /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2471,load,load,2471,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['load'],['load']
Performance," 0 CB got sequence corrected; > [2020-06-03 13:54:45.790] [alevinLog] [info] Done indexing Barcodes; > [2020-06-03 13:54:45.790] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-03 13:54:45.790] [alevinLog] [info] Used Barcodes except Whitelist: 0; > [2020-06-03 13:54:46.493] [jointLog] [info] There is 1 library.; > ; > -----------------------------------------; > [2020-06-03 13:54:46.551] [jointLog] [info] Loading pufferfish index; > [2020-06-03 13:54:46.551] [jointLog] [info] Loading dense pufferfish index.; > [2020-06-03 13:54:46.552] [jointLog] [info] done; > [2020-06-03 13:54:46.552] [jointLog] [info] Index contained 64 targets; > [2020-06-03 13:54:46.552] [jointLog] [info] Number of decoys : 0; > ; > [2020-06-03 13:54:46.493] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > processed 52 Million fragmentsvinLog] [info] parsing read library format; > hits: 0, hits per frag: 0; > ; > [2020-06-03 13:55:42.905] [alevinLog] [info] Starting optimizer; > ; > [2020-06-03 13:55:42.931] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.931] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0.00 UMI after deduplicating.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 BiDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 UniDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [warning] Skipped 50091 barcodes due to No mapped read; > [2020-06-03 13:55:42.934] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-03 13:55:42.940] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 200.Can't performing whitelisting; Skipping; > [2020-06-03 13:55:42.940] [alevinLog] [info] Finished optimizer; > `. I also tried . `salmon alevin -l ISR --chromium --featureStart 19 --featureLength 21 --tgMap guide_to_gene.tsv`. But I get the follow",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531:2907,optimiz,optimizer,2907,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531,1,['optimiz'],['optimizer']
Performance," 0 reads; Assuming this is the required behavior.; [2018-12-12 15:08:51.141] [alevinLog] [info] Total 95 white-listed Barcodes; [2018-12-12 15:08:51.144] [alevinLog] [info] Done populating Z matrix; [2018-12-12 15:08:51.146] [alevinLog] [info] Done indexing Barcodes; [2018-12-12 15:08:51.146] [alevinLog] [info] Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] [info] Thread saw mini-batch with a maximum of 5.48% zero probability fragments. [2018-12-12 15:12:07.721] [jointLog] [info] Computed 173,365 rich equivalence classes for further processing; [2018-12-12 15:12:07.7",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4530,Load,Loading,4530,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['Load'],['Loading']
Performance," 0.0984302; [2016-01-02 00:08:58.048] [jointLog] [info] iteration = 300 | max rel diff. = 0.0774471; [2016-01-02 00:08:58.265] [jointLog] [info] iteration = 400 | max rel diff. = 0.0866256; [2016-01-02 00:08:58.472] [jointLog] [info] iteration 500, recomputing effective lengths; [2016-01-02 00:09:00.486] [jointLog] [info] iteration = 500 | max rel diff. = 0.0216284; [2016-01-02 00:09:00.696] [jointLog] [info] iteration = 600 | max rel diff. = 0.0269734; [2016-01-02 00:09:00.905] [jointLog] [info] iteration = 700 | max rel diff. = 0.0166003; [2016-01-02 00:09:01.113] [jointLog] [info] iteration = 800 | max rel diff. = 0.0136659; [2016-01-02 00:09:01.334] [jointLog] [info] iteration = 900 | max rel diff. = 0.0114614; [2016-01-02 00:09:01.542] [jointLog] [info] iteration 1000, recomputing effective lengths; [2016-01-02 00:09:03.495] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0102234; [2016-01-02 00:09:03.716] [jointLog] [info] iteration = 1100 | max rel diff. = 0.0202324; [2016-01-02 00:09:03.929] [jointLog] [info] iteration = 1200 | max rel diff. = 0.010957; [2016-01-02 00:09:03.946] [jointLog] [info] iteration = 1209 | max rel diff. = 0.00996627; [2016-01-02 00:09:03.952] [jointLog] [info] Finished optimizer; [2016-01-02 00:09:03.952] [jointLog] [info] writing output. Computing gene-level abundance estimates; [2016-01-02 00:09:04.141] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/ERP009633_cell20_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/ERP009633_cell20_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: /tmp/ERP009633_cell20_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done; Segmentation fault (core dumped); ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34:2620,optimiz,optimizer,2620,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34,1,['optimiz'],['optimizer']
Performance," 10 }; ### [ output ] => { quants/13_quant }; ```. **Expected behavior**; Not to be so slow.... I've used salmon previously with some SRR datasets and it was very fast, this seems very strange to me . **Screenshots**; ```; [2020-06-13 02:34:43.686] [jointLog] [info] setting maxHashResizeThreads to 4; [2020-06-13 02:34:43.686] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-06-13 02:34:43.686] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-06-13 02:34:43.686] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-13 02:34:43.686] [jointLog] [info] parsing read library format; [2020-06-13 02:34:43.686] [jointLog] [info] There is 1 library.; [2020-06-13 02:34:43.738] [jointLog] [info] Loading pufferfish index; [2020-06-13 02:34:43.738] [jointLog] [info] Loading dense pufferfish index.; [2020-06-13 02:34:45.327] [jointLog] [info] done; [2020-06-13 02:34:45.327] [jointLog] [info] Index contained 117,135 targets; [2020-06-13 02:34:45.346] [jointLog] [info] Number of decoys : 0; [2020-06-13 02:35:35.911] [jointLog] [info] Automatically detected most likely library type as IU; [2020-06-13 06:56:12.646] [fileLog] [info] ; At end of round 0; ==================; Observed 28512328 total fragments (28512328 in most recent round). [2020-06-13 06:56:12.645] [jointLog] [info] Computed 348,024 rich equivalence classes for further processing; [2020-06-13 06:56:12.645] [jointLog] [info] Counted 12,990,838 total reads in the equivalence classes ; [2020-06-13 06:56:12.989] [jointLog] [warning] 0.0736383% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 1. [2020-06-13 06:56:12.989] [jointLog] [info] Number of mappings discarded beca",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537:2202,Load,Loading,2202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537,1,['Load'],['Loading']
Performance," 100 }; ### [ validateMappings ] => { }; ### [ output ] => { salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant }; Logs will be written to salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant/logs; [2023-08-27 19:59:26.866] [jointLog] [info] setting maxHashResizeThreads to 100; [2023-08-27 19:59:26.866] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-08-27 19:59:26.866] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-08-27 19:59:26.866] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-08-27 19:59:26.866] [jointLog] [info] parsing read library format; [2023-08-27 19:59:26.866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; ------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:10202,Load,Loading,10202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance," 202 ; [2018-07-26 11:25:31.135] [alevinLog] [info] Gauss Corrected Boundary at 22 ; [2018-07-26 11:25:31.135] [alevinLog] [info] Learned InvCov: 1044.2 normfactor: 295.235; [2018-07-26 11:25:31.135] [alevinLog] [info] Total 222(has 200 low confidence) barcodes; [2018-07-26 11:25:31.440] [alevinLog] [info] Done True Barcode Sampling; [2018-07-26 11:25:31.789] [alevinLog] [info] Done populating Z matrix; [2018-07-26 11:25:31.793] [alevinLog] [info] Done indexing Barcodes; [2018-07-26 11:25:31.793] [alevinLog] [info] Total Unique barcodes found: 10630133; [2018-07-26 11:25:31.793] [alevinLog] [info] Used Barcodes except Whitelist: 10603; [2018-07-26 11:25:31.938] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-26 11:25:31.939] [alevinLog] [info] parsing read library format; [2018-07-26 11:25:31.949] [jointLog] [info] There is 1 library.; [2018-07-26 11:25:32.331] [jointLog] [info] Loading Quasi index; [2018-07-26 11:25:32.331] [jointLog] [info] Loading 32-bit quasi index; [2018-07-26 11:25:32.357] [stderrLog] [info] Loading Suffix Array ; [2018-07-26 11:26:09.413] [stderrLog] [info] Loading Transcript Info ; [2018-07-26 11:26:10.896] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-26 11:26:11.159] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-26 11:26:11.225] [stderrLog] [info] Computing transcript lengths; [2018-07-26 11:26:11.226] [stderrLog] [info] Waiting to finish loading hash; [2018-07-26 11:26:14.654] [stderrLog] [info] Done loading index; [2018-07-26 11:26:14.654] [jointLog] [info] done; [2018-07-26 11:26:14.654] [jointLog] [info] Index contained 203027 targets. Incorrect call for umi extractIncorrect call for umi extract; ```. I traced it back to AlevinUtils.cpp in the source files but could not make sense of it from there. The program will run completely on the same data and library if I change --dropseq to --Chromium, eventually outputting the following after processing the reads:. ```; [20",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:2817,Load,Loading,2817,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['Load'],['Loading']
Performance," 20:14:24.283] [jointLog] [info] There is 1 library.; [2020-05-29 20:14:24.341] [jointLog] [info] Loading pufferfish index; [2020-05-29 20:14:24.342] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 41.693 ms; -----------------------------------------; size = 357712; -----------------------------------------; | Loading contig offsets | Time = 657 us; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 202.87 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 16.335 ms; -----------------------------------------; size = 64786639; Number of ones: 357711; Number of ones per inventory item: 512; Inventory entries filled: 699; -----------------------------------------; | Loading contig boundaries | Time = 154.69 ms; -----------------------------------------; size = 64786639; -----------------------------------------; | Loading sequence | Time = 6.3275 ms; -----------------------------------------; size = 54055309; -----------------------------------------; | Loading positions | Time = 68.544 ms; -----------------------------------------; size = 74351806; -----------------------------------------; | Loading reference sequence | Time = 7.0924 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 325.83 us; -----------------------------------------; [2020-05-29 20:14:24.638] [jointLog] [info] done; [2020-05-29 20:14:24.638] [jointLog] [info] Index contained 57,190 targets; [2020-05-29 20:14:25.202] [jointLog] [info] Number of decoys : 0. processed 38,500,000 fragmentsntLog] [info] Automatically detected most likely library type as IU; hits: 40,221,178, hits per frag: 1.04508. **Desktop (please complete the following information):**; - OS:Ubuntu ; - Version 18.04. **Additional c",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527:3673,Load,Loading,3673,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527,1,['Load'],['Loading']
Performance," 4 }; ### [ output ] => { salmon.out }; Logs will be written to salmon.out/logs; [2021-03-29 16:21:11.395] [jointLog] [info] setting maxHashResizeThreads to 8; [2021-03-29 16:21:11.395] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-03-29 16:21:11.395] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-03-29 16:21:11.395] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-03-29 16:21:11.395] [jointLog] [info] parsing read library format; [2021-03-29 16:21:11.399] [jointLog] [info] There is 1 library.; [2021-03-29 16:21:11.496] [jointLog] [info] Loading pufferfish index; [2021-03-29 16:21:11.509] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 553.34 s; -----------------------------------------; size = 45242875; -----------------------------------------; | Loading contig offsets | Time = 14.76 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.0848 s; -----------------------------------------; /cromwell_root/script: line 103: 22 Killed salmon quant -i $refIndexDir --libType A -1 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.2.fastq.gz"" -2 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.1.fastq.gz"" -p 8 --recoverOrphans --validateMappings --gcBias --seqBias --rangeFactorizationBins 4 --output salmon.out; + salmonRet=137; + echo 'AEDWIP in time salmonRet='; AEDWIP in time salmonRet=; + '[' 137 -eq 0 ']'; + echo 'Salmon ERROR code 137'; Salm",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641:4247,Load,Loading,4247,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641,1,['Load'],['Loading']
Performance," 400 | max rel diff. = 8.91734; [2021-09-20 16:24:56.130] [jointLog] [info] iteration = 500 | max rel diff. = 1.26201; [2021-09-20 16:24:57.628] [jointLog] [info] iteration = 600 | max rel diff. = 0.155034; [2021-09-20 16:24:59.130] [jointLog] [info] iteration = 700 | max rel diff. = 16.1436; [2021-09-20 16:25:00.660] [jointLog] [info] iteration = 800 | max rel diff. = 2.09965; [2021-09-20 16:25:02.202] [jointLog] [info] iteration = 900 | max rel diff. = 0.122996; [2021-09-20 16:25:03.751] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.156404; [2021-09-20 16:25:05.306] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.103478; [2021-09-20 16:25:06.868] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.03942; [2021-09-20 16:25:08.404] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.0699512; [2021-09-20 16:25:09.961] [jointLog] [info] iteration = 1,400 | max rel diff. = 0.109145; [2021-09-20 16:25:11.518] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.135139; [2021-09-20 16:25:13.091] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.0545934; [2021-09-20 16:25:14.668] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.0287732; [2021-09-20 16:25:16.226] [jointLog] [info] iteration = 1,800 | max rel diff. = 0.0201942; [2021-09-20 16:25:17.780] [jointLog] [info] iteration = 1,900 | max rel diff. = 1.83806; [2021-09-20 16:25:19.333] [jointLog] [info] iteration = 2,000 | max rel diff. = 0.0251548; [2021-09-20 16:25:19.842] [jointLog] [info] iteration = 2,034 | max rel diff. = 0.00913859; [2021-09-20 16:25:19.858] [jointLog] [info] Finished optimizer; [2021-09-20 16:25:19.858] [jointLog] [info] writing output ; ```. VM running Ubuntu ; Linux ubuntu 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux; No LSB modules are available.; Distributor ID:	Ubuntu; Description:	Ubuntu 20.04.3 LTS; Release:	20.04; Codename:	focal. Transcriptome index for mouse mm10 downloaded from RefGenie.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:9344,optimiz,optimizer,9344,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['optimiz'],['optimizer']
Performance," 4096, PROT_NONE) = 0; clone(child_stack=0x7ffebe5e7ed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffebe5e89d0, tls=0x7ffebe5e8700, child_tidptr=0x7ffebe5e89d0) = 14677; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/sa.bin"", O_RDONLY) = 4; clock_gettime(CLOCK_REALTIME, {1491424830, 149197282}) = 0; read(4, ""l\n\221\21\0\0\0\0k\n\221\21\373\25\343\20\17\254\r\1\36\27\227\n\37\371\270\4\250\210\307\f""..., 8191) = 8191; mmap(NULL, 1342177280, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7ffe2e5e8000; munmap(0x7ffe2e5e8000, 1342177280) = 0; mmap(NULL, 1344270336, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7ffe2e3e9000; munmap(0x7ffe2e3e9000, 94208) = 0; munmap(0x7ffe7e400000, 1998848) = 0; [1m[2017-04-05 16:40:30.149] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-04-05 16:40:30.069] [jointLog] [info] Loading Quasi index; [00m[1m[2017-04-05 16:40:30.139] [jointLog] [info] Loading 32-bit quasi index; [00mread(4, ""\16'w=\r\320m\306\0\35\26\306\0\224\23\270\10\205]D\0|\3!\4c_-\7\310O\2""..., 1178864057) = 1178864057; close(4) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/txpInfo.bin"", O_RDONLY) = 4; clock_gettime(CLOCK_REALTIME, {1491424833, 297142816}) = 0; read(4, ""\315\5\3\0\0\0\0\0|\0\0\0\0\0\0\0ENST00000456328.""..., 8191) = 8191; read(4, ""RP4-669L17.8-001|RP4-669L17.8|12""..., 8191) = 8191; read(4, "".2|LINC01128-004|LINC01128|874|l""..., 8191) = 8191; read(4, ""THUMT00000097991.1|AGRN-002|AGRN""..., 8191) = 8191; read(4, ""HUMG00000001412.6|OTTHUMT0000000""..., 8191) = 8191; read(4, ""F3L-007|CPSF3L|1868|protein_codi""..., 8191) = 8191; read(4, ""01413.3|OTTHUMT00000004082.2|AUR""..., 8191) = 8191; read(4, ""UMT00000001363.3|ATAD3A-001|ATAD""..., 8191)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:167252,Load,Loading,167252,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['Load'],['Loading']
Performance," 8M reads in the single fastq file I am testing with. I can see a whole bunch of threads being created despite limiting the number of processes to two. Thanks!. ```; (gdb) run alevin -l ISR --chromium -p 1 -o 85948/alevin -1 <(gunzip -c ./85948/run1/85948_S18_L001_R1_001.fastq.gz) -2 <(gunzip -c ./85948/run1/85948_S18_L001_R2_001.fastq.gz) -i ./salmon/transcripts_index --tgMap tx2gene.txt; Starting program: ./salmon/build-debug/src/salmon alevin -l ISR --chromium -p 1 -o 85948/alevin -1 <(gunzip -c ./85948/run1/85948_S18_L001_R1_001.fastq.gz) -2 <(gunzip -c ./85948/run1/85948_S18_L001_R2_001.fastq.gz) -i ./salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 27861)]; [Thread 0x7fff7e0f4700 (LWP 27861) exited]; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 27862)]; Logs will be written to 85948/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 27865)]; [New Thread 0x7ffe7b56f700 (LWP 27866)]; [New Thread 0x7ffdfa6ed700 (LWP 27867)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 1 }; ### [ output ] => { 85948/alevin }; ### [ mates1 ] => { /dev/fd/63 }; ### [ mates2 ] => { /dev/fd/62 }; ### [ index ] => { ./salmon/transcripts_index }; ### [ tgMap ] => { tx2gene.txt }. [2018-06-08 11:55:47.378] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [Ne",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:1240,load,loading,1240,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['load'],['loading']
Performance," ; [2018-12-05 16:31:50.571] [alevinLog] [info] Gauss Corrected Boundary at 2858 ; [2018-12-05 16:31:50.571] [alevinLog] [info] Learned InvCov: 166.8 normfactor: 2759.5; [2018-12-05 16:31:50.571] [alevinLog] [info] Total 3856(has 998 low confidence) barcodes; [2018-12-05 16:31:50.638] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 16:31:50.935] [alevinLog] [info] Done populating Z matrix; [2018-12-05 16:31:51.000] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 16:31:51.000] [alevinLog] [info] Total Unique barcodes found: 3825581; [2018-12-05 16:31:51.000] [alevinLog] [info] Used Barcodes except Whitelist: 138266; [2018-12-05 16:31:51.087] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 16:31:51.087] [alevinLog] [info] parsing read library format; [2018-12-05 16:31:51.087] [jointLog] [info] There are 2 libraries.; [2018-12-05 16:31:51.161] [jointLog] [info] Loading Quasi index; [2018-12-05 16:31:51.162] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 16:31:51.164] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 16:31:51.808] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 16:31:51.960] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 16:31:52.001] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 16:31:52.022] [stderrLog] [info] Computing transcript lengths; [2018-12-05 16:31:52.022] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 16:31:56.025] [stderrLog] [info] Done loading index; [2018-12-05 16:31:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the equivalence classes ; [2018-12-05 16:57:31.421] [jointLog] [warning]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:12619,Load,Loading,12619,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance," => salmon; # [ command ] => quant; # [ libType ] => { IU }; # [ alignments ] => { sample_alignments.sam }; # [ targets ] => { ../sample_data/transcripts.fasta }; # [ output ] => { sample_aln_quant }; Logs will be written to sample_aln_quant/logs; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; [2020-04-21 10:11:42.553] [jointLog] [info] setting maxHashResizeThreads to 8; [2020-04-21 10:11:42.553] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-04-21 10:11:42.553] [jointLog] [info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""sample_alignments.sam"", fasta = ""../sample_data/transcripts.fasta"" . . .done; [2020-04-21 10:11:43.180] [jointLog] [info] replaced 0 non-ACGT nucleotides with random nucleotides. processed 0 reads in current round; killing thread 3 . . . done. Freeing memory used by read queue . . . 00; Joined parsing thread . . . ""sample_alignments.sam""; Closed all files . . .; Emptied frag queue. . . [2020-04-21 10:11:43.477] [jointLog] [info]. Completed first pass through the alignment file.; Total # of mapped reads : 10000; # of uniquely mapped reads : 6913; # ambiguously mapped reads : 3087. [2020-04-21 10:11:43.489] [jointLog] [info] Computed 27 rich equivalence classes for further processing; [2020-04-21 10:11:43.489] [jointLog] [info] Counted 10,000 total reads in the equivalence classes; [2020-04-21 10:11:43.490] [jointLog] [warning] Only 10000 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2020-04-21 10:11:43.492] [jointLog] [info] starting optimizer; [2020-04-21 10:11:43.493] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-04-21 10:11:43.493] [jointLog] [info] iteration = 0 | max rel diff. = 14.87; [2020-04-21 10:11:",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617206094:1930,queue,queue,1930,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617206094,1,['queue'],['queue']
Performance," => { /home/cfos/Documents/Collaboration/Ece/2023_Bulk/work/5d/a1220b107b2450d88e8e92fa0f3c06/ACV_REP2_2_val_2.fq.gz }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ posBias ] => { }; ### [ output ] => { ACV_REP2 }; Logs will be written to ACV_REP2/logs; [2023-02-23 09:39:48.709] [jointLog] [info] setting maxHashResizeThreads to 6; [2023-02-23 09:39:48.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-23 09:39:48.709] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; --------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:9272,Load,Loading,9272,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance, => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:38:54.413] [jointLog] [info] parsing read library format; [2016-12-13 22:38:54.413] [jointLog] [info] There is 1 library.; [2016-12-13 22:38:56.240] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:38:56.240] [jointLog] [info] Loading Quasi index; [2016-12-13 22:38:56.240] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:39:01.268] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:40:22.618] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:40:22.619] [jointLog] [info] Starting optimizer; [2016-12-13 22:40:22.904] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:40:22.911] [jointLog] [info] iteration = 0 | max rel diff. = 299.976; [2016-12-13 22:40:23.620] [jointLog] [info] iteration = 100 | max rel diff. = 0.121769; [2016-12-13 22:40:24.367] [jointLog] [info] iteration = 200 | max rel diff. = 0.103587; [2016-12-13 22:40:25.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:1972,load,loading,1972,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,2,['load'],['loading']
Performance, => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:45:33.234] [jointLog] [info] Starting optimizer; [2016-12-13 22:45:33.516] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:45:33.523] [jointLog] [info] iteration = 0 | max rel diff. = 299.95; [2016-12-13 22:45:34.217] [jointLog] [info] iteration = 100 | max rel diff. = 0.122252; [2016-12-13 22:45:34.912] [jointLog] [info] iteration = 200 | max rel diff. = 0.102915; [2016-12-13 22:45:35.6,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1845,load,loading,1845,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['load'],['loading']
Performance," BAM Unsorted --quantMode TranscriptomeSAM --outSAMattributes NH HI AS NM MD --quantTranscriptomeBan IndelSoftclipSingleend`; note that last parameter that I will come back to later. Also, the paper referenced above also describes a new capability present in recent versions of salmon that allow it to index the entire genome (as well as the transcriptome) to have the former act as a decoy. This allows avoiding what might otherwise be spurious mappings that result when one considers only the transcriptome as a source of mapping. There are a number of ways to proceed on this front, but this is a good place to first check for discrepancy (and the paper gives a good overview of the relative tradeoffs and merits of different alignment approaches). * Salmon and RSEM use related but distinct optimization algorithms by default. RSEM uses the EM algorithm, and salmon uses the variational Bayesian EM algorithm. The latter tends to induce more sparse solutions. This is simply because they are optimizing slightly different objectives. It is very difficult to say in general if one is ""better"" than the other in a blanket way, but [there is previous literature to support that the VBEM may be more accurate](https://academic.oup.com/bioinformatics/article/29/18/2292/239795). However, while RSEM only implements the EM algorithm, salmon actually implements and provides a switch to use either. So, if you want to test the effect of this difference, you can run salmon with the `--useEM` algorithm. This will tell salmon to use the ""classic"" EM algorithm and will eliminate this source of variation. * As with the other question you asked, there may be a _small_ discrepancy depending on when enforcement of a stranded library kicks in under salmon's `A` library type. You can eliminate that variable by simply providing `-l SF` to match the library type being used with RSEM. * Coming back to the `IndelSoftclipSingleend` parameter I mentioned in the first point; RSEM disallows indels in the align",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590:2863,optimiz,optimizing,2863,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590,2,['optimiz'],['optimizing']
Performance," Boundary at 100 ; [2019-01-29 09:56:53.219] [alevinLog] [info] Learned InvCov: 114.414 normfactor: 148.807; [2019-01-29 09:56:53.219] [alevinLog] [info] Total 293(has 193 low confidence) barcodes; [2019-01-29 09:56:53.224] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:56:53.254] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:56:53.255] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:56:53.255] [alevinLog] [info] Total Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence classes ; [2019-01-29 09:57:36.601] [jointLog] [warning] Only 242520 f",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8343,Load,Loading,8343,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance," Done importing white-list Barcodes; [2019-06-04 15:58:27.583] [alevinLog] [warning] Skipping 50 Barcodes as no read was mapped; [2019-06-04 15:58:27.583] [alevinLog] [info] Total 0 white-listed Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [warning] Total 100% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 15:58:27.594] [alevinLog] [info] Done populating Z matrix; [2019-06-04 15:58:27.594] [alevinLog] [warning] 0 Whitelisted Barcodes with 0 frequency; [2019-06-04 15:58:27.594] [alevinLog] [info] Done indexing Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [info] Total Unique barcodes found: 5; [2019-06-04 15:58:27.594] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 15:58:27.617] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 15:58:27.617] [alevinLog] [info] parsing read library format; [2019-06-04 15:58:27.617] [jointLog] [info] There is 1 library.; [2019-06-04 15:58:27.750] [jointLog] [info] Loading Quasi index; [2019-06-04 15:58:27.750] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 15:58:27.750] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 15:58:28.626] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 15:58:28.866] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 15:58:28.900] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 15:58:28.922] [stderrLog] [info] Computing transcript lengths; [2019-06-04 15:58:28.922] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 15:58:38.645] [jointLog] [info] done; [2019-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:2186,Load,Loading,2186,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['Load'],['Loading']
Performance," Done indexing Barcodes; [2018-08-29 11:28:19.437] [alevinLog] [info] Total Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33:18.039] [jointLog] [warning] Found 187 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-08-29 11:33:18.039] [jointLog] [info] Mapping rate = 43.5974%. [2018-08-29 11:33:18.039] [jointLog] [info] finished quantifyLibrary(); Analyzed 14 cells (0% of all).vinLog] [info] Starting optimizer; ......; ......; Analyzed 544 cells (16% of all). ERROR: cell doesn't have any read count; -------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3829,load,loading,3829,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['load'],['loading']
Performance," Done indexing Barcodes; [2018-11-29 22:28:17.434] [alevinLog] [info] Total Unique barcodes found: 3773873; [2018-11-29 22:28:17.434] [alevinLog] [info] Used Barcodes except Whitelist: 49866; [2018-11-29 22:28:18.184] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-11-29 22:28:18.184] [alevinLog] [info] parsing read library format; [2018-11-29 22:28:18.184] [jointLog] [info] There is 1 library.; [2018-11-29 22:28:18.324] [jointLog] [info] Loading Quasi index; [2018-11-29 22:28:18.325] [jointLog] [info] Loading 32-bit quasi index; [2018-11-29 22:28:18.325] [stderrLog] [info] Loading Suffix Array; [2018-11-29 22:28:19.339] [stderrLog] [info] Loading Transcript Info; [2018-11-29 22:28:19.536] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-29 22:28:19.554] [stderrLog] [info] There were 64,431 set bits in the bit array; [2018-11-29 22:28:19.561] [stderrLog] [info] Computing transcript lengths; [2018-11-29 22:28:19.561] [stderrLog] [info] Waiting to finish loading hash; [2018-11-29 22:28:23.502] [stderrLog] [info] Done loading index; [2018-11-29 22:28:23.502] [jointLog] [info] done; [2018-11-29 22:28:23.502] [jointLog] [info] Index contained 64,431 targets. processed 178 Million fragments; hits: 212754413, hits per frag: 1.19535. [2018-11-29 22:40:56.510] [jointLog] [info] Computed 110,023 rich equivalence classes for further processing; [2018-11-29 22:40:56.510] [jointLog] [info] Counted 95,071,703 total reads in the equivalence classes; [2018-11-29 22:40:56.510] [jointLog] [info] Mapping rate = 53.3587%. [2018-11-29 22:40:56.510] [jointLog] [info] finished quantifyLibrary(); [2018-11-29 22:41:01.682] [alevinLog] [info] Starting optimizer. Analyzed 12346 cells (100% of all).; Skipped Barcodes are from High Confidence Region; Should not happen%. **Desktop (please complete the following information):**; - OS: macOS; - Version: 10.14.1. **Additional context**; This failure comes when analyzing data from the new 10X v3 chemistry. Initial",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324:2659,load,loading,2659,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324,1,['load'],['loading']
Performance," Done indexing Barcodes; [2019-01-29 09:56:53.255] [alevinLog] [info] Total Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence classes ; [2019-01-29 09:57:36.601] [jointLog] [warning] Only 242520 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2019-01-29 09:57:36.601] [jointLog] [info] Mapping rate = 8.94141%. [2019-01-29 09:57:36.601] [jointLog] [info] finished quantifyLibrary(). Analyzed 293 cells (100% of all).; [2019-01-29 09:57:40.090] [alevinLog] [info] Total 206902 UMI ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8746,load,loading,8746,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['load'],['loading']
Performance," Done indexing Barcodes; [2019-06-23 18:11:52.507] [alevinLog] [info] Total Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: 26644540, hits per frag: 0.249194. [2019-06-23 18:14:43.418] [jointLog] [info] Computed 90,673 rich equivalence classes for further processing; [2019-06-23 18:14:43.418] [jointLog] [info] Counted 5,043,781 total reads in the equivalence classes ; [2019-06-23 18:14:43.419] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2019-06-23 18:14:43.419] [jointLog] [warning] Found 494 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-06-23 18:14:43.419] [jointLog] [info] Mapping ra",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5614,load,loading,5614,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['load'],['loading']
Performance," Done indexing Barcodes; [2019-07-09 09:17:08.067] [alevinLog] [info] Total Unique barcodes found: 7881525; [2019-07-09 09:17:08.067] [alevinLog] [info] Used Barcodes except Whitelist: 84951; [2019-07-09 09:17:08.128] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-07-09 09:17:08.128] [alevinLog] [info] parsing read library format; [2019-07-09 10:02:26.992] [alevinLog] [info] Starting optimizer. [2019-07-09 10:13:56.661] [alevinLog] [info] Total 99488568.00 UMI after deduplicating.; [2019-07-09 10:13:56.701] [alevinLog] [info] Clearing EqMap; Might take some time.; [2019-07-09 10:14:11.020] [alevinLog] [info] Starting Import of the gene count matrix of size 1192x60053.; [2019-07-09 10:14:11.286] [alevinLog] [info] Done initializing the empty matrix.; [2019-07-09 10:14:13.421] [alevinLog] [info] Done Importing gene count matrix for dimension 1192x60053; [2019-07-09 10:14:13.622] [alevinLog] [info] Starting white listing; [2019-07-09 10:14:13.627] [alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2019-07-09 10:14:13.627] [alevinLog] [info] Total 1192 barcodes found; [2019-07-09 10:14:13.627] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-07-09 10:14:13.627] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-07-09 10:14:13.627] [alevinLog] [info] Starting to make feature Matrix; [2019-07-09 10:14:13.885] [alevinLog] [info] Done making regular featues; [2019-07-09 10:14:13.885] [alevinLog] [info] Done making feature Matrix; [2019-07-09 10:14:13.891] [alevinLog] [info] Finished white listing; [2019-07-09 10:14:13.909] [alevinLog] [info] Finished optimizer; ```. Indeed the fractions of BC thrown away is huge. I might need to try your `--expectCells/--forceCells` option - but not sure how this parameter influences final output? i.e. how to select a feasible number - 8000 might not be optimal strictly speaking. Thanks!; Chelsea",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510547693:2703,optimiz,optimizer,2703,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510547693,1,['optimiz'],['optimizer']
Performance," ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warni",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:3422,Load,Loadable,3422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance," I believe I just need to set the parameters right, but I also want to set the parameters in a general way so that my script can work across different species with different input RNAseq data. The other problem is that we currently do not have an idea of what proportion of these two versions of the gene should actually exist in the RNAseq data I have (which we didn't perform but just grabbed a random sample from GenBank to test with). My adviser wants to first try and test it computationally first and then verify it in the lab (which is somewhat backwards in my mind, as it's really just a shot in the dark and from my preliminary analysis of Salmon, different parameters can drastically change the proportions of the two versions). . As you can see below, I have tried some parameter settings that I thought would be helpful (particularly ```--quasiCoverage```). But again I could be wrong and would like to know your opinions in the matter. . These runs were all performed with this 'default' run: ; ```; salmon quant -i index -l A -1 reads_1.fq -2 reads_2.fq --validateMappings -p 20 --numPreAuxModelSamples 250 --numAuxModelSamples 1000 -o output ; ```; I changes the ```AuxModelSamples``` to low values as I was generally only mapping 6000 reads to the two transcripts in total, so I didn't think they were working at the default settings. Below is also a small chart of some of my runs (which included quasi-mapping and selective-alignment), but what you can get is that there is a large variance between parameters. Particularly ```--seqBias``` showed a dramatic drop in predicted T - 2 transcripts. ![image](https://user-images.githubusercontent.com/29610303/61421680-5899aa00-a8c5-11e9-8349-bd708316599d.png). Any suggestions onto parameters settings to help me with this narrow question?. Now onto some questions regarding some outputs. 1. I run into a segmentation fault (core dumped) when I try to run the experimental ```--posBias```. I am new to RNAseq, but I thought this might he",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/401:2313,perform,performed,2313,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/401,1,['perform'],['performed']
Performance, Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { fastq_files/SRR2454059.fq.gz }; ### [ threads ] => { 8 }; ### [ libType ] => { ISF }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_quant/hg38.analysisSet_knownGene/SRR2454059 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 100 }; Logs will be written to salmon_quant/hg38.analysisSet_knownGene/SRR2454059/logs; [2016-12-13 12:44:39.271] [jointLog] [info] parsing read library format; [2016-12-13 12:44:39.271] [jointLog] [info] There is 1 library.; [2016-12-13 12:44:39.836] [jointLog] [info] Loading Quasi index; [2016-12-13 12:44:39.836] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 12:44:39.836] [stderrLog] [info] Loading Suffix Array ; [2016-12-13 12:44:43.439] [stderrLog] [info] Loading Transcript Info ; [2016-12-13 12:44:44.355] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 12:44:44.613] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 12:44:44.629] [stderrLog] [info] Computing transcript lengths; [2016-12-13 12:44:44.629] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 12:44:44.629] [stderrLog] [info] Done loading index; [2016-12-13 12:44:44.629] [jointLog] [info] done; [2016-12-13 12:44:44.629] [jointLog] [info] Index contained 182608 targets; [2016-12-13 12:44:49.583] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in ; single-end libraries. Please use this option with caution. processed 19000000 fragments; hits: 65897660; hits per frag: 3.46963. [2016-12-13 12:46:51.776] [joint,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:1483,Load,Loading,1483,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['Load'],['Loading']
Performance," Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 13.512 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 382.03 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.4861 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.4236 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.031 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.983 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; --------------------------------------",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:1135,Load,Loading,1135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance," InvCov: 114.414 normfactor: 148.807; [2019-01-29 09:56:53.219] [alevinLog] [info] Total 293(has 193 low confidence) barcodes; [2019-01-29 09:56:53.224] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:56:53.254] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:56:53.255] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:56:53.255] [alevinLog] [info] Total Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence classes ; [2019-01-29 09:57:36.601] [jointLog] [warning] Only 242520 fragments were mapped, but the number of burn-in fragments was set to 500",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8416,Load,Loading,8416,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance," Run B. ![image](https://cloud.githubusercontent.com/assets/361470/20741292/4f8243a0-b697-11e6-93ae-29d4b48327cd.png). ![image](https://cloud.githubusercontent.com/assets/361470/20741299/60f84c1a-b697-11e6-9f83-1554ff471e94.png). So, as you can see, there is a substantial amount of uncertainty in RunA, especially for `MSAD_200218.t1`. This can explain how you see this transcript obtaining different numbers of reads over different executions for Run A. Specifically, the inferential uncertainty for this transcript is high, and though the mean of the posterior is close to the value you report above, the range is quite large (200 - 1200) reads (potentially even larger with more bootstraps, but 100 gives us a reasonable window on posterior variance). On the other hand, the EM algorithm *really* wants to assign ~0.8 reads to `MSAD_157177.t1` in Run B. To test how much this might be the result of the tendency of the EM algorithm toward sparsity, I tried processing both samples with Salmon's `--useVBOpt` flag --- causing it to use the variational bayesian optimization algorithm, which yields considerably more *regularized* estimates. The posterior distributions obtained using the VB optimizer are:. ### Run A (VB Opt). ![image](https://cloud.githubusercontent.com/assets/361470/20741629/916b3446-b699-11e6-9f92-b8b6d3519981.png). ![image](https://cloud.githubusercontent.com/assets/361470/20741636/98510f06-b699-11e6-8d9f-34f1c353c3e6.png). ### Run B (VB Opt). ![image](https://cloud.githubusercontent.com/assets/361470/20741642/a1341686-b699-11e6-9a87-8a30f87cd49c.png). ![image](https://cloud.githubusercontent.com/assets/361470/20741645/a7340d5c-b699-11e6-90dd-55f9795bac8f.png). So, while there are some small differences for Run A and transcript `MSAD_200218.t1` in Run B, you can see that the most striking difference is `MSAD_157177.t1` in Run B. The number of estimated reads isn't quite as high as with eXpress, but a considerable number of reads map to `MSAD_157177.t1` (and the ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263793798:1720,optimiz,optimization,1720,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263793798,1,['optimiz'],['optimization']
Performance, Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:40:22.618] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:40:22.619] [jointLog] [info] Starting optimizer; [2016-12-13 22:40:22.904] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:40:22.911] [jointLog] [info] iteration = 0 | max rel diff. = 299.976; [2016-12-13 22:40:23.620] [jointLog] [info] iteration = 100 | max rel diff. = 0.121769; [2016-12-13 22:40:24.367] [jointLog] [info] iteration = 200 | max rel diff. = 0.103587; [2016-12-13 22:40:25.102] [jointLog] [info] iteration = 300 | max rel diff. = 0.144748; [2016-12-13 22:40:25.815] [jointLog] [info] iteration = 400 | max rel diff. = 0.231057; [2016-12-13 22:40:26.505] [jointLog] [info] iteration = 500 | max rel diff. = 0.0156154; [2016-12-13 22:40:27.020] [jointLog] [info] iteration = 570 | max rel diff. = 0.00955966; [2016-12-13 22:40:27.052] [jointLog] [info] Finished optimizer; [2016-12-13 22:40:27.052] [jointLog] [info] writing output. [2016-12-13 22:40:27.523] [jointLog] [info] Starting Gibbs Sampler 1 week; 100% [=====================================================] in 44s; [2016-12,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:2586,optimiz,optimizer,2586,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,2,['optimiz'],['optimizer']
Performance, Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:45:33.234] [jointLog] [info] Starting optimizer; [2016-12-13 22:45:33.516] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:45:33.523] [jointLog] [info] iteration = 0 | max rel diff. = 299.95; [2016-12-13 22:45:34.217] [jointLog] [info] iteration = 100 | max rel diff. = 0.122252; [2016-12-13 22:45:34.912] [jointLog] [info] iteration = 200 | max rel diff. = 0.102915; [2016-12-13 22:45:35.612] [jointLog] [info] iteration = 300 | max rel diff. = 0.145792; [2016-12-13 22:45:36.357] [jointLog] [info] iteration = 400 | max rel diff. = 0.217489; [2016-12-13 22:45:37.055] [jointLog] [info] iteration = 500 | max rel diff. = 0.0159298; [2016-12-13 22:45:37.628] [jointLog] [info] iteration = 569 | max rel diff. = 0.00958049; [2016-12-13 22:45:37.653] [jointLog] [info] Finished optimizer; [2016-12-13 22:45:37.653] [jointLog] [info] writing output. [2016-12-13 22:45:38.213] [jointLog] [info] Starting Gibbs Sampler; 100% [=====================================================] in 31s; [2016-12-13 22:4,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:2459,optimiz,optimizer,2459,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['optimiz'],['optimizer']
Performance," Ubuntu server. here is my command as well as the STDOUT output:. ```; salmon quant -p 16 --biasCorrect --libType IU -i ~./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ --numBootstraps 100 -o $base <(zcat ${base}_1.fastq.gz ) <(zcat ${base}_2.fastq.gz); Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0 ; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 16 }; # [ biasCorrect ] => { }; # [ libType ] => { IU }; # [ index ] => { ./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ }; # [ numBootstraps ] => { 100 }; # [ output ] => { 61LP1AAXX_8 } ; # [ ] => { /dev/fd/63 }; # [ ] => { /dev/fd/62 }; Logs will be written to 61LP1AAXX_8/logs; there is 0[2016-07-11 09:51:45.206] [jointLog] [info] parsing read library format; lib; Loading 32-bit quasi index[2016-07-11 09:51:45.328] [jointLog] [info] Loading Quasi index; [2016-07-11 09:51:45.736] [stderrLog] [info] Loading Suffix Array; [2016-07-11 09:51:45.771] [stderrLog] [info] Loading Position Hash; [2016-07-11 09:52:13.781] [stderrLog] [info] Loading Transcript Info; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09:52:39.858] [jointLog] [warning] ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:1024,Load,Loading,1024,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,1,['Load'],['Loading']
Performance," Youtube series, those datasets had mapping rates of nearly 90%. Comparing FastQC reports, my data was of similar/better quality than the data from the Youtube series. In case this is helpful in answering my question, this is the information from the logs for one of my samples:. ```; [2020-09-05 13:51:07.144] [jointLog] [info] setting maxHashResizeThreads to 1; [2020-09-05 13:51:07.144] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-09-05 13:51:07.159] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-09-05 13:51:07.159] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-09-05 13:51:07.159] [jointLog] [info] parsing read library format; [2020-09-05 13:51:07.159] [jointLog] [info] There is 1 library.; [2020-09-05 13:51:07.828] [jointLog] [info] Loading pufferfish index; [2020-09-05 13:51:07.876] [jointLog] [info] Loading dense pufferfish index.; [2020-09-05 13:51:49.487] [jointLog] [info] done; [2020-09-05 13:51:49.551] [jointLog] [info] Index contained 228,754 targets; [2020-09-05 13:51:50.523] [jointLog] [info] Number of decoys : 0; [2020-09-05 13:52:00.312] [jointLog] [info] Automatically detected most likely library type as SR; [2020-09-05 17:53:49.009] [jointLog] [info] Thread saw mini-batch with a maximum of 2.00% zero probability fragments; [2020-09-05 17:53:51.128] [jointLog] [info] Computed 344,342 rich equivalence classes for further processing; [2020-09-05 17:53:51.128] [jointLog] [info] Counted 20,897,706 total reads in the equivalence classes ; [2020-09-05 17:53:51.133] [jointLog] [info] Number of mappings discarded because of alignment score : 116,214,502; [2020-09-05 17:53:51.133] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 1,428,490; [2020-09-05 17:53:51.133] [jointLog] [info] Num",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/571:2062,Load,Loading,2062,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/571,1,['Load'],['Loading']
Performance," [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per frag: 1.25428[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 1873468, hits per frag: 1.25316[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2492702, hits per frag: 1.24947[A. [32mprocessed[31m 2500000 [32mfragments[0m; hits: 3114558, hits per frag: 1.24832[A. [32mprocessed[31m 3000000 [32mfragments[0m; hits: 3733674, hits per frag: 1.24664[A. [32mprocessed[31m 3500000 [32mfragments[0m; hits: 4356329, hits per frag: 1.24645[A. [32mprocessed[31m 4000000 [32mfragmen",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:4026,load,loading,4026,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['load'],['loading']
Performance," [2019-06-23 18:11:52.489] [alevinLog] [warning] Total 91.1983% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-23 18:11:52.507] [alevinLog] [info] Done populating Z matrix; [2019-06-23 18:11:52.507] [alevinLog] [info] Done indexing Barcodes; [2019-06-23 18:11:52.507] [alevinLog] [info] Total Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: 26644540, hits per frag: 0.249194. [2019-06-23 18:14:43.418] [jointLog] [info] Computed 90,673 rich equivalence classes for further processing; [2019-06-23 18:14:43.418] [jointLog] [info] Counted 5,043,781 total reads in the equivalence classes ; [2019-06-23 18:14:43.419] [jointLog] [info] Number of fragments discarded because they are best-ma",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5354,Load,Loading,5354,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance," [info] Done indexing Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [info] Total Unique barcodes found: 5; [2019-06-04 15:58:27.594] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 15:58:27.617] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 15:58:27.617] [alevinLog] [info] parsing read library format; [2019-06-04 15:58:27.617] [jointLog] [info] There is 1 library.; [2019-06-04 15:58:27.750] [jointLog] [info] Loading Quasi index; [2019-06-04 15:58:27.750] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 15:58:27.750] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 15:58:28.626] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 15:58:28.866] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 15:58:28.900] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 15:58:28.922] [stderrLog] [info] Computing transcript lengths; [2019-06-04 15:58:28.922] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 15:58:38.645] [jointLog] [info] done; [2019-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million fragments; processed 5 Million fragments; processed 5 Million fragments; hits: 0, hits per frag: 0. [2019-06-04 15:58:42.486] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2019-06-04 15:58:42.487] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2019-06-04 15:58:42.487] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2019-06-04 15:58:42.508] [jointLog] [info] Mapping rate = 0%. [2019-06-04 15:58:42.508] [jointLog] [info]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:2723,load,loading,2723,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['load'],['loading']
Performance, [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:40:22.618] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:40:22.619] [jointLog] [info] Starting optimizer; [2016-12-13 22:40:22.904] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:40:22.911] [jointLog] [info] iteration = 0 | max rel diff. = 299.976; [2016-12-13 22:40:23.620] [jointLog] [info] iteration = 100 | max rel diff. = 0.121769; [2016-12-13 22:40:24.367] [jointLog] [info] iteration = 200 | max rel diff. = 0.103587; [2016-12-13 22:40:25.102] [jointLog] [info] iteration = 300 | max rel diff. = 0.144748; [2016-12-13 22:40:25.815] [jointLog] [info] iteration = 400 | max rel diff. = 0.231057; [2016-12-13 22:40:26.505] [jointLog] [info] iteration = 500 | max rel diff. = 0.0156154; [2016-12-13 22:40:27.020] [jointLog] [info] iteration = 570 | max rel diff. = 0.00955966; [2016-12-13 22:40:27.052] [jointLog] [info] Finished optimizer; [2016-12-13 22:40:27.052] [jointLog] [info] writing output. [2016-12-13 22:40:27.523] [jointLog] [info] Starting Gibbs Sampler 1 week; 100% [=====================================================] in 44s; [2016-12-13 22:41:12.189] [jointLog] [info] Finished Gibbs Sampler; [2016-12-13 22:41:12.190] [jointLog] [warning] NOTE: Read Lib [SRR2454059.fq.gz] :. Detected a *potential* strand bias > 1% in an unstranded protocol check the file: test_quant/lib_format_counts.json for details; ```. edit: One note is that I was using my build of the same commit number. I'm running the executable you compiled now (since I had to put the appropriate libraries in the `LD_LIBRARY_PATH` to get it to be happy).,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:3363,optimiz,optimizer,3363,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,2,['optimiz'],['optimizer']
Performance," [info] Knee found left boundary at 127 ; [2018-06-12 21:08:55.712] [alevinLog] [warning] Gauss Prediction 12274 Too far from knee prediction skipping it; [2018-06-12 21:08:55.712] [alevinLog] [info] Learned InvCov: 255.229 normfactor: 12656.9; [2018-06-12 21:08:55.712] [alevinLog] [info] Total 327(has 200 low confidence) barcodes; [2018-06-12 21:08:55.895] [alevinLog] [info] Done True Barcode Sampling; [2018-06-12 21:08:56.092] [alevinLog] [info] Done populating Z matrix; [2018-06-12 21:08:56.093] [alevinLog] [info] Done indexing Barcodes; [2018-06-12 21:08:56.094] [alevinLog] [info] Total Unique barcodes found: 1530568; [2018-06-12 21:08:56.094] [alevinLog] [info] Used Barcodes except Whitelist: 4828; [2018-06-12 21:08:56.124] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-12 21:08:56.124] [alevinLog] [info] parsing read library format; [2018-06-12 21:08:56.124] [jointLog] [info] There is 1 library.; [2018-06-12 21:08:56.183] [jointLog] [info] Loading Quasi index; [2018-06-12 21:08:56.184] [jointLog] [info] Loading 32-bit quasi index; [2018-06-12 21:08:56.184] [stderrLog] [info] Loading Suffix Array ; [2018-06-12 21:08:56.530] [stderrLog] [info] Loading Transcript Info ; [2018-06-12 21:08:56.675] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-12 21:08:56.724] [stderrLog] [info] There were 36191 set bits in the bit array; [2018-06-12 21:08:56.729] [stderrLog] [info] Computing transcript lengths; [2018-06-12 21:08:56.729] [stderrLog] [info] Waiting to finish loading hash; [2018-06-12 21:08:58.508] [jointLog] [info] done; [2018-06-12 21:08:58.508] [jointLog] [info] Index contained 36191 targets; [2018-06-12 21:08:58.508] [stderrLog] [info] Done loading index. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; hits: 169917, hits per frag: 0.0489674[2018-06-12 21:0",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/237:3401,Load,Loading,3401,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/237,1,['Load'],['Loading']
Performance," [info] Knee found left boundary at 2385 ; [2018-08-29 11:28:19.290] [alevinLog] [warning] Gauss Prediction 0 Too far from knee prediction skipping it; [2018-08-29 11:28:19.290] [alevinLog] [info] Learned InvCov: 568.346 normfactor: 688.271; [2018-08-29 11:28:19.290] [alevinLog] [info] Total 3385(has 1000 low confidence) barcodes; [2018-08-29 11:28:19.297] [alevinLog] [info] Done True Barcode Sampling; [2018-08-29 11:28:19.433] [alevinLog] [info] Done populating Z matrix; [2018-08-29 11:28:19.437] [alevinLog] [info] Done indexing Barcodes; [2018-08-29 11:28:19.437] [alevinLog] [info] Total Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3294,Load,Loading,3294,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['Load'],['Loading']
Performance," [info] Learned InvCov: 254.933 normfactor: 13034.5; [2019-06-23 18:11:52.364] [alevinLog] [info] Total 384(has 200 low confidence) barcodes; [2019-06-23 18:11:52.383] [alevinLog] [info] Done True Barcode Sampling; [2019-06-23 18:11:52.489] [alevinLog] [warning] Total 91.1983% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-23 18:11:52.507] [alevinLog] [info] Done populating Z matrix; [2019-06-23 18:11:52.507] [alevinLog] [info] Done indexing Barcodes; [2019-06-23 18:11:52.507] [alevinLog] [info] Total Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: 26644540, hits per frag: 0.249194. [2019-06-23 18:14:43.418] [jointLog] [info] Computed 90,673 rich equivalence classes for further ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5145,Load,Loading,5145,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance," [info] Mapping rate = 21.8083%. [2016-01-03 00:37:31.905] [jointLog] [info] finished quantifyLibrary(); [2016-01-03 00:37:31.905] [jointLog] [info] Starting optimizer; [2016-01-03 00:37:33.275] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-03 00:37:33.279] [jointLog] [info] iteration = 0 | max rel diff. = 35.6186; [2016-01-03 00:37:33.533] [jointLog] [info] iteration = 100 | max rel diff. = 0.12044; [2016-01-03 00:37:33.755] [jointLog] [info] iteration = 200 | max rel diff. = 0.0493504; [2016-01-03 00:37:33.970] [jointLog] [info] iteration = 300 | max rel diff. = 0.0275491; [2016-01-03 00:37:34.194] [jointLog] [info] iteration = 400 | max rel diff. = 0.0216294; [2016-01-03 00:37:34.418] [jointLog] [info] iteration = 500 | max rel diff. = 0.0214024; [2016-01-03 00:37:34.640] [jointLog] [info] iteration = 600 | max rel diff. = 0.0132335; [2016-01-03 00:37:34.850] [jointLog] [info] iteration = 700 | max rel diff. = 0.0132363; [2016-01-03 00:37:35.066] [jointLog] [info] iteration = 800 | max rel diff. = 0.0122673; [2016-01-03 00:37:35.287] [jointLog] [info] iteration = 900 | max rel diff. = 0.012951; [2016-01-03 00:37:35.510] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0131479; [2016-01-03 00:37:35.643] [jointLog] [info] iteration = 1062 | max rel diff. = 0.00666119; [2016-01-03 00:37:35.653] [jointLog] [info] Finished optimizer; [2016-01-03 00:37:35.653] [jointLog] [info] writing output. [2016-01-03 00:37:35.920] [jointLog] [warning] NOTE: Read Lib [( /dev/fd/0, /dev/fd/0 )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: interlaced_salmon_out/libFormatCounts.txt for details; ```. (FYI, this might be a failed sample, I just grabbed on at random, hence the low mapping rate). There's a discrepancy of about 800k observed reads. The number of mapped fragments is roughly twice for the interleaved version. So it seems this strategy doesn't work right now.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784:5052,optimiz,optimizer,5052,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784,1,['optimiz'],['optimizer']
Performance," [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-03 00:34:21.030] [jointLog] [info] iteration = 0 | max rel diff. = 23.4889; [2016-01-03 00:34:21.167] [jointLog] [info] iteration = 100 | max rel diff. = 0.150549; [2016-01-03 00:34:21.304] [jointLog] [info] iteration = 200 | max rel diff. = 0.0517672; [2016-01-03 00:34:21.447] [jointLog] [info] iteration = 300 | max rel diff. = 0.0368208; [2016-01-03 00:34:21.578] [jointLog] [info] iteration = 400 | max rel diff. = 0.0237254; [2016-01-03 00:34:21.705] [jointLog] [info] iteration = 500 | max rel diff. = 0.0147784; [2016-01-03 00:34:21.834] [jointLog] [info] iteration = 600 | max rel diff. = 0.0131134; [2016-01-03 00:34:21.961] [jointLog] [info] iteration = 700 | max rel diff. = 0.0130094; [2016-01-03 00:34:22.092] [jointLog] [info] iteration = 800 | max rel diff. = 0.0100546; [2016-01-03 00:34:22.196] [jointLog] [info] iteration = 882 | max rel diff. = 0.00861472; [2016-01-03 00:34:22.205] [jointLog] [info] Finished optimizer; [2016-01-03 00:34:22.205] [jointLog] [info] writing output. [2016-01-03 00:34:22.433] [jointLog] [warning] NOTE: Read Lib [( reads_1.fastq, reads_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: normal_salmon_out/libFormatCounts.txt for details; ```. Then I ran. ```; cat all_reads.fastq | salmon quant -i /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa -l IU -1 /dev/fd/0 -2 /dev/fd/0 -o interlaced_salmon_out; ```. Now I get. ```; [2016-01-03 00:36:48.844] [jointLog] [info] parsing read library format; [2016-01-03 00:36:49.995] [jointLog] [info] Loading Quasi index; [2016-01-03 00:37:08.293] [jointLog] [info] done; [2016-01-03 00:37:25.106] [jointLog] [info] Computed 23484 rich equivalence classes for further processing; [2016-01-03 00:37:25.106] [jointLog] [info] Counted 667333 total reads in the equivalence classes; [2016-01-03 00:37:25.106] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784:2302,optimiz,optimizer,2302,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784,1,['optimiz'],['optimizer']
Performance," [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference sequence | Time = 240.84 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.9587 ms; -----------------------------------------; [2021-04-09 12:16:41.658] [jointLog] [info] done; [2021-04-09 12:16:41.658] [jointLog] [info] Index contained 45,375 targets; [2021-04-09 12:16:41.673] [jointLog] [info] Number of decoys : 1; [2021-04-09 12:16:41.673] [jointLog] [info] First decoy index : 45,374. [2021-04-09 12:16:42.811] [alevinLog] [info] Starting optimizer. [2021-04-09 12:16:42.800] [jointLog] [info] Computed 84 rich equivalence classes for further processing; [2021-04-09 12:16:42.800] [jointLog] [info] Counted 135 total reads in the equivalence classes; [2021-04-09 12:16:42.801] [jointLog] [info] Numbe",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:5190,Load,Loading,5190,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance," [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 650 us; -----------------------------------------; [2021-05-20 10:53:56.156] [jointLog] [info] done; [2021-05-20 10:53:56.156] [jointLog] [info] Index contained 44,026 targets. [2021-05-20 10:53:58.080] [jointLog] [info] Number of decoys : 0; [2021-05-20 10:54:28.729] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-20 11:34:48.022] [jointLog] [info] Computed 145,552 rich equivalence classes for further processing; [2021-05-20 11:34:48.022] [jointLog] [info] Counted 10,027,482 total reads in the equivalence classes ; [2021-05-20 11:34:48.050] [jointLog] [info] Number of mappings discarded becau",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:2925,Load,Loading,2925,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance, [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-20 10:53:54.760] [jointLog] [info] parsing read library format; [2021-05-20 10:53:54.760] [jointLog] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 650 us; -----------------------------------------; [2021-05-20 10:53:56.156] [jointLog] [info] done; [2021,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:2390,Load,Loading,2390,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance," [jointLog] [info] iteration = 100 | max rel diff. = 17.2222; [2022-05-14 01:26:09.253] [jointLog] [info] iteration = 200 | max rel diff. = 12.5822; [2022-05-14 01:26:10.641] [jointLog] [info] iteration = 300 | max rel diff. = 12.6466; [2022-05-14 01:26:11.976] [jointLog] [info] iteration = 400 | max rel diff. = 4.95752; [2022-05-14 01:26:13.272] [jointLog] [info] iteration = 500 | max rel diff. = 0.754259; [2022-05-14 01:26:14.546] [jointLog] [info] iteration = 600 | max rel diff. = 0.148902; [2022-05-14 01:26:15.788] [jointLog] [info] iteration = 700 | max rel diff. = 0.117727; [2022-05-14 01:26:17.074] [jointLog] [info] iteration = 800 | max rel diff. = 0.166671; [2022-05-14 01:26:18.385] [jointLog] [info] iteration = 900 | max rel diff. = 0.068019; [2022-05-14 01:26:19.646] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.00671654; [2022-05-14 01:26:19.646] [jointLog] [info] iteration = 1,001 | max rel diff. = 0.00671654; [2022-05-14 01:26:19.655] [jointLog] [info] Finished optimizer; [2022-05-14 01:26:19.655] [jointLog] [info] writing output . Then I generated another index similar to [using a full decoy of the genome](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/) as suggested above but I got this report. [2022-05-14 00:49:06.636] [jointLog] [info] Number of mappings discarded because of alignment score : 7,179,799; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 3,986,275; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 3,572,798; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 54,775; [2022-05-14 00:49:06.636] [jointLog] [info] Mapping rate = 62.2613%. [2022-05-14 00:49:06.636] [jointLog] [info] finished quantifyLibrary(); [2022-05-14 00:49:06.643] [jointLog] [info] Starting optimizer; [2022-05-14 00",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943:3527,optimiz,optimizer,3527,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943,1,['optimiz'],['optimizer']
Performance," [jointLog] [info] processed bias for 100.0% of the transcripts; [2021-05-20 11:35:02.630] [jointLog] [info] iteration = 100 | max rel diff. = 5.42568; [2021-05-20 11:35:03.124] [jointLog] [info] iteration = 200 | max rel diff. = 0.616163; [2021-05-20 11:35:03.614] [jointLog] [info] iteration = 300 | max rel diff. = 0.806405; [2021-05-20 11:35:04.117] [jointLog] [info] iteration = 400 | max rel diff. = 0.143529; [2021-05-20 11:35:04.611] [jointLog] [info] iteration = 500 | max rel diff. = 0.131881; [2021-05-20 11:35:05.124] [jointLog] [info] iteration = 600 | max rel diff. = 1.67827; [2021-05-20 11:35:05.631] [jointLog] [info] iteration = 700 | max rel diff. = 0.0151842; [2021-05-20 11:35:06.145] [jointLog] [info] iteration = 800 | max rel diff. = 0.135721; [2021-05-20 11:35:06.657] [jointLog] [info] iteration = 900 | max rel diff. = 0.0942774; [2021-05-20 11:35:06.882] [jointLog] [info] iteration = 945 | max rel diff. = 0.00880347; [2021-05-20 11:35:06.894] [jointLog] [info] Finished optimizer; [2021-05-20 11:35:06.894] [jointLog] [info] writing output . [2021-05-20 11:35:06.972] [jointLog] [warning] NOTE: Read Lib [[ /upload/uploads/files/public/1/Mice_A_batch2_1.fq.gz, /upload/uploads/files/public/1/Mice_A_batch2_2.fq.gz]] :. Detected a *potential* strand bias > 1% in an unstranded protocol check the file: /results/RNA-Seq/Mice_A_batch2/salmon_out/lib_format_counts.json for details. ```. I also run `STAR` alignment and `htseq-count` on the same sample to quantify expression at the gene level, where the alignment rate is high and quantification is ok:. ```; RNA Alignment Statistics for Mice_A_batch2. Started job on |	May 20 06:25:05; Started mapping on |	May 20 06:25:42; Finished on |	May 20 10:46:09; Mapping speed, Million of reads per hour |	37.44. Number of input reads |	162499486; Average input read length |	300; UNIQUE READS:; Uniquely mapped reads number |	141917701; Uniquely mapped reads % |	87.33%; Average mapped length |	298.28; Number of splices: Total |",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:6822,optimiz,optimizer,6822,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['optimiz'],['optimizer']
Performance," [puff::index::jointLog] [info] Clipped poly-A tails from 1,825 transcripts; wrote 344371 cleaned references; seqHash 256 : a4437735d0f94862f3c5321f8541b52b3e063d99afd1c4adaacc6b23ad10cc00; seqHash 512 : 29ef1f67a252009538c30d22ab52f1aae09605f9cd6eb731cb5866275eeb4f50917c409fdac10c5da1a6396687c8d3da64ab33dc7cb426dba961639385ce7040; nameHash 256 : 120179531963e6930022681ba9f4226ad0871ca0f6ae01f6c16be496fee9e03f; nameHash 512 : 3ba5b8d011fe981bf67b581cb6d3d83ae1b8d7885c868b7ab634bbf86448889fcc246b9e65374b79270f6d11d5a71ac6335910fcda2b1b9e86bcafe1ae3ae89f; [2020-07-04 15:10:22.800] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers; [2020-07-04 15:11:07.094] [puff::index::jointLog] [info] ntHll estimated 2630714644 distinct k-mers, setting filter size to 2^36; error: Can't open a temporary file; error: Can't read the input file; [2020-07-04 15:34:24.273] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory /scratch/jl2e19/salmon_index; size = 0; -----------------------------------------; | Loading contigs | Time = 84.402 us; -----------------------------------------; size = 0; -----------------------------------------; | Loading contig boundaries | Time = 30.909 us; -----------------------------------------; Number of ones: 0; Number of ones per inventory item: 512; Inventory entries filled: 1; [2020-07-04 15:34:24.273] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2020-07-04 15:34:24.273] [puff::index::jointLog] [info] contig count for validation: 0; [2020-07-04 15:34:24.274] [puff::index::jointLog] [info] Total # of Contigs : 0; [2020-07-04 15:34:24.274] [puff::index::jointLog] [info] Total # of numerical Contigs : 0; [2020-07-04 15:34:24.274] [puff::index::jointLog] [info]; Total # of segments we have position for : 0; [2020-07-04 15:34:24.277] [puff::index::jointLog] [info] total contig vec entries 0; [2020-07-04 15:34:24.277] [puff::index::jointLog] [info] bi",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/543:16269,Load,Loading,16269,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/543,1,['Load'],['Loading']
Performance," ] => quant ; ### [ libType ] => { A }; ### [ index ] => { /mnt/hgfs/Data/reference_data/mm10/default }; ### [ unmatedReads ] => { /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz }; ### [ output ] => { out }; ### [ threads ] => { 6 }; ### [ validateMappings ] => { }; ### [ gcBias ] => { }; Logs will be written to out/logs; [2021-09-20 16:29:51.663] [jointLog] [info] setting maxHashResizeThreads to 6; [2021-09-20 16:29:51.663] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:29:51.663] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:29:51.663] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:29:51.663] [jointLog] [info] parsing read library format; [2021-09-20 16:29:51.663] [jointLog] [info] There is 1 library.; [2021-09-20 16:29:51.736] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:29:51.738] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:1431,Load,Loading,1431,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance, ] => salmon ; ### [ command ] => quant ; ### [ index ] => { ./index }; ### [ libType ] => { U }; ### [ unmatedReads ] => { ./single.fastq }; ### [ output ] => { ./output }; ### [ allowOrphansFMD ] => { }; ### [ threads ] => { 16 }; ### [ incompatPrior ] => { 1e-20 }; ### [ biasSpeedSamp ] => { 1 }; ### [ fldMax ] => { 1000 }; ### [ fldMean ] => { 200 }; ### [ fldSD ] => { 80 }; ### [ forgettingFactor ] => { 0.65 }; ### [ maxOcc ] => { 200 }; ### [ maxReadOcc ] => { 100 }; ### [ numBiasSamples ] => { 2000000 }; ### [ numAuxModelSamples ] => { 5000000 }; ### [ numPreAuxModelSamples ] => { 1000000 }; ### [ numGibbsSamples ] => { 0 }; ### [ numBootstraps ] => { 0 }; ### [ vbPrior ] => { 0.001 }; Logs will be written to ./output/logs; [2018-08-16 19:47:14.418] [jointLog] [info] parsing read library format; [2018-08-16 19:47:14.418] [jointLog] [info] There is 1 library.; [2018-08-16 19:47:14.460] [stderrLog] [info] Loading Suffix Array ; [2018-08-16 19:47:14.459] [jointLog] [info] Loading Quasi index; [2018-08-16 19:47:14.459] [jointLog] [info] Loading 32-bit quasi index; [2018-08-16 19:47:15.044] [stderrLog] [info] Loading Transcript Info ; [2018-08-16 19:47:15.207] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-16 19:47:15.263] [stderrLog] [info] There were 173531 set bits in the bit array; [2018-08-16 19:47:15.285] [stderrLog] [info] Computing transcript lengths; [2018-08-16 19:47:15.285] [stderrLog] [info] Waiting to finish loading hash; [2018-08-16 19:47:20.808] [jointLog] [info] done; [2018-08-16 19:47:20.808] [jointLog] [info] Index contained 173531 targets; [2018-08-16 19:47:20.808] [stderrLog] [info] Done loading index. [A. [32mprocessed[31m 500002 [32mfragments[0m; hits: 2213374; hits per frag: 5.08859[A. [32mprocessed[31m 1000002 [32mfragments[0m; hits: 4422312; hits per frag: 4.78092[A. [32mprocessed[31m 1500006 [32mfragments[0m; hits: 6635818; hits per frag: 4.69843[A. [32mprocessed[31m 2000001 [32mfragments[0m; hits: 8846970; ,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271:24114,Load,Loading,24114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271,1,['Load'],['Loading']
Performance," ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /data2/csijcs/hg38/hg38.transcriptome.index }; ### [ libType ] => { A }; ### [ mates1 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/PBMC_AML_BM_001/PBMC_AML_BM_001_R1_001.fastq.gz }; ### [ mates2 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/PBMC_AML_BM_001/PBMC_AML_BM_001_R2_001.fastq.gz }; ### [ threads ] => { 16 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001/logs; [2018-07-30 15:41:42.232] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-30 15:41:42.232] [jointLog] [info] parsing read library format; [2018-07-30 15:41:42.232] [jointLog] [info] There is 1 library.; [2018-07-30 15:41:45.840] [jointLog] [info] Loading Quasi index; [2018-07-30 15:41:45.840] [jointLog] [info] Loading 32-bit quasi index; [2018-07-30 15:41:45.840] [stderrLog] [info] Loading Suffix Array ; [2018-07-30 15:42:39.168] [stderrLog] [info] Loading Transcript Info ; [2018-07-30 15:42:53.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-30 15:42:56.236] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-30 15:42:56.328] [stderrLog] [info] Computing transcript lengths; [2018-07-30 15:42:56.329] [stderrLog] [info] Waiting to finish loading hash; [2018-07-30 15:42:56.329] [stderrLog] [info] Done loading index; [2018-07-30 15:42:56.329] [jointLog] [info] done; [2018-07-30 15:42:56.329] [jointLog] [info] Index contained 203027 targets. processed 4000003 fragments; processed 298000000 fragments 0.071773[2018-07-30 15:43:47.415] [jointLog] [info] Automatically detected most likely library type as IU; hits: 20950511, hits per frag: 0.0703073[2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-bat",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261:1887,Load,Loading,1887,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261,1,['Load'],['Loading']
Performance," ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/PBMC_AML_BM_001/PBMC_AML_BM_001_R2_001.fastq.gz }; ### [ threads ] => { 16 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001/logs; [2018-07-30 15:41:42.232] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-30 15:41:42.232] [jointLog] [info] parsing read library format; [2018-07-30 15:41:42.232] [jointLog] [info] There is 1 library.; [2018-07-30 15:41:45.840] [jointLog] [info] Loading Quasi index; [2018-07-30 15:41:45.840] [jointLog] [info] Loading 32-bit quasi index; [2018-07-30 15:41:45.840] [stderrLog] [info] Loading Suffix Array ; [2018-07-30 15:42:39.168] [stderrLog] [info] Loading Transcript Info ; [2018-07-30 15:42:53.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-30 15:42:56.236] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-30 15:42:56.328] [stderrLog] [info] Computing transcript lengths; [2018-07-30 15:42:56.329] [stderrLog] [info] Waiting to finish loading hash; [2018-07-30 15:42:56.329] [stderrLog] [info] Done loading index; [2018-07-30 15:42:56.329] [jointLog] [info] done; [2018-07-30 15:42:56.329] [jointLog] [info] Index contained 203027 targets. processed 4000003 fragments; processed 298000000 fragments 0.071773[2018-07-30 15:43:47.415] [jointLog] [info] Automatically detected most likely library type as IU; hits: 20950511, hits per frag: 0.0703073[2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.06% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability f",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261:2164,Load,Loading,2164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261,1,['Load'],['Loading']
Performance, ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:38:54.413] [jointLog] [info] parsing read library format; [2016-12-13 22:38:54.413] [jointLog] [info] There is 1 library.; [2016-12-13 22:38:56.240] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:38:56.240] [jointLog] [info] Loading Quasi index; [2016-12-13 22:38:56.240] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:39:01.268] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:40:22.618] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:40:22.619] [jointLog] [info] Starting optimizer; [2016-12-13 22:40:22.904] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:40:22.911] [jointLog] [info] iteration = 0 | max rel diff. = 299.976; [2016-12-13 22:40:23.620] [jointLog] [info] iteration = 100 | max rel diff. = 0.121769; [2016-12-13 22:40:24.367] [jointLog] [,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:1908,load,loading,1908,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,2,['load'],['loading']
Performance, ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:45:33.234] [jointLog] [info] Starting optimizer; [2016-12-13 22:45:33.516] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 22:45:33.523] [jointLog] [info] iteration = 0 | max rel diff. = 299.95; [2016-12-13 22:45:34.217] [jointLog] [info] iteration = 100 | max rel diff. = 0.122252; [2016-12-13 22:45:34.912] [jointLog] [i,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1781,load,loading,1781,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['load'],['loading']
Performance," ] => { sample1 }; Logs will be written to sample1/logs; [2023-10-11 16:03:44.489] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2023-10-11 16:03:44.490] [jointLog] [info] parsing read library format; [2023-10-11 16:03:44.491] [jointLog] [info] There is 1 library.; [2023-10-11 16:03:45.109] [jointLog] [info] Loading Quasi index; [2023-10-11 16:03:45.111] [jointLog] [info] Loading 32-bit quasi index; [2023-10-11 16:03:45.173] [stderrLog] [info] Loading Suffix Array ; [2023-10-11 16:03:46.096] [stderrLog] [info] Loading Transcript Info ; [2023-10-11 16:03:46.382] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-10-11 16:03:46.474] [stderrLog] [info] There were 6195946 set bits in the bit array; [2023-10-11 16:03:46.481] [stderrLog] [info] Computing transcript lengths; [2023-10-11 16:03:46.481] [stderrLog] [info] Waiting to finish loading hash; [2023-10-11 16:03:56.007] [jointLog] [info] done; [2023-10-11 16:03:56.007] [jointLog] [info] Index contained 3744 targets; [2023-10-11 16:03:56.006] [stderrLog] [info] Done loading index; ; qemu: uncaught target signal 11 (Segmentation fault) - core dumped; .command.sh: line 9: 64 Segmentation fault salmon quant --validateMappings --threads 1 --libType A --index transcriptome-index --mates1 sample1_R1_001.trimmed.fastq.gz --mates2 sample1_R2_001.trimmed.fastq.gz --output sample1; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; Linux; - Version",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881:3150,Load,Loading,3150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881,1,['Load'],['Loading']
Performance," ] => { }; ### [ gcBias ] => { }; ### [ mates1 ] => { /upload/uploads/files/public/1/Mice_A_batch2_1.fq.gz }; ### [ mates2 ] => { /upload/uploads/files/public/1/Mice_A_batch2_2.fq.gz }; ### [ output ] => { /results/RNA-Seq/Mice_A_batch2/salmon_out }; Logs will be written to /results/RNA-Seq/Mice_A_batch2/salmon_out/logs; [2021-05-20 10:53:54.759] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-05-20 10:53:54.760] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-05-20 10:53:54.760] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-20 10:53:54.760] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-20 10:53:54.760] [jointLog] [info] parsing read library format; [2021-05-20 10:53:54.760] [jointLog] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Lo",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:1622,Load,Loading,1622,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance, ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further processing; [2016-12-15 16:01:44.937] [jointLog] [info] Counted 12227080 total reads in the equivalence classes; [2016-12-15 16:01:44.948] [jointLog] [info] Mapping rate = 72.5194%. [2016-12-15 16:01:44.948] [jointLog] [info] finished quantifyLibrary(); [2016-12-15 16:01:44.949] [jointLog] [info] Starting optimizer; [2016-12-15 16:01:45.059] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-15 16:01:45.075] [jointLog] [info] i,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1554,load,loading,1554,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['load'],['loading']
Performance," ] => { }; ### [ output ] => { ACV_REP2 }; Logs will be written to ACV_REP2/logs; [2023-02-23 09:39:48.709] [jointLog] [info] setting maxHashResizeThreads to 6; [2023-02-23 09:39:48.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-23 09:39:48.709] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading refe",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:9495,Load,Loading,9495,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance," a *potential* strand bias > 1% in an unstranded protocol check the file: Salmon_out/1-2-intestines-LDC4673/lib_format_counts.json for details; ```. HoweverÔºåwhen I try old version (0.9.1) or latest version (1.4.0), I got a normal mapping rate (77.1074%):. ```; [2021-04-20 10:08:58.047] [jointLog] [info] setting maxHashResizeThreads to 10; [2021-04-20 10:08:58.048] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-04-20 10:08:58.048] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-04-20 10:08:58.048] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-04-20 10:08:58.048] [jointLog] [info] parsing read library format; [2021-04-20 10:08:58.048] [jointLog] [info] There is 1 library.; [2021-04-20 10:08:58.145] [jointLog] [info] Loading pufferfish index; [2021-04-20 10:08:58.146] [jointLog] [info] Loading dense pufferfish index.; [2021-04-20 10:09:05.198] [jointLog] [info] done; [2021-04-20 10:09:05.198] [jointLog] [info] Index contained 77,653 targets; [2021-04-20 10:09:05.266] [jointLog] [info] Number of decoys : 0; [2021-04-20 10:09:05.902] [jointLog] [info] Automatically detected most likely library type as IU. [2021-04-20 10:11:39.181] [fileLog] [info]; At end of round 0. Observed 25525591 total fragments (25525591 in most recent round). [2021-04-20 10:11:39.181] [jointLog] [info] Computed 111,080 rich equivalence classes for further processing; [2021-04-20 10:11:39.181] [jointLog] [info] Counted 19,682,132 total reads in the equivalence classes; [2021-04-20 10:11:39.190] [jointLog] [warning] 0.00192356% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 15. [2021-04-20 10:11:39.190] [jointLog] [info] Number of mappings discarded because of alignment scor",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:4972,Load,Loading,4972,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['Load'],['Loading']
Performance, am quite rusty with the nuances of R. Thank you for your consideration and I hope to hear from the team soon!. ```; > sessionInfo(); R version 4.3.3 (2024-02-29); Platform: x86_64-conda-linux-gnu (64-bit); Running under: Ubuntu 22.04.4 LTS. Matrix products: default; BLAS/LAPACK: /home/chris/anaconda3/envs/r_and_python/lib/libopenblasp-r0.3.27.so; LAPACK version 3.12.0. locale:; [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ; [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ; [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ; [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ; [9] LC_ADDRESS=C LC_TELEPHONE=C ; [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C . time zone: America/New_York; tzcode source: system (glibc). attached base packages:; [1] stats graphics grDevices utils datasets methods base . other attached packages:; [1] Seurat_5.1.0 SeuratObject_5.0.2 sp_2.1-4 patchwork_1.2.0 ; [5] ggplot2_3.5.1 devtools_2.4.5 usethis_2.2.3 tximport_1.30.0 ; [9] fishpond_2.8.0 . loaded via a namespace (and not attached):; [1] RColorBrewer_1.1-3 jsonlite_1.8.8 ; [3] magrittr_2.0.3 spatstat.utils_3.0-5 ; [5] fs_1.6.4 zlibbioc_1.48.0 ; [7] vctrs_0.6.5 ROCR_1.0-11 ; [9] spatstat.explore_3.2-6 memoise_2.0.1 ; [11] RCurl_1.98-1.14 htmltools_0.5.8.1 ; [13] S4Arrays_1.2.0 SparseArray_1.2.2 ; [15] sctransform_0.4.1 parallelly_1.37.1 ; [17] KernSmooth_2.23-24 htmlwidgets_1.6.4 ; [19] ica_1.0-3 plyr_1.8.9 ; [21] plotly_4.10.4 zoo_1.8-12 ; [23] cachem_1.1.0 igraph_2.0.3 ; [25] mime_0.12 lifecycle_1.0.4 ; [27] pkgconfig_2.0.3 Matrix_1.6-5 ; [29] R6_2.5.1 fastmap_1.2.0 ; [31] GenomeInfoDbData_1.2.11 MatrixGenerics_1.14.0 ; [33] fitdistrplus_1.1-11 future_1.33.2 ; [35] shiny_1.8.1.1 digest_0.6.36 ; [37] colorspace_2.1-0 S4Vectors_0.40.2 ; [39] tensor_1.5 RSpectra_0.16-1 ; [41] irlba_2.3.5.1 pkgload_1.3.4 ; [43] GenomicRanges_1.54.1 progressr_0.14.0 ; [45] spatstat.sparse_3.1-0 fansi_1.0.6 ; [47] polyclip_1.10-6 httr_1.4.7 ; [49] abind_1.4-5 compiler_4.3.3 ; [51] remotes_2.5.0 withr_3.0.0 ; [53] fastDummie,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/942:2943,load,loaded,2943,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/942,1,['load'],['loaded']
Performance," am using Salmon and tried following up all steps but got 0 fragments mapped.. . 1) copied unzip Salmon-0.8.2_linux_x86_64 into folder in server; 2) exported path: export PATH=$PATH:/.../.../Salmon-0.8.2_linux_x86_64/bin/; 3) built index: salmon index -t salmon.index.human.052617.tar -i human_index; 4) now I want to preform quantification on fastq files (only one end of paired end, trimmed for 40 bp): ; salmon quant -i human_index -l U -r Sample1_r1_trimmed.fastq -p 5 -o quants/Sample1_quant. Logs will be written to quants/Sample1_quant/logs; [2017-10-25 10:57:25.879] [jointLog] [info] parsing read library format; [2017-10-25 10:57:25.879] [jointLog] [info] There is 1 library.; [2017-10-25 10:57:26.002] [jointLog] [info] Loading Quasi index; [2017-10-25 10:57:26.002] [jointLog] [info] Loading 32-bit quasi index; [2017-10-25 10:57:26.012] [jointLog] [info] done; [2017-10-25 10:57:26.012] [jointLog] [info] Index contained 28 targets; [2017-10-25 10:57:26.003] [stderrLog] [info] Loading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapping rate = 0%. [2017-10-25 10:58",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:1023,Load,Loading,1023,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,1,['Load'],['Loading']
Performance," are best-mapped to decoys : 0; [2021-04-16 16:57:15.488] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 32,784; [2021-04-16 16:57:15.493] [jointLog] [warning] Only 10700 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2021-04-16 16:57:15.493] [jointLog] [info] Mapping rate = 0.0417748%. [2021-04-16 16:57:15.493] [jointLog] [info] finished quantifyLibrary(); [2021-04-16 16:57:15.535] [jointLog] [info] Starting optimizer; [2021-04-16 16:57:15.564] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-04-16 16:57:15.568] [jointLog] [info] iteration = 0 | max rel diff. = 6.66952; [2021-04-16 16:57:16.080] [jointLog] [info] iteration = 100 | max rel diff. = 0.0161125; [2021-04-16 16:57:16.555] [jointLog] [info] iteration = 194 | max rel diff. = 0.000157223; [2021-04-16 16:57:16.558] [jointLog] [info] Finished optimizer; [2021-04-16 16:57:16.558] [jointLog] [info] writing output. [2021-04-16 16:57:16.681] [jointLog] [info] Computing gene-level abundance estimates; [2021-04-16 16:57:16.775] [jointLog] [info] There were 77689 transcripts mapping to 26673 genes; [2021-04-16 16:57:16.775] [jointLog] [info] NOTE: We recommend using tximport (https://bioconductor.org/packages/release/bioc/html/tximport.html) for aggregating transcript-level salmon abundance estimates to the gene level. It is more versatile, exposes more features, and allows considering multi-sample information during aggregation.; [2021-04-16 16:57:16.911] [jointLog] [info] Aggregating expressions to gene level; [2021-04-16 16:57:17.077] [jointLog] [info] done; [2021-04-16 16:57:17.088] [jointLog] [warning] NOTE: Read Lib [[ Trim/1-2-intestines-LDC4673.filtered.R1.fq.gz, Trim/1-2-intestines-LDC4673.filtered.R2.fq.gz]] :. Detected a *potential* strand bias > 1% in an unstranded protocol check the file: Salmon_out/1-2-intestines-LDC",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:3079,optimiz,optimizer,3079,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['optimiz'],['optimizer']
Performance," bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for further processing; [2018-12-05 15:45:46.198] [jointLog] [info] Counted 163,106,139 total reads in the equivalence classes ; [2018-12-05 15:45:46.199] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 15:45:46.199] [jointLog] [info] Mapping rate = 60.9633%. [2018-12-05 15:45:46.199] [jointLog] [info] finished quantifyLibrary(); [2018-12-05 15:45:47.617] [alevinLog] [info] Starting optimizer. Analyzed 5344 cells (100% of all).; [2018-12-05 15:47:14.597] [alevinLog] [info] Total 1870793 UMI after deduplicating.; [2018-12-05 15:47:14.693] [alevinLog] [info] Clearing EqMap; Might take some time.; [2018-12-05 15:47:18.921] [alevinLog] [info] Starting Import of the gene count matrix.; Exception : [std::bad_alloc]; alevin was invoked improperly.; For usage information, try alevin --help; Exiting.; ```. PBMC 3k shell log:; ```; ~/software/salmon/scripts/v1_10x/run.sh salmon alevin -lISR -b pbmc3k_fastqs/ --gemcode -i ../transcripts_index_salmon/ -p 8 -o alevin_output --tgMap ../hg_transcriptome/tx2gene.tsv. TEMPDIR is /tmp/tmp.WnzMm7GQBO; Running command [salmon alevin -lISR --gemcode -i ../transcripts_index_salmon/ -p 8 -o alevin_output --tgMap ../hg_transcriptome/tx2gene.tsv -1 /tmp/tmp.WnzMm7GQBO/p1.fa -2 /tmp/tmp.WnzMm7GQBO/p2.fa -r pbmc3k_fastqs/read-I1_si-ACGCGGAA_lane-001-chunk-001.fastq.gz; pbmc3k_fastqs/read-I1_si-ACGCGGAA_lane-002-chunk-000.fastq.gz",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:8441,optimiz,optimizer,8441,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['optimiz'],['optimizer']
Performance," bp reads). I've tried running these samples through the `nf-core/rnaseq` pipeline, but the pipeline took an age to run before dying at the `salmon quant` steps. Some samples finished in about 12 minutes. Others timed out after 8+ hours. - Successful log:. ```; [2023-02-22 16:33:49.782] [jointLog] [info] setting maxHashResizeThreads to 6; [2023-02-22 16:33:49.782] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-22 16:33:49.782] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-22 16:33:49.782] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-22 16:33:49.782] [jointLog] [info] parsing read library format; [2023-02-22 16:33:49.783] [jointLog] [info] There is 1 library.; [2023-02-22 16:33:49.784] [jointLog] [info] Loading pufferfish index; [2023-02-22 16:33:49.784] [jointLog] [info] Loading dense pufferfish index.; [2023-02-22 16:34:17.987] [jointLog] [info] done; [2023-02-22 16:34:18.037] [jointLog] [info] Index contained 245549 targets; [2023-02-22 16:34:19.908] [jointLog] [info] Number of decoys : 194; [2023-02-22 16:34:19.908] [jointLog] [info] First decoy index : 245314 ; [2023-02-22 16:39:30.638] [jointLog] [info] Thread saw mini-batch with a maximum of 1.10% zero probability fragments; [2023-02-22 16:39:30.653] [jointLog] [info] Thread saw mini-batch with a maximum of 1.02% zero probability fragments; [2023-02-22 16:39:30.653] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2023-02-22 16:39:30.654] [jointLog] [info] Thread saw mini-batch with a maximum of 1.12% zero probability fragments; [2023-02-22 16:39:30.679] [jointLog] [info] Thread saw mini-batch with a maximum of 1.02% zero probability fragments; [2023-02-22 16:39:30.680] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragmen",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:1212,Load,Loading,1212,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance," decoys or the organism's genome as a decoy whenever possible. . 4) Related to @k3yavi's response and my elaboration above: we have dropped quasi-mapping from 1.0.0 (though something akin to it may return in the future if there is sufficient demand and if the shortcomings described in the manuscript can be overcome). However, as I mention in part 3 above, this doesn't mean it's not possible to use v1.0.0 without an explicit decoy sequence. The `--decoy` flag of the indexing command is optional, not required. We will update this in the documentation making it more explicit. However, as @k3yavi points out, it is true that if you wish to use quasi-mapping and selective-alignment against the full genome on the same machine, you will need both versions, as quasi-mapping is supported only in the [RapMap](https://github.com/COMBINE-lab/RapMap/tree/develop-salmon), while indexing something on the scale of the genome when not using the [pufferfish-based](https://github.com/COMBINE-lab/pufferfish/tree/develop) index has tremendous memory requirements (as is not recommended ). 5 & 6) To re-iterate @k3yavi's answer --- the extra flags used in the pre-print were only for the purpose of holding as many variables fixed as possible when comparing different approaches. It continues to be recommended to use the VBEM over the EM; it seems to perform better with respect to the ways in which we can measure and such improvements have also been documented in [other work](https://www.ncbi.nlm.nih.gov/pubmed/23821651). The _main_ effect of `--mimicBT2` is to discard orphan alignments for the purposes of quantification. This is a more strict requirement than the default behavior of allowing orphans if there is no satisfactory alignment of both ends of a fragment. However, there is no obvious reason why it is better behavior than accounting for these orphan fragments (when appropriately adjusting the conditional probability given their distance from the transcript boundaries, as salmon does).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390:2739,perform,perform,2739,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390,2,['perform'],['perform']
Performance," end, trimmed for 40 bp): ; salmon quant -i human_index -l U -r Sample1_r1_trimmed.fastq -p 5 -o quants/Sample1_quant. Logs will be written to quants/Sample1_quant/logs; [2017-10-25 10:57:25.879] [jointLog] [info] parsing read library format; [2017-10-25 10:57:25.879] [jointLog] [info] There is 1 library.; [2017-10-25 10:57:26.002] [jointLog] [info] Loading Quasi index; [2017-10-25 10:57:26.002] [jointLog] [info] Loading 32-bit quasi index; [2017-10-25 10:57:26.012] [jointLog] [info] done; [2017-10-25 10:57:26.012] [jointLog] [info] Index contained 28 targets; [2017-10-25 10:57:26.003] [stderrLog] [info] Loading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapping rate = 0%. [2017-10-25 10:58:22.293] [jointLog] [info] finished quantifyLibrary(); [2017-10-25 10:58:22.295] [jointLog] [info] Starting optimizer; [2017-10-25 10:58:22.308] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-10-25 10:58:22.308] [jointLog] [info] iteration = 0 | max rel diff. = 0.455425; [2017-10-25 10:58:22.308] [jointLog] [info] iteration = 50 | max rel diff. = ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:1415,load,loading,1415,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,1,['load'],['loading']
Performance," even seem to be trying to load the index! I obviously don't have the same set of reads you do, but here is what I get when using this pre-compiled binary on the 64-bit index (this is a small read set from single-cell data, which is why the total # of reads is so small). ```; rob@feynman:/mnt/scratch3/rob/JoshTest$ ~/SoftwareStaging/salmon/scripts/SalmonBeta-0.6.5-pre_CentOS5/bin/salmon quant -p 15 -i salmon_index -l IU -1 ../strange_peak/19232_1_1.fastq -2 ../strange_peak/19232_1_2.fastq -o quant_binary; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 15 }; # [ index ] => { salmon_index }; # [ libType ] => { IU }; # [ mates1 ] => { ../strange_peak/19232_1_1.fastq }; # [ mates2 ] => { ../strange_peak/19232_1_2.fastq }; # [ output ] => { quant_binary }; Logs will be written to quant_binary/logs; there is 1[2016-03-31 14:05:14.184] [jointLog] [info] parsing read library format; lib; Loading 64-bit quasi index[2016-03-31 14:05:14.266] [stderrLog] [info] Loading Suffix Array; [2016-03-31 14:05:14.266] [jointLog] [info] Loading Quasi index. [2016-03-31 14:07:58.647] [stderrLog] [info] Loading Transcript Info; [2016-03-31 14:08:59.703] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-31 14:09:06.744] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in the equivalence classes. [2016-03-31 14",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:1043,Load,Loading,1043,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['Load'],['Loading']
Performance," first column will be the per CB level mapping rate i.e. `#mapped reads/#raw reads`. If you wan't absolute values for per-CB reads and mapped reads, it should be in the file `filtered_cb_frequency.txt` and `mappedUMI.txt` respectively.; * `re: cellranger subsampling:` Correct me if I am wrong, when you say cellranger subsampling, do you mean the `cellranger aggregate` pipeline? It's possible you are talking about some other step which I am not aware of but if it's `aggregate` then I think it happens downstream of all the quantification. Indeed coverage bias correction is an important part of the aggregation step but in general it's not the only one and that's why we recommend using the `Seurat` package downstream of the Alevin quantified matrices. We will be more than happy to write a tutorial on, ""how to perform batch correction downstream of Alevin"" but in summary the following steps would be the gist of the process.; - Use Alevin w/o any modification to the `fastq` on both of your sample to generate the gene count matrices. (We have made a major upgrade to the Alevin. We'd recommend using [v0.12.0-alpha](https://github.com/COMBINE-lab/salmon/tree/v0.12.0-alpha) for now, we are planning to make an official release before the end of this week, currently you can use pre-release. Unfortunately, not available on conda yet).; - Import Alevin count matrices into R using [this](https://combine-lab.github.io/alevin-tutorial/2018/alevin-seurat/) tutorial .; - Use [this](https://satijalab.org/seurat/immune_alignment.html) to perform the batch correction. ; We do realize it's currently complicated to use things downstream of Alevin and are working constantly on improving the overall pipeline to make the analyses as smooth as possible. If you happen to write a tutorial of your own on doing the analyses, we'd be happy to include that in Alevin tutorial page. However, if you get stuck with any of the above steps do let us know, we'd be more than happy to help in that front too.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468:2673,perform,perform,2673,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468,2,['perform'],['perform']
Performance," indexing Barcodes; [2018-09-11 16:33:59.972] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-09-11 16:34:30.116] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report. [2018-09-11 16:34:30.116] [jointLog] [info] Mapping rate = 0%. [2018-09-11 16:34:30.116] [jointLog] [info] finished quantifyLibrary(); [2018-09-11 16:34:30.156] [alevinLog] [info] Starting optimizer; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:11511,load,loading,11511,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['load'],['loading']
Performance," iteration = 800 | max rel diff. = 0.690785; [2021-06-07 21:05:10.018] [jointLog] [info] iteration = 900 | max rel diff. = 0.0773815; [2021-06-07 21:05:11.677] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.0345327; [2021-06-07 21:05:13.336] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.172304; [2021-06-07 21:05:14.993] [jointLog] [info] iteration = 1,200 | max rel diff. = 1.17312; [2021-06-07 21:05:16.651] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.111995; [2021-06-07 21:05:18.313] [jointLog] [info] iteration = 1,400 | max rel diff. = 0.0191206; [2021-06-07 21:05:19.978] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.125342; [2021-06-07 21:05:21.640] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.024507; [2021-06-07 21:05:23.304] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.109772; [2021-06-07 21:05:23.469] [jointLog] [info] iteration = 1,711 | max rel diff. = 0.00699727; [2021-06-07 21:05:23.499] [jointLog] [info] finished optimizer; [2021-06-07 21:05:23.499] [jointLog] [info] writing output; [2021-06-07 21:05:23.829] [jointLog] [info] Staring Bootstrapping; [2021-06-07 21:05:23.962] [jointLog] [info] Will draw 30 bootstrap samples; [2021-06-07 21:05:23.962] [jointLog] [info] Optimizing over 430,852 equivalence classes; ```. `-l ISF`:; ```; Completed first pass through the alignment file.; Total # of mapped reads : 30,418,756; # of uniquely mapped reads : 8,515,058; # ambiguously mapped reads : 21,903,698; [2021-06-08 03:44:49.444] [jointLog] [info] Computed 430,882 rich equivalence classes for further processing; [2021-06-08 03:44:49.444] [jointLog] [info] Counted 29,619,881 total reads in the equivalence classes; [2021-06-08 03:44:49.445] [jointLog] [info] starting optimizer; [2021-06-08 03:44:49.599] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-06-08 03:44:49.615] [jointLog] [info] iteration = 0 | max rel diff. = 5827.73; [2021-06-08 03:44:51.123] [jointLog] [info] iter",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/669:4330,optimiz,optimizer,4330,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/669,1,['optimiz'],['optimizer']
Performance," mapped.. . 1) copied unzip Salmon-0.8.2_linux_x86_64 into folder in server; 2) exported path: export PATH=$PATH:/.../.../Salmon-0.8.2_linux_x86_64/bin/; 3) built index: salmon index -t salmon.index.human.052617.tar -i human_index; 4) now I want to preform quantification on fastq files (only one end of paired end, trimmed for 40 bp): ; salmon quant -i human_index -l U -r Sample1_r1_trimmed.fastq -p 5 -o quants/Sample1_quant. Logs will be written to quants/Sample1_quant/logs; [2017-10-25 10:57:25.879] [jointLog] [info] parsing read library format; [2017-10-25 10:57:25.879] [jointLog] [info] There is 1 library.; [2017-10-25 10:57:26.002] [jointLog] [info] Loading Quasi index; [2017-10-25 10:57:26.002] [jointLog] [info] Loading 32-bit quasi index; [2017-10-25 10:57:26.012] [jointLog] [info] done; [2017-10-25 10:57:26.012] [jointLog] [info] Index contained 28 targets; [2017-10-25 10:57:26.003] [stderrLog] [info] Loading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapping rate = 0%. [2017-10-25 10:58:22.293] [jointLog] [info] finished quantifyLibrary(); [2017-10-25 1",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:1090,Load,Loading,1090,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,1,['Load'],['Loading']
Performance," mates1 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/PBMC_AML_BM_001/PBMC_AML_BM_001_R1_001.fastq.gz }; ### [ mates2 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/PBMC_AML_BM_001/PBMC_AML_BM_001_R2_001.fastq.gz }; ### [ threads ] => { 16 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001/logs; [2018-07-30 15:41:42.232] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-30 15:41:42.232] [jointLog] [info] parsing read library format; [2018-07-30 15:41:42.232] [jointLog] [info] There is 1 library.; [2018-07-30 15:41:45.840] [jointLog] [info] Loading Quasi index; [2018-07-30 15:41:45.840] [jointLog] [info] Loading 32-bit quasi index; [2018-07-30 15:41:45.840] [stderrLog] [info] Loading Suffix Array ; [2018-07-30 15:42:39.168] [stderrLog] [info] Loading Transcript Info ; [2018-07-30 15:42:53.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-30 15:42:56.236] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-30 15:42:56.328] [stderrLog] [info] Computing transcript lengths; [2018-07-30 15:42:56.329] [stderrLog] [info] Waiting to finish loading hash; [2018-07-30 15:42:56.329] [stderrLog] [info] Done loading index; [2018-07-30 15:42:56.329] [jointLog] [info] done; [2018-07-30 15:42:56.329] [jointLog] [info] Index contained 203027 targets. processed 4000003 fragments; processed 298000000 fragments 0.071773[2018-07-30 15:43:47.415] [jointLog] [info] Automatically detected most likely library type as IU; hits: 20950511, hits per frag: 0.0703073[2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261:2025,Load,Loading,2025,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261,1,['Load'],['Loading']
Performance," message(""Boost_FOUND = ${Boost_FOUND}""); @@ -571,7 +574,22 @@; endif(); ; ## Try and find TBB first; -find_package(TBB 2018.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy); +if(DEFINED ENV{ROOT_LIBTBB}); + message(""ROOT_LIBTBB in env""); + set(ROOT_LIBTBB ); + set(TBB_DIR $ENV{ROOT_LIBTBB}); + set(TBB_INCLUDE_DIRS ${TBB_DIR}/include); + set(TBB_INCLUDE_DIR ${TBB_DIR}/include); + set(TBB_LIBRARY_DIRS ${TBB_DIR}/lib); + set(TBB_LIBRARY ${TBB_DIR}/lib); + set(TBB_LIB_DIR ${TBB_DIR}/lib); + set(TBB_VERSION ""2019.6""); + set(TBB_FOUND TRUE); +else(); + message(""ROOT_LIBTBB NOT in env""); + find_package(TBB 2018.0 COMPONENTS tbb tbbmalloc tbbmalloc_proxy); +endif(); +; ; if (${TBB_FOUND}); if (${TBB_VERSION} VERSION_GREATER_EQUAL 2018.0); @@ -696,7 +714,19 @@; #message(""TBB_LIBRARY_DIRS ${TBB_LIBRARY_DIRS}""); #message(""TBB_LIBRARIES ${TBB_LIBRARIES} ""); ; -find_package(libgff); +if(DEFINED ENV{ROOT_LIBGFF}); + message(""ROOT_LIBGFF in env""); + set(LIBGFF_DIR $ENV{ROOT_LIBGFF}); + set(LIBGFF_INCLUDE_DIRS ${LIBGFF_DIR}/include); + set(LIBGFF_INCLUDE_DIR ${LIBGFF_DIR}/include); + set(LIBGFF_LIBRARY_DIRS ${LIBGFF_DIR}/lib); + set(LIBGFF_LIBRARY ${LIBGFF_DIR}/lib); + set(LIBGFF_LIB_DIR ${LIBGFF_DIR}/lib); + set(LIBGFF_FOUND TRUE); +else(); + message(""ROOT_LIBGFF NOT in env""); + find_package(libgff); +endif(); if(NOT LIBGFF_FOUND); message(""Build system will compile libgff""); message(""==================================================================""); @@ -739,7 +769,14 @@; endif(); ; find_package(CURL); -find_package(libstadenio); +if(DEFINED ENV{ROOT_IO_LIB}); + set(ROOT_IO_LIB $ENV{ROOT_IO_LIB}); + set(STADEN_INC ""-I${ROOT_IO_LIB}/include""); + set(STADEN_LIB ""-L${ROOT_IO_LIB}/lib""); + set(LIBSTADENIO_FOUND TRUE); +else(); + find_package(libstadenio); +endif(); if (NOT LIBSTADENIO_FOUND); message(""Build system will compile Staden IOLib""); message(""==================================================================""). ```. In the meantime the binary distribution was loaded. . Thanks.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460:5507,load,loaded,5507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460,1,['load'],['loaded']
Performance," noticed that when the jobs fail due to memory (the actual issue in this thread) they fail after the `There is 1 library` message as shown below for one test:. ```; [2017-04-05 14:28:09.021] [jointLog] [info] parsing read library format; [2017-04-05 14:28:09.035] [jointLog] [info] There is 1 library.; terminate called without an active exception; /cm/local/apps/sge/var/spool/compute-064/job_scripts/420662: line 31: 28651 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipelin; e/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode; .v25.transcripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test7/${ID}; ```. Files that work well, keep on going:. ```; [2017-04-05 14:30:23.757] [jointLog] [info] parsing read library format; [2017-04-05 14:30:23.767] [jointLog] [info] There is 1 library.; [2017-04-05 14:30:24.378] [jointLog] [info] Loading Quasi index; ```. I don't know if that hint makes you suspect anything in `Salmon`. . Now, for some tests only task 2 runs and it turns out that task 2 has a smaller fastq file than the other 2:. ```bash; $ ls -lh merged_fastq/R1000[1-3]*; -rw-r--r-- 1 lcollado lieber_jaffe 6.2G Feb 20 12:39 merged_fastq/R10001_D2B1WACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 6.3G Feb 20 12:40 merged_fastq/R10001_D2B1WACXX_read2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 4.6G Feb 20 12:42 merged_fastq/R10002_C29P7ACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 4.7G Feb 20 12:44 merged_fastq/R10002_C29P7ACXX_read2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:47 merged_fastq/R10003_D19KGACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:50 merged_fastq/R10003_D19KGACXX_read2.fastq.gz; ```. where R10001* is task 1, R10002* is task 2, R10003* is task 3. So it looks like at some point Salmon is asking for some memory based on the input data. ## Strace test with ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:1180,Load,Loading,1180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['Load'],['Loading']
Performance," primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; No; **Describe the bug**; Running salmon 0.11.3, quasi mode, with 192M of ram.; Salmon quasi mode aborted with following message:; processed 14,000,000 fragmentsntLog] [info] Automatically detected most likely library type as SR; hits: 108,161,934; hits per frag: 8.53594terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; This happens when using a gffread-created transcripts.fa. Salmon built the index that have 309,566 targets. Do I just need more RAM? Or it is a bug.; ; More info as below:; [2018-10-24 11:14:15.505] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-24 11:14:15.505] [jointLog] [info] parsing read library format; [2018-10-24 11:14:15.505] [jointLog] [info] There is 1 library.; [2018-10-24 11:14:15.627] [jointLog] [info] Loading Quasi index; [2018-10-24 11:14:15.629] [jointLog] [info] Loading 32-bit quasi index; [2018-10-24 11:14:15.633] [stderrLog] [info] Loading Suffix Array; [2018-10-24 11:14:17.090] [stderrLog] [info] Loading Transcript Info; [2018-10-24 11:14:17.691] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-24 11:14:18.293] [stderrLog] [info] There were 309,566 set bits in the bit array; [2018-10-24 11:14:18.819] [stderrLog] [info] Computing transcript lengths; [2018-10-24 11:14:18.820] [stderrLog] [info] Waiting to finish loading hash; [2018-10-24 11:15:46.171] [jointLog] [info] done; [2018-10-24 11:15:46.171] [jointLog] [info] Index contained 309,566 targets; [2018-10-24 11:15:46.171] [stderrLog] [info] Done loading index. **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * Which version of salmon was used? 0.11.3; * How was salmon installed (compiled, downloaded executable, through bioconda)?. downloaded execitable. * Which reference (e.g. transcriptome) was used?; human; * Whi",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/304:999,Load,Loading,999,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/304,1,['Load'],['Loading']
Performance," quant -i ~/Reference_indexes/humangencodev27_transcripts_index_20181023 -l A -r ~/Downloads/ENCFF600FYP.fastq.gz -o ./salmon_test/ENCFF600FYP_quant; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { ~/Reference_indexes/humangencodev27_transcripts_index_20181023 }; ### [ libType ] => { A }; ### [ unmatedReads ] => { ~/Downloads/ENCFF600FYP.fastq.gz }; ### [ output ] => { ./salmon_test/ENCFF600FYP_quant }; Logs will be written to ./salmon_test/ENCFF600FYP_quant/logs; [2018-10-23 20:11:13.424] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-23 20:11:13.425] [jointLog] [info] parsing read library format; [2018-10-23 20:11:13.425] [jointLog] [info] There is 1 library.; [2018-10-23 20:11:13.513] [stderrLog] [info] Loading Suffix Array ; [2018-10-23 20:11:13.513] [jointLog] [info] Loading Quasi index; [2018-10-23 20:11:13.513] [jointLog] [info] Loading 32-bit quasi index; [2018-10-23 20:11:14.645] [stderrLog] [info] Loading Transcript Info ; [2018-10-23 20:11:14.975] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-23 20:11:15.031] [stderrLog] [info] There were 199,612 set bits in the bit array; [2018-10-23 20:11:15.042] [stderrLog] [info] Computing transcript lengths; [2018-10-23 20:11:15.042] [stderrLog] [info] Waiting to finish loading hash; [2018-10-23 20:11:20.618] [stderrLog] [info] Done loading index; [2018-10-23 20:11:20.618] [jointLog] [info] done; [2018-10-23 20:11:20.618] [jointLog] [info] Index contained 199,612 targets. Segmentation fault: 11; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; OSX; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. ProductName:	Mac OS ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303:2067,Load,Loading,2067,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303,1,['Load'],['Loading']
Performance," salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[2017-03-29 23:59:18.699] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 23:59:18.721] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-30 00:43:17.278] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-30 00:43:17.237] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-30 00:43:17.273] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-30 02:37:54.437] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-30 03:48:21.310] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-30 04:20:16.735] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-30 04:54:34.486] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-30 04:54:34.487] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-30 05:09:36.706] [stderrLog] [info] Done loading index; [00m[1m[2017-03-30 05:09:36.706] [jointLog] [info] done; [00m[1m[2017-03-30 05:09:36.790] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 699833, hits per frag: 1.4138[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1395659, hits per frag: 1.40267[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 2097294, hits per",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:9927,Load,Loading,9927,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['Load'],['Loading']
Performance," salmon ; ### [ command ] => quant ; ### [ libType ] => { A }; ### [ index ] => { /mnt/hgfs/Data/reference_data/mm10/default }; ### [ unmatedReads ] => { /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz }; ### [ output ] => { out }; ### [ threads ] => { 6 }; ### [ validateMappings ] => { }; Logs will be written to out/logs; [2021-09-20 16:20:48.240] [jointLog] [info] setting maxHashResizeThreads to 6; [2021-09-20 16:20:48.240] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:20:48.240] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:20:48.240] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:20:48.240] [jointLog] [info] parsing read library format; [2021-09-20 16:20:48.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:4395,Load,Loading,4395,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance," same tutorial above (2) gencode.v40.transcripts.fa.gz from Gencode only (3) Homo_sapiens.GRCh38.cdna.all.fa.gz from Ensembl ; But I still received the same warning and 0 fragments mapped results. Below is one of the log file (they all look similar):. > [2022-04-15 23:47:55.696] [jointLog] [info] setting maxHashResizeThreads to 48 ; [2022-04-15 23:47:55.696] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ; [2022-04-15 23:47:55.696] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ; [2022-04-15 23:47:55.696] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ; [2022-04-15 23:47:55.696] [jointLog] [info] parsing read library format ; [2022-04-15 23:47:55.696] [jointLog] [info] There is 1 library. ; [2022-04-15 23:47:55.833] [jointLog] [info] Loading pufferfish index ; [2022-04-15 23:47:55.833] [jointLog] [info] Loading dense pufferfish index. ; [2022-04-15 23:49:52.320] [jointLog] [info] done ; [2022-04-15 23:49:52.320] [jointLog] [info] Index contained 245,900 targets ; [2022-04-15 23:49:52.424] [jointLog] [info] Number of decoys : 639 ; [2022-04-15 23:49:52.424] [jointLog] [info] First decoy index : 245,261 ; [2022-04-15 23:50:13.651] [jointLog] [warning] salmon was only able to assign 0 fragments to transcripts in the index, but the minimum number of required assigned fragments (--minAssignedFrags) was 3. This could be indicative of a mismatch between the reference and sample, or a very bad sample. You can change the --minAssignedFrags parameter to force salmon to quantify with fewer assigned fragments (must have at least 1). I wonder maybe there's something wrong with my fastq files but I have no idea since they look fine(?):. > @SRR493372.1 HWI-M00266:2:000000000-A0HDE:1:1:14862:1427 length=26 CAGATCCCTCCCCTGGTCACTACAGA ; +SRR493372.1 HWI-M00266:2:000000000-A0HDE:1:1:14862:1427 length=26 @CC",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768:2864,Load,Loading,2864,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768,1,['Load'],['Loading']
Performance," see that the most striking difference is `MSAD_157177.t1` in Run B. The number of estimated reads isn't quite as high as with eXpress, but a considerable number of reads map to `MSAD_157177.t1` (and the posterior variance is still rather large). Given that the behavior you observe using default settings in Salmon is similar to what you observe in RSEM, my guess is that the allocation for `MSAD_157177.t1` in Run B from both of these methods is a result of the strong tendency of the EM algorithm toward sparsity. Though eXpress uses a variant of the EM algorithm, it's actually an *online* EM algorithm, and makes use of a small prior, both of which regularize the estimates it produces. In an offline algorithm (or the offline phase of a dual-algorithm method like Salmon), the same thing can be achieved by using a ""more Bayesian"" inference algorithm than the EM (in this case, using the VBEM algorithm). Most of the time, there is very strong agreement between the estimates produced by different optimization algorithms, but sometimes, as in this case, they can differ considerably. It's still an open area of research and analysis to determine if one such method is ""better"" than another. However, if you have strong external information telling you that `MSAD_157177.t1` should actually be expressed at a non-trivial level in Run B, it looks like the VBEM is giving you a better estimate here. Coming back to the suggestion in your original post, there is no good way, in the optimization procedure to ""switch off the re-assignment between similar genes"", since that is the entire point of the algorithm, and heuristically disabling certain reassignments would destroy any statistical guarantees of the procedure. However, regularizing the estimates is an alternative way of balancing the likelihood based assignment of the EM algorithm with some prior belief (and the strength of this prior belief can be tweaked, in Salmon, by modifying the `--vbPrior` argument when the `--useVBOpt` flag",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263793798:3456,optimiz,optimization,3456,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263793798,1,['optimiz'],['optimization']
Performance," skipping it; [2018-11-29 22:28:16.264] [alevinLog] [info] Learned InvCov: 180.957 normfactor: 13235.2; [2018-11-29 22:28:16.264] [alevinLog] [info] Total 12346(has 999 low confidence) barcodes; [2018-11-29 22:28:16.397] [alevinLog] [info] Done True Barcode Sampling; [2018-11-29 22:28:17.414] [alevinLog] [info] Done populating Z matrix; [2018-11-29 22:28:17.434] [alevinLog] [info] Done indexing Barcodes; [2018-11-29 22:28:17.434] [alevinLog] [info] Total Unique barcodes found: 3773873; [2018-11-29 22:28:17.434] [alevinLog] [info] Used Barcodes except Whitelist: 49866; [2018-11-29 22:28:18.184] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-11-29 22:28:18.184] [alevinLog] [info] parsing read library format; [2018-11-29 22:28:18.184] [jointLog] [info] There is 1 library.; [2018-11-29 22:28:18.324] [jointLog] [info] Loading Quasi index; [2018-11-29 22:28:18.325] [jointLog] [info] Loading 32-bit quasi index; [2018-11-29 22:28:18.325] [stderrLog] [info] Loading Suffix Array; [2018-11-29 22:28:19.339] [stderrLog] [info] Loading Transcript Info; [2018-11-29 22:28:19.536] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-29 22:28:19.554] [stderrLog] [info] There were 64,431 set bits in the bit array; [2018-11-29 22:28:19.561] [stderrLog] [info] Computing transcript lengths; [2018-11-29 22:28:19.561] [stderrLog] [info] Waiting to finish loading hash; [2018-11-29 22:28:23.502] [stderrLog] [info] Done loading index; [2018-11-29 22:28:23.502] [jointLog] [info] done; [2018-11-29 22:28:23.502] [jointLog] [info] Index contained 64,431 targets. processed 178 Million fragments; hits: 212754413, hits per frag: 1.19535. [2018-11-29 22:40:56.510] [jointLog] [info] Computed 110,023 rich equivalence classes for further processing; [2018-11-29 22:40:56.510] [jointLog] [info] Counted 95,071,703 total reads in the equivalence classes; [2018-11-29 22:40:56.510] [jointLog] [info] Mapping rate = 53.3587%. [2018-11-29 22:40:56.510] [jointLog] [info] finished ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324:2263,Load,Loading,2263,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324,1,['Load'],['Loading']
Performance," strandedness:unstranded }; [2020-04-21 10:11:42.553] [jointLog] [info] setting maxHashResizeThreads to 8; [2020-04-21 10:11:42.553] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-04-21 10:11:42.553] [jointLog] [info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""sample_alignments.sam"", fasta = ""../sample_data/transcripts.fasta"" . . .done; [2020-04-21 10:11:43.180] [jointLog] [info] replaced 0 non-ACGT nucleotides with random nucleotides. processed 0 reads in current round; killing thread 3 . . . done. Freeing memory used by read queue . . . 00; Joined parsing thread . . . ""sample_alignments.sam""; Closed all files . . .; Emptied frag queue. . . [2020-04-21 10:11:43.477] [jointLog] [info]. Completed first pass through the alignment file.; Total # of mapped reads : 10000; # of uniquely mapped reads : 6913; # ambiguously mapped reads : 3087. [2020-04-21 10:11:43.489] [jointLog] [info] Computed 27 rich equivalence classes for further processing; [2020-04-21 10:11:43.489] [jointLog] [info] Counted 10,000 total reads in the equivalence classes; [2020-04-21 10:11:43.490] [jointLog] [warning] Only 10000 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2020-04-21 10:11:43.492] [jointLog] [info] starting optimizer; [2020-04-21 10:11:43.493] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-04-21 10:11:43.493] [jointLog] [info] iteration = 0 | max rel diff. = 14.87; [2020-04-21 10:11:43.495] [jointLog] [info] iteration = 100 | max rel diff. = 9.59592e-05; [2020-04-21 10:11:43.495] [jointLog] [info] finished optimizer; [2020-04-21 10:11:43.495] [jointLog] [info] writing output. Emptied Alignemnt Group Pool. .; Emptied Alignment Group Queue. . . done; ```. Let me know if this works for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617206094:2710,optimiz,optimizer,2710,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617206094,3,"['Queue', 'optimiz']","['Queue', 'optimizer']"
Performance," subsetting from Biostrings, but in the premature case the strand information is used. Of course, this problem is out of the scope of this forum so it will be okay to close this issue. I will reach out to the developers of GenomicRanges and Biostrings to point out this potential problem and seek their guidance. Thank you again for all your help. Rached. ```; # setwd('wd'). options(scipen = 9999). libraries <- lapply(; X = c('data.table', 'magrittr', 'rtracklayer', 'Biostrings', 'reshape2', 'ggplot2'),; FUN = library, character.only = TRUE; ). ### Inputs ####; anot.gtf <- '../../shared_data/annotations/Ensembl/Homo_sapiens.GRCh38.101.gtf.gz' # Ensembl GTF; genome.fasta <- '../../shared_data/annotations/Ensembl/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz' # Genome fasta from Ensembl; gencode.tx.fasta <- '../../shared_data/annotations/Gencode/gencode.v35.transcripts.fa.gz' # Gencode transcript FASTA. dotPlot.fname <- '../ouput/dotPlots.pdf'. ### Read exon annotations ####; message('Loading Ensembl exon annotation (1-22, X, Y, MT)...'). chromosomes <- c(1:22, 'X', 'Y', 'MT'). anot <- import(anot.gtf, feature = 'exon') %>% sort; anot <- anot[seqnames(anot) %in% chromosomes, ]. # append gene and transcript version numbers to IDs; anot$gene_id <- paste(anot$gene_id, anot$gene_version, sep = '.'); anot$transcript_id <- paste(anot$transcript_id, anot$transcript_version, sep = '.'). ### Create premature transcript annotations ####; message('Creating premature transcript annotation...'). anot.pre <- split(anot, anot$transcript_id); anot.pre <- anot.pre[lengths(anot.pre) > 1] %>% range %>% unlist %>% sort # only consider transcripts with > 1 exon. anot.pre$transcript_range <- as.character(anot.pre); anot.pre$gene_id <- anot[match(names(anot.pre), anot$transcript_id), ]$gene_id. # collapse replicate pre-mature transcripts per gene...; names(anot.pre) <- anot.pre$premature_group <- sapply(; split(; names(anot.pre),; paste(anot.pre$gene_id, anot.pre$transcript_range, sep = '_');",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:4285,Load,Loading,4285,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,1,['Load'],['Loading']
Performance," the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from /u/user/local/bin/salmon...done.; (gdb) run alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; #",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:1718,load,loading,1718,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,3,['load'],"['load', 'loading']"
Performance," the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.677] [jointLog] [info] Counted 58,047,553 total reads in the equivalence classes; [2019-01-29 16:05:46.678] [jointLog] [warning] Found 21006 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-29 16:05:46.678] [jointLog] [info] Mapping rate = 20.1566%. [2019-01-29 16:05:46.678] [jointLog] [info] finished quantifyLibrary(); [2019-01-29 16:05:51.316] [alevinLog] [info] Starting optimizer. **Analyzed 4000 cells (100% of all).**; [2019-01-29 16:06:27.447] [alevinLog] [info] Total 20167967.00 UMI after deduplicating.; [2019-01-29 16:06:27.475] [alevinLog] [info] Clearing EqMap; Might take some time.; [2019-01-29 16:06:39.341] [alevinLog] [info] Starting Import of the gene count matrix of size 4000x29574.; [2019-01-29 16:06:40.089] [alevinLog] [info] Done initializing the empty matrix.; [2019-01-29 16:06:45.902] [alevinLog] [info] Done Importing gene count matrix for dimension 4000x29574; 0.00248159 1.3538e-06 0.000205983 221334; 0.00714905 1.09739e-06 0.000617623 71036.5; [2019-01-29 16:06:46.603] [alevinLog] [info] Starting white listing; [2019-01-29 16:06:46.615] [alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2019-01-29 16:06:46.615] [alevinLog] [info] Total 4000 barcodes found; [2019-01-29 16:06:46.615] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 16:06:46.615",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:2694,optimiz,optimizer,2694,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['optimiz'],['optimizer']
Performance," the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word"".; Attaching to process 29332; [New LWP 29334]; [New LWP 29335]; [New LWP 29336]; [New LWP 21224]; [New LWP 21225]; [New LWP 21226]; [New LWP 21227]; [New LWP 21228]; [New LWP 21229]; [New LWP 21230]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; 0x00007fcb8cf73789 in __ieee754_log_avx (x=<optimized out>) at ../sysdeps/ieee754/dbl-64/e_log.c:193; 193	../sysdeps/ieee754/dbl-64/e_log.c: No such file or directory.; #0 0x00007fcb8cf73789 in __ieee754_log_avx (x=<optimized out>) at ../sysdeps/ieee754/dbl-64/e_log.c:193; #1 0x0000000000637ccc in double std::gamma_distribution<double>::operator()<pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> > >(pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> >&, std::gamma_distribution<double>::param_type const&) (); #2 0x0000000000634b8d in tbb::interface9::internal::start_for<tbb::blocked_range<unsigned long>, sampleRoundNonCollapsedMultithreaded_(std::vector<std::pair<TranscriptGroup const, TGValue>, std::allocator<std::pair<TranscriptGroup const, TGValue> > >&, std::vector<bool, std::allocator<bool> >&, std::vector<unsigned long, std::allocator<unsigned long> >&, std::vector<double, std::allocator<do",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267488748:1374,optimiz,optimized,1374,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267488748,1,['optimiz'],['optimized']
Performance," threads ] => { 16 }; # [ biasCorrect ] => { }; # [ libType ] => { IU }; # [ index ] => { ./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ }; # [ numBootstraps ] => { 100 }; # [ output ] => { 61LP1AAXX_8 } ; # [ ] => { /dev/fd/63 }; # [ ] => { /dev/fd/62 }; Logs will be written to 61LP1AAXX_8/logs; there is 0[2016-07-11 09:51:45.206] [jointLog] [info] parsing read library format; lib; Loading 32-bit quasi index[2016-07-11 09:51:45.328] [jointLog] [info] Loading Quasi index; [2016-07-11 09:51:45.736] [stderrLog] [info] Loading Suffix Array; [2016-07-11 09:51:45.771] [stderrLog] [info] Loading Position Hash; [2016-07-11 09:52:13.781] [stderrLog] [info] Loading Transcript Info; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09:52:39.858] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report.**. [2016-07-11 09:52:39.858] [jointLog] [info] Mapping rate = 0%. [2016-07-11 09:52:39.858] [jointLog] [info] finished quantifyLibrary(); [2016-07-11 09:52:39.858] [jointLog] [info] Starting optimizer; [2016-07-11 09:52:39.894] [jointLog] [info] Marked 0 weigh",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:1421,load,loading,1421,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,1,['load'],['loading']
Performance," time to validate Salmon's functionality. Indeed, Salmon is not the problem here. After taking a closer look at my transcript fasta, I noticed a problem with it, as you suggested. Long story short, half the premature transcripts had the wrong orientation and complementarity. Long story:. Oddly, the mature sequences were fine even though I used an identical approach to subset premature and mature transcripts from the genome reference!. Briefly my approach relied on three R packages rtracklayer, GenomicRanges, and Biostrings. 1. I used rtracklayer to load a gtf formatted exon annotations acquired from Ensembl. The file is loaded as a GenomicRanges object which essentially describes the locus of each exon (the transcribed strand [+ or -], chromosome, start and end positions relative to the reference strand) and its associated gene and transcript. 2. I used the GRanges object to generate pre-RNA coordinates that span all exons of a transcript. 3. I loaded the reference genome fasta acquired from Ensembl using the Biostrings package. GRanges and Biostrings are tightly integrated, allowing me to subset sequences from a Biostrings object using the GRanges object. **I believe the problem lies here.** It appears that when subsetting the mature exonic sequences from Biostrings using GRanges, the strand field in the GRanges object **was not** utilized. I.e., I needed to get the reverse complement of the extracted sequences for transcripts on the minus strand. I had done that and assumed that this behaviour would be consistent. However, for reasons I have not been able to pinpoint (potentially a bug), the strand information **was accounted for** when I used GRanges to subset the premature sequences. I **did not** need to get the reverse complement of the premature sequences on the minus strand as I had to do for the mature sequences. Yet, I did that anyway. I initially did test my protocol to ensure it produced identical transcript sequences to Gencode, but I only did this for ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:1393,load,loaded,1393,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['load'],['loaded']
Performance," too many loci | 138709; % of reads mapped to too many loci | 0.18%; UNMAPPED READS:; % of reads unmapped: too many mismatches | 0.00%; % of reads unmapped: too short | 9.42%; % of reads unmapped: other | 0.63%; CHIMERIC READS:; Number of chimeric reads | 482178; % of chimeric reads | 0.63%; ```. salmon is 1.3.0 in both cases, the command is the same but the libtype:; ```bash; salmon \; quant \; -l ISF \; -p 16 \; -t /path/to/transcriptome/hg38.fa \; -o /path/to/sample; -a /path/to/sample.transcriptome.bam; --numBootstraps 30; ```. salmon logs:; `-l A`; ```; Completed first pass through the alignment file.; Total # of mapped reads : 30,418,756; # of uniquely mapped reads : 8,515,057; # ambiguously mapped reads : 21,903,699; [2021-06-07 21:04:54.872] [jointLog] [info] Computed 430,852 rich equivalence classes for further processing; [2021-06-07 21:04:54.872] [jointLog] [info] Counted 29,620,334 total reads in the equivalence classes; [2021-06-07 21:04:54.873] [jointLog] [info] starting optimizer; [2021-06-07 21:04:55.023] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-06-07 21:04:55.040] [jointLog] [info] iteration = 0 | max rel diff. = 5827.81; [2021-06-07 21:04:54.620] [fileLog] [info] quantification processed 30,418,756 fragments so far; [2021-06-07 21:04:56.705] [jointLog] [info] iteration = 100 | max rel diff. = 20.953; [2021-06-07 21:04:58.369] [jointLog] [info] iteration = 200 | max rel diff. = 8.08439; [2021-06-07 21:05:00.033] [jointLog] [info] iteration = 300 | max rel diff. = 20.0975; [2021-06-07 21:05:01.696] [jointLog] [info] iteration = 400 | max rel diff. = 0.633444; [2021-06-07 21:05:03.358] [jointLog] [info] iteration = 500 | max rel diff. = 7.58935; [2021-06-07 21:05:05.019] [jointLog] [info] iteration = 600 | max rel diff. = 1.90445; [2021-06-07 21:05:06.684] [jointLog] [info] iteration = 700 | max rel diff. = 0.158913; [2021-06-07 21:05:08.346] [jointLog] [info] iteration = 800 | max rel diff. = 0.690785; [2021-06-07 ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/669:2387,optimiz,optimizer,2387,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/669,1,['optimiz'],['optimizer']
Performance," use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivalence classes . [2023-03-17 07:46:19.488] [jointLog] [warning] 0.22783% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 20. [2023-03-17 07:46:19.488] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 0; [2023-03-17 07:46:19.488] [jointLog] [info] Mapping rate = 80.5964%",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:8038,load,loading,8038,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['load'],['loading']
Performance," used Salmon Alevin before on this dataset - without the bootstrap option - while providing the Cell Ranger whitelisted barcodes, and everything has gone smoothly (same script as below, commented out line). I have tried increasing the allotted memory and thread number as well, but with no change in outcome. Have you ever encountered something like this or could address me to where the issue may be (I'm assuming something to do with the bootstrap)?. *****Script I submit:*****; ```; #!/bin/bash; # expected run time ; #SBATCH --time=24:00:00 ; # Combine stderr and stdout log files into the stdout log file.; #SBATCH -o without -e; # Keep current environment variables.; #SBATCH --export=variables; # number of cores; #SBATCH -n 30; # expected memory to be used; #SBATCH ‚Äîmem=50000; # Specify queue via expected length of job. ; #SBATCH --partition=medium; # Set the log directory.; #SBATCH -o logs. ####declarations; conda activate salmon. Read1=$1 # fastq file - CB+UMI; Read2=$2 # fastq file - insert read; index=$3 # directory from salmon index; outDir=$4 # output directory; tsv=$5 # tsv containing txp-gene-id pairs; whitelist=$6 # cell ranger output barcodes. salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist --numCellBootstraps 20 --dumpFeatures. #salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist. ```. Thank you in advance!; Anna. -------------------------; Additional FYI:; ```; (salmon) [amonaco_m@med0113 1_bootstrappedAlevin]$ salmon version; Version Info: This is the most recent version of salmon.; salmon v1.4.0. Usage: salmon -h|--help or ; salmon -v|--version or ; salmon -c|--cite or ; salmon [--no-version-check] <COMMAND> [-h | options]. Commands:; index : create a salmon index; quant : quantify a sample; alevin : single cell analysis; swim : perform super-secret operation; quantmerge : merge multiple quantifications into a single file; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/636:2981,perform,perform,2981,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/636,1,['perform'],['perform']
Performance," validateMappings ] => { }; ### [ threads ] => { 4 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ posBias ] => { }; ### [ output ] => { /home/jaimealaniz/Documents/salmon.embryo/SRR7985407/ }; Logs will be written to /home/jaimealaniz/Documents/salmon.embryo/SRR7985407/logs; [2020-05-29 20:14:24.283] [jointLog] [info] setting maxHashResizeThreads to 4; [2020-05-29 20:14:24.283] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-29 20:14:24.283] [jointLog] [info] parsing read library format; [2020-05-29 20:14:24.283] [jointLog] [info] There is 1 library.; [2020-05-29 20:14:24.341] [jointLog] [info] Loading pufferfish index; [2020-05-29 20:14:24.342] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 41.693 ms; -----------------------------------------; size = 357712; -----------------------------------------; | Loading contig offsets | Time = 657 us; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 202.87 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 16.335 ms; -----------------------------------------; size = 64786639; Number of ones: 357711; Number of ones per inventory item: 512; Inventory entries filled: 699; -----------------------------------------; | Loading contig boundaries | Time = 154.69 ms; -----------------------------------------; size = 64786639; -----------------------------------------; | Loading sequence | Time = 6.3275 ms; -------------------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527:2729,Load,Loading,2729,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527,1,['Load'],['Loading']
Performance," { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.fastq }; ### [ output ] => { salmon_out }; ### [ threads ] => { 1 }; Logs will be written to salmon_out/logs; [2023-11-30 09:36:58.680] [jointLog] [info] setting maxHashResizeThreads to 1; [2023-11-30 09:36:58.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:36:58.680] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:36:58.680] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:36:58.680] [jointLog] [info] parsing read library format; [2023-11-30 09:36:58.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:6341,Load,Loading,6341,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance," { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.fastq }; ### [ output ] => { salmon_out }; ### [ threads ] => { 1 }; Logs will be written to salmon_out/logs; [2023-11-30 09:40:21.543] [jointLog] [info] setting maxHashResizeThreads to 1; [2023-11-30 09:40:21.543] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:40:21.543] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:40:21.543] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:40:21.543] [jointLog] [info] parsing read library format; [2023-11-30 09:40:21.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:3216,Load,Loading,3216,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance," }; ### [ libType ] => { ISR }; ### [ mates1 ] => { testData/XX_R1.fastq.gz }; ### [ mates2 ] => { testData/XX_R2.fastq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { XX_2 }; Logs will be written to XX_2/logs; [2020-08-13 09:35:38.575] [jointLog] [info] setting maxHashResizeThreads to 12; [2020-08-13 09:35:38.576] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:1570,Load,Loading,1570,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance," }; ### [ meta ] => { }; ### [ threads ] => { 100 }; ### [ output ] => { 9998.quant_se2 }; Logs will be written to 9998.quant_se2/logs; [2023-03-17 07:40:15.733] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-03-17 07:40:15.733] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:7502,Load,Loading,7502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,""": 5411464,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; }. ```. Another log file in the folder of logs:; ```{shell}; $cat salmon_quant.log ; [2023-03-07 06:47:10.266] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-03-07 06:47:10.266] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-07 06:47:10.266] [jointLog] [info] parsing read library format; [2023-03-07 06:47:10.266] [jointLog] [info] There is 1 library.; [2023-03-07 06:47:10.412] [jointLog] [info] Loading Quasi index; [2023-03-07 06:47:10.412] [jointLog] [info] Loading 64-bit quasi index; [2023-03-07 06:51:59.707] [jointLog] [info] done; [2023-03-07 06:51:59.707] [jointLog] [info] Index contained 777288 targets; [2023-03-07 06:52:10.338] [jointLog] [info] Automatically detected most likely library type as IU; [2023-03-07 06:54:46.142] [fileLog] [info] ; At end of round 0; ==================; Observed 40535435 total fragments (40535435 in most recent round). [2023-03-07 06:54:46.141] [jointLog] [info] Computed 1249282 rich equivalence classes for further processing; [2023-03-07 06:54:46.141] [jointLog] [info] Counted 8925446 total reads in the equivalence classes ; [2023-03-07 06:54:46.282] [jointLog] [warning] 0.0015986% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 20. [2023-03-07 06:54:46.282] [jointLog] [info] Number of fragments discarded because they ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:2401,Load,Loading,2401,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,"""Index requested greater than vector's size"" when loading pufferfish index using salmon v1.0",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:50,load,loading,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,1,['load'],['loading']
Performance,"""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2954,Load,Loadable,2954,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"# Create premature transcript annotations ####; message('Creating premature transcript annotation...'). anot.pre <- split(anot, anot$transcript_id); anot.pre <- anot.pre[lengths(anot.pre) > 1] %>% range %>% unlist %>% sort # only consider transcripts with > 1 exon. anot.pre$transcript_range <- as.character(anot.pre); anot.pre$gene_id <- anot[match(names(anot.pre), anot$transcript_id), ]$gene_id. # collapse replicate pre-mature transcripts per gene...; names(anot.pre) <- anot.pre$premature_group <- sapply(; split(; names(anot.pre),; paste(anot.pre$gene_id, anot.pre$transcript_range, sep = '_'); ),; paste, collapse = ';'; )[; paste(anot.pre$gene_id, anot.pre$transcript_range, sep = '_'); ]. # ... need to convert GR to data.table before unique because unique method for GR class ignores metadata and rownames; anot.pre <- as.data.table(anot.pre) %>% unique %>% makeGRangesFromDataFrame(., keep.extra.columns = T); names(anot.pre) <- anot.pre$premature_group. ### Read human genome sequence ####; message('Loading genome sequence...'). dna <- readDNAStringSet(filepath = genome.fasta). # simplify chromosome names; names(dna) <- sapply(strsplit(names(dna), ' '), '[', 1). dna <- dna[chromosomes] # subset chrom 1-22, X, Y, MT. ### Read Gencode transcript sequences ####; gencode <- readDNAStringSet(gencode.tx.fasta); names(gencode) <- gsub(; pattern = '\\|.*', replacement = '',; x = names(gencode); ). ### Sample transcripts on + and - strand (and avoid premature transcripts with multiple mature counterparts for simplicity); anot.pre <- anot.pre[order(width(anot.pre), decreasing = F), ]. chosenOnesP <- anot.pre[; strand(anot.pre) == '+' & !grepl(';', anot.pre$premature_group) & anot.pre$premature_group %in% names(gencode) & !duplicated(anot.pre$premature_group) &; anot.pre$premature_group %in% anot[anot$transcript_source == 'ensembl_havana']$transcript_id; ]$premature_group[1]. chosenOnesM <- anot.pre[; strand(anot.pre) == '-' & !grepl(';', anot.pre$premature_group) & anot.pre$prema",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:5701,Load,Loading,5701,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,1,['Load'],['Loading']
Performance,"# [ gcBias ] => { }; \#\#\# [ seqBias ] => { }; \#\#\# [ useVBOpt ] => { }; \#\#\# [ validateMappings ] => { }; \#\#\# [ output ] => { processed_salmon0100_k31_allcombined/R }; Logs will be written to processed_salmon0100_k31_allcombined/R/logs; [2018-05-31 16:54:42.310] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-05-31 16:54:42.310] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2018-05-31 16:54:42.310] [jointLog] [info] parsing read library format; [2018-05-31 16:54:42.310] [jointLog] [info] There is 1 library.; [2018-05-31 16:54:42.480] [jointLog] [info] Loading Quasi index; [2018-05-31 16:54:42.501] [jointLog] [info] Loading 32-bit quasi index; [2018-05-31 16:54:42.501] [stderrLog] [info] Loading Suffix Array; [2018-05-31 16:55:01.293] [stderrLog] [info] Loading Transcript Info; [2018-05-31 16:55:06.428] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-05-31 16:55:07.107] [stderrLog] [info] There were 310732 set bits in the bit array; [2018-05-31 16:55:07.158] [stderrLog] [info] Computing transcript lengths; [2018-05-31 16:55:07.159] [stderrLog] [info] Waiting to finish loading hash; [2018-05-31 16:55:25.973] [jointLog] [info] done; [2018-05-31 16:55:25.973] [jointLog] [info] Index contained 310732 targets; [2018-05-31 16:55:25.973] [stderrLog] [info] Done loading index. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 224580543, hits per frag: 3.35031[2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.84% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw min",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:1445,Load,Loading,1445,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['Load'],['Loading']
Performance,# salmon (mapping-based) v0.7.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { fastq_files/SRR2454059.fq.gz }; ### [ threads ] => { 8 }; ### [ libType ] => { ISF }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_quant/hg38.analysisSet_knownGene/SRR2454059 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 100 }; Logs will be written to salmon_quant/hg38.analysisSet_knownGene/SRR2454059/logs; [2016-12-13 12:44:39.271] [jointLog] [info] parsing read library format; [2016-12-13 12:44:39.271] [jointLog] [info] There is 1 library.; [2016-12-13 12:44:39.836] [jointLog] [info] Loading Quasi index; [2016-12-13 12:44:39.836] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 12:44:39.836] [stderrLog] [info] Loading Suffix Array ; [2016-12-13 12:44:43.439] [stderrLog] [info] Loading Transcript Info ; [2016-12-13 12:44:44.355] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 12:44:44.613] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 12:44:44.629] [stderrLog] [info] Computing transcript lengths; [2016-12-13 12:44:44.629] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 12:44:44.629] [stderrLog] [info] Done loading index; [2016-12-13 12:44:44.629] [jointLog] [info] done; [2016-12-13 12:44:44.629] [jointLog] [info] Index contained 182608 targets; [2016-12-13 12:44:49.583] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in ; single-end libraries. Please use this option with caution. processed 19000000 fragments; hits: 65897660; hits per frag: 3.46963. [2016-12-13 12:46:51.776] [jointLog] [info] Computed 137534 rich equivalence classes for further pro,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:1548,Load,Loading,1548,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['Load'],['Loading']
Performance,"## Describe the bug; When I run the following command:; ```; salmon quant --threads 1 --libType=U -i index -r SRR493367.fastq.gz -o SRR493367; ```. I get the following error(s) even though the same version of kallisto was used for the indexing & quantifiation:; ```; Encountered exception [JSON Parsing failed - provided NVP (SeqHash512) not found] when loading index.; The index was likely build with an older (and incompatible) version of RapMap. Please re-build the index with a compatible version.; ```. ## To Reproduce; - Install docker ; - Download transcriptome:; ```; wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_27/gencode.v27.transcripts.fa.gz; ```; - Run docker container (warning 2GB):; ```; docker run -v $PWD -w $PWD:$PWD -it lifebitai/rnaseq-nf-dseq2 bash; ```; - Download reads (warning reads are 2.3GB:; ```; fastq-dump SRR493367; ```; - Index transcriptome:; ```; salmon index --threads 1 -t gencode.v27.transcripts.fa.gz -i index; ```; - Run quantification cmd above. <br />; Specifically, please provide at least the following information:. * Which version of salmon was used? v0.12.0; * How was salmon installed? Download precompliied binary and made Dockerfile with the following:; ```Dockerfile; COPY ./salmon-0.12.0_linux_x86_64/bin /usr/local/bin; COPY ./salmon-0.12.0_linux_x86_64/lib /usr/local/lib. RUN chmod -R u+x /usr/local/bin. ENV PATH=""$PATH:/usr/local/bin""; ```; * Which reference (e.g. transcriptome) was used? gencode.v27.transcripts.fa.gz; * Which read files were used? SRR493367.fastq.gz; * Which which program options were used? See above. I encountered this error when running this [Nextflow pipeline](https://github.com/PhilPalmer/RNASeq-nf-dseq2). More details can be found [here](https://deploit.lifebit.ai/public/jobs/5c6eca93758e8300a8740a59) . Any ideas what the problem may be? I am not sure if it is a problem with my installation of Salmon, the [data](https://www.ncbi.nlm.nih.gov/sra/?term=SRR493367), the command or something",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/345:354,load,loading,354,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/345,1,['load'],['loading']
Performance,"## [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ recoverOrphans ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { SRR14506785.salmon.rmsk.out }; ### [ writeUnmappedNames ] => { }; Logs will be written to SRR14506785.salmon.rmsk.out/logs; [2023-09-28 04:51:02.450] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-09-28 04:51:02.450] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-09-28 04:51:02.450] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; --------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:2996,Load,Loading,2996,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"## [ hitFilterPolicy ] => { BOTH }; ### [ biasSpeedSamp ] => { 10 }; ### [ output ] => { quants/13_quant }; ```. **Expected behavior**; Not to be so slow.... I've used salmon previously with some SRR datasets and it was very fast, this seems very strange to me . **Screenshots**; ```; [2020-06-13 02:34:43.686] [jointLog] [info] setting maxHashResizeThreads to 4; [2020-06-13 02:34:43.686] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-06-13 02:34:43.686] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-06-13 02:34:43.686] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-13 02:34:43.686] [jointLog] [info] parsing read library format; [2020-06-13 02:34:43.686] [jointLog] [info] There is 1 library.; [2020-06-13 02:34:43.738] [jointLog] [info] Loading pufferfish index; [2020-06-13 02:34:43.738] [jointLog] [info] Loading dense pufferfish index.; [2020-06-13 02:34:45.327] [jointLog] [info] done; [2020-06-13 02:34:45.327] [jointLog] [info] Index contained 117,135 targets; [2020-06-13 02:34:45.346] [jointLog] [info] Number of decoys : 0; [2020-06-13 02:35:35.911] [jointLog] [info] Automatically detected most likely library type as IU; [2020-06-13 06:56:12.646] [fileLog] [info] ; At end of round 0; ==================; Observed 28512328 total fragments (28512328 in most recent round). [2020-06-13 06:56:12.645] [jointLog] [info] Computed 348,024 rich equivalence classes for further processing; [2020-06-13 06:56:12.645] [jointLog] [info] Counted 12,990,838 total reads in the equivalence classes ; [2020-06-13 06:56:12.989] [jointLog] [warning] 0.0736383% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 1. [2020-06-13 06:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537:2132,Load,Loading,2132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537,1,['Load'],['Loading']
Performance,## [ numBootstraps ] => { 0 }; ### [ vbPrior ] => { 0.001 }; Logs will be written to ./output/logs; [2018-08-16 19:47:14.418] [jointLog] [info] parsing read library format; [2018-08-16 19:47:14.418] [jointLog] [info] There is 1 library.; [2018-08-16 19:47:14.460] [stderrLog] [info] Loading Suffix Array ; [2018-08-16 19:47:14.459] [jointLog] [info] Loading Quasi index; [2018-08-16 19:47:14.459] [jointLog] [info] Loading 32-bit quasi index; [2018-08-16 19:47:15.044] [stderrLog] [info] Loading Transcript Info ; [2018-08-16 19:47:15.207] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-16 19:47:15.263] [stderrLog] [info] There were 173531 set bits in the bit array; [2018-08-16 19:47:15.285] [stderrLog] [info] Computing transcript lengths; [2018-08-16 19:47:15.285] [stderrLog] [info] Waiting to finish loading hash; [2018-08-16 19:47:20.808] [jointLog] [info] done; [2018-08-16 19:47:20.808] [jointLog] [info] Index contained 173531 targets; [2018-08-16 19:47:20.808] [stderrLog] [info] Done loading index. [A. [32mprocessed[31m 500002 [32mfragments[0m; hits: 2213374; hits per frag: 5.08859[A. [32mprocessed[31m 1000002 [32mfragments[0m; hits: 4422312; hits per frag: 4.78092[A. [32mprocessed[31m 1500006 [32mfragments[0m; hits: 6635818; hits per frag: 4.69843[A. [32mprocessed[31m 2000001 [32mfragments[0m; hits: 8846970; hits per frag: 4.55737[A. [32mprocessed[31m 2500021 [32mfragments[0m; hits: 11062734; hits per frag: 4.49592[A. [32mprocessed[31m 3000000 [32mfragments[0m; hits: 13274990; hits per frag: 4.48667[A. [32mprocessed[31m 3500002 [32mfragments[0m; hits: 15430043; hits per frag: 4.48414[A. [32mprocessed[31m 4000004 [32mfragments[0m; hits: 17638270; hits per frag: 4.48376[A. [32mprocessed[31m 4500000 [32mfragments[0m; hits: 19856371; hits per frag: 4.45983[A. [32mprocessed[31m 5000000 [32mfragments[0m; hits: 22066072; hits per frag: 4.44139[A. [32mprocessed[31m 5500001 [32mfragments[0m; hits: 24279605; hits,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271:24772,load,loading,24772,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271,1,['load'],['loading']
Performance,"## [ seqBias ] => { }; ### [ recoverOrphans ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { salmon.standard/sample }; Logs will be written to salmon.standard/sample/logs; [2024-11-01 05:13:59.563] [jointLog] [info] setting maxHashResizeThreads to 16; [2024-11-01 05:13:59.563] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-11-01 05:13:59.563] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-11-01 05:13:59.563] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-11-01 05:13:59.563] [jointLog] [info] parsing read library format; [2024-11-01 05:13:59.563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:2848,Load,Loading,2848,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"## [ unmatedReads ] => { /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz }; ### [ output ] => { out }; ### [ threads ] => { 6 }; ### [ validateMappings ] => { }; Logs will be written to out/logs; [2021-09-20 16:20:48.240] [jointLog] [info] setting maxHashResizeThreads to 6; [2021-09-20 16:20:48.240] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:20:48.240] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:20:48.240] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:20:48.240] [jointLog] [info] parsing read library format; [2021-09-20 16:20:48.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:4543,Load,Loading,4543,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"## [ validateMappings ] => { }; ### [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { salmon.out }; Logs will be written to salmon.out/logs; [2021-03-29 16:21:11.395] [jointLog] [info] setting maxHashResizeThreads to 8; [2021-03-29 16:21:11.395] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-03-29 16:21:11.395] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-03-29 16:21:11.395] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-03-29 16:21:11.395] [jointLog] [info] parsing read library format; [2021-03-29 16:21:11.399] [jointLog] [info] There is 1 library.; [2021-03-29 16:21:11.496] [jointLog] [info] Loading pufferfish index; [2021-03-29 16:21:11.509] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 553.34 s; -----------------------------------------; size = 45242875; -----------------------------------------; | Loading contig offsets | Time = 14.76 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.0848 s; -----------------------------------------; /cromwell_root/script: line 103: 22 Killed salmon quant -i $refIndexDir --libType A -1 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.2.fastq.gz"" -2 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.1.fastq.gz"" -p 8 --recoverOrphans --validateMappings --gcBias --seqBias --rangeFactorizationBins 4 --output salmon.out; + salmonRet=137; + echo ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641:4102,Load,Loading,4102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641,1,['Load'],['Loading']
Performance,"## salmon (mapping-based) v0.11.1; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /data2/csijcs/hg38/hg38.transcriptome.index }; ### [ libType ] => { A }; ### [ mates1 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R1_001.fastq.gz }; ### [ mates2 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R2_001.fastq.gz }; ### [ threads ] => { 32 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942/logs; [2018-07-27 16:24:55.658] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-27 16:24:55.658] [jointLog] [info] parsing read library format; [2018-07-27 16:24:55.658] [jointLog] [info] There is 1 library.; [2018-07-27 16:25:01.242] [jointLog] [info] Loading Quasi index; [2018-07-27 16:25:01.242] [jointLog] [info] Loading 32-bit quasi index; [2018-07-27 16:25:01.243] [stderrLog] [info] Loading Suffix Array ; [2018-07-27 16:25:42.630] [stderrLog] [info] Loading Transcript Info ; [2018-07-27 16:25:45.683] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-27 16:25:47.834] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-27 16:25:48.128] [stderrLog] [info] Computing transcript lengths; [2018-07-27 16:25:48.200] [stderrLog] [info] Waiting to finish loading hash; [2018-07-27 16:25:48.331] [stderrLog] [info] Done loading index; [2018-07-27 16:25:48.331] [jointLog] [info] done; [2018-07-27 16:25:48.331] [jointLog] [info] Index contained 203027 targets. processed 239500000 fragmentsintLog] [info] Automatically detected most likely library type as ISR; hits: 651420499, hits per frag: 2.72282[2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.70% zero probability fragments; [2018-07-27 ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898:1254,Load,Loading,1254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898,1,['Load'],['Loading']
Performance,### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ libType ] => { SR }; ### [ unmatedReads ] => { fastq_files/SRR2454069.fq.gz }; ### [ threads ] => { 8 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further processing; [2016-12-15 16:01:44.937] [jointLog] [info] Counted 12227080 total reads in the equivalence classes; [2016-12-15 16:01:44.948] [joint,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1225,Load,Loading,1225,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['Load'],['Loading']
Performance,"#### Introduction. Inspired by the article of Schaeffer et al. (2016), I attempted to use salmon to quantify the proportion of bacterial reads in a paired-end DNA sequencing experiment. I use ""mash screen"" to select a set of reference genomes for the creation of an index for Salmon. #### Question. In order to maximize the performance, I would like to minimize the number of reference genomes for the index, but I would also like to maximize the total number of mapped reads. For other mappers (e.g. bowtie2, bwa-mem), increasing the number of reference genomes will also increase the number of total mapped reads. This does not seem to be the case for Salmon (and also Kallisto). Is there a specific reason why Salmon (and perhaps kallisto) does not guarantee the increase of total mapped reads when one add more reference genomes?. #### Mapping stats. I mapped a paired-end fastq to an index with increasingly more reference genomes. I must add that the added reference genomes have much similarity to those already added. | number ref | % mapped Salmon | % mapped Kallisto | % mapped bowtie2 | % mapped bwa-mem |; |---|:---:|:---:|:---:|:---:|; |1 | 82.5% | 82.5% | 82.4% | 69.2% |; |2 | 88.0% | 87.0% | 89.9% | 80.8% |; |3 | 87.5% | 87.0% | 89.9% | 80.9% |; |4 | 85.6% | 81.9% | 91.2% | 83.3% |; |5 | 85.6% | 81.9% | 91.2% | 83.3% |; |6 | 79.8% | 78.8% | 92.3% | 85.7% |; |7 | 79.6% | 79.2% | 92.5% | 86.1% |; |8 | 80.7% | 80.4% | 92.7% | 86.5% |; |9 | 82.2% | 82.1% | 93.6% | 88.3% |; |10 | 83.4% | 83.2% | 93.9% | 88.9% |; |11 | 84.7% | 84.4% | 95.3% | 91.5% |; |12 | 84.7% | 84.4% | 95.3% | 91.6% |; |13 | 84.3% | 84.1% | 96.3% | 93.3% |; |14 | 85.2% | 85.1% | 96.3% | 93.4% |; |15 | 86.1% | 86.0% | 96.6% | 93.9% |",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/196:324,perform,performance,324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/196,1,['perform'],['performance']
Performance,"%. Comparing FastQC reports, my data was of similar/better quality than the data from the Youtube series. In case this is helpful in answering my question, this is the information from the logs for one of my samples:. ```; [2020-09-05 13:51:07.144] [jointLog] [info] setting maxHashResizeThreads to 1; [2020-09-05 13:51:07.144] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-09-05 13:51:07.159] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-09-05 13:51:07.159] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-09-05 13:51:07.159] [jointLog] [info] parsing read library format; [2020-09-05 13:51:07.159] [jointLog] [info] There is 1 library.; [2020-09-05 13:51:07.828] [jointLog] [info] Loading pufferfish index; [2020-09-05 13:51:07.876] [jointLog] [info] Loading dense pufferfish index.; [2020-09-05 13:51:49.487] [jointLog] [info] done; [2020-09-05 13:51:49.551] [jointLog] [info] Index contained 228,754 targets; [2020-09-05 13:51:50.523] [jointLog] [info] Number of decoys : 0; [2020-09-05 13:52:00.312] [jointLog] [info] Automatically detected most likely library type as SR; [2020-09-05 17:53:49.009] [jointLog] [info] Thread saw mini-batch with a maximum of 2.00% zero probability fragments; [2020-09-05 17:53:51.128] [jointLog] [info] Computed 344,342 rich equivalence classes for further processing; [2020-09-05 17:53:51.128] [jointLog] [info] Counted 20,897,706 total reads in the equivalence classes ; [2020-09-05 17:53:51.133] [jointLog] [info] Number of mappings discarded because of alignment score : 116,214,502; [2020-09-05 17:53:51.133] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 1,428,490; [2020-09-05 17:53:51.133] [jointLog] [info] Number of fragments discarded because they are best-mapped to dec",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/571:2132,Load,Loading,2132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/571,1,['Load'],['Loading']
Performance,"&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>; Args = {int}; Key = std::__cxx11::basic_string<char>; T = unsigned int; Hash = BarcodeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #15 upsert<std::__cxx11::basic_string<char>&, densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:554; #16 densityCalculator<alevin::protocols::Chromium> (parser=<optimized out>, aopt=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:18641,optimiz,optimized,18641,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,3,['optimiz'],['optimized']
Performance,"(LWP 27870)]; 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; 56 ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt; #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:93; #7 __destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:103; #8 _Destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:126; #9 _Destroy<std::thread*, std::thread> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:151; #10 std::vector<std::thread, std::allocator<std::thread> >::~vector (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_vector.h:424; #11 0x00000000007a5fde in cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::parallel_exec<cuckoohash_map<std::__cxx11::basic_stri",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:4653,optimiz,optimized,4653,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,2,['optimiz'],['optimized']
Performance,")?**; related to salmon. **Describe the bug**; I've been using the Salmon-tximport-DESEq2 pipeline for quite a while now but it's the first time I got similar results from Salmon across samples. I've got 24 samples in total (4 rice genotypes, 2-time point for bacterial blight infection, and 3 replications). However, this from the raw sequencing data and even the trimmed reads that I used, I've got similar mapping rates across all samples. Similar length, TPM, and NumReads across all genes for all genes. Though the value for each gene differs in the abovementioned parameters. The EffectiveLength though is 250 for all genes across all samples. I've used all four different versions of Salmon as listed below but I'm still getting the same similar mapping rate and the parameters at quant.sf though the values differ a bit from each Salmon version. **To Reproduce**; ### Steps and data to reproduce the behavior: for version 0.8. **First I took the genome fasta file and the gff3 file and made a transcriptome fasta file using Salmon:**; module load Cufflinks/2.2.1; gffread all.gff3 -g all.chrs.fasta -w MSU7_transcript.fasta. **I then indexed the transcript fasta file.**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=50G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J index_Salmon. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. salmon index -t ~/data/genome/MSU7_transcript.fasta -i ~/data/genome/MSU7_transcript.index --type quasi -k 31. **I then run transcript abundance estimate pipeline for the raw-reads and the trimmed reads as follows:**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l A \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:1130,load,load,1130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['load'],['load']
Performance,"**Describe the bug**; The compilation fails when prerequisite external sources are downloaded from ; the GitHub and the downloaded file sha256 signature is compared to what is ; stored in salmon distribution files. The relevant portion of log:. make[6]: Entering directory `/export/repositories/biotools-admix/BUILD/salmon_1.1.0-1.1.0/salmon-1.1.0/build'; [ 7%] Performing download step for 'libtbb'; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 125 100 125 0 0 976 0 --:--:-- --:--:-- --:--:-- 976; 100 126 100 126 0 0 787 0 --:--:-- --:--:-- --:--:-- 787; 100 2519k 0 2519k 0 0 3504k 0 --:--:-- --:--:-- --:--:-- 4772k; tbb-2019_U8.tgz: FAILED; sha256sum: WARNING: 1 computed checksum did NOT match. **To Reproduce**; Compiling with all needed prerequisites (outside of salmon) loaded via modules. ; Using Centos 7.7 with gcc 8.4.0, boost 1.66.9. mkdir build; cd build; cmake -DBOOST_ROOT=$BOOST_HOME -DCMAKE_INSTALL_PREFIX=/opt/apps/salmon/1.1.0 .. ; make . * Which version of salmon was used?; salmon 1.1.9 (fails to download tbb-2019-U8.tgz); salmon 0.14.0 (fails to download tbb-2018-U3.tgz); ; The problem lies in the repository for tbb. At some recent point after March 5; ( I have successfully built salmon 0.14.0 on March 5 with above tbb just fine), the tar balls; in tbb repo have changed and so changed their sha256sum signatures. ; The distro contents (comparing old vs. new) appear to be the same with the exception ; of renaming of the top most directory from tbb-VERSION/ to oneTBB-VERSION/. ; When a tar ball is download its signature is different from what salmon expects in its files. . **Additional context**; The fix would be to update salmon source distributions to have new sha256 signatures and; and other changes (top dir name) in Cmakefiles",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/496:362,Perform,Performing,362,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/496,2,"['Perform', 'load']","['Performing', 'loaded']"
Performance,"**Hi there,**. **So I'm trying to install Salmon-0.8.2 but I'm having a few issues. I should note upfront that I'm working on a cluster and therefore I do not have root privileges.** . **Anyway, when going through the build process I wasn't able to install boost using salmons flags, so I installed it independently. I was then able to make it to the 'make' stage, but the got to this point:**. [ 7%] Built target liblzma; [ 14%] Built target libbz2; [ 21%] Built target libdivsufsort; [ 29%] Built target liberal; [ 37%] Built target libgff; [ 38%] Performing build step for 'libbwa'; utils.c:33:18: fatal error: zlib.h: No such file or directory; #include <zlib.h>; ^; compilation terminated.; make[3]: *** [utils.o] Error 1; make[2]: *** [libbwa-prefix/src/libbwa-stamp/libbwa-build] Error 2; make[1]: *** [CMakeFiles/libbwa.dir/all] Error 2; make: *** [all] Error 2. **I resolved this by making a custom script which told make where to look for zlib:**. export C_INCLUDE_PATH=/users/work/jake/bin/zlib-1.2.11/; export CPLUS_INCLUDE_PATH=/users/work/jake/bin/zlib-1.2.11/; make. **Executing that script allowed me to progress a little but I'm now receiving the following error message:**. [ 7%] Built target liblzma; [ 14%] Built target libbz2; [ 21%] Built target libdivsufsort; [ 29%] Built target libcereal; [ 37%] Built target libgff; [ 38%] Performing build step for 'libbwa'; /bin/ld: cannot find -lz; collect2: error: ld returned 1 exit status; make[3]: *** [bwa] Error 1; make[2]: *** [libbwa-prefix/src/libbwa-stamp/libbwa-build] Error 2; make[1]: *** [CMakeFiles/libbwa.dir/all] Error 2; make: *** [all] Error 2. **I'm not the best command line user so my 'fixes' might not be the best approach. Still I'm not really sure how to approach this new error message. Google doesn't turn up much so any advice you could give it would be greatly appreciated.**",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141:550,Perform,Performing,550,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141,2,['Perform'],['Performing']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**. I am using a version that was compiled in Trinity; module load conda/trinity-2.8.4; source activate trinity-2.8.4; salmon --version salmon 0.11.3. **Describe the bug**. @RG lines are at odds with binary encoded reference data ; Segmentation fault. **To Reproduce**; Steps and data to reproduce the behavior:. salmon quant -t Cp_cds.fa -l ISR -a SB1.bam -o salmon_SB1. **Summary** ; I mapped the reads to a de novo transcriptome assembly using BWA-mem. I then use Salmon to get counts for RNAseq analysis using the alignment based mode. This has worked well for the nine previous samples, but the last 3 samples throw the error above (different species and reference transcriptome assembly). Maybe a problem with the bam file? If no not sure how the read groups etc, could be a problem unless there is a problem with the fastq files. But they came from the same run/machine/lane (Illumina NextSeq 500) as six other samples that have not caused problems.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/323:144,load,load,144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/323,1,['load'],['load']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; It occurs when I run Salmon. **Describe the bug**; When I try to index I get an error; ```; [2021-03-30 14:29:34.670] [puff::index::jointLog] [error] In FixFasta, two references with the same name but different sequences: lcl. We require that all input records have a unique name up to the first whitespace (or user-provided separator) character.; ```; I asked for advice, and it was suggested that two entries in the fasta file had the same name. I tried loading all of the entry names into a computing language, and check that the number of unique names was identical to the total number (suggesting that this wasn't the case). **To Reproduce**; I required to re-run some RNA seq mapping from someone who left the lab, and gave me this script (I've asked them, they did not really know what got wrong). ```; conda create --name rnaseq -c bioconda salmon; conda activate rnaseq; conda install -c conda-forge -c bioconda salmon=1.4.0; mkdir -p reference . # reference genome; wget -O reference/genome.fa.gz https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/497/485/GCA_000497485.1_ASM49748v1/GCA_000497485.1_ASM49748v1_genomic.fna.gz. # reference Transcriptome; wget -O reference/transcripts.fa.gz https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/497/485/GCA_000497485.1_ASM49748v1/GCA_000497485.1_ASM49748v1_cds_from_genomic.fna.gz. # prepare file with ""decoy"" sequences; zcat reference/genome.fa.gz | grep ""^>"" | cut -d "" "" -f 1 | sed -e 's/>//g' > reference/decoys.txt. # concatenate the two; cat reference/transcripts.fa.gz reference/genome.fa.gz > reference/gentrome.fa.gz. # Try to create index, this gives problems; salmon index -t reference/gentrome.fa.gz -d reference/decoys.txt -p 12 -i salmon_index --gencode -k 31; ```. The last one gives an error:; ```; Version Info: This is the most recent version of salmon.; [2021-03-30 14:29:34.652] [jLog] [info] building index; out : salmon_index; [2021-03-30 14:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/642:542,load,loading,542,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/642,1,['load'],['loading']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; Neither, it's related to compilation. **Describe the bug**. While trying to compile the project I get the following error:; ```; $ make; [ 6%] Built target libcereal; [ 12%] Built target libdivsufsort; [ 18%] Built target liblzma; [ 23%] Built target libbz2; [ 29%] Built target libgff; [ 29%] Performing build step for 'libstadenio'; Making all in io_lib; Making all in progs; libtool: link: /usr/bin/cc -o convert_trace convert_trace.o ../io_lib/.libs/libstaden-read.a -lm -lpthread -llzma -lbz2; ../io_lib/.libs/libstaden-read.a(libstaden_read_la-open_trace_file.o): In function `find_file_url':; open_trace_file.c:(.text+0xf03): warning: the use of `tempnam' is dangerous, better use `mkstemp'; ../io_lib/.libs/libstaden-read.a(libstaden_read_la-compression.o): In function `zlib_huff':; compression.c:(.text+0xc0): undefined reference to `deflateInit2_'; compression.c:(.text+0x13b): undefined reference to `deflate'; compression.c:(.text+0x181): undefined reference to `deflateEnd'; ../io_lib/.libs/libstaden-read.a(libstaden_read_la-compression.o): In function `zlib_dehuff':; compression.c:(.text+0x2f7): undefined reference to `inflateInit_'; compression.c:(.text+0x371): undefined reference to `inflate'; compression.c:(.text+0x3b4): undefined reference to `inflateEnd'; collect2: error: ld returned 1 exit status; Makefile:606: recipe for target 'convert_trace' failed; make[5]: *** [convert_trace] Error 1; Makefile:734: recipe for target 'all-recursive' failed; make[4]: *** [all-recursive] Error 1; Makefile:478: recipe for target 'all' failed; make[3]: *** [all] Error 2; CMakeFiles/libstadenio.dir/build.make:111: recipe for target 'libstadenio-prefix/src/libstadenio-stamp/libstadenio-build' failed; make[2]: *** [libstadenio-prefix/src/libstadenio-stamp/libstadenio-build] Error 2; CMakeFiles/Makefile2:257: recipe for target 'CMakeFiles/libstadenio.dir/all' failed; make[1]: *** [CMakeFiles/libst",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/383:380,Perform,Performing,380,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/383,1,['Perform'],['Performing']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; No; **Describe the bug**; Running salmon 0.11.3, quasi mode, with 192M of ram.; Salmon quasi mode aborted with following message:; processed 14,000,000 fragmentsntLog] [info] Automatically detected most likely library type as SR; hits: 108,161,934; hits per frag: 8.53594terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; This happens when using a gffread-created transcripts.fa. Salmon built the index that have 309,566 targets. Do I just need more RAM? Or it is a bug.; ; More info as below:; [2018-10-24 11:14:15.505] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-24 11:14:15.505] [jointLog] [info] parsing read library format; [2018-10-24 11:14:15.505] [jointLog] [info] There is 1 library.; [2018-10-24 11:14:15.627] [jointLog] [info] Loading Quasi index; [2018-10-24 11:14:15.629] [jointLog] [info] Loading 32-bit quasi index; [2018-10-24 11:14:15.633] [stderrLog] [info] Loading Suffix Array; [2018-10-24 11:14:17.090] [stderrLog] [info] Loading Transcript Info; [2018-10-24 11:14:17.691] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-24 11:14:18.293] [stderrLog] [info] There were 309,566 set bits in the bit array; [2018-10-24 11:14:18.819] [stderrLog] [info] Computing transcript lengths; [2018-10-24 11:14:18.820] [stderrLog] [info] Waiting to finish loading hash; [2018-10-24 11:15:46.171] [jointLog] [info] done; [2018-10-24 11:15:46.171] [jointLog] [info] Index contained 309,566 targets; [2018-10-24 11:15:46.171] [stderrLog] [info] Done loading index. **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * Which version of salmon was used? 0.11.3; * How was salmon installed (compiled, downloaded executable, through bioconda)?. downloaded execitable. * Which reference (e.g. transcriptome) was used?; h",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/304:934,Load,Loading,934,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/304,1,['Load'],['Loading']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; Salmon (bulk mode); **Describe the bug**; A clear and concise description of what the bug is.; Salmon fails without warning when using --recoverOrphans as part of quasi mapping. Dropping --recoverOrphans allows for job to be completed. Salmon exits with a nonzero exit code: 9 otherwise (shows as 9:0 with squeue). This also may be related to #929 . **To Reproduce**; Steps and data to reproduce the behavior:; https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/; to generate our index . SLURM script; ```bash; #!/bin/bash; #SBATCH --chdir=/path/to/working/dir/; #SBATCH --partition=short; #SBATCH --job-name=Salmon; #SBATCH --error=/path/to/logs/%x_%j.err; #SBATCH --output=/path/to/logs/%x_%j.out; #SBATCH --ntasks=6; #SBATCH --time=02:00:00; #SBATCH --cpus-per-task=2; #SBATCH --mem-per-cpu=30G; module load parallel # parallel/20150822-GCC-4.9.2; module load Anaconda3/2022.05; conda activate Salmon. parallel --jobs 6 --header : --colsep ',' \; 'salmon quant -I /path/to/index/folder/ \; -l A\; -1 /path/to/""{fastq_1}"" \; -2 /path/to/""{fastq_2}""\; --writeUnmappedNames \; --validateMappings \; --recoverOrphans\; --gcBias \; --seqBias \; --recoverOrphans\; -o /path/to/output/{Samples} \; --threads 2' :::: /path/to/sheet_with_sample_and_fastq_names.csv; ```; Specifically, please provide at least the following information:. * Which version of salmon was used?; Both 1.10.2 and 1.10.3 were tested. ; * How was salmon installed (compiled, downloaded executable, through bioconda)?; Used bioconda; * Which reference (e.g. transcriptome) was used?; GRCh38 ; * Which read files were used?; Illumina NovaSeq. Merged fastq based on direction (fastq split across lanes and had to add top off data) with zcat, used cutadapt for adapter trimming. . * Which which program options were used?; Ribodetector was used to get rid of rRNA contamination. Used output of non rRNA files with Salmon quant. **",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/961:912,load,load,912,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/961,2,['load'],['load']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; Salmon. **Describe the bug**; Unit test failure during `make test`. **To Reproduce**; Building this Dockerfile is enough to reproduce the error; ```; # Use Ubuntu as the base image; FROM ubuntu:latest. WORKDIR /pipeline. RUN apt-get update && \; apt-get install -y --no-install-recommends \; git ca-certificates make cmake libboost-all-dev build-essential \; libcurl4-openssl-dev libbz2-dev liblzma-dev unzip curl && \; git clone --branch v1.10.1 https://github.com/COMBINE-lab/salmon.git && \; cd salmon && mkdir build && cd build && \; cmake -DNO_IPO=TRUE -DBOOST_ROOT=/usr -DTBB_INSTALL_DIR=/usr \; -DCMAKE_INSTALL_PREFIX=/usr/local .. && \; make && make install && \; make test || true; ```. Specifically, please provide at least the following information:. * Which version of salmon was used? v0.10.1; * How was salmon installed (compiled, downloaded executable, through bioconda)? compiled; * Which reference (e.g. transcriptome) was used? none; * Which read files were used? none; * Which which program options were used? It was the unit test. **Expected behavior**; I expect the tests to pass. This seems like it might be related to #229 but maybe not.; I did try `./src/unitTests` and that passes. . **Desktop (please complete the following information):**; - I built the Dockerfile on MacOS. **Additional context**; The error log file says; ```; -- For unit tests, will set working directory to /pipeline/salmon/tests; ./unitTests: error while loading shared libraries: libtbb.so.12: cannot open shared object file: No such file or directory; CMake Error at /pipeline/salmon/cmake/UnitTests.cmake:8 (message):; Error running 127; ```; This is strange because the other tests (which pass) must need this `libtbb.so.12` too right?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/845:1540,load,loading,1540,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/845,1,['load'],['loading']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; both. **Describe the bug**; I have Ubuntu 22.04.4 LTS. The conda version I have is 23.3.1. After I followed ""Get Started"", I installed salmon by the command ""conda create -n salmon salmon"". Everything looks fine so far. conda activate salmon. salmon -h; salmon: error while loading shared libraries: libboost_iostreams.so.1.60.0: cannot open shared object file: No such file or directory. Any help with this problem will be highly appreciated.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/915:360,load,loading,360,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/915,1,['load'],['loading']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; salmon. **Describe the bug**; I installed Salmon 1.5.2 from binaries, and load it via the module environment (alter or set shell variables such as `PATH` to make the installation visible). The problem is that Salmon overrides the link to the C math standard library. . ```; # without Salmon in my PATH; ldd /home/eboileau/.miniconda3/envs/scNapBar-dev/bin/python3 ; libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f1d2bd45000). # with Salmon in my PATH (loaded via module load salmon/1.5.2); libm.so.6 => /biosw/salmon/1.5.2/lib/libm.so.6 (0x00007f1fa67c0000) ; ```. The latter seem to be incompatible with the Python installation, and results in. ```; import numpy; ImportError: /biosw/salmon/1.5.2/lib/libm.so.6: symbol __get_cpu_features version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference; ```. I do not understand why this is happening, and the question is why Salmon has it's own copy of *libm.so.6*?; Is this library different? . **To Reproduce**; Load salmon/1.5.2 via module environment. I am able to run both my python script and Salmon after deleting Salmon's own copy of *libm.so.6*.; Is this expected to alter Salmon's results in any way?. **Expected behavior**; Salmon does not modify the link to *libm.so.6*. **Desktop (please complete the following information):**; - Linux atlas 4.19.0-17-amd64 SMP Debian 4.19.194-3 (2021-07-18) x86_64 GNU/Linux; - salmon 1.5.2; - Python 3.7.6; - conda 4.9.2; - Modules Release 4.2.2 (2019-02-17). **Questions**; - Why Salmon has it's own copy of *libm.so.6*? Is it safe to delete it, and is this expected to alter Salmon's results in any way?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/710:160,load,load,160,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/710,4,"['Load', 'load']","['Load', 'load', 'loaded']"
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; salmon; **Describe the bug**; A clear and concise description of what the bug is.; It appears that when I run the quant command it gets up to the ""loading dense pufferfish index"" but stop after loading positions. So I think that it isn't even getting to the quantification step because it doesn't finish loading the index. **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * Which version of salmon was used?; *v.1.5.0; * How was salmon installed (compiled, downloaded executable, through bioconda)?; * through bioconda; * Which reference (e.g. transcriptome) was used?; * ; * Which read files were used?; * Which which program options were used?. **Expected behavior**; A clear and concise description of what you expected to happen.; I would expect it to continue to ""loading reference sequence"" etc., then display done and continue with the quantification; **Screenshots**; ![image](https://user-images.githubusercontent.com/85455566/120937098-82d2fb80-c6d9-11eb-9aea-a2935ccc1e50.png). **Desktop (please complete the following information):**; Ubuntu Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. **Additional context**; I'm pretty new to linux and salmono it is likely that my problem is due to some simple misunderstanding of how the program works, but any help would be appreciated.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/667:233,load,loading,233,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/667,4,['load'],['loading']
Performance,"**Is the bug primarily related to salmon (bulk mode) or alevin (single-cell mode)?**; salmon; **Describe the bug**; When loading a pufferfish index using salmon v1.0 I encounter errors. I've posted to https://github.com/COMBINE-lab/pufferfish/issues/8 with a full description. When running salmon v1.0 using a rather large index, I receive an error raised from the cereal library ""Index requested greater than vector's size"". The log reads:. ```; -----------------------------------------; | Loading contig table | Time = 12.954 s; -----------------------------------------; size = 35010142; -----------------------------------------; | Loading contig offsets | Time = 269.18 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 7.8427 ms; -----------------------------------------; -----------------------------------------; | Loading eq table | Time = 3.3896 s; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.8301 s; -----------------------------------------; size = 3567796961; Number of ones: 35010141; Number of ones per inventory item: 512; Inventory entries filled: 68380; -----------------------------------------; | Loading contig boundaries | Time = 11.288 s; -----------------------------------------; size = 3567796961; -----------------------------------------; | Loading sequence | Time = 7.763 s; -----------------------------------------; size = 2517492731; -----------------------------------------; | Loading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>64",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:121,load,loading,121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,6,"['Load', 'load']","['Loading', 'loading']"
Performance,"+1. Trying to quantify ~2000 Smart-Seq2 samples. Currently takes about 5 days on a single node doing 1 cell at a time. Perhaps an easier way to implement this would be to provide a batch mode such that you load the index once and then serially quantify a batch of N samples within the same process. This would save the significant overhead of having to load the index for each sample (~50-75% of the total per-sample processing time). As a bonus, the batch mode could spit out a single transcript x sample matrix so you wouldn't have to run `quantmerge` separately.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/335#issuecomment-1416422342:206,load,load,206,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/335#issuecomment-1416422342,2,['load'],['load']
Performance,", without segfault. ```; [vale@ebi-003 salmon-problem]$ bash run_salmon.sh; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:17:29.867] [jointLog] [info] Starting optimizer; [2016-01-02 20:17:30.130] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:2040,Load,Loading,2040,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"------------------- ; Reallocating bifurcations time: 0 ; True marks count: 14610695 ; Edges construction time: 9 -------------------------------------------------------------------------------- ; Distinct junctions = 1307919 allowedIn: 18 ; Max Junction ID: 1458039 ; seen.size():11664321 kmerInfo.size():1458040 approximateContigTotalLength: 96596288 ; counters for complex kmers: ; (prec>1 & succ>1)=163493 | (succ>1 & isStart)=1600 | (prec>1 & isEnd)=1705 | (isStart & isEnd)=136 contig count: 2046804 element count: 189087548 complex nodes: 166934 ; number of ones in rank vector: 2046803 ; [2022-04-16 11:19:37.060] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file. [2022-04-16 11:19:37.060] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory salmon_index_23 ; size = 189087548 ; ----------------------------------------- ; | Loading contigs | Time = 43.37 ms ----------------------------------------- ; size = 189087548 ; ----------------------------------------- ; | Loading contig boundaries | Time = 19.565 ms ----------------------------------------- ; Number of ones: 2046803 ; Number of ones per inventory item: 512 ; Inventory entries filled: 3998 ; 2046803 ; [2022-04-16 11:19:37.638] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure. [2022-04-16 11:19:37.687] [puff::index::jointLog] [info] contig count for validation: 2,046,803 ; [2022-04-16 11:19:38.556] [puff::index::jointLog] [info] Total # of Contigs : 2,046,803 ; [2022-04-16 11:19:38.556] [puff::index::jointLog] [info] Total # of numerical Contigs : 2,046,803 ; [2022-04-16 11:19:38.774] [puff::index::jointLog] [info] Total # of contig vec entries: 15,036,896 ; [2022-04-16 11:19:38.774] [puff::index::jointLog] [info] bits per offset entry 24 ; [2022-04-16 11:19:39.637] [puff::index::jointLog] [info] Done constructing the contig vector. 2046804 [2022-04-16 11:19:40.720] [puff::index::jointLog] [info] # segments = 2,04",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317:11812,Load,Loading,11812,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317,1,['Load'],['Loading']
Performance,"-----------------------------------------; | Loading sequence | Time = 1.983 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3113 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.881 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.7554 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 13.626 s; ---------",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:1956,Load,Loading,1956,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance,"---------------------------------------; Reallocating bifurcations time: 0; True marks count: 3362277; Edges construction time: 4; --------------------------------------------------------------------------------; Distinct junctions = 472636. allowedIn: 21; Max Junction ID: 563055; seen.size():4504449 kmerInfo.size():563056; approximateContigTotalLength: 72618120; counters for complex kmers:; (prec>1 & succ>1)=21819 | (succ>1 & isStart)=419 | (prec>1 & isEnd)=421 | (isStart & isEnd)=30; contig count: 717834 element count: 122492815 complex nodes: 22689; # of ones in rank vector: 717833; [2021-08-20 18:05:53.542] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2021-08-20 18:05:53.542] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory indexs/alt_long_index; size = 122492815; -----------------------------------------; | Loading contigs | Time = 11.032 ms; -----------------------------------------; size = 122492815; -----------------------------------------; | Loading contig boundaries | Time = 5.8509 ms; -----------------------------------------; Number of ones: 717833; Number of ones per inventory item: 512; Inventory entries filled: 1403; 717833; [2021-08-20 18:05:53.775] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2021-08-20 18:05:53.780] [puff::index::jointLog] [info] contig count for validation: 717,833; [2021-08-20 18:05:53.943] [puff::index::jointLog] [info] Total # of Contigs : 717,833; [2021-08-20 18:05:53.944] [puff::index::jointLog] [info] Total # of numerical Contigs : 717,833; [2021-08-20 18:05:53.963] [puff::index::jointLog] [info] Total # of contig vec entries: 3,341,414; [2021-08-20 18:05:53.964] [puff::index::jointLog] [info] bits per offset entry 22; [2021-08-20 18:05:54.037] [puff::index::jointLog] [info] Done constructing the contig vector. 717834; [2021-08-20 18:05:54.564] [puff::index::jointLog] [info] # segments = 717,833; [2021-08-20 ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/696:4639,Load,Loading,4639,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/696,1,['Load'],['Loading']
Performance,"---------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3113 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.881 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.7554 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 13.626 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.5082 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 12.272 ms; -----------------------------------------; ---. However, the *.sf files are the same as previous ones, i.e. no gene level results.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:2610,Load,Loading,2610,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,5,['Load'],['Loading']
Performance,"-------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 650 us; -----------------------------------------; [2021-05-20 10:53:56.156] [jointLog] [info] done; [2021-05-20 10:53:56.156] [jointLog] [info] Index contained 44,026 targets. [2021-05-20 10:53:58.080] [jointLog] [info] Number of decoys : 0; [2021-05-20 10:54:28.729] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-20 11:34:48.022] [jointLog] [info] Computed 145,552 rich equivalence classes for further processing; [2021-05-20 11:34:48.022] [jointLog] [info] Counted 10,027,482 total reads in the equivalence classes ; [2021-05-20 11:34:48.050] [jointLog] [info] Number of mappings discarded because of alignment score : 208,344,973; [2021-05-20 11:34:48.050] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 11,448,458; [2021-05-20 11:34:48.050] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2021-05-20 11:34:48.050] [jointLog] [info] Number ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:3203,Load,Loading,3203,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"------------------------------------; -----------------------------------------; | Loading eq table | Time = 3.3896 s; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.8301 s; -----------------------------------------; size = 3567796961; Number of ones: 35010141; Number of ones per inventory item: 512; Inventory entries filled: 68380; -----------------------------------------; | Loading contig boundaries | Time = 11.288 s; -----------------------------------------; size = 3567796961; -----------------------------------------; | Loading sequence | Time = 7.763 s; -----------------------------------------; size = 2517492731; -----------------------------------------; | Loading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>6442720932; Index requested greater than vector's size: 6442720996>6442720932; Index requested greater than vector's size: 6442721060>6442720932; Index requested greater than vector's size: 6442721124>6442720932; Index requested greater than vector's size: 6442721188>6442720932; Index requested greater than vector's size: 6442721252>6442720932; Index requested greater than vector's size: 6442721316>6442720932; Index requested greater than vector's size: 6442721380>6442720932; Index requested greater than vector's size: 6442721444>6442720932; ...; ```. The index does not finish loading, and so salmon does not enter read quantification routines. **To Reproduce**. * Which version of salmon was used? 1.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? ; Github release tarball; * Wh",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:1842,Load,Loading,1842,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,1,['Load'],['Loading']
Performance,"--------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3113 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.881 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.7554 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 13.626 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.5082 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 12.272 ms; -----------------------------------------; ---. However, the *.sf files are the same as previo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:2366,Load,Loading,2366,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance,"-------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 650 us; -----------------------------------------; [2021-05-20 10:53:56.156] [jointLog] [info] done; [2021-05-20 10:53:56.156] [jointLog] [info] Index contained 44,026 targets. [2021-05-20 10:53:58.080] [jointLog] [info] Number of decoys : 0; [2021-05-20 10:54:28.729] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-20 11:34:48.022] [jointLog] [info] Computed 145,552 rich equivalence classes for further processing; [2021-05-20 11:34:48.022] [jointLog] [info] Counted 10,027,482 total reads in the equivalence classes ; [2021-05-20 11:34:48.050] [jointLog] [info] Number of mappings discarded because of alignment score : 208,344,973; [2021-05-20 11:34:48.050] [jointLog] [info] Number of fragments entirely discarded because of alignment score ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:3068,Load,Loading,3068,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"------------------------------; Distinct junctions = 5239944. TwoPaCo::buildGraphMain:: allocated with scalable_malloc; freeing.; TwoPaCo::buildGraphMain:: Calling scalable_allocation_command(TBBMALLOC_CLEAN_ALL_BUFFERS, 0);; allowedIn: 139; Max Junction ID: 12729038; seen.size():101832313 kmerInfo.size():12729039; approximateContigTotalLength: 1607258836; counters for complex kmers:; (prec>1 & succ>1)=133010 | (succ>1 & isStart)=7442 | (prec>1 & isEnd)=7516 | (isStart & isEnd)=2442; contig count: 11353512 element count: 2210067304 complex nodes: 150410; # of ones in rank vector: 11353511; [2023-03-15 20:35:10.185] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2023-03-15 20:35:10.185] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory illerney.index; size = 2210067304; -----------------------------------------; | Loading contigs | Time = 451.61 ms; -----------------------------------------; size = 2210067304; -----------------------------------------; | Loading contig boundaries | Time = 180.73 ms; -----------------------------------------; Number of ones: 11353511; Number of ones per inventory item: 512; Inventory entries filled: 22175; 11353511; [2023-03-15 20:35:13.921] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2023-03-15 20:35:13.997] [puff::index::jointLog] [info] contig count for validation: 11,353,511; [2023-03-15 20:35:19.728] [puff::index::jointLog] [info] Total # of Contigs : 11,353,511; [2023-03-15 20:35:19.728] [puff::index::jointLog] [info] Total # of numerical Contigs : 11,353,511; [2023-03-15 20:35:20.804] [puff::index::jointLog] [info] Total # of contig vec entries: 16,343,267; [2023-03-15 20:35:20.804] [puff::index::jointLog] [info] bits per offset entry 24; [2023-03-15 20:35:22.331] [puff::index::jointLog] [info] Done constructing the contig vector. 11353512; [2023-03-15 20:35:25.697] [puff::index::jointLog] [info] # segments = 11,35",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/837:3466,Load,Loading,3466,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/837,1,['Load'],['Loading']
Performance,"------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 382.03 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.4861 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.4236 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.031 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.983 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading r",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:1278,Load,Loading,1278,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance,"-----------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.4861 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.4236 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.031 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.983 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Tim",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:1412,Load,Loading,1412,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance,"----------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference sequence | Time = 240.84 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.9587 ms; -----------------------------------------; [2021-04-09 12:16:41.658] [jointLog] [info] done; [2021-04-09 12:16:41.658] [jointLog] [info] Index contained 45,375 targets; [2021-04-09 12:16:41.673] [jointLog] [info] Number of decoys : 1; [2021-04-09 12:16:41.673] [jointLog] [info] First decoy index : 45,374. [2021-04-09 12:16:42.811] [alevinLog] [info] Starting optimizer. [2021-04-09 12:16:42.800] [jointLog] [info] Computed 84 rich equivalence classes for further processing; [2021-04-09 12:16:42.800] [jointLog] [info] Counted 135 total reads in the equivalence classes; [2021-04-09 12:16:42.801] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 26; [2021-04-09 12:16:42.803] [jointLog] [info] Mapping rate = 3.375%. Analyzed 18",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:5333,Load,Loading,5333,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"---------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference sequence | Time = 240.84 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.9587 ms; -----------------------------------------; [2021-04-09 12:16:41.658] [jointLog] [info] done; [2021-04-09 12:16:41.658] [jointLog] [info] Index contained 45,375 targets; [2021-04-09 12:16:41.673] [jointLog] [info] Number of decoys : 1; [2021-04-09 12:16:41.673] [jointLog] [info] First decoy index : 45,374. [2021-04-09 12:16:42.811] [alevinLog] [info] Starting optimizer. [2021-04-09 12:16:42.800] [jointLog] [info] Computed 84 rich equivalence classes for further processing; [2021-04-09 12:16:42.800] [jointLog] [info] Counted 135 total reads in the equivalence classes; [2021-04-09 12:16:42.801] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 26; [2021-04-09 12:16:42.803] [jointLog] [info] Mapping rate = 3.375%. Analyzed 184 cells (95% of all).Log] [info] finished quantifyLibrary(); [2021-04-09 12:16:43.532] [alevinLog] [warning] 37 mitorna gene(s) does not have transcr",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:5468,Load,Loading,5468,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"--------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 5.1367 ms; -----------------------------------------; [2021-09-20 16:31:04.631] [jointLog] [info] done; [2021-09-20 16:31:04.632] [jointLog] [info] Index contained 116,612 targets; Killed. ```. However, if I run it only with --validateMappings, it works fine and generates the output quant.sf file. ```; $ salmon quant -l A -i /mnt/hgfs/Data/reference_data/mm10/default -r /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz -o out -p 6 --validateMappings; Version Server Response: Not Found; ### salmon (selective-alignment-based) v1.5.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ libType ] => { A }; ### [ index ] => { /mnt/hgfs/Data/reference_data/mm10/default }; ### [ unmatedReads ] => { /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz }; ### [ output ] => { out",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:2672,Load,Loading,2672,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"--------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 75.428 ms; -----------------------------------------. [2021-09-20 16:22:03.730] [jointLog] [info] done; [2021-09-20 16:22:03.778] [jointLog] [info] Index contained 116,612 targets; [2021-09-20 16:22:03.892] [jointLog] [info] Number of decoys : 66; [2021-09-20 16:22:03.892] [jointLog] [info] First decoy index : 116,507 ; [2021-09-20 16:22:04.460] [jointLog] [info] Automatically detected most likely library type as U; processed 37,000,000 fragments; hits: 117,167,504; hits per frag: 3.16785. [2021-09-20 16:24:48.269] [jointLog] [info] Computed 309,226 rich equivalence classes for further processing; [2021-09-20 16:24:48.269] [jointLog] [info] Counted 34,252,402 total reads in the equivalence classes ; [2021-09-20 16:24:48.274] [jointLog] [info] Number of mappings discarded",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:5636,Load,Loading,5636,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,--------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 2.8044 ms; -----------------------------------------. [2023-11-30 09:37:51.026] [jointLog] [info] done; [2023-11-30 09:37:51.104] [jointLog] [info] Index contained 253166 targets; [2023-11-30 09:37:51.166] [jointLog] [info] Number of decoys : 194; [2023-11-30 09:37:51.166] [jointLog] [info] First decoy index : 252924 ; [2023-11-30 09:37:54.100] [jointLog] [info] Automatically detected most likely library type as ISR. [2023-11-30 09:38:33.382] [jointLog] [info] Thread saw mini-batch with a maximum of 3.76% zero probability fragments; [2023-11-30 09:38:33.406] [jointLog] [info] Computed 12939 rich equivalence classes for further processing; [2023-11-30 09:38:33.407] [jointLog] [info] Counted 268744 total reads in the equivalence classes ; [2023-11-30 09:38:33.414] [jointL,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:7434,Load,Loading,7434,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"--------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.3385 ms; -----------------------------------------. Segmentation fault (core dumped); ```. Output when the flag is off and the process finishes without the seg fault:; ```; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Sign up for the salmon mailing list to hear about new versions, features and updates at:; https://oceangenomics.com/subscribe; ### salmon (selective-alignment-based) v1.9.0; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /share/genomes/human/hg38/genc",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:4309,Load,Loading,4309,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,-------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 2.8044 ms; -----------------------------------------. [2023-11-30 09:37:51.026] [jointLog] [info] done; [2023-11-30 09:37:51.104] [jointLog] [info] Index contained 253166 targets; [2023-11-30 09:37:51.166] [jointLog] [info] Number of decoys : 194; [2023-11-30 09:37:51.166] [jointLog] [info] First decoy index : 252924 ; [2023-11-30 09:37:54.100] [jointLog] [info] Automatically detected most likely library type as ISR. [2023-11-30 09:38:33.382] [jointLog] [info] Thread saw mini-batch with a maximum of 3.76% zero probability fragments; [2023-11-30 09:38:33.406] [jointLog] [info] Computed 12939 rich equivalence classes for further processing; [2023-11-30 09:38:33.407] [jointLog] [info] Counted 268744 total reads in the equivalence classes ; [2023-11-30 09:38:33.414] [jointLog] [info] Number of mappings discarded because of alignment score : 148747; [2023-11-30 09:38:33.414] [jointLog] [info] Number of fragments entirely,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:7568,Load,Loading,7568,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"-------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.3385 ms; -----------------------------------------. Segmentation fault (core dumped); ```. Output when the flag is off and the process finishes without the seg fault:; ```; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Sign up for the salmon mailing list to hear about new versions, features and updates at:; https://oceangenomics.com/subscribe; ### salmon (selective-alignment-based) v1.9.0; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /share/genomes/human/hg38/gencode_v43/primary_comprehensive/SalmonIndex }; ### [ libType ] => { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.f",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:4443,Load,Loading,4443,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"-------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 5.1367 ms; -----------------------------------------; [2021-09-20 16:31:04.631] [jointLog] [info] done; [2021-09-20 16:31:04.632] [jointLog] [info] Index contained 116,612 targets; Killed. ```. However, if I run it only with --validateMappings, it works fine and generates the output quant.sf file. ```; $ salmon quant -l A -i /mnt/hgfs/Data/reference_data/mm10/default -r /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz -o out -p 6 --validateMappings; Version Server Response: Not Found; ### salmon (selective-alignment-based) v1.5.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ libType ] => { A }; ### [ index ] => { /mnt/hgfs/Data/reference_data/mm10/default }; ### [ unmatedReads ] => { /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz }; ### [ output ] => { out }; ### [ threads ] => { 6 }; ### [ validateMappings ] => { }; Logs will be written to out/logs; [2021-09-20 16:20:48.240] [jointLog] [info] setting ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:2806,Load,Loading,2806,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"-------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 75.428 ms; -----------------------------------------. [2021-09-20 16:22:03.730] [jointLog] [info] done; [2021-09-20 16:22:03.778] [jointLog] [info] Index contained 116,612 targets; [2021-09-20 16:22:03.892] [jointLog] [info] Number of decoys : 66; [2021-09-20 16:22:03.892] [jointLog] [info] First decoy index : 116,507 ; [2021-09-20 16:22:04.460] [jointLog] [info] Automatically detected most likely library type as U; processed 37,000,000 fragments; hits: 117,167,504; hits per frag: 3.16785. [2021-09-20 16:24:48.269] [jointLog] [info] Computed 309,226 rich equivalence classes for further processing; [2021-09-20 16:24:48.269] [jointLog] [info] Counted 34,252,402 total reads in the equivalence classes ; [2021-09-20 16:24:48.274] [jointLog] [info] Number of mappings discarded because of alignment score : 13,534,931; [2021-09-20 16:24:48.274] [jointLog] [info] Number of fragments entirely discarded because of alignment sco",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:5769,Load,Loading,5769,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"-------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading reference sequence | Time = 408.65 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 48.085 ms; -----------------------------------------; Exception : [boost::filesystem::status: File name too long: ""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_33-41/33-41_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_32-40/32-40_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P3_38-45_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_30-38/30-38_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_20-28/20-28_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_13-21/13-21_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-6-12_221020_L002_R1.fastq.gz; /noback",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:11296,Load,Loading,11296,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 985.04 us; -----------------------------------------; [2023-02-23 09:40:13.935] [jointLog] [info] done; ```; (taken from the terminal as the logfile is empty, and the current time is 12:54 pm = >3 hr run time so far). **To Reproduce**; I ran the following command:. ```; salmon quant \; --geneMap Homo_sapiens.GRCh38.106.gtf \; --threads 6 \; --libType=ISR \; --index salmon_index \; -1 ACV_REP2_1_val_1.fq.gz -2 CV_REP2_2_val_2.fq.gz \; --seqBias --gcBias --posBias \; -o ACV_REP2; ```; * Which version of salmon was used? v1.9.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? `nf-core/rnaseq`: via singularity; while running manually to troubleshoot: conda.; * Which reference (e.g. transcriptome) was used? Homo_sapiens.GRCh38 transcriptome + ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:10445,Load,Loading,10445,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 21.142 ms; -----------------------------------------; [2024-11-01 05:14:22.991] [jointLog] [info] done; [2024-11-01 05:14:23.016] [jointLog] [info] Index contained 252,149 targets. [2024-11-01 05:14:24.607] [jointLog] [info] Number of decoys : 194; [2024-11-01 05:14:24.607] [jointLog] [info] First decoy index : 251,913 ; [2024-11-01 05:14:29.425] [jointLog] [info] Automatically detected most likely library type as ISR. [A. [32mprocessed[31m 500,000 [32mfragments[0m; hits: 216,939, hits per frag: 0.43692[A. [32mprocessed[31m 1,000,000 [32mfragments[0m; hits: 435,436, hits per frag: 0.442697[A. [32mprocessed[31m 1,500,000 [32mfragments[0m; hits: 654,611, hits per frag: 0.438092[A. [32mprocessed[31m 2,000,000 [32mfragments[0m; hits: 857,321, hits per frag: 0.431748[A. [32m",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:3943,Load,Loading,3943,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 18.506 ms; -----------------------------------------; [2023-09-28 04:51:48.011] [jointLog] [info] done; [2023-09-28 04:51:48.061] [jointLog] [info] Index contained 5352508 targets; [2023-09-28 04:52:00.269] [jointLog] [info] Number of decoys : 182; [2023-09-28 04:52:00.269] [jointLog] [info] First decoy index : 5155176 . [2023-09-28 04:52:03.534] [jointLog] [info] Automatically detected most likely library type as ISR; processed 26000000 fragments; hits: 42435888, hits per frag: 1.63223/.../work2/c3/593743a22569a97e1d10b2a200b713/.command.sh: line 4: 38 Segmentation fault (core dumped) /usr/local/bin/salmon quant -i references/salmon/*ucsc.rmsk.salmon*/ --libType A -1 SRR14506785_output_forward_paired.fq.gz -2 SRR14506785_output_reverse_paired.fq.gz -p 8 --validateMappi",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:4169,Load,Loading,4169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"----------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading reference sequence | Time = 408.65 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 48.085 ms; -----------------------------------------; Exception : [boost::filesystem::status: File name too long: ""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_33-41/33-41_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_32-40/32-40_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P3_38-45_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_30-38/30-38_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_20-28/20-28_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_13-21/13-21_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-6-12_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_17-25/17-25_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-11-1",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:11431,Load,Loading,11431,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"---------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 21.142 ms; -----------------------------------------; [2024-11-01 05:14:22.991] [jointLog] [info] done; [2024-11-01 05:14:23.016] [jointLog] [info] Index contained 252,149 targets. [2024-11-01 05:14:24.607] [jointLog] [info] Number of decoys : 194; [2024-11-01 05:14:24.607] [jointLog] [info] First decoy index : 251,913 ; [2024-11-01 05:14:29.425] [jointLog] [info] Automatically detected most likely library type as ISR. [A. [32mprocessed[31m 500,000 [32mfragments[0m; hits: 216,939, hits per frag: 0.43692[A. [32mprocessed[31m 1,000,000 [32mfragments[0m; hits: 435,436, hits per frag: 0.442697[A. [32mprocessed[31m 1,500,000 [32mfragments[0m; hits: 654,611, hits per frag: 0.438092[A. [32mprocessed[31m 2,000,000 [32mfragments[0m; hits: 857,321, hits per frag: 0.431748[A. [32mprocessed[31m 2,500,000 [32mfragments[0m; hits: 1,074,298, hits per frag: 0.432761[A. [32mprocessed[31m 3,000,000 [32mfragments[0m; hits: 1,284,332, h",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:4078,Load,Loading,4078,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"---------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 985.04 us; -----------------------------------------; [2023-02-23 09:40:13.935] [jointLog] [info] done; ```; (taken from the terminal as the logfile is empty, and the current time is 12:54 pm = >3 hr run time so far). **To Reproduce**; I ran the following command:. ```; salmon quant \; --geneMap Homo_sapiens.GRCh38.106.gtf \; --threads 6 \; --libType=ISR \; --index salmon_index \; -1 ACV_REP2_1_val_1.fq.gz -2 CV_REP2_2_val_2.fq.gz \; --seqBias --gcBias --posBias \; -o ACV_REP2; ```; * Which version of salmon was used? v1.9.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? `nf-core/rnaseq`: via singularity; while running manually to troubleshoot: conda.; * Which reference (e.g. transcriptome) was used? Homo_sapiens.GRCh38 transcriptome + genome as a 'gentrome'; * Which read files were used? newly sequenced bulk RNAseq reads. **Expected behavior**; All samples with similar numbers of rea",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:10580,Load,Loading,10580,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"---------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 18.506 ms; -----------------------------------------; [2023-09-28 04:51:48.011] [jointLog] [info] done; [2023-09-28 04:51:48.061] [jointLog] [info] Index contained 5352508 targets; [2023-09-28 04:52:00.269] [jointLog] [info] Number of decoys : 182; [2023-09-28 04:52:00.269] [jointLog] [info] First decoy index : 5155176 . [2023-09-28 04:52:03.534] [jointLog] [info] Automatically detected most likely library type as ISR; processed 26000000 fragments; hits: 42435888, hits per frag: 1.63223/.../work2/c3/593743a22569a97e1d10b2a200b713/.command.sh: line 4: 38 Segmentation fault (core dumped) /usr/local/bin/salmon quant -i references/salmon/*ucsc.rmsk.salmon*/ --libType A -1 SRR14506785_output_forward_paired.fq.gz -2 SRR14506785_output_reverse_paired.fq.gz -p 8 --validateMappings --gcBias --seqBias --recoverOrphans --rangeFactorizationBins 4 --output SRR14506785.salmon.rmsk.out --writeUnmappedNames; ```. **Desktop (please c",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:4304,Load,Loading,4304,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"---------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference sequence | Time = 240.84 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.9587 ms; -----------------------------------------; [2021-04-09 12:16:41.658] [jointLog] [info] done; [2021-04-09 12:16:41.658] [jointLog] [info] Index contained 45,375 targets; [2021-04-09 12:16:41.673] [jointLog] [info] Number of decoys : 1; [2021-04-09 12:16:41.673] [jointLog] [info] First decoy index : 45,374. [2021-04-09 12:16:42.811] [alevinLog] [info] Starting optimizer. [2021-04-09 12:16:42.800] [jointLog] [info] Computed 84 rich equivalence classes for further processing; [2021-04-09 12:16:42.800] [jointLog] [info] Counted 135 total reads in the equivalence classes; [2021-04-09 12:16:42.801] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 26; [2021-04-09 12:16:42.803] [jointLog] [info] Mapping rate = 3.375%. Analyzed 184 cells (95% of all).Log] [info] finished quantifyLibrary(); [2021-04-09 12:16:43.532] [alevinLog] [warning] 37 mitorna gene(s) does not have transcript in the reference; [2021-04-09 12:16:43.532] [alevinLog] [info] Total 0 usable mRna genes; [2021-04-09 12:16:43.533] [alevinLog] [warning] 529 ribosomal rna gene(s) does not have transcript in the reference; [2021-04-09 12:16:43.533] [alevinLog] [info] Total 22 usable rRna genes; [2021-04-09 12:16:43.582] [alevinLog] [info] Total 135.00 UMI after deduplicating.; [2021-04-09 12:16:43.582] [alevinLog] [info] Total 0 BiDirected",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:5888,optimiz,optimizer,5888,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['optimiz'],['optimizer']
Performance,"----------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3113 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.881 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.7554 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 13.626 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.5082 s; -----------------------------------------; -----------------------------------------; | Loading reference accumu",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:2232,Load,Loading,2232,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance,"-------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3113 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.881 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.7554 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 13.626 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:2101,Load,Loading,2101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Load'],['Loading']
Performance,"--biasCorrect \; > --useFSPD; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna_38.p4.83_repbase20.11_ercc_SIRV.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /dev/fd/63 }; # [ mates2 ] => { /dev/fd/62 }; # [ output ] => { /tmp/SRR2048254_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to /tmp/SRR2048254_salmon_out/logs; [2016-06-21 10:04:29.524] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi indextcmalloc: large alloc 4294967296 bytes == 0x4d084000 @; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Suffix Array; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Position Hash; [2016-06-21 10:04:30.158] [jointLog] [info] Loading Quasi index; [2016-06-21 10:04:32.681] [stderrLog] [info] Loading Transcript Info; [2016-06-21 10:04:33.686] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-06-21 10:04:34.050] [stderrLog] [info] There were 115426 set bits in the bit array; [2016-06-21 10:04:34.376] [stderrLog] [info] Computing transcript lengths; [2016-06-21 10:04:34.377] [stderrLog] [info] Waiting to finish loading hash; Index contained 115426 targets; [2016-06-21 10:04:47.033] [jointLog] [info] done; [2016-06-21 10:04:47.033] [stderrLog] [info] Done loading index. processed 6500000 fragments; hits: 13927069, hits per frag: 2.15389. [2016-06-21 10:05:13.847] [jointLog] [info] Computed 165969 rich equivalence classes for further processing; [2016-06-21 10:05:13.847] [jointLog] [info] Counted 6514601 total reads in the equivalence classes; [2016-06-21 10:05:13.893] [jointLog] [info] Mapping rate = 95.0922%. [2016-06-21 10:05:13.893] [jointLog] [info] finished quantifyLibrary(); [2016-06-21 10:05:13.894] [jointLog] [info] Starting optimizer; Segmentation fault (core dumped); ```. It runs fine when disabling `--useFSPD`",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/64:1645,Load,Loading,1645,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/64,4,"['Load', 'load', 'optimiz']","['Loading', 'loading', 'optimizer']"
Performance,"-0.7.12.3/bwamem.c; bwa-0.7.12.3/bwamem.h; bwa-0.7.12.3/bwamem_extra.c; bwa-0.7.12.3/bwamem_pair.c; bwa-0.7.12.3/bwape.c; bwa-0.7.12.3/bwase.c; bwa-0.7.12.3/bwase.h; bwa-0.7.12.3/bwaseqio.c; bwa-0.7.12.3/bwashm.c; bwa-0.7.12.3/bwt.c; bwa-0.7.12.3/bwt.h; bwa-0.7.12.3/bwt_gen.c; bwa-0.7.12.3/bwt_lite.c; bwa-0.7.12.3/bwt_lite.h; bwa-0.7.12.3/bwtaln.c; bwa-0.7.12.3/bwtaln.h; bwa-0.7.12.3/bwtgap.c; bwa-0.7.12.3/bwtgap.h; bwa-0.7.12.3/bwtindex.c; bwa-0.7.12.3/bwtsw2.h; bwa-0.7.12.3/bwtsw2_aux.c; bwa-0.7.12.3/bwtsw2_chain.c; bwa-0.7.12.3/bwtsw2_core.c; bwa-0.7.12.3/bwtsw2_main.c; bwa-0.7.12.3/bwtsw2_pair.c; bwa-0.7.12.3/example.c; bwa-0.7.12.3/fastmap.c; bwa-0.7.12.3/is.c; bwa-0.7.12.3/kbtree.h; bwa-0.7.12.3/khash.h; bwa-0.7.12.3/kopen.c; bwa-0.7.12.3/kseq.h; bwa-0.7.12.3/ksort.h; bwa-0.7.12.3/kstring.c; bwa-0.7.12.3/kstring.h; bwa-0.7.12.3/ksw.c; bwa-0.7.12.3/ksw.h; bwa-0.7.12.3/kthread.c; bwa-0.7.12.3/kvec.h; bwa-0.7.12.3/main.c; bwa-0.7.12.3/malloc_wrap.c; bwa-0.7.12.3/malloc_wrap.h; bwa-0.7.12.3/maxk.c; bwa-0.7.12.3/pemerge.c; bwa-0.7.12.3/qualfa2fq.pl; bwa-0.7.12.3/utils.c; bwa-0.7.12.3/utils.h; bwa-0.7.12.3/xa2multi.pl; [ 50%] No patch step for 'libbwa'; [ 50%] No update step for 'libbwa'; [ 51%] No configure step for 'libbwa'; [ 51%] Performing build step for 'libbwa'; /bin/ld: cannot find -lz; collect2: error: ld returned 1 exit status; make[3]: *** [bwa] Error 1; make[2]: *** [libbwa-prefix/src/libbwa-stamp/libbwa-build] Error 2; make[1]: *** [CMakeFiles/libbwa.dir/all] Error 2; make: *** [all] Error 2. So as you said I'd say its having issued finding the zlibs library. Similar to how I used 'DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h' to specify the zlib library for 'cmake', is there a way to do it for the 'make' command? I've tried using the following but haven't had success:; make -I /users/work/jake/bin/zlib-1.2.11/zlib.h; make --include-dir=/users/work/jake/bin/zlib-1.2.11/zlib.h. Sorry for the very basic questions.... I'm kind of learning as I go.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:3409,Perform,Performing,3409,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,1,['Perform'],['Performing']
Performance,"-01-29 16:06:45.902] [alevinLog] [info] Done Importing gene count matrix for dimension 4000x29574; 0.00248159 1.3538e-06 0.000205983 221334; 0.00714905 1.09739e-06 0.000617623 71036.5; [2019-01-29 16:06:46.603] [alevinLog] [info] Starting white listing; [2019-01-29 16:06:46.615] [alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2019-01-29 16:06:46.615] [alevinLog] [info] Total 4000 barcodes found; [2019-01-29 16:06:46.615] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 16:06:46.615] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 16:06:46.615] [alevinLog] [info] Starting to make feature Matrix; [2019-01-29 16:06:46.790] [alevinLog] [info] Done making regular featues; [2019-01-29 16:06:46.790] [alevinLog] [info] Done making feature Matrix; [2019-01-29 16:06:46.871] [alevinLog] [info] Finished white listing; [2019-01-29 16:06:46.957] [alevinLog] [info] Finished optimizer; ```. ### no whitelist, expectCells 3000. ```; [2019-01-29 15:45:58.012] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-01-29 15:45:58.012] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-01-29 15:45:58.012] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-01-29 15:45:58.012] [jointLog] [info] Using default value of 0.8 for minScoreFraction in Alevin; [2019-01-29 15:45:58.021] [alevinLog] [info] Processing barcodes files (if Present). processed 287 Million barcodes. [2019-01-29 15:51:37.144] [alevinLog] [info] Done barcode density calculation.; [2019-01-29 15:51:37.144] [alevinLog] [info] # Barcodes Used: 287883370 / 287983348.; [2019-01-29 15:51:38.549] [alevinLog] [error] Can't find right Boundary.; Please Report this i",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:4121,optimiz,optimizer,4121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['optimiz'],['optimizer']
Performance,"-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 985.04 us; -----------------------------------------; [2023-02-23 09:40:13.935] [jointLog] [info] done; ```; (taken from the terminal as the logfile is empty, and the current time is 12:54 pm = >3 hr run time so far). **To Reproduce**; I ran the following command:. ```; salmon quant \; --",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:10005,Load,Loading,10005,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"-05 16:31:47.863] [alevinLog] [info] Knee found left boundary at 2926 ; [2018-12-05 16:31:50.571] [alevinLog] [info] Gauss Corrected Boundary at 2858 ; [2018-12-05 16:31:50.571] [alevinLog] [info] Learned InvCov: 166.8 normfactor: 2759.5; [2018-12-05 16:31:50.571] [alevinLog] [info] Total 3856(has 998 low confidence) barcodes; [2018-12-05 16:31:50.638] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 16:31:50.935] [alevinLog] [info] Done populating Z matrix; [2018-12-05 16:31:51.000] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 16:31:51.000] [alevinLog] [info] Total Unique barcodes found: 3825581; [2018-12-05 16:31:51.000] [alevinLog] [info] Used Barcodes except Whitelist: 138266; [2018-12-05 16:31:51.087] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 16:31:51.087] [alevinLog] [info] parsing read library format; [2018-12-05 16:31:51.087] [jointLog] [info] There are 2 libraries.; [2018-12-05 16:31:51.161] [jointLog] [info] Loading Quasi index; [2018-12-05 16:31:51.162] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 16:31:51.164] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 16:31:51.808] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 16:31:51.960] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 16:31:52.001] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 16:31:52.022] [stderrLog] [info] Computing transcript lengths; [2018-12-05 16:31:52.022] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 16:31:56.025] [stderrLog] [info] Done loading index; [2018-12-05 16:31:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:12554,Load,Loading,12554,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,-05-03 15:09:51.221] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-05-03 15:09:51.221] [jointLog] [info] parsing read library format; [2024-05-03 15:09:51.221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; -----------------------------------------; size = 2977516968; -----------------------------------------; | Loading reference sequence | Time = 228.26 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 320.51 us; -----------------------------------------; [2024-05-03 15:10:04.136] [jointLog] [info] done; [2024-05-03 15:10:04.170] [jointLog] [info] Index contained 147554 targets. [2024-05-03 15:10:05.131] [jointLog] [info] Number of decoys : 61 ; processed 21000000 fragmentsointLog] [info,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:6580,Load,Loading,6580,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,"-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06 11:45:12.188] [jointLog] [info] Counted 154,595,094 total reads in the equivalence classes ; [2018-12-06 11:45:12.188] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-06 11:45:12.188] [jointLog] [info] Mapping rate = 57.7821%. [2018-12-06 11:45:12.188] [jointLog] [info] finished quantifyLibrary(); [2018-12-06 11:45:13.385] [alevinLog] [info] Starting optimizer. Analyzed 5344 cells (100% of all).; [2018-12-06 11:49:42.634] [alevinLog] [info] Total 4845644.00 UMI after deduplicating.; [2018-12-06 11:49:42.722] [alevinLog] [info] Clearing EqMap; Might take some time.; [2018-12-06 11:49:47.400] [alevinLog] [info] Starting Import of the gene count matrix of size 5344x167268.; Exception : [std::bad_alloc]; ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6944,load,loading,6944,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['load'],['loading']
Performance,"-08-27 19:59:26.866] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-08-27 19:59:26.866] [jointLog] [info] parsing read library format; [2023-08-27 19:59:26.866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading reference sequence | Time = 408.65 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 48.085 ms; -----------------------------------------; Exception : [boost::filesystem::status: File name too long: ""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_33-41/33-41_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_32-40/32-40_221020",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:10857,Load,Loading,10857,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 18.506 ms; -----------------------------------------; [2023-09-28 04:51:48.011] [jointLog] [info] done; [2023-09-28 04:51:48.061] [jointLog] [info] Index contained 5352508 targets; [2023-09-28 04:52:00.269] [jointLog] [info] Number of decoys : 182; [2023-09-28 04:52:00.269] [jointLog] [in,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:3729,Load,Loading,3729,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"-11-01 05:13:59.563] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-11-01 05:13:59.563] [jointLog] [info] parsing read library format; [2024-11-01 05:13:59.563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 21.142 ms; -----------------------------------------; [2024-11-01 05:14:22.991] [jointLog] [info] done; [2024-11-01 05:14:23.016] [jointLog] [info] Index contained 252,149 targets. [2024-11-01 05:14:24.607] [jointLog] [info] Number of decoys : 194; [2024-11-01 05:14:24.607] [jointLog] [in",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:3503,Load,Loading,3503,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"-12 15:08:51.141] [alevinLog] [info] Done importing white-list Barcodes; [2018-12-12 15:08:51.141] [alevinLog] [warning] Skipping 1 Barcodes with 0 reads; Assuming this is the required behavior.; [2018-12-12 15:08:51.141] [alevinLog] [info] Total 95 white-listed Barcodes; [2018-12-12 15:08:51.144] [alevinLog] [info] Done populating Z matrix; [2018-12-12 15:08:51.146] [alevinLog] [info] Done indexing Barcodes; [2018-12-12 15:08:51.146] [alevinLog] [info] Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] [info] Thread saw mini-batch with a maximum of 5.48% zero probabilit",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4386,Load,Loading,4386,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['Load'],['Loading']
Performance,"-30 09:38:33.407] [jointLog] [info] Counted 268744 total reads in the equivalence classes ; [2023-11-30 09:38:33.414] [jointLog] [info] Number of mappings discarded because of alignment score : 148747; [2023-11-30 09:38:33.414] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 75092; [2023-11-30 09:38:33.414] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 67912; [2023-11-30 09:38:33.414] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 46918; [2023-11-30 09:38:33.436] [jointLog] [warning] Only 268744 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2023-11-30 09:38:33.436] [jointLog] [info] Mapping rate = 53.7596%. [2023-11-30 09:38:33.436] [jointLog] [info] finished quantifyLibrary(); [2023-11-30 09:38:33.440] [jointLog] [info] Starting optimizer; [2023-11-30 09:38:33.498] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-11-30 09:38:33.511] [jointLog] [info] iteration = 0 | max rel diff. = 101.852; [2023-11-30 09:38:34.853] [jointLog] [info] iteration = 100 | max rel diff. = 0.263537; [2023-11-30 09:38:36.144] [jointLog] [info] iteration = 200 | max rel diff. = 0.0414157; [2023-11-30 09:38:37.438] [jointLog] [info] iteration = 300 | max rel diff. = 1.17048; [2023-11-30 09:38:38.135] [jointLog] [info] iteration = 355 | max rel diff. = 0.00351135; [2023-11-30 09:38:38.148] [jointLog] [info] Finished optimizer; [2023-11-30 09:38:38.148] [jointLog] [info] writing output ; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; - Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; - Linux r640c10 4.18.0-372.16.1.el8_6.x86_64 #1 SMP Tue Jun 28 03:02:21 EDT 2022 x86_64 GNU/Linux. *",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:9271,optimiz,optimizer,9271,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['optimiz'],['optimizer']
Performance,-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ libType ] => { SR }; ### [ unmatedReads ] => { fastq_files/SRR2454069.fq.gz }; ### [ threads ] => { 8 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further processing; [2016-12-15 16:01:44.937] [jointLog] [info] Counted 12227080 tota,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1158,Load,Loading,1158,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['Load'],['Loading']
Performance,-listed Barcodes; [2018-07-19 18:26:18.285] [alevinLog] [info] Done populating Z matrix; [2018-07-19 18:26:18.300] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.11753.0.PTF-default #1 SMP Wed Oct 19 14:11:00 UTC 2016 (56c73f1) x86_64 x86_64 x86_64 GNU/Linux`; `$ lsb_release -a; LSB Version:	core-2.0-noarch:core-3.2-noarch:core-4.0-noarch:core-2.0-x86_64:core-3.2-x86_64:core-4.0-x86_64:desktop-4.0-amd64:desktop-4.0-noarch:graphics-2.0-amd64:graphics-2.0-noarch:graphics-3.2-amd64:graphics-3.2-noarch:graphics-4.0-amd64:graphics-4.0-noarch; Distributor ID:	SUSE LINUX; Description:	SUSE Linux Enterprise Server 1,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5539,load,loading,5539,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['load'],['loading']
Performance,-us; eVBOpt --output test_quant --numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:45:33.234] [jointLog] [info] Starting optimizer; [2016-12-13 22:45:33.516] [jointLog] [info] Marked 0 weighted equi,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1522,Load,Loading,1522,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['Load'],['Loading']
Performance,-useVBOpt --output test_quant --; numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:38:54.413] [jointLog] [info] parsing read library format; [2016-12-13 22:38:54.413] [jointLog] [info] There is 1 library.; [2016-12-13 22:38:56.240] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:38:56.240] [jointLog] [info] Loading Quasi index; [2016-12-13 22:38:56.240] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:39:01.268] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:40:22.618] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:40:22.619] [jointLog] [info] Starting optimizer; [2016-12-13 22:40:22.904] [jointLog] [info] Marked 0 weighted equi,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:1649,Load,Loading,1649,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,1,['Load'],['Loading']
Performance,". I processed the data above using the latest salmon from the develop branch; (the release candidate for 1.3.0), and I got the following time (used 8; threads, so timing is not directly comparable). ```; 4604.57user 43.64system 9:24.15elapsed 823%CPU; ```. The whole log is. ```; [2020-06-15 23:51:54.747] [jointLog] [info] setting maxHashResizeThreads to; 8; [2020-06-15 23:51:54.747] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-15 23:51:54.747] [jointLog] [info] parsing read library format; [2020-06-15 23:51:54.747] [jointLog] [info] There is 1 library.; [2020-06-15 23:51:54.814] [jointLog] [info] Loading pufferfish index; [2020-06-15 23:51:54.814] [jointLog] [info] Loading dense pufferfish index.; [2020-06-15 23:51:55.555] [jointLog] [info] done; [2020-06-15 23:51:55.555] [jointLog] [info] Index contained 116,248 targets; [2020-06-15 23:51:55.588] [jointLog] [info] Number of decoys : 0; [2020-06-16 00:00:59.666] [jointLog] [info] Computed 344,764 rich; equivalence classes for further processing; [2020-06-16 00:00:59.666] [jointLog] [info] Counted 12,956,134 total reads; in the equivalence classes; [2020-06-16 00:00:59.673] [jointLog] [warning] 0.0736383% of fragments were; shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a; smaller k.; The minimum read size found was 1. [2020-06-16 00:00:59.673] [jointLog] [info] Number of mappings discarded; because of alignment score : 134,091,887; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments entirely; discarded because of alignment score : 2,429,390; [2020-06-16 00:00:59.6",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644527727:1742,Load,Loading,1742,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644527727,1,['Load'],['Loading']
Performance,. [2018-07-19 18:26:13.307] [alevinLog] [info] Done barcode density calculation.; [2018-07-19 18:26:13.307] [alevinLog] [info] # Barcodes Used: 86885223 / 87959276.; [2018-07-19 18:26:13.334] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 18:26:13.334] [alevinLog] [info] Total 54879 white-listed Barcodes; [2018-07-19 18:26:18.285] [alevinLog] [info] Done populating Z matrix; [2018-07-19 18:26:18.300] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.11753.0.PTF-default #1 SMP Wed Oct 19 14:11:00 UTC 2016 (56c73f1) x86_64 x86_64 x86_64 GNU/Linux`; `$ lsb_release -a; LSB Version:	core-2.0-noa,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5219,Load,Loading,5219,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['Load'],['Loading']
Performance,"./salmon index -t Mus_musculus.GRCm38.cdna.all.norm.fasta -i GRCm38.cdna.all_index --type quasi -l 31. Dear Salmon list,. I am using the Salmon 0.8.1 binary for Mac OS X, Sierra, 10.12.8. I am trying to set up an mm10; mouse index. I downlaod the mouse cDNAs from Ensembl, and normlized the ends with galaxy.; I am running evelything in lib in case there are path issues.; Here is my directory:. c2b2afmd2:lib friedman$ ls; Mus_musculus.GRCm38.cdna.all.fa	libtbbmalloc_proxy.dylib; libtbb.dylib			salmon; libtbbmalloc.dylib. Here is my attemot to build an index:. c2b2afmd2:lib friedman$ ./salmon index -t Mus_musculus.GRCm38.cdna.all.norm.fasta -i GRCm38.cdna.all_index --type quasi -l 31; dyld: Library not loaded: @rpath/libtbbmalloc_proxy.dylib; Referenced from: /Applications/Salmon-0.8.2_macOX_10.12/lib/./salmon; Reason: image not found; Abort trap: 6. I would greatly appreciate any help that you might be able ot give. Thanks and best wishes,; Rich; Richard A. Friedman, PhD; Associate Research Scientist,; Biomedical Informatics Shared Resource; Herbert Irving Comprehensive Cancer Center (HICCC); Lecturer,; Department of Biomedical Informatics (DBMI); Room 825; Irving Cancer Research Center ; Columbia University Herbert and Florence Irving Medical Center; 1130 St. Nicholas Ave; New York, NY 10032; (212)851-4765 (voice); raf4@cumc.columbia.edu. http://www.columbia.edu/~raf4/index.html. ‚ÄúWill there still be ""Classics Illustrated‚Äù by the time I have children? I cannot; imagine raising kids without ""Classics Illustrated‚Äù .‚Äù -Rose Friedman, age 20",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/215:709,load,loaded,709,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/215,1,['load'],['loaded']
Performance,".1 boost/1.70.0-gcc libiconv/1.16; export CC=`which gcc`; export CXX=`which c++`. cd $MODULE_HOME; mkdir -p source/$PACKAGE_NAME/$VERSION; INSTALL_DIR=$MODULE_HOME/modules/$PACKAGE_NAME/$VERSION; mkdir -p $INSTALL_DIR; mkdir -p modfiles/$PACKAGE_NAME. cd source/$PACKAGE_NAME/$VERSION; wget $LATEST_RELEASE -O - | tar -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find Iconv (missing: Iconv_LIBRARY); Call Stack (most recent call first):; /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindIconv.cmake:120 (find_package_handle_standard_args); CMakeLists.txt:362 (find_package). -- Configuring incomplete, errors occurred!; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeOutput.log"".; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeError.log"".; ```; I'm also attaching the full CMake logs. This is right at the edge of my knowledge, so I'm not 100% sure I got libiconv installed corre",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:1768,Perform,Performing,1768,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,2,['Perform'],['Performing']
Performance,".1) of salmon and often get a low mapping rate of my samples. This time I got the lowest ratio ever, 0.0417748%. . ```; [2021-04-16 16:40:11.804] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ig; nored.; [2021-04-16 16:40:11.804] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly; specified, it is being set to 0.65; [2021-04-16 16:40:11.804] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorizati; on. rangeFactorizationBins is being set to 4; [2021-04-16 16:40:11.804] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting cons; ensusSlack to 0.2.; [2021-04-16 16:40:11.804] [jointLog] [info] parsing read library format; [2021-04-16 16:40:11.804] [jointLog] [info] There is 1 library.; [2021-04-16 16:40:11.898] [jointLog] [info] Loading Quasi index; [2021-04-16 16:40:11.898] [jointLog] [info] Loading 32-bit quasi index; [2021-04-16 16:40:17.838] [jointLog] [info] done; [2021-04-16 16:40:17.838] [jointLog] [info] Index contained 77,654 targets; [2021-04-16 16:57:15.485] [fileLog] [info]; At end of round 0. Observed 25613538 total fragments (25613538 in most recent round). [2021-04-16 16:57:15.485] [jointLog] [info] Computed 1,663 rich equivalence classes for further processing; [2021-04-16 16:57:15.485] [jointLog] [info] Counted 10,700 total reads in the equivalence classes; [2021-04-16 16:57:15.488] [jointLog] [warning] 0.00162414% of fragments were shorter than the k used to build the index (21).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 15. [2021-04-16 16:57:15.488] [jointLog] [info] Number of mappings discarded because of alignment score : 86,602; [2021-04-16 16:57:15.488] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 124,571; [2021-04-16 16:57:15.488] [jointLog] [info] Num",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:1027,Load,Loading,1027,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['Load'],['Loading']
Performance,".729] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-20 11:34:48.022] [jointLog] [info] Computed 145,552 rich equivalence classes for further processing; [2021-05-20 11:34:48.022] [jointLog] [info] Counted 10,027,482 total reads in the equivalence classes ; [2021-05-20 11:34:48.050] [jointLog] [info] Number of mappings discarded because of alignment score : 208,344,973; [2021-05-20 11:34:48.050] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 11,448,458; [2021-05-20 11:34:48.050] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2021-05-20 11:34:48.050] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 687,723; [2021-05-20 11:34:48.050] [jointLog] [info] Mapping rate = 6.17078%. [2021-05-20 11:34:48.050] [jointLog] [info] finished quantifyLibrary(); [2021-05-20 11:34:48.127] [jointLog] [info] Starting optimizer; [2021-05-20 11:34:48.220] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-05-20 11:34:48.227] [jointLog] [info] iteration = 0 | max rel diff. = 17492.1; [2021-05-20 11:34:48.285] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2021-05-20 11:34:55.799] [jointLog] [info] Computed expected counts (for bias correction); [2021-05-20 11:34:55.800] [jointLog] [info] processed bias for 0.3% of the transcripts; [2021-05-20 11:34:56.392] [jointLog] [info] processed bias for 10.0% of the transcripts; [2021-05-20 11:34:57.015] [jointLog] [info] processed bias for 20.0% of the transcripts; [2021-05-20 11:34:57.580] [jointLog] [info] processed bias for 30.0% of the transcripts; [2021-05-20 11:34:58.135] [jointLog] [info] processed bias for 40.0% of the transcripts; [2021-05-20 11:34:58.710] [jointLog] [info] processed bias for 50.0% of the transcripts; [2021-05-20 11:34:59.289] [jointLog] [info] processed bias for 60.0% of t",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:4514,optimiz,optimizer,4514,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['optimiz'],['optimizer']
Performance,".; [2018-12-05 15:12:18.914] [alevinLog] [info] # Barcodes Used: 267451749 / 267548197.; [2018-12-05 15:12:25.126] [alevinLog] [info] Knee found left boundary at 11954 ; [2018-12-05 15:12:27.371] [alevinLog] [info] Gauss Corrected Boundary at 4345 ; [2018-12-05 15:12:27.371] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-12-05 15:12:27.371] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-05 15:12:27.494] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 15:12:27.880] [alevinLog] [info] Done populating Z matrix; [2018-12-05 15:12:27.952] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 15:12:27.952] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-05 15:12:27.952] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-05 15:12:29.321] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 15:12:29.216] [jointLog] [info] There are 2 libraries.; [2018-12-05 15:12:29.318] [jointLog] [info] Loading Quasi index; [2018-12-05 15:12:29.319] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 15:12:29.216] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 15:12:29.216] [alevinLog] [info] parsing read library format; [2018-12-05 15:12:29.949] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 15:12:30.141] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 15:12:30.181] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for fu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:6941,Load,Loading,6941,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,".fa.gz and gencode.v40.transcripts.fa.gz from Gencode using the same tutorial above (2) gencode.v40.transcripts.fa.gz from Gencode only (3) Homo_sapiens.GRCh38.cdna.all.fa.gz from Ensembl ; But I still received the same warning and 0 fragments mapped results. Below is one of the log file (they all look similar):. > [2022-04-15 23:47:55.696] [jointLog] [info] setting maxHashResizeThreads to 48 ; [2022-04-15 23:47:55.696] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ; [2022-04-15 23:47:55.696] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ; [2022-04-15 23:47:55.696] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ; [2022-04-15 23:47:55.696] [jointLog] [info] parsing read library format ; [2022-04-15 23:47:55.696] [jointLog] [info] There is 1 library. ; [2022-04-15 23:47:55.833] [jointLog] [info] Loading pufferfish index ; [2022-04-15 23:47:55.833] [jointLog] [info] Loading dense pufferfish index. ; [2022-04-15 23:49:52.320] [jointLog] [info] done ; [2022-04-15 23:49:52.320] [jointLog] [info] Index contained 245,900 targets ; [2022-04-15 23:49:52.424] [jointLog] [info] Number of decoys : 639 ; [2022-04-15 23:49:52.424] [jointLog] [info] First decoy index : 245,261 ; [2022-04-15 23:50:13.651] [jointLog] [warning] salmon was only able to assign 0 fragments to transcripts in the index, but the minimum number of required assigned fragments (--minAssignedFrags) was 3. This could be indicative of a mismatch between the reference and sample, or a very bad sample. You can change the --minAssignedFrags parameter to force salmon to quantify with fewer assigned fragments (must have at least 1). I wonder maybe there's something wrong with my fastq files but I have no idea since they look fine(?):. > @SRR493372.1 HWI-M00266:2:000000000-A0HDE:1:1:14862:1427 length=26 CAGATCCCTCCCCTGGTCACTACAGA ; +SRR4933",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768:2793,Load,Loading,2793,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768,1,['Load'],['Loading']
Performance,".fastq.gz }; ### [ validateMappings ] => { }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ posBias ] => { }; ### [ softclip ] => { }; ### [ allowDovetail ] => { }; ### [ recoverOrphans ] => { }; ### [ numBootstraps ] => { 10 }; ### [ output ] => { mapped/salmon_03 }; Logs will be written to mapped/salmon_03/logs; [2024-05-03 15:09:51.221] [jointLog] [info] setting maxHashResizeThreads to 64; [2024-05-03 15:09:51.221] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-05-03 15:09:51.221] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-05-03 15:09:51.221] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-05-03 15:09:51.221] [jointLog] [info] parsing read library format; [2024-05-03 15:09:51.221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; ---------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:5777,Load,Loading,5777,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,".gz }; ### [ mates2 ] => { RNA_2.fastq.gz }; ### [ threads ] => { 16 }; ### [ validateMappings ] => { }; ### [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ recoverOrphans ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { salmon.standard/sample }; Logs will be written to salmon.standard/sample/logs; [2024-11-01 05:13:59.563] [jointLog] [info] setting maxHashResizeThreads to 16; [2024-11-01 05:13:59.563] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-11-01 05:13:59.563] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-11-01 05:13:59.563] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-11-01 05:13:59.563] [jointLog] [info] parsing read library format; [2024-11-01 05:13:59.563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; --------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:2700,Load,Loading,2700,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,".org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html#Downstream_DGE_in_Bioconductor. ```; Do not manually pass the original gene-level counts to downstream methods without an offset. ; The only case where this would make sense is if there is no length bias to the counts, as happens in 3‚Äô tagged RNA-seq data (see section below). ; The original gene-level counts are in txi$counts when tximport was run with countsFromAbundance=""no"". ; This is simply passing the summed estimated transcript counts, and does not correct for potential differential isoform usage (the offset), which is the point of the tximport methods (Soneson, Love, and Robinson 2015) for gene-level analysis. ; Passing uncorrected gene-level counts without an offset is not recommended by the tximport package authors. ; The two methods we provide here are: ‚Äúoriginal counts and offset‚Äù or ‚Äúbias corrected counts without an offset‚Äù. ; Passing txi to DESeqDataSetFromTximport as outlined below is correct: the function creates the appropriate offset for you to perform gene-level differential expression.; ```. 2 - https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html#Salmon. ```; files <- file.path(dir, ""salmon"", samples$run, ""quant.sf.gz""); names(files) <- paste0(""sample"", 1:6); txi.salmon <- tximport(files, type = ""salmon"", tx2gene = tx2gene); head(txi.salmon$counts). ```; Why the confusion - https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html#Downstream_DGE_in_Bioconductor - states ; - The two methods we provide here are: ‚Äúoriginal counts and offset‚Äù or ‚Äúbias corrected counts without an offset‚Äù. Passing txi to DESeqDataSetFromTximport as outlined below is correct: the function creates the appropriate offset for you to perform gene-level differential expression; - The second method is to use the tximport argument countsFromAbundance=""lengthScaledTPM"" or ""scaledTPM"", and then to use the gene-level count matrix txi$counts directly as ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581:1240,perform,perform,1240,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581,1,['perform'],['perform']
Performance,"/2.2.1; gffread MSU7_all.gff3 -g all.chrs.fasta -w MSU7_newtranscript.fasta. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=50G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J index_Salmon. module load Salmon/0.12.0-IGB-gcc-8.2.0. salmon index -t ~/data/genome/MSU7_newtranscript.fasta -i ~/data/genome/MSU7new_transcript.index --type quasi -k 31. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l A \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_BLB/${line} --seqBias --gcBias --validateMappings. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l A \; -1 ~/results/trimmingSheng/${line}1.paired.fastq \; -2 ~/results/trimmingSheng/${line}2.paired.fastq --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_new/${line} --seqBias --gcBias --validateMappings. Specifically, please provide at least the following information:. * Which version of salmon was used?; Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13 Salmon/0.11.3-IGB-gcc-4.9.4; Salmon/0.9.1-IGB-gcc-4.9.4 Salmon/0.12.0-IGB-gcc-8.2.0 (D). * How was salmon installed (compiled, downloaded executable, through bioconda)?; through the biocluster in the University. * Which reference (e.g. transcriptome) was used?; converted the genomic fasta file to transcriptomic fasta file (described above); ; * Which read files were used?; the raw sequencing reads and the trimmed reads from the paired-end data. * Which which program options were us",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:3737,load,load,3737,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['load'],['load']
Performance,"/All-H.m-reads/Trimmed/Sample_8-15/8-15_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P3_42-50_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-46-53_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-4-10_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_23-31/23-31_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P1_H.m_16-24_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_22-30/22-30_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_27-35/27-35_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_25-33/25-33_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-45-54_221020_L002_R1.fastq.gz""]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. script. #!/bin/bash; #SBATCH -p shared; #SBATCH -c 100; #SBATCH --mem=200G; #SBATCH --gres=tmp:300G; #SBATCH -t 36:00:00. module purge; module load bioinformatics; module load salmon/1.10.1. cd /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/. # Set the path to the Salmon index; salmon_index=""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/salmon_index"". # Set the path to the directory containing all the FASTQ files; fastq_dir=""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed"". # Use the find command to locate all R1 and R2 FASTQ files; r1_files=$(find ""$fastq_dir"" -name ""*1.fastq.gz""); r2_files=$(find ""$fastq_dir"" -name ""*2.fastq.gz""). # Loop through the found files; for i in ""${!r1_files[@]}""; do; r1_file=""${r1_files[i]}""; r2_file=""${r2_files[i]}"". # Extract the sample name; samp=$(basename ""$r1_file"" ""_1.fastq.gz""). # echo ""Processing sample ${samp}""; salmon quant -i salmon_index -l A -1 ""$r1_file"" -2 ""$r2_file"" -p 100 --validateMappings -o ""salmon_out/${samp}_quant""; done. thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:16261,load,load,16261,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,2,['load'],['load']
Performance,"/Homo_sapiens.GRCh38.rel79/ --numBootstraps 100 -o $base <(zcat ${base}_1.fastq.gz ) <(zcat ${base}_2.fastq.gz); Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0 ; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 16 }; # [ biasCorrect ] => { }; # [ libType ] => { IU }; # [ index ] => { ./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ }; # [ numBootstraps ] => { 100 }; # [ output ] => { 61LP1AAXX_8 } ; # [ ] => { /dev/fd/63 }; # [ ] => { /dev/fd/62 }; Logs will be written to 61LP1AAXX_8/logs; there is 0[2016-07-11 09:51:45.206] [jointLog] [info] parsing read library format; lib; Loading 32-bit quasi index[2016-07-11 09:51:45.328] [jointLog] [info] Loading Quasi index; [2016-07-11 09:51:45.736] [stderrLog] [info] Loading Suffix Array; [2016-07-11 09:51:45.771] [stderrLog] [info] Loading Position Hash; [2016-07-11 09:52:13.781] [stderrLog] [info] Loading Transcript Info; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09:52:39.858] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report.**.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:1162,Load,Loading,1162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,1,['Load'],['Loading']
Performance,"/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 4 }; ### [ output ] => { BM_1/alevin }; ### [ mates1 ] => { ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz }; ### [ mates2 ] => { ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz }; ### [ maxHashResizeThreads ] => { 2 }; ### [ index ] => { /u/user/ref/cellranger/salmon/transcripts_index }; ### [ tgMap ] => { tx2gene.txt }. [2018-06-10 16:07:09.798] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [New ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:2267,load,loading,2267,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['load'],['loading']
Performance,"/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R1_001.fastq.gz }; ### [ mates2 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R2_001.fastq.gz }; ### [ threads ] => { 32 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942/logs; [2018-07-27 16:24:55.658] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-27 16:24:55.658] [jointLog] [info] parsing read library format; [2018-07-27 16:24:55.658] [jointLog] [info] There is 1 library.; [2018-07-27 16:25:01.242] [jointLog] [info] Loading Quasi index; [2018-07-27 16:25:01.242] [jointLog] [info] Loading 32-bit quasi index; [2018-07-27 16:25:01.243] [stderrLog] [info] Loading Suffix Array ; [2018-07-27 16:25:42.630] [stderrLog] [info] Loading Transcript Info ; [2018-07-27 16:25:45.683] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-27 16:25:47.834] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-27 16:25:48.128] [stderrLog] [info] Computing transcript lengths; [2018-07-27 16:25:48.200] [stderrLog] [info] Waiting to finish loading hash; [2018-07-27 16:25:48.331] [stderrLog] [info] Done loading index; [2018-07-27 16:25:48.331] [jointLog] [info] done; [2018-07-27 16:25:48.331] [jointLog] [info] Index contained 203027 targets. processed 239500000 fragmentsintLog] [info] Automatically detected most likely library type as ISR; hits: 651420499, hits per frag: 2.72282[2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.70% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probabi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898:1460,Load,Loading,1460,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898,1,['Load'],['Loading']
Performance,"/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:3098,Load,Loadable,3098,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"/salmon_test/ENCFF600FYP_quant; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { ~/Reference_indexes/humangencodev27_transcripts_index_20181023 }; ### [ libType ] => { A }; ### [ unmatedReads ] => { ~/Downloads/ENCFF600FYP.fastq.gz }; ### [ output ] => { ./salmon_test/ENCFF600FYP_quant }; Logs will be written to ./salmon_test/ENCFF600FYP_quant/logs; [2018-10-23 20:11:13.424] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-23 20:11:13.425] [jointLog] [info] parsing read library format; [2018-10-23 20:11:13.425] [jointLog] [info] There is 1 library.; [2018-10-23 20:11:13.513] [stderrLog] [info] Loading Suffix Array ; [2018-10-23 20:11:13.513] [jointLog] [info] Loading Quasi index; [2018-10-23 20:11:13.513] [jointLog] [info] Loading 32-bit quasi index; [2018-10-23 20:11:14.645] [stderrLog] [info] Loading Transcript Info ; [2018-10-23 20:11:14.975] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-23 20:11:15.031] [stderrLog] [info] There were 199,612 set bits in the bit array; [2018-10-23 20:11:15.042] [stderrLog] [info] Computing transcript lengths; [2018-10-23 20:11:15.042] [stderrLog] [info] Waiting to finish loading hash; [2018-10-23 20:11:20.618] [stderrLog] [info] Done loading index; [2018-10-23 20:11:20.618] [jointLog] [info] done; [2018-10-23 20:11:20.618] [jointLog] [info] Index contained 199,612 targets. Segmentation fault: 11; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; OSX; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. ProductName:	Mac OS X; ProductVersion:	10.11.3; BuildVersion:	15D21. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303:2199,Load,Loading,2199,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303,5,"['Load', 'load']","['Loading', 'loading']"
Performance,"/sample/logs; [2019-06-23 18:08:01.732] [alevinLog] [info] A custom protocol (END, BC length, UMI length) = (5, 16, 10) is being used. Updating UMI k-mer length accordingly.; [2019-06-23 18:08:01.803] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-23 18:08:01.804] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-23 18:08:01.804] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-06-23 18:08:01.804] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-06-23 18:08:01.804] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2019-06-23 18:08:01.805] [alevinLog] [info] Loading Header; [2019-06-23 18:08:01.807] [alevinLog] [info] Loading Transcript Info ; [2019-06-23 18:08:02.243] [alevinLog] [warning] Found {} transcripts with duplicate names; [2019-06-23 18:08:02.530] [alevinLog] [info] Found all transcripts to gene mappings; ### alevin (dscRNA-seq quantification) v0.14.0; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { U }; ### [ mates2 ] => { /mnt/beegfs/alexmascension/Projects/Single-cell_skin_analysis//Data/Cheng-2018/read_fastq//sample.fastq }; ### [ mates1 ] => { /mnt/beegfs/alexmascension/Projects/Single-cell_skin_analysis//Data/Cheng-2018/CB_UMI//sample.fastq }; ### [ index ] => { /mnt/beegfs/alexmascension/STAR//hg38/salmon_index/ }; ### [ threads ] => { 40 }; ### [ output ] => { /mnt/beegfs/alexmascension/Projects/Single-cell_skin_analysis//Data/Cheng-2018//Alevin/sample }; ### [ end ] => { 5 }; ### [ barcodeLength ] => { 16 }; ### [ umiLength ] => { 10 }; ### [ dumpUmiGraph ] => { }; ### [ tgMap ] => { /mnt/beegfs/al",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:2580,Load,Loading,2580,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance,"/www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2882,Load,Loadable,2882,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"0.4 1524 1524.000 0.000000 0.000; LOC_Os01g01040.1 2508 2508.000 0.000000 0.000; LOC_Os01g01040.2 2482 2482.000 0.000000 0.000; LOC_Os01g01040.3 2583 2583.000 0.000000 0.000; LOC_Os01g01050.1 2039 2039.000 0.000000 0.000. [2019-03-04 01:24:12.788] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-03-04 01:24:12.788] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-03-04 01:24:12.788] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-03-04 01:24:12.788] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-03-04 01:24:12.788] [jointLog] [info] parsing read library format; [2019-03-04 01:24:12.788] [jointLog] [info] There is 1 library.; [2019-03-04 01:24:12.852] [jointLog] [info] Loading Quasi index; [2019-03-04 01:24:12.852] [jointLog] [info] Loading 32-bit quasi index; [2019-03-04 01:24:19.703] [jointLog] [info] done; [2019-03-04 01:24:19.704] [jointLog] [info] Index contained 66,004 targets; [2019-03-04 01:25:14.064] [jointLog] [info] Thread saw mini-batch with a maximum of 91.10% zero probability fragments; [2019-03-04 01:25:14.075] [jointLog] [info] Thread saw mini-batch with a maximum of 90.58% zero probability fragments; [2019-03-04 01:25:14.085] [jointLog] [info] Thread saw mini-batch with a maximum of 90.64% zero probability fragments; [2019-03-04 01:25:14.089] [jointLog] [info] Thread saw mini-batch with a maximum of 91.08% zero probability fragments; [2019-03-04 01:25:14.091] [jointLog] [info] Thread saw mini-batch with a maximum of 90.72% zero probability fragments; [2019-03-04 01:25:14.093] [jointLog] [info] Thread saw mini-batch with a maximum of 90.78% zero probability fragments; [2019-03-04 01:25:14.102] [jointLog] [info] Thread saw mini-batch with a maxi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256:4218,Load,Loading,4218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256,1,['Load'],['Loading']
Performance,"0/20741299/60f84c1a-b697-11e6-9f83-1554ff471e94.png). So, as you can see, there is a substantial amount of uncertainty in RunA, especially for `MSAD_200218.t1`. This can explain how you see this transcript obtaining different numbers of reads over different executions for Run A. Specifically, the inferential uncertainty for this transcript is high, and though the mean of the posterior is close to the value you report above, the range is quite large (200 - 1200) reads (potentially even larger with more bootstraps, but 100 gives us a reasonable window on posterior variance). On the other hand, the EM algorithm *really* wants to assign ~0.8 reads to `MSAD_157177.t1` in Run B. To test how much this might be the result of the tendency of the EM algorithm toward sparsity, I tried processing both samples with Salmon's `--useVBOpt` flag --- causing it to use the variational bayesian optimization algorithm, which yields considerably more *regularized* estimates. The posterior distributions obtained using the VB optimizer are:. ### Run A (VB Opt). ![image](https://cloud.githubusercontent.com/assets/361470/20741629/916b3446-b699-11e6-9f92-b8b6d3519981.png). ![image](https://cloud.githubusercontent.com/assets/361470/20741636/98510f06-b699-11e6-8d9f-34f1c353c3e6.png). ### Run B (VB Opt). ![image](https://cloud.githubusercontent.com/assets/361470/20741642/a1341686-b699-11e6-9a87-8a30f87cd49c.png). ![image](https://cloud.githubusercontent.com/assets/361470/20741645/a7340d5c-b699-11e6-90dd-55f9795bac8f.png). So, while there are some small differences for Run A and transcript `MSAD_200218.t1` in Run B, you can see that the most striking difference is `MSAD_157177.t1` in Run B. The number of estimated reads isn't quite as high as with eXpress, but a considerable number of reads map to `MSAD_157177.t1` (and the posterior variance is still rather large). Given that the behavior you observe using default settings in Salmon is similar to what you observe in RSEM, my guess is that the all",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263793798:1850,optimiz,optimizer,1850,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263793798,1,['optimiz'],['optimizer']
Performance,"0000 0.000; LOC_Os01g01040.2 2482 2482.000 0.000000 0.000; LOC_Os01g01040.3 2583 2583.000 0.000000 0.000; LOC_Os01g01050.1 2039 2039.000 0.000000 0.000. [2019-03-04 01:24:12.788] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-03-04 01:24:12.788] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-03-04 01:24:12.788] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-03-04 01:24:12.788] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-03-04 01:24:12.788] [jointLog] [info] parsing read library format; [2019-03-04 01:24:12.788] [jointLog] [info] There is 1 library.; [2019-03-04 01:24:12.852] [jointLog] [info] Loading Quasi index; [2019-03-04 01:24:12.852] [jointLog] [info] Loading 32-bit quasi index; [2019-03-04 01:24:19.703] [jointLog] [info] done; [2019-03-04 01:24:19.704] [jointLog] [info] Index contained 66,004 targets; [2019-03-04 01:25:14.064] [jointLog] [info] Thread saw mini-batch with a maximum of 91.10% zero probability fragments; [2019-03-04 01:25:14.075] [jointLog] [info] Thread saw mini-batch with a maximum of 90.58% zero probability fragments; [2019-03-04 01:25:14.085] [jointLog] [info] Thread saw mini-batch with a maximum of 90.64% zero probability fragments; [2019-03-04 01:25:14.089] [jointLog] [info] Thread saw mini-batch with a maximum of 91.08% zero probability fragments; [2019-03-04 01:25:14.091] [jointLog] [info] Thread saw mini-batch with a maximum of 90.72% zero probability fragments; [2019-03-04 01:25:14.093] [jointLog] [info] Thread saw mini-batch with a maximum of 90.78% zero probability fragments; [2019-03-04 01:25:14.102] [jointLog] [info] Thread saw mini-batch with a maximum of 90.60% zero probability fragments; [2019-03-04 01:25:14.102] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256:4283,Load,Loading,4283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256,1,['Load'],['Loading']
Performance,"02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:23:49.875] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:23:49.875] [jointLog] [info] Starting optimizer; [2016-01-02 20:23:50.378] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 20:23:50.382] [jointLog] [info] iteration = 0 | max rel diff. = 64.9993; [2016-01-02 20:23:50.584] [jointLog] [info] iteration 50, recomputing effective lengths; [2016-01-02 20:23:53.386] [jointLog] [info] iteration = 100 | max rel diff. = 0.263028; [2016-01-02 20:23:53.777] [jointLog] [info] iteration = 200 | max rel diff. = 0.13921; [2016-01-02 20:23:54.171] [jointLog] [info] iteration = 300 | max rel diff. = 0.0536404; [2016-01-02 20:23:54.564] [jointLog] [info] iteration = 400 | max rel diff. = 0.063039; [2016-01-02 20:23:54.954] [jointLog] [info] iteration 500, recomputing effective lengths; [2016-01-02 20:23:57.205] [jointLog] [info] iteration = 500 | max rel diff. = 0.748653; [2016-01-02 20:23:57.662] [jointLog] [info] iteration = 600 | max rel diff. = 0.0535482; [2016-01-02 20:23:58.058] [jointLog] [info] iteration = 700 | max rel diff. = 0.0180352; [2016-01-0",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:8839,optimiz,optimizer,8839,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['optimiz'],['optimizer']
Performance,"022-05-13 03:02:19.507] [jointLog] [info] iteration = 400 | max rel diff. = 5.00889; [2022-05-13 03:02:20.812] [jointLog] [info] iteration = 500 | max rel diff. = 10.9087; [2022-05-13 03:02:22.073] [jointLog] [info] iteration = 600 | max rel diff. = 0.162723; [2022-05-13 03:02:23.316] [jointLog] [info] iteration = 700 | max rel diff. = 0.125884; [2022-05-13 03:02:24.647] [jointLog] [info] iteration = 800 | max rel diff. = 0.611449; [2022-05-13 03:02:26.020] [jointLog] [info] iteration = 900 | max rel diff. = 0.0687607; [2022-05-13 03:02:27.302] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.144642; [2022-05-13 03:02:28.620] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.0139885; [2022-05-13 03:02:29.874] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.053712; [2022-05-13 03:02:31.161] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.0312546; [2022-05-13 03:02:32.489] [jointLog] [info] iteration = 1,400 | max rel diff. = 0.107944; [2022-05-13 03:02:32.656] [jointLog] [info] iteration = 1,414 | max rel diff. = 0.00665317; [2022-05-13 03:02:32.664] [jointLog] [info] Finished optimizer; [2022-05-13 03:02:32.665] [jointLog] [info] writing output . [2022-05-13 03:02:32.905] [jointLog] [warning] NOTE: Read Lib [[ /fastp_6BE_1.fq.gz, /fastp_6BE_2.fq.gz]] :. Detected a *potential* strand bias > 1% in an unstranded protocol check the file: sample6BE.salmon/lib_format_counts.json for details. This is the lib_format_counts.json details . ""read_files"": ""[ /fastp_6BE_1.fq.gz, /fastp_6BE_2.fq.gz]"",; ""expected_format"": ""IU"",; ""compatible_fragment_ratio"": 1.0,; ""num_compatible_fragments"": 27069942,; ""num_assigned_fragments"": 27069942,; ""num_frags_with_concordant_consistent_mappings"": 25715904,; ""num_frags_with_inconsistent_or_orphan_mappings"": 1666158,; ""strand_mapping_bias"": 0.0481568915485141,; ""MSF"": 0,; ""OSF"": 0,; ""ISF"": 1238398,; ""MSR"": 0,; ""OSR"": 0,; ""ISR"": 24477506,; ""SF"": 981192,; ""SR"": 684966,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; }. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775:3218,optimiz,optimizer,3218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775,1,['optimiz'],['optimizer']
Performance,"029] [alevinLog] [info] # Barcodes Used: 2695632 / 2712324.; [2019-01-29 09:56:52.900] [alevinLog] [info] Knee found left boundary at 692 ; [2019-01-29 09:56:53.219] [alevinLog] [info] Gauss Corrected Boundary at 100 ; [2019-01-29 09:56:53.219] [alevinLog] [info] Learned InvCov: 114.414 normfactor: 148.807; [2019-01-29 09:56:53.219] [alevinLog] [info] Total 293(has 193 low confidence) barcodes; [2019-01-29 09:56:53.224] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:56:53.254] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:56:53.255] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:56:53.255] [alevinLog] [info] Total Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equiv",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8146,Load,Loading,8146,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance,"03 13:54:43.964] [alevinLog] [info] Throwing 49909 barcodes with < 10 reads; > [2020-06-03 13:54:43.984] [alevinLog] [info] Total 50092(has 201 low confidence) barcodes; > [2020-06-03 13:54:44.191] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-03 13:54:44.285] [alevinLog] [info] Total 1.70493% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-03 13:54:45.790] [alevinLog] [info] Done populating Z matrix; > [2020-06-03 13:54:45.790] [alevinLog] [info] Total 0 CB got sequence corrected; > [2020-06-03 13:54:45.790] [alevinLog] [info] Done indexing Barcodes; > [2020-06-03 13:54:45.790] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-03 13:54:45.790] [alevinLog] [info] Used Barcodes except Whitelist: 0; > [2020-06-03 13:54:46.493] [jointLog] [info] There is 1 library.; > ; > -----------------------------------------; > [2020-06-03 13:54:46.551] [jointLog] [info] Loading pufferfish index; > [2020-06-03 13:54:46.551] [jointLog] [info] Loading dense pufferfish index.; > [2020-06-03 13:54:46.552] [jointLog] [info] done; > [2020-06-03 13:54:46.552] [jointLog] [info] Index contained 64 targets; > [2020-06-03 13:54:46.552] [jointLog] [info] Number of decoys : 0; > ; > [2020-06-03 13:54:46.493] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > processed 52 Million fragmentsvinLog] [info] parsing read library format; > hits: 0, hits per frag: 0; > ; > [2020-06-03 13:55:42.905] [alevinLog] [info] Starting optimizer; > ; > [2020-06-03 13:55:42.931] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.931] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0.00 UMI after deduplicating.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 BiDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 UniDirected Edges.; > [2020-06-03 13:55:42.933]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531:2410,Load,Loading,2410,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531,1,['Load'],['Loading']
Performance,03 15:58:16.214] [alevinLog] [info] # Barcodes Used: [32m639154757[0m / [31m639154757[0m.; [2022-12-03 15:58:20.629] [alevinLog] [info] Total [32m5461[0m(has [32m1000[0m low confidence) barcodes; [2022-12-03 15:58:21.139] [alevinLog] [info] Done True Barcode Sampling; [2022-12-03 15:58:23.597] [alevinLog] [warning] Total 56.2839% reads will be thrown away because of noisy Cellular barcodes.; [2022-12-03 15:58:23.987] [alevinLog] [info] Done populating Z matrix; [2022-12-03 15:58:24.080] [alevinLog] [info] Total 188093 CB got sequence corrected; [2022-12-03 15:58:24.122] [alevinLog] [info] Done indexing Barcodes; [2022-12-03 15:58:24.122] [alevinLog] [info] Total Unique barcodes found: 16409283; [2022-12-03 15:58:24.122] [alevinLog] [info] Used Barcodes except Whitelist: 187465; [2022-12-03 15:58:24.389] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2022-12-03 15:58:24.389] [alevinLog] [info] parsing read library format; [2022-12-03 16:17:47.714] [alevinLog] [info] Starting optimizer. [2022-12-03 16:17:47.868] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2022-12-03 16:17:47.868] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2022-12-03 16:18:01.362] [alevinLog] [info] Total 17192510.00 UMI after deduplicating.; [2022-12-03 16:18:01.362] [alevinLog] [info] Total 1333800 BiDirected Edges.; [2022-12-03 16:18:01.362] [alevinLog] [info] Total 181036 UniDirected Edges.; [2022-12-03 16:18:01.432] [alevinLog] [info] Clearing EqMap; Might take some time.; [2022-12-03 16:18:08.522] [alevinLog] [info] Starting white listing of 5460 cells; [2022-12-03 16:18:08.522] [alevinLog] [info] Starting to make feature Matrix; [2022-12-03 16:18:08.535] [alevinLog] [info] Done making feature Matrix; [2022-12-03 16:18:09.324] [alevinLog] [info] Finished white listing; [2022-12-03 16:18:09.513] [alevinLog] [info] Finished optimizer. Salmon_quant log:; [2022-12-03 15:43:11.767] [jointLo,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/814:3120,optimiz,optimizer,3120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/814,1,['optimiz'],['optimizer']
Performance,"05,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] [info] Thread saw mini-batch with a maximum of 5.48% zero probability fragments. [2018-12-12 15:12:07.721] [jointLog] [info] Computed 173,365 rich equivalence classes for further processing; [2018-12-12 15:12:07.721] [jointLog] [info] Counted 27,831,508 total reads in the equivalence classes ; [2018-12-12 15:12:07.721] [jointLog] [warning] Found 31347 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-12 15:12:07.721] [jointLog] [info] Mapping rate = 37.4197%. [2018-12-12 15:12:07.721] [jointLog] [info] finished quantifyLibrary(); [2018-12-12 15:12:07.904] [alevinLog] [info] Starting optimizer. Analyzed 7 cells (7% of all).; Analyzed 8 cells (8% of all).; Analyzed 9 cells (9% of all).; Analyzed 10 cells (11% of all).; Analyzed 11 cells (12% of all).; Analyzed 12 cells (13% of all).; Analyzed 13 cells (14% of all).; Analyzed 14 cells (15% of all).; Analyzed 15 cells (16% of all).; Analyzed 16 cells (17% of all).; Analyzed 17 cells (18% of all).; Analyzed 18 cells (19% of all).; Analyzed 19 cells (20% of all).; Analyzed 20 cells (21% of all).; Analyzed 21 cells (22% of all).; Analyzed 22 cells (23% of all).; Analyzed 23 cells (24% of all).; Analyzed 24 cells (25% of all).; Analyzed 25 cells (26% of all).; Analyzed 26 cells (27% of all).; Analyzed 27 cells (28% of all).; Analyzed 28 cells (29% of all).; Analyzed 29 cells (31% of all).; Analyzed 30 cells (32% of all).; Analyzed 31 cells (33% of all).; Analyzed 32 cells (34% of all).; Analyzed 33 cells (35% of all).; Analyzed 34 cells (36% of all).; Analyzed 35 cells (37% of all).; Analyzed 36 cells (38% of a",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:5992,optimiz,optimizer,5992,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['optimiz'],['optimizer']
Performance,"06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-06-06 19:23:29.520] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [joi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:2028,load,loading,2028,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['load'],['loading']
Performance,"07.542; LOC_Os01g01040.2 2482 250.000 8.005651 138.253; LOC_Os01g01040.3 2583 250.000 9.187142 158.656; LOC_Os01g01050.1 2039 250.000 21.476314 370.883. [2019-03-03 07:14:59.272] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-03-03 07:14:59.272] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-03-03 07:14:59.272] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-03-03 07:14:59.272] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-03-03 07:14:59.272] [jointLog] [info] parsing read library format; [2019-03-03 07:14:59.272] [jointLog] [info] There is 1 library.; [2019-03-03 07:14:59.329] [jointLog] [info] Loading Quasi index; [2019-03-03 07:14:59.329] [jointLog] [info] Loading 32-bit quasi index; [2019-03-03 07:15:12.564] [jointLog] [info] done; [2019-03-03 07:15:12.564] [jointLog] [info] Index contained 66,004 targets; [2019-03-03 07:15:14.824] [jointLog] [info] Automatically detected most likely library type as MU; [2019-03-03 07:16:36.263] [jointLog] [info] Thread saw mini-batch with a maximum of 89.90% zero probability fragments; [2019-03-03 07:16:36.295] [jointLog] [info] Thread saw mini-batch with a maximum of 89.70% zero probability fragments; [2019-03-03 07:16:36.305] [jointLog] [info] Thread saw mini-batch with a maximum of 88.36% zero probability fragments; [2019-03-03 07:16:36.311] [jointLog] [info] Thread saw mini-batch with a maximum of 90.16% zero probability fragments; [2019-03-03 07:16:36.341] [jointLog] [info] Thread saw mini-batch with a maximum of 26.54% zero probability fragments; [2019-03-03 07:16:36.391] [jointLog] [info] Computed 58,867 rich equivalence classes for further processing; [2019-03-03 07:16:36.391] [jointLog] [info] Counted 16,8",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:8193,Load,Loading,8193,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['Load'],['Loading']
Performance,"07f8599d1d000); /lib64/ld-linux-x86-64.so.2 (0x00007f859b286000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2151,load,loading,2151,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,3,['load'],"['load', 'loading']"
Performance,"0:14:24.283] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-29 20:14:24.283] [jointLog] [info] parsing read library format; [2020-05-29 20:14:24.283] [jointLog] [info] There is 1 library.; [2020-05-29 20:14:24.341] [jointLog] [info] Loading pufferfish index; [2020-05-29 20:14:24.342] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 41.693 ms; -----------------------------------------; size = 357712; -----------------------------------------; | Loading contig offsets | Time = 657 us; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 202.87 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 16.335 ms; -----------------------------------------; size = 64786639; Number of ones: 357711; Number of ones per inventory item: 512; Inventory entries filled: 699; -----------------------------------------; | Loading contig boundaries | Time = 154.69 ms; -----------------------------------------; size = 64786639; -----------------------------------------; | Loading sequence | Time = 6.3275 ms; -----------------------------------------; size = 54055309; -----------------------------------------; | Loading positions | Time = 68.544 ms; -----------------------------------------; size = 74351806; -----------------------------------------; | Loading reference sequence | Time = 7.0924 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 325.83 us; -----------------------------------------; [2020-05-29 20:14:24.638] [jointLog] [info] done; [2020-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527:3283,Load,Loading,3283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527,1,['Load'],['Loading']
Performance,"0] [alevinLog] [warning] Gauss Prediction 0 Too far from knee prediction skipping it; [2018-08-29 11:28:19.290] [alevinLog] [info] Learned InvCov: 568.346 normfactor: 688.271; [2018-08-29 11:28:19.290] [alevinLog] [info] Total 3385(has 1000 low confidence) barcodes; [2018-08-29 11:28:19.297] [alevinLog] [info] Done True Barcode Sampling; [2018-08-29 11:28:19.433] [alevinLog] [info] Done populating Z matrix; [2018-08-29 11:28:19.437] [alevinLog] [info] Done indexing Barcodes; [2018-08-29 11:28:19.437] [alevinLog] [info] Total Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3361,Load,Loading,3361,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['Load'],['Loading']
Performance,"0_L002_R2.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P2-5-11_221020_L002_R2.fastq.gz }; ### [ threads ] => { 100 }; ### [ validateMappings ] => { }; ### [ output ] => { salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant }; Logs will be written to salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant/logs; [2023-08-27 19:59:26.866] [jointLog] [info] setting maxHashResizeThreads to 100; [2023-08-27 19:59:26.866] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-08-27 19:59:26.866] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-08-27 19:59:26.866] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-08-27 19:59:26.866] [jointLog] [info] parsing read library format; [2023-08-27 19:59:26.866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; ---------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:10054,Load,Loading,10054,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"0b107b2450d88e8e92fa0f3c06/ACV_REP2_2_val_2.fq.gz }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ posBias ] => { }; ### [ output ] => { ACV_REP2 }; Logs will be written to ACV_REP2/logs; [2023-02-23 09:39:48.709] [jointLog] [info] setting maxHashResizeThreads to 6; [2023-02-23 09:39:48.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-23 09:39:48.709] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:9350,Load,Loading,9350,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"0m; hits: 66225532; hits per frag: 4.42625[A. [32mprocessed[31m 15500006 [32mfragments[0m; hits: 68431333; hits per frag: 4.42688[A. [32mprocessed[31m 16000002 [32mfragments[0m; hits: 70643320; hits per frag: 4.44249[A. [32mprocessed[31m 16500002 [32mfragments[0m; hits: 72850859; hits per frag: 4.42435[A. [32mprocessed[31m 17500001 [32mfragments[0m; hits: 77275281; hits per frag: 4.43251[A. [32mprocessed[31m 18000005 [32mfragments[0m; hits: 79494713; hits per frag: 4.433[A. [32mprocessed[31m 18500000 [32mfragments[0m; hits: 81710387; hits per frag: 4.43219[A. [32mprocessed[31m 19000001 [32mfragments[0m; hits: 83924289; hits per frag: 4.42804[A. [32mprocessed[31m 19500000 [32mfragments[0m; hits: 86134985; hits per frag: 4.43392[A. [32mprocessed[31m 20000000 [32mfragments[0m; hits: 88347210; hits per frag: 4.42895[A. [32mprocessed[31m 20500003 [32mfragments[0m; hits: 90559781; hits per frag: 4.43081[A. [32mprocessed[31m 21000000 [32mfragments[0m; hits: 92771131; hits per frag: 4.42429. [2018-08-16 19:47:49.632] [jointLog] [info] Computed 260771 rich equivalence classes for further processing; [2018-08-16 19:47:49.632] [jointLog] [info] Counted 19352476 total reads in the equivalence classes ; [2018-08-16 19:47:49.646] [jointLog] [info] Mapping rate = 91.4764%. [2018-08-16 19:47:49.646] [jointLog] [info] finished quantifyLibrary(); [2018-08-16 19:47:49.649] [jointLog] [info] Starting optimizer; /mnt/galaxy/tmp/job_working_directory/000/900/tool_script.sh: line 50: 5733 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxOcc 200 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --vbPrior 0.001; ```<details>",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271:28938,optimiz,optimizer,28938,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271,1,['optimiz'],['optimizer']
Performance,"1.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.3385 ms; -----------------------------------------. Segmentation fault (core dumped); ```. Output when the flag is off and the process finishes without the seg fault:; ```; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest conve",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:4022,Load,Loading,4022,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"1.663] [jointLog] [info] There is 1 library.; [2021-09-20 16:29:51.736] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:29:51.738] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 5.1367 ms; -----------------------------------------; [2021-09-20 16:31:04.631] [jointLog] [info] done; [2021-09-20 16:31:04.632] [jointLog] [info] Index contained 116,612 targets; Killed. ```. However, if I run it only with --validateMappings, it works fine and generates the output quant.sf file. ```; $ salmon quant -l A -i /mnt/hgfs/Data/reference_data/mm10/default -r /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz -o out -p 6 --validateMappings; Version Server Response: Not Found; ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:2385,Load,Loading,2385,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"1/3 loss in performance seems significant, given that presumably the code does something else than just parsing UMIs. I am looking at Boost own comparison and benchmarks, and on long inputs (20MB) it is competitive with PCRE2. But with short inputs (20-30 characters) PCRE2 is consistently faster (by about 30% :thinking: ). And if PCRE2 is feature full, not sure it is the fastest either, especially for simple regexp.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/734#issuecomment-1023320721:12,perform,performance,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/734#issuecomment-1023320721,2,['perform'],['performance']
Performance,"1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R2_Flox5YFP0_B07_R.trimmed.fastq.gz); `; Some samples finish the quantification while others return the error. Some samples should have the genes while others not. The reads are 25 long and there is variability in the total number of reads among all the samples. . Please, indicate me what other information you may need. Thank you in advance,. Best,. Victor. ERROR:; `[2017-02-09 13:51:38.119] [jointLog] [info] parsing read library format; [2017-02-09 13:51:38.119] [jointLog] [info] There is 1 library.; [2017-02-09 13:51:38.559] [stderrLog] [info] Loading Suffix Array; [2017-02-09 13:51:38.560] [stderrLog] [info] Loading Transcript Info; [2017-02-09 13:51:38.561] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-02-09 13:51:38.562] [stderrLog] [info] There were 2 set bits in the bit array; [2017-02-09 13:51:38.562] [stderrLog] [info] Computing transcript lengths; [2017-02-09 13:51:38.562] [stderrLog] [info] Waiting to finish loading hash; [2017-02-09 13:51:38.562] [stderrLog] [info] Done loading index; [2017-02-09 13:51:38.557] [jointLog] [info] Loading Quasi index; [2017-02-09 13:51:38.558] [jointLog] [info] Loading 32-bit quasi index; [2017-02-09 13:51:38.562] [jointLog] [info] done; processed 3500000 fragmentsjointLog] [info] Index contained 2 targets; hits: 0, hits per frag: 0; [2017-02-09 13:51:48.488] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-02-09 13:51:48.488] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-02-09 13:51:48.502] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-02-09 13:51:48.502] [jointLog] [info] Mapping rate = 0%. [2017-02-09 13:51:48.502] [jointLog] [info] finished quantifyLibrary(); [2017-02-09 13:51:48.512] [jointLog] [info] Starting optimizer; [2017-02-09 13:51:48.514] [joint",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119:1610,load,loading,1610,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119,1,['load'],['loading']
Performance,"1082.; [2019-07-18 14:15:51.553] [alevinLog] [info] Done importing white-list Barcodes; [2019-07-18 14:15:51.853] [alevinLog] [warning] Skipping 575996 Barcodes as no read was mapped; [2019-07-18 14:15:52.078] [alevinLog] [info] Total 161284 white-listed Barcodes; [2019-07-18 14:15:52.259] [alevinLog] [info] Total 5.95793% reads will be thrown away because of noisy Cellular barcodes.; [2019-07-18 14:15:58.709] [alevinLog] [info] Done populating Z matrix; [2019-07-18 14:15:58.741] [alevinLog] [info] Total 56814 CB got sequence corrected; [2019-07-18 14:15:58.750] [alevinLog] [info] Done indexing Barcodes; [2019-07-18 14:15:58.750] [alevinLog] [info] Total Unique barcodes found: 687531; [2019-07-18 14:15:58.750] [alevinLog] [info] Used Barcodes except Whitelist: 44516; [2019-07-18 14:15:58.973] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2019-07-18 14:15:58.973] [alevinLog] [info] parsing read library format; [2019-07-18 14:24:27.923] [alevinLog] [info] Starting optimizer; [2019-07-18 14:24:28.655] [alevinLog] [warning] 24 mitorna gene(s) does not have transcript in the reference; [2019-07-18 14:24:28.655] [alevinLog] [info] Total 13 usable mRna genes; [2019-07-18 14:24:28.656] [alevinLog] [warning] 558 ribosomal rna gene(s) does not have transcript in the reference; [2019-07-18 14:24:28.656] [alevinLog] [info] Total 0 usable rRna genes; [2019-07-18 14:30:09.475] [alevinLog] [info] Total 4282454.00 UMI after deduplicating.; [2019-07-18 14:30:09.475] [alevinLog] [info] Total 5378060 BiDirected Edges.; [2019-07-18 14:30:09.475] [alevinLog] [info] Total 958944 UniDirected Edges.; [2019-07-18 14:30:09.475] [alevinLog] [warning] Skipped 28272 barcodes due to No mapped read; [2019-07-18 14:30:09.552] [alevinLog] [info] Finished optimizer; ```. ## R code (How to Use alevin with Seurat). ```; > library(here); > library(tidyverse); > library(Seurat); > library(tximport); > library(tictoc). > files <- file.path(here(""alevin_output/alevin/quants_mat.gz"")",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/404:1851,optimiz,optimizer,1851,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/404,1,['optimiz'],['optimizer']
Performance,"11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; (gdb); #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:93; #7 __destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:103; #8 _Destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:126; #9 _Destroy<std::thread*, std::thread> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:151; #10 std::vector<std::thread, std::allocator<std::thread> >::~vector (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_vector.h:424; #11 0x00000000007a5fde in cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::parallel_exec<cuckoohash_map<std::__cxx11::basic_stri",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:13436,optimiz,optimized,13436,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,2,['optimiz'],['optimized']
Performance,"12,990,838 total reads in the equivalence classes ; [2020-06-13 06:56:12.989] [jointLog] [warning] 0.0736383% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 1. [2020-06-13 06:56:12.989] [jointLog] [info] Number of mappings discarded because of alignment score : 19,645,245,772; [2020-06-13 06:56:12.989] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 2,436,564; [2020-06-13 06:56:12.989] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2020-06-13 06:56:12.989] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 1,448,149; [2020-06-13 06:56:12.989] [jointLog] [info] Mapping rate = 45.5622%. [2020-06-13 06:56:12.989] [jointLog] [info] finished quantifyLibrary(); [2020-06-13 06:56:12.991] [jointLog] [info] Starting optimizer; [2020-06-13 06:56:13.091] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-06-13 06:56:13.106] [jointLog] [info] iteration = 0 | max rel diff. = 8178.65; [2020-06-13 06:56:14.511] [jointLog] [info] iteration = 100 | max rel diff. = 17.6849; [2020-06-13 06:56:16.028] [jointLog] [info] iteration = 200 | max rel diff. = 6.46204; [2020-06-13 06:56:17.541] [jointLog] [info] iteration = 300 | max rel diff. = 1.8111; [2020-06-13 06:56:19.027] [jointLog] [info] iteration = 400 | max rel diff. = 12.2108; [2020-06-13 06:56:20.501] [jointLog] [info] iteration = 500 | max rel diff. = 0.616929; [2020-06-13 06:56:21.954] [jointLog] [info] iteration = 600 | max rel diff. = 0.218435; [2020-06-13 06:56:23.439] [jointLog] [info] iteration = 700 | max rel diff. = 0.068711; [2020-06-13 06:56:24.945] [jointLog] [info] iteration = 800 | max rel diff. = 0.044637; [2020-06-13 06:56:26.398] [jointLog] [info] iteration = 900 | max rel diff. = 0.0340291; [2020-06-13 06:56:2",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537:3840,optimiz,optimizer,3840,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537,1,['optimiz'],['optimizer']
Performance,12.954 s; -----------------------------------------; size = 35010142; -----------------------------------------; | Loading contig offsets | Time = 269.18 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 7.8427 ms; -----------------------------------------; -----------------------------------------; | Loading eq table | Time = 3.3896 s; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.8301 s; -----------------------------------------; size = 3567796961; Number of ones: 35010141; Number of ones per inventory item: 512; Inventory entries filled: 68380; -----------------------------------------; | Loading contig boundaries | Time = 11.288 s; -----------------------------------------; size = 3567796961; -----------------------------------------; | Loading sequence | Time = 7.763 s; -----------------------------------------; size = 2517492731; -----------------------------------------; | Loading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>6442720932; Index requested greater than vector's size: 6442720996>6442720932; Index requested greater than vector's size: 6442721060>6442720932; Index requested greater than vector's size: 6442721124>6442720932; Index requested greater than vector's size: 6442721188>6442720932; Index requested greater than vector's size: 6442721252>6442720932; Index requested greater than vector's size: 6442721316>6442720932; Index requested greater than vector's size: 6442721380>6442720932; Index requested greater than vector's size:,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:1564,Load,Loading,1564,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,1,['Load'],['Loading']
Performance,"16:03:44.489] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2023-10-11 16:03:44.490] [jointLog] [info] parsing read library format; [2023-10-11 16:03:44.491] [jointLog] [info] There is 1 library.; [2023-10-11 16:03:45.109] [jointLog] [info] Loading Quasi index; [2023-10-11 16:03:45.111] [jointLog] [info] Loading 32-bit quasi index; [2023-10-11 16:03:45.173] [stderrLog] [info] Loading Suffix Array ; [2023-10-11 16:03:46.096] [stderrLog] [info] Loading Transcript Info ; [2023-10-11 16:03:46.382] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-10-11 16:03:46.474] [stderrLog] [info] There were 6195946 set bits in the bit array; [2023-10-11 16:03:46.481] [stderrLog] [info] Computing transcript lengths; [2023-10-11 16:03:46.481] [stderrLog] [info] Waiting to finish loading hash; [2023-10-11 16:03:56.007] [jointLog] [info] done; [2023-10-11 16:03:56.007] [jointLog] [info] Index contained 3744 targets; [2023-10-11 16:03:56.006] [stderrLog] [info] Done loading index; ; qemu: uncaught target signal 11 (Segmentation fault) - core dumped; .command.sh: line 9: 64 Segmentation fault salmon quant --validateMappings --threads 1 --libType A --index transcriptome-index --mates1 sample1_R1_001.trimmed.fastq.gz --mates2 sample1_R2_001.trimmed.fastq.gz --output sample1; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881:3218,Load,Loading,3218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881,1,['Load'],['Loading']
Performance,16:33:55.869] [alevinLog] [info] Knee found left boundary at 11740 ; [2018-09-11 16:33:59.242] [alevinLog] [info] Gauss Corrected Boundary at 4345 ; [2018-09-11 16:33:59.242] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-09-11 16:33:59.242] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-09-11 16:33:59.358] [alevinLog] [info] Done True Barcode Sampling; [2018-09-11 16:33:59.891] [alevinLog] [info] Done populating Z matrix; [2018-09-11 16:33:59.972] [alevinLog] [info] Done indexing Barcodes; [2018-09-11 16:33:59.972] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were map,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:10976,Load,Loading,10976,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['Load'],['Loading']
Performance,"18-07-19 22:55:37.303] [alevinLog] [info] Total 5238 white-listed Barcodes; [2018-07-19 22:55:37.675] [alevinLog] [info] Done populating Z matrix; [2018-07-19 22:55:37.683] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 22:55:37.683] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 22:55:37.683] [alevinLog] [info] Used Barcodes except Whitelist: 20705; [2018-07-19 22:55:38.386] [jointLog] [info] There is 1 library.; [2018-07-19 22:55:38.493] [jointLog] [info] Loading Quasi index; [2018-07-19 22:55:38.494] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 22:55:38.549] [jointLog] [info] done; [2018-07-19 22:55:38.549] [jointLog] [info] Index contained 179 targets. [2018-07-19 22:55:38.385] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 22:55:38.385] [alevinLog] [info] parsing read library format; [2018-07-19 22:55:38.495] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 22:55:38.498] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 22:55:38.499] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 22:55:38.500] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 22:55:38.501] [stderrLog] [info] Computing transcript lengths; [2018-07-19 22:55:38.501] [stderrLog] [info] Waiting to finish loading hash; processed 87 Million fragmentserrLog] [info] Done loading index; hits: 468892, hits per frag: 0.00535907. [2018-07-19 23:03:35.740] [jointLog] [info] Computed 150 rich equivalence classes for further processing; [2018-07-19 23:03:35.740] [jointLog] [info] Counted 412868 total reads in the equivalence classes ; [2018-07-19 23:03:35.741] [jointLog] [warning] Only 412868 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-07-19 23:03:35.741] [jointLog] [info] Mapping rate = 0.469385%. [2018-07-19 23:03:35.741] [jointLog] [info] finished quantifyLibrary(); [2018-07",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:2904,Load,Loading,2904,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,1,['Load'],['Loading']
Performance,"18-07-26 11:25:30.228] [alevinLog] [info] Knee found left boundary at 202 ; [2018-07-26 11:25:31.135] [alevinLog] [info] Gauss Corrected Boundary at 22 ; [2018-07-26 11:25:31.135] [alevinLog] [info] Learned InvCov: 1044.2 normfactor: 295.235; [2018-07-26 11:25:31.135] [alevinLog] [info] Total 222(has 200 low confidence) barcodes; [2018-07-26 11:25:31.440] [alevinLog] [info] Done True Barcode Sampling; [2018-07-26 11:25:31.789] [alevinLog] [info] Done populating Z matrix; [2018-07-26 11:25:31.793] [alevinLog] [info] Done indexing Barcodes; [2018-07-26 11:25:31.793] [alevinLog] [info] Total Unique barcodes found: 10630133; [2018-07-26 11:25:31.793] [alevinLog] [info] Used Barcodes except Whitelist: 10603; [2018-07-26 11:25:31.938] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-26 11:25:31.939] [alevinLog] [info] parsing read library format; [2018-07-26 11:25:31.949] [jointLog] [info] There is 1 library.; [2018-07-26 11:25:32.331] [jointLog] [info] Loading Quasi index; [2018-07-26 11:25:32.331] [jointLog] [info] Loading 32-bit quasi index; [2018-07-26 11:25:32.357] [stderrLog] [info] Loading Suffix Array ; [2018-07-26 11:26:09.413] [stderrLog] [info] Loading Transcript Info ; [2018-07-26 11:26:10.896] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-26 11:26:11.159] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-26 11:26:11.225] [stderrLog] [info] Computing transcript lengths; [2018-07-26 11:26:11.226] [stderrLog] [info] Waiting to finish loading hash; [2018-07-26 11:26:14.654] [stderrLog] [info] Done loading index; [2018-07-26 11:26:14.654] [jointLog] [info] done; [2018-07-26 11:26:14.654] [jointLog] [info] Index contained 203027 targets. Incorrect call for umi extractIncorrect call for umi extract; ```. I traced it back to AlevinUtils.cpp in the source files but could not make sense of it from there. The program will run completely on the same data and library if I change --dropseq to --Chromium, event",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:2752,Load,Loading,2752,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['Load'],['Loading']
Performance,"181023 -l A -r ~/Downloads/ENCFF600FYP.fastq.gz -o ./salmon_test/ENCFF600FYP_quant; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { ~/Reference_indexes/humangencodev27_transcripts_index_20181023 }; ### [ libType ] => { A }; ### [ unmatedReads ] => { ~/Downloads/ENCFF600FYP.fastq.gz }; ### [ output ] => { ./salmon_test/ENCFF600FYP_quant }; Logs will be written to ./salmon_test/ENCFF600FYP_quant/logs; [2018-10-23 20:11:13.424] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-23 20:11:13.425] [jointLog] [info] parsing read library format; [2018-10-23 20:11:13.425] [jointLog] [info] There is 1 library.; [2018-10-23 20:11:13.513] [stderrLog] [info] Loading Suffix Array ; [2018-10-23 20:11:13.513] [jointLog] [info] Loading Quasi index; [2018-10-23 20:11:13.513] [jointLog] [info] Loading 32-bit quasi index; [2018-10-23 20:11:14.645] [stderrLog] [info] Loading Transcript Info ; [2018-10-23 20:11:14.975] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-23 20:11:15.031] [stderrLog] [info] There were 199,612 set bits in the bit array; [2018-10-23 20:11:15.042] [stderrLog] [info] Computing transcript lengths; [2018-10-23 20:11:15.042] [stderrLog] [info] Waiting to finish loading hash; [2018-10-23 20:11:20.618] [stderrLog] [info] Done loading index; [2018-10-23 20:11:20.618] [jointLog] [info] done; [2018-10-23 20:11:20.618] [jointLog] [info] Index contained 199,612 targets. Segmentation fault: 11; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; OSX; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. ProductName:	Mac OS X; ProductVersion:	10.11.3; BuildVersion:	15D21. **Additional conte",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303:2134,Load,Loading,2134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303,1,['Load'],['Loading']
Performance,"19-06-04 15:58:27.594] [alevinLog] [warning] Total 100% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 15:58:27.594] [alevinLog] [info] Done populating Z matrix; [2019-06-04 15:58:27.594] [alevinLog] [warning] 0 Whitelisted Barcodes with 0 frequency; [2019-06-04 15:58:27.594] [alevinLog] [info] Done indexing Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [info] Total Unique barcodes found: 5; [2019-06-04 15:58:27.594] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 15:58:27.617] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 15:58:27.617] [alevinLog] [info] parsing read library format; [2019-06-04 15:58:27.617] [jointLog] [info] There is 1 library.; [2019-06-04 15:58:27.750] [jointLog] [info] Loading Quasi index; [2019-06-04 15:58:27.750] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 15:58:27.750] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 15:58:28.626] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 15:58:28.866] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 15:58:28.900] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 15:58:28.922] [stderrLog] [info] Computing transcript lengths; [2019-06-04 15:58:28.922] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 15:58:38.645] [jointLog] [info] done; [2019-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million fragments; processed 5 Million fragments; processed 5 Million fragments; hits: 0, hits per frag: 0. [2019-06-04 15:58:42.486] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [20",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:2392,Load,Loading,2392,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['Load'],['Loading']
Performance,"19-06-06 19:24:55.688] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-06 19:24:55.688] [alevinLog] [info] Done True Barcode Sampling; [2019-06-06 19:24:55.690] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-06 19:24:55.692] [alevinLog] [info] Done populating Z matrix; [2019-06-06 19:24:55.692] [alevinLog] [info] Done indexing Barcodes; [2019-06-06 19:24:55.692] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-06 19:24:55.692] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:1438,Load,Loading,1438,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['Load'],['Loading']
Performance,"1:52.364] [alevinLog] [info] Total 384(has 200 low confidence) barcodes; [2019-06-23 18:11:52.383] [alevinLog] [info] Done True Barcode Sampling; [2019-06-23 18:11:52.489] [alevinLog] [warning] Total 91.1983% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-23 18:11:52.507] [alevinLog] [info] Done populating Z matrix; [2019-06-23 18:11:52.507] [alevinLog] [info] Done indexing Barcodes; [2019-06-23 18:11:52.507] [alevinLog] [info] Total Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: 26644540, hits per frag: 0.249194. [2019-06-23 18:14:43.418] [jointLog] [info] Computed 90,673 rich equivalence classes for further processing; [2019-06-23 18:14:43.418] [jointLog] [info] Counted 5,04",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5210,Load,Loading,5210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance,"1:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the equivalence classes ; [2018-12-05 16:57:31.421] [jointLog] [warning] 0.000112378% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 24. [2018-12-05 16:57:31.421] [jointLog] [warning] Found 539897 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 16:57:31.421] [jointLog] [info] Mapping rate = 70.9532%. [2018-12-05 16:57:31.421] [jointLog] [info] finished quantifyLibrary(); [2018-12-05 16:57:35.529] [alevinLog] [info] Starting optimizer. Analyzed 3856 cells (100% of all).; [2018-12-05 17:04:51.878] [alevinLog] [info] Total 47125847 UMI after deduplicating.; [2018-12-05 17:04:51.928] [alevinLog] [info] Clearing EqMap; Might take some time.; [2018-12-05 17:05:04.064] [alevinLog] [info] Starting Import of the gene count matrix.; Exception : [std::bad_alloc]; alevin was invoked improperly.; For usage information, try alevin --help; Exiting.; ```. **Desktop (please complete the following information):**; Ubuntu 14.04 LTS; 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux; Distributor ID:	Ubuntu; Description:	Ubuntu 14.04.5 LTS; Release:	14.04; Codename:	trusty. **Additional context**; If I include only a subset of the fastq files, the command completes with no error. I have succeeded in running up to 3 of the files (3 *I1*, 3 *I2* and 3 *RA* files), but got the above-mentioned error when running it on 4 or more fastq files. I read that std::bad_alloc was usu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:14198,optimiz,optimizer,14198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['optimiz'],['optimizer']
Performance,"1; read(4, ""THUMT00000097991.1|AGRN-002|AGRN""..., 8191) = 8191; read(4, ""HUMG00000001412.6|OTTHUMT0000000""..., 8191) = 8191; read(4, ""F3L-007|CPSF3L|1868|protein_codi""..., 8191) = 8191; read(4, ""01413.3|OTTHUMT00000004082.2|AUR""..., 8191) = 8191; read(4, ""UMT00000001363.3|ATAD3A-001|ATAD""..., 8191) = 8191; read(4, ""DK11B-202|CDK11B|2490|protein_co""..., 8191) = 8191; read(4, ""00002763.1|GNB1-002|GNB1|1512|re""..., 8191) = 8191; read(4, ""20-006|FAAP20|569|protein_coding""..., 8191) = 8191; read(4, ""212.1|ENSG00000157881.13|OTTHUMG""..., 8191) = 8191; read(4, ""0563.3|OTTHUMT00000099318.1|LINC""..., 8191) = 8191; read(4, ""-AS1|2875|processed_transcript|\177""..., 8191) = 8191; read(4, ""MG00000041729.1|OTTHUMT000000997""..., 8191) = 8191; read(4, ""1|LINC00337-001|LINC00337|1302|l""..., 8191) = 8191; read(4, ""\0\0\0\0ENST00000377728.7|ENSG000001""..., 8191) = 8191; read(4, ""|z\0\0\0\0\0\0\0ENST00000470648.5|ENSG0""..., 8191) = 8191; read(4, [1m[2017-04-05 16:40:33.297] [stderrLog] [info] Loading Transcript Info ; [00mread(4, ""35271.1|ENSG00000234546.3|OTTHUM""..., 8191) = 8191; read(4, ""00005018.1|UBE4B-003|UBE4B|2299|""..., 8191) = 8191; read(4, ""ding|x\0\0\0\0\0\0\0ENST00000468348.1|E""..., 8191) = 8191; read(4, ""005558.1|MTOR-001|MTOR|8677|prot""..., 8191) = 8191; read(4, ""rotein_coding|x\0\0\0\0\0\0\0ENST000004""..., 8191) = 8191; read(4, ""|\177\0\0\0\0\0\0\0ENST00000439324.2|ENSG0""..., 8191) = 8191; read(4, ""36.1|OTTHUMG00000009500.2|OTTHUM""..., 8191) = 8191; read(4, ""G00000175147.11|OTTHUMG000000020""..., 8191) = 8191; read(4, ""rotein_coding|}\0\0\0\0\0\0\0ENST000004""..., 8191) = 8191; read(4, ""ed_transcript|z\0\0\0\0\0\0\0ENST000004""..., 8191) = 8191; read(4, ""1|549|processed_transcript|{\0\0\0\0""..., 8191) = 8191; read(4, ""0006250.3|CROCC-002|CROCC|3931|p""..., 8191) = 8191; read(4, ""nscript|y\0\0\0\0\0\0\0ENST00000466151.""..., 8191) = 8191; read(4, ""R4|536|processed_transcript|q\0\0\0""..., 8191) = 8191; read(4, "".13|OTTHUMG00000002712.2|OTTHUMT""..., 8191) = 8191; read(4, ""0375",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:168957,Load,Loading,168957,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['Load'],['Loading']
Performance,"1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[2017-03-29 23:59:18.699] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 23:59:18.721] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-30 00:43:17.278] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-30 00:43:17.237] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-30 00:43:17.273] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-30 02:37:54.437] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-30 03:48:21.310] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-30 04:20:16.735] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-30 04:54:34.486] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-30 04:54:34.487] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-30 05:09:36.706] [stderrLog] [info] Done loading index; [00m[1m[2017-03-30 05:09:36.706] [jointLog] [info] done; [00m[1m[2017-03-30 05:09:36.790] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 699833, hits per frag: 1.4138[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1395659, hits per frag: 1.40267[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 2097294, hits per frag: 1.40287[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2794766, hits per frag: 1.40089[A. [32mprocessed[31m 2500000 [32mfragments[0m; hits: 3489235, hits per frag: 1.39849[A. [32mprocessed[31m 3000000 [32mfragments[0m; hits: 4183913, hits per frag: 1.39697[A. [32mprocessed[31m 3500000 [32mfragments[0m; hits: 4884560, hits per frag: 1.39759[A. [32mprocessed[31m 4000000 [32mfragments[0m; hits: 5584692, hits per frag: 1.39792[A. [32mprocessed[31m 4500000 [32mfragments[0m; hits: 6282640, hits per frag: 1.3977[A. [32mprocessed[31m 5000000 [3",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:10522,load,loading,10522,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['load'],['loading']
Performance,"1_ercc_SIRV.fa \; > -l IU \; > -1 <(zcat /nfs/research2/teichmann/valentine/data/SRP034543/SRR2048254_1.fastq.gz) \; > -2 <(zcat /nfs/research2/teichmann/valentine/data/SRP034543/SRR2048254_2.fastq.gz) \; > -o /tmp/SRR2048254_salmon_out \; > --biasCorrect \; > --useFSPD; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna_38.p4.83_repbase20.11_ercc_SIRV.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /dev/fd/63 }; # [ mates2 ] => { /dev/fd/62 }; # [ output ] => { /tmp/SRR2048254_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to /tmp/SRR2048254_salmon_out/logs; [2016-06-21 10:04:29.524] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi indextcmalloc: large alloc 4294967296 bytes == 0x4d084000 @; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Suffix Array; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Position Hash; [2016-06-21 10:04:30.158] [jointLog] [info] Loading Quasi index; [2016-06-21 10:04:32.681] [stderrLog] [info] Loading Transcript Info; [2016-06-21 10:04:33.686] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-06-21 10:04:34.050] [stderrLog] [info] There were 115426 set bits in the bit array; [2016-06-21 10:04:34.376] [stderrLog] [info] Computing transcript lengths; [2016-06-21 10:04:34.377] [stderrLog] [info] Waiting to finish loading hash; Index contained 115426 targets; [2016-06-21 10:04:47.033] [jointLog] [info] done; [2016-06-21 10:04:47.033] [stderrLog] [info] Done loading index. processed 6500000 fragments; hits: 13927069, hits per frag: 2.15389. [2016-06-21 10:05:13.847] [jointLog] [info] Computed 165969 rich equivalence classes for further processing; [2016-06-21 10:05:13.847] [jointLog] [info] Counted 6514601 total reads in the equivalence classes; [2016-06-21 10:05:13.893] [jointLog] [info",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/64:1375,Load,Loading,1375,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/64,1,['Load'],['Loading']
Performance,"2.364] [alevinLog] [warning] Gauss Prediction 13594 Too far from knee prediction skipping it; [2019-06-23 18:11:52.364] [alevinLog] [info] Learned InvCov: 254.933 normfactor: 13034.5; [2019-06-23 18:11:52.364] [alevinLog] [info] Total 384(has 200 low confidence) barcodes; [2019-06-23 18:11:52.383] [alevinLog] [info] Done True Barcode Sampling; [2019-06-23 18:11:52.489] [alevinLog] [warning] Total 91.1983% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-23 18:11:52.507] [alevinLog] [info] Done populating Z matrix; [2019-06-23 18:11:52.507] [alevinLog] [info] Done indexing Barcodes; [2019-06-23 18:11:52.507] [alevinLog] [info] Total Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5013,Load,Loading,5013,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance,200250[0m / [31m52200250[0m.; > [2020-06-04 12:42:01.300] [alevinLog] [info] Forcing to use 200000 cells; > [2020-06-04 12:42:02.037] [alevinLog] [info] Throwing 0 barcodes with < 1 reads; > [2020-06-04 12:42:02.738] [alevinLog] [info] Total [32m197328[0m(has [32m101[0m low confidence) barcodes; > [2020-06-04 12:42:03.656] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-04 12:42:03.830] [alevinLog] [info] Total 0.780192% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-04 12:42:13.353] [alevinLog] [info] Done populating Z matrix; > [2020-06-04 12:42:13.353] [alevinLog] [info] Total 0 CB got sequence corrected; > [2020-06-04 12:42:13.353] [alevinLog] [info] Done indexing Barcodes; > [2020-06-04 12:42:13.353] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-04 12:42:13.353] [alevinLog] [info] Used Barcodes except Whitelist: 0; > [2020-06-04 12:42:13.555] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-04 12:42:13.556] [alevinLog] [info] parsing read library format; > [2020-06-04 12:43:22.789] [alevinLog] [info] Starting optimizer; > ; > [2020-06-04 12:43:23.499] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:43:23.499] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:43:23.835] [alevinLog] [info] Total 24009.00 UMI after deduplicating.; > [2020-06-04 12:43:23.835] [alevinLog] [info] Total 89 BiDirected Edges.; > [2020-06-04 12:43:23.835] [alevinLog] [info] Total 82 UniDirected Edges.; > [2020-06-04 12:43:23.835] [alevinLog] [warning] Skipped 184123 barcodes due to No mapped read; > [2020-06-04 12:43:23.840] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-04 12:43:23.846] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 100.Can't performing whitelisting; Skipping; > [2020-06-04 12:43:23.846] [alevinLog] [info] Finished optimizer,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199:6012,optimiz,optimizer,6012,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199,6,"['optimiz', 'perform']","['optimizer', 'performing']"
Performance,"2018 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [T",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2306,Load,Loadable,2306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-09-11 16:34:30.116] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report. [2018-09-11 16:34:30.116] [jointLog] [info] Mapping rate = 0%. [2018-09-11 16:34:30.116] [jointLog] [info] finished quantifyLibrary(); [2018-09-11 16:34:30.156] [alevinLog] [info] Starting optimizer; ```. **Desktop (please complete the following information):**; - OS: CentOS; - x86_64 x86_64 x86_64 GNU/Linux; LSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch; Distributor ID:	CentOS; Description:	CentOS release 6.9 (Final); Release:	6.9; Codename:	Final",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:12494,optimiz,optimizer,12494,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['optimiz'],['optimizer']
Performance,"2019-07-09 09:17:07.572] [alevinLog] [info] Gauss Corrected Boundary at [32m 795 [0m; [2019-07-09 09:17:07.572] [alevinLog] [info] Learned InvCov: 173.265 normfactor: 1097.45; [2019-07-09 09:17:07.597] [alevinLog] [info] Total 41.2673% reads will be thrown away because of noisy Cellular barcodes.; [2019-07-09 09:17:07.597] [alevinLog] [info] Total [32m1192[0m(has [32m397[0m low confidence) barcodes; [2019-07-09 09:17:07.765] [alevinLog] [info] Done True Barcode Sampling; [2019-07-09 09:17:08.039] [alevinLog] [info] Done populating Z matrix; [2019-07-09 09:17:08.067] [alevinLog] [info] Done indexing Barcodes; [2019-07-09 09:17:08.067] [alevinLog] [info] Total Unique barcodes found: 7881525; [2019-07-09 09:17:08.067] [alevinLog] [info] Used Barcodes except Whitelist: 84951; [2019-07-09 09:17:08.128] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-07-09 09:17:08.128] [alevinLog] [info] parsing read library format; [2019-07-09 10:02:26.992] [alevinLog] [info] Starting optimizer. [2019-07-09 10:13:56.661] [alevinLog] [info] Total 99488568.00 UMI after deduplicating.; [2019-07-09 10:13:56.701] [alevinLog] [info] Clearing EqMap; Might take some time.; [2019-07-09 10:14:11.020] [alevinLog] [info] Starting Import of the gene count matrix of size 1192x60053.; [2019-07-09 10:14:11.286] [alevinLog] [info] Done initializing the empty matrix.; [2019-07-09 10:14:13.421] [alevinLog] [info] Done Importing gene count matrix for dimension 1192x60053; [2019-07-09 10:14:13.622] [alevinLog] [info] Starting white listing; [2019-07-09 10:14:13.627] [alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2019-07-09 10:14:13.627] [alevinLog] [info] Total 1192 barcodes found; [2019-07-09 10:14:13.627] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-07-09 10:14:13.627] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-07-09 10:14:13.627] [alevinLog",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510547693:1402,optimiz,optimizer,1402,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510547693,1,['optimiz'],['optimizer']
Performance,"20:08 SRP057125_SRS936134_2.fastq -> /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq; drwxrwxr-x 5 vale rst_pub 4.0K Jan 2 20:20 SRP057125_SRS936134_salmon_out; ```. But when I run the script there, it succeeds, without segfault. ```; [vale@ebi-003 salmon-problem]$ bash run_salmon.sh; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:1770,Load,Loading,1770,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:17:29.867] [jointLog] [info] Starting optimizer; [2016-01-02 20:17:30.130] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 20:17:30.136] [jointLog] [info] iteration = 0 | max rel diff. = 65.1271; [2016-01-02 20:17:30.315] [jointLog] [info] iteration 50, recomputing effective lengths; [2016-01-02 20:17:32.978] [jointLog] [info] iteration = 100 | max rel diff. = 0.259134; [2016-01-02 20:17:33.312] [jointLog] [info] iteration = 200 | max rel diff. = 0.136762; [2016-01-02 20:17:33.659] [jointLog] [info] iteration = 300 | max rel diff. = 0.0544656; [2016-01-02 20:17:33.979] [jointLog] [info] iteration = 400 | max rel diff. = 0.0635573; [2016-01-02 20:17:34.298] [jointLog] [info] iteration 500, recomputing effective lengths; [2016-01-02 20:17:36.486] [jointLog] [info] iteration = 500 | max rel diff. = 0.747925; [2016-01-02 20:17:36.865] [jointLog] [info] iteration = 600 | max rel diff. = 0.0480446; [2016-01-02 20:17:37.236] [jointLog] [info] iteration = 700 | max rel diff. = 0.0231505; [2016-01",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:2937,optimiz,optimizer,2937,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['optimiz'],['optimizer']
Performance,"21-09-20 16:20:48.240] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:20:48.240] [jointLog] [info] parsing read library format; [2021-09-20 16:20:48.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 75.428 ms; -----------------------------------------. [2021-09-20 16:22:03.730] [jointLog] [info] done; [2021-09-20 16:22:03.778] [jointLog] [info] Index contained 116,612 targets; [2021-09-20 16:22:03.892] [jointLog] [info] Number of decoys : 66; [2021-09-20 16:22:03.892] [jointLog] [info] ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:5197,Load,Loading,5197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"21-09-20 16:29:51.663] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:29:51.663] [jointLog] [info] parsing read library format; [2021-09-20 16:29:51.663] [jointLog] [info] There is 1 library.; [2021-09-20 16:29:51.736] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:29:51.738] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 5.1367 ms; -----------------------------------------; [2021-09-20 16:31:04.631] [jointLog] [info] done; [2021-09-20 16:31:04.632] [jointLog] [info] Index contained 116,612 targets; Killed. ```. However, if I run it only with --validateMappings, it works fine and generates the output quant.s",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:2233,Load,Loading,2233,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"21-09-20 22:30:11.442] [alevinLog] [info] Learned InvCov: 796.079 normfactor: 896.047; [2021-09-20 22:30:11.442] [alevinLog] [info] Total ESC[32m310ESC[0m(has ESC[32m201ESC[0m low confidence) barcodes; [2021-09-20 22:30:12.167] [alevinLog] [info] Done True Barcode Sampling; [2021-09-20 22:30:12.316] [alevinLog] [warning] Total 55.6923% reads will be thrown away because of noisy Cellular barcodes.; [2021-09-20 22:30:12.333] [alevinLog] [info] Done populating Z matrix; [2021-09-20 22:30:12.334] [alevinLog] [info] Total 7602 CB got sequence corrected; [2021-09-20 22:30:12.334] [alevinLog] [info] Done indexing Barcodes; [2021-09-20 22:30:12.334] [alevinLog] [info] Total Unique barcodes found: 675135; [2021-09-20 22:30:12.334] [alevinLog] [info] Used Barcodes except Whitelist: 7515; [2021-09-20 22:30:13.043] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-09-20 22:30:13.044] [alevinLog] [info] parsing read library format; [2021-09-20 22:33:09.346] [alevinLog] [info] Starting optimizer. [2021-09-20 22:33:09.516] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-09-20 22:33:09.516] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-09-20 22:33:09.576] [alevinLog] [info] Total 46357.00 UMI after deduplicating.; [2021-09-20 22:33:09.576] [alevinLog] [info] Total 2930 BiDirected Edges.; [2021-09-20 22:33:09.576] [alevinLog] [info] Total 3804 UniDirected Edges.; [2021-09-20 22:33:09.576] [alevinLog] [warning] Skipped 21 barcodes due to No mapped read; [2021-09-20 22:33:09.579] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-09-20 22:33:09.590] [alevinLog] [warning] Num Low confidence barcodes too less 186 < 200.Can't performing whitelisting; Skipping; [2021-09-20 22:33:09.591] [alevinLog] [info] Finished optimizer. ```; Then I tried setting `--keepCBFraction 1`. This does decrease the total number of reads being thrown away. However, mapping percenta",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/706:3956,optimiz,optimizer,3956,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/706,1,['optimiz'],['optimizer']
Performance,"221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; -----------------------------------------; size = 2977516968; -----------------------------------------; | Loading reference sequence | Time = 228.26 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 320.51 us; -----------------------------------------; [2024-05-03 15:10:04.136] [jointLog] [info] done; [2024-05-03 15:10:04.170] [jointLog] [info] Index contained 147554 targets. [2024-05-03 15:10:05.131] [jointLog] [info] Number of decoys : 61 ; processed 21000000 fragmentsointLog] [info] First decoy index : 147456; hits: 25885546, hits per frag: 1.2683(base) [**no further output**]; ```. **Desktop (please complete the following information):**; - OS: Ubuntu linux. ```; $ uname -a;",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:6732,Load,Loading,6732,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,"22:; /gpfs/projects/hpc_support/salmon/external/install/include/boost/container_hash/hash.hpp:130:33: warning: ‚Äòtemplate<class _Arg, class _Result> struct std::unary_function‚Äô is deprecated [-Wdeprecated-declarations]; 130 | struct hash_base : std::unary_function<T, std::size_t> {};; | ^~~~~~~~~~~~~~; In file included from /gpfs/software/gcc/13.2.0/include/c++/13.2.0/string:49,; from /gpfs/projects/hpc_support/salmon/external/install/include/boost/thread/exceptions.hpp:20:; /gpfs/software/gcc/13.2.0/include/c++/13.2.0/bits/stl_function.h:117:12: note: declared here; 117 | struct unary_function; | ^~~~~~~~~~~~~~; make[2]: *** [src/CMakeFiles/salmon_core.dir/build.make:160: src/CMakeFiles/salmon_core.dir/GenomicFeature.cpp.o] Error 1; make[1]: *** [CMakeFiles/Makefile2:568: src/CMakeFiles/salmon_core.dir/all] Error 2; make: *** [Makefile:166: all] Error 2; ```. **To Reproduce**; ```; #!/usr/bin/env bash. module load cmake Bzip2/1.0.8 curl; module load oneTBB/gcc13.2/2021.13.0; module load boost/gcc13.2/1.86.0 . rm -rf CMake*. cmake .. \; -DCMAKE_C_COMPILER=gcc \; -DBOOST_ROOT=/gpfs/software/boost/xeonmax/gcc13.2/1.86.0/ \; -DTBB_INSTALL_DIR=/gpfs/software/oneTBB/xeonmax/gcc13.2.0/2021.13.0 \; -DTBB_ROOT=/gpfs/software/oneTBB/xeonmax/gcc13.2.0/2021.13.0 \; -DCMAKE_CXX_COMPILER=g++ \; -DCMAKE_C_FLAGS=""-O3 -march=sapphirerapids -mtune=sapphirerapids"" \; -DCMAKE_CXX_FLAGS=""-O3 -march=sapphirerapids -mtune=sapphirerapids"" \; -DCMAKE_INSTALL_PREFIX:PATH=/gpfs/software/salmon/xeonmax/gcc13.2.0/1.10.3. make clean; make -j 25; ```. Specifically, please provide at least the following information:. * Which version of salmon was used? **1.10.3**; * How was salmon installed (compiled, downloaded executable, through bioconda)? **compiled**. **Expected behavior**; A successful build. **Desktop (please complete the following information):**; - OS: **Rocky Linux 9.4**; - Version: **Linux xm013 5.14.0-427.26.1.el9_4.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Jul 23 16:00:21 UTC 2024 x86_64 x86_6",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/953:3024,load,load,3024,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/953,1,['load'],['load']
Performance,"23-03-17 07:40:15.733] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-03-17 07:40:15.733] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivalence classes . [2023-03-17 07:46:19.488] [jointLog] [warning] 0.22783% ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:7640,Load,Loading,7640,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,23-11-30 09:36:58.680] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:36:58.680] [jointLog] [info] parsing read library format; [2023-11-30 09:36:58.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 2.8044 ms; -----------------------------------------. [2023-11-30 09:37:51.026] [jointLog] [info] done; [2023-11-30 09:37:51.104] [jointLog] [info] Index contained 253166 targets; [2023-11-30 09:37:51.166] [jointLog] [info] Number of decoys : 194; [2023-11-30 09:37:51.166] [jointLog] [info],MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:6995,Load,Loading,6995,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"23-11-30 09:38:33.436] [jointLog] [warning] Only 268744 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2023-11-30 09:38:33.436] [jointLog] [info] Mapping rate = 53.7596%. [2023-11-30 09:38:33.436] [jointLog] [info] finished quantifyLibrary(); [2023-11-30 09:38:33.440] [jointLog] [info] Starting optimizer; [2023-11-30 09:38:33.498] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-11-30 09:38:33.511] [jointLog] [info] iteration = 0 | max rel diff. = 101.852; [2023-11-30 09:38:34.853] [jointLog] [info] iteration = 100 | max rel diff. = 0.263537; [2023-11-30 09:38:36.144] [jointLog] [info] iteration = 200 | max rel diff. = 0.0414157; [2023-11-30 09:38:37.438] [jointLog] [info] iteration = 300 | max rel diff. = 1.17048; [2023-11-30 09:38:38.135] [jointLog] [info] iteration = 355 | max rel diff. = 0.00351135; [2023-11-30 09:38:38.148] [jointLog] [info] Finished optimizer; [2023-11-30 09:38:38.148] [jointLog] [info] writing output ; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; - Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; - Linux r640c10 4.18.0-372.16.1.el8_6.x86_64 #1 SMP Tue Jun 28 03:02:21 EDT 2022 x86_64 GNU/Linux. **Additional context**; Add any other context about the problem here.; The issue is definitely not insufficient memory (>300 GB available). ; Interestingly, the same salmon index was working perfectly until now. I re-created the index to make sure the files were not corrupted somehow but it resulted in the same error. I doubt that this is due to an update in salmon itself, because we have been using the same singularity container for this process for a while, so the same salmon version, same index now producing the error. . For my use case, not using the `--skipQuant` doesn't really cause any p",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:9871,optimiz,optimizer,9871,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['optimiz'],['optimizer']
Performance,23-11-30 09:40:21.543] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:40:21.543] [jointLog] [info] parsing read library format; [2023-11-30 09:40:21.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.3385 ms; -----------------------------------------. Segmentation fault (core dumped); ```. Output when the flag is off and the process finishes without the seg fault:; ```; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:3870,Load,Loading,3870,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"24 250.000 0.842494 14.549; LOC_Os01g01040.1 2508 250.000 12.017881 207.542; LOC_Os01g01040.2 2482 250.000 8.005651 138.253; LOC_Os01g01040.3 2583 250.000 9.187142 158.656; LOC_Os01g01050.1 2039 250.000 21.476314 370.883. [2019-03-03 07:14:59.272] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-03-03 07:14:59.272] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-03-03 07:14:59.272] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-03-03 07:14:59.272] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-03-03 07:14:59.272] [jointLog] [info] parsing read library format; [2019-03-03 07:14:59.272] [jointLog] [info] There is 1 library.; [2019-03-03 07:14:59.329] [jointLog] [info] Loading Quasi index; [2019-03-03 07:14:59.329] [jointLog] [info] Loading 32-bit quasi index; [2019-03-03 07:15:12.564] [jointLog] [info] done; [2019-03-03 07:15:12.564] [jointLog] [info] Index contained 66,004 targets; [2019-03-03 07:15:14.824] [jointLog] [info] Automatically detected most likely library type as MU; [2019-03-03 07:16:36.263] [jointLog] [info] Thread saw mini-batch with a maximum of 89.90% zero probability fragments; [2019-03-03 07:16:36.295] [jointLog] [info] Thread saw mini-batch with a maximum of 89.70% zero probability fragments; [2019-03-03 07:16:36.305] [jointLog] [info] Thread saw mini-batch with a maximum of 88.36% zero probability fragments; [2019-03-03 07:16:36.311] [jointLog] [info] Thread saw mini-batch with a maximum of 90.16% zero probability fragments; [2019-03-03 07:16:36.341] [jointLog] [info] Thread saw mini-batch with a maximum of 26.54% zero probability fragments; [2019-03-03 07:16:36.391] [jointLog] [info] Computed 58,867 rich equivalence classes for further ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:8128,Load,Loading,8128,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['Load'],['Loading']
Performance,"257700 (LWP 27934)]; [New Thread 0x7ff4f7256700 (LWP 27935)]; [Thread 0x7ffb77263700 (LWP 27922) exited]; [Thread 0x7ffa77261700 (LWP 27924) exited]; [Thread 0x7ffaf7262700 (LWP 27923) exited]; [New Thread 0x7ff477255700 (LWP 27936)]; [Thread 0x7ff9f7260700 (LWP 27925) exited]; terminate called without an active exception; [Thread 0x7ff77725b700 (LWP 27930) exited]; [Thread 0x7ff8f725e700 (LWP 27927) exited]. Program received signal SIGABRT, Aborted.; [Switching to Thread 0x7ffcf97e7700 (LWP 27870)]; 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; 56 ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt; #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:93; #7 __destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:103; #8 _Destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:126; #9 _Destroy<std::thread*, std::thread> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:151; #10 std::vector<std::thread, std::allocator<std::thread> >::~vector (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/lo",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:4199,optimiz,optimized,4199,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,"258 rich equivalence classes for further processing; [2020-04-23 00:10:07.647] [jointLog] [info] Counted 11,112,281 total reads in the equivalence classes ; [2020-04-23 00:10:07.660] [jointLog] [info] Number of mappings discarded because of alignment score : 26,561,460; [2020-04-23 00:10:07.660] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 2,134,945; [2020-04-23 00:10:07.660] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 1,953,200; [2020-04-23 00:10:07.660] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 33,267; [2020-04-23 00:10:07.660] [jointLog] [info] Mapping rate = 55.9852%. [2020-04-23 00:10:07.670] [jointLog] [info] finished quantifyLibrary(); [2020-04-23 00:10:07.648] [fileLog] [info] ; At end of round 0; Observed 19848610 total fragments (19848610 in most recent round). [2020-04-23 00:10:11.274] [jointLog] [info] Starting optimizer; [2020-04-23 00:10:57.432] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-04-23 00:10:57.563] [jointLog] [info] iteration = 0 | max rel diff. = 3769.01; [2020-04-23 00:10:57.705] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2020-04-23 00:13:04.343] [jointLog] [info] Computed expected counts (for bias correction); [2020-04-23 00:13:04.582] [jointLog] [info] processed bias for 0.0% of the transcripts; [2020-04-23 00:13:06.971] [jointLog] [info] processed bias for 10.0% of the transcripts; [2020-04-23 00:13:09.342] [jointLog] [info] processed bias for 20.0% of the transcripts; [2020-04-23 00:13:11.459] [jointLog] [info] processed bias for 30.0% of the transcripts; [2020-04-23 00:13:13.690] [jointLog] [info] processed bias for 40.0% of the transcripts; [2020-04-23 00:13:15.869] [jointLog] [info] processed bias for 50.0% of the transcripts; [2020-04-23 00:13:18.159] [jointLog] [info] processed bias for 60.0% of t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/516#issuecomment-621872756:3228,optimiz,optimizer,3228,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/516#issuecomment-621872756,1,['optimiz'],['optimizer']
Performance,"260700 (LWP 27925) exited]; terminate called without an active exception; [Thread 0x7ff77725b700 (LWP 27930) exited]; [Thread 0x7ff8f725e700 (LWP 27927) exited]. Program received signal SIGABRT, Aborted.; [Switching to Thread 0x7ffcf97e7700 (LWP 27870)]; 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; 56 ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt; #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:93; #7 __destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:103; #8 _Destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:126; #9 _Destroy<std::thread*, std::thread> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:151; #10 std::vector<std::thread, std::allocator<std::thread> >::~vector (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_vector.h:424; #11 0x00000000007a5fde in cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<ch",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:4413,optimiz,optimized,4413,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,2,['optimiz'],['optimized']
Performance,"26] [alevinLog] [info] Forcing to use 100000 cells; > [2020-06-03 13:54:43.964] [alevinLog] [info] Throwing 49909 barcodes with < 10 reads; > [2020-06-03 13:54:43.984] [alevinLog] [info] Total 50092(has 201 low confidence) barcodes; > [2020-06-03 13:54:44.191] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-03 13:54:44.285] [alevinLog] [info] Total 1.70493% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-03 13:54:45.790] [alevinLog] [info] Done populating Z matrix; > [2020-06-03 13:54:45.790] [alevinLog] [info] Total 0 CB got sequence corrected; > [2020-06-03 13:54:45.790] [alevinLog] [info] Done indexing Barcodes; > [2020-06-03 13:54:45.790] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-03 13:54:45.790] [alevinLog] [info] Used Barcodes except Whitelist: 0; > [2020-06-03 13:54:46.493] [jointLog] [info] There is 1 library.; > ; > -----------------------------------------; > [2020-06-03 13:54:46.551] [jointLog] [info] Loading pufferfish index; > [2020-06-03 13:54:46.551] [jointLog] [info] Loading dense pufferfish index.; > [2020-06-03 13:54:46.552] [jointLog] [info] done; > [2020-06-03 13:54:46.552] [jointLog] [info] Index contained 64 targets; > [2020-06-03 13:54:46.552] [jointLog] [info] Number of decoys : 0; > ; > [2020-06-03 13:54:46.493] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > processed 52 Million fragmentsvinLog] [info] parsing read library format; > hits: 0, hits per frag: 0; > ; > [2020-06-03 13:55:42.905] [alevinLog] [info] Starting optimizer; > ; > [2020-06-03 13:55:42.931] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.931] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0.00 UMI after deduplicating.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 BiDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531:2338,Load,Loading,2338,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531,1,['Load'],['Loading']
Performance,2:16:37.862] [alevinLog] [info] Total 195(has 201 low confidence) barcodes; [2021-04-09 12:16:37.883] [alevinLog] [info] Done True Barcode Sampling; [2021-04-09 12:16:37.884] [alevinLog] [info] Total 15.7% reads will be thrown away because of noisy Cellular barcodes.; [2021-04-09 12:16:37.892] [alevinLog] [info] Done populating Z matrix; [2021-04-09 12:16:37.892] [alevinLog] [info] Total 0 CB got sequence corrected; [2021-04-09 12:16:37.892] [alevinLog] [info] Done indexing Barcodes; [2021-04-09 12:16:37.892] [alevinLog] [info] Total Unique barcodes found: 822; [2021-04-09 12:16:37.892] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2021-04-09 12:16:37.914] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-04-09 12:16:37.914] [alevinLog] [info] parsing read library format; [2021-04-09 12:16:37.914] [jointLog] [info] There is 1 library.; [2021-04-09 12:16:38.027] [jointLog] [info] Loading pufferfish index; [2021-04-09 12:16:38.027] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; --------------------------,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:4167,Load,Loading,4167,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"2] [puff::index::jointLog] [info] writing index components ; [2022-04-16 11:19:55.117] [puff::index::jointLog] [info] finished writing dense pufferfish index ; [2022-04-16 11:19:55.401] [jLog] [info] done building index. and the log for quantification:. > [2022-04-16 11:23:51.572] [jointLog] [info] setting maxHashResizeThreads to 48 ; [2022-04-16 11:23:51.572] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ; [2022-04-16 11:23:51.572] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ; [2022-04-16 11:23:51.572] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. [2022-04-16 11:23:51.572] [jointLog] [info] parsing read library format ; [2022-04-16 11:23:51.572] [jointLog] [info] There is 1 library. ; [2022-04-16 11:23:51.694] [jointLog] [info] Loading pufferfish index ; [2022-04-16 11:23:51.695] [jointLog] [info] Loading dense pufferfish index. ; [2022-04-16 11:23:53.681] [jointLog] [info] done ; [2022-04-16 11:23:53.681] [jointLog] [info] Index contained 245,261 targets ; [2022-04-16 11:23:53.776] [jointLog] [info] Number of decoys : 0 ; [2022-04-16 11:24:42.358] [jointLog] [info] Computed 960,194 rich equivalence classes for further processing [2022-04-16 11:24:42.358] [jointLog] [info] Counted 23,784,776 total reads in the equivalence classes [2022-04-16 11:24:42.426] [jointLog] [info] Number of mappings discarded because of alignment score : 3,206,484 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 170,372 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 154,144 ; [2022-04-16 11:24:42.426] [jointLog] [info] Mapping rate ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317:16052,Load,Loading,16052,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317,1,['Load'],['Loading']
Performance,"311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33:18.039] [jointLog] [warning] Found 187 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-08-29 11:33:18.039] [jointLog] [info] Mapping rate = 43.5974%. [2018-08-29 11:33:18.039] [jointLog] [info] finished quantifyLibrary(); Analyzed 14 cells (0% of all).vinLog] [info] Starting optimizer; ......; ......; Analyzed 544 cells (16% of all). ERROR: cell doesn't have any read count; ------------------------------------------------------------; Sender: LSF System <lsf@ebi5-164>; Subject: Job 9248384: <./salmon-0.11.2-linux_x86_64/bin/salmon alevin -l A -1 data/mSpT3_S2_L001_R1_001.fastq data/mSpT3_S2_L002_R1_001.fastq -2 data/mSpT3_S2_L001_R2_001.fastq data/mSpT3_S2_L002_R2_001.fastq --dropseq -p 10 -o mSpT3 -i mouse_cdna --tgMap biomart.csv> in cluster <EBI> Exited. Job <./salmon-0.11.2-linux_x86_64/bin/salmon alevin -l A -1 data/mSpT3_S2_L001_R1_001.fastq data/mSpT3_S2_L002_R1_001.fastq -2 data/mSpT3_S2_L001_R2_001.fastq data/mSpT3_S2_L002_R2_001.fastq --dropseq -p 10 -o mSpT3 -i mouse_cdna --tgMap biomart.csv> was submitted from host <ebi-login-001> by user <mahogny> in cluster <EBI>.; Job was executed on host(s) <10*ebi5-164>, in queue <research-rh7>, as user <mahogny> in cluster <EBI>.; </homes/mahogny> was used as the home directory.; </homes/mahogny/com",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:4718,optimiz,optimizer,4718,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['optimiz'],['optimizer']
Performance,31m52200250[0m.; > [2020-06-05 13:09:43.576] [alevinLog] [info] Forcing to use 100000 cells; > [2020-06-05 13:09:43.653] [alevinLog] [info] Throwing 0 barcodes with < 1 reads; > [2020-06-05 13:09:43.673] [alevinLog] [info] Total [32m95377[0m(has [32m11[0m low confidence) barcodes; > [2020-06-05 13:09:43.875] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-05 13:09:44.027] [alevinLog] [info] Total 1.2299% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-05 13:09:48.338] [alevinLog] [info] Done populating Z matrix; > [2020-06-05 13:09:48.376] [alevinLog] [info] Total 118774 CB got sequence corrected; > [2020-06-05 13:09:48.389] [alevinLog] [info] Done indexing Barcodes; > [2020-06-05 13:09:48.389] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-05 13:09:48.389] [alevinLog] [info] Used Barcodes except Whitelist: 88156; > [2020-06-05 13:09:49.130] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-05 13:09:49.132] [alevinLog] [info] parsing read library format; > [2020-06-05 13:11:01.670] [alevinLog] [info] Starting optimizer; > ; > ; > [2020-06-05 13:11:02.377] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-05 13:11:02.377] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-05 13:11:04.408] [alevinLog] [info] Total 322945.00 UMI after deduplicating.; > [2020-06-05 13:11:04.408] [alevinLog] [info] Total 15972 BiDirected Edges.; > [2020-06-05 13:11:04.408] [alevinLog] [info] Total 176951 UniDirected Edges.; > [2020-06-05 13:11:04.408] [alevinLog] [warning] Skipped 12046 barcodes due to No mapped read; > [2020-06-05 13:11:04.415] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-05 13:11:04.455] [alevinLog] [warning] Num Low confidence barcodes too less 8 < 10.Can't performing whitelisting; Skipping; > [2020-06-05 13:11:04.455] [alevinLog] [info] Finished optimizer,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639642373:1820,optimiz,optimizer,1820,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639642373,3,"['optimiz', 'perform']","['optimizer', 'performing']"
Performance,31m52200250[0m.; > [2020-06-05 13:39:18.623] [alevinLog] [info] Forcing to use 100000 cells; > [2020-06-05 13:39:19.364] [alevinLog] [info] Throwing 49909 barcodes with < 10 reads; > [2020-06-05 13:39:20.065] [alevinLog] [info] Total [32m50092[0m(has [32m201[0m low confidence) barcodes; > [2020-06-05 13:39:20.928] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-05 13:39:21.057] [alevinLog] [info] Total 1.70493% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-05 13:39:23.175] [alevinLog] [info] Done populating Z matrix; > [2020-06-05 13:39:23.175] [alevinLog] [info] Total 0 CB got sequence corrected; > [2020-06-05 13:39:23.175] [alevinLog] [info] Done indexing Barcodes; > [2020-06-05 13:39:23.175] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-05 13:39:23.175] [alevinLog] [info] Used Barcodes except Whitelist: 0; > [2020-06-05 13:39:23.278] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-05 13:39:23.278] [alevinLog] [info] parsing read library format; > [2020-06-05 13:40:35.769] [alevinLog] [info] Starting optimizer; > ; > ; > [2020-06-05 13:40:36.476] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-05 13:40:36.476] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-05 13:40:37.933] [alevinLog] [info] Total 227279.00 UMI after deduplicating.; > [2020-06-05 13:40:37.933] [alevinLog] [info] Total 14712 BiDirected Edges.; > [2020-06-05 13:40:37.933] [alevinLog] [info] Total 173086 UniDirected Edges.; > [2020-06-05 13:40:37.933] [alevinLog] [warning] Skipped 5326 barcodes due to No mapped read; > [2020-06-05 13:40:37.936] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-05 13:40:37.962] [alevinLog] [warning] Num Low confidence barcodes too less 165 < 200.Can't performing whitelisting; Skipping; > [2020-06-05 13:40:37.962] [alevinLog] [info] Finished optimizer,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639663002:1935,optimiz,optimizer,1935,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639663002,3,"['optimiz', 'perform']","['optimizer', 'performing']"
Performance,"32.992] [jointLog] [info] Index contained 153,995 targets; [2020-09-23 10:09:33.190] [jointLog] [info] Number of decoys : 0; [2020-09-23 10:09:40.178] [jointLog] [info] Automatically detected most likely library type as ISR; [2020-09-23 10:31:17.407] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2020-09-23 10:31:17.467] [jointLog] [info] Thread saw mini-batch with a maximum of 1.64% zero probability fragments; [2020-09-23 10:31:17.563] [jointLog] [info] Thread saw mini-batch with a maximum of 1.66% zero probability fragments; [2020-09-23 10:31:17.573] [jointLog] [info] Thread saw mini-batch with a maximum of 1.72% zero probability fragments; [2020-09-23 10:31:18.005] [jointLog] [info] Computed 329,858 rich equivalence classes for further processing; [2020-09-23 10:31:18.005] [jointLog] [info] Counted 37,348,440 total reads in the equivalence classes ; [2020-09-23 10:31:18.009] [jointLog] [info] Number of mappings discarded because of alignment score : 120,261,413; [2020-09-23 10:31:18.009] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 4,196,417; [2020-09-23 10:31:18.009] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2020-09-23 10:31:18.009] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 569,393; [2020-09-23 10:31:18.009] [jointLog] [info] Mapping rate = 65.3931%. [2020-09-23 10:31:18.010] [jointLog] [info] finished quantifyLibrary(); [2020-09-23 10:31:18.097] [jointLog] [info] Starting optimizer; [2020-09-23 10:31:18.006] [fileLog] [info] . ""num_bootstraps"": 0,; ""num_processed"": 57113760,; ""num_mapped"": 37348440,; ""num_decoy_fragments"": 0,; ""num_dovetail_fragments"": 569393,; ""num_fragments_filtered_vm"": 4196417,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 120261413,; ""percent_mapped"": 65.39306815030214,; ""call"": ""quant"",; ```. Best,; Zheng Zhuqing",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697107525:2152,optimiz,optimizer,2152,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697107525,1,['optimiz'],['optimizer']
Performance,"35.112] [alevinLog] [info] Total 49.4292% reads will be thrown away because of noisy Cellular barcodes.; [2019-01-29 15:49:35.112] [alevinLog] [info] Total 4000(has 1000 low confidence) barcodes; [2019-01-29 15:49:35.251] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 15:49:35.896] [alevinLog] [info] Done populating Z matrix; [2019-01-29 15:49:35.994] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 15:49:35.994] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-29 15:49:35.994] [alevinLog] [info] Used Barcodes except Whitelist: 105901; [2019-01-29 15:49:36.107] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 15:49:36.107] [alevinLog] [info] parsing read library format; [2019-01-29 15:49:36.415] [stderrLog] [info] Loading Suffix Array; [2019-01-29 15:49:36.107] [jointLog] [info] There is 1 library.; [2019-01-29 15:49:36.373] [jointLog] [info] Loading Quasi index; [2019-01-29 15:49:36.396] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 15:49:50.479] [stderrLog] [info] Loading Transcript Info; [2019-01-29 15:49:55.550] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 15:49:56.036] [stderrLog] [info] There were 58,086 set bits in the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.677] [jointLog] [info] Counted 58,047,553 total reads in the equivalence classes; [2019-01-29 16:05:46.678] [jointLog] [warning] Found 21006 reads with `N` in the UMI sequence and ignored the reads.; P",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:1434,Load,Loading,1434,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['Load'],['Loading']
Performance,"35:38.576] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 14.838 s; -----------------------------------------; size = 3401221626; -----------------------------------------; | Loading reference sequence | Time = 1.1113 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 9.0843 ms; -----------------------------------------. [2020-08-13 09:36:14.700] [jointLog] [info] done",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:2058,Load,Loading,2058,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance,"3] [jointLog] [info] setting maxHashResizeThreads to 4; [2020-05-29 20:14:24.283] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-29 20:14:24.283] [jointLog] [info] parsing read library format; [2020-05-29 20:14:24.283] [jointLog] [info] There is 1 library.; [2020-05-29 20:14:24.341] [jointLog] [info] Loading pufferfish index; [2020-05-29 20:14:24.342] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 41.693 ms; -----------------------------------------; size = 357712; -----------------------------------------; | Loading contig offsets | Time = 657 us; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 202.87 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 16.335 ms; -----------------------------------------; size = 64786639; Number of ones: 357711; Number of ones per inventory item: 512; Inventory entries filled: 699; -----------------------------------------; | Loading contig boundaries | Time = 154.69 ms; -----------------------------------------; size = 64786639; -----------------------------------------; | Loading sequence | Time = 6.3275 ms; -----------------------------------------; size = 54055309; -----------------------------------------; | Loading positions | Time = 68.544 ms; -----------------------------------------; size = 74351806; -----------------------------------------; | Loading reference sequence | Time = 7.0924 ms; -----------------------------------------; -",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527:3021,Load,Loading,3021,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527,2,['Load'],['Loading']
Performance,"4	0; True junctions count = 472636; False junctions count = 799354; Hash table size = 1271990; Candidate marks count = 5149133; --------------------------------------------------------------------------------; Reallocating bifurcations time: 0; True marks count: 3362277; Edges construction time: 4; --------------------------------------------------------------------------------; Distinct junctions = 472636. allowedIn: 21; Max Junction ID: 563055; seen.size():4504449 kmerInfo.size():563056; approximateContigTotalLength: 72618120; counters for complex kmers:; (prec>1 & succ>1)=21819 | (succ>1 & isStart)=419 | (prec>1 & isEnd)=421 | (isStart & isEnd)=30; contig count: 717834 element count: 122492815 complex nodes: 22689; # of ones in rank vector: 717833; [2021-08-20 18:05:53.542] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2021-08-20 18:05:53.542] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory indexs/alt_long_index; size = 122492815; -----------------------------------------; | Loading contigs | Time = 11.032 ms; -----------------------------------------; size = 122492815; -----------------------------------------; | Loading contig boundaries | Time = 5.8509 ms; -----------------------------------------; Number of ones: 717833; Number of ones per inventory item: 512; Inventory entries filled: 1403; 717833; [2021-08-20 18:05:53.775] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2021-08-20 18:05:53.780] [puff::index::jointLog] [info] contig count for validation: 717,833; [2021-08-20 18:05:53.943] [puff::index::jointLog] [info] Total # of Contigs : 717,833; [2021-08-20 18:05:53.944] [puff::index::jointLog] [info] Total # of numerical Contigs : 717,833; [2021-08-20 18:05:53.963] [puff::index::jointLog] [info] Total # of contig vec entries: 3,341,414; [2021-08-20 18:05:53.964] [puff::index::jointLog] [info] bits per offset entry 22; [2021-08-20 18:05:54.03",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/696:4497,Load,Loading,4497,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/696,1,['Load'],['Loading']
Performance,"4 15:58:27.583] [alevinLog] [info] Total 0 white-listed Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [warning] Total 100% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 15:58:27.594] [alevinLog] [info] Done populating Z matrix; [2019-06-04 15:58:27.594] [alevinLog] [warning] 0 Whitelisted Barcodes with 0 frequency; [2019-06-04 15:58:27.594] [alevinLog] [info] Done indexing Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [info] Total Unique barcodes found: 5; [2019-06-04 15:58:27.594] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 15:58:27.617] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 15:58:27.617] [alevinLog] [info] parsing read library format; [2019-06-04 15:58:27.617] [jointLog] [info] There is 1 library.; [2019-06-04 15:58:27.750] [jointLog] [info] Loading Quasi index; [2019-06-04 15:58:27.750] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 15:58:27.750] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 15:58:28.626] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 15:58:28.866] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 15:58:28.900] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 15:58:28.922] [stderrLog] [info] Computing transcript lengths; [2019-06-04 15:58:28.922] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 15:58:38.645] [jointLog] [info] done; [2019-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million fragments; processed 5 Million fragments; processed 5 Million fragments; hits: 0, hits per frag: 0. [2019-06-04 15:58:42.486] [jointLog] ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:2324,Load,Loading,2324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['Load'],['Loading']
Performance,"4%. [2018-08-29 11:33:18.039] [jointLog] [info] finished quantifyLibrary(); Analyzed 14 cells (0% of all).vinLog] [info] Starting optimizer; ......; ......; Analyzed 544 cells (16% of all). ERROR: cell doesn't have any read count; ------------------------------------------------------------; Sender: LSF System <lsf@ebi5-164>; Subject: Job 9248384: <./salmon-0.11.2-linux_x86_64/bin/salmon alevin -l A -1 data/mSpT3_S2_L001_R1_001.fastq data/mSpT3_S2_L002_R1_001.fastq -2 data/mSpT3_S2_L001_R2_001.fastq data/mSpT3_S2_L002_R2_001.fastq --dropseq -p 10 -o mSpT3 -i mouse_cdna --tgMap biomart.csv> in cluster <EBI> Exited. Job <./salmon-0.11.2-linux_x86_64/bin/salmon alevin -l A -1 data/mSpT3_S2_L001_R1_001.fastq data/mSpT3_S2_L002_R1_001.fastq -2 data/mSpT3_S2_L001_R2_001.fastq data/mSpT3_S2_L002_R2_001.fastq --dropseq -p 10 -o mSpT3 -i mouse_cdna --tgMap biomart.csv> was submitted from host <ebi-login-001> by user <mahogny> in cluster <EBI>.; Job was executed on host(s) <10*ebi5-164>, in queue <research-rh7>, as user <mahogny> in cluster <EBI>.; </homes/mahogny> was used as the home directory.; </homes/mahogny/common/data/henrikson_celsee_20180825> was used as the working directory.; Started at Wed Aug 29 11:26:42 2018; Results reported at Wed Aug 29 11:33:22 2018. Your job looked like:. ------------------------------------------------------------; # LSBATCH: User input; ./salmon-0.11.2-linux_x86_64/bin/salmon alevin -l A -1 data/mSpT3_S2_L001_R1_001.fastq data/mSpT3_S2_L002_R1_001.fastq -2 data/mSpT3_S2_L001_R2_001.fastq data/mSpT3_S2_L002_R2_001.fastq --dropseq -p 10 -o mSpT3 -i mouse_cdna --tgMap biomart.csv; ------------------------------------------------------------. Exited with exit code 1. Resource usage summary:. CPU time : 306.36 sec.; Max Memory : 4490 MB; Average Memory : 2219.44 MB; Total Requested Memory : 30000.00 MB; Delta Memory : 25510.00 MB; (Delta: the difference between total requested memory and actual max usage.); Max Swap : 6420 MB. Max Processes : 3",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:5584,queue,queue,5584,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['queue'],['queue']
Performance,"4507; [2021-06-07 21:05:23.304] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.109772; [2021-06-07 21:05:23.469] [jointLog] [info] iteration = 1,711 | max rel diff. = 0.00699727; [2021-06-07 21:05:23.499] [jointLog] [info] finished optimizer; [2021-06-07 21:05:23.499] [jointLog] [info] writing output; [2021-06-07 21:05:23.829] [jointLog] [info] Staring Bootstrapping; [2021-06-07 21:05:23.962] [jointLog] [info] Will draw 30 bootstrap samples; [2021-06-07 21:05:23.962] [jointLog] [info] Optimizing over 430,852 equivalence classes; ```. `-l ISF`:; ```; Completed first pass through the alignment file.; Total # of mapped reads : 30,418,756; # of uniquely mapped reads : 8,515,058; # ambiguously mapped reads : 21,903,698; [2021-06-08 03:44:49.444] [jointLog] [info] Computed 430,882 rich equivalence classes for further processing; [2021-06-08 03:44:49.444] [jointLog] [info] Counted 29,619,881 total reads in the equivalence classes; [2021-06-08 03:44:49.445] [jointLog] [info] starting optimizer; [2021-06-08 03:44:49.599] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-06-08 03:44:49.615] [jointLog] [info] iteration = 0 | max rel diff. = 5827.73; [2021-06-08 03:44:51.123] [jointLog] [info] iteration = 100 | max rel diff. = 17.6527; [2021-06-08 03:44:52.620] [jointLog] [info] iteration = 200 | max rel diff. = 20.0555; [2021-06-08 03:44:54.133] [jointLog] [info] iteration = 300 | max rel diff. = 2.81129; [2021-06-08 03:44:55.641] [jointLog] [info] iteration = 400 | max rel diff. = 12.4174; [2021-06-08 03:44:57.128] [jointLog] [info] iteration = 500 | max rel diff. = 0.464718; [2021-06-08 03:44:58.630] [jointLog] [info] iteration = 600 | max rel diff. = 1.03722; [2021-06-08 03:45:00.132] [jointLog] [info] iteration = 700 | max rel diff. = 0.109768; [2021-06-08 03:45:01.617] [jointLog] [info] iteration = 800 | max rel diff. = 1.21662; [2021-06-08 03:45:03.120] [jointLog] [info] iteration = 900 | max rel diff. = 3.66627; [2021-06-08 03:45:04.6",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/669:5089,optimiz,optimizer,5089,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/669,1,['optimiz'],['optimizer']
Performance,"450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 18.506 ms; -----------------------------------------; [2023-09-28 04:51:48.011] [jointLog] [info] done; [2023-09-28 04:51:48.061] [jointLog] [info] Index contained 5352508 targets; [2023-09-28 04:52:00.269] [jointLog] [info] Number of decoys : 182; [2023-09-28 04:52:00.269] [jointLog] [info] First decoy index : 5155176 . [2023-09-28 04:52:03.534] [jointLog] [info] Automatically detected most likely library type as ISR; processed 26000000 fragments; hits: 42435888, hits per frag: 1.6",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:3881,Load,Loading,3881,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"493] [jointLog] [info] Loading Quasi index; [2018-07-19 22:55:38.494] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 22:55:38.549] [jointLog] [info] done; [2018-07-19 22:55:38.549] [jointLog] [info] Index contained 179 targets. [2018-07-19 22:55:38.385] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 22:55:38.385] [alevinLog] [info] parsing read library format; [2018-07-19 22:55:38.495] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 22:55:38.498] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 22:55:38.499] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 22:55:38.500] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 22:55:38.501] [stderrLog] [info] Computing transcript lengths; [2018-07-19 22:55:38.501] [stderrLog] [info] Waiting to finish loading hash; processed 87 Million fragmentserrLog] [info] Done loading index; hits: 468892, hits per frag: 0.00535907. [2018-07-19 23:03:35.740] [jointLog] [info] Computed 150 rich equivalence classes for further processing; [2018-07-19 23:03:35.740] [jointLog] [info] Counted 412868 total reads in the equivalence classes ; [2018-07-19 23:03:35.741] [jointLog] [warning] Only 412868 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-07-19 23:03:35.741] [jointLog] [info] Mapping rate = 0.469385%. [2018-07-19 23:03:35.741] [jointLog] [info] finished quantifyLibrary(); [2018-07-19 23:03:35.755] [alevinLog] [info] Starting optimizer. Analyzed 5238 cells (100% of all).; Skipped Barcodes are from High Confidence Region; `$ls -ltrha alevin_output/alevin/`; total 256K; drwxrwx--- 6 zare G-816158 4.0K Jul 19 22:36 ..; -rw-rw---- 1 zare G-816158 960 Jul 19 23:03 alevin.log; drwxrwx--- 2 zare G-816158 4.0K Jul 19 23:03 .; -rw-rw---- 1 zare G-816158 81K Jul 19 23:03 quants_mat_rows.txt; -rw-rw---- 1 zare G-816158 160K Jul 19 23:03 quants_mat.gz",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:3962,optimiz,optimizer,3962,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,1,['optimiz'],['optimizer']
Performance,"4:59.693] [alevinLog] [info] # Barcodes Used: 902561 / 912145.; [2019-01-29 09:55:04.490] [alevinLog] [info] Knee found left boundary at 391 ; [2019-01-29 09:55:04.817] [alevinLog] [info] Gauss Corrected Boundary at 99 ; [2019-01-29 09:55:04.817] [alevinLog] [info] Learned InvCov: 114.535 normfactor: 147.323; [2019-01-29 09:55:04.817] [alevinLog] [info] Total 289(has 190 low confidence) barcodes; [2019-01-29 09:55:04.822] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:55:04.855] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:55:04.855] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:55:04.855] [alevinLog] [info] Total Unique barcodes found: 70316; [2019-01-29 09:55:04.855] [alevinLog] [info] Used Barcodes except Whitelist: 184; [2019-01-29 09:55:04.882] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:55:04.882] [alevinLog] [info] parsing read library format; [2019-01-29 09:55:05.014] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:55:04.882] [jointLog] [info] There is 1 library.; [2019-01-29 09:55:05.012] [jointLog] [info] Loading Quasi index; [2019-01-29 09:55:05.013] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:55:06.105] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:55:09.968] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:55:16.908] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:55:19.931] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:55:19.931] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:55:41.122] [jointLog] [info] done; [2019-01-29 09:55:41.122] [jointLog] [info] Index contained 80,511 targets; [2019-01-29 09:55:41.122] [stderrLog] [info] Done loading index. processed 0 Million fragments; hits: 161433, hits per frag: 0.32698. [2019-01-29 09:55:54.788] [alevinLog] [info] Starting optimizer; [2019-01-29 09:55:54.742] [jointLog] [info] Computed 6,346 rich equival",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:2747,Load,Loading,2747,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance,"4_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:23:49.875] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:23:49.875] [jointLog] [info] Starting optimizer; [2016-01-02 20:23:50.378] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 20:23:50.382] [jointLog] [info] iteration = 0 | max rel diff. = 64.9993; [2016-01-02 20:23:50.584] [jointLog] [info] iteration 50, recomputing effective lengths; [2016-01-02 20:23:53.386] [jointLog] [info] iteration = 100 | max rel diff. = 0.263028; [2016-01",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:8204,load,loading,8204,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['load'],['loading']
Performance,"51749 / 267548197.; [2018-12-05 15:12:25.126] [alevinLog] [info] Knee found left boundary at 11954 ; [2018-12-05 15:12:27.371] [alevinLog] [info] Gauss Corrected Boundary at 4345 ; [2018-12-05 15:12:27.371] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-12-05 15:12:27.371] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-05 15:12:27.494] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 15:12:27.880] [alevinLog] [info] Done populating Z matrix; [2018-12-05 15:12:27.952] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 15:12:27.952] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-05 15:12:27.952] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-05 15:12:29.321] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 15:12:29.216] [jointLog] [info] There are 2 libraries.; [2018-12-05 15:12:29.318] [jointLog] [info] Loading Quasi index; [2018-12-05 15:12:29.319] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 15:12:29.216] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 15:12:29.216] [alevinLog] [info] parsing read library format; [2018-12-05 15:12:29.949] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 15:12:30.141] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 15:12:30.181] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for further processing; [2018-12-05 15:45:46.198] [jointLog] [info] Counte",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:7006,Load,Loading,7006,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,"537; [00m[1m[2017-03-30 11:35:12.190] [jointLog] [info] iteration = 1107 | max rel diff. = 0.00948523; [00m[1m[2017-03-30 11:35:12.199] [jointLog] [info] Finished optimizer; [00m[1m[2017-03-30 11:35:12.199] [jointLog] [info] writing output . [00m[33m[1m[2017-03-30 11:38:26.886] [jointLog] [warning] NOTE: Read Lib [( /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz, /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz )] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/lib_format_counts.json for details. [00m**** Job ends ****; Thu Mar 30 11:38:30 EDT 2017; ```. ### SGE email example info. ```; Job-array task 110632.1 (step6-salmon_test5.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-066.cm.cluster; Host = compute-066.cm.cluster; Start Time = 03/29/2017 23:27:10; End Time = 03/30/2017 11:38:30; User Time = 06:08:32; System Time = 12:46:46; Wallclock Time = 12:11:20; CPU = 18:55:18; Max vmem = 6.961G; Exit Status = 0; ```. For some reason, sample 1 took quite a bit of time. Samples 2 and 3 were actually much faster:. sample 2:. ```; Job-array task 110632.2 (step6-salmon_test5.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-051.cm.cluster; Host = compute-051.cm.cluster; Start Time = 03/30/2017 00:22:20; End Time = 03/30/2017 03:33:24; User Time = 02:37:02; System Time = 02:55:26; Wallclock Time = 03:11:04; CPU = 05:32:28; Max vmem = 6.941G; Exit Status = 0; ```. sample 3:. ```; Job-array task 110632.3 (step6-salmon_test5.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-051.cm.cluster; Host = compute-051.cm.cluster; Start Time = 03/30/2017 03:33:38; End Time = 03/30/2017 05:58:33; User Time = 03:45:43; System Time = 00:37:55; Wallclock Time = 02:24:55; CPU = 04:23:38; Max vmem = 6.947G; Exit Status = 0; ```. Best,; Leo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:26323,Queue,Queue,26323,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,2,['Queue'],['Queue']
Performance,"55:37.303] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 22:55:37.303] [alevinLog] [info] Total 5238 white-listed Barcodes; [2018-07-19 22:55:37.675] [alevinLog] [info] Done populating Z matrix; [2018-07-19 22:55:37.683] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 22:55:37.683] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 22:55:37.683] [alevinLog] [info] Used Barcodes except Whitelist: 20705; [2018-07-19 22:55:38.386] [jointLog] [info] There is 1 library.; [2018-07-19 22:55:38.493] [jointLog] [info] Loading Quasi index; [2018-07-19 22:55:38.494] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 22:55:38.549] [jointLog] [info] done; [2018-07-19 22:55:38.549] [jointLog] [info] Index contained 179 targets. [2018-07-19 22:55:38.385] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 22:55:38.385] [alevinLog] [info] parsing read library format; [2018-07-19 22:55:38.495] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 22:55:38.498] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 22:55:38.499] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 22:55:38.500] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 22:55:38.501] [stderrLog] [info] Computing transcript lengths; [2018-07-19 22:55:38.501] [stderrLog] [info] Waiting to finish loading hash; processed 87 Million fragmentserrLog] [info] Done loading index; hits: 468892, hits per frag: 0.00535907. [2018-07-19 23:03:35.740] [jointLog] [info] Computed 150 rich equivalence classes for further processing; [2018-07-19 23:03:35.740] [jointLog] [info] Counted 412868 total reads in the equivalence classes ; [2018-07-19 23:03:35.741] [jointLog] [warning] Only 412868 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-07-19 23:03:35.741] [jointLog] [info] Mapping rate = 0.469385%. [2018-07-1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:2836,Load,Loading,2836,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,1,['Load'],['Loading']
Performance,"56,134 total reads; in the equivalence classes; [2020-06-16 00:00:59.673] [jointLog] [warning] 0.0736383% of fragments were; shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a; smaller k.; The minimum read size found was 1. [2020-06-16 00:00:59.673] [jointLog] [info] Number of mappings discarded; because of alignment score : 134,091,887; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments entirely; discarded because of alignment score : 2,429,390; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments discarded; because they are best-mapped to decoys : 0; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments discarded; because they have only dovetail (discordant) mappings to valid targets :; 1,360,397; [2020-06-16 00:00:59.673] [jointLog] [info] Mapping rate = 45.4405%. [2020-06-16 00:00:59.673] [jointLog] [info] finished quantifyLibrary(); [2020-06-16 00:00:59.673] [jointLog] [info] Starting optimizer; [2020-06-16 00:00:59.792] [jointLog] [info] Marked 0 weighted equivalence; classes as degenerate; [2020-06-16 00:00:59.819] [jointLog] [info] iteration = 0 | max rel diff. =; 8250.92; [2020-06-16 00:00:59.667] [fileLog] [info]; At end of round 0; ==================; Observed 28512328 total fragments (28512328 in most recent round). [2020-06-16 00:01:01.745] [jointLog] [info] iteration = 100 | max rel diff.; = 19.507; [2020-06-16 00:01:03.495] [jointLog] [info] iteration = 200 | max rel diff.; = 2.45489; [2020-06-16 00:01:05.225] [jointLog] [info] iteration = 300 | max rel diff.; = 3.459; [2020-06-16 00:01:06.968] [jointLog] [info] iteration = 400 | max rel diff.; = 4.38485; [2020-06-16 00:01:08.693] [jointLog] [info] iteration = 500 | max rel diff.; = 0.229724; [2020-06-16 00:01:10.426] [jointLog] [info] iteration = 600 | max rel diff.; = 0.242741; [2020-06-16 00:01:12.163] [jointLog] [info] iteration = 700 | max rel diff.; = 0.196958; [2020-06-16 00:01:14.015] [jointLog] [i",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228:2449,optimiz,optimizer,2449,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228,2,['optimiz'],['optimizer']
Performance,"563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 21.142 ms; -----------------------------------------; [2024-11-01 05:14:22.991] [jointLog] [info] done; [2024-11-01 05:14:23.016] [jointLog] [info] Index contained 252,149 targets. [2024-11-01 05:14:24.607] [jointLog] [info] Number of decoys : 194; [2024-11-01 05:14:24.607] [jointLog] [info] First decoy index : 251,913 ; [2024-11-01 05:14:29.425] [jointLog] [info] Automatically detected most likely library type as ISR. [A. [32mprocessed[31m 500,000 [32mfragments[0m; hits: 216,939, h",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:3655,Load,Loading,3655,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"5:58:27.617] [jointLog] [info] There is 1 library.; [2019-06-04 15:58:27.750] [jointLog] [info] Loading Quasi index; [2019-06-04 15:58:27.750] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 15:58:27.750] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 15:58:28.626] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 15:58:28.866] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 15:58:28.900] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 15:58:28.922] [stderrLog] [info] Computing transcript lengths; [2019-06-04 15:58:28.922] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 15:58:38.645] [jointLog] [info] done; [2019-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million fragments; processed 5 Million fragments; processed 5 Million fragments; hits: 0, hits per frag: 0. [2019-06-04 15:58:42.486] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2019-06-04 15:58:42.487] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2019-06-04 15:58:42.487] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2019-06-04 15:58:42.508] [jointLog] [info] Mapping rate = 0%. [2019-06-04 15:58:42.508] [jointLog] [info] finished quantifyLibrary(); [2019-06-04 15:58:42.519] [alevinLog] [info] Starting optimizer. [2019-06-04 15:58:43.232] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-06-04 15:58:43.232] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-06-04 15:58:43.237] [alevinLog] [info] Tota",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:2914,load,loading,2914,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['load'],['loading']
Performance,"5] [alevinLog] [info] # Barcodes Used: 74376522 / 74376522.; [2018-12-12 15:08:51.141] [alevinLog] [info] Done importing white-list Barcodes; [2018-12-12 15:08:51.141] [alevinLog] [warning] Skipping 1 Barcodes with 0 reads; Assuming this is the required behavior.; [2018-12-12 15:08:51.141] [alevinLog] [info] Total 95 white-listed Barcodes; [2018-12-12 15:08:51.144] [alevinLog] [info] Done populating Z matrix; [2018-12-12 15:08:51.146] [alevinLog] [info] Done indexing Barcodes; [2018-12-12 15:08:51.146] [alevinLog] [info] Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4321,Load,Loading,4321,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['Load'],['Loading']
Performance,"5] [alevinLog] [info] Total 31.0106% reads will be thrown away because of noisy Cellular barcodes.; [2018-12-06 11:16:54.985] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-06 11:16:55.059] [alevinLog] [info] Done True Barcode Sampling; [2018-12-06 11:16:55.395] [alevinLog] [info] Done populating Z matrix; [2018-12-06 11:16:55.453] [alevinLog] [info] Done indexing Barcodes; [2018-12-06 11:16:55.453] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-06 11:16:55.453] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06 11:45:12.188] [jointLog] [info] Counted 154,595,094 total reads in the equivalence classes ; [2018-12-06 11:45:12.188] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6354,Load,Loading,6354,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['Load'],['Loading']
Performance,"5_SRS936134_salmon_out; ```. But when I run the script there, it succeeds, without segfault. ```; [vale@ebi-003 salmon-problem]$ bash run_salmon.sh; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:17:29.867] [jointLog] [info] Starting optimizer; [2016-01-02 20:17:30.130] [jointL",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:1970,Load,Loading,1970,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"5a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.1.fastq.gz }; ### [ threads ] => { 8 }; ### [ recoverOrphans ] => { }; ### [ validateMappings ] => { }; ### [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { salmon.out }; Logs will be written to salmon.out/logs; [2021-03-29 16:21:11.395] [jointLog] [info] setting maxHashResizeThreads to 8; [2021-03-29 16:21:11.395] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-03-29 16:21:11.395] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-03-29 16:21:11.395] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-03-29 16:21:11.395] [jointLog] [info] parsing read library format; [2021-03-29 16:21:11.399] [jointLog] [info] There is 1 library.; [2021-03-29 16:21:11.496] [jointLog] [info] Loading pufferfish index; [2021-03-29 16:21:11.509] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 553.34 s; -----------------------------------------; size = 45242875; -----------------------------------------; | Loading contig offsets | Time = 14.76 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.0848 s; -----------------------------------------; /cromwell_root/script: line 103: 22 Killed salmon quant -i $refIndexDir --libType A -1 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.2.fastq.gz"" -2 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.1.fastq.gz"" -p",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641:3954,Load,Loading,3954,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641,1,['Load'],['Loading']
Performance,"6125; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { athal_index }; ### [ libType ] => { A }; ### [ mates1 ] => { data/DRR016125/DRR016125_1.fastq.gz }; ### [ mates2 ] => { data/DRR016125/DRR016125_2.fastq.gz }; ### [ threads ] => { 8 }; ### [ output ] => { quants/DRR016125_quant }; Logs will be written to quants/DRR016125_quant/logs; [2018-11-24 15:08:09.785] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-11-24 15:08:09.785] [jointLog] [info] parsing read library format; [2018-11-24 15:08:09.785] [jointLog] [info] There is 1 library.; [2018-11-24 15:08:09.877] [jointLog] [info] Loading Quasi index; [2018-11-24 15:08:09.877] [jointLog] [info] Loading 32-bit quasi index; [2018-11-24 15:08:09.877] [stderrLog] [info] Loading Suffix Array ; [2018-11-24 15:08:10.319] [stderrLog] [info] Loading Transcript Info ; [2018-11-24 15:08:10.423] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-24 15:08:10.432] [stderrLog] [info] There were 40,812 set bits in the bit array; [2018-11-24 15:08:10.435] [stderrLog] [info] Computing transcript lengths; [2018-11-24 15:08:10.435] [stderrLog] [info] Waiting to finish loading hash. quant_tut_samples.sh: line 2: 914 Segmentation fault: 11 salmon quant -i athal_index -l A -1 ${fn}/${samp}_1.fastq.gz -2 ${fn}/${samp}_2.fastq.gz -p 8 -o quants/${samp}_quant; (salmon) MacBook-Pro-2:salmon-tutorial brent$ `. **Desktop (please complete the following information):**. MacBook Pro (15-inch, 2016) macOS Sierra 10.12.6. **Additional context**; I appreciate any help you can offer and I apologize in advance if there's something obvious I should have read or known about. (it seems like the lines below that are preceded by ### are coming out in fold face. They are not meant to.)",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/317:2154,Load,Loading,2154,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/317,4,"['Load', 'load']","['Loading', 'loading']"
Performance,"6665; [2021-01-25 16:27:07.414] [alevinLog] [info] Used Barcodes except Whitelist: 3667; [2021-01-25 16:27:07.498] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2021-01-25 16:27:07.498] [alevinLog] [info] parsing read library format; [2021-01-25 16:30:54.542] [alevinLog] [info] Starting optimizer; [2021-01-25 16:30:54.782] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:54.782] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 1350278.00 UMI after deduplicating.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 30909 BiDirected Edges.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 8817 UniDirected Edges.; [2021-01-25 16:30:55.969] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-25 16:30:56.294] [alevinLog] [warning] Num High confidence barcodes too less 20 < 90.Can't performing whitelisting; Skipping; [2021-01-25 16:30:56.297] [alevinLog] [info] Finished optimizer. ## with `--exceptCells 7000`; > [2021-01-21 09:24:45.891] [alevinLog] [info] Found 43030 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); [2021-01-21 09:24:45.942] [alevinLog] [info] Filled with 43030 txp to gene entries; [2021-01-21 09:24:45.947] [alevinLog] [info] Found all transcripts to gene mappings; [2021-01-21 09:24:45.967] [alevinLog] [info] Processing barcodes files (if Present); [2021-01-21 09:33:35.885] [alevinLog] [info] Done barcode density calculation.; [2021-01-21 09:33:35.885] [alevinLog] [info] # Barcodes Used: 188934609 / 188934609.; [2021-01-21 09:33:37.337] [alevinLog] [info] Total 10016(has 1000 low confidence) barcodes; [2021-01-21 09:33:38.202] [alevinLog] [info] Done True Barcode Sampling; [2021-01-21 09:33:39.137] [alevinLog] [warning] Total **52.0343% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-21 09:33:39.960] [alevinLog] [info] Done p",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567:4055,perform,performing,4055,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567,1,['perform'],['performing']
Performance,"6665; [2021-01-25 16:27:07.414] [alevinLog] [info] Used Barcodes except Whitelist: 3667; [2021-01-25 16:27:07.498] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2021-01-25 16:27:07.498] [alevinLog] [info] parsing read library format; [2021-01-25 16:30:54.542] [alevinLog] [info] Starting optimizer; [2021-01-25 16:30:54.782] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:54.782] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 1350278.00 UMI after deduplicating.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 30909 BiDirected Edges.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 8817 UniDirected Edges.; [2021-01-25 16:30:55.969] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-25 16:30:56.294] [alevinLog] [warning] Num High confidence barcodes too less 20 < 90.Can't performing whitelisting; Skipping; [2021-01-25 16:30:56.297] [alevinLog] [info] Finished optimizer. ### with `--exceptCells 7000`; > [2021-01-21 09:24:45.891] [alevinLog] [info] Found 43030 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); [2021-01-21 09:24:45.942] [alevinLog] [info] Filled with 43030 txp to gene entries; [2021-01-21 09:24:45.947] [alevinLog] [info] Found all transcripts to gene mappings; [2021-01-21 09:24:45.967] [alevinLog] [info] Processing barcodes files (if Present); [2021-01-21 09:33:35.885] [alevinLog] [info] Done barcode density calculation.; [2021-01-21 09:33:35.885] [alevinLog] [info] # Barcodes Used: 188934609 / 188934609.; [2021-01-21 09:33:37.337] [alevinLog] [info] Total 10016(has 1000 low confidence) barcodes; [2021-01-21 09:33:38.202] [alevinLog] [info] Done True Barcode Sampling; [2021-01-21 09:33:39.137] [alevinLog] [warning] Total **52.0343% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-21 09:33:39.960] [alevinLog] [info] Done ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/620:4987,perform,performing,4987,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/620,1,['perform'],['performing']
Performance,"66; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[2017-03-29 23:59:18.699] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 23:59:18.721] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-30 00:43:17.278] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-30 00:43:17.237] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-30 00:43:17.273] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-30 02:37:54.437] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-30 03:48:21.310] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-30 04:20:16.735] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-30 04:54:34.486] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-30 04:54:34.487] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-30 05:09:36.706] [stderrLog] [info] Done loading index; [00m[1m[2017-03-30 05:09:36.706] [jointLog] [info] done; [00m[1m[2017-03-30 05:09:36.790] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 699833, hits per frag: 1.4138[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1395659, hits per frag: 1.40267",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:9851,Load,Loading,9851,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['Load'],['Loading']
Performance,"69.18 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 7.8427 ms; -----------------------------------------; -----------------------------------------; | Loading eq table | Time = 3.3896 s; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.8301 s; -----------------------------------------; size = 3567796961; Number of ones: 35010141; Number of ones per inventory item: 512; Inventory entries filled: 68380; -----------------------------------------; | Loading contig boundaries | Time = 11.288 s; -----------------------------------------; size = 3567796961; -----------------------------------------; | Loading sequence | Time = 7.763 s; -----------------------------------------; size = 2517492731; -----------------------------------------; | Loading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>6442720932; Index requested greater than vector's size: 6442720996>6442720932; Index requested greater than vector's size: 6442721060>6442720932; Index requested greater than vector's size: 6442721124>6442720932; Index requested greater than vector's size: 6442721188>6442720932; Index requested greater than vector's size: 6442721252>6442720932; Index requested greater than vector's size: 6442721316>6442720932; Index requested greater than vector's size: 6442721380>6442720932; Index requested greater than vector's size: 6442721444>6442720932; ...; ```. The index does not finish loading, and so salmon does not enter read quantification routines. **To Reproduce**. * ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:1708,Load,Loading,1708,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,1,['Load'],['Loading']
Performance,"709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 985.04 us; -----------------------------------------; [2023-02-23 09:40:13.935] [jointLog] [info] done; ```; (taken from the terminal as the logfile is empty, and the current time is 12:54 pm = >3 hr run time so far). **To Reproduce**; I ran the following command:. ```; salmon quant \; --geneMap Homo_sapiens.GRCh38.106.gtf \; --threads 6 \; --libType=ISR \; --index salmon_index \; -1 ACV_REP2_1_val_1.fq.gz -2 CV_REP2_2_val_2.fq.gz \; --seqBias --gcBias --posBias \; -o ACV_REP2; ```;",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:10157,Load,Loading,10157,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,77869[0m.; [2022-03-27 05:34:04.367] [alevinLog] [info] Throwing 0 barcodes with < 10 reads; [2022-03-27 05:34:05.069] [alevinLog] [info] Total [32m4000[0m(has [32m999[0m low confidence) barcodes; [2022-03-27 05:34:07.956] [alevinLog] [info] Done True Barcode Sampling; [2022-03-27 05:34:25.703] [alevinLog] [warning] Total 91.5531% reads will be thrown away because of noisy Cellular barcodes.; [2022-03-27 05:34:26.221] [alevinLog] [info] Done populating Z matrix; [2022-03-27 05:34:26.232] [alevinLog] [info] Total 60208 CB got sequence corrected; [2022-03-27 05:34:26.234] [alevinLog] [info] Done indexing Barcodes; [2022-03-27 05:34:26.234] [alevinLog] [info] Total Unique barcodes found: 127233006; [2022-03-27 05:34:26.234] [alevinLog] [info] Used Barcodes except Whitelist: 50131; [2022-03-27 05:34:26.966] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2022-03-27 05:34:26.966] [alevinLog] [info] parsing read library format; [2022-03-27 05:46:41.876] [alevinLog] [info] Starting optimizer. [2022-03-27 05:46:42.064] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2022-03-27 05:46:42.064] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2022-03-27 05:49:49.761] [alevinLog] [info] Total 535438.00 UMI after deduplicating.; [2022-03-27 05:49:49.761] [alevinLog] [info] Total 2317116 BiDirected Edges.; [2022-03-27 05:49:49.761] [alevinLog] [info] Total 867878 UniDirected Edges.; [2022-03-27 05:49:49.761] [alevinLog] [warning] Skipped 955 barcodes due to No mapped read; [2022-03-27 05:49:49.766] [alevinLog] [info] Clearing EqMap; Might take some time.; [2022-03-27 05:49:50.011] [alevinLog] [info] Starting white listing of 3044 cells; [2022-03-27 05:49:50.011] [alevinLog] [info] Starting to make feature Matrix; [2022-03-27 05:49:50.014] [alevinLog] [info] Done making feature Matrix; [2022-03-27 05:49:50.717] [alevinLog] [info] Finished white listing; [2022-03-27 05:49:51.422] [a,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/763#issuecomment-1082597942:3082,optimiz,optimizer,3082,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/763#issuecomment-1082597942,1,['optimiz'],['optimizer']
Performance,"7:40:15.733] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivalence classes . [2023-03-17 07:46:19.488] [jointLog] [warning] 0.22783% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smalle",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:7779,Load,Loading,7779,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,"8.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 75.428 ms; -----------------------------------------. [2021-09-20 16:22:03.730] [jointLog] [info] done; [2021-09-20 16:22:03.778] [jointLog] [info] Index contained 116,612 targets; [2021-09-20 16:22:03.892] [jointLog] [info] Number of decoys : 66; [2021-09-20 16:22:03.892] [jointLog] [info] First decoy index : 116,507 ; [2021-09-20 16:22:04.460] [jointLog] [info] Automatically detected most likely library type as U; processed 37,000,000 fragments; hits: 117,167,504; hits per frag: 3.1",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:5349,Load,Loading,5349,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"8.576] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 14.838 s; -----------------------------------------; size = 3401221626; -----------------------------------------; | Loading reference sequence | Time = 1.1113 s; -----------------------------------------; -----------------------------------------; | Loading reference ac",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:1924,Load,Loading,1924,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance,8.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 2.8044 ms; -----------------------------------------. [2023-11-30 09:37:51.026] [jointLog] [info] done; [2023-11-30 09:37:51.104] [jointLog] [info] Index contained 253166 targets; [2023-11-30 09:37:51.166] [jointLog] [info] Number of decoys : 194; [2023-11-30 09:37:51.166] [jointLog] [info] First decoy index : 252924 ; [2023-11-30 09:37:54.100] [jointLog] [info] Automatically detected most likely library type as ISR. [2023-11-30 09:38:33.382] [jointLog] [info] Thread saw mini-batch w,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:7147,Load,Loading,7147,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"84; [2019-01-29 09:55:04.882] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:55:04.882] [alevinLog] [info] parsing read library format; [2019-01-29 09:55:05.014] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:55:04.882] [jointLog] [info] There is 1 library.; [2019-01-29 09:55:05.012] [jointLog] [info] Loading Quasi index; [2019-01-29 09:55:05.013] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:55:06.105] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:55:09.968] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:55:16.908] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:55:19.931] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:55:19.931] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:55:41.122] [jointLog] [info] done; [2019-01-29 09:55:41.122] [jointLog] [info] Index contained 80,511 targets; [2019-01-29 09:55:41.122] [stderrLog] [info] Done loading index. processed 0 Million fragments; hits: 161433, hits per frag: 0.32698. [2019-01-29 09:55:54.788] [alevinLog] [info] Starting optimizer; [2019-01-29 09:55:54.742] [jointLog] [info] Computed 6,346 rich equivalence classes for further processing; [2019-01-29 09:55:54.742] [jointLog] [info] Counted 80,300 total reads in the equivalence classes ; [2019-01-29 09:55:54.754] [jointLog] [warning] Only 80300 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2019-01-29 09:55:54.754] [jointLog] [info] Mapping rate = 8.80342%. [2019-01-29 09:55:54.754] [jointLog] [info] finished quantifyLibrary(). Analyzed 289 cells (100% of all).; [2019-01-29 09:55:56.858] [alevinLog] [info] Total 72037 UMI after deduplicating.; [2019-01-29 09:55:56.858] [alevinLog] [warning] Skipped 151 barcodes due to No mapped read; [2019-01-29 09:55:56.876] [alevinLog] [info] Clearing EqMap; Might take some ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:3537,load,loading,3537,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['load'],['loading']
Performance,"866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading reference sequence | Time = 408.65 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 48.085 ms; -----------------------------------------; Exception : [boost::filesystem::status: File name too long: ""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_33-41/33-41_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_32-40/32-40_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P3_38-45_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_30-38/30-38_221020_L002_R1.fastq",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:11009,Load,Loading,11009,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"9-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million fragments; processed 5 Million fragments; processed 5 Million fragments; hits: 0, hits per frag: 0. [2019-06-04 15:58:42.486] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2019-06-04 15:58:42.487] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2019-06-04 15:58:42.487] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2019-06-04 15:58:42.508] [jointLog] [info] Mapping rate = 0%. [2019-06-04 15:58:42.508] [jointLog] [info] finished quantifyLibrary(); [2019-06-04 15:58:42.519] [alevinLog] [info] Starting optimizer. [2019-06-04 15:58:43.232] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-06-04 15:58:43.232] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-06-04 15:58:43.237] [alevinLog] [info] Total 0.00 UMI after deduplicating.; [2019-06-04 15:58:43.237] [alevinLog] [info] Total 0 BiDirected Edges.; [2019-06-04 15:58:43.237] [alevinLog] [info] Total 0 UniDirected Edges.; [2019-06-04 15:58:43.259] [alevinLog] [info] Finished optimizer; Floating point exception (core dumped); ```. Alevin fails to read the barcode, or something like that, from the whitelist, and there are no reads to be processed. If instead of running the `--whitelist` command I run the `--expectCells 50` command, the results are these:. ```; [2019-06-04 16:33:41.634] [alevinLog] [info] Found all transcripts to gene mappings; [2019-06-04 16:33:41.650] [alevinLog] [info] Processing barcodes files (if Present) . ; process",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:3803,optimiz,optimizer,3803,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['optimiz'],['optimizer']
Performance,": 713.683 normfactor: 1183.93; [2018-09-11 16:33:59.242] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-09-11 16:33:59.358] [alevinLog] [info] Done True Barcode Sampling; [2018-09-11 16:33:59.891] [alevinLog] [info] Done populating Z matrix; [2018-09-11 16:33:59.972] [alevinLog] [info] Done indexing Barcodes; [2018-09-11 16:33:59.972] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-09-11 16:34:30.116] [jointLog] [warning] Something seems to be wrong w",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:11182,Load,Loading,11182,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['Load'],['Loading']
Performance,": 713.683 normfactor: 1183.93; [2018-12-05 15:12:27.371] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-05 15:12:27.494] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 15:12:27.880] [alevinLog] [info] Done populating Z matrix; [2018-12-05 15:12:27.952] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 15:12:27.952] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-05 15:12:27.952] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-05 15:12:29.321] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 15:12:29.216] [jointLog] [info] There are 2 libraries.; [2018-12-05 15:12:29.318] [jointLog] [info] Loading Quasi index; [2018-12-05 15:12:29.319] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 15:12:29.216] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 15:12:29.216] [alevinLog] [info] parsing read library format; [2018-12-05 15:12:29.949] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 15:12:30.141] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 15:12:30.181] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for further processing; [2018-12-05 15:45:46.198] [jointLog] [info] Counted 163,106,139 total reads in the equivalence classes ; [2018-12-05 15:45:46.199] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 15",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:7248,Load,Loading,7248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,": Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.9.1; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/salmon_index }; ### [ libType ] => { A }; ### [ threads ] => { 8 }; ### [ mates1 ] => { /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/trimmed_reads/rluc_2_R1.fastq.gz }; ### [ mates2 ] => { /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/trimmed_reads/rluc_2_R2.fastq.gz }; ### [ output ] => { /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/salmon_output/rluc_2 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ geneMap ] => { /data/akalin/Base/Annotation/ce11/ENSEMBL91/Caenorhabditis_elegans.WBcel235.91.gtf }; Logs will be written to /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/salmon_output/rluc_2/logs; [2018-03-21 10:00:03.272] [jointLog] [info] parsing read library format; [2018-03-21 10:00:03.272] [jointLog] [info] There is 1 library.; [2018-03-21 10:00:03.517] [stderrLog] [info] Loading Suffix Array; [2018-03-21 10:00:03.501] [jointLog] [info] Loading Quasi index; [2018-03-21 10:00:03.506] [jointLog] [info] Loading 32-bit quasi index; [2018-03-21 10:00:03.846] [stderrLog] [info] Loading Transcript Info; [2018-03-21 10:00:03.980] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-03-21 10:00:03.995] [stderrLog] [info] There were 35448 set bits in the bit array; [2018-03-21 10:00:04.001] [stderrLog] [info] Computing transcript lengths; [2018-03-21 10:00:04.001] [stderrLog] [info] Waiting to finish loading hash; [2018-03-21 10:00:40.560] [stderrLog] [info] Done loading index; [2018-03-21 10:00:40.560] [jointLog] [info] done; [2018-03-21 10:00:40.560] [jointLog] [info] Index contained 35448 targets. terminate called after throwing an instance of 'terminate called recursively; std::length_error'; ```. Best,; Alex",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210:1329,Load,Loading,1329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210,7,"['Load', 'load']","['Loading', 'loading']"
Performance,":35.455] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-03 13:48:35.455] [alevinLog] [info] Used Barcodes except Whitelist: 4282; > [2020-06-03 13:48:35.558] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ...; > processed 52 Million fragments; > hits: 0, hits per frag: 0; > ; > [2020-06-03 13:49:37.892] [jointLog] [info] Computed 0 rich equivalence classes for further processing; > [2020-06-03 13:49:37.892] [jointLog] [info] Counted 0 total reads in the equivalence classes ; > [2020-06-03 13:49:37.893] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; > [2020-06-03 13:49:37.893] [jointLog] [warning] Found 370 reads with `N` in the UMI sequence and ignored the reads.; > Please report on github if this number is too large; > [2020-06-03 13:49:37.893] [jointLog] [info] Mapping rate = 0%; > ; > [2020-06-03 13:49:37.893] [jointLog] [info] finished quantifyLibrary(); > [2020-06-03 13:49:37.899] [alevinLog] [info] Starting optimizer; > ; > [2020-06-03 13:49:38.613] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:49:38.613] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:49:38.614] [alevinLog] [info] Total 0.00 UMI after deduplicating.; > [2020-06-03 13:49:38.614] [alevinLog] [info] Total 0 BiDirected Edges.; > [2020-06-03 13:49:38.614] [alevinLog] [info] Total 0 UniDirected Edges.; > [2020-06-03 13:49:38.614] [alevinLog] [warning] Skipped 348 barcodes due to No mapped read; > [2020-06-03 13:49:38.614] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-03 13:49:38.620] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 200.Can't performing whitelisting; Skipping; > [2020-06-03 13:49:38.620] [alevinLog] [info] Finished optimizer; > Floating point exception (core dumped); > `. Any suggestions on how to get this working are highly appreciated!. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531:6334,optimiz,optimizer,6334,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531,3,"['optimiz', 'perform']","['optimizer', 'performing']"
Performance,":37.914] [jointLog] [info] There is 1 library.; [2021-04-09 12:16:38.027] [jointLog] [info] Loading pufferfish index; [2021-04-09 12:16:38.027] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference sequence | Time = 240.84 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.9587 ms; -----------------------------------------; [2021-04-09 12:16:41.658] [jointLog] [info] done; [2021-04-09 12:16:41.658] [jointLog] [info] Index contained 45,375 targets; [2021-04-09 12:16:41.673] [jointLog] [info] Number of decoys : 1; [2021-04-09 12:16:41.673] [jointLog] [info] First decoy index : 45,374. [2021-04-09 12:16:42.811] [alevinLog] [info] Starting optimizer. [2021-04-09 12:16:42.800] [jointLog] [info] Computed 84 rich equivalence classes for further processing; [",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:5047,Load,Loading,5047,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,":54.759] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-05-20 10:53:54.760] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-05-20 10:53:54.760] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-20 10:53:54.760] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-20 10:53:54.760] [jointLog] [info] parsing read library format; [2021-05-20 10:53:54.760] [jointLog] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:1981,Load,Loading,1981,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,":55.681] [alevinLog] [info] # Barcodes Used: 31478936 / 31478936.; [2019-06-06 19:24:55.688] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-06 19:24:55.688] [alevinLog] [info] Done True Barcode Sampling; [2019-06-06 19:24:55.690] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-06 19:24:55.692] [alevinLog] [info] Done populating Z matrix; [2019-06-06 19:24:55.692] [alevinLog] [info] Done indexing Barcodes; [2019-06-06 19:24:55.692] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-06 19:24:55.692] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies us",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:1365,Load,Loading,1365,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['Load'],['Loading']
Performance,":jointLog] [info] Filter size not provided; estimating from number of distinct k-mers; [2021-12-31 11:26:38.852] [puff::index::jointLog] [info] ntHll estimated 239287090 distinct k-mers, setting filter size to 2^32; allowedIn: 21; Max Junction ID: 1394611; seen.size():11156897 kmerInfo.size():1394612; approximateContigTotalLength: 132160289; counters for complex kmers:; (prec>1 & succ>1)=181344 | (succ>1 & isStart)=714 | (prec>1 & isEnd)=800 | (isStart & isEnd)=42; contig count: 2077595 element count: 297242564 complex nodes: 182900; # of ones in rank vector: 2077594; [2021-12-31 11:28:32.554] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2021-12-31 11:28:32.554] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory /no_backup/indexes/salmon/mm10_gencode; size = 297242564; -----------------------------------------; | Loading contigs | Time = 135.18 ms; -----------------------------------------; size = 297242564; -----------------------------------------; | Loading contig boundaries | Time = 61.18 ms; -----------------------------------------; Number of ones: 2077594; Number of ones per inventory item: 512; Inventory entries filled: 4058; 2077594; [2021-12-31 11:28:33.532] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2021-12-31 11:28:33.566] [puff::index::jointLog] [info] contig count for validation: 2,077,594; [2021-12-31 11:28:34.693] [puff::index::jointLog] [info] Total # of Contigs : 2,077,594; [2021-12-31 11:28:34.693] [puff::index::jointLog] [info] Total # of numerical Contigs : 2,077,594; [2021-12-31 11:28:34.787] [puff::index::jointLog] [info] Total # of contig vec entries: 13,003,859; [2021-12-31 11:28:34.787] [puff::index::jointLog] [info] bits per offset entry 24; [2021-12-31 11:28:35.409] [puff::index::jointLog] [info] Done constructing the contig vector. 2077595; [2021-12-31 11:28:36.870] [puff::index::jointLog] [info] # segments = 2,077,594; [2",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003342883:2584,Load,Loading,2584,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003342883,1,['Load'],['Loading']
Performance,"; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:23:49.875] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:23:49.875] [jointLog] [info] Starting optimizer; [2016-01-02 20:23:50.378] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:7945,Load,Loading,7945,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:17:29.867] [jointLog] [info] Starting optimizer; [2016-01-02 20:17:30.130] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 20:17:30.136] [jointLog] [info] iteration = 0 | max rel diff. = 65.1271; [2016-01-02 20:17:30.315] [jointLog] [info] iteration 50, recomputing effective lengths; [2016-01-02 20:17:32.978] [jointLog] [info] iteration = 100 | max rel diff. = 0.259134; [2016-01-02 20:17:33.312] [jointLog] [info] iteration = 200 | max rel diff. = 0.136762; [201",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:2395,load,loading,2395,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['load'],['loading']
Performance,; ### [ output ] => { ./output }; ### [ allowOrphansFMD ] => { }; ### [ threads ] => { 16 }; ### [ incompatPrior ] => { 1e-20 }; ### [ biasSpeedSamp ] => { 1 }; ### [ fldMax ] => { 1000 }; ### [ fldMean ] => { 200 }; ### [ fldSD ] => { 80 }; ### [ forgettingFactor ] => { 0.65 }; ### [ maxOcc ] => { 200 }; ### [ maxReadOcc ] => { 100 }; ### [ numBiasSamples ] => { 2000000 }; ### [ numAuxModelSamples ] => { 5000000 }; ### [ numPreAuxModelSamples ] => { 1000000 }; ### [ numGibbsSamples ] => { 0 }; ### [ numBootstraps ] => { 0 }; ### [ vbPrior ] => { 0.001 }; Logs will be written to ./output/logs; [2018-08-16 19:47:14.418] [jointLog] [info] parsing read library format; [2018-08-16 19:47:14.418] [jointLog] [info] There is 1 library.; [2018-08-16 19:47:14.460] [stderrLog] [info] Loading Suffix Array ; [2018-08-16 19:47:14.459] [jointLog] [info] Loading Quasi index; [2018-08-16 19:47:14.459] [jointLog] [info] Loading 32-bit quasi index; [2018-08-16 19:47:15.044] [stderrLog] [info] Loading Transcript Info ; [2018-08-16 19:47:15.207] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-16 19:47:15.263] [stderrLog] [info] There were 173531 set bits in the bit array; [2018-08-16 19:47:15.285] [stderrLog] [info] Computing transcript lengths; [2018-08-16 19:47:15.285] [stderrLog] [info] Waiting to finish loading hash; [2018-08-16 19:47:20.808] [jointLog] [info] done; [2018-08-16 19:47:20.808] [jointLog] [info] Index contained 173531 targets; [2018-08-16 19:47:20.808] [stderrLog] [info] Done loading index. [A. [32mprocessed[31m 500002 [32mfragments[0m; hits: 2213374; hits per frag: 5.08859[A. [32mprocessed[31m 1000002 [32mfragments[0m; hits: 4422312; hits per frag: 4.78092[A. [32mprocessed[31m 1500006 [32mfragments[0m; hits: 6635818; hits per frag: 4.69843[A. [32mprocessed[31m 2000001 [32mfragments[0m; hits: 8846970; hits per frag: 4.55737[A. [32mprocessed[31m 2500021 [32mfragments[0m; hits: 11062734; hits per frag: 4.49592[A. [32mprocessed[31m 30,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271:24252,Load,Loading,24252,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271,1,['Load'],['Loading']
Performance,"; ### [ threads ] => { 8 }; ### [ validateMappings ] => { }; ### [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ recoverOrphans ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { SRR14506785.salmon.rmsk.out }; ### [ writeUnmappedNames ] => { }; Logs will be written to SRR14506785.salmon.rmsk.out/logs; [2023-09-28 04:51:02.450] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-09-28 04:51:02.450] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-09-28 04:51:02.450] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; --------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:2926,Load,Loading,2926,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l A \; -1 ~/results/trimmingSheng/${line}1.paired.fastq \; -2 ~/results/trimmingSheng/${line}2.paired.fastq --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_new/${line} --seqBias --gcBias. **Steps and data to reproduce the behavior: for version 0.12**; module load Cufflinks/2.2.1; gffread MSU7_all.gff3 -g all.chrs.fasta -w MSU7_newtranscript.fasta. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=50G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J index_Salmon. module load Salmon/0.12.0-IGB-gcc-8.2.0. salmon index -t ~/data/genome/MSU7_newtranscript.fasta -i ~/data/genome/MSU7new_transcript.index --type quasi -k 31. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l A \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_BLB/${line} --seqBias --gcBias --validateMappings. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l A \; -1 ~/results/trimmingSheng/${line}1.paired.fastq \; -2 ~/results/trimmingSheng/${line}2.paired.fastq --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_new/${line} --seqBias --gcBias --validateMappings. Specifically, please provide at least the following information:. * Which version of salmon was used?; Salmon/0.8.2-IGB-gcc-4.9.4-Python",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:3243,load,load,3243,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['load'],['load']
Performance,"; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2666,Load,Loadable,2666,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09:52:39.858] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report.**. [2016-07-11 09:52:39.858] [jointLog] [info] Mapping rate = 0%. [2016-07-11 09:52:39.858] [jointLog] [info] finished quantifyLibrary(); [2016-07-11 09:52:39.858] [jointLog] [info] Starting optimizer; [2016-07-11 09:52:39.894] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-07-11 09:52:39.895] [jointLog] [info] iteration = 0 | max rel diff. = -1.79769e+308; [2016-07-11 09:52:39.921] [jointLog] [info] iteration = 50 | max rel diff. = -1.79769e+308; [2016-07-11 09:52:39.932] [jointLog] [info] Finished optimizer; [2016-07-11 09:52:39.932] [jointLog] [info] writing output ; ```. I am not exactly sure where the problem is. The output file is created, but all the transcripts are '0'. Any ideas, what was done wrong?. thanks. Assa. PS.; this is how I have indexed the data. `salmon index -t Homo_sapiens.GRCh38.rel79.cdna.all.fa -i Homo_sapiens.GRCh38.rel79 --type quasi -k 31 -p 24`. it is is also important.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:2365,optimiz,optimizer,2365,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,2,['optimiz'],['optimizer']
Performance,"; [2018-07-19 22:55:37.675] [alevinLog] [info] Done populating Z matrix; [2018-07-19 22:55:37.683] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 22:55:37.683] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 22:55:37.683] [alevinLog] [info] Used Barcodes except Whitelist: 20705; [2018-07-19 22:55:38.386] [jointLog] [info] There is 1 library.; [2018-07-19 22:55:38.493] [jointLog] [info] Loading Quasi index; [2018-07-19 22:55:38.494] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 22:55:38.549] [jointLog] [info] done; [2018-07-19 22:55:38.549] [jointLog] [info] Index contained 179 targets. [2018-07-19 22:55:38.385] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 22:55:38.385] [alevinLog] [info] parsing read library format; [2018-07-19 22:55:38.495] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 22:55:38.498] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 22:55:38.499] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 22:55:38.500] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 22:55:38.501] [stderrLog] [info] Computing transcript lengths; [2018-07-19 22:55:38.501] [stderrLog] [info] Waiting to finish loading hash; processed 87 Million fragmentserrLog] [info] Done loading index; hits: 468892, hits per frag: 0.00535907. [2018-07-19 23:03:35.740] [jointLog] [info] Computed 150 rich equivalence classes for further processing; [2018-07-19 23:03:35.740] [jointLog] [info] Counted 412868 total reads in the equivalence classes ; [2018-07-19 23:03:35.741] [jointLog] [warning] Only 412868 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-07-19 23:03:35.741] [jointLog] [info] Mapping rate = 0.469385%. [2018-07-19 23:03:35.741] [jointLog] [info] finished quantifyLibrary(); [2018-07-19 23:03:35.755] [alevinLog] [info] Starting optimizer. Analyzed 5238 ce",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:2975,Load,Loading,2975,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,1,['Load'],['Loading']
Performance,"; [2018-12-12 15:08:51.141] [alevinLog] [warning] Skipping 1 Barcodes with 0 reads; Assuming this is the required behavior.; [2018-12-12 15:08:51.141] [alevinLog] [info] Total 95 white-listed Barcodes; [2018-12-12 15:08:51.144] [alevinLog] [info] Done populating Z matrix; [2018-12-12 15:08:51.146] [alevinLog] [info] Done indexing Barcodes; [2018-12-12 15:08:51.146] [alevinLog] [info] Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] [info] Thread saw mini-batch with a maximum of 5.48% zero probability fragments. [2018-12-12 15:12:07.721] [jointLog] [info] Computed 173,36",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4459,Load,Loading,4459,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['Load'],['Loading']
Performance,"; [2019-06-23 18:11:52.383] [alevinLog] [info] Done True Barcode Sampling; [2019-06-23 18:11:52.489] [alevinLog] [warning] Total 91.1983% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-23 18:11:52.507] [alevinLog] [info] Done populating Z matrix; [2019-06-23 18:11:52.507] [alevinLog] [info] Done indexing Barcodes; [2019-06-23 18:11:52.507] [alevinLog] [info] Total Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: 26644540, hits per frag: 0.249194. [2019-06-23 18:14:43.418] [jointLog] [info] Computed 90,673 rich equivalence classes for further processing; [2019-06-23 18:14:43.418] [jointLog] [info] Counted 5,043,781 total reads in the equivalence classes ; [2019-06-23 18:14:43.419]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5283,Load,Loading,5283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance,"; [2021-04-20 10:11:46.842] [jointLog] [info] iteration = 1,000 | max rel diff. = 2.40606; [2021-04-20 10:11:47.548] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.715333; [2021-04-20 10:11:48.250] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.181266; [2021-04-20 10:11:48.938] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.152511; [2021-04-20 10:11:49.636] [jointLog] [info] iteration = 1,400 | max rel diff. = 0.11611; [2021-04-20 10:11:50.315] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.482892; [2021-04-20 10:11:51.013] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.0388567; [2021-04-20 10:11:51.673] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.518366; [2021-04-20 10:11:52.333] [jointLog] [info] iteration = 1,800 | max rel diff. = 0.117083; [2021-04-20 10:11:53.007] [jointLog] [info] iteration = 1,900 | max rel diff. = 0.306961; [2021-04-20 10:11:53.694] [jointLog] [info] iteration = 2,000 | max rel diff. = 0.078216; [2021-04-20 10:11:54.354] [jointLog] [info] iteration = 2,100 | max rel diff. = 1.17575; [2021-04-20 10:11:54.521] [jointLog] [info] iteration = 2,125 | max rel diff. = 0.00514978; [2021-04-20 10:11:54.541] [jointLog] [info] Finished optimizer; [2021-04-20 10:11:54.541] [jointLog] [info] writing output. [2021-04-20 10:11:54.750] [jointLog] [info] Computing gene-level abundance estimates; [2021-04-20 10:11:54.845] [jointLog] [info] There were 77689 transcripts mapping to 26673 genes; [2021-04-20 10:11:54.846] [jointLog] [info] NOTE: We recommend using tximport (https://bioconductor.org/packages/release/bioc/html/tximport.html) for aggregating transcript-level salmon abundance estimates to the gene level. It is more versatile, exposes more features, and allows considering multi-sample information during aggregation.; [2021-04-20 10:11:55.040] [jointLog] [info] Aggregating expressions to gene level; [2021-04-20 10:11:55.126] [jointLog] [info] done; ````. So, are there some bugs in version 0.14.1 ?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:8780,optimiz,optimizer,8780,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['optimiz'],['optimizer']
Performance,"; observed = }; Library format { type:paired end, relative orientation:inward, strandedness:(sense, antisense) }; observed = Library format { type:paired end, relative orientation:inward, strandedness:(antisense, sense) }; expected = Library format { type:observed = Library format { type: }; paired endLibrary format { type:paired end, relative orientation:, relative orientation:inward, strandedness:(sense, antisense) }; observed = Library format { type:paired end, relative orientation:inward, strandedness:observed = inward, strandedness:(antisense, sense) }; (antisense, sense) }paired end, relative orientation:inward, strandedness:(antisense, sense) }; expected = Library format { type:paired end, relative orientation:inward, strandedness:(sense, antisense)expected = Library format { type:Library format { type:; }paired endpaired endexpected = Library format { type:paired end, relative orientation:; , relative orientation:inwardinward, strandedness:(sense, antisense)observed = , strandedness:(antisense, sense) }; }; observed = Library format { type:paired end, relative orientation:inward, strandedness:(antisense, sense) }expected = Library format { type:, relative orientation:Library format { type:paired end; ```. and so on... It seems that the [`LibraryFormat` class](https://github.com/COMBINE-lab/salmon/blob/a6a4fe0dcf71674a59eb901d5ec6933df40de7f2/src/LibraryFormat.cpp#L52) is performing this check, and that the string format method is producing all of this output on stderr. . I believe that the Salmon index I'm using contains some transcript sequences from the ""wrong"" strand, and it would be helpful if the program gave information about the observed mapping (maybe just the transcript sequence ID) so that I could track down the error during index generation. . It also seems that all of the above error output contains no line terminators, although maybe this has been fixed in a more recent version. ```; -bash-4.1$ salmon --version; version : 0.4.0; ```. cc @jmerkin",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/16:2078,perform,performing,2078,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/16,1,['perform'],['performing']
Performance,"; salmon quant -p 16 --biasCorrect --libType IU -i ~./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ --numBootstraps 100 -o $base <(zcat ${base}_1.fastq.gz ) <(zcat ${base}_2.fastq.gz); Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0 ; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 16 }; # [ biasCorrect ] => { }; # [ libType ] => { IU }; # [ index ] => { ./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ }; # [ numBootstraps ] => { 100 }; # [ output ] => { 61LP1AAXX_8 } ; # [ ] => { /dev/fd/63 }; # [ ] => { /dev/fd/62 }; Logs will be written to 61LP1AAXX_8/logs; there is 0[2016-07-11 09:51:45.206] [jointLog] [info] parsing read library format; lib; Loading 32-bit quasi index[2016-07-11 09:51:45.328] [jointLog] [info] Loading Quasi index; [2016-07-11 09:51:45.736] [stderrLog] [info] Loading Suffix Array; [2016-07-11 09:51:45.771] [stderrLog] [info] Loading Position Hash; [2016-07-11 09:52:13.781] [stderrLog] [info] Loading Transcript Info; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09:52:39.858] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:1092,Load,Loading,1092,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,1,['Load'],['Loading']
Performance,"= 5315.17; [2020-09-05 17:54:33.041] [jointLog] [info] iteration = 100 | max rel diff. = 19.0781; [2020-09-05 17:55:12.013] [jointLog] [info] iteration = 200 | max rel diff. = 14.788; [2020-09-05 17:55:49.642] [jointLog] [info] iteration = 300 | max rel diff. = 1.29965; [2020-09-05 17:56:27.111] [jointLog] [info] iteration = 400 | max rel diff. = 12.8157; [2020-09-05 17:57:04.974] [jointLog] [info] iteration = 500 | max rel diff. = 5.26288; [2020-09-05 17:57:42.449] [jointLog] [info] iteration = 600 | max rel diff. = 3.19907; [2020-09-05 17:58:19.892] [jointLog] [info] iteration = 700 | max rel diff. = 1.79807; [2020-09-05 17:58:57.376] [jointLog] [info] iteration = 800 | max rel diff. = 3.00673; [2020-09-05 17:59:35.303] [jointLog] [info] iteration = 900 | max rel diff. = 0.498694; [2020-09-05 18:00:12.798] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.426497; [2020-09-05 18:00:51.071] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.0656976; [2020-09-05 18:01:28.449] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.066711; [2020-09-05 18:02:05.812] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.0878689; [2020-09-05 18:02:43.251] [jointLog] [info] iteration = 1,400 | max rel diff. = 0.136252; [2020-09-05 18:03:20.628] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.086622; [2020-09-05 18:03:58.141] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.294687; [2020-09-05 18:04:36.652] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.0428479; [2020-09-05 18:05:14.956] [jointLog] [info] iteration = 1,800 | max rel diff. = 0.207862; [2020-09-05 18:05:53.140] [jointLog] [info] iteration = 1,900 | max rel diff. = 0.0591381; [2020-09-05 18:06:05.915] [jointLog] [info] iteration = 1,935 | max rel diff. = 0.00844302; [2020-09-05 18:06:05.977] [jointLog] [info] Finished optimizer; [2020-09-05 18:06:05.977] [jointLog] [info] writing output ; ```. Any suggestions or ideas to increase my mapping rate would be much appreciated!!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/571:5645,optimiz,optimizer,5645,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/571,1,['optimiz'],['optimizer']
Performance,"=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; (gdb); #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:93; #7 __destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:103; #8 _Destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:126; #9 _Destroy<std::thread*, std::thread> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:151; #10 std::vector<std::thread, std::allocator<std::thread> >::~vector (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_vector.h:424; #11 0x00000000007a5fde in cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<ch",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:13196,optimiz,optimized,13196,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,2,['optimiz'],['optimized']
Performance,"=========; Observed 42829220 total fragments (42829220 in most recent round). [2022-05-13 03:02:14.185] [jointLog] [info] Computed 384,282 rich equivalence classes for further processing; [2022-05-13 03:02:14.185] [jointLog] [info] Counted 27,069,942 total reads in the equivalence classes ; [2022-05-13 03:02:14.202] [jointLog] [info] Number of mappings discarded because of alignment score : 262,747,517; [2022-05-13 03:02:14.202] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 2,776,678; [2022-05-13 03:02:14.202] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2022-05-13 03:02:14.202] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 1,099,008; [2022-05-13 03:02:14.202] [jointLog] [info] Mapping rate = 63.2044%. [2022-05-13 03:02:14.202] [jointLog] [info] finished quantifyLibrary(); [2022-05-13 03:02:14.226] [jointLog] [info] Starting optimizer; [2022-05-13 03:02:14.308] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2022-05-13 03:02:14.325] [jointLog] [info] iteration = 0 | max rel diff. = 10590.7; [2022-05-13 03:02:15.594] [jointLog] [info] iteration = 100 | max rel diff. = 16.0264; [2022-05-13 03:02:16.882] [jointLog] [info] iteration = 200 | max rel diff. = 7.78855; [2022-05-13 03:02:18.217] [jointLog] [info] iteration = 300 | max rel diff. = 1.68712; [2022-05-13 03:02:19.507] [jointLog] [info] iteration = 400 | max rel diff. = 5.00889; [2022-05-13 03:02:20.812] [jointLog] [info] iteration = 500 | max rel diff. = 10.9087; [2022-05-13 03:02:22.073] [jointLog] [info] iteration = 600 | max rel diff. = 0.162723; [2022-05-13 03:02:23.316] [jointLog] [info] iteration = 700 | max rel diff. = 0.125884; [2022-05-13 03:02:24.647] [jointLog] [info] iteration = 800 | max rel diff. = 0.611449; [2022-05-13 03:02:26.020] [jointLog] [info] iteration = 900 | max rel diff. = 0.0687607; [2022-05-13 03:02:2",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775:1640,optimiz,optimizer,1640,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775,1,['optimiz'],['optimizer']
Performance,"=> { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[2017-03-29 23:59:18.699] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 23:59:18.721] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-30 00:43:17.278] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-30 00:43:17.237] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-30 00:43:17.273] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-30 02:37:54.437] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-30 03:48:21.310] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-30 04:20:16.735] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-30 04:54:34.486] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-30 04:54:34.487] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-30 05:09:36.706] [stderrLog] [info] Done loading index; [00m[1m[2017-03-30 05:09:36.706] [jointLog] [info] done; [00m[1m[2017-03-30 05:09:36.790] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 699833, hits per frag: 1.4138[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1395659, hits per frag: 1.40267[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 2097294, hits per frag: 1.40287[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2794766, hits per frag: 1.40089[A. [32mprocessed[31m 2500000 [32mfragments[0m; hits: 3489235, hits per frag: 1.39849[A. [32mprocessed[31m 3000000 [32mfragments",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:10163,Load,Loading,10163,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['Load'],['Loading']
Performance,"=> { }; ### [ gcBias ] => { }; ### [ posBias ] => { }; ### [ softclip ] => { }; ### [ allowDovetail ] => { }; ### [ recoverOrphans ] => { }; ### [ numBootstraps ] => { 10 }; ### [ output ] => { mapped/salmon_03 }; Logs will be written to mapped/salmon_03/logs; [2024-05-03 15:09:51.221] [jointLog] [info] setting maxHashResizeThreads to 64; [2024-05-03 15:09:51.221] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-05-03 15:09:51.221] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-05-03 15:09:51.221] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-05-03 15:09:51.221] [jointLog] [info] parsing read library format; [2024-05-03 15:09:51.221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; ---------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:5847,Load,Loading,5847,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,"> And for us, who have blocked download on a computational cluster `cmake` silently continues even when `scripts/fetchRapMap.sh` failed (see error code `403` below). Dists downloading their own dependencies is also forbidden in package managers such as FreeBSD ports and pkgsrc (which is cross-platform and I personally use on Mac, NetBSD, and RHEL). Trusting upstream scripts to pull stuff off the Internet is a security risk, so the package managers perform and validate (via checksum) all downloads in a separate stage. It would be nice not to have to hack out the download code from a build system in order to create and maintain a package.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-989326040:452,perform,perform,452,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-989326040,1,['perform'],['perform']
Performance,"> Hi @austin-abbvie,; > ; > Thanks for the report. Would you be able to share the offending BAM file and reference? I'm also tagging @gmarcais for input / ideas.; > ; > Thanks,; > Rob. I'll have to check with my manager to see if this is something I'm allowed to do. I also just attempted to use the --noErrorModel instead of --ont, but now I'm getting a `segmentation fault (core dumped)` after about 2M reads. These BAMs have been through a lot so I'm going to check to make sure they haven't been corrupted in some way. Here's an output from Picard's ValidateSamFile; ```; WARNING 2021-07-01 08:12:30 ValidateSamFile NM validation cannot be performed without the reference. All other validations will still occur.; INFO 2021-07-01 08:12:48 SamFileValidator Seen many non-increasing record positions. Printing Read-names as well. ## HISTOGRAM java.lang.String; Error Type Count; ERROR:MISSING_READ_GROUP 1; WARNING:RECORD_MISSING_READ_GROUP 1085776; ```. After adding a dummy read group to one of my bam files using Picard's AddOrReplaceReadGroups, I was able to successfully quantify my file using the --ont error model. I'll repeat this for the lot to see if this solves the problem!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872314305:644,perform,performed,644,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872314305,1,['perform'],['performed']
Performance,> I have the same issue. None of the conda version works on my Linux Centos.; > Is there any library to add in the conda recipe to fix the issue ?. Similar issue here too with salmon 1.4.0 installed via conda in a clean environment; `salmon: error while loading shared libraries: libtbb.so.2: cannot open shared object file: No such file or directory`. Edit: apparently solved by downgrading `tbb` as suggested in https://www.biostars.org/p/494922/,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-802737580:254,load,loading,254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-802737580,1,['load'],['loading']
Performance,"> Thanks again @alexvpickering, just pushed a fix. Confirm that .mtx.gz file is loading properly now. Thanks again!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-503787604:80,load,loading,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-503787604,1,['load'],['loading']
Performance,"> Yes that's one aspect. But also, Salmon uses CIGAR to evaluate alignment probability in alignment quantification mode no?. Indeed. > And with just RapMap output you would lose other information that Salmon uses to determine likely fragment assignment?. You would lose information (in the format of a CIGAR string) that Salmon uses in alignment mode, but not any information, I think, that Salmon uses in quasi-mapping-based mode (though one would incur a non-trivial performance hit for filtering the quasi-mappings through file / disk rather than dealing with them directly in memory as Salmon normally does). > With UMI's you can deduplicate fragments before inferring where they were likely to come from. Ideally you would deduplicate the reads directly based on UMI, then you wouldn't have to think about PCR duplication in the quantification. But of course keeping a hash of all reads in a FASTQ and accounting for dequencing errors wouldn't be really tractable.. I guess this is the real question I have. Specifically, what is the true computational burden to detect and eliminate duplicates using UMIs? In theory, the reads must (1) map to the same location and (2) have the same UMI tag. How often would one expect the UMI tag to be modified / corrupted / etc.? Would you have to search all 1 or 2 hamming distance neighbors to detect duplicates reliably? Is an equivalence class a sufficient proxy for ""mapping to the same location"", or do we also care that e.g. the position of the fragment within each transcript is a duplicate as well? These are the main questions that are preventing me from implementing the ""obvious solution"".",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269001682:469,perform,performance,469,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269001682,1,['perform'],['performance']
Performance,"> You mean like cloud services to perform the DE analysis? It‚Äôs always possible to round the non-integer counts to the nearest integer. However, reliable abundance estimation tools (e.g. RSEM) have been around long enough now that it‚Äôs worth pushing any cloud service you might be using to properly deal with these types of inputs. We do differential analysis quite commonly with DESeq2, and salmon -> tximport -> DESeq2 is a quite low-friction solution. I noticed that now salmon can export the quant.gene.sf file if I add the parameters""-g xx.gtf"". What's difference between this file and the result of tximport? Can I use the result to replace tximport?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-1535046180:34,perform,perform,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-1535046180,1,['perform'],['perform']
Performance,"> quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[2017-03-29 23:59:18.699] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 23:59:18.721] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-30 00:43:17.278] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-30 00:43:17.237] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-30 00:43:17.273] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-30 02:37:54.437] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-30 03:48:21.310] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-30 04:20:16.735] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-30 04:54:34.486] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-30 04:54:34.487] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-30 05:09:36.706] [stderrLog] [info] Done loading index; [00m[1m[2017-03-30 05:09:36.706] [jointLog] [info] done; [00m[1m[2017-03-30 05:09:36.790] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 699833, hits per frag: 1.4138[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1395659, hits per frag: 1.40267[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 2097294, hits per frag: 1.40287[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 27947",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:10001,Load,Loading,10001,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['Load'],['Loading']
Performance,"> { 16 }; ### [ validateMappings ] => { }; ### [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ recoverOrphans ] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { salmon.standard/sample }; Logs will be written to salmon.standard/sample/logs; [2024-11-01 05:13:59.563] [jointLog] [info] setting maxHashResizeThreads to 16; [2024-11-01 05:13:59.563] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-11-01 05:13:59.563] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-11-01 05:13:59.563] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-11-01 05:13:59.563] [jointLog] [info] parsing read library format; [2024-11-01 05:13:59.563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; --------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:2770,Load,Loading,2770,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"> { 9998.quant_se2 }; Logs will be written to 9998.quant_se2/logs; [2023-03-17 07:40:15.733] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-03-17 07:40:15.733] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivale",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:7567,Load,Loading,7567,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,"> { salmon.out }; Logs will be written to salmon.out/logs; [2021-03-29 16:21:11.395] [jointLog] [info] setting maxHashResizeThreads to 8; [2021-03-29 16:21:11.395] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-03-29 16:21:11.395] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-03-29 16:21:11.395] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-03-29 16:21:11.395] [jointLog] [info] parsing read library format; [2021-03-29 16:21:11.399] [jointLog] [info] There is 1 library.; [2021-03-29 16:21:11.496] [jointLog] [info] Loading pufferfish index; [2021-03-29 16:21:11.509] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 553.34 s; -----------------------------------------; size = 45242875; -----------------------------------------; | Loading contig offsets | Time = 14.76 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.0848 s; -----------------------------------------; /cromwell_root/script: line 103: 22 Killed salmon quant -i $refIndexDir --libType A -1 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.2.fastq.gz"" -2 ""/cromwell_root/fc-secure-519db2bc-049f-43a0-ab75-a2eb9c2cb059/6a6c9b92-3026-47d3-8944-60f0842c566e/samToFastqTest/5f578d2f-7e74-4402-955a-4d4623b83ead/call-samToFastq/GTEX-111CU-0526-SM-5EGHK.1.fastq.gz"" -p 8 --recoverOrphans --validateMappings --gcBias --seqBias --rangeFactorizationBins 4 --output salmon.out; + salmonRet=137; + echo 'AEDWIP in time salmonRet='; AEDWIP in time salmonRet=; + '[' 137 -eq 0 ']'; + echo 'Salmon ERROR code 137'; Salmon ERROR code 137; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641:4376,Load,Loading,4376,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641,1,['Load'],['Loading']
Performance,">>>>>>>>>>>>>>>>; Reference = [reference.masked.genome.fa]; Query = [/nfs/no_backup/transcriptome_seqs/Mus_musculus_GENCODE_v25_GRCm38.fa]; Kmer size = 16; Window size = 5; Segment length = 500 (read split allowed); Alphabet = DNA; Percentage identity threshold = 80%; Mapping output file = mashmap.out; Filter mode = 1 (1 = map, 2 = one-to-one, 3 = none); Execution threads = 8; >>>>>>>>>>>>>>>>>>; INFO, skch::Sketch::build, minimizers picked from reference = 843543544; INFO, skch::Sketch::index, unique minimizers = 276648625; INFO, skch::Sketch::computeFreqHist, Frequency histogram of minimizers = (1, 141685574) ... (2606547, 1); INFO, skch::Sketch::computeFreqHist, With threshold 0.001%, ignore minimizers occurring >= 7361 times during lookup.; INFO, skch::main, Time spent computing the reference index: 549.706 sec; INFO, skch::Map::mapQuery, [count of mapped reads, reads qualified for mapping, total input reads] = [111965, 112131, 142604]; INFO, skch::main, Time spent mapping the query : 17487.5 sec; INFO, skch::main, mapping results saved in : mashmap.out; [4/10] Extracting intervals from mashmap alignments; [5/10] Merging the intervals; [6/10] Extracting sequences from the genome; [7/10] Concatenating to get decoy sequences; [8/10] Making gentrome; [9/10] Extracting decoy sequence ids; [10/10] Removing temporary files; ```. Check the decoys:; ```; head /no_backup/indexes/salmon/gencode_mm10_unzip/decoys.txt ; GL456210.1; GL456367.1; chrX; chrY; GL456221.1; JH584304.1; GL456378.1; GL456211.1; JH584296.1; JH584300.1; ```. Check that the decoys are there in the `gentrome.fa`; ```; zgrep "">GL456210.1"" /no_backup/indexes/salmon/gencode_mm10_unzip/gentrome.fa ; >GL456210.1; ```. and then index with :; ```; salmon index -t /no_backup/indexes/salmon/gencode_mm10_unzip/gentrome.fa \; -i /no_backup/indexes/salmon/mm10_gencode \; -d /no_backup/indexes/salmon/gencode_mm10_unzip/decoys.txt \; -k 29 --threads 8 --gencode; ```; the job is in the queue now, I'll keep you posted.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003335885:2494,queue,queue,2494,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003335885,1,['queue'],['queue']
Performance,"?**; No; **Describe the bug**; Running salmon 0.11.3, quasi mode, with 192M of ram.; Salmon quasi mode aborted with following message:; processed 14,000,000 fragmentsntLog] [info] Automatically detected most likely library type as SR; hits: 108,161,934; hits per frag: 8.53594terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; This happens when using a gffread-created transcripts.fa. Salmon built the index that have 309,566 targets. Do I just need more RAM? Or it is a bug.; ; More info as below:; [2018-10-24 11:14:15.505] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-24 11:14:15.505] [jointLog] [info] parsing read library format; [2018-10-24 11:14:15.505] [jointLog] [info] There is 1 library.; [2018-10-24 11:14:15.627] [jointLog] [info] Loading Quasi index; [2018-10-24 11:14:15.629] [jointLog] [info] Loading 32-bit quasi index; [2018-10-24 11:14:15.633] [stderrLog] [info] Loading Suffix Array; [2018-10-24 11:14:17.090] [stderrLog] [info] Loading Transcript Info; [2018-10-24 11:14:17.691] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-24 11:14:18.293] [stderrLog] [info] There were 309,566 set bits in the bit array; [2018-10-24 11:14:18.819] [stderrLog] [info] Computing transcript lengths; [2018-10-24 11:14:18.820] [stderrLog] [info] Waiting to finish loading hash; [2018-10-24 11:15:46.171] [jointLog] [info] done; [2018-10-24 11:15:46.171] [jointLog] [info] Index contained 309,566 targets; [2018-10-24 11:15:46.171] [stderrLog] [info] Done loading index. **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * Which version of salmon was used? 0.11.3; * How was salmon installed (compiled, downloaded executable, through bioconda)?. downloaded execitable. * Which reference (e.g. transcriptome) was used?; human; * Which read files were used?; * Which which program options were used?; Al",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/304:1072,Load,Loading,1072,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/304,1,['Load'],['Loading']
Performance,"@SFonsecaCosta,. Yes, the file is called `duplicate_clusters.tsv` and it is in the directory where the salmon *index* resides. The reason this is created is that when transcripts are sequence identical to each other, they cannot be independently quantified ‚Äî that is, they are inferentially indistinguishable. So, the default strategy is to keep one representative from each indistinguishable cluster and to record the rest in the `duplicate_clusters` file. If you want to force salmon to quantify the duplicates (they should all just get equal abundance of 1 / D where D is the number of duplicates), you can pass `--keepDuplicates` when building the salmon index. When you quantify with alignments performed by STAR, no such duplicate removal is done by STAR upstream, and so all of the sequence identical transcripts are retained.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/803#issuecomment-1263826925:700,perform,performed,700,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/803#issuecomment-1263826925,1,['perform'],['performed']
Performance,"@ctb ‚Äî One thing that would be required for this (apart from some engineering of the command-line parsing / validation code) is a trustworthy, efficient, _multithreaded_ `FAST(A/Q)` parser for interleaved format reads. Right now, Salmon (& Sailfish, &RapMap, & most of the other HTS-centric methods we're developing) use the Jellyfish 2 read parser. I've made this choice since it's fairly simple to use, yet provides nice parallel performance and, most importantly, is fairly well-tested and trust-worthy. Can you suggest a reliable, well-tested, concurrency-enabled library for parsing reads in interleaved format?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152827801:432,perform,performance,432,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152827801,4,"['concurren', 'perform']","['concurrency-enabled', 'performance']"
Performance,"@k3yavi That seems to have fixed it, but I did get a warning at the end:. ```; [2018-09-18 15:18:46.675] [alevinLog] [info] Finished optimizer; [2018-09-18 15:18:46.697] [jointLog] [warning] NOTE: Read Lib [./read-I1_si-AGGGACTG_lane-001-chunk-001.fastq.gz, ./read-I1_si-AGGGACTG_lane-002-chunk-000.fastq.gz, ./read-I1_si-AGGGACTG_lane-003-chunk-003.fastq.gz, ./read-I1_si-AGGGACTG_lane-004-chunk-002.fastq.gz, ./read-I1_si-CCTCTAAC_lane-001-chunk-001.fastq.gz, ./read-I1_si-CCTCTAAC_lane-002-chunk-000.fastq.gz, ./read-I1_si-CCTCTAAC_lane-003-chunk-003.fastq.gz, ./read-I1_si-CCTCTAAC_lane-004-chunk-002.fastq.gz, ./read-I1_si-GACAGGCT_lane-001-chunk-001.fastq.gz, ./read-I1_si-GACAGGCT_lane-002-chunk-000.fastq.gz, ./read-I1_si-GACAGGCT_lane-003-chunk-003.fastq.gz, ./read-I1_si-GACAGGCT_lane-004-chunk-002.fastq.gz, ./read-I1_si-TTATCTGA_lane-001-chunk-001.fastq.gz, ./read-I1_si-TTATCTGA_lane-002-chunk-000.fastq.gz, ./read-I1_si-TTATCTGA_lane-003-chunk-003.fastq.gz, ./read-I1_si-TTATCTGA_lane-004-chunk-002.fastq.gz] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: ../../alevin_15_pc/lib_format_counts.json for details; ```; Is this ok to ignore?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294#issuecomment-422564822:133,optimiz,optimizer,133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294#issuecomment-422564822,1,['optimiz'],['optimizer']
Performance,"@macmanes ‚Äî Heng's code is very well-tested, but afaik, completely serialized. Of course, that's nothing that we couldn't handle internally by throwing the reported reads into our concurrent queue. Actually, I think that the Jellyfish 2 parser (for a single `FAST(A/Q)` file) would be easy to make work in this context. The trick is to require that the read ""batches"" always end on an even-indexed boundary, so that we never have an (interleaved) read pair spit across batch boundaries. I'm not sure how easy or difficult that is to enforce. I might just ask Guillaume about the best way to enforce this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152828484:180,concurren,concurrent,180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152828484,2,"['concurren', 'queue']","['concurrent', 'queue']"
Performance,"@rob-p - How much effort would it be to run a DP with tracing of the alignment? I remember reading that Brian Bushnell managed to fit everything into the CPU cache for BBMap's alignment algorithm, at least for regular read lengths, so the performance impact should be acceptable if done right. Not sure about licenses, but I think there was an optional native C implementation for it in his code base. This would be great to have so the SAM can be used for e.g. basic genotyping for QC purposes. Alternatively, maybe add a line to the docs of --writeMappings to make sure everyone understands the read alignments will have a score and position, but lack actual alignment and appear as if they were perfect matches.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/491#issuecomment-1204244129:158,cache,cache,158,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/491#issuecomment-1204244129,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"@roryk I don't think an R package is the right answer :) . My real motivation is to load into Degust: http://www.vicbioinformatics.com/degust/. It can be done with simple Unix cut/paste or with a python script too. But I don't want to depend on R for the pipeline, or even littler. @vals I'll take a look at your script, but still be better if part of Salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/77#issuecomment-240556885:84,load,load,84,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/77#issuecomment-240556885,2,['load'],['load']
Performance,"@vals, it shouldn't be a coverage issue, at least as compared to previous versions of Salmon. Hopefully we'll have a chance to look at this soon and see if we can figure out what might be causing the performance ""regression"" when `--useVBOpt` is enabled. As @dcjones suggests, we haven't really seen any performance degradation with the VB option in our other testing, so I suspect something characteristic of this dataset. @dcjones; it's great to see you drop by! I'm actually looking for a reasonable collection of datasets to do (automated) regression testing on new releases of salmon --- something to replace my fairly simple and manual existing regression tests. I'd greatly appreciate any suggestions or advice you may have about this! Such tests will become even more useful as we're experimenting with a few inference approaches and it would be great to have a reasonable spread of data to see the effects of different strategies.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-112224408:200,perform,performance,200,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-112224408,4,['perform'],['performance']
Performance,"A bit delayed, but this relates to the questions I've been asking on the salmon gitter. . First, it's worth pointing out that the new 10x (v2) sequencing is a lot more like other bead methods, where (i) index reads (i7/i5) are for labelling biological samples (ii) read1 contains the combined cell and molecular/UMI barcodes (ii) read2 is the transcript 3' read. So it seems there is now some data format convergence. Either way, I'd guess that ongoing iterations of the high throughput platforms will keep one read for the transcript 3', reserving the other 2 or 3 reads for some combination of the sample, cell and molecular barcodes. . Before thinking about how to best collapse UMIs, there's also the issue of how best to QC the barcodes and beads. Jim Namesh has [some functions](http://mccarrolllab.com/wp-content/uploads/2016/03/Drop-seqAlignmentCookbookv1.2Jan2016.pdf); as does [Vasilis Ntranos](https://github.com/pachterlab/scRNA-Seq-TCC-prep/blob/master/README.md). Arguably this has nothing to do with salmon/kallisto though I think the kallisto guys were smart to include it. It's a good filter even if only for speeding things up. Then it's really what might be the most appropriate demultiplexing of fastqs to allow compatibility between tecnhiques, I guess. I quite like how the kallisto workflow ends up with a fastq per cell together with a matching UMI file. Then at the very least one can ignore the UMIs (perhaps going with what @vals suggests). Not sure if that's helpful. But thought to chime in as somebody we would love to see salmon working on the high throughput single-cell platforms that have sample, cell and molecular barcodes. Even if only to test how worthwhile UMIs genuinely are for most applications. This may be a controversial comment, but I suspect for me UMIs will largely end up the same way as spike-ins: useful for quantifying endogenous RNA recovered per cell but perhaps not all that useful beyond that for low read depth single-cell signature profiling.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-265619589:1606,throughput,throughput,1606,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-265619589,1,['throughput'],['throughput']
Performance,"A. [32mprocessed[31m 70000000 [32mfragments[0m; hits: 87005981, hits per frag: 1.24303[A. [32mprocessed[31m 70500000 [32mfragments[0m; hits: 87631613, hits per frag: 1.24309[A. [32mprocessed[31m 71000000 [32mfragments[0m; hits: 88257540, hits per frag: 1.24315[A. [32mprocessed[31m 71500000 [32mfragments[0m; hits: 88882417, hits per frag: 1.2432[A. [32mprocessed[31m 72000000 [32mfragments[0m; hits: 89501627, hits per frag: 1.24316[A. [32mprocessed[31m 72500000 [32mfragments[0m; hits: 90123272, hits per frag: 1.24317. [1m[2017-03-07 17:20:23.878] [jointLog] [info] Computed 502158 rich equivalence classes for further processing; [00m[1m[2017-03-07 17:20:23.878] [jointLog] [info] Counted 29351922 total reads in the equivalence classes ; [00m[1m[2017-03-07 17:20:23.883] [jointLog] [info] Mapping rate = 40.2691%. [00m[1m[2017-03-07 17:20:23.883] [jointLog] [info] finished quantifyLibrary(); [00m[1m[2017-03-07 17:20:23.943] [jointLog] [info] Starting optimizer; [00m[1m[2017-03-07 17:20:25.002] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [00m[1m[2017-03-07 17:20:25.395] [jointLog] [info] iteration = 0 | max rel diff. = 41.1005; [00m[1m[2017-03-07 17:21:08.165] [jointLog] [info] iteration = 100 | max rel diff. = 0.102245; [00m[1m[2017-03-07 17:22:01.050] [jointLog] [info] iteration = 200 | max rel diff. = 0.0530265; [00m[1m[2017-03-07 17:22:45.312] [jointLog] [info] iteration = 300 | max rel diff. = 0.0489765; [00m[1m[2017-03-07 17:23:12.877] [jointLog] [info] iteration = 400 | max rel diff. = 0.026371; [00m[1m[2017-03-07 17:23:37.183] [jointLog] [info] iteration = 500 | max rel diff. = 0.0212965; [00m[1m[2017-03-07 17:24:04.277] [jointLog] [info] iteration = 600 | max rel diff. = 0.0183011; [00m[1m[2017-03-07 17:24:42.607] [jointLog] [info] iteration = 700 | max rel diff. = 0.0209044; [00m[1m[2017-03-07 17:25:22.112] [jointLog] [info] iteration = 800 | max rel diff. = 0.0152222; [00m[1m[20",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:18087,optimiz,optimizer,18087,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['optimiz'],['optimizer']
Performance,"APSa16_1P.fq.gz }; ### [ mates2 ] => { /media/usr/trimmed_fastq_files/PAIRED_trimmed_fastq_files/APSa16_2P.fq.gz }; ### [ threads ] => { 7 }; ### [ output ] => { /media/usr/quantification/APSa16.fq.gz_quant }; Logs will be written to /media/usr/quantification/APSa16.fq.gz_quant/logs; [2020-05-05 09:19:06.171] [jointLog] [info] setting maxHashResizeThreads to 7; [2020-05-05 09:19:06.171] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-05 09:19:06.171] [jointLog] [info] parsing read library format; [2020-05-05 09:19:06.171] [jointLog] [info] There is 1 library.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading pufferfish index; [2020-05-05 09:19:06.278] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 30.609 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 1.3312 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.6842 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 20.002 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021:1429,Load,Loading,1429,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021,1,['Load'],['Loading']
Performance,"ARTID, parent_tidptr=0x7ffebe5e89d0, tls=0x7ffebe5e8700, child_tidptr=0x7ffebe5e89d0) = 14677; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/sa.bin"", O_RDONLY) = 4; clock_gettime(CLOCK_REALTIME, {1491424830, 149197282}) = 0; read(4, ""l\n\221\21\0\0\0\0k\n\221\21\373\25\343\20\17\254\r\1\36\27\227\n\37\371\270\4\250\210\307\f""..., 8191) = 8191; mmap(NULL, 1342177280, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7ffe2e5e8000; munmap(0x7ffe2e5e8000, 1342177280) = 0; mmap(NULL, 1344270336, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7ffe2e3e9000; munmap(0x7ffe2e3e9000, 94208) = 0; munmap(0x7ffe7e400000, 1998848) = 0; [1m[2017-04-05 16:40:30.149] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-04-05 16:40:30.069] [jointLog] [info] Loading Quasi index; [00m[1m[2017-04-05 16:40:30.139] [jointLog] [info] Loading 32-bit quasi index; [00mread(4, ""\16'w=\r\320m\306\0\35\26\306\0\224\23\270\10\205]D\0|\3!\4c_-\7\310O\2""..., 1178864057) = 1178864057; close(4) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/txpInfo.bin"", O_RDONLY) = 4; clock_gettime(CLOCK_REALTIME, {1491424833, 297142816}) = 0; read(4, ""\315\5\3\0\0\0\0\0|\0\0\0\0\0\0\0ENST00000456328.""..., 8191) = 8191; read(4, ""RP4-669L17.8-001|RP4-669L17.8|12""..., 8191) = 8191; read(4, "".2|LINC01128-004|LINC01128|874|l""..., 8191) = 8191; read(4, ""THUMT00000097991.1|AGRN-002|AGRN""..., 8191) = 8191; read(4, ""HUMG00000001412.6|OTTHUMT0000000""..., 8191) = 8191; read(4, ""F3L-007|CPSF3L|1868|protein_codi""..., 8191) = 8191; read(4, ""01413.3|OTTHUMT00000004082.2|AUR""..., 8191) = 8191; read(4, ""UMT00000001363.3|ATAD3A-001|ATAD""..., 8191) = 8191; read(4, ""DK11B-202|CDK11B|2490|protein_co""..., 8191) = 8191; read(4, ""00002763.1|GNB1-002|GNB1|1512|re""..., 8191) = 8191; read(4, ""20-006|FAAP20|569|protein_coding""..., 819",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:167402,Load,Loading,167402,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['Load'],['Loading']
Performance,"Add [inDropv2 protocol](https://www.nature.com/articles/nprot.2016.154) to salmon alevin. To use this protocol pass the `--indropV2` flag. The details of library preparation can be seen [here](https://teichlab.github.io/scg_lib_structs/methods_html/inDrop.html). R1 is the biological read and R2 is the metadata read. Briefly, the reads have 8-11 bp barcode1, followed by a `W1` sequence which should be specified using `--w1` flag then 8bp barcode2 and 6 bp UMI sequence follows. . Summary of changes:; 1. `--indropV2` flag added to process indropV2 reads; 2. a local copy of single cell protocol is created before barcodes and UMI are extracted to allow share the positions and avoid searching twice; 3. In case the barcode1 is less than 11bp, `A` is added after joining barcodes 1 and 2 to make the total length 19 bp; 4. If no exact match for w1 is found, a search for w1 with a hamming distance <=2 is performed. It was tested for correlation on run SRR7165069 from GEO submission [GSM3141960](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM3141960).; Results:; ![image](https://user-images.githubusercontent.com/12998572/133622734-9b473318-fb39-421d-a322-b018f93ac139.png). ```; Min. 1st Qu. Median Mean 3rd Qu. Max. ; 0.3634 0.8981 0.9655 0.9307 0.9874 0.9976 ; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/703:907,perform,performed,907,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/703,1,['perform'],['performed']
Performance,"After generating issue #48, I took the recommendation of switching to the standard EM algorithm, but I'm having further problems. However, I don't think the problem was with the Variational EM algorithm, but an issue with how the dataset is behaving. . This is with the same dataset as before (single end, rRNA-depleted, second-strand protocol, extreme depth of 170M+ reads). I have the options --useFSPD and --biasCorrect turned on with library type ""SF""; the full call is . ```; salmon quant -i $SALMON_DIR -l SF -r <(gzip -c -d $IN_FILE) -o $OUTPUT \; --numBootstraps 100 --useFSPD --geneMap $GENES \; --biasCorrect -p 59; ```. I had attempted to use wasabi and run sleuth, but I got an error where the number of transcripts passing the initial filter was ""NA"". I then discovered that for four samples, many of the transcripts had ""-nan"" generated for the ""NumReads"" column, and this led to all of them having ""-nan"" for the TPM column. One sample had ~100 that failed, but the other three had a variable 106K-109K out of 176K total transcripts fail. No warning or error was thrown during the quantifying or EM optimization steps, so I don't know what happened. Interesting, I should note that the NaNs are only generated when both biasCorrect and useFSPD are turned on. NaNs are not generated when I use only one or neither option. (this was only tested with one sample though). If you have immediate suggestions, that would be great. Otherwise, I can work on generating a test dataset.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/50:1114,optimiz,optimization,1114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/50,1,['optimiz'],['optimization']
Performance,Ah so what's happening is alevin is keeping around 500 low confidence CB for performing downstream whitelisting.; `[2021-12-10 15:28:09.434] [alevinLog] [info] Total 1501(has 500 low confidence) barcodes`,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/739#issuecomment-1022395566:77,perform,performing,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/739#issuecomment-1022395566,1,['perform'],['performing']
Performance,Awesome! Thank you so much for the detailed report and for finding this data that exposed this strange (but interesting) performance case. We'll fold these improvements into the next release as well.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637601951:121,perform,performance,121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637601951,1,['perform'],['performance']
Performance,"B_INCLUDE_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY; TBB_LIBRARY-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY_DEBUG; TBB_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY_DIRS; TBB_LIBRARY_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_MALLOC_LIBRARY; TBB_MALLOC_LIBRARY-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_MALLOC_LIBRARY_DEBUG; TBB_MALLOC_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; ```. Also, here's the output of every hardware/OS reporting command I can think of:. ```; $ cat /proc/cpuinfo; processor : 0; vendor_id : GenuineIntel; cpu family : 6; model : 63; model name : Intel(R) Xeon(R) CPU E5-2623 v3 @ 3.00GHz; stepping : 2; microcode : 0x36; cpu MHz : 3300.000; cache size : 10240 KB; physical id : 0; siblings : 8; core id : 0; cpu cores : 4; apicid : 0; initial apicid : 0; fpu : yes; fpu_exception : yes; cpuid level : 15; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36; clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc; arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqd; q dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4; _2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb tpr_sh; adow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm x; saveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts; bugs :; bogomips : 5985.57; clflush size : 64; cache_alignment : 64; address sizes : 46 bits physical, 48 bits virtual; power management:; ...; [And 7 more cores]; $ uname -a; Linux salomon24 4.4.0-51-generic #72-Ubuntu SMP Thu Nov 24 18:29:54 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux; $ lsb_release -d; Description: Ubuntu 16.04.1 LTS; ```. lshw output: [salomon24-lshw.txt](https://github.com/COMBINE-lab/salmon/files/650904/salomon24-lshw.txt)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266953657:1819,cache,cache,1819,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266953657,1,['cache'],['cache']
Performance,"Barcodes Used: 287883370 / 287983348.; [2019-01-28 21:07:57.808] [alevinLog] [info] Done importing white-list Barcodes; [2019-01-28 21:07:58.273] [alevinLog] [warning] Skipping 290359 Barcodes with 0 reads; Assuming this is the required behavior.; [2019-01-28 21:07:58.517] [alevinLog] [info] Total 446921 white-listed Barcodes; [2019-01-28 21:09:02.029] [alevinLog] [info] Done populating Z matrix; [2019-01-28 21:09:02.331] [alevinLog] [info] Done indexing Barcodes; [2019-01-28 21:09:02.331] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-28 21:09:02.331] [alevinLog] [info] Used Barcodes except Whitelist: 168781; [2019-01-28 21:09:02.559] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-28 21:09:02.559] [alevinLog] [info] parsing read library format; [2019-01-28 21:40:44.514] [alevinLog] [info] Starting optimizer. [2019-01-28 22:05:50.958] [alevinLog] [info] Total 39006157.00 UMI after deduplicating.; [2019-01-28 22:05:50.960] [alevinLog] [warning] Skipped 160108 barcodes due to No mapped read; [2019-01-28 22:11:23.270] [alevinLog] [info] Finished optimizer. [2019-01-28 21:40:30.445] [jointLog] [info] Computed 64,654 rich equivalence classes for further processing; [2019-01-28 21:40:30.445] [jointLog] [info] Counted 107,408,832 total reads in the equivalence classes; [2019-01-28 21:40:30.446] [jointLog] [warning] Found 39484 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-28 21:40:30.446] [jointLog] [info] Mapping rate = 37.2969%. [2019-01-28 21:40:30.446] [jointLog] [info] finished quantifyLibrary(); [2019-01-28 21:40:44.514] [alevinLog] [info] Starting optimizer. Analyzed 446921 cells (100% of all).; [2019-01-28 22:05:50.958] [alevinLog] [info] Total 39006157.00 UMI after deduplicating.; [2019-01-28 22:05:50.960] [alevinLog] [warning] Skipped 160108 barcodes due to No mapped read; [2019-01-28 22:11:23.270] [alevinLog] [info] Finished optimizer. ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:8218,optimiz,optimizer,8218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,3,['optimiz'],['optimizer']
Performance,"C 1; | #define HAVE_ENCODER_IA64 1; | #define HAVE_ENCODER_ARM 1; | #define HAVE_ENCODER_ARMTHUMB 1; | #define HAVE_ENCODER_SPARC 1; | #define HAVE_DECODER_LZMA1 1; | #define HAVE_DECODER_LZMA2 1; | #define HAVE_DECODER_DELTA 1; | #define HAVE_DECODER_X86 1; | #define HAVE_DECODER_POWERPC 1; | #define HAVE_DECODER_IA64 1; | #define HAVE_DECODER_ARM 1; | #define HAVE_DECODER_ARMTHUMB 1; | #define HAVE_DECODER_SPARC 1; | #define HAVE_MF_HC3 1; | #define HAVE_MF_HC4 1; | #define HAVE_MF_BT2 1; | #define HAVE_MF_BT3 1; | #define HAVE_MF_BT4 1; | #define HAVE_CHECK_CRC32 1; | #define HAVE_CHECK_CRC64 1; | #define HAVE_CHECK_SHA256 1; | #define ASSUME_RAM 128; | #define PACKAGE ""xz""; | #define VERSION ""5.2.2""; | /* end confdefs.h. */; | ; | int; | main (); | {; | ; | ;; | return 0;; | }; configure:5259: error: in `/Users/jeremybono/Downloads/salmon-1.10.1/external/xz-5.2.2':; configure:5261: error: C compiler cannot create executables; See `config.log' for more details. ## ---------------- ##; ## Cache variables. ##; ## ---------------- ##. ac_cv_build=arm-apple-darwin22.6.0; ac_cv_env_CCASFLAGS_set=; ac_cv_env_CCASFLAGS_value=; ac_cv_env_CCAS_set=; ac_cv_env_CCAS_value=; ac_cv_env_CC_set=set; ac_cv_env_CC_value=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_env_CFLAGS_set=set; ac_cv_env_CFLAGS_value=; ac_cv_env_CPPFLAGS_set=set; ac_cv_env_CPPFLAGS_value=; ac_cv_env_CPP_set=; ac_cv_env_CPP_value=; ac_cv_env_LDFLAGS_set=set; ac_cv_env_LDFLAGS_value=; ac_cv_env_LIBS_set=; ac_cv_env_LIBS_value=; ac_cv_env_LT_SYS_LIBRARY_PATH_set=; ac_cv_env_LT_SYS_LIBRARY_PATH_value=; ac_cv_env_build_alias_set=; ac_cv_env_build_alias_value=; ac_cv_env_host_alias_set=; ac_cv_env_host_alias_value=; ac_cv_env_target_alias_set=; ac_cv_env_target_alias_value=; ac_cv_host=arm-apple-darwin22.6.0; ac_cv_path_install='/usr/bin/install -c'; ac_cv_prog_AWK=awk; ac_cv_prog_ac_ct_CC=/Library/Developer/CommandLineTools/usr/bin/cc; ac_cv_prog_make_make_set=yes; am_cv_make_support_nested_variables=ye",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/912:7995,Cache,Cache,7995,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/912,1,['Cache'],['Cache']
Performance,"CMake caches some information during the build in `CMakeCache.txt` (I think) so you probably have to delete that, or your build directory, and then start again.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186697657:6,cache,caches,6,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186697657,1,['cache'],['caches']
Performance,"CTGCCAGGTCGCTGTCCGAGATGCCGCCTGTggggggg; [...]; >sampletag11G; GTTGTCAAGATGCTACCGTTCAGAGGGTTGGCTCAGAGGCCCCAGGCTGCGGACGTCGTCGGACTCGCGT; >sampletag12G; GTTGTCAAGATGCTACCGTTCAGAGCTGGGTGCCTGGTCGGGTTACGTCGGCCCTCGGGTCGCGAAGGTC; ```. 2. Added the sample tag names to the end of decoy file; ```; [user@remote]$ tail -n 15 m.musculus_decoys.txt; GL456368.1; MU069434.1; JH584295.1; sampletag1G; sampletag2G; [...]; sampletag12G; ```. 3. Created the index; ```; salmon index -t m.mus_gentrome.fa.gz -d m.musculus_decoys.txt -p 12 -i m.mus_salmon_index¬†--gencode; ```. 4. Aligned the 4 fastq files from the first cartridge (2 Lanes, each with one R1 and one R2); ```; salmon alevin -l ISR -1 Library1_WTA_S1_L00*_R1_001.fastq -2 Library1_WTA_S1_L00*_R2_001.fastq -i reference_genome/m.musculus/m.mus_salmon_index -p 10 --whitelist reference_genome/m.musculus/bd_rhapsody_barcode.txt -o alevin_output --umi-geometry '1[53-60]' --bc-geometry '1[1-9,22-30,44-52]' --read-geometry '2[1-end]' --tgMap reference_genome/m.musculus/txp2gene_2.tsv; ```. In which:; `whitelist` is a file containing possible CBs (I have not added anything related to sample tags here); `txp2gene` is a file that I did not change anything also. 5. Loaded the output in R with `ReadAlevin` from `SeuratWrappers`. ### **My issue**; I expected to have information for each cell (CB) which sampletag was present in its reads (vide page 20, figure 13 of the [Handbook](https://scomix.bd.com/hc/article_attachments/9315606097549/23-21713_03__BD_Single-Cell_Multiomics_Bioinformatics_Handbook_EN.pdf)); <img width=""792"" alt=""image"" src=""https://github.com/COMBINE-lab/salmon/assets/67844695/da2ceba4-3c33-4296-9608-87dc4f6e642a"">. This information however is not present in the SeuratObject neither in the alevin_output directory (as seen by `grep -r ""sample""` not returning anything). Can you help me out with this? I am not sure why I don't have any reads mapping to the sampletags and have tried everything I could think of. Kind regards,; Igor",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/850:2971,Load,Loaded,2971,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/850,1,['Load'],['Loaded']
Performance,"Confirmed with v0.6.0:. ```; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { ... }; # [ libType ] => { IU }; # [ mates1 ] => { ... }; # [ mates2 ] => { ... }; # [ output ] => {... }; # [ threads ] => { 16 }; Logs will be written to ...; there is 1 lib; [2016-01-22 17:59:17.894] [jointLog] [info] parsing read library format; Loading 32-bit quasi index[2016-01-22 17:59:18.735] [stderrLog] [info] Loading Suffix Array; [2016-01-22 17:59:18.736] [stderrLog] [info] Loading Position Hash; [2016-01-22 17:59:18.731] [jointLog] [info] Loading Quasi index; [2016-01-22 18:00:59.879] [stderrLog] [info] Loading Transcript Info; [2016-01-22 18:01:25.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-22 18:01:30.642] [stderrLog] [info] There were 552702 set bits in the bit a; [2016-01-22 18:01:31.487] [stderrLog] [info] Computing transcript lengths; [2016-01-22 18:01:31.491] [stderrLog] [info] Waiting to finish loading hash; Index contained 552702 targets; [2016-01-22 18:04:43.717] [jointLog] [info] done; [2016-01-22 18:04:43.717] [stderrLog] [info] Done loading index; ```. I'll check the index creation logs, but didn't notice anything out of the ordinary...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174082911:520,Load,Loading,520,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174082911,8,"['Load', 'load']","['Loading', 'loading']"
Performance,"Cov: 166.8 normfactor: 2759.5; [2018-12-05 16:31:50.571] [alevinLog] [info] Total 3856(has 998 low confidence) barcodes; [2018-12-05 16:31:50.638] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 16:31:50.935] [alevinLog] [info] Done populating Z matrix; [2018-12-05 16:31:51.000] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 16:31:51.000] [alevinLog] [info] Total Unique barcodes found: 3825581; [2018-12-05 16:31:51.000] [alevinLog] [info] Used Barcodes except Whitelist: 138266; [2018-12-05 16:31:51.087] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 16:31:51.087] [alevinLog] [info] parsing read library format; [2018-12-05 16:31:51.087] [jointLog] [info] There are 2 libraries.; [2018-12-05 16:31:51.161] [jointLog] [info] Loading Quasi index; [2018-12-05 16:31:51.162] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 16:31:51.164] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 16:31:51.808] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 16:31:51.960] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 16:31:52.001] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 16:31:52.022] [stderrLog] [info] Computing transcript lengths; [2018-12-05 16:31:52.022] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 16:31:56.025] [stderrLog] [info] Done loading index; [2018-12-05 16:31:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the equivalence classes ; [2018-12-05 16:57:31.421] [jointLog] [warning] 0.000112378% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the in",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:12760,Load,Loading,12760,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,"Damn. There are random numbers, but even setting the seed, the multi-threaded nature of almost all steps leads to non-deterministic behavior. The behavior you describe sounds like some sort of race condition that gets triggered depending on when threads get to different parts of the code. I couldn't get the hanging with the other dataset over multiple (~10) runs. So even if it's completely non-deterministic you seem to be getting it with higher frequency in your system. Is it always in the Gibbs phase? One question / thought, did salmon fetch and build the Intel TBB dependency, or are you using a system version?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266951967:63,multi-thread,multi-threaded,63,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266951967,2,"['multi-thread', 'race condition']","['multi-threaded', 'race condition']"
Performance,"Dear @callumparr,. Thank you for bringing this up. So you are correct that the `--noLengthCorrection` flag should be passed to salmon when quantifying data that does not have a ""fragmentation effect"", that is, where the number of fragments we expect to draw from a transcript is not dependent upon the length of that transcript. In the ONT protocols, it is usually the case that we get 1 read -> 1 transcript, even if we don't read the whole thing. We have tested the effect of this in ONT data with spike ins, and have verified that using `--noLengthCorrection` does generally lead to improved accuracy with respect to quantification estimates. We have informed ONT of this, and I would guess they may optimize the flags that are used soon (we have also developed an error model that works correctly for these long reads, and that should make it into the next release of salmon). Regarding the effect this has on the `NumReads` values reported by salmon, it's not as simple as with the `TPM` estimates. The length affects the assigned reads through the probabilistic model on which inference is done. With the length effect we have that P(f | t_i) ‚àù P( position | f, t_i ) * P( alignment | f, t_i) --- forgetting the alignment term for the time being, we have that with length correction P( position | f, t_i ) ‚àù 1 / l_i and without length correction the l_i term goes away. In other words, the probability of allocating reads has a term that depends on the effective length when the `--noLengthCorrection` flag is not passed, but that term goes away when it is passed. This is not quite as drastic as with TPM where the normalization includes the length directly in the normalization (note, however, that when the `--noLengthCorrection` flag is passed, this adjusts the TPM as well). Further, the `NumReads` is still better than TPM in this regard because it still encodes the effect size (i.e. `NumReads` will sum to the total number of aligned reads). Anyway TLDR: Passing the `--noLengthCorrectio",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147:703,optimiz,optimize,703,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147,2,['optimiz'],['optimize']
Performance,"Dear COMBINE-lab team,. I am using **Alevin** pipeline from the **salmon-1.4.0 release** to preprocess some Drop-Seq data. . From what I understood, Alevin is using sets of low quality, ambiguous and high quality barcodes for the final whitelisting. Ambiguous and high quality ones are sets of barcodes of equal sizes above the knee/threshold used for the initial whitelisting. Ambiguous barcodes get classified as either high or low quality. Correct me if I'm wrong, but I think this means that the final whitelisted barcodes (those of high quality) should all be above the knee/threshold.; However I observed that **some of the barcodes dumped in the whitelist.txt file from the intelligent whitelisting were not above the knee/threshold used for initial whitelisting.** . I was wondering if you could reproduce my observation, or tell me if I misunderstood something. Here's the code I used :. ```; with open(f""./aux_info/alevin_meta_info.json"") as f:; alevin_meta_info = json.load(f). knee_or_threshold = alevin_meta_info[""initial_whitelist""]; whitelist = pd.read_table(f""./alevin/whitelist.txt"", header=None)[0].values; quants_mat_rows = pd.read_table(f""./alevin/quants_mat_rows.txt"", header=None).values.ravel(); raw_cb_frequency = pd.read_table(f""./alevin/raw_cb_frequency.txt"", header=None, index_col=0). print(alevin_meta_info) >>. {'total_reads': 145095156,; 'reads_with_N': 0,; 'noisy_cb_reads': 66182273,; 'noisy_umi_reads': 3866,; 'used_reads': 78909017,; 'mapping_rate': 44.93378883027631,; 'reads_in_eqclasses': 65196751,; 'total_cbs': 3146561,; 'used_cbs': 92693,; 'initial_whitelist': 3000,; 'low_conf_cbs': 1000,; 'num_features': 7,; 'no_read_mapping_cbs': 1,; 'final_num_cbs': 2597,; 'deduplicated_umis': 6871590,; 'mean_umis_per_cell': 2645,; 'mean_genes_per_cell': 1370}. print(len(quants_mat_rows)) >> 3999; print(knee_or_threshold) >> 3000. print(len(whitelist)) >> 2597; print(len(np.intersect1d(raw_cb_frequency[:knee_or_threshold].index, whitelist))) >> 2513; ```. The thresh",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/733:980,load,load,980,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/733,1,['load'],['load']
Performance,"Dear Peter,. I am also trying salmon for miRNA quant and was searching for tips and experience from other users/developers on this scenario. How did salmon perform for you in this use case? . Gon√ßalo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/826#issuecomment-2228388816:156,perform,perform,156,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/826#issuecomment-2228388816,1,['perform'],['perform']
Performance,"Dear Salmon team,. We have previously been using salmon 0.8.1 for our RNA sequencing analysis pipeline and wanted to upgrade to the latest version (1.3.0). Upon comparing the quant.sf output from salmon 0.8.1 to 1.3.0 (see command below), we noticed that we had far less transcripts with a TPM of unequal 0 in the quant.sf file generated by salmon 1.3.0 compared to the quant.sf output from salmon 0.8.1. . cmd1 = (""{salmon} --no-version-check quant --libType {libType} ""; "" --targets {salmon_ref} --useVBOpt --numBootstraps 50 ""; "" --seqBias --gcBias --geneMap {salmon_gtf}""; "" --sampleOut --sampleUnaligned --threads {threads}""; "" --alignments {input_files[1]} --output {output_dir}/salmon""). I have downsampled the bam file on which we tested the two salmon versions, which can be found here: https://drive.google.com/file/d/1-3ZCXlYkBsu4wyYBgbgQQUbqRwICsyLB/view?usp=sharing . As the error model was not used in salmon 0.8.1, and is now run if the flag ‚ÄìnoErrorModel is not set, I furthermore ran salmon 1.3.0 without the error model and performed another run with the error model and range factorization (set to 4 as recommended) enabled. . For this particular downsampled bam file, salmon 0.8.1 got 36.9% of TPM‚Äôs unequal 0 but for all three differently configured salmon 1.3.0 runs that number drops to 7.3%. . Is this drastic reduction in detected transcripts in the newer version the result of fewer false positives compared to the old salmon version?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/562:1042,perform,performed,1042,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/562,1,['perform'],['performed']
Performance,"Dear `salmon` developers,. We are using salmon at ONT for quantifying transcripts from alignments of cDNA reads to transcriptomes on a regular basis and in [some](https://github.com/nanoporetech/pipeline-transcriptome-de) of our pipelines.; Transcriptomic aligments of long reads generate less multimapping reads than short reads (depeneding on the structure of the transcriptome), however we would prefer not to ignore them during quantification in order to make maximal use of the data.; However, since the error model was built for short reads, until now we have used the tool with the error model turned off (`--noErrorModel`), which is not optimal. Would it be possible to add a simple error model suitable for long read alignments? We propose something like the following for calculating the likelihood of an alignment:. - The likelihood of the aligment would be calculated based on the empirical distributions (or a normal fit) of edit distances conditioned on the length of the alignment. We could provide you with this information if needed.; - The likelihood of left and right soft or hard clipped sequences would be calculated as a function of their length (such as (1/x)^z, where the parameter z can be tuned based on real datasets). A more complicated model could be build taking into account the error profile of the long reads. It might be overkill though. I had a look at the source code and it seems to me that it might not be hard to implement it, however I am lacking the intimate knowledge of the codebase to do it easily.; Let me know if you would be interested in adding this feature. If yes, we could evaluate the change in the quality of estimates on real datasets. Best regards,; Botond Sipos",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/519:1215,tune,tuned,1215,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/519,1,['tune'],['tuned']
Performance,"Done indexing Barcodes; [2019-01-29 15:49:35.994] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-29 15:49:35.994] [alevinLog] [info] Used Barcodes except Whitelist: 105901; [2019-01-29 15:49:36.107] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 15:49:36.107] [alevinLog] [info] parsing read library format; [2019-01-29 15:49:36.415] [stderrLog] [info] Loading Suffix Array; [2019-01-29 15:49:36.107] [jointLog] [info] There is 1 library.; [2019-01-29 15:49:36.373] [jointLog] [info] Loading Quasi index; [2019-01-29 15:49:36.396] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 15:49:50.479] [stderrLog] [info] Loading Transcript Info; [2019-01-29 15:49:55.550] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 15:49:56.036] [stderrLog] [info] There were 58,086 set bits in the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.677] [jointLog] [info] Counted 58,047,553 total reads in the equivalence classes; [2019-01-29 16:05:46.678] [jointLog] [warning] Found 21006 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-29 16:05:46.678] [jointLog] [info] Mapping rate = 20.1566%. [2019-01-29 16:05:46.678] [jointLog] [info] finished quantifyLibrary(); [2019-01-29 16:05:51.316] [alevinLog] [info] Starting optimizer. **Analyzed 4000 cells (100% of all).**; [2019-01-29 16:06:27.447] [alevinLog] [info] Total 20167967.00 UMI after deduplicating.;",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:1836,load,loading,1836,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['load'],['loading']
Performance,"Due to a current default in the boost library (https://github.com/boostorg/math/issues/1211) in boost::math::digamma, there is a performance hit on aarch64. This happens on v1.10.3 of Salmon, with GNU compiler 13 on Linux aarch64. A 4-thread quantization of one of the Salmon tutorials DRR0* series files spends ~15% of time in this routine (called within CollapsedEMOptimizer). On a larger example, we see 7% performance hit over a run that takes 1300 seconds on 4 cores. On x86 this time is small enough to be lost in the noise. `salmon quant -i athal_index -l A ; -1 DRR016125/DRR016125_1.fastq.gz; -2 DRR016125/DRR016125_2.fastq.gz ; -p $threads --validateMappings -o quants/DRR016125_quant`. There is a simple fix which is to ensure the CMake/Makefiles ensure salmon compiles with: ; `-DBOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS`; or to add that to any file that brings in boost::math via adding `#define BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS` at the start. With that change, a 1300 second runtime drops to 1212 for the larger test case, and for the tutorial case is 48 seconds down to 40 on a 4-core r8g.xlarge (Graviton4). Whilst Boost may fix the issue soon - it's likely that older versions of the library will be found installed for some time. It would be helpful to add this define to cmake settings, or the sources.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/966:129,perform,performance,129,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/966,2,['perform'],['performance']
Performance,"EQVecT means we are in the function with `template <typename EQVecT>`; i is the index of the loop that generates alphaSum; If I printf ""Round"" line 257, I get:; [2018-05-31 22:27:34.996] [jointLog] [info] Starting optimizer; Round; [2018-05-31 22:27:35.226] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; Round; [2018-05-31 22:27:35.257] [jointLog] [info] iteration = 0 | max rel diff. = 127.379; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393669382:214,optimiz,optimizer,214,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393669382,1,['optimiz'],['optimizer']
Performance,"E_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffebe5e89d0, tls=0x7ffebe5e8700, child_tidptr=0x7ffebe5e89d0) = 14677; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/sa.bin"", O_RDONLY) = 4; clock_gettime(CLOCK_REALTIME, {1491424830, 149197282}) = 0; read(4, ""l\n\221\21\0\0\0\0k\n\221\21\373\25\343\20\17\254\r\1\36\27\227\n\37\371\270\4\250\210\307\f""..., 8191) = 8191; mmap(NULL, 1342177280, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7ffe2e5e8000; munmap(0x7ffe2e5e8000, 1342177280) = 0; mmap(NULL, 1344270336, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7ffe2e3e9000; munmap(0x7ffe2e3e9000, 94208) = 0; munmap(0x7ffe7e400000, 1998848) = 0; [1m[2017-04-05 16:40:30.149] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-04-05 16:40:30.069] [jointLog] [info] Loading Quasi index; [00m[1m[2017-04-05 16:40:30.139] [jointLog] [info] Loading 32-bit quasi index; [00mread(4, ""\16'w=\r\320m\306\0\35\26\306\0\224\23\270\10\205]D\0|\3!\4c_-\7\310O\2""..., 1178864057) = 1178864057; close(4) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/txpInfo.bin"", O_RDONLY) = 4; clock_gettime(CLOCK_REALTIME, {1491424833, 297142816}) = 0; read(4, ""\315\5\3\0\0\0\0\0|\0\0\0\0\0\0\0ENST00000456328.""..., 8191) = 8191; read(4, ""RP4-669L17.8-001|RP4-669L17.8|12""..., 8191) = 8191; read(4, "".2|LINC01128-004|LINC01128|874|l""..., 8191) = 8191; read(4, ""THUMT00000097991.1|AGRN-002|AGRN""..., 8191) = 8191; read(4, ""HUMG00000001412.6|OTTHUMT0000000""..., 8191) = 8191; read(4, ""F3L-007|CPSF3L|1868|protein_codi""..., 8191) = 8191; read(4, ""01413.3|OTTHUMT00000004082.2|AUR""..., 8191) = 8191; read(4, ""UMT00000001363.3|ATAD3A-001|ATAD""..., 8191) = 8191; read(4, ""DK11B-202|CDK11B|2490|protein_co""..., 8191) = 8191; read(",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:167328,Load,Loading,167328,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['Load'],['Loading']
Performance,Error while loading shared libraries: libtbbmalloc_proxy.so.2: cannot open shared object file: No such file or directory,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/219:12,load,loading,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/219,1,['load'],['loading']
Performance,"Excellent! Now we should do some internal testing to see if this has any negative performance impact on machines that _do_ have SSE4. Then we can determine if we can just make this the default, or if it's worth cutting a release under 2 configurations.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-610602162:82,perform,performance,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-610602162,1,['perform'],['performance']
Performance,"FYI, miniconda works fine on FreeBSD. It's not too difficult to configure manually, but to make it even easier:. As root:. ```; pkg install auto-admin linux-miniconda-installer; auto-install-linux_base; ```; As a non-root user:. ```; miniconda-installer; conda-shell; conda config --add channels conda-forge; conda config --add channels bioconda; conda create -n salmon salmon; ```; Note: Just running `conda install salmon` instead of `conda create -n salmon salmon` will install a very old version rather than the latest. This utilizes the Linux compatibility module, which simply adds Linux system calls to the FreeBSD kernel. Unlike a virtual machine, there's no performance penalty and memory overhead is trivial. In fact, Linux binaries sometimes run slightly faster on FreeBSD than they do on Linux. Average speed is about the same. I'd only use conda as a stop-gap, though. There's a large and growing selection of bioinformatics software in FreeBSD ports that can be more easily installed and used, e.g. 'pkg install samtools bwa'. Also I'm working on a native FreeBSD port for salmon:. https://github.com/COMBINE-lab/salmon/issues/162. Best,. Jason",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-917648051:667,perform,performance,667,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-917648051,2,['perform'],['performance']
Performance,"Fixes #966 ; This fix resolves performance issue where Boost::math unnecessarily promotes doubles to long double, which is not fully supported by hardware leading to slow-downs. The change is to set a define during cmake process which prevents promotion ( -DBOOST_MATH_PROMOTE_DOUBLE_POLICY=false )",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/968:31,perform,performance,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/968,1,['perform'],['performance']
Performance,"Fraction. Since not explicitly specified, it is being set to 0.65; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-08-25 11:40:44.518] [jointLog] [info] parsing read library format; [2019-08-25 11:40:44.518] [jointLog] [info] There is 1 library.; Exception : [Error: The index version file salmonIndexDecoyMouse/versionInfo.json doesn't seem to exist. Please try re-building the salmon index.]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.; (salmon) wayne@Ubuntu19:~/rnaseq$ ls -R *.json; ls: cannot access '*.json': No such file or directory. Try 2.; Instead of referring to my directory decoys/ , I moved to the directory decoys/ ; and ran salmon index again, using your command exactly:; salmon index -t gentrome.fa -d decoys.txt -i combined_index. This time a few .json files were produced in the directory combined_index/ [your name this time]; [contents of decoys= combined_index gentrome.fa mus_musculus.tar.gz Salmontranscripts_quant; decoys.txt links.txt salmonQuantDecoy22.sh]. then [sh salmonQuantDecoy22.sh]; salmon quant -p 3 -i combined_index -l A -1 ../SRR1818187_2.fastq.gz -2 ../SRR1818187_1.fastq.gz --validateMappings -o Salmontranscripts_quant. Now no Segmentation Fault crash. ; The program finishes with; [2019-08-25 12:37:39.056] [jointLog] [info] Finished optimizer; [2019-08-25 12:37:39.056] [jointLog] [info] writing output . Now I am going to look for the mRNA counts. I think a major secret is to have mus_musculus.tar.gz in the same directory.; If my description is accurate [I did not repeat everything] you should have -mRNA [path to transcriptome.gz] on your command line, or instruct users to have the transcriptome.gz in the same directory.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524651435:3026,optimiz,optimizer,3026,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524651435,1,['optimiz'],['optimizer']
Performance,"Fraction. Since not explicitly specified, it is being set to 0.65; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-05 09:19:06.171] [jointLog] [info] parsing read library format; [2020-05-05 09:19:06.171] [jointLog] [info] There is 1 library.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading pufferfish index; [2020-05-05 09:19:06.278] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 30.609 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 1.3312 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.6842 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 20.002 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 11.467 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 9.5665 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 4.3912 ms; -----------------------------------------; Exception : [std::bad_alloc]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. Not sure why it happens... memory doesn't reach the max. ![Screenshot at 2020-05-05 09-45-37",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021:2063,Load,Loading,2063,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021,1,['Load'],['Loading']
Performance,"GENCODE/GRCh38_hg38/transcripts/salmon_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per frag: 1.25428[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 1873468, hits per frag: 1.25316[A. [32mprocessed[31m 2000000 [32mfragments[0m; h",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:3660,Load,Loading,3660,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['Load'],['Loading']
Performance,"Good morning,. I'm a *nix developer with a lot of experience porting software to various platforms. My preferred method for deployment is build-from-source package managers such as FreeBSD ports, Gentoo Portage, MacPorts, pkgsrc (which I use extensively on CentOS), etc. Package managers in-general minimize problems for end users (and hence reduce PRs for you guys). Build-from-source package managers also allow customizing build options (e.g. adding -march=native), which can sometimes offer significantly better performance than you can get from a generic binary package that has to support older CPUs. Currently, developing such packages for salmon is a challenge due to the way the build system works. I've been looking through the build system and the main barrier to packaging is the unconditional bundling of some dependencies, such as seqlib and htslib. If you were to update the cmake systems so that they first look for *all* dependencies installed externally, as they already do for jemalloc and tbb, then it would be easier for developers to package salmon. Best,. Jason",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/502:516,perform,performance,516,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/502,1,['perform'],['performance']
Performance,"Great. I'm not sure why the old index was problematic, but I'm glad this one seems to load successfully etc. Also, I'm glad the read set is rather large, because this is one of those cases where the index loading time might otherwise trump the time related to map the reads on a smaller dataset! I have some work to do in speeding up the loading of large indices.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204084502:86,load,load,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204084502,3,['load'],"['load', 'loading']"
Performance,"Greetings,. I would like to thank you for providing this as an open-source tool. Currently, I am performing Salmon Indexing using human Gencode V35. I am following the instruction from: https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/. But when I try running the command of ""**salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode**"", I hit the error of ""exception : [unrecognised option '-d']. Exiting."". In the --help section the argument of ""-d"" is not present. Please do advise me on how I should proceed with indexing?. Regards,; Ben. ![image](https://user-images.githubusercontent.com/69944967/137584568-a0378455-a751-4d1f-885b-a66addf07160.png). ![image](https://user-images.githubusercontent.com/69944967/137584591-c61a3777-aff5-416f-beee-a33ad81ea5dd.png)",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/714:97,perform,performing,97,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/714,1,['perform'],['performing']
Performance,"HashResizeThreads to 7; [2020-05-05 09:19:06.171] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-05 09:19:06.171] [jointLog] [info] parsing read library format; [2020-05-05 09:19:06.171] [jointLog] [info] There is 1 library.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading pufferfish index; [2020-05-05 09:19:06.278] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 30.609 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 1.3312 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.6842 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 20.002 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 11.467 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 9.5665 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 4.3912 ms; -------",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021:1788,Load,Loading,1788,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021,1,['Load'],['Loading']
Performance,"Hello everybody, . I've checked the google group, but it seems pretty deserted. I'm new to Salmon, but I do need to process a lot of experiments on my cluster, and it keeps overwhelming the I/O (and if I don't, the process would take much longer than I can wait - order of years). . So, I've had two questions: ; - can Salmon use SRA files directly? I.e. in hisat2 they implemented NGS sdk from NCBI and if you have your SRA file downloaded, you can read it same as you'd read fastq or fastq.gz. ; - can Salmon batch-process RNA-seq experiments? The goal is to not read the index every time - e.g. you've loaded the human transcriptome index into memory once, and then processed 100 files or so. . Thank you.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/319:605,load,loaded,605,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/319,1,['load'],['loaded']
Performance,"Hello, ; Could someone tell me what this error message means and if there is a way to fix the issue? I'm trying to use salmon for my Master's project data (I break down salmon into two parts to make it easier for myself) but keep getting the error message below during the matrix combination step. I have downloaded edgeR to my home directory on my school's supercomputer, in addition to many other unsuccessful attempts at solving the issue. My main issue is that I've used the same code before without this issue, so I don't know exactly what is wrong now. I'm fairly new to bioinformatics and find it confusing, so any help is appreciated!. Here is my job script:. #!/bin/bash; #SBATCH --partition=debug; #SBATCH --account=PAS1725; #SBATCH --job-name=salmon_part2_cd-hit; #SBATCH --time=01:00:00; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=48. module load python; module load trinityrnaseq/2.15.1; module load samtools; module load salmon/1.4.0; module load R/4.1.0-gnu9.1; R. /apps/trinityrnaseq/2.15.1/util/abundance_estimates_to_matrix.pl --est_method salmon --gene_trans_map /fs/scratch/PAS1725/transcriptomics/trinity_cd-hit_fasta.gene_trans_map --name_sample_by_basedir --out_prefix transcript_counts /fs/scratch/PAS1725/transcriptomics/salmon_part1_cd-hit_output_files/A1/quant.sf ... [other files omitted for space]. Here is my error message:. /apps/trinityrnaseq/2.15.1/util/support_scripts/run_TMM_scale_matrix.pl --matrix transcript_counts.isoform.TPM.not_cross_norm > transcript_counts.isoform.TMM.EXPR.matrixCMD: R --no-save --no-restore --no-site-file --no-init-file -q < transcript_counts.isoform.TPM.not_cross_norm.runTMM.R 1>&2 ; > library(edgeR); Error in library(edgeR) : there is no package called ‚ÄòedgeR‚Äô; Execution halted; Error, cmd: R --no-save --no-restore --no-site-file --no-init-file -q < transcript_counts.isoform.TPM.not_cross_norm.runTMM.R 1>&2 died with ret (256) at /apps/trinityrnaseq/2.15.1/util/support_scripts/run_TMM_scale_matrix.pl line 105.; Error, CMD: /a",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/855:856,load,load,856,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/855,5,['load'],['load']
Performance,"Hello, I hope you're well!. ### Context. 1. I performed short-read (Illumina, 150bp PE) and long-read (ONT, cDNA+PCR) RNA-sequencing on 12 human cell line samples (4 conditions, 3 biological replicates each).; 2. I aligned the short-reads to chm13v2.0_RefSeq_Liftoff_v5.1.gff3 using HISAT2, and the long reads to chm13v2.0.fa using Minimap2.; 4. I used StringTie hybrid assembly mode (--mix option) to generate GTFs using both technologies (to take advantage of structural information from long reads and accuracy from short reads).; 5. I then ran stringtie --merge to generate the transcriptome assembly GTF from the sample GTFs.; 6. I took this merged transcriptome and further annotated it using SQANTI3 (with chm13v2.0_RefSeq_Liftoff_v5.1.gtf and chm13v2.0.fa).; 7. I converted both the SQANTI-annotated and the StringTie GTFs into fasta as follows:; `gffread -w merged_transcriptome.fa -g chm13v2.0.fa merged_transcripts.gtf`. Now I'm trying to quantify with Salmon. Firstly, I'm not sure whether it's better to use the short or long reads here as input to Salmon, given that my goal is to identify short peptides (I have peptidomics data) derived from specific splicing events. You may or may not be able to help me with that, but if you have thoughts, I'd appreciate them! Anyway, I decided arbitrarily to use the long-read BAMs as input to Salmon. ### Bug description; Secondly, as discussed a little in #104 , I keep running into:; `Transcript NM_032515.5 appears in the reference but did not appear in the BAM`; and; `Transcript chr19 appeared in the BAM header, but was not in the provided FASTA file`; (note here that it's an entire chromosome??? And these are the only ""transcripts"" that don't appear in the fasta- they're all just the chromosome names.); This happened regardless of whether I used the Stringtie fasta or the SQNATI-annotated fasta. This is the salmon command I had run:; `$salmon quant --ont -t $transcriptome -l SF -a $bam -o $outdir/$name`. As suggested, I used gffrea",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/863:46,perform,performed,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/863,1,['perform'],['performed']
Performance,"Hello, I'm debugging a salmon install problem with conda. I don't have time to double check, but it looks something like:. * if you install salmon 1.1.0, you get a version of tbb, 2021.1.1, from conda-forge ; * if you then try to upgrade to salmon 1.4.0, you actually want to get a different version of tbb from defaults, but the version pinning doesn't require it so it sticks with conda-forge; * if you force `tbb==2020.3` for salmon 1.4.0, things work; * if you don't, you get `salmon: error while loading shared libraries: libtbb.so.2: cannot open shared object file: No such file or directory`. The error shows up with:; `tbb 2021.1.1 h4bd325d_0 conda-forge`. and the functioning version of tbb seems to be:; `tbb 2020.3 hfd86e86_0 defaults`. I don't have time to chase this down further at the moment, but hopefully this will be sufficiently clear for me to figure it out later :)",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/637:501,load,loading,501,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/637,1,['load'],['loading']
Performance,"Hello,. I am using the recent downloaded executable for v1.1.0 and am using salmon (bulk-mode). Noticed one potential bug and have some general questions regarding bootstraps. 1. The potential bug I noticed was when I use `--numGibbsSamples` the logs/salmon_quant.log file is always blank. When I remove this flag and re-run the program the log file is correctly printed out. 2. Regarding Bootstraps:. I've been working with parameters to min/max my predicted estimates to quantified cDNA results that we have. Through this process I was not performing bootstraps and was just using the TPM results that were located within the `quants.sf` file and have been getting some good results, with R-squared values of ~0.98 for actual v. predicted plots. As a note, even after running hundreds of runs with the same parameters, the TPM values in the `quants.sf` file never really fluctuated that much between runs and were generally nearly identical. . However, I thought it would be best to bootstrap `--numBootstraps` each Salmon run and average the bootstraps to get more accurate results. After doing 1,000 bootstraps per sample I noticed that the TPM values I calculated from numbers of mapped reads in the `bootstraps.gz` fluctuated a lot more and overall brought my R-squared values down to ~0.87. (I used your ConvertBootstrapsToTSV.py script to get the read counts from the bootstrap file and then calculated the TPMs using the effective lengths from the `quants.sf` file. As looking through previous issues (#246) I was under the assumption that the bootstrap file only contained new mapped read estimates and the effective lengths should be the same for all bootstrap runs.) . My question is why do the TPM values in the `quants.sf` file not fluctuate as much (even after 100+ runs using the same parameters), while calculated TPM values from bootstraps of the same run are showing greater variance?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/466:542,perform,performing,542,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/466,1,['perform'],['performing']
Performance,"Hello,. This is the first time I am using Salmon and tried following up all steps but got 0 fragments mapped.. . 1) copied unzip Salmon-0.8.2_linux_x86_64 into folder in server; 2) exported path: export PATH=$PATH:/.../.../Salmon-0.8.2_linux_x86_64/bin/; 3) built index: salmon index -t salmon.index.human.052617.tar -i human_index; 4) now I want to preform quantification on fastq files (only one end of paired end, trimmed for 40 bp): ; salmon quant -i human_index -l U -r Sample1_r1_trimmed.fastq -p 5 -o quants/Sample1_quant. Logs will be written to quants/Sample1_quant/logs; [2017-10-25 10:57:25.879] [jointLog] [info] parsing read library format; [2017-10-25 10:57:25.879] [jointLog] [info] There is 1 library.; [2017-10-25 10:57:26.002] [jointLog] [info] Loading Quasi index; [2017-10-25 10:57:26.002] [jointLog] [info] Loading 32-bit quasi index; [2017-10-25 10:57:26.012] [jointLog] [info] done; [2017-10-25 10:57:26.012] [jointLog] [info] Index contained 28 targets; [2017-10-25 10:57:26.003] [stderrLog] [info] Loading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapp",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:763,Load,Loading,763,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,2,['Load'],['Loading']
Performance,"Hello,. We are using Salmon to quantify gene counts for samples in RNA-Seq experiment. We will be using the weights of the equivalence class to perform a calculation for which we require the effective length of the equivalence classes. I checked in the eq_class.txt file under the aux_info directory but I was unable to find it. We are using alignment-based method where we supply a bamfile to salmon. Could you please help us to obtain the effective length of the equivalence classes?. I have another question. Salmon operates in both lightweight alignment mode and in alignment mode. For the lightweight mode, one needs to first create an index (which is the colored De Bruijn graph). I understand that this index (along with all the equivalence class) remains the same even when gene counts of different RNA-Seq samples are estimated. But I am a bit confused about the alignment-based method. In this case, salmon does not require an index since it has the actual alignments. If we have multiple samples, which are mapped to the same transcriptome will Salmon return the same set of equivalence classes? Since the samples are different the weights will change and so will the reads mapped to each equivalence class but will the set of eq. classes change?. Thank you.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/579:144,perform,perform,144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/579,1,['perform'],['perform']
Performance,"Hello,; I'm trying to run the docker image on a cluster to quantify fastq files using the mapping mode. ; I'm using it with singularity ( already used it on another cluster and it worked perfectly). Here the command:; singularity exec docker://combinelab/salmon:latest salmon quant --validateMappings -l A -p ${threads} -o ./salmon_map -i ${salmon_index} -1 ${file_1} -2 ${file_2}. And the error:; salmon: error while loading shared libraries: libtbbmalloc.so.2: cannot open shared object file: No such file or directory. I suspect that it's missing inside the image and that in the other cluster it was running because it was taking the one outside the image ( the cluster where it worked had lots of libraries and softwares available, in this other you need to load the modules). Cheers; Claudio",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/447:418,load,loading,418,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/447,2,['load'],"['load', 'loading']"
Performance,"Hey Avi, thanks for the quick reply!; Here is the salmon_quant_log file:; ```; [2019-07-09 09:07:39.153] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-07-09 09:07:39.153] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-07-09 09:07:39.153] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-07-09 09:07:39.153] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-07-09 09:07:39.153] [jointLog] [info] Using default value of 0.8 for minScoreFraction in Alevin; [2019-07-09 09:17:08.128] [jointLog] [info] There is 1 library.; [2019-07-09 09:17:08.180] [jointLog] [info] Loading Quasi index; [2019-07-09 09:17:08.180] [jointLog] [info] Loading 32-bit quasi index; [2019-07-09 09:17:14.970] [jointLog] [info] done; [2019-07-09 09:17:14.970] [jointLog] [info] Index contained 197,787 targets; [2019-07-09 10:02:20.484] [jointLog] [info] Computed 251,090 rich equivalence classes for further processing; [2019-07-09 10:02:20.484] [jointLog] [info] Counted 348,673,166 total reads in the equivalence classes ; [2019-07-09 10:02:20.485] [jointLog] [warning] Found 1893 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-07-09 10:02:20.485] [jointLog] [info] Mapping rate = 39.7151%. [2019-07-09 10:02:20.485] [jointLog] [info] finished quantifyLibrary(); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510544611:878,Load,Loading,878,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510544611,2,['Load'],['Loading']
Performance,"Hey Avi,. I have ran alevin with addition of `--expectCells 8000` flag, the new output of cells detected: ; `3655, 5604, 4374` w/ `13%, 30%, 15.7%` reads thrown away. It is better than the first trial `1192, 4947, 3414` but nevertheless fewer than the cell ranger output `5150, 7618, 6404`. . Wonder ; 1. if I should set higher `--expectCells`, but which would result in more unconfident calls?; 2. From 1, if I just try to get more cells subjectively, will the expression matrix (and further analysis) be inaccurate/affected? (given downstream filtering of cells of low quality based on # of feature detected etc. would be performed anyway. ) ; 3. what could be the reason that these two algorithms output such different total cell numbers (precision in calling?) . Thanks!; Chelsea",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510603746:624,perform,performed,624,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510603746,1,['perform'],['performed']
Performance,"Hey Rob,. I did manage to test v1.3 this evening. Ran much faster. The same sample that took about 6 hours ran in 45mins. Still not great, but I think it might be intrinsic to some of these samples, also I was running it off my laptop and was running Linux off a; flash drive so not an ideal setup. Either way much more reasonable. Do you want me to attach any logs or anything?. Best,. Ryan¬†. Sent from my iPhone. On Jun 16, 2020, at 10:20 AM, Rob Patro <notifications@github.com> wrote:. Ôªø. Hi ; @shalercr,; I agree that if each sample runs as quickly as you see here, it's not a big deal to just re-run them all. Note that, while my avoids ~116 times more (eventually-discarded) alignments than did yours, the difference in the number of discarded; fragments (i.e. fragments that had no mapping) is very small ‚Äî¬†~7,000, or 0.023% of the fragments. Thus, despite the huge speed-up, I wouldn't expect many differences in the quantifications. However, I couldn't argue against re-quantifying everything; with the new version just for good measure :). When you have a chance, please do let me know if you see this same performance difference using the pre-compiled (linux) binary. here. Of course, once we finalize this release (soon), we will push to bioconda so we will also have OSX binaries available. However, I just want to make sure this fixes things on your end as well before the release.; ‚Äî; You are receiving this because you were mentioned.; Reply to this email directly, ; view it on GitHub, or ; unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645119801:1118,perform,performance,1118,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645119801,1,['perform'],['performance']
Performance,"Hi , . I am having issues with calculating the differential splicing using SUPPA. I have tried several times but kept getting the same error message, even though all files required are uploaded. . The error message is below:; ```; Traceback (most recent call last):; File ""/mnt/storage/nobackup/b7070855/april2023/SUPPA/suppa.py"", line 10, in <module>; import psiPerGene as psiPerIsoform; File ""/mnt/storage/nobackup/b7070855/april2023/SUPPA/psiPerGene.py"", line 13, in <module>; from lib.tools import *; ModuleNotFoundError: No module named 'lib.tools'; [1] ""Parsing samples...""; [1] ""Loading ./results/iso_tpm_formatted.txt...""; Error: first_condition %in% colnames(input_file) are not all TRUE; Execution halted; [1] ""Parsing samples...""; [1] ""Loading ./results/events.psi...""; Error in file(file, ""rt"") : cannot open the connection; Calls: read.table -> file; In addition: Warning message:; In file(file, ""rt"") :; cannot open file './results/events.psi': No such file or directory; Execution halted; Traceback (most recent call last):; File ""/mnt/storage/nobackup/b7070855/april2023/SUPPA/suppa.py"", line 10, in <module>; import psiPerGene as psiPerIsoform; File ""/mnt/storage/nobackup/b7070855/april2023/SUPPA/psiPerGene.py"", line 13, in <module>; from lib.tools import *; ModuleNotFoundError: No module named 'lib.tools'; CalculateDifferentialSplicingEvents.sh: line 24: -e: command not found; ```. Could you please help me with this ; **Thank you in advance",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/859:586,Load,Loading,586,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/859,2,['Load'],['Loading']
Performance,"Hi , Thank you very much for check the problem in my results. I used the salmon11.3 and salmon14.1 to analyze my data, the tpm value of the salmon4.1 is much smaller than the data got from salmon11.3 using the same raw data. ; [Lei_Tpm_vs_Jack_index_tpm.pdf](https://github.com/COMBINE-lab/salmon/files/3497212/Lei_Tpm_vs_Jack_index_tpm.pdf); my code as follow: . module load salmon/0.11.3 ; salmon index -t gencode.vM16.transcripts.fa -i 0.11.3_Lei.ind -k 31 --gencode; salmon quant -p 10 --numBootstraps 200 --gcBias --seqBias -l A -i 0.11.3_Lei.ind -1 read1.fq.gz -2 read2.fq.gz -o vM16 -g gencode.vM16.annotation.gtf. module load salmon/0.14.1 || exit 1; salmon index -t gencode.vM16.transcripts.fa -i 14.1_Lei.ind -d decoys.txt -k 31 --gencode; salmon quant -p 10 --numBootstraps 200 --gcBias --seqBias -l A -i 14.1_Lei.ind -1 read1.fq.gz -2 read2.fq.gz -o vM16_1 -g gencode.vM16.annotation.gtf. I do not understand if where is the problem in my analyze? Thank you very much.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/415:371,load,load,371,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/415,2,['load'],['load']
Performance,"Hi ; I am running an analysis using FLAIR (https://github.com/BrooksLabUCSC/flair) that uses the desired salmon version at the back end. Since it is trying to construct a de-novo transcriptome it pools the samples resulting in a sam file that is 266GB. When I run this analysis on the HPC, the salmon analysis ends without quant.sf file being written. The start and end of the STDERR written by salmon are shown below. . ```; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.6.0; # [ program ] => salmon; # [ command ] => quant; # [ targets ] => { ../data/FLAIR_2021-12-26/collapse_2021-12-26.firstpass.fa }; # [ output ] => { tmp99xm2qn8_2 }; # [ threads ] => { 8 }; # [ ont ] => { }; # [ libType ] => { U }; # [ alignments ] => { tmp99xm2qn8.firstpass.sam }; ---------------------------------------------; Completed first pass through the alignment file.; Total # of mapped reads : 74567310; # of uniquely mapped reads : 8113553; # ambiguously mapped reads : 66453757. Freeing memory used by read queue . . .; Joined parsing thread . . . ""tmp99xm2qn8.firstpass.sam""; Closed all files . . .; Emptied frag queue. . .; Emptied Alignment Group Pool. .; Emptied Alignment Group Queue. . . done; ============; Exception : [std::bad_alloc]; ============; ```; /home/ys/work_lies/Tools/salmon-1.6.0_linux_x86_64/bin/salmon alignment-quant was invoked improperly.; For usage information, try /home/ys/work_lies/Tools/salmon-1.6.0_linux_x86_64/bin/salmon quant --help-alignments. I have tried increasing the memory allocated to the analysis. It seems to complete but without the quantification files. . I also do not understand if it runs to the this point how this statement ""alignment-quant was invoked improperly."" could be true. . Any help would be greatly appreciated.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/732:1038,queue,queue,1038,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/732,3,"['Queue', 'queue']","['Queue', 'queue']"
Performance,"Hi @Acribbs ,. Thanks for your kind words.; Basically, modularity is very important part of the whole salmon framework. Alignment and quantification are two separate module and they are all interconnected, so the optimizations in one is automatically propagated to another. As a result, the optimizations of SA done in the alignment stage got propagated to both alevin (single-cell) and salmon (bulk) RNA-seq quantification. As a summary, from 0.14.0 onwards alevin can automatically utilize the benefits of SA if the reference is indexed following the scripts we shared in the SalmonTools repo. Hope it answers your question.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/370#issuecomment-503643808:213,optimiz,optimizations,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/370#issuecomment-503643808,2,['optimiz'],['optimizations']
Performance,"Hi @AndrewSkelton,. There is currently no easy way to keep the index in RAM as STAR/Bowtie2 do. This is a feature we've been interested in for a _long_ time, but it's a feature that is very hard to justify spending a PhD student's time on since it's not going to contribute directly to any paper. But, this is a feature we'd like to add and maybe we can swing it with some of the CZI round-3 funding we just got. Nonetheless, the capability currently doesn't exist. Salmon can take multiple fastq files as input, but then it assumes they all derive from the same library, so you get one ""aggregate"" quant.sf, which isn't what you want here. So, I think the only approach currently would be to schedule a number of small jobs. I get why this isn't ideal. One small saving grace is that recent versions of salmon (>= 1.0.0) adopt the pufferfish index which is _much_ smaller than the previous RapMap index. Thus, the index loading time is quite small for a typical transcriptome. Also, this often allows operating system cache to keep the index around, even if it's not explicitly stored in shared memory. Thanks for both of the suggestions, and I'll be sure to keep you in the loop if we acquire either of the capabilities you mention above!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/589#issuecomment-733215735:921,load,loading,921,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/589#issuecomment-733215735,2,"['cache', 'load']","['cache', 'loading']"
Performance,"Hi @AngryMaciek,. You can get either Gibbs samples from the posterior, or bootstrap estimates. To get the former, you pass `--numGibbsSamples <nsamp>` to salmon, and to get the latter, you pass `--numBootstraps <nsamp>`. Either way, samples will be written to a binary, gzipped file in `aux_dir/bootstrap/ bootstraps.gz` (we decided to keep a uniform file name regardless of the sampling type, however the type of sampling performed can be derived from `aux_dir/meta_info.json`). Two things to point out here. First, the binary file format can be converted to TSV if you prefer using [this script](https://github.com/COMBINE-lab/salmon/blob/master/scripts/ConvertBootstrapsToTSV.py). Second, these are samples over the number of reads assigned to the transcripts (not the TPMs directly). However, you could easily convert samples over the number of reads to samples over the TPMs by applying the TPM formula (i.e. TPM_i = 10^6 * (num_reads_i / effective_length_i) / (sum_j (num_reads_j / effective_length_j))).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/246#issuecomment-401834462:423,perform,performed,423,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/246#issuecomment-401834462,1,['perform'],['performed']
Performance,"Hi @BenLangmead!. Thanks for the formal feature request. This is, indeed, a great idea, and something I've been interested in for quite a while. As far as I can tell, the main impediment to this is the hash table (https://github.com/greg7mdp/sparsepp) used in the index. The suffix array used by the mapping algorithm (by virtue of simply being a flat array of either 32 or 64-bit integers) is trivial to load via shared memory, as is the flat representation of the concatenated text itself. The bitvector and rank data structure that separate individual transcript sequences might be a bit trickier, but is also small enough to exist per-process. However, it's unclear to me if there is an easy or straightforward way to have the hash table reside in shared memory, and this is usually the single largest element of the index. As I mentioned, this is a feature that I've thought would be very useful for quite a while, and I'm interested in seeing it implemented. If you have any suggestions on what might be the best approach, I'm all üëÇs.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/335#issuecomment-455905666:405,load,load,405,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/335#issuecomment-455905666,2,['load'],['load']
Performance,"Hi @BenjaminDEMAILLE,. I think brew is a bit behind bioconda on this front, and, indeed, the M1 being a completely new architecture complicates things. I have an M1 Max and so there are plans to get a native compile going soon. For the time being, the recommended way to get `salmon` on an M1 (or M2) Mac is as suggested [here](https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671). Basically, you create an x86 conda environment (running under rosetta2) and install the latest version of salmon there. Rosetta2 is pretty amazing, and everything seems to run without a hitch, with nary a performance hit for the x86 -> ARM translation. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/787#issuecomment-1170723368:608,perform,performance,608,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/787#issuecomment-1170723368,1,['perform'],['performance']
Performance,"Hi @FlorianRNA ! As stated in the [usage docs](https://nf-co.re/rnaseq/3.8.1/usage#quantification-options) for the nf-core/rnaseq pipeline:. ""Since v3.0 of the pipeline, featureCounts is no longer used to perform gene/transcript quantification, however it is still used to generate QC metrics based on [biotype](http://www.ensembl.org/info/genome/genebuild/biotypes.html) information available within GFF/GTF genome annotation files. This decision was made primarily because of the limitations of featureCounts to appropriately quantify gene expression data. Please see [Zhao et al., 2015](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0141910#pone-0141910-t001) and [Soneson et al., 2015](https://f1000research.com/articles/4-1521/v1)."". This is a common cause of confusion and I have tried to be as explicit about this in the docs. featureCounts is used to quantify features in the annotation by `gene_biotype` and not the actual gene / transcript features themselves. This may explain why you are seeing these discrepancies. However, I am still a little puzzled how you are able to directly compare the counts generated by featureCounts and Salmon (in either mode) because the core features that are being quantified should be different. Where did you get the plant reference genome from? If it's not from Ensembl then it probably isn't worth running the biotype quantification with featureCounts anyway because the GTF annotation files may not contain that information. There are some docs for this [here](https://nf-co.re/rnaseq/3.8.1/usage#prokaryotic-genome-annotations). Hope that helps and if you think we can improve the pipeline in any way please feel free to create an issue on the nf-core/rnaseq repo.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237865190:205,perform,perform,205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237865190,1,['perform'],['perform']
Performance,"Hi @GWW ,. Ok, we figured out where the threads are coming from. Deep inside the concurrent hash map we are using, there is a [function that grows the hash map](https://github.com/COMBINE-lab/salmon/blob/master/include/cuckoohash_map.hh#L1558). This function uses a function called [`parallel_exec`](https://github.com/COMBINE-lab/salmon/blob/master/include/cuckoohash_map.hh#L1751) to move the items from the old table to the new one. Here, they greedily use as many threads as available for that process. We can't see this behavior on our end by monitoring top/htop, because the hash table doubling happens so fast it's below the monitoring resolution. There are a couple ways to address this, one of which is hacking inside the hashmap library to modify this behavior. However, it would be nice if there was a way to do this without modifying the code (e.g. by limiting the number of threads the process was allowed to spawn concurrently from outside of the process itself). We are looking to see if this is doable using e.g. cgroups or some such.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395890018:81,concurren,concurrent,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395890018,2,['concurren'],"['concurrent', 'concurrently']"
Performance,"Hi @JSSaini,. The most common use case would be taxonomic abundance estimation in a DNA-seq library where the references are whole genomes of the potential taxa. The references indexed would be the gnomes (and / or contigs) of the potential organisms in the sample, and the output would be the estimated number of fragments arising from each contig / genome. If a given organism is split across multiple contigs, one would aggregate them post quantification in the same way one aggregates transcript abundance estimates to the gene level (i.e. the natural way to do this would be to create a contig to organism mapping and to load up the quantification results using tximport). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/834#issuecomment-1450283495:626,load,load,626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/834#issuecomment-1450283495,1,['load'],['load']
Performance,"Hi @Jensen416,. Thank you for reporting this. Certain versions of the GCC compiler are not capable of performing full program link time optimization (`lto`) for this codebase. This is a known issue¬†‚Äî and there are other programs that exhibit this same behavior. This is something that GCC must fix upstream ‚Äî an internal compiler error is something that really shouldn't happen. Luckily, the solution is simple; just don't use whole program inter procedural optimization. Try using this `cmake` invocation (after clearing out your build directory):. ```; cmake -DNO_IPO=TRUE -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR= ~/anaconda3/pkgs/tbb-2021.5.0-hd09550d_0/ -DCMAKE_INSTALL_PREFIX= ~/salmon/; ```. The `-DNO_IPO` tells `cmake` to invoke the compiler without inter procedural optimization (i.e. `lto`). Let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/778#issuecomment-1134776478:102,perform,performing,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/778#issuecomment-1134776478,8,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,"Hi @Kisekya,. So BWA-MEM and BWA-MEM2 are somewhat of a problem to begin with because they perform local alignment, which isn't really ideal for aligning RNA-seq reads to the transcriptome. If you really wish to use an aligner, we've had good experiences with Bowtie2 (when used in the appropriate end-to-end alignment mode) and with STAR (using the alignments projected to the transcriptome with `--quantMode TranscriptomeSAM` flag to output the alignments in transcriptomic coordinates as required by salmon). Apart from the local alignment issue, sorting the BAM file is _absolutely_ a problem for salmon, and is likely why you get the strange library type. When run in alignment mode, just like RSEM, salmon requires the alignments for the the mates of a read pair to appear subsequently in the file, and for all alignments for a given read to appear contiguously in the file. This allows parsing the reads without having to require potentially unbounded memory (holding the record for one end of a fragment in memory while waiting for the record for the other end). In fact, given that you've sorted the alignments here, I'm surprised you're not getting the ""suspicious pair"" warnings in your logs. The ISR library with 40% mapping is likely a more reliable number. The obvious question here is why might the mapping rate be this low? There are a few reasons you might see something like this. One, for example, is poor ribosomal depletion, paired with not having all of the rRNA sequences in your index. In this case, you have many fewer reads coming from the rest of the transcriptome and you get depleted mapping rates like this. . Could you say a bit more about the experimental setup? Is this in a well-annotated organism like human / mouse etc.? Is this a polyA selection or ribosomal depletion prep? Anything else that might be relevant to sample quality?. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-873519594:91,perform,perform,91,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-873519594,1,['perform'],['perform']
Performance,"Hi @Lordlitong,. The name of a FASTA record is whatever appears up to the first white space character in its header line. This is why you get these long names in the index as a sequence name. If you pass the `‚Äîgencode` flag when building the salmon index, it will treat `|` as an additional separator, and your names will just be e.g. `ENST00000456328.2`. That is the easiest way to avoid this issue going forward. If you don‚Äôt want to rebuild the index and re-process the data (if you‚Äôve already processed a ton of samples), then you would have to write some code to strip the sequence names before loading them.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/513#issuecomment-619584519:600,load,loading,600,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/513#issuecomment-619584519,1,['load'],['loading']
Performance,"Hi @Miserlou,. I'm not necessarily opposed to this. What exactly would the dry-run do? For example, would it simply check if the input files exist, try to load the index, etc.? This seems like it could be useful functionality, though, in my experience `--dry-run` commands usually aren't effectful (i.e. they usually don't create directories or output files). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/189#issuecomment-362155044:155,load,load,155,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/189#issuecomment-362155044,2,['load'],['load']
Performance,"Hi @Miserlou,. It looks like the index was not written completely / successfully. Do you have a (binary) copy of the index being loaded? . --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442529011:129,load,loaded,129,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442529011,1,['load'],['loaded']
Performance,"Hi @Munfred ,. Apologies for the delayed response.; Thanks for your very important question. We are aware of the problem and are extensively working on improving the downstream processing of the alevin output. Unfortunately, in current form there is no other direct way of loading alevin output matrix. We are thinking of alternative options like using `loompy` but it's a work in progress. We will definitely inform here once we have a simpler working version.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/354#issuecomment-490091075:273,load,loading,273,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/354#issuecomment-490091075,2,['load'],['loading']
Performance,"Hi @PlantDr430,. Thanks for the context! As always, we'd be interested in learning anything interesting you find about the general behavior of salmon in different contexts and with different parameter settings etc. Out of curiosity, when you mention that genes perform ""better"" with one or another `--scoreExp`, is it the case that this is data where you have some sort of ground truth expectation for the abundance of the primary vs. spliced forms? If so, super interesting!. One other thought I had about this. While it is true, as I mentioned in my original post, that the conditioning on the transcripts is _fundamental_ in the case of salmon and other transcript expression tools that don't, themselves, try to assemble new transcripts, it's not necessarily true that there is no evidence in the quantifications that something my be awry. Specifically, I noticed that you are using posterior confidence estimation (bootstrapping). We actually have a [recent paper](https://www.biorxiv.org/content/10.1101/2020.04.07.029967v1.full) that discusses how to use the uncertainty estimates from salmon (though we rely on the Gibbs sampler rather than bootstrapping) to group together transcripts whose abundances cannot be individually estimated with confidence (with evidenced provided by the posterior samples). It might be useful to identify such cases in your analysis. Let me know if there's any other way I can help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633091638:261,perform,perform,261,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633091638,2,['perform'],['perform']
Performance,"Hi @Ray6283,. It seems you are asking about the EM/VBEM algorithm in general. I would say your description is _almost_ right, except this part:. > Then using p_ij s , we put f_j to transcripts with highest probability , say t_jm , we do this for all fragments, so for each fragment we have assigned unique transcript. So we can have new eta, call it eta_1 ( because we have abundance). Specifically, the EM algorithm does _not_ do ""hard"" assignment. That is, at no point during the algorithm, is a fragment fully assigned to a specific transcript (unless it was uniquely mapped there). Rather, the EM algorithm performs ""soft"" assignment. So, consider we have a fragment $f_j$ that maps to two transcripts $t_{j1}$ and $t_{j2}$. The EM algorithm will ""partially"" allocate this fragment to each of the transcripts. Specifically, it will allocate them proportional to $P(f_j \in t_{j1}) \propto P(t_{j1} \mid \eta) P(f_j \mid t_{j1})$ and $P(f_j \in t_{j2}) \propto P(t_{j2} \mid \eta) P(f_j \mid t_{j2})$ respectively. Then, in the ""M"" phase of the EM algorithm, one calculates the total mass arising from a transcript $t_i$ as $\sum_{f_j \text{ such that } f_j \text{ maps to } t_i} P(f_j \in t_i)$ (one sum). Computing these abundances for all $t_i$ gives us our next estimate of $\eta$, and then we can go back and re-compute the probabilities $P(f_j \in t_{j1})$ etc. This is done until convergence. _Originally posted by @rob-p in https://github.com/COMBINE-lab/salmon/discussions/889#discussioncomment-7304773_",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/890:611,perform,performs,611,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/890,1,['perform'],['performs']
Performance,"Hi @RoebideBruijn,. If you've already run `cmake ..`, you must `rm CMakeCache.txt` and `rm -fr CMakeFiles` before running `cmake -DFETCH_BOOST=TRUE`. This is because CMake will cache variables between runs, and it won't properly interpret the flag to fetch boost. Also, can you show the entire sequence of steps you're executing to build? It looks like the camke file can't be found. Are you running cmake from within a build directory, or are you running it from the top-level directory?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449035144:177,cache,cache,177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449035144,1,['cache'],['cache']
Performance,"Hi @SSaleem94,. As the message suggests, your command is missing the required `--output` argument. Of course, it seems your command includes `-o`. The rest of the errors suggest that the command line is not being properly parsed. It looks like the part after the first line break is not being interpreted as a continuation of the same line. I think this is because the line extension character in the shell is not `/`, but is `\`. Maybe try the following:; ; ```; F=$(cat file_names.txt); for i in ${F}; do; F1=../processed_fastq/${i}_R1_001_val_1.fastq.gz; F2=../processed_fastq/${i}_R2_001_val_2.fastq.gz; echo ""performing salmon quant on ${i}""; salmon quant -i gencode_v43_index -l A -1 ${F1} -2 ${F2} -p 64 \; --validateMappings --writeUnmappedNames -o ${i}; echo ""finish quantifying ${i}""; done; ```. **Also**, as is suggested by the `salmon` message itself, you may want to consider upgrading to the latest version of `salmon`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/854#issuecomment-1599169394:614,perform,performing,614,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/854#issuecomment-1599169394,1,['perform'],['performing']
Performance,"Hi @alexg9010,. Thanks for the info. I grabbed this transcriptome and indexed it, and then I grabbed the gtf file and executed this `quant` command with the same parameters (except, of course, for the read set). Unfortunately, I was unable to trigger the same behavior. On my machine (Ubuntu 16.10 x86-64) the index loaded successfully and quantification completed. Can you provide some more details about the system on which you are running? Would you be able to share the actual index file that you created? In relation to [issue 209](https://github.com/COMBINE-lab/salmon/issues/209), is the index being used on the same machine where it was created (from what you've posted, however, I believe it is)?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376380132:316,load,loaded,316,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376380132,1,['load'],['loaded']
Performance,"Hi @alexvpickering ,. Thanks for raising the issue. It seems #377 and #379 are connected .; Alevin is in fact suppose to output whitelist.txt file when provided with the flags you provided.; I think what's happening in your case is since `--keepCBFraction 1`, alevin is using all the CB for quantification and it couldn't find (any or very low) CB from the low confidence region needed for the whitelisting. ; Basically in the above screenshot, alevin never finished. It should have failed more gracefully, I'll make sure of that in the next release. In the meantime you can use the exit code 0 or ""Finished Optimizer"" log for successful finish. Also, try playing with the lower values for the `keepCBFracion` may be around (0.4 / 0.5) and `--freqThreshold` for changing the minimum frequency of a CB to consider, currently set to 10. You can also follow https://github.com/COMBINE-lab/salmon/issues/362 for more details.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-502818453:608,Optimiz,Optimizer,608,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-502818453,1,['Optimiz'],['Optimizer']
Performance,"Hi @amaer,. The warning suggests that the gff parser cannot even find a transcript with the given name (in the example you provided `ENST00000619185.1`). Does such a transcript exist? Can you grep for it. The string must match exactly (version number and all). The gff-based parser to do the transcript to gene mapping is quite picky, as gff & gtf files are often quite ill-formed. My top suggestion would be to do transcript -> gene abundance aggregation using [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html). The other option is to provide Salmon with a TSV mapping the transcripts to genes, as this eliminates all of the parsing problems (at the cost of pawning them off on the user, who must parse the questionable gtf file). However, tximport is the recommended strategy, since it can perform average gene length normalization across multiple samples (rather than just per-sample), which is useful for downstream DE.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365950366:820,perform,perform,820,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365950366,1,['perform'],['perform']
Performance,"Hi @annajbott ,. Thanks for your question.; It's an expected behavior. The idea is to dump some low confidence CB as well for certain kind of downstream processing. You'd see a file `whitelist.txt` as well in the output alevin folder which should contain whitelisted CB names (4340 in your case). You might have to filter those matrix out after loading the full matrix to get cells only passes the whitelisting filter. Please checkout [tximport](https://github.com/mikelove/tximport) to import the matrix in R, it's very efficient to load. In case you need some stats regarding the resource usage check [EDS](https://github.com/COMBINE-lab/EDS).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/428#issuecomment-530430735:345,load,loading,345,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/428#issuecomment-530430735,2,['load'],"['load', 'loading']"
Performance,"Hi @apredeus,. In short, what you explain in the first paragraph is right and is the expected behavior. However, to simplify the parsing algorithm (i.e. to ensure that BAM input can be parsed in bounded memory), both `salmon` and `RSEM` require that all of the alignments for a given read are adjacent within the input BAM file. If this is violated, they will be treated as different reads. In other words, if you have something like:. ```; read1:aln1; read1:aln2; read1:aln3; read2:aln1; read2:aln2; read2:aln3; ```. then in total, 2 ""reads"" worth of mass will be assigned (probabilistically across the targets). However, if you have. ```; read1:aln1; read1:aln2; read2:aln1; read1:aln3; read2:aln2; read2:aln3; ```. Then there will be *4* total reads assigned. Each time the query name (read name modulo 1/2 of a paired-end read) changes in the BAM stream, it is assumed to be a new read, and its alignments are dealt with separately. Both Bowtie2 and STAR (when projecting genomic alignments to the transcriptome) will follow this convention by default, but I'm not certain the same is true for other aligners. Again, this restriction is present in both `RSEM` and `salmon`, and it's an optimization that is made because otherwise there can be unbounded distance in the worst case between the different alignments for a read and so the parser would either have to hold all alignments in memory (which is very bad), or make many passes over the input BAM (which is also very bad) to perform quantification. Let me know if you think this may be the issue in your case. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/844#issuecomment-1518485720:1190,optimiz,optimization,1190,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/844#issuecomment-1518485720,4,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"Hi @cfischer1991,. Thanks for the report. There have certainly been _a lot_ of improvements and changes to salmon between v0.8.1 and v1.3.0. The built-in mapping functionality has been largely overhauled. However, I can see that you're not using that here (you're quantifying from alignments). There have been a number of improvements in the alignment-based codepath as well. However, I'd guess that one of the biggest differences in the results you're seeing is due to a changes in the variational Bayes prior that happened between these versions. Specifically, the prior was adjusted to be smaller, and the default was changed from a `per-nucleotide` prior to a `per-transcript` prior. You can try and achieve the newer functionality in 0.8.1 by setting `--perTranscriptPrior` and `--vbPrior 0.01` and seeing, under those settings, how differently things look between 0.8.1 and 1.3.0. *Also*, another important change is in the handling of _incompatible_ alignments ‚Äî alignments that do not match the prescribed library type. The incompatibility prior used to be set to a small but non-zero value by default `9.9999999999999995e-21`, but has since been changed to `0` by default. Both of these changes in the default have been results of a lot of internal testing suggesting these settings improve quantification results _in general_ (of course, given the complexity in of the quantification problem, there is likely no universal set of parameters that are optimal with respect to every experiment). I'd suggest trying to set these parameters to be the same between versions and to see how much of the variance is controlled by these changes in default values. Then you can determine which settings you believe make more sense in your context, with the understanding that the newer settings have been chosen, in general, to optimize quantification accuracy. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/562#issuecomment-674855490:1826,optimiz,optimize,1826,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/562#issuecomment-674855490,1,['optimiz'],['optimize']
Performance,"Hi @charlesfoster,. Thanks for opening the issue. The second run looks like it ends before there is any information about mapped reads. Have mappings started to be reported at that point? I wonder if there is some issue related to the loading of the index. I have a few suggestions that may be worthwhile to try:. 1) Do you observe the same problem if you index only the transcriptome (i.e. if you don't also include the genome as a decoy)?. 2) If you are using nfcore/rnaseq you can also consider using the STAR => salmon path. Of course, I'm interested in addressing whatever the underlying issue here is anyway, but it's worth noting that this may be a viable alternative to allow you to process all of these samples using the nfcore pipeline in the meantime. This will align the reads to the genome using STAR (which gives the benefit of having a full decoy), project them to the transcriptome, and then quantify them. Also, if you can share a set of problematic reads (or even a subset of them that will reproduce the extreme slowness problem) privately, that would be very helpful in debugging. In addition to trying to debug what's going on here, I'd probably also try running them through [piscem](https://github.com/COMBINE-lab/piscem). While this isn't yet an actual substitute for salmon, it will help isolate if the problem is directly related to the index or something else. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830#issuecomment-1441139338:235,load,loading,235,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830#issuecomment-1441139338,1,['load'],['loading']
Performance,"Hi @cljacobs,. Thank you again for the detailed info! Just to verify, what you are indexing here is the transcriptome ([this](ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M24/gencode.vM24.transcripts.fa.gz) file), using the genome ([this](ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M24/GRCm38.primary_assembly.genome.fa.gz) file) as decoy? Both the memory requirement and _definitely_ the time requirement are something that I've not been able to reproduce. I wonder if you could say something about the disk where the index is being written and where the program is being run. If this is all being done on NFS partitions, would it be possible to write the index to a local scratch on the node to see if disk access times have anything to do with the performance? I am scratching my head a bit about the memory though, because I don't have a good explanation for the discrepancy on those numbers.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590565684:791,perform,performance,791,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590565684,1,['perform'],['performance']
Performance,"Hi @cljacobs,. There was at least one unnecessarily large allocation within our pufferfish code, and now Ilia has also massively optimized the intermediate disk space usage behavior of TwoPaCo. An updated binary that incorporates these changes can be obtained [here](https://drive.google.com/open?id=1QHYCT3Vs9bRD7UmJY6JJKjlzmmUE4wRl). If you have a chance, it would be fantastic if you could test this out and see how the resource requirements change for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-587082126:129,optimiz,optimized,129,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-587082126,1,['optimiz'],['optimized']
Performance,"Hi @come-raczy,. Thanks for reporting this, it is addressed now in commit efe26b1ca2ced305256357e3b2e95f0e51e3376d. While the function that returns this value is called in two places `normalizeAlphas()` and `writeAbundances()`, the latter of these is actually deprecated and so is not used (we should clean up that code). So, while this value should clearly be initialized, the only potential effect here is through `normalizeAlphas()`, is called before the optimization, and which modifies the alphas that will be used for setting the _initial conditions_ of the VBEM. Therefore, the effect is likely to be limited since, even if the value of `totalCount_` was incorrectly initialized, it should only affect the initialization condition of the optimization. Thank you again for the detailed bug report, and the patch! This is now fixed in develop and will be in the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/355#issuecomment-480004146:458,optimiz,optimization,458,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/355#issuecomment-480004146,4,['optimiz'],['optimization']
Performance,"Hi @dritoshi ,. Thanks for your request. I'd be happy to add the support for Quartz-seq2 into alevin but it'd be great if you can answer a few questions for us. Is it possible to share some reads/fastq file on which we can test alevin ? Also, please excuse my ignorance, what type of PCR amplification is performed in `Quartz-seq2` protocol, is it CelSeq type IVT (linear) amplification or Drop-Seq type template switching PCR amplification ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-521747003:305,perform,performed,305,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-521747003,1,['perform'],['performed']
Performance,"Hi @ebecht ,. Thanks for raising the issue. In the latest release we have significantly modified alevin to perform online feature creation and whitelisting. We hope that this might fix the memory related issue which you were observing on the clusters. Do let us know how it worked out for you. PS: Nice work on your recent [preprint](https://www.biorxiv.org/content/10.1101/648733v1), it raises very important questions. On the similar note, we also released a preprint today, can be found [here](https://www.biorxiv.org/content/10.1101/657874v1). Do let us know your thoughts !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-498322884:107,perform,perform,107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-498322884,1,['perform'],['perform']
Performance,"Hi @farshadf,. What exactly is the difference here (i.e. where are those reads going in salmon)? STAR doesn't perform stranded alignment. You can trying using the `-l U` library flag for salmon to see if it's a strandedness issue. In general, I'd always recommend using the latest version of salmon, which currently is 1.8.0 (though I doubt there would be a difference related to handling of stranded reads here). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-1145469445:110,perform,perform,110,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-1145469445,1,['perform'],['perform']
Performance,"Hi @gamabunta313,. When you say `mapping-mode`, do you mean that you are passing a SAM file _into_ salmon rather than passing the FASTQ file and letting it perform the mapping itself? Because salmon makes use of a statistical inference procedure to determine the ultimate allocations of reads to transcripts, you cannot just count up the reads ""mapped"" to a transcript to obtain the count you see in the `quant.sf` file. Rather, when you see a read mapped to a transcript in the SAM/BAM file, you should interpret this as the read _could_ be assigned (most likely proportionally) to the transcript. The `--writeMappings` option is primarily intended for the mode where `salmon` performs the mapping itself, rather than the mode where aligned reads are provided as input. What does your alignment pipeline look like upstream of salmon?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245687786:156,perform,perform,156,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245687786,2,['perform'],"['perform', 'performs']"
Performance,"Hi @izaakm,. This segfault is unlikely related to the issue here, since that happened in ""mapping mode"" (salmon performing mapping itself), and yours is happening in alignment-based mode (you're feeding SAM files to salmon). Does it fail to occur when you provide _either_ of the SAM files to salmon? That is, does it run to completion with both `data/processed/bwa-mem/SRR10571655.sam` and `data/processed/bwa-mem/SRR10571656.sam` individually? Also, what if you combine them via a pipe (i.e. something like):. ```; ./src/salmon-latest_linux_x86_64/bin/salmon quant --threads $(nproc) --libType U -t GRCh38_latest_rna.fa -a <(cat data/processed/bwa-mem/SRR10571655.sam <(samtools view data/processed/bwa-mem/SRR10571656.sam)) -o _tmp/ ; ```. the double redirect is just to make sure the header isn't included in the second sam file. Also, is the reference that you are passing to the `-t` option identical to the one with which bwa-mem was run? If the problem persists, we might need the sam/bam files to track it down further, since I imagine it may be data-dependent. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707338358:112,perform,performing,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707338358,1,['perform'],['performing']
Performance,"Hi @jashapiro,. So there are definitely a few things going on here. The first is that you correctly diagnosed the missing cmd_info.json information when `alevin` is run in RAD mode. That was simply an oversight, and there is no reason that file shouldn't have been written. Second, there is also useful information that belongs in `meta_info.json` in the `aux_info` directory (like the SHA hash of the reference sequences); that was also missing but has now been added.; ; In addition to salmon's `alevin` command, each step of `alevin-fry` also writes some useful metadata when it executes. For example, there is a json file written by the `generate-permit-list` step, one written by the `collate` step, and one written by the `quant` step. We've never run into the problem of the output of `alevin-fry` overwriting the output of `alevin` because we use a directory structure where the output quantifications reside in a separate directory from the input RAD file. However, I can now see that if you're writing the quants in the same place as the input, then there will be a conflict in the file names, and the existing files will be overwritten with the new ones. I agree that both tools output useful information. I'm a *bit* ambivalent about assuming the salmon-generated files exist, and merging them into one output file, as I think there might be cases where those files aren't present and `alevin-fry` should still run properly since it doesn't require them to perform it's processing. One option would be to rename the `alevin-fry` output files to prefix/postfix them so they don't collide with the salmon files even if they live in the same directory. Then, one could (now or later) write a small command to merge the relevant json files into a unified output if that would be more convenient downstream. Let me know your thoughts. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883497669:1469,perform,perform,1469,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883497669,2,['perform'],['perform']
Performance,"Hi @jblachly,. Thanks for pointing this out. The underlying parser we use should also support gff (&gff3), so I should probably just expand the extension set. I'll ping back here once the relevant changes have been made on the develop branch. I'll also note that, generally, we now recommend [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html) as the way to aggregate transcript-level abundance estimates to the gene level, since it provides some nice multi-sample functionality and also allows the user to choose from a few different ways in which the aggregation can be performed. If you're doing any of your downstream analysis in R, it's worth a look. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-272709627:598,perform,performed,598,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-272709627,1,['perform'],['performed']
Performance,"Hi @jeremymsimon,. I've discussed the support for SPLiT-seq/ParseBio with @Gaura in some depth. Honestly, I think the cleanest solution right now is just to have a more streamlined (and streaming) way to match / replace the random hexamers upstream of alevin-fry. By my understanding, if we can simply replace barcode 1 appropriately (as your Perl script currently does), everything should work downstream in alevin/alevin-fry.; ; To that end, I've thrown together a small rust program based on your Perl script. Currently that lives [here](https://github.com/COMBINE-lab/splitp). It reads the same basic parameters as the Perl script, and writes its output to stdout so that it can be used with named pipes. For example, something like:; ; ```; <normal salmon command> -1 read_file_1.fq -2 <(splitp --read-file read_file_2.fq --bc-map bcSharing_example.txt --start 79 --end 86 --one-hamming); ```. which will transform the second fastq file and stream the transformed reads out which can then be read by alevin-fry. One important thing to note is that while *alevin* requires the input reads to be a real file (i.e. you can't stream reads in because it does 2 passes), if you are mapping these reads for processing with *alevin-fry* you can use the process substitution trick above. As you hinted, this program works considerably faster than the Perl script. For example, for the first 10,000,000 reads in `SRR6750042`, the Perl script took 2m 48s to transform the reads and `splitp` took ~6s (if the output wasn't being written to a file on disk it took <4s). This should generally be fast enough to not be a speed bottleneck. So, perhaps the next step is to try to help you walk through this approach with a test dataset (and ideally using alevin-fry) to see if things are turning out as expected?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-961598108:1617,bottleneck,bottleneck,1617,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-961598108,2,['bottleneck'],['bottleneck']
Performance,"Hi @juugii ,; Thanks for the very important and interesting discussion.; You are right, for the calculation of sequence saturation one *might* not need the exact deduplicated UMI count **but** I had to bring that part into the discussion as it was mentioned that you wanted to compare different deduplication strategies. I think your suggestion makes sense and mostly aligns with the definition being used by 10x [here](https://kb.10xgenomics.com/hc/en-us/articles/115003646912-How-is-sequencing-saturation-calculated-). Although note they have changed the definition with the new version of the software. Anyhow, the *short answer* to the question of how can we generate that in Alevin environment is -- by post processing the dumpFeatures output of the Alevin run. _long answer_: The difference lies in the term deduplication and the strategy used to perform it. Basically the fundamental unit for deduplication in 10x as mentioned in the link above is a tuple of `(valid cell-barcode, valid UMI, gene) `, while that's not exactly true for us. We can certainly generate it but it does not aligns with the theory of Alevin's deduplication Algorithm. Having said that, I also like your idea of using:; > the gene quantifications from (de)duplicated UMIs, gene quantifications from unique UMIs, using them to have an idea of the amount/ratio of redundant information. However, the above definition reflect more of the duplication rate (at least in terms of the definition defined in *Alevin* manuscript [here](https://www.biorxiv.org/content/early/2018/06/01/335000)) than sequence saturation. **NOTE** the quoted definition was actually the 10x definition of sequence saturation too before it was changed, at least in my understanding. If you need the deduplication rate of each cell you can get that by using `--dumpFeature` flag in the Alevin run and look for file `featureDump.txt`. There will be a dump of multiple features w/ each CB but the second (starting from 0) column of the file gives you ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414784626:853,perform,perform,853,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414784626,1,['perform'],['perform']
Performance,"Hi @k3yavi ,; Thanks for the info!. We are working on an optimized version of SCRBseq and one of the problems we had with the original protocol is the minimum distance between the cell barcodes being too low. So we increased the number of bases. The original protocol was 6 bc and 10 umi. We just switched the 7 position from umi to barcode. We use a known whitelist of barcodes since it's a well plate based protocol. We know that any other barcode are not cells. Is there an option for max distance allowed between BC or UMI?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-402440401:57,optimiz,optimized,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-402440401,1,['optimiz'],['optimized']
Performance,"Hi @k3yavi,; Many thanks for you prompt answer, once again. >When you say you try subsampling the Fastq, did you sample randomly across the full Fastq or chose the top X reads. Yes, I did perform a random subsampling, ie. taking a read with a p probability while reading the fastq files, p being the subsampling coefficient I did mention (pE[0;1]). An implementation of this approach as an option during the transcript quantification would be great. I can provide you with the simple python script I use for the subsampling, but I am not sure if it is the proper way to subsample during alevin quantification. >when you say cellranger subsampling, do you mean the cellranger aggregate pipeline?. Yes, sorry for not clearly stating it. I did use the cellranger aggregate function indeed, which by default subsample the expression matrices with high sequencing depth depending on amount of mapped reads, if I understand well. >Use Alevin w/o any modification to the fastq on both of your sample to generate the gene count matrices. I already did that, in downstream analyses I have a batch effect issue related to the sequencing depth. >that's why we recommend using the Seurat package downstream of the Alevin quantified matrices. I have some experience with downstream analyses with Seurat, Pagoda, Scater, scanpy and a few other tools, and I am aware of batch correction methods like CCA or MNN. But that is not what I am looking for here. I did both CCA and MNN but I loose some important information in the resulting eigenspaces or corrected matrix. I believe the proper way to correct my batch effect is to simply fix the difference between my two libraries, ie. the sequencing depth in this case. As I explained in my first message, cellranger aggregate (subsampling based on the amount of mapped reads) works very well in my case, correct the effect without any loss or modification of important genes in our scientific question. Not CCA or MNN. I would like to be able to do the same from the a",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913:188,perform,perform,188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913,2,['perform'],['perform']
Performance,"Hi @kai2june,. Thank you for the _detailed_ report! It's interesting because (a) those functions aren't doing anything too exotic and (b) CentOS is the OS we use on our continuous integration. We'll try and get a better handle of what is going on here. In the mean time, could you tell us if you see the same behavior with the [pre-compiled binary](https://github.com/COMBINE-lab/salmon/releases/download/v1.4.0/salmon-1.4.0_linux_x86_64.tar.gz) available from the downloads page?. P.S. One other thing worth trying. We've noticed that compiler support for interprocedural optimization isn't terrific. You can try building salmon without this option by passing `-DNO_IPO=TRUE` as an additional cmake flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751366046:573,optimiz,optimization,573,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751366046,1,['optimiz'],['optimization']
Performance,"Hi @kaukrise ,. Thanks for the very interesting question. I don't think there is any theoretical limit wrt the alevin's method, however, it would be interesting to check how does alevin performs when we increase the CB length wrt the running time. The 20 length bound was just for sanity checking and can be increased, like you already did.; I'd be very interested, if possible, in hearing back about your experience with alevin using longer length CB both wrt running time and gene expression estimates generated. Also if I may ask what's the reason behind using this long CB ? Are you expecting tons of real cells, if there is we can think about improving alevin even more, in my experience, we have generally seen individual 10x experiment with ~20k cells max. Even the 1.3M dataset is 164 separate experiments.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-550391177:186,perform,performs,186,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-550391177,1,['perform'],['performs']
Performance,"Hi @kvittingseerup,. No need to apologize, I think it was I who was not clear. What I am saying is that this is *already* the way that Salmon handles such a case. That is, if you have a paired-end read, and one of the reads maps but the other doesn't (due to e.g., adapter contamination or just very low quality), then Salmon will consider the remaining (mapping) end of the read as representative of an entire fragment, and will resolve the fragment origin accordingly during optimization. Generally, not having both ends of a paired-end read leads to increased ambiguity, but this isn't a particularly big problem if it only happens to a generally small fraction of the reads. Further, since you cannot reliably infer the implied fragment length on a transcript from only a single-end read, such mappings will not contribute to the bias model. Again, however, as long as this doesn't happen to the vast majority of fragments, it should have only a negligible effect on quantification and bias correction. Please let me know if this description makes sense. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355881997:477,optimiz,optimization,477,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355881997,2,['optimiz'],['optimization']
Performance,"Hi @litongda007,. Thanks for providing the data; it's very useful. I will continue to poke here a bit, but in a first pass, I loaded up all of the bootstrap samples and did `frame.isna().sum().sum()` for all 8 samples and got 0 on each. So, at least loading the bootstraps this ways, I can't see any NaNs.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638254418:126,load,loaded,126,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638254418,2,['load'],"['loaded', 'loading']"
Performance,"Hi @lubios,. This suggests that the machine was not able to allocate enough memory to perform the requested operation. I would try the following things in order to see if they fix the issue. First, try quantifying without the decoy-aware index. This doesn't provide the benefits of the decoy sequence, but it will ensure that this is, in fact, the problem you are having. If that works, try building the decoy-aware index with the `--sparse` parameter. This will build the sparse index instead of the dense index, which is a bit smaller and may therefore fit in RAM on the machine where you are doing quantification. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-962058307:86,perform,perform,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-962058307,1,['perform'],['perform']
Performance,"Hi @mathog,. > Is it really the case that Salmon cannot use 1.57.0?. It may be able to. We set the minimum required version to the lowest boost version we use in any of our testing machines where we run regression tests. Currently, this is 1.59.0. If you change the relevant `CMakeLists.txt` line, you *really* need to make sure you clear out the CMake cache. You can do this by removing `CMakeCache.txt` in your build directory, as well as the directory `CMakeFiles`. However, it might be easiest just to remove and remake the entire `build` directory. You may also try passing `-DBoost_NO_SYSTEM_PATHS=Bool:ON` to your cmake command. Finally, note that the build system is probably looking for the static libraries --- you can elide that preference by modifying [this line](https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L222). Finally, since salmon uses C++11, it's important that whatever boost you link against exposes a C++11 compatible ABI. Unfortunately, `FindBoost.cmake` is the most finicky of the module finding packages I know about üò¶. If you use `-DFETCH_BOOST=TRUE`, then CMake will fetch a recent boost and build the libraries it needs and link them statically. I realize you want to avoid this, so hopefully one of the ideas above will help.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-396781869:353,cache,cache,353,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-396781869,2,['cache'],['cache']
Performance,"Hi @mishaprochazka and @jdidion,. Thanks @jdidion for pinging me on this. Somehow, Gmail has decided that all GitHub notifications (except those that explicitly tag me, but somehow I missed this one) should go to SPAM. So, I've been missing some of the newer issues here. The short answer is that the documentation needs to be updated. When salmon was originally published, we made use of [RapMap](https://github.com/COMBINE-lab/RapMap) as the underlying mapper, which performed quasi-mapping against an index that consisted of a suffix array and a hash over k-mers pointing to prefixes in the suffix array (similar to the strategy used by STAR, but using much longer k-mers to improve lookup speed). We referred to this index as the quasi-index. As the software evolved and we continued to improve the mapping methodology, we eventually transitioned over to an index based on [our pufferfish data structure](https://github.com/COMBINE-lab/pufferfish). In addition to the new data structure, this coincided with our move over to selective-alignment as the mapping algorithm, and all of this happened at the 1.0.0 release (this is why, for example, indices built before 1.0.0 are not compatible with salmon > 1.0.0; a topic on which there have been a few GitHub issues). However, given the fact that the documentation and software are linked only through manual human intervention (we haven't leveled up to e.g. having salmon be a [literate program](https://en.wikipedia.org/wiki/Literate_programming) yet), these two sometimes get out of sync. This is an instance of that. We have maintained the functionality of the `--writeMappings` feature, and in fact, even augmented it. However, we have not replaced the antiquated `quasi-index` terminology in the documentation. The TLDR is that you can use `--writeMappings` with the index you built with the `salmon index` command, and it should work fine. If you are mapping against an index without decoy sequences, then the output format will be basically ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524:469,perform,performed,469,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524,1,['perform'],['performed']
Performance,"Hi @mugpeng,. This is because it is covered by the custom geometry specification (as laid out in the docs). I agree it's nice to have a specific flag for each geometry, rather than to have to e.g. specify the custom geometry each time. We are working on good solutions to that at a higher level (e.g. in our `simpleaf` tool where users can register their own custom geometry specifications and refer to them by name). However, in `salmon`/`alevin` right now, the named geometries are hard-coded, and so to have a specific `--indropV2` flag, that would have to be added to the argument parser and then mapped to the specific underlying geometry in the code. This isn't hard, but as the number of different chemistries proliferates, it's not ultimately a scalable solution. So, the current recommendation would be to use the custom geometry flags as specified in the documentation, or adopt a wrapper like `simpleaf` and add `indropV2` to your custom geometry specification library. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/878#issuecomment-1758171139:753,scalab,scalable,753,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/878#issuecomment-1758171139,2,['scalab'],['scalable']
Performance,"Hi @nh13,. This is not something for which we currently have support or something that we currently plan. I'd be open to it, but I'm honestly not sure how to cleanly do it in the current architecture, and doing so would certainly incur a performance hit. Salmon runs 2 phases of inference; and online phase and an offline phase. The online phase has access to _fragment-level_ information that is then summarized away during the offline phase (like the specific locations of each read, the length of each observed fragment, etc.). That information goes away when the reads are summarized into range-factorized equivalence classes. Moreover, some of the model parameters learned during the online phase will depend (in their details) on the order in which observations are made. Ostensibly, observing the same data in the same order **and issuing updates to shared model parameters from worker threads in the same order** should result in identical values, however this has never been tested and was never a design goal. The reason for this is that differences between runs are within the bounds of the inherent inferential uncertainty of the estimated parameters anyway. That is, if one is relying on a specific value at a level of precision such that a different run of salmon would produce a value different enough to change a downstream analysis, then one is imparting more precision on the estimates than they can provide. Other methods that produce identical results between runs for these values may produce the same output, but the accuracy of the output at that level shouldn't be trusted in this case. The uncertainty of the parameter estimates can be evaluated based on the Gibb samples (or bootstrap replicates) that salmon computes. Of course, the small differences between runs rarely lead to differences in downstream analysis (almost certainly at the gene level and also at the transcript level if you use a differential testing method that is aware of inferential uncertainty). On the ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538:238,perform,performance,238,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538,2,['perform'],['performance']
Performance,"Hi @pdellorusso,. This is because the `--gencode` flag is only relevant during indexing. That is, you should pass the `--gencode` flag to Salmon when building the index, but not when subsequently performing quantification.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/200#issuecomment-368350374:196,perform,performing,196,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/200#issuecomment-368350374,1,['perform'],['performing']
Performance,"Hi @pinin4fjords ,. We have release a new version `v0.14.0`. In the latest version we have added different error codes based on what stage the pipeline fails. The error codes are as follows:. ```; 1: Error while mapping reads and/or generic errors.; 64: Error in knee estimation / Cellular Barcode sequence correction.; 74: Error while deduplicating UMI and/or EM optimization.; 84: Error while intelligent whitelisting.; ```. As we have discussed earlier, you can control the expected behavior by tweaking the following two flags.; ```; --keepCBfraction: A value in (0, 1] i..e what fraction of CB to keep for quantification.; --freqThreshold: default 10, Minimum frequency required to quantify the CB.; ```. Just a heads up, alevin with the current release will by default dump the `dumpFeatures.txt` which contains the per CB level features. Please check the release notes for more details. Closing this issue for now, but feel free to reopen if you face any issue or have question.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-498040072:364,optimiz,optimization,364,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-498040072,1,['optimiz'],['optimization']
Performance,"Hi @ramezrawas,. Can you say precisely what you mean by reproducible? Do you mean that the values in the .sf file are not identical? If so, this is expected behavior. It exists for a number of reasons. The big one is that the initial phase of salmon uses an online inference algorithm so that specific details of the solution are dependent on the order in which the reads are processed (which is random given that multiple threads parse reads and update estimates asynchronously). However, the more important point here is that the inference estimates returned by Salmon (and, for that matter, every other transcript-level expression tool) are the result of a statistical optimization procedure that cannot guarantee a unique global optimal solution (and, in fact, even if a global optimum could be guaranteed, there may be multiple different optima). Thus, there is uncertainty inherent in the statistical problem being solved. Of course, if one ordered updates in the same way and set up the initial conditions precisely the same, there would be convergence to the same result, but any sense of confidence there is illusory. However, Salmon does provide a way to quantify, statistically, confidence in the result. The `--numBootstraps` option will do bootstrap sampling, or the `--numGibbsSamples` option will perform posterior Gibbs sampling. Both of these techniques will provide samples from the posterior distribution, and the variance of these samples will give you some information about the variance in the results that are due purely to the inherent statistical uncertainty in the problem. In the `scripts` folder there is a python script `ConvertBootstrapsToTSV.py` that will convert either the bootstrap or gibbs samples to a easily readable tsv format. These samples represent the estimated number of reads coming from each transcript when sampling from the posterior. These can be used to empirically estimate that statistical uncertainty in the abundance estimates of the different tran",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-259464248:672,optimiz,optimization,672,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-259464248,1,['optimiz'],['optimization']
Performance,"Hi @red-plant,. So, I have some update from our end. @mohsenzakeri dug into the data a bit (specifically `SRR7985407`). What he found is that there are a considerable number of reads (~13%) have long stretches of polyA or polyT that are matching in a hyper-repetitive manner internally within a certain set of transcripts (i.e. these are not matching polyA tails, because those are already trimmed). These matches are, obviously, minimally informative, but we had not special-cased ignoring them yet. Specifically, what seems to be prevalent in these reads are read pairs where one read has polyA, the other has polyT, and the keep matching to the same positions. However, the rest of the reads don't match the transcript, so a bunch of time is wasted on validating (and discarding) these mappings. To test this hypothesis, we made a small change to the mapping algorithm to special case and ignore k-mers that are purely homopolymers. I'll note that in this data, this has no effect on the mapping rate. I get the following performance profile running the trimmed version of this data (having trimmed with `fastp`) using 4 threads, and _without_ the additional `--hitFilterPolicy BOTH` flag. ```; 1306.86user 4.79system 4:42.54elapsed 464%CPU (0avgtext+0avgdata 592704maxresident)k; ```. I was wondering if you might test this altered version out and see if it has a similarly beneficial effect for you as well. Probably, the time will be different, since the processors themselves are, and since I elided all non-essential flags here, but I would hope this version is faster than the current (even with the altered `hitFilterPolicy`). You can find a tarball with the pre-compiled binary [here](https://drive.google.com/file/d/1tPyOPW3Y8l86RS0-zBRLh0wCt3VTpkNw/view?usp=sharing). It should work on any relatively recent linux system.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637568013:1025,perform,performance,1025,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637568013,1,['perform'],['performance']
Performance,"Hi @red-plant,. Thank you for providing the follow-up here. This behavior is very strange! However, I am not sure what is stranger; that 1.2.1 takes ~5x longer for you, or that 1.0.0 is taking > 5H in the first place! I can confirm that I am getting really strange (i.e. slow) behavior on this sample under both versions. It's unexpected because I've never seen a sample take this long before. We are looking into it, and will report back. However, since digging into the data to figure out precisely what is going on may take a little bit, I wanted to ask if you can try something. I think the issue may be resulting from some highly-expressed, ""pathologically"" repetitive sequence. Could you run salmon with the extra command line option `--hitFilterPolicy BOTH`, and let me know if / how the performance profile changes for you?. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636605261:795,perform,performance,795,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636605261,1,['perform'],['performance']
Performance,"Hi @reganhayward,. Thank you for the detailed report. It's interesting that this happens when running with STAR but not when running with selective alignment. However, salmon will attempt to solve the optimization problem with the alignments it is given, regardless of if those come from STAR or from it's built-in selective alignment. While I would generally expect these to be similar, the alignment algorithms are different; see [e.g. the differences between SA/SAF & STAR here](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8). Nonetheless, it is possible that for a small subset of transcripts, the probabilistic allocations are _so_ ambiguous, that you get large swings in the resulting quantification estimates based on tiny variations in where the optimization starts (which is, itself, stochastic due to the asynchronous nature of salmon's online inference phase). One way we can test this hypothesis is as follows. You can run salmon with `--numGibbsSamples 100` and `-d`. This will tell salmon to perform posterior Gibbs sampling (`--numGibbsSamples 100`) and to dump the range-factorized equivalence classes used for offline quantification (`-d`). The Gibbs sampling files will contain the traces for the transcripts in question over the various iterations of the sampling procedure. Transcripts where there is a tremendous amount of ambiguity will tend to have highly anti-correlated posterior samples, and similarly, if you were to consider the abundance output of these transcripts as a *group*, there would be a large reduction in inferential relative variance. In fact, we [wrote a whole paper on this topic](https://academic.oup.com/bioinformatics/article/36/Supplement_1/i102/5870485). Consider this example from that paper:. ![image](https://user-images.githubusercontent.com/361470/101438021-706d3600-38df-11eb-9ada-a54ea9092d2d.png). The x-axis is samples from the Gibbs chains, and the y-values denote the estimated number of reads assigned to both t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115:201,optimiz,optimization,201,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115,4,['optimiz'],['optimization']
Performance,"Hi @rekado,. The order is determined based on how work is pulled from a queue. Specifically, the way quantification works in the first phase is that independent threads pull reads to be processed from a lock-free concurrent queue [e.g. here for paired-end reads](https://github.com/COMBINE-lab/salmon/blob/master/src/SalmonQuantify.cpp#L981). This queue is filled in by parsing threads (e.g. [here](https://github.com/COMBINE-lab/salmon/blob/master/src/FastxParser.cpp#L151)). This is the major source of stochasticity. One other source is that once reads are pulled from the queue, they are mapped and then their contribution to the quantifications is processed in [this function](https://github.com/COMBINE-lab/salmon/blob/master/src/SalmonQuantify.cpp#L165) which, itself, calls update functions to a few classes that are potentially being updated by many threads. I'd be thrilled, of course, if you were able to find a good way to make this process deterministic. To me, however, this seems like a tall task. Best,; Rob. P.S. None of your questions are silly; I'm happy to answer them!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-392962209:72,queue,queue,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-392962209,5,"['concurren', 'queue']","['concurrent', 'queue']"
Performance,"Hi @rhlampe,. Currently, there is no way to prevent the salmon indexer from using more memory if it is needed ot build the index. However, if there is a limit placed by the cluster, it will likely just result in a `bad_alloc` exception from the indexer. The number of sequences alone can tell you a bit about scaling, but the total number of nuclotides being indexed is actually a better predictor of resource usage. How many nucleotides, total, are the references you're considering? While we are working on ways to make the indexing scheme highly scalable, it's worth noting that, to achieve some of it's speed, salmon pre-computes a lot of information it its index (so that the index can become fairly large). One thing I might suggest, if you want to attempt to index and quantify on a very large reference, is to use the `--perfectHash` index in the newest development version of Salmon (pre-release tarball attached below). The latest version (for which the official version should appear soon) represents a number of improvements to index construction. The default indexer has reduced memory usage by ~40%, and the new `--perfectHash` indexer, while somewhat slower, reduces the memory usage even more (by an additional 40-50%). With a fixed memory budget, then, it should allow you to index ever larger references. --Rob. [Salmon-v0.7.3-pre_linux_x86_64.tar.gz](https://github.com/COMBINE-lab/salmon/files/512019/Salmon-v0.7.3-pre_linux_x86_64.tar.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/97#issuecomment-251759242:549,scalab,scalable,549,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/97#issuecomment-251759242,1,['scalab'],['scalable']
Performance,"Hi @rmurray2,. Thanks again for the detailed question (I answered them in reverse order, so that's why I'm saying ""again"" here). There are a few things going on that could be leading to differences. They are, in the order I think they will have an effect on the result:. * You are using RSEM in a mode that is mapping the reads to the entire genome (using STAR) and then projecting the resulting alignments to the transcriptome. You are using salmon in a way that is performing selective alignment against the transcriptome only. We have recently published [a paper](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8) discussing in detail the effect that some of these choices can have on transcript and gene-level abundance estimation. In general, if you don't include the genome as a mapping target, depending on your sample, there may be certain reads that are assigned to the transcriptome even though they have a better alignment to some other genomic location. This is independent of e.g. salmon and RSEM, and you'd observe the same thing if you ran RSEM using e.g. Bowtie2 as the aligner aligning against the transcriptome. Luckily, you can control this source of variation. Salmon, like RSEM, can accept alignments to the transcriptome produced by STAR. If you want to see how big of an effect this is having in your sample, you can align reads to the genome using STAR (and project them to the transcriptome) to produce a BAM file that salmon can quantify. You can check RSEM's script to see exactly how it invokes STAR, but the parameters are something like `--outFilterType BySJout --alignSJoverhangMin 8 --outFilterMultimapNmax 20 --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 --outFilterMismatchNoverReadLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --eadFilesCommand zcat --outSAMtype BAM Unsorted --quantMode TranscriptomeSAM --outSAMattributes NH HI AS NM MD --quantTranscriptomeBan IndelSoftclipSingleend`; note tha",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590:467,perform,performing,467,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590,2,['perform'],['performing']
Performance,"Hi @rob-p ! I try to install Salmon on macOS M1 Max with hombrew (brewsci) ; but I guess the formula is the UNIX one on it. I got :. ```; Benjamin@macbook-pro ~ % brew install salmon ; ==> Downloading https://github.com/COMBINE-lab/salmon/archive/v1.3.0.tar.gz; Already downloaded: /Users/Benjamin/Library/Caches/Homebrew/downloads/b27a343a5c5128c674be4986b6c0bb348bc77d521662866976898bd4768fd8bb--salmon-1.3.0.tar.gz; ==> Installing salmon from brewsci/bio; ==> cmake .; Last 15 lines from /Users/Benjamin/Library/Logs/Homebrew/salmon/01.cmake:; Build system will fetch and use JEMalloc; ==================================================================; CPACK_SOURCE_IGNORE_FILES = /src/PCA.cpp;/src/PCAUtils.cpp;/build/;/scripts/AggregateToGeneLevel.py;/scripts/ExpressionTools.py;/scripts/GenerateExpressionFiles.sh;/scripts/ParseSoftFile.py;/scripts/PlotCorrelation.py;/scripts/junk;/scripts/sfstrace.log;/scripts/SFPipeline.py;/bin/;/lib/;/sample_data/;PublishREADMEToWebsite.sh;/external/;/src/obsolete/;/include/obsolete/;WebsiteHeader.txt;/experimental_configs/;.git/; CC: /opt/homebrew/Library/Homebrew/shims/mac/super/clang; CC version: ; version: 1.0.0; Building basic pufferfish components for salmon; setting -DHAVE_NUMERIC_LIMITS128; -- Could NOT find PkgConfig (missing: PKG_CONFIG_EXECUTABLE) ; -- Could NOT find Jemalloc (missing: JEMALLOC_LIBRARY JEMALLOC_INCLUDE_DIR) ; NO_IPO = FALSE; TBB_LIBRARIES = /tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/external/install/lib/libtbb.dylib;/tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/external/install/lib/libtbbmalloc.dylib; -- Configuring incomplete, errors occurred!; See also ""/tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/CMakeFiles/CMakeOutput.log"".; See also ""/tmp/salmon-20220630-57321-j1f2iv/salmon-1.3.0/CMakeFiles/CMakeError.log"". Do not report this issue to Homebrew/brew or Homebrew/core!. Benjamin@macbook-pro ~ % salmon ; zsh: exec format error: salmon; Benjamin@macbook-pro ~ % ; ```; I try via bioconda but I got a HT",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/787:306,Cache,Caches,306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/787,1,['Cache'],['Caches']
Performance,"Hi @rob-p . A question: Can salmon be made available for ARM based arch?. Context: [AWS has recently launched instances with ARM based processors](https://aws.amazon.com/ec2/instance-types/r6/#:~:text=Amazon%20EC2%20R6g%20instances%20are,real%20time%20big%20data%20analytics.) which claim to have better performance. I would like to test/use salmon workflows with ARM based instances. Thanks in advance,",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/556:304,perform,performance,304,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/556,1,['perform'],['performance']
Performance,"Hi @rob-p . Thanks for getting back. I know there are lots of such instances in the literature which have wordings like ```50% homology``` etc - that's why I shared the book chapter from Eugene Koonin's book and the other references/quotes from Walter Fitch. We both cannot change what has already been published, however, when we write something ourselves, we can change the paradigm and represent things correctly. Also, the preprint paper has similar wordings that you might want to reconsider changing:. ```To obtain homologous sequences within a reference, we map the spliced transcript sequences against a version of the genome where all exon segments are hard-masked (i.e. replaced with N). We perform this mapping using MashMap 20, with segment size 500 and homology 80%. ```. Probably, change the first instance of ```homologous``` to '_identical_' and ```homology 80%``` to' _identity 80%_'. And I do not want to digress from the main issue or **take the sheen away from the great work from your group on the paper**.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499542660:701,perform,perform,701,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499542660,1,['perform'],['perform']
Performance,"Hi @rob-p @k3yavi . A question (or feature enhancement); When I am doing salmon indexing, is there a metadata file that will capture info about the salmon version used for indexing. Why am I asking this: I am developing a high throughput pipeline (with bbmap, bbduk, etc and then salmon) where I use salmon 1.1.0 for quantification - in this scenario, independent users have to build their own salmon indices and I want to trap/capture the situation where the user has used a different salmon version of indexing. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/498:227,throughput,throughput,227,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/498,1,['throughput'],['throughput']
Performance,"Hi @rob-p and @davismcc . A bit delayed, but this relates to the questions I've been asking on the salmon gitter. . First, it's worth pointing out that the new 10x (v2) sequencing is a lot more like other bead methods, where (i) index reads (i7/i5) are for labelling biological samples (ii) read1 contains the combined cell and molecular/UMI barcodes (ii) read2 is the transcript 3' read. So it seems there is now some data format convergence. Either way, I'd guess that ongoing iterations of the high throughput platforms will keep one read for the transcript 3', reserving the other 2 or 3 reads for some combination of the sample, cell and molecular barcodes. . Before thinking about how to best collapse UMIs, there's also the issue of how best to QC the barcodes and beads. Jim Namesh has [some functions](http://mccarrolllab.com/wp-content/uploads/2016/03/Drop-seqAlignmentCookbookv1.2Jan2016.pdf); as does [Vasilis Ntranos](https://github.com/pachterlab/scRNA-Seq-TCC-prep/blob/master/README.md). Arguably this has nothing to do with salmon/kallisto though I think the kallisto guys were smart to include it. It's a good filter even if only for speeding things up. Then it's really what might be the most appropriate demultiplexing of fastqs to allow compatibility between tecnhiques, I guess. I quite like how the kallisto workflow ends up with a fastq per cell together with a matching UMI file. Then at the very least one can ignore the UMIs (perhaps going with what @vals suggests). Not sure if that's helpful. But thought to chime in as somebody we would love to see salmon working on the high throughput single-cell platforms that have sample, cell and molecular barcodes. Even if only to test how worthwhile UMIs genuinely are for most applications. This may be a controversial comment, but I suspect for me UMIs will largely end up the same way as spike-ins: useful for quantifying endogenous RNA recovered per cell but perhaps not all that useful beyond that for low read depth single-",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-265619589:502,throughput,throughput,502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-265619589,1,['throughput'],['throughput']
Performance,"Hi @rob-p,. Thanks for your prompt and detailed reply as usual. I was mostly concerned for seeing it happening only once when there are many more transcripts with no gene associated. Since reporting a warning for each transcript with no gene associated could be too noisy, maybe reporting a warning with the total number of transcripts without annotation would be enough. (And not placing any transcript in the ""quant.gene.sf"" file). Btw, thanks for the possibility to generate a .sam file introduced in version 0.7.2. That's very useful for some of the analyses I'll have to perform with my data. I appreciate that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/98#issuecomment-252642473:576,perform,perform,576,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/98#issuecomment-252642473,1,['perform'],['perform']
Performance,"Hi @rob-p,. We ran the tests you requested and the main problem remains. The memory load is lower than before, but for some reason `Salmon` (0.8.2) only works in the SGE cluster we have access to when we increase the memory limits (just like 0.7.2). (Edit: we used 0.8.2 to build a new index). I'll ask the cluster admins as they might have a clue on how to proceed. ## Low memory test. ### bash script. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=14G,h_vmem=15G,h_fsize=100G; #$ -N step6-salmon_test3.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test3.$TASK_ID.txt; #$ -e ./logs/salmon_test3.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:51:10 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110315; Job name: step6-salmon_test3.gsk_phaseII; Hostname: compute-061; Task id: ; Version Info: This is the most recen",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:84,load,load,84,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['load'],['load']
Performance,"Hi @roryk,. Salmon doesn't currently have the ability to output a pseudobam, but that is definitely possible (and not too difficult). We have a related feature planned; perhaps you could tell me if it suits your use case. However, first, I should mention that if you'd simply like a pseudobam for _all_ the mapping locations of the reads, you can use [RapMap](https://github.com/COMBINE-lab/RapMap). RapMap implements the quasi-mapping algorithm upon which Salmon and Sailfish are based (and RapMap is used as a library in the Salmon and Sailfish codebases). Given an index and set of reads, RapMap will report all of the multi-mapping locations that Salmon and Sailfish would consider during quantification. The other feature we have in the works is to have Salmon optionally output a `.bam` file (with actual alignments) post-quantification. It turns out that, given the quasi-mapping information and the quantification results, taking the extra step from quasi-mapping to an actual _alignment_ can be done fairly efficiently. In this mode, Salmon would make one more pass over the reads and, considering the estimated abundances, sample a single alignment for each multi-mapping read proportional to the relative abundance of the different multi-mapping targets (i.e. it would perform a sampling over the multi-mapping locations that would, in expectation, give the same abundances as the _soft_ assignments computed by the optimization algorithm). This feature will be very useful for [transrate](https://github.com/Blahah/transrate). However, given that your goal is to use outside information to perform the filtering yourself, this option may not be ideal for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/38#issuecomment-175092553:1280,perform,perform,1280,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/38#issuecomment-175092553,6,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"Hi @ryanpe13002,. The bootstrap has no effect on the main `quant.sf` file (that is always the result of the main maximum likelihood estimate). All bootstrap samples are written to the `bootstraps.gz` file. If you load your data with the `fishpond` package in `R`, you can request to load the bootstraps to investigate them. Otherwise, if you use an uncertainty aware tool like [`swish`](https://bioconductor.org/packages/release/bioc/vignettes/fishpond/inst/doc/swish.html) for differential testing, it will make use of the bootstraps automatically to account for inferential uncertainty when performing differential testing. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/818#issuecomment-1354070141:213,load,load,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/818#issuecomment-1354070141,3,"['load', 'perform']","['load', 'performing']"
Performance,"Hi @s1corley . As @rob-p mentions, your paper could help assess different methodologies for quantification and also help optimize salmon further for QuantSeq. I would still like you to check if you have used salmon quant command line correctly for QuantSeq data analysis. Your paper briefly alludes to QuantSeq Forward in the Introduction section of the paper; >The QuantSeq Forward kit has an oligo (dT) primer which contains the Illumina-specific Read 2 linker ... but the Methods section of your paper does not specify if you have used QuantSeq FWD or REV. Page 14 of the PDF from the [Lexogen Website data analysis pipeline for QuantSeq FWD](https://www.bluebee.com/wp-content/uploads/2018/11/015UG108V0201-QuantSeq-Data-Analysis-Pipeline_2018-10-18.pdf) recommends using the below htseq command line. ```; htseq-count -m intersection-nonempty -s yes -f bam -r pos $bam; $resource_dir/annotation.gtf > $bam_dir/read_counts.txt; ```; > QuantSeq is a stranded protocol. For the QuantSeq FWD pipeline the argument -s yes indicates; > stranded in the sense orientation. For the QuantSeq REV pipeline -s reverse is used. Similar to the above htseq command line arguments, I think if you are using QuantSeq FWD, the` libType argument from salmon quant should have been SF` . One way I checked these with my datasets was to run the salmon quant command 3 times - once with `libType A`, once with` libType SF` and once with `libType SR` -- with QuantSeq FWD the estimated counts will be almost same with libType A and libType SF. I echo what @rob-p says - Congratulations once again on the paper.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565653150:121,optimiz,optimize,121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565653150,1,['optimiz'],['optimize']
Performance,"Hi @s1corley,. Congratulations on your publication! The `--noLengthCorrection` flag has been around for a long time (e.g. where it is suggested in the post to which @tamuanand [links](https://groups.google.com/forum/#!msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ)). However, given our limited access to QuantSeq and our limited (student) bandwidth to do extensive testing on alternative tech, we have kept this flag marked as experimental. As I mention above, it was introduced since, _conceptually_, the QuantSeq protocol should not exhibit a length effect and so the one may not wish to account for the length when determining assignment probabilities during the variational Bayesian optimization. However, the empirical testing of this has been limited. Now that your paper is published, and contains what look to be some _very through_ assessment methodologies, we may be able to look into this and determine if there is anything we can do to, perhaps, optimize salmon even more for accurate quantification from the QuantSeq protocol. We would welcome any suggestions or feedback you may have. Congratulations again on the paper!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565474848:685,optimiz,optimization,685,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565474848,4,['optimiz'],"['optimization', 'optimize']"
Performance,"Hi @sagnikbanerjee15,. > We are using Salmon to quantify gene counts for samples in RNA-Seq experiment. We will be using the weights of the equivalence class to perform a calculation for which we require the effective length of the equivalence classes. I checked in the eq_class.txt file under the aux_info directory but I was unable to find it. We are using alignment-based method where we supply a bamfile to salmon. Could you please help us to obtain the effective length of the equivalence classes?. An equivalence class is not an object that has a notion of a length or effective length. Specifically, an equivalence class represents a set of transcripts to which a set of fragments map or align. If you are using the range-factorized equivalence classes (which is what salmon uses by default internally), these represent a set of transcripts to which a set of fragments map or align with very similar conditional probability vectors. Since the equivalence class represents mappings or alignments to a collection of transcripts ‚Äî where each transcript may have an arbitrarily different length ‚Äî there is no such thing as the notion of the ""effective length"" of an equivalence class. Note that the sequence that induces an equivalence class need not even be a contiguous region of the underlying reference (see answer below), and thus the notion of an effective length (or a length in general) is not applicable here. > I have another question. Salmon operates in both lightweight alignment mode and in alignment mode. For the lightweight mode, one needs to first create an index (which is the colored De Bruijn graph). I understand that this index (along with all the equivalence class) remains the same even when gene counts of different RNA-Seq samples are estimated. But I am a bit confused about the alignment-based method. In this case, salmon does not require an index since it has the actual alignments. If we have multiple samples, which are mapped to the same transcriptome will Salmon r",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/579#issuecomment-717279405:161,perform,perform,161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/579#issuecomment-717279405,1,['perform'],['perform']
Performance,"Hi @satta,. Thanks for bringing this to my attention. I am of two minds on this proposal. On one hand, I agree that it is cleaner, in theory, to have a RapMap shared library to which Salmon could simply link. Currently, Salmon pulls in the relevant portions of the RapMap code to call what is essentially an ill-defined public API for mapping. On the other hand, I have two concerns about separating the code at this point, one is major the other minor. The major concern is that both Salmon and RapMap are still very much under active development, core code and even the interfaces are undergoing reasonably rapid changes (thus the versioning < 1.0). This allows me to easily add features that may potentially benefit Salmon to the RapMap codebase, and then to synchronize Salmon releases with particular commits (tags) in the RapMap codebase. The current build system makes it very easy to pull in the appropriately versioned RapMap code. On the other hand, I have very little experience in properly versioning shared libraries so I would have to understand that better and how this could be done without complicating the build process. My _minor_ concern is that I don't know what effect, if any, separating the code into a separate shared library might have on compiler optimizations. Right now, since the relevant RapMap code is compiled alongside Salmon and they are linked together into the same module, certain optimizations may be possible that would not be so when linking to a shared library. My educated guess is that the effect of such optimizations would be negligible, but it's something that may be worth some exploration first. Overall, I'm very open to this idea, but I think I need to do some homework on it before we can commit and undertake the change.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-246027704:1274,optimiz,optimizations,1274,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-246027704,6,['optimiz'],['optimizations']
Performance,"Hi @shalercr,. I agree that if each sample runs as quickly as you see here, it's not a big deal to just re-run them all. Note that, while my avoids ~116 times more (eventually-discarded) alignments than did yours, the difference in the number of discarded _fragments_ (i.e. fragments that had no mapping) is very small ‚Äî¬†~7,000, or 0.023% of the fragments. Thus, despite the huge speed-up, I wouldn't expect many differences in the quantifications. However, I couldn't argue against re-quantifying everything with the new version just for good measure :). When you have a chance, please do let me know if you see this same performance difference using the pre-compiled (linux) binary [here](https://drive.google.com/file/d/1tPyOPW3Y8l86RS0-zBRLh0wCt3VTpkNw/view?usp=sharing). Of course, once we finalize this release (soon), we will push to bioconda so we will also have OSX binaries available. However, I just want to make sure this fixes things on your end as well before the release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644796608:623,perform,performance,623,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644796608,1,['perform'],['performance']
Performance,"Hi @silvanopiazza,. I'm glad Docker is working for you. If you compile from source, you should make sure to include `-DNO_IPO=TRUE` in your `cmake` command if you are compiling on GCC. This is because GCC support for inter-procedural optimization is rather broken currently.. I agree that it's strange to encounter such an illegal instruction. Especially since the machine doing the compiling is an older Xeon (circa 2017). I wonder if there's an easy way to figure out what the instruction is. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1144002615:234,optimiz,optimization,234,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1144002615,1,['optimiz'],['optimization']
Performance,"Hi @sjackman , Thanks for you question. It is indeed a good observation to use salmon for combining separate CB and read-sequence fastq files.; Having said that, we have designed alevin to work with, and tested it on 10x-chromium `cellranger` pipeline which itself has a feature similar to mentioned above by you (enabled by flag `--dumpfq`). This feature takes in two separate files: one with CB+UMI and another with read-sequence, and performs initial whitelisting (knee based , more intelligent whitelisting happens downstream and needs deduplicated UMI counts or one can just optionally provide external whitelist), error corrects the CB, attaches it to the header (although not with tag `BX:Z`) of the read-sequence in the second file, and dumps it to the standard out. I might have to read a bit about `longranger` and its `FASTQ` format, but if you are familiar with the `longranger` pipeline and are sure that it uses 16+10 (CB+UMI) in one file and read-sequence in the second file, then I think you are good to try alevin with `--dumpfq` flag. Let us know how it goes and if you face any problem. . Note: Just put an extra flag `--noQuant` so that alevin knows to stop after dumping the fastq otherwise it will start performing downstream tasks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395174284:437,perform,performs,437,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395174284,2,['perform'],"['performing', 'performs']"
Performance,"Hi @sjaenick,. This is a bug in the compiler which GCC has not yet fixed related to inter-procedural optimization. To compile successfully, please add `-DNO_IPO=TRUE` to the CMake flags. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/664#issuecomment-847978707:101,optimiz,optimization,101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/664#issuecomment-847978707,1,['optimiz'],['optimization']
Performance,"Hi @tamuanand ,. I think these are very important question and thanks for raising the issue.; As you mention, In the preprint we put out two different modes of Selective Alignment:; A) SA: The mashmap and bedtools based pipeline which follows old [SalmonTools](https://github.com/COMBINE-lab/SalmonTools/blob/master/README.md) based pipeline.; B) SAF: Inbuilt salmon pipeline to consume genome and follows [this](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/) pipeline. The distinction between the two comes from how the decoy sequence are actually generated. To answer your question point wise.; 1.) That's correct SAF based pipeline follows the tutorial as mentioned in B above and uses the full genome as decoys.; 2.) That's correct, if a user wan't to run SA method, then they should follow mashmap based tutorial A. This might be useful for situation where the index is too big to fit into the machine's memory.; 3.) That's also correct, yes if you don't provide decoys `-d` you can still run salmon on the transcriptome. We have just enabled the validateMapping option by default, which is also used in transcriptome only mode, currently there is no option to _disable_ it.; 4) That's also correct, we have dropped the quasi-mapping based support from the latest version, If you need to run quasi we have released `0.15` just as a last version into the archive.; 5 & 6) Very good question, short answer is your default pipeline of VBEM is the recommended way. We have to use additional flags `--mimicBT2 and --useEM` while comparing the methods in the preprint. RSEM can only do EM and as we were comparing against Bowtie2 we have to mimic it with more stricter requirements for fair comparison. We expect the performance to be better with VB based optimization and not using `mimcBT2` . @rob-p Feel free to add if I missed something.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549187035:1742,perform,performance,1742,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549187035,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Hi @tamuanand,. Thanks again for your detailed questions and thoughts on this issue. Just to follow-up / expand a bit on what @k3yavi has said (and to answer your other question): Yes, one would imagine that, given the details of the QuantSeq protocol, turning off length correction would make the most sense. The main reason this flag is listed as _experimental_, is simply that it was designed based on the expected characteristics of the protocol. Conceptually, the protocol is performing tagged-end sequencing, and so there should be little-to-no length effect. However, since we haven't done extensive internal validation on QuantSeq data, we have left this flag as experimental until it is further tested by ourselves or others. > Also @rob-p , weren't you referring to the RSEM caveat with QuantSeq data analysis wherein one cannot ask RSEM to disable lengthCorrection and hence the count statistics might be misleading?. Correct; as far as we are aware, there is no way to disable the built-in length-dependent assumptions of RSEM. One could use the `--estimate-rspd` flag to allow learning of a non-uniform read distribution (the equivalent of `--posBias` in salmon), though it's unclear / unlikely if this would be as effective as fully disabling the length correction for this type of tagged-end data. If you have any good empirical assessment mechanism for QuantSeq data, and a chance to test out these different salmon options, we'd be happy to get feedback and discuss details further!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565285540:481,perform,performing,481,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565285540,2,['perform'],['performing']
Performance,"Hi @tomsing1 ,; Apologies for the slow response, I was out of country for a while. Thanks for your kind words and starting a very interesting suggestion.; It‚Äôs fascinating to see, how methods being used in single-cell RNA-seq is coming full circle back to the bulk RNA-seq experiments. We have to do some more digging to say clearly about the caveats of using Alevin with the mentioned 3‚Äô bulk RNA-seq experiments but given the understanding from the picture of the shared image we don‚Äôt see any obvious show stoppers; although below mentioned concerns should be kept in mind while using Alevin for bulk data deduplication:. Alevin solves the problem pretty well for protocols where fragmentation of the cDNA molecule happens post PCR amplification. There might be some concerns about over-deduplication of the UMI if fragmenation happens before amplification. Although in current form, Illumina sample index can be given as an external whitelist to Alevin but user should be aware that Alevin performs a sequence correction step before starting any optimizations.; Alevin is designed for droplets based protocols, where one end of Paired end read is just the CB/UMI (i.e. no read sequence) and therefore Alevin can‚Äôt optimally use the full paired end information of the bulk 3' protocol if its both end has read-sequence for example the ambiguous mapping resolution based on a previously/empirically known approximate fragment length. We would be more than happy to help/discuss, how does the results look in bulk 3‚Äô tagged protocols or if you have particular suggestions about what improvements can be done in Alevin.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/306#issuecomment-439530193:994,perform,performs,994,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/306#issuecomment-439530193,4,"['optimiz', 'perform']","['optimizations', 'performs']"
Performance,"Hi @ulin27,. This isn't a `salmon`-related issue. The script is trying to run an instance of R, and within R to load the `edgeR` package to perform some normalization. It looks like the location you are running this doesn't have `edgeR` installed. I would check in with the people who installed `trinity` on your computer or, if that was you, ask upstream in the `trinity` user group. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/855#issuecomment-1604792956:112,load,load,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/855#issuecomment-1604792956,2,"['load', 'perform']","['load', 'perform']"
Performance,"Hi @vals,. This is very interesting, as we've been doing quite a bit of testing and (to the contrary) have found v0.4.0 to perform substantially _better_ than v0.3.x. Out of curiosity, could you check how v0.4.0 performs _without_ `--useVBOpt`? Obviously, if you continue to see this regression, I'll be happy to try and dig down deeper, but I might need you to provide some testing data. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111538228:123,perform,perform,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111538228,2,['perform'],"['perform', 'performs']"
Performance,"Hi @wmegchel ,. Thanks for the raising the issue.; If I understand correctly, your question is Number of mapped reads != Number of deduplicated reads ? Basically, the quant matrix (and the csv matrix) represents the number of _deduplicated_ reads, which indeed should be less than number of mapped reads. Alevin consumes the reads which are mapped, performs UMI level deduplication and reports them in the `quant_mat.gz`. I am unsure about the 10x part of your question i.e.; > I was able to run the 10x PBMC4k example and there, the sum of the count matrix entries indeed fitted the reported UMI counts and mapping rate. If this is true then something is wrong, as the number of mapped reads should be much greater than (based on the number of PCR cycles) number of deduplicated reads. Hope this answer your question ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-490081966:349,perform,performs,349,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-490081966,1,['perform'],['performs']
Performance,"Hi Avi, thanks for your detailed explanation!. From my understanding: a pre-selection of high-quality cells based on 1) CB frequency - finding the knee point (in the initial whitelisting) and 2) other features (in finalized/intelligent) whitelisting is performed in alevin, while [cell ranger count](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview#cell_calling) does step 1) related to the `--expectCells` number and used an alternative method w/o knee point estimation. . Based on above, the newly included cells w/ increased number of `--expectCells` are also more likely to be filtered out in later steps using criteria such as `min of number of features/reads` detected per sample. But such filtering may not be expected if interests are also on cells with small transcriptomes such as TILs. I will try some downstream filtering to see how many good cells I can get. . Yeah it helps - thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510639440:253,perform,performed,253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510639440,1,['perform'],['performed']
Performance,"Hi John,. Thanks for reporting this. Indeed this is an oversight. The gencode option is applied in quasi-mapping mode during index construction, but there is no indexing step in alignment mode. So, this transformation should be applied when the reference sequences are loaded in alignment-based mode. I'll add this option to alignment-based quant for v0.7.3, which should be coming soon. Thanks again for reporting this. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/95#issuecomment-250509570:269,load,loaded,269,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/95#issuecomment-250509570,1,['load'],['loaded']
Performance,"Hi Kivanc,. Thanks for the kind words, and thank you for the _extremely detailed_ report. Reports like this are a model of what every developer wishes a user did before filing an issue :). First, let me clear up what seems like might be a small source of confusion. Since both of the salmon runs are from v1.1.0, _neither_ of these are making use of quasi-mapping. Specifically, newer versions of salmon _only_ perform selective alignment (and this makes the `--validateMappings` command line argument redundant in newer versions, though we keep it so as to maximize backward compatibility with command line parameters people may be using). So, the main difference between your two salmon runs is inclusion of the decoy set. This almost certainly means that the reads that map in your second set of salmon runs but not your first are being assigned to decoys in the first case. To try and get a better handle on this, could you upload a `meta_info.json` file from both runs? This file lives in the `aux_info` directory, and it will provide information about e.g. how many reads were best mapped to decoys and were discarded for this reason. The guarantee you get from the selective alignment is that, if the fragment is discarded by decoy mapping, it maps _strictly better_ to the decoy than to the non-decoy sequence. There are many reasons this could happen. One is rRNA contamination, another could be that reads are coming from processed pseudogenes that are not properly in your annotation, yet a third is that your sample has a considerable fraction of reads spanning exon-intron junctions (in this case, the read will map better to the corresponding location on the genome, and worse to the annotate transcript where the intronic sequence is not present). Now, figuring out exactly which of these cases you are in is a bit more difficult, but one approach would be to pick one of the samples with the biggest differences and map to the reads to the genome with e.g. STAR or HISAT2 to see what y",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/479#issuecomment-578848875:411,perform,perform,411,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/479#issuecomment-578848875,2,['perform'],['perform']
Performance,"Hi Nick,. No problem at all; sorry for not providing a better explanation (I'm planning on writing one up for when this feature is listed in the next official release). In terms of strategy, my recommendation would be to use the default (the `dense hash`) unless indexing memory becomes a problem. The main differences are the following:; - The perfect hash uses an external memory algorithm to construct the hash function, and so requires less memory.; - Because the perfect hash function is built in external memory, **construction** of the hash using this data structure is sower. I don't have longitudinal benchmarks, but it is somewhere between 2 and 5x slower to populate the perfect hash than the dense hash.; - Once constructed, the perfect hash is _considerably_ smaller, and so quantification on an index built using a perfect hash will require only ~50% of the memory that is required when using a dense hash. Obviously if you're quantifying on the same machine that was able to build the index, this isn't a problem. However, if you're shipping the index to smaller memory computers, then this is something to consider.; - The performance difference in terms of mapping speed is very minimal; the minimum perfect hash can be 5-10% slower than the dense hash, but this difference is usually only a matter of seconds. Also, the total runtime difference can be even less since the smaller perfect hash can be read more quickly from disk than the larger dense hash. So, the standard recommendation would be use the default unless you run into memory problems building the index; in that case, try enabling the `--perfectHash` flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-204069238:1139,perform,performance,1139,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-204069238,1,['perform'],['performance']
Performance,"Hi Rob, . Thanks for the quick reply. I'm looking into it and will try this with an updated install of GCC >= 5.2.; The system default gcc is 4.8.5 but I set it to use a different install using environment modules to load gcc-4.9.2 but some environment variables may not have been set correctly, hence why the build file switches to a lower-version GCC but it isn't clear why it looks for 4.8.2 despite that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422891645:217,load,load,217,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422891645,2,['load'],['load']
Performance,"Hi Rob,. Appreciate the response. . The link for the data should be in here:; https://drive.google.com/open?id=1SDqMrHLx-cbfvD4HDmpxcHitqO3B1ZLR; [https://drive.google.com/open?id=1SDqMrHLx-cbfvD4HDmpxcHitqO3B1ZLR](url); https://drive.google.com/drive/folders/1SDqMrHLx-cbfvD4HDmpxcHitqO3B1ZLR?usp=sharing. I've tried forcing the library type for both version 0.8 and 0.12 as follows:. **For version 0.8 with raw reads**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l IU \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_IU_old/${line} --seqBias --gcBias. The EffectiveLength is again the same (250) for all genes across all samples:; Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250 28.8836 527.392; LOC_Os01g01010.2 2218 250 1.84062 33.6083; LOC_Os01g01019.1 1127 250 0.0547668 1; LOC_Os01g01030.1 2464 250 4.43611 81; LOC_Os01g01040.4 1524 250 0.941635 17.1935; LOC_Os01g01040.1 2508 250 11.5632 211.135; LOC_Os01g01040.2 2482 250 8.02082 146.454; LOC_Os01g01040.3 2583 250 8.55554 156.218; LOC_Os01g01050.1 2039 250 17.2333 314.667. The mapping rate is again similar for all samples:; [2019-03-04 04:42:18.872] [jointLog] [info] parsing read library format; [2019-03-04 04:42:18.872] [jointLog] [info] There is 1 library.; [2019-03-04 04:42:18.928] [jointLog] [info] Loading Quasi index; [2019-03-04 04:42:18.929] [jointLog] [info] Loading 32-bit quasi index; [2019-03-04 04:42:28.958] [jointLog] [info] done; [2019-03-04 04:42:28.958] [jointLog] [info] Index contained 66153 targets; [2019-03-04 04:44:08.443] [fileLog] [info]; At end of round 0; ==================; Observed 18861231 total fragments (18861231 in mo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256:565,load,load,565,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256,1,['load'],['load']
Performance,"Hi Rob,; The cluster behavior/load might explain the indexing behaviour. ; Will keep you posted as I redo with vM25. Thank you again.; Hari",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674870074:30,load,load,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674870074,1,['load'],['load']
Performance,"Hi Ryan,; I was looking at the output matrix. It seems the count values are in scientific notations like e-7. Not sure how that happened and it's not happening at my end. I'll check what can be done. Thanks again for reporting this. Regarding the binary file parsing, we recently optimize the output format for Alevin and have updated the python parser. We are still working on updating R parser, will update here once stable.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-502788751:280,optimiz,optimize,280,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-502788751,1,['optimiz'],['optimize']
Performance,"Hi Shaun!. This is strange! One thing that's strange about it is that this seems to be trying to pull down v0.8.2 rather than v0.9.1 --- is that correct? The stranger thing though is that it seem the ""fetchRapMap.sh"" script isn't being run, which means the following from the CMakeLists.txt is not being executed:. ```; if(NOT FETCHED_RAPMAP); exec_program(${CMAKE_CURRENT_SOURCE_DIR}/scripts/fetchRapMap.sh); set(FETCHED_RAPMAP TRUE CACHE BOOL ""Has RapMap been fetched?"" FORCE); endif(); ```. Any idea why this might be happening? Does the CI environment prohibit this for some reason?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367729441:434,CACHE,CACHE,434,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367729441,1,['CACHE'],['CACHE']
Performance,"Hi Stephen,. So, the variation you see when you re-run salmon multiple times is _expected_ to be different (and _much_ smaller) than the variance you see when bootstrapping. Why is this? When you re-run salmon, the only variance you are seeing is due to small differences in the order of observations / updates from the streaming collapsed variational Bayes phase of the algorithm. This, in turn can have a _slight_ effect on the initialization conditions of the offline phase of the algorithm, and some of the parameters learned for the auxiliary parameters. However, in each run, you are observing _exactly_ the same set of reads and salmon is producing _exactly_ the same set of alignments; only the order and therefore some of the streaming updates change. So, we expect the final estimated abundances to be _very_ similar to each other. However, when salmon performs bootstrapping, it is actually resampling _with replacement_, from the counts of the range-factorized equivalence classes. Roughly, we expect this resampling to be similar to if we re-sampled _with replacement_ from the original set of input reads. That is, we are re-sampling from our population sample ‚Äî the observed set of reads ‚Äî to estimate the variance due to inference. So, for the bootstrap re-samplings, we expect significantly more variance than between subsequent runs of salmon, because the observations from which we are making the inference are actually changing. It is possible e.g. that some uniquely mapped reads may not be chosen in some bootstrap sample (since we are re-sampling the observed read count, but doing so _with replacement_), and so the estimates of sets of related isoforms will change in those samples. Thus, since the observations themselves are changing, we expect the estimates to display greater variance. In fact, this is the main goal of performing the bootstrapping (or Gibbs sampling) ‚Äî to estimate the uncertainty due to inference if we had observed many reads coming from the same under",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362:863,perform,performs,863,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362,2,['perform'],['performs']
Performance,"Hi Victor,. Is it the case that `/n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/spikein/Flox5YFP0_B07_R/index` is an index of only your genes of interest? If so, that would explain what you're seeing. Salmon assumes that some non-zero fraction of reads map in your sample. In this case, I'd presume that if you have some samples where no reads map to any transcript of your gene of interest, then salmon will complain in exactly the manner mentioned above. Now that I think about it, there are actually two different scenarios that can cause the above. The first is if something goes wrong in the optimization (there should be no way for this to happen, and so it would be the result of a bug if it did). The second is actually if there are no mappable reads. That's not the result of a bug, or even an ""error"" per-se, but just very unexpected input (since, in a typical scenario, this would imply the reads are unmatched with the reference). It might make sense to handle this case separately. However, this is certainly what is causing the output in your case, and you can safely assume that here, were it not for this specific check, Salmon would return an estimated count of 0 for all transcripts in the index.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119#issuecomment-278743839:596,optimiz,optimization,596,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119#issuecomment-278743839,1,['optimiz'],['optimization']
Performance,"Hi rob. Ignore my last email. I did it again using this script. #!/bin/bash; #SBATCH -p shared; #SBATCH -c 100; #SBATCH --mem=200G; #SBATCH --gres=tmp:300G; #SBATCH -t 36:00:00. module purge; module load bioinformatics; module load salmon/1.10.1. cd /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/. # Set the path to the Salmon index; salmon_index=""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/salmon_index"". # Set the path to the directory containing all the FASTQ files; fastq_dir=""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed"". # Create an array of left and right read files; left_files=(; P1_H.m_1_221020_L002_R1.fastq.gz P1_H.m_21-29_221020_L002_R1.fastq.gz P2-4-10_221020_L002_R1.fastq.gz P2-6-12_221020_L002_R1.fastq.gz P3_40-48_221020_L002_R1.fastq.gz; P1_H.m_15-23_221020_L002_R1.fastq.gz P1_H.m_24-32_221020_L002_R1.fastq.gz P2-44-51_221020_L002_R1.fastq.gz P3_36-44_221020_L002_R1.fastq.gz P3_41-49_221020_L002_R1.fastq.gz; P1_H.m_16-24_221020_L002_R1.fastq.gz P1_H.m_26-34_221020_L002_R1.fastq.gz P2-45-54_221020_L002_R1.fastq.gz P3_37-46_221020_L002_R1.fastq.gz P3_42-50_221020_L002_R1.fastq.gz; P1_H.m_18-26_221020_L002_R1.fastq.gz P2-10-17_221020_L002_R1.fastq.gz P2-46-53_221020_L002_R1.fastq.gz P3_38-45_221020_L002_R1.fastq.gz P3_43-52_221020_L002_R1.fastq.gz; P1_H.m_19-27_221020_L002_R1.fastq.gz P2-11-18_221020_L002_R1.fastq.gz P2-5-11_221020_L002_R1.fastq.gz P3_39-47_221020_L002_R1.fastq.gz; ). right_files=(; P1_H.m_1_221020_L002_R2.fastq.gz P1_H.m_21-29_221020_L002_R2.fastq.gz P2-4-10_221020_L002_R2.fastq.gz P2-6-12_221020_L002_R2.fastq.gz P3_40-48_221020_L002_R2.fastq.gz; P1_H.m_15-23_221020_L002_R2.fastq.gz P1_H.m_24-32_221020_L002_R2.fastq.gz P2-44-51_221020_L002_R2.fastq.gz P3_36-44_221020_L002_R2.fastq.gz P3_41-49_221020_L002_R2.fastq.gz; P1_H.m_16-24_221020_L002_R2.fastq.gz P1_H.m_26-34_221020_L002_R2.fastq.gz P2-45-54_221020_L002_R2.fastq.gz P3_37-46_221020_L002_R2.fastq.gz P3_42-50_221020_L002_R2.fastq.gz; P1_H.m_18-26_221020_L002_R2.fa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870#issuecomment-1695989396:199,load,load,199,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870#issuecomment-1695989396,2,['load'],['load']
Performance,"Hi rob... Yep, I found it with a binary search of the fasta reference file. On Friday, October 9, 2015, Rob Patro notifications@github.com wrote:. > Thanks for reporting this. Certainly, failure should be more apparent. Out; > of curiosity, is the failure in building the index? It looks like loading; > the index didn't work, so was the space character that caused the problem; > in your reference file?; > ; > --Rob; > ; > ‚Äî; > Reply to this email directly or view it on GitHub; > https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-146996488.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-147008848:293,load,loading,293,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-147008848,1,['load'],['loading']
Performance,"Hi there, I'am using a old version (0.14.1) of salmon and often get a low mapping rate of my samples. This time I got the lowest ratio ever, 0.0417748%. . ```; [2021-04-16 16:40:11.804] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ig; nored.; [2021-04-16 16:40:11.804] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly; specified, it is being set to 0.65; [2021-04-16 16:40:11.804] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorizati; on. rangeFactorizationBins is being set to 4; [2021-04-16 16:40:11.804] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting cons; ensusSlack to 0.2.; [2021-04-16 16:40:11.804] [jointLog] [info] parsing read library format; [2021-04-16 16:40:11.804] [jointLog] [info] There is 1 library.; [2021-04-16 16:40:11.898] [jointLog] [info] Loading Quasi index; [2021-04-16 16:40:11.898] [jointLog] [info] Loading 32-bit quasi index; [2021-04-16 16:40:17.838] [jointLog] [info] done; [2021-04-16 16:40:17.838] [jointLog] [info] Index contained 77,654 targets; [2021-04-16 16:57:15.485] [fileLog] [info]; At end of round 0. Observed 25613538 total fragments (25613538 in most recent round). [2021-04-16 16:57:15.485] [jointLog] [info] Computed 1,663 rich equivalence classes for further processing; [2021-04-16 16:57:15.485] [jointLog] [info] Counted 10,700 total reads in the equivalence classes; [2021-04-16 16:57:15.488] [jointLog] [warning] 0.00162414% of fragments were shorter than the k used to build the index (21).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 15. [2021-04-16 16:57:15.488] [jointLog] [info] Number of mappings discarded because of alignment score : 86,602; [2021-04-16 16:57:15.488] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 124,571; [2021-04",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:962,Load,Loading,962,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['Load'],['Loading']
Performance,"Hi vals,; I don't know the correlation between Salmon and featureCounts pipelines. However, I've just done similar counting with htseq-count (-m union) . The result of gene number is similar (just slightly higher) to featureCounts (w/o multimapped reads). ; https://flic.kr/p/RXy39z; As far as I can tell, count-based methods performs similarly. The number of detected gene is within expectation.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279985466:326,perform,performs,326,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279985466,1,['perform'],['performs']
Performance,"Hi! I'm really sorry for taking so long to get back to you; things have been quite hectic this semester. The reason it's not being show is because it's been placed in a parameter group that is not made visible by default; the `--posBias` option itself is still available. It's definitely still experimental in that it has not been tested nearly as thoroughly as the other bias models. However, it is useable. Once we have performed more testing, it will migrate into the normal options and be better documented. If you gather any useful data while using this flag, we'd love some feedback!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/191#issuecomment-367448963:422,perform,performed,422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/191#issuecomment-367448963,2,['perform'],['performed']
Performance,"Hi!; Thank you for making salmon. Great work!. my command line is ; salmon quant -t /hpc/grid/shared/ngsdb/fasta/gencode.v24.transcripts.no_annotation.fa -l ISR -a RC-140808-00004.tx.bam -p 8 -o salmon_aln --useVBOpt --incompatPrior 0. The end of log file looks like:. 1008 Completed first pass through the alignment file.; 1009 Total # of mapped reads : 53203073; 1010 # of uniquely mapped reads : 14377795; 1011 # ambiguously mapped reads : 38825278; 1012; 1013; 1014; 1015 [2016-08-19 14:45:45.648] [fileLog] [info] quantification processed 53203073 fragments so far; 1016; 1017 [2016-08-19 14:45:45.982] [jointLog] [info] Computed 292761 rich equivalence classes for further processing; 1018 [2016-08-19 14:45:45.982] [jointLog] [info] Counted 53203073 total reads in the equivalence classes; 1019 [2016-08-19 14:45:45.983] [jointLog] [info] starting optimizer; 1020 [2016-08-19 14:45:48.932] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate. I tried dropping the --useVBOpt and it only outputs ""nan"". I also tried --useVBOpt in quasi-mapping base mode.; salmon quant -i /hpc/grid/shared/ngsdb/annotation/gencode/salmon_0.6.1_v24/ -l ISR -1 /hpc/grid/ngsws/btx_clinical/zhanc120/test/longitudinal/fastq/RC-140808-00004_1.fq.gz -2 /hpc/grid/ngsws/btx_clinical/zhanc120/test/longitudinal/fastq/RC-140808-00004_2.fq.gz -p 8 -o salmon --useVBOpt --incompatPrior 0; That worked fine. More on the bam file:; it was generated by STAR with write alignments to transcriptome option. STAR --genomeDir /hpc/grid/shared/ngsdb/STAR/GRCh38_gencode24_100 --readFilesIn /hpc/grid/ngsws/ptx_clinical/zhanc120/test/longitudinal/fastq/RC-140808-00004_1.fq.gz /hpc/grid/ngsws/ptx_clinical/zhanc120/test/longitudinal/fastq/RC-140808-00004_2.fq.gz --readFilesCommand zcat --runThreadN 8 --alignSJDBoverhangMin 1 --outFilterScoreMinOverLread 0.90 --outFilterMatchNminOverLread 0.90 --outFilterMis matchNoverLmax 0.05 --quantMode TranscriptomeSAM --alignEndsType EndToEnd --alignIntronMax 1000000 --o",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/78:855,optimiz,optimizer,855,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/78,1,['optimiz'],['optimizer']
Performance,"Hi!; This is probably not a question for the github, but I wasn't sure where to post; (please redirect me, and I'll happily remove it). I had one small question related to the paper; https://www.biorxiv.org/content/10.1101/657874v1. When performing the benchmarking of all different approaches, the parameters used when testing STAR+Salmon are listed of course. It's mentioned that the parameters of STAR are meant to be kept the same as RSEM uses them in order to get the actual proper comparisons.; All the parameters do look the same, except for one; --sjdbScore; In your paper, this param is not being used, which means that the default value of 2 is active.; RSEM, however, sets this to 1. . I'm not sure if this will affect the results in any major way though, so I just wanted to check if there was maybe a reason behind leaving this value to 2 in the paper. The --sjdbScore value scores alignments with annotated junctions higher over unspliced alignments. ; I'm not even actually sure why RSEM lowers this to 1. ; I was trying to replicate some of your benchmarking, and I was just curious about this one if you have any info that can help out. And again, I probably don't need to mention it anymore, but awesome job with the Salmon! Thanks once more for the awesome software!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/490:238,perform,performing,238,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/490,1,['perform'],['performing']
Performance,"Hi, . I'm new to RNA seq and trying to use Salmon to analyse my dataset. However, it gives an error when I try to run it after downloading the package: . ` ~/Downloads/Salmon-0.8.2_macOX_10.12/bin/salmon`. It gves the following error: . `dyld: Library not loaded: @rpath/libtbbmalloc_proxy.dylib; Referenced from: /Users/rishika/Downloads/Salmon-0.8.2_macOX_10.12/bin/./salmon; Reason: image not found; Abort trap: 6`. I would be grateful for your help. Thanks!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/172:256,load,loaded,256,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/172,1,['load'],['loaded']
Performance,"Hi, ; I am having an issue with quantifying my salmon quantify using the following script:. #!/bin/bash; # get input data; F=$(cat file_names.txt); for i in ${F}; do; F1=../processed_fastq/${i}_R1_001_val_1.fastq.gz; F2=../processed_fastq/${i}_R2_001_val_2.fastq.gz; echo ""performing salmon quant on ${i}""; salmon quant -i gencode_v43_index -l A -1 ${F1} -2 ${F2} -p 64 /; --validateMappings --writeUnmappedNames -o ${i}; echo ""finish quantifying ${i}""; done. And I got this error message :; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Sign up for the salmon mailing list to hear about new versions, features and updates at:; https://oceangenomics.com/subscribe; ###; (mapping-based mode) Exception : [the option '--output' is required but missing].; Please be sure you are passing correct options, and that you are running in the intended mode.; alignment-based mode is detected and enabled via the '-a' flag. Exiting.; quantify.sh: line 19: --validateMappings: command not found; finish quantifying . could you please assist me with that. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/854:273,perform,performing,273,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/854,1,['perform'],['performing']
Performance,"Hi, ; I am writing here, because I think this issue is relevant to both @rob-p and @kvittingseerup. I ran my salmon analysis twice with the most recent gencode annotation [https://www.gencodegenes.org/releases/current.html](url) -> PRI. Once with the `--keepDuplicates` option in the indexing and once without (bec I read this post late..). ; When loadind the data into IsoformSwithcAnalyzer the first time (w/o `--keepDuplicates`), I received the following warning message, ""The annotation (count matrix and isoform annotation) contain differences in which isoforms are analyzed... 875 more isoforms than the count matrix..."". Following the run with `--keepDuplicates`, I now receive ""67 more isoforms than the count matrix"". If I am using the `--keepDuplicates` option, what exactly are there 67 isforms?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410512481:348,load,loadind,348,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410512481,1,['load'],['loadind']
Performance,"Hi, ; the output from the log is shown below. So apparently, everything went well, except for one minor issue... but my gene counts and my transcript count files are empty??; How is that possible; Cheers; Ashok; ```; [2017-07-18 17:14:11.438] [jointLog] [info] parsing read library format; [2017-07-18 17:14:11.438] [jointLog] [info] There is 1 library.; [2017-07-18 17:14:11.485] [jointLog] [info] Loading Quasi index; [2017-07-18 17:14:11.485] [jointLog] [info] Loading 32-bit quasi index; [2017-07-18 17:14:21.207] [jointLog] [info] done; [2017-07-18 17:14:21.207] [jointLog] [info] Index contained 107368 targets; [2017-07-18 17:14:22.320] [jointLog] [info] Automatically detected most likely library type as SF; [2017-07-18 17:22:52.788] [jointLog] [info] Computed 280679 rich equivalence classes for further processing; [2017-07-18 17:22:52.788] [jointLog] [info] Counted 27517563 total reads in the equivalence classes; [2017-07-18 17:22:52.850] [jointLog] [info] Mapping rate = 37.9965%. [2017-07-18 17:22:52.850] [jointLog] [info] finished quantifyLibrary(); [2017-07-18 17:22:52.853] [jointLog] [info] Starting optimizer; [2017-07-18 17:22:52.789] [fileLog] [info]; At end of round 0; ==================; Observed 72421398 total fragments (72421398 in most recent round). [2017-07-18 17:22:52.981] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2017-07-18 17:22:52.990] [jointLog] [info] iteration = 0 | max rel diff. = 9.36177; [2017-07-18 17:22:53.935] [jointLog] [info] iteration = 100 | max rel diff. = 0.0782409; [2017-07-18 17:22:54.889] [jointLog] [info] iteration = 200 | max rel diff. = 0.0347085; [2017-07-18 17:22:55.784] [jointLog] [info] iteration = 300 | max rel diff. = 0.0249461; [2017-07-18 17:22:56.790] [jointLog] [info] iteration = 400 | max rel diff. = 0.0188653; [2017-07-18 17:22:57.752] [jointLog] [info] iteration = 500 | max rel diff. = 0.0157419; [2017-07-18 17:22:58.688] [jointLog] [info] iteration = 600 | max rel diff. = 0.0128394; [20",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/143:399,Load,Loading,399,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/143,2,['Load'],['Loading']
Performance,"Hi, I have noticed that when following the instructions (https://combine-lab.github.io/alevin-tutorial/2018/output-format/) for loading binary data it can sometimes be very slow. I am using the command:; `alevin_df = parser.read_quants_bin('./salmon_folder')`. However loading the raw output of a normal run with ~120k barcodes takes upwards of an hour. Is there another way to load the binary output?. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/354:128,load,loading,128,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/354,3,['load'],"['load', 'loading']"
Performance,"Hi, I have some kind the same error of (https://github.com/COMBINE-lab/salmon/issues/251#issue-341161248). I download the prebuild index from refgenie and I got exactly the same error message. refgenie pull hg38/salmon_sa_index <- I downloaded the 16Gb of the index files. [2020-05-04 21:30:58.648] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2020-05-04 21:30:58.648] [jointLog] [info] parsing read library format; [2020-05-04 21:30:58.648] [jointLog] [info] There is 1 library.; [2020-05-04 21:30:58.701] [jointLog] [info] Loading Quasi index; Exception : [rapidjson internal assertion failure: IsObject()]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. The son files of the index show this;; ls -lrth *json; -rwxrwxrwx 1 usr usr 1007 dic 14 00:41 info.json; -rwxrwxrwx 1 usr usr 96 dic 14 00:44 versionInfo.json. Any idea would be really appreciated,. Kind regards,; Fer",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518:1068,Load,Loading,1068,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518,1,['Load'],['Loading']
Performance,"Hi, I have some kind the same error. I download the prebuild index from refgenie and I got exactly the same error message. . refgenie pull hg38/salmon_sa_index <- I downloaded the 16Gb of the index files. [2020-05-04 21:30:58.648] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2020-05-04 21:30:58.648] [jointLog] [info] parsing read library format; [2020-05-04 21:30:58.648] [jointLog] [info] There is 1 library.; [2020-05-04 21:30:58.701] [jointLog] [info] Loading Quasi index; Exception : [rapidjson internal assertion failure: IsObject()]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. The son files of the index show this;; ls -lrth *json; -rwxrwxrwx 1 usr usr 1007 dic 14 00:41 info.json; -rwxrwxrwx 1 usr usr 96 dic 14 00:44 versionInfo.json. Any idea would be really appreciated,. Kind regards, ; Fer",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-623664770:1000,Load,Loading,1000,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-623664770,1,['Load'],['Loading']
Performance,"Hi, I'm just starting with RNA-Seq and tryed to install salmon on the HPC of my university. However I get following error message when recompiling with ""$ make"". . ```; [ 6%] Built target libbz2; [ 13%] Built target libgff; [ 19%] Built target libbwa; [ 26%] Built target libjellyfish; [ 27%] Performing build step for 'libstadenio'; Making all in io_lib; Making all in progs; libtool: link: /usr/bin/cc -o convert_trace convert_trace.o ../io_lib/.libs/libstaden-read.a -lz -lm -lpthread -llzma -lbz2; /usr/bin/ld: cannot find -lbz2; ../io_lib/.libs/libstaden-read.a(libstaden_read_la-open_trace_file.o): In function `find_file_url':; open_trace_file.c:(.text+0xd26): warning: the use of `tempnam' is dangerous, better use `mkstemp'; collect2: error: ld returned 1 exit status; make[5]: *** [convert_trace] Fehler 1; make[4]: *** [all-recursive] Fehler 1; make[3]: *** [all] Fehler 2; make[2]: *** [libstadenio-prefix/src/libstadenio-stamp/libstadenio-build] Fehler 2; make[1]: *** [CMakeFiles/libstadenio.dir/all] Fehler 2; make: *** [all] Fehler 2. ```. Does this have anything to do with ""bzip2"" or ""libbz2"" and how would I provide missing paths to cmake?; I have bzip2 but not libbz2 availible on my system. I would be gratefull for any help.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/216:293,Perform,Performing,293,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/216,1,['Perform'],['Performing']
Performance,"Hi, Rob, thanks for the quick reply! By the way, great job on salmon!. Using ./ did fix the issue. About the stdout issue, I'm running:. ~/programs/Salmon-0.7.2_linux_x86_64/bin/salmon quant -i /data/reference/salmon/gencode.grch37.v19/ -r test.fastq --seqBias --gcBias --posBias -p 12 --geneMap /data/reference/salmon/gencode.grch37.v19/geneMap.txt --libType U -o x --writeMappings > out.sam. and not all messages are output to stderr (I'm not using 2> ). The ones starting with ### do, but others end up in out.sam. out.sam starts with:. ESC[1m[2016-09-14 11:37:38.908] [jointLog] [info] parsing read library format; ESC[00mESC[1m[2016-09-14 11:37:38.908] [jointLog] [info] There is 1 library.; ESC[00mESC[1m[2016-09-14 11:37:43.996] [jointLog] [info] Loading Quasi index; ESC[00mESC[1m[2016-09-14 11:37:43.996] [jointLog] [info] Loading 32-bit quasi index; ESC[00mESC[1m[2016-09-14 11:37:43.996] [stderrLog] [info] Loading Suffix Array ; ESC[00mESC[1m[2016-09-14 11:38:06.669] [stderrLog] [info] Loading Transcript Info ; ESC[00mESC[1m[2016-09-14 11:38:12.374] [stderrLog] [info] Loading Rank-Select Bit Array; ESC[00mESC[1m[2016-09-14 11:38:12.444] [stderrLog] [info] There were 95309 set bits in the bit array; ESC[00mESC[1m[2016-09-14 11:38:12.700] [stderrLog] [info] Computing transcript lengths; ESC[00mESC[1m[2016-09-14 11:38:12.700] [stderrLog] [info] Waiting to finish loading hash; ESC[00mESC[1m[2016-09-14 11:39:49.792] [stderrLog] [info] Successfully loaded position hash; ESC[00mESC[1m[2016-09-14 11:39:49.792] [stderrLog] [info] Done loading index; ESC[00mESC[1m[2016-09-14 11:39:49.792] [jointLog] [info] done; ESC[00mESC[1m[2016-09-14 11:39:49.792] [jointLog] [info] Index contained 95309 targets; ESC[00mESC[33mESC[1m[2016-09-14 11:40:18.128] [jointLog] [warning] Fragment GC bias correction is currently only implemented for paired-end libraries. Disabling fragment GC bias correction for this run; ESC[00m@HD VN:1.0 SO:unknown",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/90#issuecomment-247078586:754,Load,Loading,754,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/90#issuecomment-247078586,8,"['Load', 'load']","['Loading', 'loaded', 'loading']"
Performance,"Hi,. I am getting the following when building Salmon (gcc/g++ 4.8.2, and boost from `-DFETCH_BOOST=TRUE` when calling cmake). ```; (...); [ 64%] Performing build step for 'libtbb'; cd /opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss && make ""CXXFLAGS= -UDO_ITT_NOTIFY"" lambdas=1 compiler=gcc cfg=release tbb_build_prefix=LIBS; make[3]: Entering directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss'; Created ./build/LIBS_release and ..._debug directories; make -C ""./build/LIBS_debug"" -r -f ../../build/Makefile.tbb cfg=debug; make[4]: Entering directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss/build/LIBS_debug'; ../../build/Makefile.tbb:31: CONFIG: cfg=debug arch=intel64 compiler=gcc target=linux runtime=cc4.8_libc2.15_kernel4.0.9; g++ -o x86_rtm_rw_mutex.o -c -MMD -DTBB_USE_DEBUG -DDO_ITT_NOTIFY -g -O0 -DUSE_PTHREAD -m64 -mrtm -fPIC -D__TBB_BUILD=1 -Wall -Wno-parentheses -Wno-non-virtual-dtor -UDO_ITT_NOTIFY -std=c++0x -D_TBB_CPP0X -I../../src -I../../src/rml/include -I../../include ../../src/tbb/x86_rtm_rw_mutex.cpp; /tmp/ccgalJzL.s: Assembler messages:; /tmp/ccgalJzL.s:628: Error: no such instruction: `xtest'; /tmp/ccgalJzL.s:656: Error: no such instruction: `xabort $255'; /tmp/ccgalJzL.s:665: Error: no such instruction: `xabort $255'; /tmp/ccgalJzL.s:671: Error: no such instruction: `xend'; /tmp/ccgalJzL.s:840: Error: no such instruction: `xbegin .L56'; /tmp/ccgalJzL.s:1012: Error: no such instruction: `xbegin .L73'; /tmp/ccgalJzL.s:1269: Error: no such instruction: `xabort $255'; make[4]: *** [x86_rtm_rw_mutex.o] Error 1; make[4]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss/build/LIBS_debug'; make[3]: *** [tbb] Error 2; make[3]: Leaving directory `/opt/local/salmon-index/resources/salmon-0.4.2/external/tbb43_20140724oss'; make[2]: *** [libtbb-prefix/src/libtbb-stamp/libtbb-build] Error 2; make[2]: Leaving directory `/opt/local/sa",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/20:145,Perform,Performing,145,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/20,1,['Perform'],['Performing']
Performance,"Hi,. I am running salom 0.6.0 on a Ubuntu server. here is my command as well as the STDOUT output:. ```; salmon quant -p 16 --biasCorrect --libType IU -i ~./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ --numBootstraps 100 -o $base <(zcat ${base}_1.fastq.gz ) <(zcat ${base}_2.fastq.gz); Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0 ; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 16 }; # [ biasCorrect ] => { }; # [ libType ] => { IU }; # [ index ] => { ./Salmon/Salmon.index/Homo_sapiens.GRCh38.rel79/ }; # [ numBootstraps ] => { 100 }; # [ output ] => { 61LP1AAXX_8 } ; # [ ] => { /dev/fd/63 }; # [ ] => { /dev/fd/62 }; Logs will be written to 61LP1AAXX_8/logs; there is 0[2016-07-11 09:51:45.206] [jointLog] [info] parsing read library format; lib; Loading 32-bit quasi index[2016-07-11 09:51:45.328] [jointLog] [info] Loading Quasi index; [2016-07-11 09:51:45.736] [stderrLog] [info] Loading Suffix Array; [2016-07-11 09:51:45.771] [stderrLog] [info] Loading Position Hash; [2016-07-11 09:52:13.781] [stderrLog] [info] Loading Transcript Info; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:821,Load,Loading,821,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,3,['Load'],['Loading']
Performance,"Hi,. I am running the latest version of Salmon 0.8.2 and I am getting the following error. I did remake the transcript index with the new version of salmon. I get no errors when i compile or run the ""make test"". . Logs will be written to salmon_output_A9039/logs; [2017-05-08 08:59:23.370] [jointLog] [info] parsing read library format; [2017-05-08 08:59:23.370] [jointLog] [info] There is 1 library.; [2017-05-08 08:59:23.395] [stderrLog] [error] Encountered exception [JSON Parsing failed - provided NVP (SeqHash) not found] when loading index.; [2017-05-08 08:59:23.395] [stderrLog] [error] The index was likely build with an older (and incompatible) version of RapMap. Please re-build the index with a compatible version. Using boost 1.64, Clang 3.9, on a linux box. Any help will be appreciated. Thanks",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/135:532,load,loading,532,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/135,1,['load'],['loading']
Performance,"Hi,. I am using Salmon to quantify single cell RNA-seq data using quasi-mapping. Therefore, I have many different FastQ files (288 to be exact), each for a different cell. Many files have less than a million reads. . I am concerned that performing the 3 bias corrections would introduce a systematic bias in itself between the samples, if the corrections are performed independently on each sample. I imagine that this would cause the read counts to be adjusted to different extents in different samples. This is compounded by the fact that number of reads in different files are so different as that might affect the sampling needed to measure bias. Ideally, I imagine the bias corrections should be performed on all 288 samples as a whole together. i.e. I concatenate all 288 FastQ files and run salmon on the concatenated file. But I would not be able to de-multiplex the reads afterwards.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/165:237,perform,performing,237,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/165,3,['perform'],"['performed', 'performing']"
Performance,"Hi,. I am using Salmon v 1.10.1 do perform selective alignment on paired end RNAseq samples and I have trouble to interpret the output statistics (i.e succesfully mapped pairs ....); Here is my command line on a sample containing 34,462,097 pairs (After cleaning, adapter removal, rRNA trimming). **salmon quant -i $IndexDir -l A -1 $forward -2 $reverse -p 8 --seqBias --gcBias ‚ÄìuseVBOpt --discardOrphansQuasi ‚ÄìconsensusSlack 0.35 --minScoreFraction 0.8 --decoyThreshold 1 -o $OutputDir/$pairname_Output**. Here is the the output statistics of the alignment; [Salmon_quant_output.txt](https://github.com/COMBINE-lab/salmon/files/11768911/Salmon_quant_output.txt). So I have few questions : . 1- Where is idicated the numer of processed pairs, i.e. the number of pairs in the sample ?. 2- Does the mapping rate correspond to the reads that will be used for the quantification (i.e. succesfully mapped and that were above every filtering thresholds) or this % also takes into account the discarded mapping ? This is of great importance to tell if the mapping step is good or not. 3- Counted 20,588,460 total reads in the equivalence classes What does this mean ? Is it the numner of pairs that mapped (discarded and not discarded or only the ones that are kept for quentification). 4- What is the difference between mapping discarded and fragment discarded ? To count the number if pairs that did not map to my reference should I sum Number of mappings discarded because of alignment score + Number of fragments entirely discarded because of alignment score + Number of fragments discarded because they are best-mapped to decoys + Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets. Thanks in advance for your time and answers,,. Florian Rocher",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/852:35,perform,perform,35,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/852,1,['perform'],['perform']
Performance,"Hi,. I have been trying to run the installed salmon version on our HPC cluster on minimap aligned ONT reads and got the following error:. `processed 0 reads in current round/var/lib/slurm/slurmd/job10333001/slurm_script: line 25: 2153273 Bus error (core dumped)`. My script was as follows:. ```; module load salmon/1.9.0-gcc-10.3.0; cd /scratch/prj/ppn_microglia_mod/targeted/transcriptome/clean/transcriptome. for bc in {01..54}; do. salmon quant --ont -t /scratch/users/k19022845/refgenome/gencode.v44.transcripts.fa -l A -a ""combined_BC""$bc""_aligned.bam"" -o ""BC""$bc""_transcripts_quant"". done; ```; Salmon version was `1.9.0`; Transcriptome ref: Homo Sapiens Gencode v.44. The directories were generated for the barcodes and contain `aux info`, `cmd_info.json`, `libParams` and `logs` but the directories/files are empty. The command was run through `slurm` scheduler on HPC cluster. The output log looks like (repeated for `for` loop):; ```; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Sign up for the salmon mailing list to hear about new versions, features and updates at:; https://oceangenomics.com/subscribe; # salmon (alignment-based) v1.9.0; # [ program ] => salmon ; # [ command ] => quant ; # [ ont ] => { }; # [ targets ] => { /scratch/users/k19022845/refgenome/gencode.v44.transcripts.fa }; # [ libType ] => { A }; # [ alignments ] => { combined_BC01_aligned.bam }; # [ output ] => { BC01_trascripts_quant }; Logs will be written to BC01_trascripts_quant/logs; [2023-11-04 16:49:44.093] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-11-04 16:49:44.093] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:single end",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/898:303,load,load,303,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/898,1,['load'],['load']
Performance,"Hi,. I try to follow Alevin tutorial on 'How to Use alevin with Seurat' and have an issue with tximport(). I found this step is extremely **slow**. For **quants_mat.gz** file with **4.7M** in size, it took **12** minutes to finish. Is this common for alevin generated single cell data? . Thanks!; Lei. ## Test data: 10x 1k_PMBC_v2; ### Intel(R) Xeon(R) CPU E5-2698 v3 @ 2.30GHz; ## alevin.log; [2019-07-18 14:13:59.692] [alevinLog] [info] Loading Header; [2019-07-18 14:13:59.692] [alevinLog] [info] Loading Transcript Info; [2019-07-18 14:14:00.014] [alevinLog] [info] Found all transcripts to gene mappings; [2019-07-18 14:14:00.023] [alevinLog] [info] Processing barcodes files (if Present); [2019-07-18 14:15:51.124] [alevinLog] [info] Done barcode density calculation.; [2019-07-18 14:15:51.124] [alevinLog] [info] # Barcodes Used: 76866957 76921082.; [2019-07-18 14:15:51.553] [alevinLog] [info] Done importing white-list Barcodes; [2019-07-18 14:15:51.853] [alevinLog] [warning] Skipping 575996 Barcodes as no read was mapped; [2019-07-18 14:15:52.078] [alevinLog] [info] Total 161284 white-listed Barcodes; [2019-07-18 14:15:52.259] [alevinLog] [info] Total 5.95793% reads will be thrown away because of noisy Cellular barcodes.; [2019-07-18 14:15:58.709] [alevinLog] [info] Done populating Z matrix; [2019-07-18 14:15:58.741] [alevinLog] [info] Total 56814 CB got sequence corrected; [2019-07-18 14:15:58.750] [alevinLog] [info] Done indexing Barcodes; [2019-07-18 14:15:58.750] [alevinLog] [info] Total Unique barcodes found: 687531; [2019-07-18 14:15:58.750] [alevinLog] [info] Used Barcodes except Whitelist: 44516; [2019-07-18 14:15:58.973] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2019-07-18 14:15:58.973] [alevinLog] [info] parsing read library format; [2019-07-18 14:24:27.923] [alevinLog] [info] Starting optimizer; [2019-07-18 14:24:28.655] [alevinLog] [warning] 24 mitorna gene(s) does not have transcript in the reference; [2019-07-18 14:24:28.655] [al",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/404:439,Load,Loading,439,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/404,2,['Load'],['Loading']
Performance,"Hi,. I'm working on a GNU/Linux operating system ""4.19.10-200.fc28.x86_64"". Herewith the detailed information on CPU:; Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 48; On-line CPU(s) list: 0-47; Thread(s) per core: 1; Core(s) per socket: 12; Socket(s): 4; NUMA node(s): 8; Vendor ID: AuthenticAMD; CPU family: 16; Model: 9; Model name: AMD Opteron(tm) Processor 6176; Stepping: 1; CPU MHz: 2300.000; CPU max MHz: 2300.0000; CPU min MHz: 800.0000; BogoMIPS: 4600.38; Virtualization: AMD-V; L1d cache: 64K; L1i cache: 64K; L2 cache: 512K; L3 cache: 5118K; NUMA node0 CPU(s): 0-5; NUMA node1 CPU(s): 6-11; NUMA node2 CPU(s): 12-17; NUMA node3 CPU(s): 18-23; NUMA node4 CPU(s): 24-29; NUMA node5 CPU(s): 30-35; NUMA node6 CPU(s): 36-41; NUMA node7 CPU(s): 42-47. Best regards,; Jamal.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-562069760:537,cache,cache,537,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-562069760,4,['cache'],['cache']
Performance,"Hi,; Basically Alevin performs CB sequence correction within 1 distance hamming ball, the intuition being the set of real CB should ideally be more than 1 edit distance away.; Here I think the x axis gives you the count of reads for a CB before sequence correction and on y axis post sequence correction. Hope it helps",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/488#issuecomment-591733839:22,perform,performs,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/488#issuecomment-591733839,2,['perform'],['performs']
Performance,"Hi,; I am processing canine data (replicates SRR636842 and SRR636843) and Salmon segfaults with no (?) useful information in the log that would help me to identify the problem. Other data from the same study are processed fine (mouse, cow and pig; all 51nt reads). ```; # salmon (mapping-based) v0.6.0; # [ program ] => salmon ; # [ command ] => quant ; # [ index ] => { /[...path...]/genemodel/cfa_canFam3_ensembl_vN.pctr_norm.k19.idx }; # [ threads ] => { 16 }; # [ libType ] => { IU }; # [ mates1 ] => { /dev/fd/63 }; # [ mates2 ] => { /dev/fd/62 }; # [ biasCorrect ] => { }; # [ output ] => { /[...path...]/tmp/SRX211583 }; # [ forgettingFactor ] => { 0.8 }; # [ useVBOpt ] => { }; # [ sensitive ] => { }; # [ geneMap ] => { /[...path...]/genemodel/cfa_canFam3_ensembl_vN.pctr_map.tsv }; Logs will be written to /[...path...]/tmp/SRX211583/logs; there is 1 lib; [2016-07-19 09:35:23.827] [jointLog] [info] parsing read library format; Loading 32-bit quasi index[2016-07-19 09:35:23.895] [jointLog] [info] Loading Quasi index; [2016-07-19 09:35:23.898] [stderrLog] [info] Loading Suffix Array ; [2016-07-19 09:35:23.899] [stderrLog] [info] Loading Position Hash; [2016-07-19 09:35:29.545] [stderrLog] [info] Loading Transcript Info ; [2016-07-19 09:35:30.913] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-19 09:35:31.452] [stderrLog] [info] There were 24526 set bits in the bit array; [2016-07-19 09:35:31.737] [stderrLog] [info] Computing transcript lengths; [2016-07-19 09:35:31.737] [stderrLog] [info] Waiting to finish loading hash; Index contained 24526 targets; [2016-07-19 09:36:30.462] [jointLog] [info] done; [2016-07-19 09:36:30.462] [stderrLog] [info] Done loading index; ```. All data are processed in the same pipeline, so I guess there is something particular about this dataset - but given this information, I have no clue where to start looking.; I have seen ticket #64, but I am not using the `--useFSPD` parameter, so I assume it's a different problem. +Peter",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/66:939,Load,Loading,939,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/66,8,"['Load', 'load']","['Loading', 'loading']"
Performance,"Hi,; I seem to be having problems with installing Salmon on my mac.; I've tried doing this using ; **1. brew install salmon:**; brew install salmon; Updating Homebrew...; ==> Auto-updated Homebrew!; Updated 2 taps (homebrew/core, homebrew/science).; ==> Updated Formulae; homebrew/science/seqan. ==> Installing salmon from homebrew/science; ==> Downloading https://github.com/COMBINE-lab/salmon/archive/v0.7.2.tar.gz; Already downloaded: /Users/sangrim/Library/Caches/Homebrew/salmon-0.7.2.tar.gz; ==> cmake . -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG -DCMAKE_INSTALL_PREFIX=/usr/local/Cellar/salmon/0.7.2 -DCMA; ==> make install; üç∫ /usr/local/Cellar/salmon/0.7.2: 6 files, 8.5M, built in 7 minutes 8 seconds; sangrim@C02Q7CT1G8WN:~/bin$> salmon; **salmon(2034,0x7fffbc21a3c0) malloc: *** malloc_zone_unregister() failed for 0x7fffbc210000**. and also,; **2. compiling from the osx tarball; the installation seemingly succeeds,**; Install the project...; /usr/local/Cellar/cmake/3.7.1/bin/cmake -P cmake_install.cmake; -- Install configuration: """"; -- Up-to-date: /Users/../bin/salmon-0.7.2/lib; -- Up-to-date: /Users/../bin/salmon-0.7.2/lib/pkgconfig; -- Installing: /Users/../bin/salmon-0.7.2/bin/salmon; -- Installing: /Users/../bin/salmon-0.7.2/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly. Please add /Users/../bin/salmon-0.7.2/bin to your PATH; Please add /Users/../bin/salmon-0.7.2/lib to your DYLD_FALLBACK_LIBRARY_PATH. ...and then make test, hangs...; Running tests...; /usr/local/Cellar/cmake/3.7.1/bin/ctest --force-new-ctest-process ; Test project /Users/maheshsangrithi/bin/salmon-0.7.2/build; Start 1: unit_tests; ........Ctrl+C to cancel...; then if ./salmon is run, I get the same error...; salmon(2034,0x7fffbc21a3c0) malloc: *** malloc_zone_unregister() failed for 0x7fffbc210000. Thanks in advance for your help.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/112:461,Cache,Caches,461,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/112,1,['Cache'],['Caches']
Performance,Hi. I'm having a similar issue. When I run the Salmon exec I get:. `MacBook-Pro-31:~ alex$ /Users/alex/Desktop/Code/Salmon-v0.8.0_macOS_10.12/bin/salmon ; exit;; dyld: Library not loaded: /usr/local/opt/tbb/lib/libtbbmalloc_proxy.dylib; Referenced from: /Users/alex/Desktop/Code/Salmon-v0.8.0_macOS_10.12/bin/salmon; Reason: image not found; Abort trap: 6; logout; `. I'm running Sierra 10.12.2. Can you advise? What do I specifically need to do to get Salmon to work?. Thanks.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-279257362:180,load,loaded,180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-279257362,1,['load'],['loaded']
Performance,"Hrmm, I seem to be able to load and map against that index (though I'm testing with the latest develop version). Is there anything specific about the machines / vms where this is failing versus succeeding?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442557809:27,load,load,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442557809,1,['load'],['load']
Performance,"I agree ‚Äì I wasn‚Äôt aware of that one. I‚Äôve tested that and it has the same effect as the other flag, performance looks good.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/966#issuecomment-2416748677:101,perform,performance,101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/966#issuecomment-2416748677,1,['perform'],['performance']
Performance,"I also tried on the `testing` image. For more detail, here are the steps performed (perhaps taking a look at the installed packages will highlight a difference, as I did this from a clean testing Docker image, so my environment had nothing else in it). ### Attempt to reproduce segfault on Debian:testing. ```{bash}; $ docker pull debian:testing. $ docker run -it debian:testing. $ apt-get update. $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev. $ git clone https://github.com/COMBINE-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:73,perform,performed,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['perform'],['performed']
Performance,"I am also confused about it. It seems that peudosam can not be converted into bam because of lacking of location. If I just use the. ```bash; samtools sort -O bam -@ 30 -o sort.bam Mapping.sam . samtools index sort.bam; ```. I can not load the sort.bam into IGV. But I did find the two issue: #475 and #38 , which mentioned bam file.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-638026422:235,load,load,235,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-638026422,1,['load'],['load']
Performance,"I am assuming what you are looking for is the ""effective lengths"" of the transcripts i.e. not just the original transcript lengths but instead corrected based on the quantification model. I think it's going to be tricky to generate that because of two major reasons: (1) salmon model does not perform length correction in single-cell mode mainly due to 3' single-end sequencing of the read it's hard to reliably estimate the fragment lengths (2) salmon in single-cell mode performs quantification at gene-level which makes it harder to predict effective length of the transcripts.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/693#issuecomment-916889943:293,perform,perform,293,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/693#issuecomment-916889943,2,['perform'],"['perform', 'performs']"
Performance,I am getting the same error on the latest binary distro. I am running CentOS Linux 7 (Core).; Does this affect the performance?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-440346529:115,perform,performance,115,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-440346529,1,['perform'],['performance']
Performance,"I am trying to quantify some rna sequences with Salmon. Instead of creating my own index, I downloaded a pre-build version from here: [http://refgenomes.databio.org/v3/genomes/splash/2230c535660fb4774114bfa966a62f823fdb6d21acf138d4](url) suggested in the salmon doc. I downloaded the file: `salmon_partial_sa_index:default` which is under my scope of research. Then, I just run the following command: `salmon quant -i default -l A -1 P10_1.fq.gz -2 P10_2.fq.gz --validateMappings -o transcripts_quant`, where `default` is the name of the folder resulting after the decompression of the salmon pre-build index, and `P10_1.fq.gz -2 P10_2.fq.gz` are paired reads of rna. I get this error: **rapidjson internal assertion failure: IsObject()**. I read a thread where a user performed a re-build. But since I am new to this filed I don't know what FASTA file I could use to do it. It's worth mentioning that I am working on a remote server and I downloaded the pre-build index directly on it, using `wget`. Some screenshot of what the `default` folder contains:. <img width=""806"" alt=""Schermata 2023-07-27 alle 14 42 59"" src=""https://github.com/COMBINE-lab/salmon/assets/81829336/e0bda06a-f344-4836-9e27-8e2de6a10265"">",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/862:769,perform,performed,769,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/862,1,['perform'],['performed']
Performance,"I am using Salmon (Salmon 1.3 installed through homebrew on mac ventura 13.5.2) for quantification in alignment mode. I have bam files (aligned to transcriptome) for nanopore data from Minimap2, which has primary and secondary alignments both (50% of total mapped reads are primary and other 50% are secondary alignments). Salmon is only performing quantification for primary alignments, but I also want to include the secondary alignments. . 1. Is there any argument I could use to include secondary alignments for quantification in Salmon Alignment mode? ; 2. Is it a good practice to include secondary alignments? 3. Are there any other important flags I should use which might be specific to ""Nanopore"" or ""Splicing Analysis"". . This is the code I am using at the moment: . salmon quant -t gencode.vM33.transcripts.fa -l A -g gencode.vM32.annotation.gtf -a barcode07.bam -o barcode_07_salmon_quant",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/903:338,perform,performing,338,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/903,1,['perform'],['performing']
Performance,"I am working with Salmon in mapping-based mode to perform differential expression.; I am interested to understand which reads Salmon uses to produce counts, so I added --writeMappings and I checked the bam.; I hoped that Salmon would take into account samflags on field $3 to filter out 'bad' alignments, however, I am not able to figure out if Salmon consider flags. Moreover, in the 5th field (MAPQ) only 0 and 1 are produced. Should I suppose that 1 is considered 'mapped' and 0 to be 'unmapped' ?; I thank you in advance for your willingness; Bests",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/799:50,perform,perform,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/799,1,['perform'],['perform']
Performance,"I don't completely disagree, and don't speak for this project as anything other than a user, but `until 'salmon [args]' 2>1 | grep -m 1 ""Starting optimizer""; do : ; done` seems pretty unix-y to me.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/189#issuecomment-361748694:146,optimiz,optimizer,146,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/189#issuecomment-361748694,1,['optimiz'],['optimizer']
Performance,"I don't mind what you do, but currently it says `cite` is a <COMMAND>, but it isn't?. ```; Commands:; cite Show salmon citation information; index Create a salmon index; quant Quantify a sample; swim Perform super-secret operation; ```. ie. `salmon cite` does *not* `Show salmon citation information` - that's all :)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/149#issuecomment-325164357:200,Perform,Perform,200,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/149#issuecomment-325164357,1,['Perform'],['Perform']
Performance,"I explicitly preallocate the output array/vector for pcre and re2. Boost regex doesn't seem to offer that (at least, I don't know). Regarding xpressive: yeah, what a disappointment. And I don't actually save the capture with xpressive. I thought the automaton was entirely generated and optimize at compile time. Apparently creating an automaton with C++ template system must be really hard because the generated code is garbage. Or I am using it wrong. In any case, xpressive as I use it is entirely static (I haven't tested the dynamic version). So it is not useful in our case. I was just curious if it could match hand crafted code. What was I thinking!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/734#issuecomment-1024206420:287,optimiz,optimize,287,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/734#issuecomment-1024206420,1,['optimiz'],['optimize']
Performance,"I faced the same problem and found a simple solution. The trick is at line 585 of the cMakeList.txt. ""if (${TBB_VERSION} VERSION_GREATER_EQUAL 2018.0)"". It checks if you have tbb version 2018 or above. If you install tbb BEFORE running cmake, it will fulfill the requirement and bypass installing tbb in the make command, hence bypass the error. The solution:; 1. Delete the salmon folder and download a fresh one from github; 2. sudo apt update (this step is very important, to update the packages to be above version 2018) ; 3. sudo apt-get install libtbb-dev; 4. (Optional) apt-cache policy libtbb-dev (check the version of libtbb, it should be 2019 or above); 5. Then follows the standard installation (cmake, make etc.) The error should disappear and compile successfully. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-610977958:581,cache,cache,581,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-610977958,2,['cache'],['cache']
Performance,"I give .fastq directly to salmon to perform the alignment and I use the --writemapping option to have the bam on which performing other operations. I am focused on flags and mapq (field 3 and 5, respectively). I compared flags (field 3) between salmon and star (alignment performed on genome) and reads flagged as non-primary are comparable. I thought that salmon would assign counts to transcripts based on ""primary alignments"", but, filtering out secondary alignments I cannot reproduce counts in quant.sf. My question is: quant.sf is generated considering the output of --writemapping ? Thanks again for your quick response",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245700129:36,perform,perform,36,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245700129,3,['perform'],"['perform', 'performed', 'performing']"
Performance,"I have a salmon index which fails silently when used:. ```; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; # salmon (mapping-based) v0.5.1; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { ... }; # [ libType ] => { IU }; # [ mates1 ] => { ... }; # [ mates2 ] => { ... }; # [ output ] => { ... }; # [ threads ] => { 16 }; Logs will be written to ...; [2016-01-22 16:54:55.564] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index; [2016-01-22 16:54:56.303] [jointLog] [info] Loading Quasi index; [2016-01-22 16:54:56.320] [stderrLog] [info] Loading Suffix Array; [2016-01-22 16:54:56.321] [stderrLog] [info] Loading Position Hash; [2016-01-22 16:56:17.595] [stderrLog] [info] Loading Transcript Info; [2016-01-22 16:56:36.767] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-22 16:56:40.858] [stderrLog] [info] There were 552702 set bits in the bit array; [2016-01-22 16:56:41.758] [stderrLog] [info] Computing transcript lengths; [2016-01-22 16:56:41.761] [stderrLog] [info] Waiting to finish loading hash; Index contained 552702 targets; [2016-01-22 17:00:40.648] [stderrLog] [info] Done loading index; [2016-01-22 17:00:40.648] [jointLog] [info] done; ```. Then the process exits and nothing but the `cmd_info.json` and log file are written to disk. The sequencing library is not an issue, as I can use several other index files successfully. This is reproducible with ~600 sequencing libraries as well. I believe this also occurs using v0.6.0, but will confirm. Since there is no core dump, is there any way for me to debug this?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37:552,Load,Loading,552,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37,8,"['Load', 'load']","['Loading', 'loading']"
Performance,"I have been trying to use the salmon docker container available on docker hub. When I run salmon quant I am able to load all of the files and start the program, but I get a killed message while loading hash. I get an empty log file and empty folders created after the container is killed. **To Reproduce**; I run the following command to run the container:; `docker run -v /Users/caz3so/workspaces/salmon_docker:/temp -w /temp -ti combinelab/salmon`. The following is the output:; <img width=""1389"" alt=""screenshot 2018-06-27 11 15 56"" src=""https://user-images.githubusercontent.com/31480706/41983246-8296bb76-79fb-11e8-9710-c38ec051b7e7.png"">. **Expected behavior**; I have salmon installed on my machine and was able to run these files with no problem. It is only when I am using the docker container, so it could be a docker related problem. . **Desktop (please complete the following information):**; I am using a 2017 Macbook pro with 16 GB 2133 MHz LPDDR3 memory and a 2.8 GHz Intel Core i7 processor.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/243:116,load,load,116,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/243,2,['load'],"['load', 'loading']"
Performance,"I installed salmon from conda environment using python3 and got the below error:. ```; $ salmon. salmon: error while loading shared libraries: libboost_thread.so.1.60.0: cannot open shared object file: No such file or directory; ```. I am using Ubuntu 16.04 Xenial for which the latest Boost version is [1.58](https://launchpad.net/ubuntu/xenial/+package/libboost-dev). Since it was originally compiled under a later version of Boost (1.60), it gives the above error. I found this post to fix the issue temporarily:; https://www.biostars.org/p/389360/. It would be nice to fix it to search for the latest version of boost available though. Thanks.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565:117,load,loading,117,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565,1,['load'],['loading']
Performance,"I just cloned salmon from github repository. Everything was working good, I was able to perform cmake with the code: salmon/build cmake -DFETCH_BOOST=TRUE ..; but when I started to built with make, after several minutes it prompts the following error:. [ 7%] Built target libdivsufsort; [ 14%] Built target libtbb; [ 20%] Built target liblzma; [ 26%] Built target libjemalloc; [ 33%] Built target libcereal; [ 33%] Performing build step for 'libstadenio'; Making all in io_lib; libtool: compile: /usr/bin/cc -DHAVE_CONFIG_H -I. -I.. -I.. -MT libstaden_read_la-cram_io.lo -MD -MP -MF .deps/libstaden_read_la-cram_io.Tpo -c cram_io.c -o libstaden_read_la-cram_io.o; cram_io.c:66:18: fatal error: lzma.h: No such file or directory; compilation terminated.; Makefile:922: recipe for target 'libstaden_read_la-cram_io.lo' failed; make[5]: *** [libstaden_read_la-cram_io.lo] Error 1; Makefile:734: recipe for target 'all-recursive' failed; make[4]: *** [all-recursive] Error 1; Makefile:478: recipe for target 'all' failed; make[3]: *** [all] Error 2; CMakeFiles/libstadenio.dir/build.make:111: recipe for target 'libstadenio-prefix/src/libstadenio-stamp/libstadenio-build' failed; make[2]: *** [libstadenio-prefix/src/libstadenio-stamp/libstadenio-build] Error 2; CMakeFiles/Makefile2:257: recipe for target 'CMakeFiles/libstadenio.dir/all' failed; make[1]: *** [CMakeFiles/libstadenio.dir/all] Error 2; Makefile:162: recipe for target 'all' failed; make: *** [all] Error 2. I have looking for any solution but without success, Can anyone help me with this?",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/357:88,perform,perform,88,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/357,2,"['Perform', 'perform']","['Performing', 'perform']"
Performance,"I just redownloaded and extracted and tried again, and unfortunately the problem persists =/. ```; ...; [2016-01-02 17:47:51.342] [jointLog] [info] iteration = 1600 | max rel diff. = 0.0133376; [2016-01-02 17:47:51.443] [jointLog] [info] iteration = 1630 | max rel diff. = 0.00771098; [2016-01-02 17:47:51.447] [jointLog] [info] Finished optimizer; [2016-01-02 17:47:51.448] [jointLog] [info] writing output. Computing gene-level abundance estimates; [2016-01-02 17:47:51.678] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done; Segmentation fault (core dumped); ```. If you want I can upload index and a couple of fastq files somewhere so you can try?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168412271:338,optimiz,optimizer,338,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168412271,1,['optimiz'],['optimizer']
Performance,"I just tried it on a fresh docker image of ubuntu 16.04 and am unable to install salmon. After `apt-get install build-essential cmake g++ gcc curl autoconfig libdevsufsort-dev`, `cmake -DFETCH_BOOST=TRUE` passes, but `make install` fails with following output:; ```; [ 6%] Built target liblzma; [ 12%] Built target libbz2; [ 18%] Built target libjemalloc; [ 19%] Performing download step (verify and extract) for 'libdivsufsort'; -- verifying file...; file='/home/salmon-0.10.2/external/libdivsufsort.zip'; -- verifying file... warning: did not verify file - no URL_HASH specified?; -- extracting...; src='/home/salmon-0.10.2/external/libdivsufsort.zip'; dst='/home/salmon-0.10.2/external/libdivsufsort-master'; CMake Error at /home/salmon-0.10.2/libdivsufsort-prefix/src/libdivsufsort-stamp/extract-libdivsufsort.cmake:11 (message):; error: file to extract does not exist:; '/home/salmon-0.10.2/external/libdivsufsort.zip'. CMakeFiles/libdivsufsort.dir/build.make:90: recipe for target 'libdivsufsort-prefix/src/libdivsufsort-stamp/libdivsufsort-download' failed; make[2]: *** [libdivsufsort-prefix/src/libdivsufsort-stamp/libdivsufsort-download] Error 1; CMakeFiles/Makefile2:137: recipe for target 'CMakeFiles/libdivsufsort.dir/all' failed; make[1]: *** [CMakeFiles/libdivsufsort.dir/all] Error 2; Makefile:160: recipe for target 'all' failed; make: *** [all] Error 2; ```; It confuses me, as the error seems to be in the libdevsufsort, which should be installed.; (sorry for all the mess, really)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404455397:363,Perform,Performing,363,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404455397,1,['Perform'],['Performing']
Performance,"I just tried the /dev/fd/0 approach. First I ran. ```; salmon quant -i /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa -l IU -1 reads_1.fastq -2 reads_2.fastq -o normal_salmon_out; ```. In this case the following is the content of the `salmon_quant.log`. ```; [2016-01-03 00:33:37.001] [jointLog] [info] parsing read library format; [2016-01-03 00:33:37.510] [jointLog] [info] Loading Quasi index; [2016-01-03 00:33:53.646] [jointLog] [info] done; [2016-01-03 00:34:14.501] [jointLog] [info] Computed 13742 rich equivalence classes for further processing; [2016-01-03 00:34:14.501] [jointLog] [info] Counted 335230 total reads in the equivalence classes; [2016-01-03 00:34:14.501] [fileLog] [info]; At end of round 0; ==================; Observed 3835342 total fragments (3835342 in most recent round). [2016-01-03 00:34:20.992] [jointLog] [warning] Only 335230 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-01-03 00:34:20.992] [jointLog] [info] Mapping rate = 8.74055%. [2016-01-03 00:34:20.992] [jointLog] [info] finished quantifyLibrary(); [2016-01-03 00:34:20.992] [jointLog] [info] Starting optimizer; [2016-01-03 00:34:21.028] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-03 00:34:21.030] [jointLog] [info] iteration = 0 | max rel diff. = 23.4889; [2016-01-03 00:34:21.167] [jointLog] [info] iteration = 100 | max rel diff. = 0.150549; [2016-01-03 00:34:21.304] [jointLog] [info] iteration = 200 | max rel diff. = 0.0517672; [2016-01-03 00:34:21.447] [jointLog] [info] iteration = 300 | max rel diff. = 0.0368208; [2016-01-03 00:34:21.578] [jointLog] [info] iteration = 400 | max rel diff. = 0.0237254; [2016-01-03 00:34:21.705] [jointLog] [info] iteration = 500 | max rel diff. = 0.0147784; [2016-01-03 00:34:21.834] [jointLog] [info] iteration = 600 | max rel diff. = 0.0131134; [2016-01-03 00:34:21",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784:426,Load,Loading,426,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784,1,['Load'],['Loading']
Performance,"I know this problem was reported previously. I checked all the answers and I can see there are many reasons for this. In my case, I have a 'high number of mappings discarded because of alignment score'. I created the index using mature transcripts (without introns and genome decoy). The command I used to perform quantification:. ```; salmon quant -i BANY_transcript_index -p 36 --libType A -g BANY_v2.gtf -1 ${i}_1P.fq.gz -2 ${i}_2P.fq.gz --validateMappings -o ${i}.quant. ```; The mapping rate I got. ```; [2020-06-04 18:03:49.102] [jointLog] [info] Number of mappings discarded because of alignment score : 57,476,847; [2020-06-04 18:03:49.102] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 4,980,029; [2020-06-04 18:03:49.102] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2020-06-04 18:03:49.102] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 366,055; [2020-06-04 18:03:49.102] [jointLog] [info] Mapping rate = 56.3428%; ```. The mapping rates I got are ~50-65%...Here are some of the reasons for low mapping rates based on previous posts:. 1. rRNA contamination: In my case, rRNAs were removed during library construction, also I quantified rRNA contents in my trimmed reads, and it's very low (<5%).; 2. DNA contamination: This is possible, I got ~98% genome mapping rate using hisat2. But in fact, DNAs are removed in my RNA extraction process...and poly-T was used to select mRNAs during the library construction...; 3. Not using pre-mature transcripts so reads mapping to introns are discarded: I am not sure if this is a valid point since we usually quantify mature mRNAs, not pre-mature ones.; 4. Library type: my library was constructed in a stranded way. The program detected my libtype as ISR:; ```; {; ""read_files"": ""[ DS_1_HW_FM_1P.fq.gz, DS_1_HW_FM_2P.fq.gz]"",; ""expected_format"": ""ISR"",; ""compatible_fragment_ratio"": 1.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533:306,perform,perform,306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533,1,['perform'],['perform']
Performance,"I managed to figure out what I assume is the up-to-date way of doing things. I will post the code that works for me here in case anyone else comes across this issue:; ```; suppressPackageStartupMessages({; library(fishpond); library(tximport); library(devtools); library(ggplot2); library(patchwork); # Just install Seurat like normal. Tutorial's allusion to a ""spatial"" branch appears to be outdated.; library(Seurat); }). # navigate to data directory; wkdir <- ""path/to/alevin_data/""; setwd(wkdir). # load in alevin output; files <- file.path(""alevin_out/alevin/quants_mat.gz""); file.exists(files). # set prefix for output files; prefix = ""alevin"". # tximport loads the alevin data into R; txi <- tximport(files = files, type = ""alevin""). # Creating a Seurat object with spatial assay; assay <- ""Spatial""; brain <- CreateSeuratObject(counts = txi$counts, project = ""SPATIAL"", assay = assay); brain. # loading the 10x image data; seqdir <- ""path/to/10x_imaging_data/""; image.data <- Read10X_Image(paste0(seqdir,""spatial/"")). # Since the names of alevin cb is different from 10x; # we rename the cells and filter the image data; # to have the metadata for only quantified cells; image.data@boundaries$centroids@cells <- gsub(""-1"", """", image.data@boundaries$centroids@cells); common.cells <- intersect(Cells(x = brain), image.data@boundaries$centroids@cells). # Subset the centroids object; centroids <- image.data@boundaries$centroids. # Find indices of common cells; common_indices <- which(centroids@cells %in% common.cells). # Subset the cells and coords slots; centroids@cells <- centroids@cells[common_indices]; centroids@coords <- centroids@coords[common_indices, ]. # Update the image.data object with the subsetted centroids; image.data@boundaries$centroids <- centroids. # Update the brain object accordingly; brain <- subset(brain, cells = common.cells). # adding image data to Seurat object; DefaultAssay(object = image.data) <- ""Spatial""; brain@images[['slice']] <- image.data; ```; The re",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/942#issuecomment-2204802696:503,load,load,503,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/942#issuecomment-2204802696,3,['load'],"['load', 'loading', 'loads']"
Performance,"I processed the data above using the latest salmon from the develop branch; (the release candidate for 1.3.0), and I got the following time (used 8; threads, so timing is not directly comparable). ```; 4604.57user 43.64system 9:24.15elapsed 823%CPU; ```. The whole log is. ```; [2020-06-15 23:51:54.747] [jointLog] [info] setting maxHashResizeThreads to; 8; [2020-06-15 23:51:54.747] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-15 23:51:54.747] [jointLog] [info] parsing read library format; [2020-06-15 23:51:54.747] [jointLog] [info] There is 1 library.; [2020-06-15 23:51:54.814] [jointLog] [info] Loading pufferfish index; [2020-06-15 23:51:54.814] [jointLog] [info] Loading dense pufferfish index.; [2020-06-15 23:51:55.555] [jointLog] [info] done; [2020-06-15 23:51:55.555] [jointLog] [info] Index contained 116,248 targets; [2020-06-15 23:51:55.588] [jointLog] [info] Number of decoys : 0; [2020-06-16 00:00:59.666] [jointLog] [info] Computed 344,764 rich; equivalence classes for further processing; [2020-06-16 00:00:59.666] [jointLog] [info] Counted 12,956,134 total reads; in the equivalence classes; [2020-06-16 00:00:59.673] [jointLog] [warning] 0.0736383% of fragments were; shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a; smaller k.; The minimum read size found was 1. [2020-06-16 00:00:59.673] [jointLog] [info] Number of mappings discarded; because of alignment score : 134,091,887; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments entirely; discarded because of alignment score : 2,429,390; [2020-06-16 00:00:59.673]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228:986,Load,Loading,986,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228,1,['Load'],['Loading']
Performance,"I ran salmon alevin 0.14.0 with a custom transcriptome reference and the following options: --chromium --dumpFeatures --dumpMtx --whitelist mylist.txt. Everything ran through OK. However, when I tried to load the .mtx file with readMM() in R, I got the error: ; ` Error: readMM(): column values 'j' are not in 1:nc `. When I tried to read directly the binary file into a matrix, there's a warning:; ```; counts <- readBin(quants_mat.gz, what = 'numeric', n = length(genes)*length(cells)); close.connection(quants_mat.gz); Warning message:; In matrix(data = counts, nrow = length(cells), ncol = length(genes), :; data length [391335] is not a sub-multiple or multiple of the number of rows [4942]; ```; It seems like there's issue with the dimensions; [out.zip](https://github.com/COMBINE-lab/salmon/files/3296080/out.zip); of the output matrix. I've attached my log file as well as my output files (both .mtx and binary). Thank you.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380:204,load,load,204,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380,1,['load'],['load']
Performance,"I realize my mistake, I was confused by the error message.; Pseudoaligment seems to work now. [...]; [2018-08-03 20:13:23.083] [jointLog] [info] Computed 312565 rich; equivalence classes for further processing; [2018-08-03 20:13:23.083] [jointLog] [info] Counted 120065952 total; reads in the equivalence classes; [2018-08-03 20:13:23.084] [jointLog] [warning] Found 9775 reads with `N`; in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-08-03 20:13:23.084] [jointLog] [info] Mapping rate = 63.2442%. [2018-08-03 20:13:23.084] [jointLog] [info] finished quantifyLibrary(); [2018-08-03 20:13:26.208] [alevinLog] [info] Starting optimizer. ERROR: Txp to Gene Map not found for 203027 transcripts. Exiting(salmon). I just have a problem with my tx2gene file. Here is the head of my file:. ENST00000013125	MAP4K5; ENST00000215368	EFNA2; ENST00000200453	PPP1R15A; ENST00000202028	EPB41L1; ENST00000204679	GNPTG; ENST00000175506	ASNS; ENST00000215574	CDC34; ENST00000167106	VASH1; ENST00000074304	INPP4A; ENST00000055077	RFC2. The transcript ID is probably not consistent with the one from the; alevin output. However, I used to perform some pseudo-alignments using; salmon on bulk RNAseq with the same transcriptome references and the; same tx2gene file that I used here (postprocessed using R) and it work.; What could be wrong here? Could you provide me with an example of the; tx2gene file needed?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410337209:680,optimiz,optimizer,680,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410337209,2,"['optimiz', 'perform']","['optimizer', 'perform']"
Performance,"I saw no performance regressions, so 1.2.0 is built without the offending flag. Thanks for the heads up.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-612273525:9,perform,performance,9,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-612273525,1,['perform'],['performance']
Performance,"I see, we might have to tweak a bit based on the use case for `longranger basic`.; In `v0.10`, alevin should still be able to do CB correction, and attach the corrected CBs to the header of the second file, although the remaining template sequence (128 bases) from the first file might get loss, since `cellranger` was using template sequencing in only one file. Like @rob-p was saying we can work on making this step more generalized, once we confirm that the error-correction model for `cellranger` and `longranger` can be used interchangeably. In theory we can still concatenate the remaining 128 bases into an interleaved format since alevin has hidden options to provide the lengths explicitly but we have not tested this feature extensively. We will keep this at the top of our feature-request list and would inform you as soon as we have a stable version with this feature. Thanks again for the interest !!. re: *interleaved format* -- indeed an interleave format does makes sense and should be the default dumping format, but I believe since the default mode of 10x's `mkfastq` is to dump separate `FASTQ`, we should not use resources to create an interim interleaved format and then consume it downstream (since`FASTQ` itself is not very efficient), instead, in alevin we just consume the two separate `FASTQ` into our own interim data-structure to perform the downstream analysis.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395195411:1358,perform,perform,1358,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395195411,1,['perform'],['perform']
Performance,"I see. TopHat actually aligns the reads to the genome (using Bowtie and a strategy to perform split-read mapping). The results of TopHat, then, are meant to be used with tools like Cufflinks, which expects reads to be mapped directly to the genome rather than to the transcriptome. Salmon, on the other hand, works like tools such as RSEM / eXpress, which expect alignments to the transcriptome directly. This can be accomplished by either mapping the reads directly to the transcript sequences (using e.g. Bowtie2 / BWA-MEM) or by mapping the reads to the genome using a tool such as STAR, and telling it to project the alignments onto genomic coordinates. However, I should mention that the easiest thing to do is to simply have Salmon build and index on your transcript set and then pass it the raw (compressed) FASTQ files directly. Since Salmon provides an accurate and lightweight alignment proxy, it can accurately assess transcript abundance estimates directly from the raw (unaligned) sequenced reads. If you have questions about using either of these modes, please take a look at [the documentation](https://salmon.readthedocs.io/en/latest/). I'd also be happy to answer any other questions you might have.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-293273710:86,perform,perform,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-293273710,2,['perform'],['perform']
Performance,"I see. Well, this is definitely what is leading to the error. The JSON files shouldn't be empty. Can you report the output of `salmon quant` when you were building the index? It seems that the JSON files were not written correctly, which prevents proper loading of the index (and which may be indicative of other parts of the index not being properly written).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404959801:254,load,loading,254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404959801,1,['load'],['loading']
Performance,"I tend to benchmark new versions of software mostly to check how much better things get over time at solving our problems. My strategy for benchmarking is to look at correlation between spike-ins at known abundances and estimated expression by software. The latest version of Salmon (0.4.0) performs markedly worse than all the previous versions of Salmon on the same data. ![salmong-performance](https://cloud.githubusercontent.com/assets/668803/8134113/8ff1a4ae-1124-11e5-80d5-10022530ba99.png). For running parameters, here is the top part of one of the `quant.sf` files. ```; # salmon (smem-based) v0.4.0; # [ program ] => salmon ; # [ command ] => quant ; # [ index ] => { /nfs/research2/teichmann/reference/homo-sapiens/salmon/Homo_sapiens.GRCh38.78.cdna_ERCC }; # [ libType ] => { IU }; # [ threads ] => { 4 }; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon-comparison/human/SRP030617_HCT116_86_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon-comparison/human/SRP030617_HCT116_86_2.fastq }; # [ output ] => { /tmp/SRP030617_HCT116_86_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/homo-sapiens/Homo_sapiens.GRCh38.78.cdna_ERCC.gene_map.txt }; # [ useVBOpt ] => { }; # [ mapping rate ] => { 48.8199% }; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6:291,perform,performs,291,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6,2,['perform'],"['performance', 'performs']"
Performance,"I think I figured it out! This behavior is triggered in `gamma_distribution` when the alpha parameter is nan. The issue (i.e. the reason this is going unnoticed elsewhere) is because salmon is compiled with `-Ofast` which turns on `finite-math-only` (the compiler need not handle infinite / nan values properly). So, it looks like the fix should be to insert some nan & inf checks and change the default optimization flags to O3. I should have a fix for you to try soon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267866312:404,optimiz,optimization,404,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267866312,1,['optimiz'],['optimization']
Performance,"I think the idea of using memory-mapped IO might be useful, similar to bowtie2's `--mm` option. However, are you sure it's the index loading that's the issue? You may want to look into staging the salmon index on some local scratch space on your compute nodes as the bandwidth will be much greater than your network storage. Additionally, I tend to see IO saturation over our NFS pool from just streaming the FASTQ data to salmon, so you might still be screwed even if you take care of the index IO contribution. Your machines should likely be caching the index in RAM (if you have enough of it) after one access, but you can use a tool to force caching of the index file if you really want (https://serverfault.com/questions/43383/caching-preloading-files-on-linux-into-ram).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/319#issuecomment-442180390:133,load,loading,133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/319#issuecomment-442180390,1,['load'],['loading']
Performance,"I think you're right wrt conda. I was able to install 1.10.2 with mamba fairly easily. We've been moving away from conda (towards mamba) but this didn't cross my mind when I was playing in my sandbox. Might be some cluster latency issues combined with conda's snail's pace causing the problem on our end. Thx for the quick replies!. Adam H. Freedman, PhD; Data Scientist; Faculty of Arts & Sciences Informatics Group; Harvard University; 38 Oxford St; Cambridge, MA 02138; phone: +001 310 415 7145; ________________________________; From: Rob Patro ***@***.***>; Sent: Sunday, October 29, 2023 11:01 AM; To: COMBINE-lab/salmon ***@***.***>; Cc: Freedman, Adam ***@***.***>; Mention ***@***.***>; Subject: Re: [COMBINE-lab/salmon] anaconda version of salmon outdated, missing decoys option (Issue #895). Hi @adamfreedman<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_adamfreedman&d=DwMCaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=40O3raH84f_BIZ3HF7nqTYSO2FehGrGHL9b7sqT7LIpWZjFmA3BLxNDTHoz420jp&s=kxY9gCLGWZJp-dp7l31S6M5u2RuUTeWXVrKmaydpo5o&e=>,. I think this is just conda being very very very slow (and potentially broken). The following works fine for me (and finishes in ~1 minute):. mamba create -n salmon -c conda-forge -c bioconda salmon=1.10.2. Can you use the mamba resolver in your environment? Conda has become hardly usable over the years, but mamba works quite well as a fast replacement. I'll also note that I swapped the order of conda-forge and bioconda as the docs specify that bioconda should preferably come last in the list of channels. --Rob. ‚Äî; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_issues_895-23issuecomment-2D1784137337&d=DwMCaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=40O3raH84f_BIZ3HF7nqTYSO2FehGrGHL9b7sqT7LIpWZjFmA3BLxNDTHoz420jp&s=GNiCXqUbJLM16QBJ5PNAqv-rsgDdpCpcvezPXO_riWk&e=>, or unsubscribe<",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784196835:223,latency,latency,223,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784196835,2,['latency'],['latency']
Performance,"I tried this again today with salmon 1.2.1 on CentOS 8 (with cmake 3.17.1). This time it could find libtbb but it still could not find Staden IO_LIB and libgff. In addition for it to use Boost169 it was necessary to modify the CmakeLists.txt file like so. ```; --- CMakeLists.txt.dist 2020-04-21 22:31:07.000000000 -0700; +++ CMakeLists.txt 2020-06-08 17:13:23.295499154 -0700; @@ -419,6 +419,8 @@; find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); +message(""Forcing Boost_FOUND to TRUE""); +set(Boost_FOUND TRUE); message(""Boost_FOUND = ${Boost_FOUND}""); endif(); ; ```. and to invoke cmake with:. ```; module load cmake; module load io_lib; module load libgff; module load libtbb; mkdir build; cd build; cmake \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_08.log; ```; Inkscape was built using cmake a couple of weeks ago on the same system and the -D flags for Boost in the cmake invocation were sufficient, there was no need to modify its CMakeLists.txt. Perhaps you might to compare that CMakeLIsts.txt with salmon's to see why theirs works and salmon's does not. I reiterate my plea for salmon's cmake file to accept some form of ROOT_LIBGFF, ROOT_LIBSTADEN, and ROOT_LIBTBB. Those modules ; were all defined but cmake could only figure out TBB this time, and for all I know it won't next time around (since it failed to do so for no apparent reason on CentOS 7). Salmon is a useful program but it has so far failed to build using existing libraries on this OS (unless extraordinary measures were applied) for CO 6, 7, and now 8! This is the information it had to work with:. ```; echo $PATH; /usr/common/modules/el8/x86_64/software/libgff/1.2-CentOS-vanilla/bin:/usr/common/modules/el8/x86_64/software/io_lib/1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-640962684:758,load,load,758,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-640962684,4,['load'],['load']
Performance,"I understand that salmon does not use read quality scores when performing alignment/quantitation but, as it stands, running with `--writeMappings` it also doesn't output the qualities in its SAM-format output. That may not impact most downstream applications of the data but it does limit some. I'd be particularly interested in using reads that have been aligned and assigned to transcripts with an EM algorithm to investigate RNA editing. The most advanced methods of doing this integrate the quality of base calls from the sequencer into the models and, as such, cannot currently run on the data output. Although it may save a few CPU cycles in not reading and outputting the qualities - I can understand the choice when running with default settings - when running with `--writeMappings` that nominal difference in speed needs to be weighed up against downstream utility. Could this be looked into?. Cheers! George",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/756:63,perform,performing,63,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/756,1,['perform'],['performing']
Performance,"I used salmon 0.9.1 successfully a few weeks ago. I am using the latest update according to miniconda. Now after typing in this script in the command line in my Terminal on my Mac, I get the following error message. I have tried to trouble shoot but I have not been able to solve the problem. . salmon quant -i cs_index -l A -r fastqtrimd/BOD19_5R1trimd.fastq.gz -o quant/BOD19_5R1_quant ‚ÄîseqBias --gcBias --writeUnmappedNames. Here is the error message in the command line:. Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.9.1; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { cs_index }; ### [ libType ] => { A }; ### [ unmatedReads ] => { BOD19_5R1trimd.fastq.gz }; ### [ output ] => { BOD19_5R1_quant }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ writeUnmappedNames ] => { }; Logs will be written to BOD19_5R1_quant/logs; [2018-03-19 12:13:21.295] [jointLog] [info] parsing read library format; [2018-03-19 12:13:21.295] [jointLog] [info] There is 1 library.; [2018-03-19 12:13:21.402] [jointLog] [info] Loading Quasi index; [2018-03-19 12:13:21.403] [jointLog] [info] Loading 32-bit quasi index; Exception : [Failed to read 8 bytes from input stream! Read 0]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.; [2018-03-19 12:13:21.403] [stderrLog] [info] Loading Suffix Array . Does anyone have any ideas what is wrong? Sorry I am a novice!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/209:1168,Load,Loading,1168,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/209,3,['Load'],['Loading']
Performance,"I was just trying out the new version. It seems to be working, but it seems to fail at the time of printing results. Here's a tail of the text output:. ```; [2016-01-02 00:08:48.445] [jointLog] [info] Computed 66783 rich equivalence classes for further processing; [2016-01-02 00:08:48.445] [jointLog] [info] Counted 2977936 total reads in the equivalence classes; [2016-01-02 00:08:54.862] [jointLog] [warning] Only 2977936 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-01-02 00:08:54.862] [jointLog] [warning] Since only 2977936 (< 5000000) fragments were observed, modeling of the fragment start position distribution has been disabled; [2016-01-02 00:08:54.862] [jointLog] [info] Mapping rate = 48.8134%. [2016-01-02 00:08:54.862] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 00:08:54.863] [jointLog] [info] Starting optimizer; [2016-01-02 00:08:54.918] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 00:08:54.921] [jointLog] [info] iteration = 0 | max rel diff. = 48.4964; [2016-01-02 00:08:55.024] [jointLog] [info] iteration 50, recomputing effective lengths; [2016-01-02 00:08:57.626] [jointLog] [info] iteration = 100 | max rel diff. = 0.157189; [2016-01-02 00:08:57.835] [jointLog] [info] iteration = 200 | max rel diff. = 0.0984302; [2016-01-02 00:08:58.048] [jointLog] [info] iteration = 300 | max rel diff. = 0.0774471; [2016-01-02 00:08:58.265] [jointLog] [info] iteration = 400 | max rel diff. = 0.0866256; [2016-01-02 00:08:58.472] [jointLog] [info] iteration 500, recomputing effective lengths; [2016-01-02 00:09:00.486] [jointLog] [info] iteration = 500 | max rel diff. = 0.0216284; [2016-01-02 00:09:00.696] [jointLog] [info] iteration = 600 | max rel diff. = 0.0269734; [2016-01-02 00:09:00.905] [jointLog] [info] iteration = 700 | max rel diff. = 0.0166003; [2016-01-02 00:09:01.113] [jointLog] [info] iteration = 800 | m",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34:944,optimiz,optimizer,944,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34,1,['optimiz'],['optimizer']
Performance,"I'm also at a loss for exactly what could bre going on here. Specifically, this bit confused me:. > It looks like the log points to a sample that completed successfully at 19:45:18.487 before the sample at the top of the post started 19:51:56.392. So, unless the clock is messed up, it seems the successful completion (which, obviously required loading the complete index for alignment) happens *before* the exception. Further, the output you printed around the exception happens at the start of program execution, so I don't understand the timeline of events here for a single run / execution.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618093803:345,load,loading,345,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618093803,1,['load'],['loading']
Performance,"I'm planning on using your wonderful Salmon tool v0.12.0 for generating TPM counts with a view to quantifying relative abundance of certain bacterial antibiotic resistance genes in my shotgun (human gut) metagenomes. So as to ensure strict mappings to the genes of interest, I would like to set the value of the flag '--minScoreFraction' to 0.90. Since its a metagenome with a truck-load of genes from several microbes, I plan to quantify only those genes that show >=90% identity at the nucleotide-level to the known antibiotic resistance genes (of interest). My question here really is whether setting the flag minScoreFraction to 0.90 achieves anything close to what I've in mind? Below is the full command line I used for Salmon-based quantification of the tetracycline resistance gene tetW. salmon quant --meta -i amr_indices/tetW_index -l A -1 Corr_clean_phiclean_10_8_L001_R1_001.fastq.gz -2 Corr_clean_phiclean_10_8_L001_R2_001.fastq.gz -o 10_tetW_test_quant --mimicStrictBT2 --validateMappings --minScoreFraction=0.90. I would highly appreciate any feedback from you in this regard. Many thanks in advance for your time.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/330:383,load,load,383,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/330,1,['load'],['load']
Performance,"I'm running salmon v.4 (downloaded and compiled today) on gencode v22 and got the following error:. Performing PCA decomposition; salmon: /home/merkija1/software/salmon-0.4.0/include/eigen3/Eigen/src/Core/Redux.h:202: static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]: Assertion `size && ""you are using an empty matrix""' failed.; Aborted. The command I ran is:; salmon-0.4.0/src/salmon quant --index gencode.v22.index_0.4.0/ --mates1 <(gunzip -c r1_fq1.gz r1_fq2.gz --mates2 <(gunzip -c r2_fq1.gz r2_fq2.gz ) --output $OUTPUT_DIR --biasCorrect --threads 4 --geneMap gencode.v22.annotation.nochr.gtf --libType ""ISF"". If I remove the --biasCorrect flag, it runs without error.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/5:100,Perform,Performing,100,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/5,1,['Perform'],['Performing']
Performance,"I'm trying to build salmon on FreeBSD. . First issue, fetchRapMap.sh fails because it calls /bin/bash. Bash on FreeBSD is in /usr/local/bin/bash.; This is easily worked around with a symlink. Second issue: libbwa fails to build. . ```; [ 34%] Performing build step for 'libbwa'; make[3]: ""/usr/home/esiefker/salmon/salmon/external/bwa-master/Makefile"" line 17: Missing dependency operator; make[3]: ""/usr/home/esiefker/salmon/salmon/external/bwa-master/Makefile"" line 19: Need an operator; make[3]: Fatal errors encountered -- cannot continue; make[3]: stopped in /usr/home/esiefker/salmon/salmon/external/bwa-master; *** Error code 1; ```; In addition to failing to build bwa, bwa is present in ports and already installed on this machine. Cmake should check for this.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162:243,Perform,Performing,243,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162,1,['Perform'],['Performing']
Performance,"I'm trying to use Trinity; With the modules:; module load trinityrnaseq/2.6.2; module load samtools/1.16; module load jellyfish/2.3.0; module load jdk/1.8.0_151; module load bowtie2/2.2.9; module load salmon/1.9.0; But I get the error:; Exception : [Error: RapMap-based indexing is not supported in this version of salmon.]; salmon index was invoked improperly.; For usage information, try salmon index --help; Exiting.; Error, cmd:; salmon index -t /work/luarrieta/proy_labap/Output/trinity/read_partitions/Fb_0/CBin_36/c3679.trinity.reads.fa.out/Trinity.fasta.tmp -i /work/luarrieta/proy_labap/Output/trinity/read_partitions/Fb_0/CBin_36/c3679.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx --type quasi -k 25 -p 1; died with ret (256) at /opt/bioinf/trinityrnaseq-2.6.2/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; 	Process_cmd::process_cmd('salmon index -t /work/luarrieta/proy_labap/Output/trinity/rea...') called at /opt/bioinf/trinityrnaseq-2.6.2/util/support_scripts/salmon_runner.pl line 20; Trinity run failed. Must investigate error above. @brianjohnhaas",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/832:53,load,load,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/832,6,['load'],['load']
Performance,"I've got some SMART-seq2 data that's been demultiplexed, so hundreds of small Fastq files. So, I was wondering: . - Does Salmon have a way to take multiple samples / libraries on a single run and perform quantification in an optimised serial way? ; - Does Salmon have a way to keep the index in memory similar to STAR? . I guess the obvious alternative is to schedule lots of runs, but just wondered if there were alternative options. Thanks!",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/589:196,perform,perform,196,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/589,1,['perform'],['perform']
Performance,"I've installed Salmon and made the index, but once I run the analysis, I've got this error:. (salmon) andrea@Precision-7920-Tower:/hdd_a/andrea/Salmon$ sudo salmon quant -i GRCh38_salmon_index/ -l A -r /hdd_a/andrea/Salmon/Fastq/1_vehicle_R1.fastq.gz --validateMappings -o /Output/; ### salmon (mapping-based) v0.12.0; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { GRCh38_salmon_index/ }; ### [ libType ] => { A }; ### [ unmatedReads ] => { /hdd_a/andrea/Salmon/Fastq/1_vehicle_R1.fastq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { /Output/ }; Logs will be written to /Output/logs; [2024-02-21 09:49:04.094] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-02-21 09:49:04.094] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-02-21 09:49:04.094] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2024-02-21 09:49:04.094] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2024-02-21 09:49:04.094] [jointLog] [info] parsing read library format; [2024-02-21 09:49:04.094] [jointLog] [info] There is 1 library.; [2024-02-21 09:49:04.207] [jointLog] [info] Loading Quasi index; Exception : [rapidjson internal assertion failure: IsObject()]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. Any suggestion? ; Thank you",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/913:1393,Load,Loading,1393,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/913,1,['Load'],['Loading']
Performance,"I've run into this (or a similar) issue attempting to install Salmon on the UC Berkeley HPC cluster. Iconv was present within one of our Python installs, but that didn't seem to have the header files, so I installed libiconv/1.16 thinking this was a dependency issue. Unfortunately this didn't seem to help. Any guidance would be greatly appreciated. Here is my build script to the point of failure:; ```sh; #!/bin/sh ; MODULE_HOME=/clusterfs/vector/home/groups/software/sl-7.x86_64; PACKAGE_NAME=salmon; GITHUB_URL=https://api.github.com/repos/COMBINE-lab/salmon/releases/latest; VERSION=$(curl -s $GITHUB_URL | \; grep '""tag_name"":' | \; cut -d : -f 2,3 | \; tr -d \"",v | \; xargs); LATEST_RELEASE=$(curl -s $GITHUB_URL | \; grep '""tarball_url""' | \; cut -d : -f 2,3 | \; tr -d \"", | \; xargs); module load gcc/7.4.0 cmake/3.15.1 boost/1.70.0-gcc libiconv/1.16; export CC=`which gcc`; export CXX=`which c++`. cd $MODULE_HOME; mkdir -p source/$PACKAGE_NAME/$VERSION; INSTALL_DIR=$MODULE_HOME/modules/$PACKAGE_NAME/$VERSION; mkdir -p $INSTALL_DIR; mkdir -p modfiles/$PACKAGE_NAME. cd source/$PACKAGE_NAME/$VERSION; wget $LATEST_RELEASE -O - | tar -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:804,load,load,804,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,2,['load'],['load']
Performance,"I've switched to using precompiled binaries, version 0.6.0. Now working on a new server running CentOS Linux release 7.1.1503. I was able to successfully generate my index, then started running the quantification step. Here is my command:. `$ /home/jorvis/salmon/bin/salmon quant -p 24 -i transcripts_index -l IU -1 R1.trimmed.PE.fastq -2 R2.trimmed.PE.fastq -o transcripts_quan`. This host has 48 cores and 128GB RAM. . And here is the STDOUT. ```; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 24 }; # [ index ] => { transcripts_index }; # [ libType ] => { IU }; # [ mates1 ] => { R1.trimmed.PE.fastq }; # [ mates2 ] => { R2.trimmed.PE.fastq }; # [ output ] => { transcripts_quan }; Logs will be written to transcripts_quan/logs; [2016-03-30 15:50:48.489] [jointLog] [info] parsing read library format; there is 1 lib; Loading 64-bit quasi index[2016-03-30 15:50:48.543] [jointLog] [info] Loading Quasi index; [2016-03-30 15:50:48.544] [stderrLog] [info] Loading Suffix Array; [2016-03-30 15:50:48.544] [stderrLog] [info] Loading Position Hash; [2016-03-30 15:50:58.359] [stderrLog] [info] Loading Transcript Info; [2016-03-30 15:50:59.932] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-30 15:51:00.610] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-30 15:51:00.917] [stderrLog] [info] Computing transcript lengths; [2016-03-30 15:51:00.925] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-30 15:51:08.499] [jointLog] [info] done; [2016-03-30 15:51:08.499] [stderrLog] [info] Done loading index. Segmentation fault; ```. The only log file I see is this one: transcripts_quan/logs/salmon_quant.log. $ cat salmon_quant.log ; [2016-03-30 15:50:48.489] [jointLog] [info] parsing read library format; [2016-03-30 15:50:48.543] [jointLog] [info] Loading Quasi index; [2016-03-30 15:51:08.499] [jointLog] [i",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54:934,Load,Loading,934,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54,1,['Load'],['Loading']
Performance,"I, too, would like to see the relative performance of the two libraries. The only challenge is in making the comparison apples-to-apples (i.e. enabling multi-threaded parsing in seqtk with minimal overhead ‚Äî a concurrent queue is cheap, but not free).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152828910:39,perform,performance,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152828910,4,"['concurren', 'multi-thread', 'perform', 'queue']","['concurrent', 'multi-threaded', 'performance', 'queue']"
Performance,"ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 4 }; ### [ output ] => { BM_1/alevin }; ### [ mates1 ] => { ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz }; ### [ mates2 ] => { ./BM_1/run1/bm_S10_L001_R2_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:2040,load,load,2040,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['load'],['load']
Performance,"If i use the smaller set of barcodes, then I progress further. However, I still receive an error message (and there no **quants_mat_rows.txt** file):. ```; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0.00 UMI after deduplicating.; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0 BiDirected Edges.; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0 UniDirected Edges.; [2021-07-13 13:59:07.134] [alevinLog] [info] Finished optimizer; /var/spool/slurmd/job3050767/slurm_script: line 23: 10494 Floating point exception../../Ref_Generation/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL. ```. If the barcode is on the opposite read, then I am not sure if I should really be using the reverse or reverse complement (possibly even for the full barcode list)?. However, for the sake of this discussion, I will now test not providing any white list. If that works, then I will close the ticket again. **Update (7/14/2021)**: I have added the full log file here: [cluster_log.log](https://github.com/COMBINE-lab/salmon/files/6819402/cluster_log.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879497561:437,optimiz,optimizer,437,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879497561,1,['optimiz'],['optimizer']
Performance,"In terms of an intermediate update:. **Setting 1**:. _Command 1_:; `/path/to/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`; _End of Log 1_:; ```; [2021-07-13 20:12:34.651] [alevinLog] [info] Starting white listing of 814 cells; [2021-07-13 20:12:34.651] [alevinLog] [info] Starting to make feature Matrix; [2021-07-13 20:12:34.654] [alevinLog] [info] Done making feature Matrix; [2021-07-13 20:12:35.447] [alevinLog] [info] Finished white listing; [2021-07-13 20:12:36.158] [alevinLog] [info] Finished optimizer; 0.0408521	8.9925e-05	0.000114595	636780	18682.9	; 0.0290163	6.61624e-05	0.000111685	230922	8010.3	; ```; _Size of quants_mat_rows.txt 1_: 814 lines/barcodes. **Setting 2:**:; _Command 1_:; `/path/to/salmon alevin -l ISR --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`; _End of Log 1_:; ```; [2021-07-14 09:51:38.564] [alevinLog] [info] Starting white listing of 814 cells; [2021-07-14 09:51:38.564] [alevinLog] [info] Starting to make feature Matrix; [2021-07-14 09:51:38.566] [alevinLog] [info] Done making feature Matrix; [2021-07-14 09:51:39.347] [alevinLog] [info] Finished white listing; [2021-07-14 09:51:39.541] [alevinLog] [info] Finished optimizer; [2021-07-14 09:51:39.564] [jointLog] [warning] NOTE: Read Lib [[ ../Reads/5309-CT-2_S01_L005_R1_001.fastq.gz, ../Reads/5309-CT-2_S01_L005_R2_001.fastq.gz]] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: 5309-CT-2/lib_format_counts.json for details. 0.0408521	8.9925e-05	0.000114595	636780	18682.9	; 0.0290163	6.61624e-05	0.000111685	230922	8010.3	; ```; _Size of quants_mat_rows.txt 1_: 814 lines/barcodes. Technically, this means that the program ran without generating an error message, but this seems strange to me. So, I think I would prefer to keep the issue open a little bit longer.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-880273749:536,optimiz,optimizer,536,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-880273749,2,['optimiz'],['optimizer']
Performance,Installing salmon with this command; ```; conda install -c bioconda salmon. ```; ```; kokyriakidis@Konstantinos:/mnt/36642bae-9ec9-4100-88a2-ac173a20ea16/CLL_PROJECT/CLL_TEST1/work$ conda install -c bioconda salmon. Collecting package metadata (current_repodata.json): done; Solving environment: done. ==> WARNING: A newer version of conda exists. <==; current version: 4.7.12; latest version: 4.8.0. Please update conda by running. $ conda update -n base conda. # All requested packages already installed.; ```; seem to not update to 1.0.0 and stuck with v0.14.1; ```; salmon v0.14.1. Usage: salmon -h|--help or ; salmon -v|--version or ; salmon -c|--cite or ; salmon [--no-version-check] <COMMAND> [-h | options]. Commands:; index Create a salmon index; quant Quantify a sample; alevin single cell analysis; swim Perform super-secret operation; quantmerge Merge multiple quantifications into a single file; ```. Any thoughts?,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/461:815,Perform,Perform,815,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/461,1,['Perform'],['Perform']
Performance,Interesting. It got past the index loading step for me in under 10 seconds at least. I could time it more properly if you like after this run has completed.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204085138:35,load,loading,35,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204085138,1,['load'],['loading']
Performance,"InvCov: 457.073 normfactor: 260.286; [2018-06-30 22:10:52.498] [alevinLog] [info] Total 10434(has 987 low confidence) barcodes; [2018-06-30 22:10:52.530] [alevinLog] [info] Done True Barcode Sampling; [2018-06-30 22:10:53.101] [alevinLog] [info] Done populating Z matrix; [2018-06-30 22:10:53.103] [alevinLog] [info] Done indexing Barcodes; [2018-06-30 22:10:53.104] [alevinLog] [info] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.30% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread s",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:2754,Load,Loading,2754,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['Load'],['Loading']
Performance,"Is there a different binary somewhere perhaps? . I a downloading: . https://github.com/COMBINE-lab/salmon/releases/download/v0.8.2/Salmon-0.8.2_macOS_10.12.tar.gz. And get this: . Salmon-0.8.2_macOS_10.12.tar.gz; 100%[=====================================================>] 2.64M ; 326KB/s in 6.6s . 2017-04-18 09:43:33 (409 KB/s) - 'Salmon-0.8.2_macOS_10.12.tar.gz' saved; [2766997/2766997] . MacBook-Air:salmon jjv5$ tar zxf Salmon-0.8.2_macOS_10.12.tar.gz . MacBook-Air:salmon jjv5$ cd Salmon-0.8.2_macOX_10.12/bin/ . MacBook-Air:bin jjv5$ ./salmon -h . salmon(43548,0x7fffdc0c23c0) malloc: *** malloc_zone_unregister() failed; for 0x7fffdc0b8000 . Salmon v0.8.2 . Usage: salmon -h|--help or . salmon -v|--version or . salmon -c|--cite or . salmon [--no-version-check] <COMMAND> [-h | options] . Commands: . cite Show salmon citation information . index Create a salmon index . quant Quantify a sample . swim Perform super-secret operation . MacBook-Air:bin jjv5$ sw_vers . ProductName: Mac OS X . ProductVersion: 10.12.4 . BuildVersion: 16E195. On 2017-04-18 09:33, Rob Patro wrote:. > Hi @jjv5 [1], ; > ; > This error should be fixed. The binary works for me without error (or that strange jemalloc warning) on OS X 10.12.4. The relevant library should be statically linked in, so I doubt it's a path problem. You could also try the conda build [2] to see if that works for you. ; > ; > --; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub [3], or mute the thread [4].; . Links:; ------; [1] https://github.com/jjv5; [2] https://anaconda.org/bioconda/salmon; [3]; https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294845429; [4]; https://github.com/notifications/unsubscribe-auth/AA45u06Kawg81nafcz0GBVcZICdu85iqks5rxLuSgaJpZM4Ktuq4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294849229:912,Perform,Perform,912,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294849229,1,['Perform'],['Perform']
Performance,"Is there a way to compile Salmon to a 32-bit architecture by any chance? I ask because I'd like to have single-cell tutorials on sandbox.bio v2 that use Salmon. But to power the platform, I'm running a 32-bit/i686 Debian OS in the browser üò¨. When I try to compile it in a [i386/debian:bookworm-20230904-slim](https://hub.docker.com/r/i386/debian/) Docker container, this is the error I get:. ```; 1075.0 -- Build files have been written to: /root/build/salmon/external/oneTBB-2021.5.0; 1075.2 [ 14%] Performing build step for 'libtbb'; 1075.7 [ 2%] Building CXX object src/tbb/CMakeFiles/tbb.dir/address_waiter.cpp.o; 1079.6 [ 5%] Building CXX object src/tbb/CMakeFiles/tbb.dir/allocator.cpp.o; 1083.2 [ 7%] Building CXX object src/tbb/CMakeFiles/tbb.dir/arena.cpp.o; 1087.7 In file included from /usr/lib/gcc/i686-linux-gnu/12/include/x86gprintrin.h:89,; 1087.7 from /usr/lib/gcc/i686-linux-gnu/12/include/immintrin.h:27,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/../../include/oneapi/tbb/detail/_machine.h:42,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/../../include/oneapi/tbb/detail/_utils.h:26,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/task_dispatcher.h:20,; 1087.7 from /root/build/salmon/external/oneTBB-2021.5.0/src/tbb/arena.cpp:17:; 1087.7 /usr/lib/gcc/i686-linux-gnu/12/include/waitpkgintrin.h: In function 'tbb::detail::r1::prolonged_pause()':; 1087.7 /usr/lib/gcc/i686-linux-gnu/12/include/waitpkgintrin.h:53:1: error: inlining failed in call to 'always_inline' '_tpause(unsigned int, unsigned long long)': target specific option mismatch; 1087.7 53 | _tpause (unsigned int __A, unsigned long long __B); 1087.7 | ^~~~~~~; 1087.7 compilation terminated due to -Wfatal-errors.; 1087.8 make[5]: *** [src/tbb/CMakeFiles/tbb.dir/build.make:104: src/tbb/CMakeFiles/tbb.dir/arena.cpp.o] Error 1; 1087.8 make[4]: *** [CMakeFiles/Makefile2:170: src/tbb/CMakeFiles/tbb.dir/all] Error 2; 1087.8 make[3]: *** [Makefile:156: all] Er",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/872:500,Perform,Performing,500,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/872,1,['Perform'],['Performing']
Performance,"Is there an option to use salmon only to identify the library type? I want to use the option libType -A to use salmon at a pre-processing step to identify the library type without performing quantification. An option like ""salmon identify"" would be really useful, and I can imagine easy to implement.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/138:180,perform,performing,180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/138,1,['perform'],['performing']
Performance,"Is this a user error or a programming error?. FreeBSD 12.0-RELEASE FreeBSD 12.0-RELEASE r341666 GENERIC amd64 ; 8G memory, 2T disc.; Salmon installed as Linux binary. The command I issued was; salmon quant -i salmonIndexMouse -l IU -1 SRR1818187_2.fastq.gz -2 SRR1818187_1.fastq.gz --validateMappings -o Salmontranscripts_quant; nuc11.2 wayne@dideoxy2:~/rnaseq > sh salmonQuant.sh; Version Info: This is the most recent version of salmon. [ 0.14.1 ]. ......; It was going well, until:; ....; [2019-08-17 11:51:58.943] [stderrLog] [info] There were 134,473,138 set bits in the bit array; [2019-08-17 11:51:58.995] [stderrLog] [info] Computing transcript lengths; [2019-08-17 11:51:58.995] [stderrLog] [info] Waiting to finish loading hash. [2019-08-17 11:52:03.223] [stderrLog] [info] Done loading index; [2019-08-17 11:52:03.223] [jointLog] [info] done; [2019-08-17 11:52:03.223] [jointLog] [info] Index contained 106,434 targets; Segmentation fault (core dumped)",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419:725,load,loading,725,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419,2,['load'],['loading']
Performance,"It looks like the first several runs crashed with:. ```; ...; [2016-12-18 12:10:47.956] [jointLog] [info] iteration = 519 | max rel diff. = 0.00832947; [2016-12-18 12:10:47.962] [jointLog] [info] Finished optimizer; [2016-12-18 12:10:47.962] [jointLog] [info] writing output. salmon: /usr/include/boost/random/gamma_distribution.hpp:117: boost::random::gamma_distribution<RealType>::gamma_distribution(const result_type&, const result_type&) [with RealType; = double; boost::random::gamma_distribution<RealType>::result_type = double]: Assertion `_alpha > result_type(0)' failed.; ```. And then a run finally hung with:. ```; [2016-12-18 13:31:06.283] [jointLog] [info] iteration = 517 | max rel diff. = 0.00871129; [2016-12-18 13:31:06.289] [jointLog] [info] Finished optimizer; [2016-12-18 13:31:06.289] [jointLog] [info] writing output. [2016-12-18 13:31:06.703] [jointLog] [info] Starting Gibbs Sampler; 0% [> ] ETA > 1 week; ```. Here's another batch of 100 backtraces: [salmon-gdb-bt.zip](https://github.com/COMBINE-lab/salmon/files/659757/salmon-gdb-bt.zip)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267855087:205,optimiz,optimizer,205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267855087,2,['optimiz'],['optimizer']
Performance,"It looks like you are issuing . `$cmake .` . rather than . `$cmake ..`. when trying to perform the cmake step. If you could build from source, that would be great. However, I was suggesting you try downloading [this](; https://github.com/COMBINE-lab/salmon/releases/download/v0.11.1/salmon-0.11.1-linux_x86_64.tar.gz) pre-compiled linux binary and running that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436938:87,perform,perform,87,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436938,1,['perform'],['perform']
Performance,"It took ~1.5H for V1.2.1 with ```--hitFilterPolicy BOTH```. Attaching log and fastp report, which shows normal tetramer over-representation. By the insert size determined by fastp I suspect there's quite a bit of dovetailing, I did had extremely slow performance with dovetailed libraries (for example SRR7945268, which is insert size 100, and its a PE 150 [not my data]) even allowing dovetails, to the point I ended up mapping them as single end and not using one of the pairs. Even then it took its time. Edit: allowing dovetails only increased the mapping rate by 0.0277%. As an additional note, not ```--minAlnProb 0.1``` nor ```--hardFilter``` help. . [fastp.pdf](https://github.com/COMBINE-lab/salmon/files/4711278/fastp.pdf); [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/4711259/salmon_quant.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636837126:251,perform,performance,251,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636837126,1,['perform'],['performance']
Performance,"It's possible this is [related to the other issue](https://github.com/COMBINE-lab/salmon/issues/321), since I'm also seeing:. ```; 2018-11-28 18:01:19,745 i-05ef169a0611966c7 data_refinery_workers.processors.utils ERROR [pipeline_applied: SALMON] [failure_reason: Shell call to salmon failed because: ### salmon (; ### [ program ] => salmon; ### [ command ] => quant; ### [ libType ] => { A }; ### [ biasSpeedSamp ] => { 5 }; ### [ index ] => { /home/user/data_store/TRANSCRIPTOME_INDEX/HOMO_SAPIENS/long }; ### [ mates1 ] => { /home/user/data_store/processor_job_405995/SRR2963482_1.fastq }; ### [ mates2 ] => { /home/user/data_store/processor_job_405995/SRR2963482_2.fastq }; ### [ threads ] => { 16 }; ### [ output ] => { /home/user/data_store/processor_job_405995/SRR2963482_output/ }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ dumpEq ] => { }; ### [ writeUnmappedNames ] => { }; Logs will be written to /home/user/data_store/processor_job_405995/SRR2963482_output/logs; [2018-11-28 18:01:15.711] [jointLog] [info] parsing read library format; [2018-11-28 18:01:15.711] [jointLog] [info] There is 1 library.; [2018-11-28 18:01:15.761] [stderrLog] [info] Loading Suffix Array; [2018-11-28 18:01:15.761] [jointLog] [info] Loading Quasi index; [2018-11-28 18:01:15.761] [jointLog] [info] Loading 32-bit quasi index; Exception : [Failed to read 1176099240 bytes from input stream! Read 872415224]; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/322#issuecomment-442548280:1169,Load,Loading,1169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/322#issuecomment-442548280,3,['Load'],['Loading']
Performance,JSON Parsing failed - provided NVP (SeqHash) not found when loading index... older version of RapMap,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232:60,load,loading,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232,1,['load'],['loading']
Performance,"Jumping on this thread. I received similar Seg faults with conda install on OSX. I tried the binary you posted, but receive this error when I try to execute. dyld: Library not loaded: @rpath/libtbbmalloc_proxy.dylib; Referenced from: /Users/dnb14/Documents/salmon_0.11.4-pre_OSX/./bin/salmon; Reason: image not found; Trace/BPT trap: 5",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421407796:176,load,loaded,176,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421407796,1,['load'],['loaded']
Performance,Library not loaded: @rpath/libtbbmalloc_proxy.dylib,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/215:12,load,loaded,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/215,1,['load'],['loaded']
Performance,Loading binary data with `alevin_df = parser.read_quants_bin('./salmon_folder')` is slow,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/354:0,Load,Loading,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/354,1,['Load'],['Loading']
Performance,Loading index exception,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/345:0,Load,Loading,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/345,1,['Load'],['Loading']
Performance,"Log] [info] Thread saw mini-batch with a maximum of 2.00% zero probability fragments; [2020-09-05 17:53:51.128] [jointLog] [info] Computed 344,342 rich equivalence classes for further processing; [2020-09-05 17:53:51.128] [jointLog] [info] Counted 20,897,706 total reads in the equivalence classes ; [2020-09-05 17:53:51.133] [jointLog] [info] Number of mappings discarded because of alignment score : 116,214,502; [2020-09-05 17:53:51.133] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 1,428,490; [2020-09-05 17:53:51.133] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2020-09-05 17:53:51.133] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0; [2020-09-05 17:53:51.133] [jointLog] [info] Mapping rate = 40.8004%. [2020-09-05 17:53:51.133] [jointLog] [info] finished quantifyLibrary(); [2020-09-05 17:53:51.242] [jointLog] [info] Starting optimizer; [2020-09-05 17:53:51.129] [fileLog] [info] ; At end of round 0. Observed 51219317 total fragments (51219317 in most recent round). [2020-09-05 17:53:52.959] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-09-05 17:53:53.484] [jointLog] [info] iteration = 0 | max rel diff. = 5315.17; [2020-09-05 17:54:33.041] [jointLog] [info] iteration = 100 | max rel diff. = 19.0781; [2020-09-05 17:55:12.013] [jointLog] [info] iteration = 200 | max rel diff. = 14.788; [2020-09-05 17:55:49.642] [jointLog] [info] iteration = 300 | max rel diff. = 1.29965; [2020-09-05 17:56:27.111] [jointLog] [info] iteration = 400 | max rel diff. = 12.8157; [2020-09-05 17:57:04.974] [jointLog] [info] iteration = 500 | max rel diff. = 5.26288; [2020-09-05 17:57:42.449] [jointLog] [info] iteration = 600 | max rel diff. = 3.19907; [2020-09-05 17:58:19.892] [jointLog] [info] iteration = 700 | max rel diff. = 1.79807; [2020-09-05 17:58:57.376] [jointLog] [info] iteration = 800 | max re",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/571:3489,optimiz,optimizer,3489,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/571,1,['optimiz'],['optimizer']
Performance,Log] [info] iteration = 100 | max rel diff. = 0.124404; [2023-03-07 06:54:54.362] [jointLog] [info] iteration = 200 | max rel diff. = 0.0697214; [2023-03-07 06:54:58.083] [jointLog] [info] iteration = 300 | max rel diff. = 0.0335353; [2023-03-07 06:55:01.780] [jointLog] [info] iteration = 400 | max rel diff. = 0.0247299; [2023-03-07 06:55:05.539] [jointLog] [info] iteration = 500 | max rel diff. = 0.0189304; [2023-03-07 06:55:09.278] [jointLog] [info] iteration = 600 | max rel diff. = 0.017332; [2023-03-07 06:55:13.044] [jointLog] [info] iteration = 700 | max rel diff. = 0.013562; [2023-03-07 06:55:16.780] [jointLog] [info] iteration = 800 | max rel diff. = 0.0118759; [2023-03-07 06:55:20.542] [jointLog] [info] iteration = 900 | max rel diff. = 0.0114777; [2023-03-07 06:55:24.213] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0100626; [2023-03-07 06:55:24.977] [jointLog] [info] iteration = 1022 | max rel diff. = 0.00967998; [2023-03-07 06:55:25.088] [jointLog] [info] Finished optimizer; [2023-03-07 06:55:25.088] [jointLog] [info] writing output ; ```; And the quality control report by `fastp` ; [fastp_report.pdf](https://github.com/COMBINE-lab/salmon/files/10999908/fastp_report.pdf). The log of `bowtie2`:; ```{shell}; $cat bowtie2.log ; 40535435 reads; of these:; 40535435 (100.00%) were paired; of these:; 38666766 (95.39%) aligned concordantly 0 times; 313581 (0.77%) aligned concordantly exactly 1 time; 1555088 (3.84%) aligned concordantly >1 times; ----; 38666766 pairs aligned concordantly 0 times; of these:; 808295 (2.09%) aligned discordantly 1 time; ----; 37858471 pairs aligned 0 times concordantly or discordantly; of these:; 75716942 mates make up the pairs; of these:; 11008379 (14.54%) aligned 0 times; 9748641 (12.88%) aligned exactly 1 time; 54959922 (72.59%) aligned >1 times; 86.42% overall alignment rate; ```. The output of Single-End reads(just read1):; ```{shell}; salmon quant -i assembly_index -l A -r 9998_1.fastq.gz --meta -p 100 -o 9998.quant_,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:4879,optimiz,optimizer,4879,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['optimiz'],['optimizer']
Performance,"Logs will be written to salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant/logs; [2023-08-27 19:59:26.866] [jointLog] [info] setting maxHashResizeThreads to 100; [2023-08-27 19:59:26.866] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-08-27 19:59:26.866] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-08-27 19:59:26.866] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-08-27 19:59:26.866] [jointLog] [info] parsing read library format; [2023-08-27 19:59:26.866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading refe",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:10347,Load,Loading,10347,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"Matrix<double, -1, 1>; Eigen::DenseCoeffsBase<Derived, 1>::Scalar = double; Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.; /home/ngs/scripts/sc-rna/sc-s-salmon-quant.sh: line 40: 10170 Aborted (core dumped) . when I run. ```bash; salmon quant \; -i ""$path_dr_salmonindex_transcriptome_ercc"" \; -o ""$newfilename-salmon-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-08-02 14:41:46.432] [jointLog] [info] Mapping rate = 42.625",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1272,Load,Loading,1272,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['Load'],['Loading']
Performance,"NA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001/logs; [2018-07-30 15:41:42.232] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-30 15:41:42.232] [jointLog] [info] parsing read library format; [2018-07-30 15:41:42.232] [jointLog] [info] There is 1 library.; [2018-07-30 15:41:45.840] [jointLog] [info] Loading Quasi index; [2018-07-30 15:41:45.840] [jointLog] [info] Loading 32-bit quasi index; [2018-07-30 15:41:45.840] [stderrLog] [info] Loading Suffix Array ; [2018-07-30 15:42:39.168] [stderrLog] [info] Loading Transcript Info ; [2018-07-30 15:42:53.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-30 15:42:56.236] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-30 15:42:56.328] [stderrLog] [info] Computing transcript lengths; [2018-07-30 15:42:56.329] [stderrLog] [info] Waiting to finish loading hash; [2018-07-30 15:42:56.329] [stderrLog] [info] Done loading index; [2018-07-30 15:42:56.329] [jointLog] [info] done; [2018-07-30 15:42:56.329] [jointLog] [info] Index contained 203027 targets. processed 4000003 fragments; processed 298000000 fragments 0.071773[2018-07-30 15:43:47.415] [jointLog] [info] Automatically detected most likely library type as IU; hits: 20950511, hits per frag: 0.0703073[2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.06% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.432] [jointLog] [info] Thread saw mini-batch with a maximum of 0.06% zero probability fragments; [2018-07-30 16:26:22.469] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.513] [jointLog] [info] Thread saw mini-batch w",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261:2487,load,loading,2487,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261,1,['load'],['loading']
Performance,"No worries. The ""cache"" is one of the most annoying parts of CMake as a build system ;P.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/254#issuecomment-407465114:17,cache,cache,17,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/254#issuecomment-407465114,1,['cache'],['cache']
Performance,"O_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevin }; ### [ mates1 ] => { /dev/fd/63 }; ### [ mates2 ] => { /dev/fd/62 }; ### [ index ] => { /u/user/ref/cellranger/salmon/transcripts_index }; ### [ tgMap ] => { tx2gene.txt }. [2018-06-08 13:37:41.409] [jointLog] [info] Fragment incompatibility prior below threshold.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2698,load,loading,2698,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['load'],['loading']
Performance,"Oh, so multiple things can go wrong based on how you sampled the read like CB frequency not being aligning with the expected experiment. I'd say if you have to try a small experiment, may be sample all the reads from say ~10 Cellular barcode and specify them to alevin using `--whitelist` flag. I just tested the data it seems to work with the following log.; ```; [2021-04-16 15:57:26.183] [jointLog] [info] Mapping rate = 48.8769%. [2021-04-16 15:57:26.183] [jointLog] [info] finished quantifyLibrary(); [2021-04-16 15:57:26.360] [alevinLog] [info] Starting optimizer; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647#issuecomment-821529523:560,optimiz,optimizer,560,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647#issuecomment-821529523,1,['optimiz'],['optimizer']
Performance,"Ok @DarwinAwardWinner, I think it's fixed for real this time. The issue was stemming from an uninitialized prior value in the Gibbs sampler under VBOpt mode (the initialization code was updated on the develop branch, which is where the bug was introduced). This, in turn, was leading to `nan` being passed as the alpha parameter of `std::gamma_distribution`. With the `-Ofast` optimization flags, at least, this leads `std::gamma_distribution()` to hang forever in an infinite loop. Clearly, `nan` should not be passed to `std::gamma_distribution()`, but I'd argue the behavior of looping forever here is not great. Anyway, I fixed the initialization bug, so that this nan should never pop up. Just to be safe, I also changed the default optimization flag to `-O3` so that at least `nan` and `inf` can be properly tested. Since the TBB code and the parallel sampling weren't causing the issue, I've added them back in. Could you please test the latest push (40584e62859fb65463188b50d132c1eb622b21f0) and verify that this resolves the issue for you (*hopefully*!)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267877253:377,optimiz,optimization,377,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267877253,2,['optimiz'],['optimization']
Performance,"Ok all; another update. The issue I raise above still exists (differences between calls to `ksw_extz` and `ksw_extz2sse`). *However*, I think that what is happening in this case is actually explained more simply. That is, the positions being reported by salmon are _correct_ given the optimal alignment. Specifically, salmon is performing an end-to-end alignment of the read, and the optimal alignment here includes an indel of length 3 in the initial portion of the read. If we were outputting the CIGAR string along with the position, then the bases would line up because the ""off by 3"" issue that happens above for the reads would be addressed when walking the CIGAR. However, we don't (currently) output the CIGAR ‚Äî rather, we output a decoy CIGAR that does not represent the optimal alignment as computed by ksw2. So, if we assume all matches / mismatches (an indel-free prefix for this read), then we see the position shift noted in the initial bug report. I think the easiest solution, for the time being at least, is to report the position as if the prefix before the first MEM is indel free under the optimal alignment (even if it is not and the optimal score reflects that). However, if there are other suggestions for the best way to address this, I'm open to those as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574719940:328,perform,performing,328,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574719940,2,['perform'],['performing']
Performance,"Ok, so even v0.9.1, on my machine at least, is not seeing this issue for your index. Can you tell me something about the host OS (VM) on the systems where it is failing?. To answer your other questions, by ""size of the types"" I mean e.g. if you are switching to a 32-bit processor or alternative architecture (very unlikely). One other thought is to try it ""interactively"" on a similar instance. Could it be some sort of issue where the file is being accessed before it has been completely loaded / moved to the target machine? Can you run some sort of checksum validation on the machine before attempting to load the index?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442681478:490,load,loaded,490,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442681478,2,['load'],"['load', 'loaded']"
Performance,"Ok, thank you very much.; The problem I had was RAM availability. I enlarged it for 48 and it works.; However, to quantify I had another problem.; I use this command line and I increase to 56 RAM. srun ./salmon-1.5.2_linux_x86_64/bin/salmon quant -i salmon_index \; -l A \; -1 ERR3537668_1.fastq.gz \; -2 ERR3537668_2.fastq.gz \; -o transcripts_DecoyQuant \; --validateMappings \; --numBootstraps 100 \; --gcBias \; --seqBias\; -p 12. And I got this error message:; [2021-11-08 14:35:28.348] [jointLog] [info] Finished Bootstrapping; ERROR: Could not create the directory [""transcripts_quant""]. Please check; that. But actually, it was created.; I really don't understand the message error. Best wishes,; Luciana. On Fri, Nov 5, 2021 at 5:56 PM Rob Patro ***@***.***> wrote:. > Hi @lubios <https://github.com/lubios>,; >; > This suggests that the machine was not able to allocate enough memory to; > perform the requested operation. I would try the following things in order; > to see if they fix the issue. First, try quantifying without the; > decoy-aware index. This doesn't provide the benefits of the decoy sequence,; > but it will ensure that this is, in fact, the problem you are having. If; > that works, try building the decoy-aware index with the --sparse; > parameter. This will build the sparse index instead of the dense index,; > which is a bit smaller and may therefore fit in RAM on the machine where; > you are doing quantification.; >; > Best,; > Rob; >; > ‚Äî; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-962058307>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADRT5CUYGXBSY3UOX24RTYDUKQLETANCNFSM5HOIMSQQ>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-963995631:900,perform,perform,900,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-963995631,1,['perform'],['perform']
Performance,"Ok, the worst possible thing happened: I ran it a second time and it worked just fine. Does Salmon use any random number generation, and if so, is there an option to set the seed to get a deterministic run? Or is it potentially non-deterministic due to multi-threading?. One additional threading-related tidbit: I believe that when it does get stuck, a single CPU core is at 100% and the others are all unused.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266950738:253,multi-thread,multi-threading,253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266950738,1,['multi-thread'],['multi-threading']
Performance,"Okay, so I've made some progress. After deleting the Cache.txt file I tried to build again at which point I noticed the following:; **WARNING: Target ""salmon"" requests linking to directory ""/users/work/jake/bin/zlib-1.2.11/"". Targets may link only to libraries. CMake is dropping the item.**; **WARNING: Target ""unitTests"" requests linking to directory ""/users/work/jake/bin/zlib-1.2.11/"". Targets may link only to libraries. CMake is dropping the item.**. So I actually went back a step and check my initial cmake command in the ../salmon-0.8.2/build/ directory. It also had the same issue and therefore wasn't building correctly. I started the install again from ../salmon-0.8.2/build/ using the following: . cmake -DBOOST_ROOT=/users/work/jake/bin/boost_1_64_0/ -DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h .. . It seemed to work nicely and I got all the build files to propagate into the ../salmon-0.8.2/build/ directory. From here I ran 'make' which did a whole bunch of things I hadn't seen it do yet, so assumably it was working as intended. This is until it got to the following stage:. Scanning dependencies of target libbwa; [ 48%] Creating directories for 'libbwa'; [ 49%] Performing download step for 'libbwa'; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 125 0 125 0 0 167 0 --:--:-- --:--:-- --:--:-- 167; 0 0 0 219k 0 0 123k 0 --:--:-- 0:00:01 --:--:-- 326k; bwa-master.tar.gz: OK; bwa-0.7.12.3/.gitignore; bwa-0.7.12.3/.travis.yml; bwa-0.7.12.3/COPYING; bwa-0.7.12.3/ChangeLog; bwa-0.7.12.3/Makefile; bwa-0.7.12.3/NEWS.md; bwa-0.7.12.3/QSufSort.c; bwa-0.7.12.3/QSufSort.h; bwa-0.7.12.3/README-alt.md; bwa-0.7.12.3/README.md; bwa-0.7.12.3/bamlite.c; bwa-0.7.12.3/bamlite.h; bwa-0.7.12.3/bntseq.c; bwa-0.7.12.3/bntseq.h; bwa-0.7.12.3/bwa.1; bwa-0.7.12.3/bwa.c; bwa-0.7.12.3/bwa.h; bwa-0.7.12.3/bwakit/; bwa-0.7.12.3/bwakit/README.md; bwa-0.7.12.3/bwakit/bwa-postalt.js; bwa-0.7.12.3/bwakit/run-HLA; bwa-0.7.12.3/bwak",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:53,Cache,Cache,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,1,['Cache'],['Cache']
Performance,"Oki, so I have updated a couple of things in the latest commit on the develop branch, which should make the things more streamlined. . * `maxNumBarcodes`: As you have initially used `maxNumBarcodes` which is by default set to 100k it means. by default alevin quantifies 100k CBs which includes both the low and high confidence CB count. You can change this number accordingly to set the universe of the top CB to quantify.; * `KeepCBFraction` : It defines what fraction of `maxNumBarcodes` to be used as the high confidence barcodes and should definitely generate the quants for. If set to 1 then everything is high confidence and the whitelisting cannot be performed. Thanks to this issue, alevin will not fail without error when there is no low confidence CB is found instead it checks if the number of low confidence CB is less than `lowRegionMinBarcodes` (default to 200), alevin will warn and not perform the whitelisting.; * `freqThreshold`: This is used to filter out most obvious cases to filter out CB with frequency less than set by the parameter (default to 10). Hope this help ! I am also testing on my end for any other potential bug. Please let me know if you get a chance to check the develop branch .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503396823:658,perform,performed,658,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503396823,2,['perform'],"['perform', 'performed']"
Performance,"On 11/04/2020 01:04, Rob Patro wrote:; > I saw no performance regressions, so 1.2.0 is built without the ; > offending flag. Thanks for the heads up. Hi, Rob. Thanks for fixing the problem so quickly!. Tony. -- ; Minke Informatics Limited, Registered in Scotland - Company No. SC419028; Registered Office: 3 Donview, Bridge of Alford, AB33 8QJ, Scotland (UK); tel. +44(0)19755 63548 http://minke-informatics.co.uk; mob. +44(0)7985 078324 mailto:tony.travis@minke-informatics.co.uk",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-612423808:50,perform,performance,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-612423808,1,['perform'],['performance']
Performance,"On Sun, Nov 01, 2015 at 06:15:19AM -0800, Rob Patro wrote:. > I, too, would like to see the relative performance of the two libraries. The only challenge is in making the comparison apples-to-apples (i.e. enabling multi-threaded parsing in seqtk with minimal overhead ??? a concurrent queue is cheap, but not free). . Other points worth considering:; - there's a runtime overhead to constantly changing sequencing formats. Some; programs want split, others want interleaved. We've settled on interleaved; because it enables streaming, which is a major win (2-4x performance); and; also because having one file is better than having 2 or 4.; - the management overhead to keeping track of many files is less for experts,; but is pretty significant for beginners. Enabling multiple input formats ++. So I think it'd be great to have the basic functionality, identify where; there are performance problems, and then simply note them for future ;). I would like to enable -1 and -2 in khmer scripts, but for our usual use cases; (multiple sequencing files being normalized and/or partitioned and/or error; trimmed) the command line syntax is too confusing ATM.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152829225:101,perform,performance,101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152829225,12,"['concurren', 'multi-thread', 'perform', 'queue']","['concurrent', 'multi-threaded', 'performance', 'queue']"
Performance,"On a fresh conda install,. ```; conda create -n slm2 -y -c bioconda salmon; ```; yields a broken salmon:; ```; $ conda activate slm2; (slm2) ggg298-43@farm:~$ salmon; salmon: error while loading shared libraries: libboost_iostreams.so.1.60.0: cannot open shared object file: No such file or directory; ```. This seems to be because I'm missing conda-forge; this:. ```; conda create -n slm3 -y -c conda-forge -c bioconda salmon; conda activate slm3; salmon; ```; works fine!. Nothing needs to be done, and I will update as I debug, but I wanted to put this here for google bait.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/480:187,load,loading,187,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/480,1,['load'],['loading']
Performance,"One thought might be that on OSX, I think docker sets a very low default RAM limit (2G?). That's insufficient for loading the entire human txome index. You could try [setting this](https://docs.docker.com/docker-for-mac/#advanced) to a larger value (e.g. 6 or 8G should suffice).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/243#issuecomment-400721687:114,load,loading,114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/243#issuecomment-400721687,1,['load'],['loading']
Performance,"P0_B07_R.trimmed.fastq.gz); `; Some samples finish the quantification while others return the error. Some samples should have the genes while others not. The reads are 25 long and there is variability in the total number of reads among all the samples. . Please, indicate me what other information you may need. Thank you in advance,. Best,. Victor. ERROR:; `[2017-02-09 13:51:38.119] [jointLog] [info] parsing read library format; [2017-02-09 13:51:38.119] [jointLog] [info] There is 1 library.; [2017-02-09 13:51:38.559] [stderrLog] [info] Loading Suffix Array; [2017-02-09 13:51:38.560] [stderrLog] [info] Loading Transcript Info; [2017-02-09 13:51:38.561] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-02-09 13:51:38.562] [stderrLog] [info] There were 2 set bits in the bit array; [2017-02-09 13:51:38.562] [stderrLog] [info] Computing transcript lengths; [2017-02-09 13:51:38.562] [stderrLog] [info] Waiting to finish loading hash; [2017-02-09 13:51:38.562] [stderrLog] [info] Done loading index; [2017-02-09 13:51:38.557] [jointLog] [info] Loading Quasi index; [2017-02-09 13:51:38.558] [jointLog] [info] Loading 32-bit quasi index; [2017-02-09 13:51:38.562] [jointLog] [info] done; processed 3500000 fragmentsjointLog] [info] Index contained 2 targets; hits: 0, hits per frag: 0; [2017-02-09 13:51:48.488] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-02-09 13:51:48.488] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-02-09 13:51:48.502] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-02-09 13:51:48.502] [jointLog] [info] Mapping rate = 0%. [2017-02-09 13:51:48.502] [jointLog] [info] finished quantifyLibrary(); [2017-02-09 13:51:48.512] [jointLog] [info] Starting optimizer; [2017-02-09 13:51:48.514] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119:1674,load,loading,1674,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119,1,['load'],['loading']
Performance,"PL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host lib",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2378,Load,Loadable,2378,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,Perform salmon on only UTR region,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/248:0,Perform,Perform,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/248,1,['Perform'],['Perform']
Performance,Performance fix: don't let boost promote doubles to long doubles,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/967:0,Perform,Performance,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/967,2,['Perform'],['Performance']
Performance,Performance issue in use of boost::math::digamma on aarch64 Linux,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/966:0,Perform,Performance,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/966,1,['Perform'],['Performance']
Performance,Performing download step for 'libtbb'; tbb-2017_U3.tgz: FAILED; sha256sum: WARNING: 1 of 1 computed checksum did NOT match; tbb-2017_U3.tgz did not match expected SHA256! Exiting.; make[2]: *** [libtbb-prefix/src/libtbb-stamp/libtbb-download] Error 1; make[1]: *** [CMakeFiles/libtbb.dir/all] Error 2; make: *** [all] Error 2; -----------------------------------------------------------; command used; cmake -DBOOST_INCLUDEDIR=/local/genome/packages/boost/1.57.0/include/ -DBOOST_LIBRARYDIR=/local/genome/packages/boost/1.57.0/lib/ -DCMAKE_INSTALL_PREFIX=/local/genome/packages/salmon/0.8.2. ------------------------------------------------------------------------; boost/1.57.0 ; gcc/4.9.4,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/153:0,Perform,Performing,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/153,1,['Perform'],['Performing']
Performance,"R library. flag As you can see the percentage of mapped reads is high and not consistent with incorrect strand mapping in my view. I did the salmon quantification both with and without using seq_bias and gc_bias corrections and got the same result. Info for both included. I was advised that a FWD library was used - this is a bit confusing given the success of running the SR option. I suggest you continue exploring with your own data in the current environment, which does differ from May 2018. ________________________________; From: tamuanand <notifications@github.com>; Sent: Saturday, 14 December 2019 10:53 AM; To: COMBINE-lab/salmon <salmon@noreply.github.com>; Cc: Susan Corley <s.corley@unsw.edu.au>; Mention <mention@noreply.github.com>; Subject: Re: [COMBINE-lab/salmon] Salmon SAF method - Read mapping issue with Lexogen/QuantSeq data?? (#449). Hi @s1corley<https://github.com/s1corley>. As @rob-p<https://github.com/rob-p> mentions, your paper could help assess different methodologies for quantification and also help optimize salmon further for QuantSeq. I would still like you to check if you have used salmon quant command line correctly for QuantSeq data analysis. Your paper briefly alludes to QuantSeq Forward in the Introduction section of the paper. The QuantSeq Forward kit has an oligo (dT) primer which contains the Illumina-specific Read 2 linker ... but the Methods section of your paper does not specify if you have used QuantSeq FWD or REV. Page 14 of the PDF from the Lexogen Website data analysis pipeline for QuantSeq FWD<https://www.bluebee.com/wp-content/uploads/2018/11/015UG108V0201-QuantSeq-Data-Analysis-Pipeline_2018-10-18.pdf> recommends using the below htseq command line. htseq-count -m intersection-nonempty -s yes -f bam -r pos $bam; $resource_dir/annotation.gtf > $bam_dir/read_counts.txt. QuantSeq is a stranded protocol. For the QuantSeq FWD pipeline the argument -s yes indicates; stranded in the sense orientation. For the QuantSeq REV pipeline -s ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565684552:1124,optimiz,optimize,1124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565684552,1,['optimiz'],['optimize']
Performance,"RCh38.rel79/ }; # [ numBootstraps ] => { 100 }; # [ output ] => { 61LP1AAXX_8 } ; # [ ] => { /dev/fd/63 }; # [ ] => { /dev/fd/62 }; Logs will be written to 61LP1AAXX_8/logs; there is 0[2016-07-11 09:51:45.206] [jointLog] [info] parsing read library format; lib; Loading 32-bit quasi index[2016-07-11 09:51:45.328] [jointLog] [info] Loading Quasi index; [2016-07-11 09:51:45.736] [stderrLog] [info] Loading Suffix Array; [2016-07-11 09:51:45.771] [stderrLog] [info] Loading Position Hash; [2016-07-11 09:52:13.781] [stderrLog] [info] Loading Transcript Info; [2016-07-11 09:52:20.821] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-07-11 09:52:21.877] [stderrLog] [info] There were 173259 set bits in the bit array; [2016-07-11 09:52:22.030] [stderrLog] [info] Computing transcript lengths; [2016-07-11 09:52:22.030] [stderrLog] [info] Waiting to finish loading hash; Index contained 173259 targets; [2016-07-11 09:52:26.970] [jointLog] [info] done; [2016-07-11 09:52:26.970] [stderrLog] [info] Done loading index. [2016-07-11 09:52:27.327] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2016-07-11 09:52:27.327] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2016-07-11 09:52:39.858] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. **[2016-07-11 09:52:39.858] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report.**. [2016-07-11 09:52:39.858] [jointLog] [info] Mapping rate = 0%. [2016-07-11 09:52:39.858] [jointLog] [info] finished quantifyLibrary(); [2016-07-11 09:52:39.858] [jointLog] [info] Starting optimizer; [2016-07-11 09:52:39.894] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-07-11 09:52:39.895] [jointLog] [info] iteration = 0 | max rel diff. = -1.79769e+3",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/65:1567,load,loading,1567,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/65,1,['load'],['loading']
Performance,"R_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #15 upsert<std::__cxx11::basic_string<char>&, densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:554; #16 densityCalculator<alevin::protocols::Chromium> (parser=<optimized out>, aopt=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; (gdb); #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:12397,optimiz,optimized,12397,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,"ResizeThreads to 1; [2023-11-30 09:36:58.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:36:58.680] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:36:58.680] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:36:58.680] [jointLog] [info] parsing read library format; [2023-11-30 09:36:58.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference ac",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:6617,Load,Loading,6617,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"ResizeThreads to 1; [2023-11-30 09:40:21.543] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:40:21.543] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:40:21.543] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:40:21.543] [jointLog] [info] parsing read library format; [2023-11-30 09:40:21.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference ac",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:3492,Load,Loading,3492,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"ResizeThreads to 6; [2021-09-20 16:20:48.240] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:20:48.240] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:20:48.240] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:20:48.240] [jointLog] [info] parsing read library format; [2021-09-20 16:20:48.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference acc",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:4819,Load,Loading,4819,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ResizeThreads to 6; [2021-09-20 16:29:51.663] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:29:51.663] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:29:51.663] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:29:51.663] [jointLog] [info] parsing read library format; [2021-09-20 16:29:51.663] [jointLog] [info] There is 1 library.; [2021-09-20 16:29:51.736] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:29:51.738] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference ac",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:1855,Load,Loading,1855,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ResizeThreads to 6; [2023-02-23 09:39:48.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-23 09:39:48.709] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:9626,Load,Loading,9626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"Right, in short `salmon index -t txome_fasta -i txome_index` should work and both the versions of salmon (v0.15 and v1.0) is available on bioconda, check [here](https://bioconda.github.io/recipes/salmon/README.html), you may wanna try [force](https://docs.conda.io/projects/conda/en/latest/commands/update.html) update of conda. I think the confusion is you are thinking of the concept of Selective Alignment as the same as aligning to transcriptome w/ decoys (can be genome or mashmap based). Although they are related methods but the concept of Selective Alignment predates the idea of decoy based alignment, checkout [this](https://dl.acm.org/citation.cfm?id=3233589) paper from our lab where we discuss how Selectively Aligning difficult reads to just the transcriptome itself can result in improved quantification estimates compared to quasi or pseduo alignment. To summarize: ; In version 1.0; A) SA: The mashmap and bedtools based pipeline which follows old SalmonTools based pipeline.; B) SAF: Inbuilt salmon pipeline to consume genome and follows this pipeline.; C) If you don't provide any decoys, salmon will do Selective Alignment just on the transcriptome. The Release notes you quoted just means you cannot disable this feature i.e. you cannot fall back to quasi-mapping (in quasi mapping there is no alignment of the reads at all). In version 0.15.0; You cannot provide decoys and the transcriptome based mapping performed in this version would be quasi-mapping i.e. no Alignment of reads. Hope it helps .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195321:1428,perform,performed,1428,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195321,1,['perform'],['performed']
Performance,"Right, the issue seems to be that the right binary is not getting created. My (re)compilation using the same script you shared above seems to be giving different help.; ```; alevin-specific Options:; -v [ --version ] print version string; -h [ --help ] produce help message; -o [ --output ] arg Output quantification directory.; -p [ --threads ] arg (=1) The number of threads to use; concurrently.; --tgMap arg transcript to gene map tsv file; --dropseq Use DropSeq Single Cell protocol for; the library; --chromiumV3 Use 10x chromium v3 Single Cell; protocol for the library.; --chromium Use 10x chromium v2 Single Cell; protocol for the library.; --gemcode Use 10x gemcode v1 Single Cell protocol; for the library.; --celseq Use CEL-Seq Single Cell protocol for; the library.; --celseq2 Use CEL-Seq2 Single Cell protocol for; the library.; ```. May I suggest removing the `CMakeCache.txt` file from the build folder of salmon and running `make -j 4 install` again. After recompilation using the `salmon` binary inside the `bin` folder should ideally give you the above updated help. However, If it doesn't resolve after that, I am compiling a linux binary and will share it to you to be used directly.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443518366:385,concurren,concurrently,385,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443518366,1,['concurren'],['concurrently']
Performance,"Rob,. Brilliant - I forgot that I built the boost libraries from whatever version of gcc was on the standard distribution. I have included -DFETCH_BOOST=TRUE, do you know why I am receiving the following error regarding a missing when executing make?. [ 5%] Performing configure step for 'libboost'; Building Boost.Build engine with toolset gcc... tools/build/src/engine/bin.linuxx86_64/b2; Detecting Python version... 2.7; Detecting Python root... /usr; Unicode/ICU support for Boost.Regex?... not found.; Generating Boost.Build configuration in project-config.jam... Bootstrapping is done. To build, run:. ./b2. To adjust configuration, edit 'project-config.jam'.; Further information:. - Command line help:; ./b2 --help. - Getting started guide:; http://www.boost.org/more/getting_started/unix-variants.html. - Boost.Build documentation:; http://www.boost.org/build/doc/html/index.html. using gcc : : /opt/gcc-8.2.0/bin/g++ ); [ 6%] Performing build step for 'libboost'; opt.jam: No such file or directory; /opt/salmon/external/boost_1_66_0/tools/build/src/build/toolset.jam:43: in toolset.using; ERROR: rule ""opt.init"" unknown in module ""toolset"".; /opt/salmon/external/boost_1_66_0/tools/build/src/build-system.jam:461: in process-explicit-toolset-requests; /opt/salmon/external/boost_1_66_0/tools/build/src/build-system.jam:527: in load; /opt/salmon/external/boost_1_66_0/tools/build/src/kernel/modules.jam:295: in import; /opt/salmon/external/boost_1_66_0/tools/build/src/kernel/bootstrap.jam:139: in boost-build; /opt/salmon/external/boost_1_66_0/boost-build.jam:17: in module scope; make[2]: *** [libboost-prefix/src/libboost-stamp/libboost-build] Error 1; make[1]: *** [CMakeFiles/libboost.dir/all] Error 2; make: *** [all] Error 2. Thanks for all your help!. Nate",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436834099:258,Perform,Performing,258,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436834099,4,"['Perform', 'load']","['Performing', 'load']"
Performance,"Running Salmon-0.7.2_linux_x86_64 with --writeMappings=map.out and it crashes with:. Exception : [boost::filesystem::create_directory: No such file or directory]. When I run without a file name, it outputs to stdout, but it also outputs messages such as:; ESC[1m[2016-09-14 11:06:07.550] [jointLog] [info] parsing read library format; ESC[00mESC[1m[2016-09-14 11:06:07.550] [jointLog] [info] There is 1 library.; ESC[00mESC[1m[2016-09-14 11:06:08.300] [jointLog] [info] Loading Quasi index; ESC[00mESC[1m[2016-09-14 11:06:08.300] [jointLog] [info] Loading 32-bit quasi index; So the output is not a clean .sam file. ~/programs/Salmon-0.7.2_linux_x86_64/bin/salmon quant -i /data/reference/salmon/gencode.grch37.v19/ -r test.fastq --seqBias --gcBias --posBias -p 12 --writeMappings=map.out --geneMap /data/reference/salmon/gencode.grch37.v19/geneMap.txt --libType U -o x",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/90:470,Load,Loading,470,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/90,2,['Load'],['Loading']
Performance,"S936134_2.fastq; drwxrwxr-x 5 vale rst_pub 4.0K Jan 2 20:20 SRP057125_SRS936134_salmon_out; ```. But when I run the script there, it succeeds, without segfault. ```; [vale@ebi-003 salmon-problem]$ bash run_salmon.sh; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:17:29.867] [joi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:1904,Load,Loading,1904,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"Salmon has two modes; alignment-based and quasi-mapping based. When you are using the alignment-based mode (i.e. feeding it a BAM file of aligned reads), you don't need to provide it with the raw reads. This is because all of the relevant information is already contained within the BAM file. . On the other hand, in quasi-mapping mode, you index the set of reference transcripts (using `salmon index`) and then provide salmon with the location of the index and the raw reads (i.e. the FASTQ file). In this case, it performs quasi-mapping (a lightweight stand in for alignment), and so it is not necessary to provide the BAM file. Please refer to quasi-mapping based mode and alignment-based mode in [the documentation](http://salmon.readthedocs.io/en/latest/salmon.html#quasi-mapping-based-mode-including-lightweight-alignment) for more details.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270007599:516,perform,performs,516,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270007599,1,['perform'],['performs']
Performance,"Salmon is version 0.9.1. This is happening for lots of samples, the error message is always `Exception : [Failed to read 879238456 bytes from input stream! Read 851443704]` regardless of the fastq files that are provided. . Nothing else too special is going on. It doesn't seem to have this problem with other indexes. Can you try to load and map again with 0.9.1?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442569984:334,load,load,334,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442569984,1,['load'],['load']
Performance,Salmon takes hours to start optimizer,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/532:28,optimiz,optimizer,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/532,1,['optimiz'],['optimizer']
Performance,Salmon won't finish loading index,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/667:20,load,loading,20,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/667,1,['load'],['loading']
Performance,"SalmonQuantFiles/logs; [2023-01-29 16:06:31.513] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-01-29 16:06:31.513] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:single end, relative orientation:none, strandedness:unstranded }; [2023-01-29 16:06:31.580] [jointLog] [info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""apex_infe_t1_rep1_S29_R1_001Aligned.out.bam"", fasta = ""/rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas"" . . .done. processed 0 reads in current round[2023-01-29 16:06:34.583] [jointLog] [info] replaced 186,207 non-ACGT nucleotides with random nucleotides; processed 2000000 reads in current round[2023-01-29 16:06:35.068] [jointLog] [info] Automatically detected most likely library type as U. [2023-01-29 16:06:35.443] [jointLog] [info] . The alignment group queue pool has been exhausted. 1955 extra fragments were allocated on the heap to saturate the pool. No new fragments will be allocated. processed 26000000 reads in current roundSegmentation fault (core dumped); ```. Output for failure case - four files. ```; salmon quant -t /rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas -l A -a leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam leaf_mock_t6_rep1_S40_R1_001Aligned.out.bam leaf_mock_t5_rep3_S63_R1_001Aligned.out.bam leaf_mock_t5_rep1_S39_R1_001Aligned.out.bam -p 8 -o ../SalmonQuantFiles; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.9.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { /rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas }; # [ libType ] => { A }; # [ alignments ] => { leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam leaf_mock_t6_rep1_S40_R1_001Aligned.out.bam leaf_mock_t5_rep3_S63_R1_001Aligned.out.bam leaf_mock_t5_rep1_S39_R1_001",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/825:7741,queue,queue,7741,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/825,1,['queue'],['queue']
Performance,"Seeing lots of these - any ideas? v0.9.1. ```; ERROR [processor_job: 399381] [pipeline_applied: SALMON] [no_retry: False] [failure_reason: Shell call to salmon failed because: ### salmon (; ### [ program ] => salmon; ### [ command ] => quant; ### [ libType ] => { A }; ### [ biasSpeedSamp ] => { 5 }; ### [ index ] => { /home/user/data_store/TRANSCRIPTOME_INDEX/MUS_MUSCULUS/short }; ### [ mates1 ] => { /home/user/data_store/processor_job_399381/ERR1680104_1.fastq }; ### [ mates2 ] => { /home/user/data_store/processor_job_399381/ERR1680104_2.fastq }; ### [ threads ] => { 16 }; ### [ output ] => { /home/user/data_store/processor_job_399381/ERR1680104_output/ }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ dumpEq ] => { }; ### [ writeUnmappedNames ] => { }; Logs will be written to /home/user/data_store/processor_job_399381/ERR1680104_output/logs; [2018-11-28 17:08:09.121] [jointLog] [info] parsing read library format; [2018-11-28 17:08:09.121] [jointLog] [info] There is 1 library.; [2018-11-28 17:08:09.165] [stderrLog] [info] Loading Suffix Array; [2018-11-28 17:08:09.165] [jointLog] [info] Loading Quasi index; [2018-11-28 17:08:09.165] [jointLog] [info] Loading 32-bit quasi index; Exception : [Failed to read 879238456 bytes from input stream! Read 851443704]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.]: Processor job failed!; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321:1045,Load,Loading,1045,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321,3,['Load'],['Loading']
Performance,Significant performance regression in version 0.4.0,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6:12,perform,performance,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6,1,['perform'],['performance']
Performance,Silent failure while loading index,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37:21,load,loading,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37,1,['load'],['loading']
Performance,"So, I am still very surprised by the 45G number, but one big difference here is that the refgenomes indices are with the default value of k (`k=31`). As you can see, the dominant element of the index here is the `ctable.bin`, which stores where unitigs of the dBG start within each reference. As the k-met size gets smaller, unitigs get shorter, and they appear more places. Further, the increase here is not linear as `k` decreases. I‚Äôd suspect most of the size difference is due to that. There is also an optimization for the `ctable.bin` that we have been working on that wastes fewer bits, and will make this part of the index somewhat smaller in such cases. However, I am fairly certain that is not the dominant factor here. You could see what this is with the default `k`; I‚Äôd expect that to be closer to the refgenomes number (but perhaps a bit different due to version differences and the `‚ÄîkeepDuplicates` flag).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613226163:507,optimiz,optimization,507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613226163,1,['optimiz'],['optimization']
Performance,"Some progress. Found a src rpm for cereal, rebuilt that into an RPM and installed. Then this (ROOT_* env variables come from the respective module load commands):. ```; cmake \; -DCMAKE_INSTALL_PREFIX=$TOPDIR \; -DSTADEN_ROOT=$ROOT_IO_LIB \; -DGFF_ROOT=$ROOT_LIBGFF \; -DTBB_ROOT=$ROOT_LIBTBB \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_09.log; ```; found everything. The ""make"" went along pretty well until here:; ```; [100%] Linking CXX executable salmon; cd /usr/common/src/salmon-1.2.1/build/src && /usr/common/src/cmake-3.17.1/bin/cmake -E cmake_link_script CMakeFiles/salmon.dir/link.txt --verbose=1; /usr/lib64/ccache/c++ -O3 -DNDEBUG -flto -fno-fat-lto-objects CMakeFiles/salmon.dir/EMUtils.cpp.o CMakeFiles/salmon.dir/CollapsedEMOptimizer.cpp.o CMakeFiles/salmon.dir/CollapsedCellOptimizer.cpp.o CMakeFiles/salmon.dir/CollapsedGibbsSampler.cpp.o CMakeFiles/salmon.dir/Salmon.cpp.o CMakeFiles/salmon.dir/BuildSalmonIndex.cpp.o CMakeFiles/salmon.dir/Graph.cpp.o CMakeFiles/salmon.dir/DedupUMI.cpp.o CMakeFiles/salmon.dir/Alevin.cpp.o CMakeFiles/salmon.dir/AlevinHash.cpp.o CMakeFiles/salmon.dir/SalmonAlevin.cpp.o CMakeFiles/salmon.dir/WhiteList.cpp.o CMakeFiles/salmon.dir/SalmonQuantify.cpp.o CMakeFiles/salmon.dir/FragmentLengthDistribution.cpp.o CMakeFiles/salmon.dir/FragmentStartPositionDistribution.cpp.o CMakeFiles/salmon.dir/GZipWriter.cpp.o CMakeFiles/salmon.dir/SalmonQuantMerge.cpp.o CMakeFiles/salmon.dir/ProgramOptionsGenerator.cpp.o CMakeFiles/salmon.dir/FASTAParser.cpp.o CMakeFiles/salmon.dir/AlignmentModel.cpp.o CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o CMakeFiles/salmon.dir/BAMUtils.cpp.o -o salmon -L/usr/common/src/salmon-1.2.1/lib -L/usr/common/src/salmon-1.2.1/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" ../external/pufferfish/src/libpuffer.a libs",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641531162:147,load,load,147,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641531162,1,['load'],['load']
Performance,Some refactoring to clean some of the argument parsing and to allow future new features. * argument parsing; * allow early load of the index,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/665:123,load,load,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/665,1,['load'],['load']
Performance,"Sorry for the late response. According to the developer, the --meta flag is well-suited to metagenomics. Unlike handling RNA data, the use of this flag changes the initialization conditions of the EM algorithm and turns off Salmon's rich equivalence classes so as to better optimize Salmon for handling metagenomic (DNA) data. You can read more here- https://gitter.im/COMBINE-lab/salmon?at=589f11106b2d8dd5522e0ff1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/330#issuecomment-874634736:274,optimiz,optimize,274,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/330#issuecomment-874634736,1,['optimiz'],['optimize']
Performance,"Sorry if I wasn't clear. Also, maybe I am trying to bluntly transpose a; metric that comes from alignment-based quantification. Yes, sequencing; saturation relies on UMI, using the transcript reads associated to the UMIs. I am not sure to understand the difference between resolving ambiguity; or collision at the transcript level, with the evaluation of sequencing; saturation in mind. To be more precise, I am not sure to see how it; could be a problem in this computation. But I am probably missing an; important point?. The idea of quasi-mapping as I understand is identifying the transcripts; from which the reads could have originated, generating a quantification.; For the sequencing saturation, we don't really need to know where the; read align on the transcript sequence, we just want to know that the; read comes from one single transcript, a unique UMI. So if I am right,; it is possible to summarize this quantification at the level of UMIs,; and have an idea of the duplication level of the transcripts that have; been tagged with UMIs. From what I understand, this is where alevin; perform the deduplication computation to have a correct idea of the; transcript amount when UMI are added, prior amplifications resulting; from the RT/PCR steps. So I was imagining it could be possible to take the gene quantifications; from (de)duplicated UMIs, gene quantifications from unique UMIs, using; them to have an idea of the amount/ratio of redundant information in the; sequencing data, producing a metric very similar to the seq sat from the; 10x definition.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414331344:1097,perform,perform,1097,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414331344,2,['perform'],['perform']
Performance,"Sure --- since, at this point, I don't seem able to reproduce the issue any more. Just for a sanity check, can you md5sum the binary you have? I have `fc39599b6c027eb97bb2f4c7bdd361f3`. Previously, I was getting the same segfault as you, but now it finishes cleanly:. ```; [2016-01-02 13:13:10.643] [jointLog] [info] iteration = 4500 | max rel diff. = 0.0100814; [2016-01-02 13:13:10.703] [jointLog] [info] iteration = 4508 | max rel diff. = 0.00999839; [2016-01-02 13:13:10.714] [jointLog] [info] Finished optimizer; [2016-01-02 13:13:10.714] [jointLog] [info] writing output. [2016-01-02 13:13:10.871] [jointLog] [warning] NOTE: Read Lib [( /dev/fd/63, /dev/fd/62 )] :. Detected a strand bias > 1% in an unstranded protocol check the file: salmon_flux_quant_nofspd/libFormatCounts.txt for details. [2016-01-02 13:13:10.871] [jointLog] [warning] NOTE: Read Lib [( /dev/fd/63, /dev/fd/62 )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: salmon_flux_quant_nofspd/libFormatCounts.txt for details. rob@feynman:~/SoftwareStaging/salmon/build/tmp; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168413403:507,optimiz,optimizer,507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168413403,1,['optimiz'],['optimizer']
Performance,"TY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2522,Load,Loadable,2522,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"Thank you for providing this good softwareÔºÅ. It has a very good performance in the process of quantifying scRNA-seq data.Next, I'm thinking about whether it can be used to quantify the combination of genes and TEs.And I have tried this idea according to the following stepsÔºö. 1.Change the classification information in the third column of the annotated TEs gff file to ""gene"" or ""exon"", and number all TEs as genes.; 2.Merge genes and modified TEs files into a gff file.; 3.After the transcript sequences are extracted, the index is established using the salmon index and the salmon alevin is used for quantification. The program can run normally, including subsequent analysis in R. But I'm not sure if this is correct, so I would be very grateful if you have any suggestionsÔºÅ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/828:64,perform,performance,64,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/828,1,['perform'],['performance']
Performance,"Thank you for the swift answer!. We are working with [BD Rhapsody](https://www.bdbiosciences.com/en-us/instruments/research-instruments/single-cell-multiomics/single-cell-analysis-system), which uses a complex barcode structure (you can read about this in their [bioinformatics handbook](https://www.bd.com/documents/guides/user-guides/GMX_BD-Rhapsody-genomics-informatics_UG_EN.pdf) on page 14). The extracted, combined CB is 27bp long, which is why the default sanity check was too low for our purposes. In terms of cell numbers, BD Rhapsody appears to generate a lot of ""false-positive cells"", actually (we are seeing up to 90% of false positives). This is expected, and also mentioned in their bioinformatics handbook (pages 23-25), but appears to be an issue for the alevin cell detection: with standard settings this is approximately two orders of magnitude lower than expected, `--expectCells` improves matters drastically, however. We have opted for removing the false positives in post-processing ourselves - the low count depth population is very easily identifiable. In terms of performance, a complete alevin run on 150M reads (25k expected cells) takes around 1.5 hours using 10 threads, which is perfectly reasonable for us.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-551083490:1090,perform,performance,1090,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-551083490,2,['perform'],['performance']
Performance,"Thanks ! ; When you release the apple silocon version. Is it possible to upload to brew ? Do you want to take in account the gpu with metal or the neural engine ? . > Le 30 juin 2022 √† 05:58, Rob Patro ***@***.***> a √©crit :; > ; > Ôªø; > Hi @BenjaminDEMAILLE,; > ; > I think brew is a bit behind bioconda on this front, and, indeed, the M1 being a completely new architecture complicates things. I have an M1 Max and so there are plans to get a native compile going soon.; > ; > For the time being, the recommended way to get salmon on an M1 (or M2) Mac is as suggested here. Basically, you create an x86 conda environment (running under rosetta2) and install the latest version of salmon there. Rosetta2 is pretty amazing, and everything seems to run without a hitch, with nary a performance hit for the x86 -> ARM translation.; > ; > Best,; > Rob; > ; > ‚Äî; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/787#issuecomment-1170808558:780,perform,performance,780,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/787#issuecomment-1170808558,1,['perform'],['performance']
Performance,"Thanks @k3yavi , --keepCBfraction isn't in the docs, so I missed it. Unless it leads to completely unfeasible run times, --keepCBfraction 1 combined with downstream filtering may be the most robust way to handle things in my high throughput situation (as alluded to by @roryk ). Is there a way of combining this with a minimum UMI count per CB to remove just the most obvious junk and hopefully somewhat limit the impact on runtimes?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490843243:230,throughput,throughput,230,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490843243,1,['throughput'],['throughput']
Performance,"Thanks @reganhayward. I'm pinging @hiraksarkar here as well as he can help us dig into this. I do think it will be really useful to have the bootstrap (in this case Gibbs) folders for the runs, so we can load that data up and see what the posterior traces look like for these transcripts. If you can throw that up somewhere, then we can grab it as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-756948080:204,load,load,204,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-756948080,1,['load'],['load']
Performance,"Thanks @rob-p,. Your explanations are helpful, and I think it may my concern may just be more associated with your general thought as I've tested this with multiple parameters. The one I represented here was just an example, but I also can see how the parameters can be affecting these results. It was just strange to see such a huge shift with the addition/removal of one gene, which makes me think it more associated with how the inference of the variables are conditioned. . As for providing the meta_info.json files, I currently have thousands of them as I am running triplicates of ~150 parameter combinations for multiple tissue types and stages. In the end I don't think it will be necessary as we will likely be changing our approach a bit, which should be fine with the system I have in place. . Also, as for `--scoreExp` our main goal is to try and use Salmon to get quantification of individual genes (primary versus spliced forms). From my analysis, it appears that some genes perform better with scores > 0, however, some genes do perform better with a `--scoreExp` of 0. Although, this could be a factor in running Salmon with such a narrow view (i.e. two transcripts and some housekeeping genes) and might not be the case as more genes are added to the run.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633062608:989,perform,perform,989,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633062608,2,['perform'],['perform']
Performance,"Thanks @roryk and @k3yavi . The issue we have is that we're trying to run a pipeline in a fairly high-throughput manner to get a sensible 'enough' matrix without too much manual intervention. So I'm trying to avoid anything that requires an eyeballing step, accepting that the matrix we get will be less optimal than one you'd get from manual optimisation. Where possible, our curators are extracting the expected cell numbers from publications, so sometimes I have at least a general idea of where to look for an elbow/ feature. @roryk - have you used your alternate view on the data to automatically derive cutoffs? Does it work well?. @k3yavi:. As I say, first point is that this is for cases where I have a rough idea of the target cell number- we're generally working with pre-published data (though cell numbers per run are not always available). . From https://github.com/COMBINE-lab/salmon/issues/340 I'd inferred that --expectCells gives Alevin ballpark to look for a knee within, while --forceCells is a strict cuttoff. Is that correct? . That being the case, my thought was to try --expectCells first, and failing that --forceCells. The problem is that I need to parse the STDOUT/ERR to detect the boundary error from --expectCells, which is not a very robust way of doing things. If you returned informative error codes (anything but 1) on this and other errors, I could detect the error and implement the logic I describe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490157428:102,throughput,throughput,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490157428,1,['throughput'],['throughput']
Performance,"Thanks Dr Patro,; Updating now, In my simulations weighted assignments perform quite better than 'best mappings' for ASE, so will stick with that. ; Best.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/347#issuecomment-469752257:71,perform,perform,71,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/347#issuecomment-469752257,1,['perform'],['perform']
Performance,"Thanks for nice tool!. I performed alevin with 10X Chromium (v3) data and it seems to be nice result. By the way, I followed the Alevin-Tutorial and Ipython Notebook as below,; but generating txp2gene.tsv took some time.; https://combine-lab.github.io/alevin-tutorial/2018/running-alevin/; https://gist.github.com/k3yavi/c501705ed2d29b12b0d10cf78b3ed001. Especially, bioawk is not installed in any machine by default, and also just copy & past of the bioawk code could not run in my machine. For the above reason, I would like to suggest an alternative code to process this task. For example, I modified the code by using only grep, awk, sed, and uniq as below.; Is this also okay?. ```; wget -P data ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.primary_assembly.annotation.gtf.gz; gunzip -c data/gencode.v32.primary_assembly.annotation.gtf.gz | grep transcript | awk '{print $12,$10}' | sed -e 's|""||g' -e 's|;||g' | uniq > data/txp2gene.tsv; ```. Otherwise, I appreciate it if you could support this task by implementing the subcommand of salmon as bellow. ```; salmon t2g [GTFfile]; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/467:25,perform,performed,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/467,1,['perform'],['performed']
Performance,"Thanks for reporting back (with the nice plots!). This is interesting, because, at least in our other testing, the VB seems to be performing slightly _better_ than the EM. One guess I have is that the VB Opt tends to produce slightly sparser solutions than the EM opt. Usually, this is a ""good thing"". However, if you're dealing with such small datasets (n ~50), then dropping a few points could make a significant difference. Since you can reproduce the previous behavior when dropping the VB option, there's no rush. However, if you are able to share some of the data at some point, I'd be interested in digging in and figuring out exactly what's happening here. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111604379:130,perform,performing,130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111604379,1,['perform'],['performing']
Performance,"Thanks for reporting this. Certainly, failure should be more apparent. Out of curiosity, is the failure in building the index? It looks like loading the index didn't work, so was the space character that caused the problem in your reference file?. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-146996488:141,load,loading,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-146996488,1,['load'],['loading']
Performance,"Thanks for the details @cljacobs. We'll see if we can get a Docker image up to reproduce this under RH7. Our development machine is ubuntu based, and our CI is CentOS. It also builds on the environment used by bioconda. So it looks like we'll need a RH image to reproduce this. Out of curiosity, does anything happen differently if you pass `-DNO_IPO=TRUE` during the `cmake` configure step? That disables interprocedural optimization (whole program link-time optimization).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558716670:422,optimiz,optimization,422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558716670,2,['optimiz'],['optimization']
Performance,"Thanks for the quick answer!; Here is the log file:. [2020-04-22 12:53:21.437] [jointLog] [info] setting maxHashResizeThreads to 8; [2020-04-22 12:53:21.437] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-04-22 12:53:21.437] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-04-22 12:53:21.437] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-04-22 12:53:21.437] [jointLog] [info] parsing read library format; [2020-04-22 12:53:21.437] [jointLog] [info] There is 1 library.; [2020-04-22 12:53:21.501] [jointLog] [info] Loading pufferfish index; [2020-04-22 12:53:21.503] [jointLog] [info] Loading dense pufferfish index.; [2020-04-22 12:54:13.540] [jointLog] [info] done; [2020-04-22 12:54:13.713] [jointLog] [info] Index contained 228,799 targets; [2020-04-22 12:54:29.422] [jointLog] [info] Number of decoys : 84; [2020-04-22 12:54:29.466] [jointLog] [info] First decoy index : 228,673 ; [2020-04-22 13:00:24.946] [jointLog] [info] Automatically detected most likely library type as ISR; [2020-04-23 00:06:31.287] [jointLog] [info] Thread saw mini-batch with a maximum of 1.06% zero probability fragments; [2020-04-23 00:06:41.198] [jointLog] [info] Thread saw mini-batch with a maximum of 1.08% zero probability fragments; [2020-04-23 00:06:50.741] [jointLog] [info] Thread saw mini-batch with a maximum of 1.02% zero probability fragments; [2020-04-23 00:06:56.260] [jointLog] [info] Thread saw mini-batch with a maximum of 1.08% zero probability fragments; [2020-04-23 00:06:56.781] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2020-04-23 00:07:03.636] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2020-04-23 00:07:03.759] [jointLog] [info] Thread saw mini-batch ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/516#issuecomment-621872756:756,Load,Loading,756,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/516#issuecomment-621872756,2,['Load'],['Loading']
Performance,"Thanks for the quick response. I see the confusion. **In general, it is not possible to determine which reads are assigned to which transcripts given just the information in the SAM file written by `--writeMappings`**. This is because allocation of reads to transcripts is performed using a probabilistic model that takes into account many factors, so it's not as if salmon is just applying some filter to the mappings and then summing up some alignments. One way you could potentially get more insight is to use the [`postmaster`](https://github.com/COMBINE-lab/postmaster) tool. It takes as input the SAM file generated by the `--writeMappings` flag of `salmon`, and produces another SAM file annotating each alignment record with a `ZW` field, which records the posterior probability that this read is assigned to the corresponding transcript. This will give the right abundances in expectation (if you sum up the `ZW` field for each alignment, you should get something similar to the `quant.sf` results), but it is not guaranteed to be exactly the same assignment that salmon makes for each alignment itself.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245730911:273,perform,performed,273,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245730911,1,['perform'],['performed']
Performance,"Thanks for the response. . The transcriptional variants I've been interested often are quite similar (e.g. only differ for a small part of one exon). Therefore, many of the reads (especially when they map to parts of the genes that don't differ) show up as pseudoaligned to multiple variants, as you'd expect. In that case, do you suggest only looking at the uniquely mapped reads, or only looking at primary alignments for each read, or still looking at all reads (perhaps with a certain `AS` score) for a given transcript? I'm mostly interested in performing sanity checks that transcriptional variants identified by Salmon/Swish are differentially used across conditions. Or would it be better to use a tool like DEXSeq to asks these questions directly? . Also, when filtering by the `AS`, I found some reads with `AS:i:-2147483648`, which I assume is an overflow error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639153957:550,perform,performing,550,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639153957,1,['perform'],['performing']
Performance,"Thanks for the thorough suggestions. Actually, we fall into the easier case since Salmon does not support mixing single and paired-end reads in a single BAM file. When performing quantification on a single sample, the reads for that sample must follow a uniform library type. For paired-end reads, the BAM file can contain paired-end and single-end alignments (i.e. orphans), but the reads must all have been paired _in sequencing_. Mixing different library types in the BAM file makes it difficult to assess the compatibility of a fragment with the expected library type, especially if fragments from the different library types are expected to exist in a specific ratio in the input. Anyway, my main motivation for having the separate `AS` and `AP` types was to prevent the need to ""peek"" in the file, since, currently, there is not an easy way to peek the first read without opening the first file twice. However, I've decided that the benefit of having the same uniform (and simpler) interface of `A` always representing automatic library type detection is probably worth it, so I've pushed this implementation (commit 6116b2a). So, when the user provides the `A` library type, Salmon will peek into the first record in the BAM file to determine if the fragment was paired in sequencing or not, and will then set the single / paired-end status on that basis. The only corollary to this is that, in alignment-based mode, the `A` flag is not compatible with an input stream (i.e. the input must be a regular file). I will be sure to document this when I update the docs for the version bump.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-242399463:168,perform,performing,168,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-242399463,2,['perform'],['performing']
Performance,"Thanks, @k3yavi! ; I'll be sure to share my experience and any comparisons I perform.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418863611:77,perform,perform,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418863611,1,['perform'],['perform']
Performance,"That is . . . strange! Salmon _literally_ uses the RapMap index (and the RapMap functions) directly to obtain the quasi-mappings. One thing I noticed is that you seem to be using `pseudoindex` which is our independent re-implementation of pseudo-alignment. However, Salmon (and Sailfish) use quasi-mapping (RapMap's `quasiindex` and `quasimap` commands, as [we found this to be more accurate](http://biorxiv.org/content/biorxiv/early/2016/01/16/029652.full.pdf)). I presume that if you used the quasi-mapping functionality, you might observe the bug. If you don't (i.e. if RapMap performs quasi-mapping properly), then this is a real thinker (and I'd be happy to take a look myself if you can share the file). P.S. The same caveat I mentioned above may apply. That is, it is possible that a polyA transcript that is completely removed from the input could cause a problem unless we check for it in the quasi-index, but may not affect the pseudo-index. This is because the quasi-index relies on a packed representation of the transcriptome and an associated sparse bit-vector to perform the mapping, and it assumes that all of the transcripts will have a non-zero length (if this is the culprit, it is, of course, easy to fix with an explicit check). You could also test this hypothesis by generating the quasi-index with the `--noClip` option, which will disable poly-A clipping when building the index.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-175088841:580,perform,performs,580,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-175088841,2,['perform'],"['perform', 'performs']"
Performance,"That's very strange in that it doesn't even seem to be trying to load the index! I obviously don't have the same set of reads you do, but here is what I get when using this pre-compiled binary on the 64-bit index (this is a small read set from single-cell data, which is why the total # of reads is so small). ```; rob@feynman:/mnt/scratch3/rob/JoshTest$ ~/SoftwareStaging/salmon/scripts/SalmonBeta-0.6.5-pre_CentOS5/bin/salmon quant -p 15 -i salmon_index -l IU -1 ../strange_peak/19232_1_1.fastq -2 ../strange_peak/19232_1_2.fastq -o quant_binary; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 15 }; # [ index ] => { salmon_index }; # [ libType ] => { IU }; # [ mates1 ] => { ../strange_peak/19232_1_1.fastq }; # [ mates2 ] => { ../strange_peak/19232_1_2.fastq }; # [ output ] => { quant_binary }; Logs will be written to quant_binary/logs; there is 1[2016-03-31 14:05:14.184] [jointLog] [info] parsing read library format; lib; Loading 64-bit quasi index[2016-03-31 14:05:14.266] [stderrLog] [info] Loading Suffix Array; [2016-03-31 14:05:14.266] [jointLog] [info] Loading Quasi index. [2016-03-31 14:07:58.647] [stderrLog] [info] Loading Transcript Info; [2016-03-31 14:08:59.703] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-31 14:09:06.744] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in th",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:65,load,load,65,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['load'],['load']
Performance,The cache and find_package system have both given me more headaches than they have saved I think.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/254#issuecomment-407465438:4,cache,cache,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/254#issuecomment-407465438,1,['cache'],['cache']
Performance,"The reason I bring this up is this line:. ```; [2020-05-04 21:30:58.701] [jointLog] [info] Loading Quasi index; ```. suggests salmon is trying to load the wrong type of index (the `quasi` index), since the new versions only support pufferfish-based indexes (and the 16G index to which you refer is a pufferfish-based index).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623679572:91,Load,Loading,91,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623679572,2,"['Load', 'load']","['Loading', 'load']"
Performance,The single-cell mode of salmon performs CB correction and knee based thresholding before mapping and quantification. That's why some of the reads from CB with very low frequency would never map.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/702#issuecomment-916883967:31,perform,performs,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/702#issuecomment-916883967,1,['perform'],['performs']
Performance,"The use case is to allow using [SoupX](https://github.com/constantAmateur/SoupX) which removes ambient reads from cell lysis (the soup). Here is what SoupX does with cellranger output:. 1) loads the .mtx file in the `raw_gene_bc_matrices` directory output by cellranger as argument `tod` to `SoupX::SoupChannel`. . 2) Subsets this matrix to those in `barcodes.tsv` inside the `filtered_gene_bc_matrices` directory as the argument to `toc`. It looks like to use SoupX with alevin would require quantification for all barcodes, not just those that pass the initial alevin whitelist. I guess I would need alevin to perform the initial whitelisting (to get the `toc` argument to `SoupX::SoupChannel`), but then ignore it and quantify all barcodes so that the `tod` matrix can be provided. The approach I am currently using:. 1) Run `alevin --keepCBFraction 1 --maxNumBarcodes 4294967295` to get quants for all barcodes. 2) rerun alevin normally to get whitelisted cells (both from initial and final whitelisting). It would be nice not to have to run alevin twice in order to achieve this result. Perhaps an option so that alevin could proceed to quantify all barcodes but still output a whitelist. Thank you",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/377:189,load,loads,189,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/377,2,"['load', 'perform']","['loads', 'perform']"
Performance,"There should be easy ways to handle reading line-buffered input from two file descriptors, where both file descriptors could be identical, and then passing these streams internally to buffers to be chunked for multithreaded processing. This would give you one code path for ingesting data, and the command line interface could remain the same as it is currently, with the possible addition of mapping the `-` symbol to `/dev/fd/0`. Is there really much to be gained from buffering all input in byte chunks up front? Remembering that unix pipes are buffered somewhat by default anyway? There has to be an acceptable way to handle line-based input in a more flexible way. In Python I would do:. ``` python; import argparse. example_parser = argparse.ArgumentParser(); example_parser.add_argument('-fq1', type=argparse.FileType('r')); example_parser.add_argument('-fq2', type=argparse.FileType('r')); args = parser.parse_args(). for line1, line2 in zip(args.fq1, args.fq2):; do_stuff_with_lines(); ```. You could then call the program flexibly:. ``` bash; $ example -fq1 file1.fq -fq2 file2.fq; $ example -fq1 <(gzip -dc file1.fq.gz) -fq2 <(gzip -dc file2.fq.gz); $ other_interleaved_process | example -fq1 - -fq2 -; ```. The caveat for the code above is that you would want to replace `argparse.FileType` with some class that reads 4 lines at a time - I'm sure there's no shortage of Python FASTQ readers that do that. And I know that you're looking for C++ libraries that perform well for your purposes, and my Python example is just a toy, but I think designing the option parser to at least **accept** streams and file-like objects and handle them using the same code path would be a worthy reason to refactor a bit.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168545456:1471,perform,perform,1471,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168545456,1,['perform'],['perform']
Performance,"This fix resolves performance issue where Boost::math unnecessarily promotes doubles to long double, which is not fully supported by hardware leading to slow-downs. The change is to set a define during cmake process which prevents promotion ( -DBOOST_MATH_PROMOTE_DOUBLE_POLICY=false )",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/967:18,perform,performance,18,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/967,1,['perform'],['performance']
Performance,"This is a _good idea_. There's a little bit of trickiness, in that the multi-threaded read parser need not provide reads in the same order as in the input file. However, I think we could have a heuristic that checks for ordering according to the reference _within_ each parallel-processed bucket. It probably also makes sense to provide a flag to override it if the user is **sure** that the reads are not ordered.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/13#issuecomment-142744935:71,multi-thread,multi-threaded,71,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/13#issuecomment-142744935,1,['multi-thread'],['multi-threaded']
Performance,"This is failing on our local drone CI during runtime. The log output is :. ```; + echo ""[Testing quant]""; [Testing quant]; + ./.drone/test_quant.sh; Holy build box activated; Prefix: /hbb_exe; CFLAGS: -g -O2 -fvisibility=hidden -I/hbb_exe/include ; LDFLAGS: -L/hbb_exe/lib -static-libstdc++; STATICLIB_CFLAGS: -g -O2 -fvisibility=hidden -I/hbb_exe/include ; SHLIB_CFLAGS: -g -O2 -fvisibility=hidden -I/hbb_exe/include ; SHLIB_LDFLAGS: -L/hbb_exe/lib -static-libstdc++; [Drone test] current path : /drone/src/github.com/COMBINE-lab/salmon; [Drone test] making quant test directory; [Drone test] run nextflow pipeline; N E X T F L O W ~ version 0.29.1; Launching `tests/test_quant.nf` [curious_gilbert] - revision: 4f25b30301; [warm up] executor > local; [91/922fac] Submitted process > buildIndex; ERROR ~ Error executing process > 'buildIndex'; Caused by:; Process `buildIndex` terminated with an error exit status (127); Command executed:; /drone/src/github.com/COMBINE-lab/salmon/bin/salmon index -t Homo_sapiens.GRCh37.75.cdna.pc.fa -i nfindex; Command exit status:; 127; Command output:; (empty); Command error:; /drone/src/github.com/COMBINE-lab/salmon/bin/salmon: error while loading shared libraries: libjemalloc.so.2: cannot open shared object file: No such file or directory; Work dir:; /drone/src/github.com/COMBINE-lab/salmon/work/91/922facec25da43edd4a2ce82f2289d; Tip: when you have fixed the problem you can continue the execution appending to the nextflow command line the option `-resume`; -- Check '.nextflow.log' file for detail; ```. So, it seems to be due to failure to find the dynamic shared library for jemalloc. Any idea why that might be?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472495264:1182,load,loading,1182,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472495264,2,['load'],['loading']
Performance,"This is the initial output log, where it reports an inccorrect gene annotation:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 13.512 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 382.03 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.4861 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.4236 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.031 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.983 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:189,Load,Loading,189,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,6,['Load'],['Loading']
Performance,"Threads to 16; [2022-01-26 12:55:04.037] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2022-01-26 12:55:04.037] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2022-01-26 12:55:04.037] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2022-01-26 12:55:04.037] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; [2022-01-26 12:55:04.037] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2022-01-26 12:55:04.037] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2022-01-26 13:09:14.959] [jointLog] [info] There is 1 library.; [2022-01-26 13:09:14.961] [jointLog] [info] Loading pufferfish index; [2022-01-26 13:09:14.962] [jointLog] [info] Loading dense pufferfish index.; [2022-01-26 13:09:19.753] [jointLog] [info] done; [2022-01-26 13:09:20.383] [jointLog] [info] Index contained 184,844 targets; [2022-01-26 13:09:20.563] [jointLog] [info] Number of decoys : 0; [2022-01-26 13:43:01.425] [jointLog] [info] Computed 288,594 rich equivalence classes for further processing; [2022-01-26 13:43:01.425] [jointLog] [info] Counted 280,466,412 total reads in the equivalence classes ; [2022-01-26 13:43:01.426] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2022-01-26 13:43:01.426] [jointLog] [warning] Found 14751 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2022-01-26 13:43:01.426] [jointLog] [info] Mapping rate = 58.3421%. [2022-01-26 13:43:01.426] [jointLog] [info] finished quantifyLibrary()",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/742:3875,Load,Loading,3875,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/742,2,['Load'],['Loading']
Performance,"Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] [info] Thread saw mini-batch with a maximum of 5.48% zero probability fragments. [2018-12-12 15:12:07.721] [jointLog] [info] Computed 173,365 rich equivalence classes for further processing; [2018-12-12 15:12:07.721] [jointLog] [info] Counted 27,831,508 total reads in the equivalence classes ; [2018-12-12 15:12:07.721] [jointLog] [warning] Found 31347 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-12 15:12:07.721] [jointLog] [info] Mapping rate = 37",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4854,load,loading,4854,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['load'],['loading']
Performance,"Ugh, salmon built, but it crashes. ```; module load salmon; cd /tmp; gunzip -c $ROOT_SALMON/sample_data.tgz | tar -xf -; cd sample_data; salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Segmentation fault (core dumped); ```; I wonder if this is related to the segfault seen when Pufferfish was built on the same platfrom from the git repository (today also.)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641545954:47,load,load,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641545954,1,['load'],['load']
Performance,"Uh, why then does ""make test"" fail if the root directory name is changed? That was using the binary/libraries in $WHEREVER, after bin and lib below the root directory were removed. Typically that sort of operation doesn't care what the top level is named. For some future release, perhaps the run time dynamic loading of libraries could look up the path to libtbb.so.2 and try that first, before falling back to LD_LIBRARY_PATH? On my system ldd of salmon shows a link to libtbb.so.2, no LD_LIBRARY_PATH needed. ldd does not show any links to libtbb.malloc*. The program will do at least ""salmon --help' that way without any errors or warnings. That isn't sufficient to pass ""make test"" though (even when the directory has not been renamed). It seems that libtbb.malloc* libraries are used during that test, and that use requires LD_LIBRARY_PATH. Only when they are found that way does ""make test"" work.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397063656:310,load,loading,310,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397063656,1,['load'],['loading']
Performance,"Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-09-11 16:34:30.116] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wrong. Please file this as a bug report. [2018-09-11 16:34:30.116] [jointLog] [info] Mapping rate = 0%. [2018-09-11 16:34:30.116] [jointLog] [info] finished quantifyLibrary(); [2018-09-11 16:34:30.156] [alevinLog] [info] Starting optimizer; ```. **Desktop (please complete the following information):**; - OS: CentO",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:11575,load,loading,11575,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['load'],['loading']
Performance,"UnmappedNames ] => { }; Logs will be written to SRR14506785.salmon.rmsk.out/logs; [2023-09-28 04:51:02.450] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-09-28 04:51:02.450] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-09-28 04:51:02.450] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading refe",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:3219,Load,Loading,3219,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"We seem to get the same mapping rate etc., so I'm assuming something different is happening between the end of the normal optimization and the Gibbs sampling between your run and my run.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935953:122,optimiz,optimization,122,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935953,1,['optimiz'],['optimization']
Performance,"Well, I figured out how to run Salmon under Docker, but how do I feed it data?. `[rancher@rancher ~]$ docker run combinelab/salmon salmon; Salmon v0.8.2. Usage: salmon -h|--help or; salmon -v|--version or; salmon -c|--cite or; salmon [--no-version-check] <COMMAND> [-h | options]. Commands:; cite Show salmon citation information; index Create a salmon index; quant Quantify a sample; swim Perform super-secret operation; [rancher@rancher ~]$ ls rna.fa.gz; rna.fa.gz; [rancher@rancher ~]$ docker run combinelab/salmon salmon index -t rna.fa.gz -i mus.rna.index; Version Info: This is the most recent version of Salmon.; The file [rna.fa.gz] provided for the transcriptome does not appear to exist.[rancher@rancher ~]$`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/164#issuecomment-338276821:390,Perform,Perform,390,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/164#issuecomment-338276821,1,['Perform'],['Perform']
Performance,"Well, one can certainly use a tool (like gffread or rsem-prepare-reference) to take a genome and a (possibly custom/augmented) GTF to extract a set of target transcripts. Above, it looks like you were only processing between 90 and 100k transcripts. Given the overall size of the overall reference ‚Äî ~2.4 billion nucleotides ‚Äî my guess would be that some of these transcripts may be exceedingly long (and perhaps extracted incorrectly from the underlying tool). I should note that an index can be built on large references (which is why we support 64-bit index construction), but it's a very rare use-case as most transcriptomes (even large _de novo_ transcriptomes) rarely cross the 2^31 barrier, and I would expect it to consume quite a bit of memory. The default `quasi` indexer of Salmon is optimized to be very fast for typical sized transcriptomes (usually a few hundred mega-bases) at the cost of using more memory. The alternative `fmd` index can be made more memory efficient, by setting a larger sampling factor, but the resulting mapping will be slower (though still much faster than standard alignment). I would first check to see if the transcripts.fa file contains what you were expecting (i.e. the normal transcriptome + the auxiliary transcripts you were interested in quantifying), and that you actually have close to 2.4Gb of non-redundant transcriptome sequence that you want to quantify. If this is the case, the options are to try and build the quasi-index on a large memory machine (building the index requires more memory than mapping with the constructed index), or using the fmd-index with a large sampling factor. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/39#issuecomment-176802594:795,optimiz,optimized,795,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/39#issuecomment-176802594,1,['optimiz'],['optimized']
Performance,"When I followed the tutorial here (https://combine-lab.github.io/alevin-tutorial/2020/alevin-features/ ) to perform HTO quantification by alevin (also add --dumpMtx option), a malformed MTX file was generated. <img width=""551"" alt=""image"" src=""https://user-images.githubusercontent.com/77259528/181101587-d06b7ab1-1d86-4eee-bf45-2a9432facf80.png"">. Has 999230 nonzero entries, but the second line indicates the number of nonzero entries is `0`, which should be `999230`? So when I read the matrix by `scipy.io.mmread`, all entries would be zero. . Thank you very much for your help in advance! If I misunderstood anything, please kindly let me know.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/791:108,perform,perform,108,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/791,1,['perform'],['perform']
Performance,"When doing paired mapping, we get a lot of single-mapped reads (probably indicative of a crappy transcriptome - we know, we know). Do these reads count towards quantification?. ```; salmon quant -i cDNA_transcripts.index --libType ISR -1 L101_resync_R1.fastq -2 L101_resync_R2.fastq -o L101.quant. [2015-11-03 14:08:26.861] [jointLog] [info] Mapping rate = 26.4703%. [2015-11-03 14:08:26.861] [jointLog] [info] finished quantifyLibrary(); [2015-11-03 14:08:26.861] [jointLog] [info] Starting optimizer; [2015-11-03 14:08:26.878] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2015-11-03 14:08:26.889] [jointLog] [info] iteration = 0 | max rel diff. = 499.998; [2015-11-03 14:08:27.264] [jointLog] [info] iteration = 100 | max rel diff. = 0.216535; [2015-11-03 14:08:27.647] [jointLog] [info] iteration = 200 | max rel diff. = 0.123972; [2015-11-03 14:08:28.032] [jointLog] [info] iteration = 300 | max rel diff. = 0.108899; [2015-11-03 14:08:28.403] [jointLog] [info] iteration = 400 | max rel diff. = 0.0560467; [2015-11-03 14:08:28.772] [jointLog] [info] iteration = 500 | max rel diff. = 0.0441335; [2015-11-03 14:08:29.147] [jointLog] [info] iteration = 600 | max rel diff. = 0.0387812; [2015-11-03 14:08:29.524] [jointLog] [info] iteration = 700 | max rel diff. = 0.0333914; [2015-11-03 14:08:29.901] [jointLog] [info] iteration = 800 | max rel diff. = 0.0282682; [2015-11-03 14:08:30.279] [jointLog] [info] iteration = 900 | max rel diff. = 0.0253705; [2015-11-03 14:08:30.659] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0229764; [2015-11-03 14:08:31.040] [jointLog] [info] iteration = 1100 | max rel diff. = 0.0223721; [2015-11-03 14:08:31.414] [jointLog] [info] iteration = 1200 | max rel diff. = 0.0202505; [2015-11-03 14:08:31.792] [jointLog] [info] iteration = 1300 | max rel diff. = 0.0186214; [2015-11-03 14:08:32.177] [jointLog] [info] iteration = 1400 | max rel diff. = 0.0181308; [2015-11-03 14:08:32.568] [jointLog] [info] iteration = 1500 | max r",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/31:492,optimiz,optimizer,492,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/31,1,['optimiz'],['optimizer']
Performance,"Why am I seeing much higher values for this gene with FeatureCounts?. I have now run FeatureCounts several times with different overlaps (minOverlap =25, minOverlap =50, minOverlap =75min Overlap =100) and indeed the counts have decreased (again the psbI example: 8685 , 6011, 4237, 1805 accordingly). Again, this is a good argument for the hypothesis put forward. >Why does running Salmon outside nf-core lead to much higher values?. Hopefully, after I run Decoy mode, this problem is solved. I also tried mapping mode with the --softclipOverhangs option. That increased the counts (psbI : 4696 counts); playing around with the --minScoreFraction flag in addition to the --softclipOverhangs flag also increased the numbers ( minScoreFraction= 0 ->psbI = 8496; minScoreFraction= 0.5 ->psbI = 5633; minScoreFraction= 0.7 ->psbI =3627 ). . So, in summary, your explanation seems to be completely correct. ; In the case that decoy mode resolves the difference between the pipeline and the run outside the pipeline, I would not give this to the nf-core people. But I will if there are still large discrepancies after the run. I'm still not sure what the best parameters are for my analysis, but the --softclipOverhangs flag seems to be the best option for me now.; So thanks again!. @drpatelh. Thank you very much for your quick reply as well. ; I was a bit inaccurate when I said I used the FeatureCounts from the pipeline. I actually wasn't able to use the resulting .txt files. Instead, I used the resulting bam file from the pipeline to perform a FeatureCounts analysis on R. I hope this information answers the question of how I can compare the two results?; My genome and gtf file are from [EnsemblPlants](https://plants.ensembl.org/Arabidopsis_thaliana/Info/Index), so they should be fine. In the MultiQC file, the vast majority of reads align to protein coding regions according to FeatureCounts, so I hope my primary files are fine. . Thanks again for your help and time!. All the best ; Florian",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1238043213:2491,perform,perform,2491,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1238043213,1,['perform'],['perform']
Performance,"XX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per frag: 1.25428[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 1873468, hits per frag: 1.25316[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2492702, hits per frag: 1.24947[A. [32mprocessed[31m 2500000 [32mfragments[0m; hits: 3114558, hits per frag: 1.24832[A. [32mprocessed[31m 3000000 [32mfragments[0m; hits: 3733674, hits per frag: 1.24664[A. [32mprocessed[31m 3500000 [32mfragments[0m; hits: 4356329, hits per frag: 1.24645[A. [32mprocessed[31m 4000000 [32mfragments[0m; hits: 4978863, hits per frag: 1.24627[A. [32mprocessed[31m 4500000 [32mfragm",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:4107,load,loaded,4107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['load'],['loaded']
Performance,"Yes; precisely. In the alignment-based case, Salmon will infer the library type from the alignments. In the case you mention above (someone performs stranded alignment using an unstranded library), Salmon would incorrectly infer a stranded type, though it would actually be a byproduct of passing incorrect options to the aligner. In the read-based mode, since we have control over both the mapping and quantification steps, we can avoid such an issue. However, it seems to me _ok_ to incorrectly infer a library type if we were passed incorrect alignments in the first place, right?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-241813836:140,perform,performs,140,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-241813836,1,['perform'],['performs']
Performance,"You mean like cloud services to perform the DE analysis? It‚Äôs always possible to round the non-integer counts to the nearest integer. However, reliable abundance estimation tools (e.g. RSEM) have been around long enough now that it‚Äôs worth pushing any cloud service you might be using to properly deal with these types of inputs. We do differential analysis quite commonly with DESeq2, and salmon -> tximport -> DESeq2 is a quite low-friction solution.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751195284:32,perform,perform,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751195284,1,['perform'],['perform']
Performance,"[ output ] => { /home/jaimealaniz/Documents/salmon.embryo/SRR7985407/ }; Logs will be written to /home/jaimealaniz/Documents/salmon.embryo/SRR7985407/logs; [2020-05-29 20:14:24.283] [jointLog] [info] setting maxHashResizeThreads to 4; [2020-05-29 20:14:24.283] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-29 20:14:24.283] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-29 20:14:24.283] [jointLog] [info] parsing read library format; [2020-05-29 20:14:24.283] [jointLog] [info] There is 1 library.; [2020-05-29 20:14:24.341] [jointLog] [info] Loading pufferfish index; [2020-05-29 20:14:24.342] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 41.693 ms; -----------------------------------------; size = 357712; -----------------------------------------; | Loading contig offsets | Time = 657 us; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 202.87 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 16.335 ms; -----------------------------------------; size = 64786639; Number of ones: 357711; Number of ones per inventory item: 512; Inventory entries filled: 699; -----------------------------------------; | Loading contig boundaries | Time = 154.69 ms; -----------------------------------------; size = 64786639; -----------------------------------------; | Loading sequence | Time = 6.3275 ms; -----------------------------------------; size = 54055309; -----------------------------------------; | Loading positions | Time = 68.544 ms; -----------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527:2877,Load,Loading,2877,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527,1,['Load'],['Loading']
Performance,"[2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.11753.0.PTF-default #1 SMP Wed Oct 19 14:11:00 UTC 2016 (56c73f1) x86_64 x86_64 x86_64 GNU/Linux`; `$ lsb_release -a; LSB Version:	core-2.0-noarch:core-3.2-noarch:core-4.0-noarch:core-2.0-x86_64:core-3.2-x86_64:core-4.0-x86_64:desktop-4.0-amd64:desktop-4.0-noarch:graphics-2.0-amd64:graphics-2.0-noarch:graphics-3.2-amd64:graphics-3.2-noarch:graphics-4.0-amd64:graphics-4.0-noarch; Distributor ID:	SUSE LINUX; Description:	SUSE Linux Enterprise Server 11 (x86_64); Release:	11; Codename:	n/a`. **Additional context**; I included a 10K subset of reads in the tarball, which leads to the same behavior by Alevin.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5728,Load,Loading,5728,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['Load'],['Loading']
Performance,"[2018-09-11 16:33:59.242] [alevinLog] [info] Gauss Corrected Boundary at 4345 ; [2018-09-11 16:33:59.242] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-09-11 16:33:59.242] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-09-11 16:33:59.358] [alevinLog] [info] Done True Barcode Sampling; [2018-09-11 16:33:59.891] [alevinLog] [info] Done populating Z matrix; [2018-09-11 16:33:59.972] [alevinLog] [info] Done indexing Barcodes; [2018-09-11 16:33:59.972] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The ef",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:11041,Load,Loading,11041,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['Load'],['Loading']
Performance,"[2019-06-04 16:33:41.634] [alevinLog] [info] Found all transcripts to gene mappings; [2019-06-04 16:33:41.650] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 31 Million barcodes. [2019-06-04 16:34:42.492] [alevinLog] [info] Done barcode density calculation.; [2019-06-04 16:34:42.492] [alevinLog] [info] # Barcodes Used: 31478936 / 31478936.; [2019-06-04 16:34:42.499] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-04 16:34:42.499] [alevinLog] [info] Done True Barcode Sampling; [2019-06-04 16:34:42.501] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 16:34:42.503] [alevinLog] [info] Done populating Z matrix; [2019-06-04 16:34:42.503] [alevinLog] [info] Done indexing Barcodes; [2019-06-04 16:34:42.503] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-04 16:34:42.503] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 16:34:43.373] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 16:34:43.208] [jointLog] [info] There is 1 library.; [2019-06-04 16:34:43.372] [jointLog] [info] Loading Quasi index; [2019-06-04 16:34:43.372] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 16:34:43.208] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 16:34:43.208] [alevinLog] [info] parsing read library format; [2019-06-04 16:34:44.226] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 16:34:44.464] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 16:34:44.501] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 16:34:44.526] [stderrLog] [info] Computing transcript lengths; [2019-06-04 16:34:44.526] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 16:34:53.359] [stderrLog] [info] Done loading index; [2019-06-04 16:34:53.359] [jointLog] [info] done; [2019-06-04 16:34:53.359] [jointLog] [info] Index contained 136,011 targets; [2019-06-04 16:34:53.523] [alevinL",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:5602,Load,Loading,5602,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['Load'],['Loading']
Performance,"[2021-09-20 22:30:13.043] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-09-20 22:30:13.044] [alevinLog] [info] parsing read library format; [2021-09-20 22:33:09.346] [alevinLog] [info] Starting optimizer. [2021-09-20 22:33:09.516] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-09-20 22:33:09.516] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-09-20 22:33:09.576] [alevinLog] [info] Total 46357.00 UMI after deduplicating.; [2021-09-20 22:33:09.576] [alevinLog] [info] Total 2930 BiDirected Edges.; [2021-09-20 22:33:09.576] [alevinLog] [info] Total 3804 UniDirected Edges.; [2021-09-20 22:33:09.576] [alevinLog] [warning] Skipped 21 barcodes due to No mapped read; [2021-09-20 22:33:09.579] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-09-20 22:33:09.590] [alevinLog] [warning] Num Low confidence barcodes too less 186 < 200.Can't performing whitelisting; Skipping; [2021-09-20 22:33:09.591] [alevinLog] [info] Finished optimizer. ```; Then I tried setting `--keepCBFraction 1`. This does decrease the total number of reads being thrown away. However, mapping percentage is still low as compared to what I was getting from CellRanger (27%). I thought that since Alevin takes into consideration the multi mapping reads, the mapping percentage will likely increase because when we ran STAR on this data we found a lot of multi mapping reads. ```bash; nohup ./salmon alevin -l ISR -1 S1_L003_R1_001.fastq.gz -2 S1_L003_R2_001.fastq.gz --chromiumV3 -i ~/salmon_selective/salmon_index/ -p 20 -o ~/salmon_selective/9NT_keepCBfraction --keepCBFraction 1 --tgMap ~/salmon_selective/txgene_p3d7.txt &. [2021-09-21 00:11:13.532] [alevinLog] [info] Total 1.97665% reads will be thrown away because of noisy Cellular barcodes.; [2021-09-21 00:11:17.977] [alevinLog] [info] Done populating Z matrix; [2021-09-21 00:11:17.984] [alevinLog] [info] Total 21839 CB got seque",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/706:4708,perform,performing,4708,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/706,1,['perform'],['performing']
Performance,"[](Eigen::DenseCoeffsBase<Derived, 1>::Index) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::DenseCoeffsBase<Derived, 1>::Scalar = double; Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.; /home/ngs/scripts/sc-rna/sc-s-salmon-quant.sh: line 40: 10170 Aborted (core dumped) . when I run. ```bash; salmon quant \; -i ""$path_dr_salmonindex_transcriptome_ercc"" \; -o ""$newfilename-salmon-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mapping",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1205,Load,Loading,1205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['Load'],['Loading']
Performance,"[alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-04 12:26:11.113] [alevinLog] [info] parsing read library format; > [2020-06-04 12:27:21.373] [alevinLog] [info] Starting optimizer; > ; > [2020-06-04 12:27:22.086] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:27:22.086] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 23937.00 UMI after deduplicating.; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 91 BiDirected Edges.; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 82 UniDirected Edges.; > [2020-06-04 12:27:22.409] [alevinLog] [warning] Skipped 82268 barcodes due to No mapped read; > [2020-06-04 12:27:22.412] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-04 12:27:22.418] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 100.Can't performing whitelisting; Skipping; > [2020-06-04 12:27:22.418] [alevinLog] [info] Finished optimizer. Run 2: `salmon alevin -l ISR --citeseq --barcodeLength 16 --umiLength 10 --end 5 --featureStart 19 --featureLength 21 --maxNumBarcodes 200000 --freqThreshold 1 --lowRegionMinNumBarcodes 100`. > [2020-06-04 12:40:45.455] [alevinLog] [info] set CITE-seq minScoreFraction parameter to : 0.797619; > [2020-06-04 12:40:45.456] [alevinLog] [info] Found 64 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); > [2020-06-04 12:40:45.456] [alevinLog] [info] Filled with 64 txp to gene entries ; > [2020-06-04 12:40:45.456] [alevinLog] [info] Found all transcripts to gene mappings; > [2020-06-04 12:40:45.461] [alevinLog] [info] Processing barcodes files (if Present) ; > ; > [2020-06-04 12:42:01.202] [alevinLog] [info] Done barcode density calculation.; > [2020-06-04 12:42:01.202] [alevinLog] [info] # Barcodes Used: [32m52200250[0m / [31m52200250[0m.; > [2020-06-04 12:42:01.300] [alevinLog] [info] Forcing ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199:3944,perform,performing,3944,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199,2,['perform'],['performing']
Performance,"[info] Computed 0 rich equivalence classes for further processing; [2019-06-04 15:58:42.487] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2019-06-04 15:58:42.487] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2019-06-04 15:58:42.508] [jointLog] [info] Mapping rate = 0%. [2019-06-04 15:58:42.508] [jointLog] [info] finished quantifyLibrary(); [2019-06-04 15:58:42.519] [alevinLog] [info] Starting optimizer. [2019-06-04 15:58:43.232] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-06-04 15:58:43.232] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-06-04 15:58:43.237] [alevinLog] [info] Total 0.00 UMI after deduplicating.; [2019-06-04 15:58:43.237] [alevinLog] [info] Total 0 BiDirected Edges.; [2019-06-04 15:58:43.237] [alevinLog] [info] Total 0 UniDirected Edges.; [2019-06-04 15:58:43.259] [alevinLog] [info] Finished optimizer; Floating point exception (core dumped); ```. Alevin fails to read the barcode, or something like that, from the whitelist, and there are no reads to be processed. If instead of running the `--whitelist` command I run the `--expectCells 50` command, the results are these:. ```; [2019-06-04 16:33:41.634] [alevinLog] [info] Found all transcripts to gene mappings; [2019-06-04 16:33:41.650] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 31 Million barcodes. [2019-06-04 16:34:42.492] [alevinLog] [info] Done barcode density calculation.; [2019-06-04 16:34:42.492] [alevinLog] [info] # Barcodes Used: 31478936 / 31478936.; [2019-06-04 16:34:42.499] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-04 16:34:42.499] [alevinLog] [info] Done True Barcode Sampling; [2019-06-04 16:34:42.501] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 16:34:42.503] [alevinLog] [info] Done populating Z matrix; [201",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:4323,optimiz,optimizer,4323,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['optimiz'],['optimizer']
Performance,"[info] Done indexing Barcodes; [2019-06-06 19:24:55.692] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-06 19:24:55.692] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-06-06 19:23:29.520] [jointLog] [info] Using default ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:1837,load,loading,1837,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['load'],['loading']
Performance,"[info] Total 12346(has 999 low confidence) barcodes; [2018-11-29 22:28:16.397] [alevinLog] [info] Done True Barcode Sampling; [2018-11-29 22:28:17.414] [alevinLog] [info] Done populating Z matrix; [2018-11-29 22:28:17.434] [alevinLog] [info] Done indexing Barcodes; [2018-11-29 22:28:17.434] [alevinLog] [info] Total Unique barcodes found: 3773873; [2018-11-29 22:28:17.434] [alevinLog] [info] Used Barcodes except Whitelist: 49866; [2018-11-29 22:28:18.184] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-11-29 22:28:18.184] [alevinLog] [info] parsing read library format; [2018-11-29 22:28:18.184] [jointLog] [info] There is 1 library.; [2018-11-29 22:28:18.324] [jointLog] [info] Loading Quasi index; [2018-11-29 22:28:18.325] [jointLog] [info] Loading 32-bit quasi index; [2018-11-29 22:28:18.325] [stderrLog] [info] Loading Suffix Array; [2018-11-29 22:28:19.339] [stderrLog] [info] Loading Transcript Info; [2018-11-29 22:28:19.536] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-29 22:28:19.554] [stderrLog] [info] There were 64,431 set bits in the bit array; [2018-11-29 22:28:19.561] [stderrLog] [info] Computing transcript lengths; [2018-11-29 22:28:19.561] [stderrLog] [info] Waiting to finish loading hash; [2018-11-29 22:28:23.502] [stderrLog] [info] Done loading index; [2018-11-29 22:28:23.502] [jointLog] [info] done; [2018-11-29 22:28:23.502] [jointLog] [info] Index contained 64,431 targets. processed 178 Million fragments; hits: 212754413, hits per frag: 1.19535. [2018-11-29 22:40:56.510] [jointLog] [info] Computed 110,023 rich equivalence classes for further processing; [2018-11-29 22:40:56.510] [jointLog] [info] Counted 95,071,703 total reads in the equivalence classes; [2018-11-29 22:40:56.510] [jointLog] [info] Mapping rate = 53.3587%. [2018-11-29 22:40:56.510] [jointLog] [info] finished quantifyLibrary(); [2018-11-29 22:41:01.682] [alevinLog] [info] Starting optimizer. Analyzed 12346 cells (100% of all).; Skipped Barcodes are",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324:2400,Load,Loading,2400,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324,1,['Load'],['Loading']
Performance,"[info] Total 3385(has 1000 low confidence) barcodes; [2018-08-29 11:28:19.297] [alevinLog] [info] Done True Barcode Sampling; [2018-08-29 11:28:19.433] [alevinLog] [info] Done populating Z matrix; [2018-08-29 11:28:19.437] [alevinLog] [info] Done indexing Barcodes; [2018-08-29 11:28:19.437] [alevinLog] [info] Total Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33:18.039] [jointLog] [warning] Found 187 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-08-29 11:33:18.039] [jointLog] [info] Mapping rate = 43",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3570,Load,Loading,3570,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['Load'],['Loading']
Performance,"[info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-29 20:14:24.283] [jointLog] [info] parsing read library format; [2020-05-29 20:14:24.283] [jointLog] [info] There is 1 library.; [2020-05-29 20:14:24.341] [jointLog] [info] Loading pufferfish index; [2020-05-29 20:14:24.342] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 41.693 ms; -----------------------------------------; size = 357712; -----------------------------------------; | Loading contig offsets | Time = 657 us; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 202.87 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 16.335 ms; -----------------------------------------; size = 64786639; Number of ones: 357711; Number of ones per inventory item: 512; Inventory entries filled: 699; -----------------------------------------; | Loading contig boundaries | Time = 154.69 ms; -----------------------------------------; size = 64786639; -----------------------------------------; | Loading sequence | Time = 6.3275 ms; -----------------------------------------; size = 54055309; -----------------------------------------; | Loading positions | Time = 68.544 ms; -----------------------------------------; size = 74351806; -----------------------------------------; | Loading reference sequence | Time = 7.0924 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 325.83 us; -----------------------------------------; [2020-05-29 20:14:24.638] [jointLog] [info] done; [2020-05-29 20:14:24.638] [jointLog] [info] Index contained 57,190 targets; [2020-05-29 20:14:25.202] [jointLog] [info] Number of decoys : 0. processed 38,500,000 fragmentsntLog] [info] Automat",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527:3522,Load,Loading,3522,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527,1,['Load'],['Loading']
Performance,"[info] finished populating pos vector ; [2022-04-16 11:19:53.442] [puff::index::jointLog] [info] writing index components ; [2022-04-16 11:19:55.117] [puff::index::jointLog] [info] finished writing dense pufferfish index ; [2022-04-16 11:19:55.401] [jLog] [info] done building index. and the log for quantification:. > [2022-04-16 11:23:51.572] [jointLog] [info] setting maxHashResizeThreads to 48 ; [2022-04-16 11:23:51.572] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ; [2022-04-16 11:23:51.572] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ; [2022-04-16 11:23:51.572] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. [2022-04-16 11:23:51.572] [jointLog] [info] parsing read library format ; [2022-04-16 11:23:51.572] [jointLog] [info] There is 1 library. ; [2022-04-16 11:23:51.694] [jointLog] [info] Loading pufferfish index ; [2022-04-16 11:23:51.695] [jointLog] [info] Loading dense pufferfish index. ; [2022-04-16 11:23:53.681] [jointLog] [info] done ; [2022-04-16 11:23:53.681] [jointLog] [info] Index contained 245,261 targets ; [2022-04-16 11:23:53.776] [jointLog] [info] Number of decoys : 0 ; [2022-04-16 11:24:42.358] [jointLog] [info] Computed 960,194 rich equivalence classes for further processing [2022-04-16 11:24:42.358] [jointLog] [info] Counted 23,784,776 total reads in the equivalence classes [2022-04-16 11:24:42.426] [jointLog] [info] Number of mappings discarded because of alignment score : 3,206,484 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 170,372 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 154,1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317:15981,Load,Loading,15981,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317,1,['Load'],['Loading']
Performance,"[jointLog] [info] iteration = 700 | max rel diff. = 0.0130094; [2016-01-03 00:34:22.092] [jointLog] [info] iteration = 800 | max rel diff. = 0.0100546; [2016-01-03 00:34:22.196] [jointLog] [info] iteration = 882 | max rel diff. = 0.00861472; [2016-01-03 00:34:22.205] [jointLog] [info] Finished optimizer; [2016-01-03 00:34:22.205] [jointLog] [info] writing output. [2016-01-03 00:34:22.433] [jointLog] [warning] NOTE: Read Lib [( reads_1.fastq, reads_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: normal_salmon_out/libFormatCounts.txt for details; ```. Then I ran. ```; cat all_reads.fastq | salmon quant -i /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa -l IU -1 /dev/fd/0 -2 /dev/fd/0 -o interlaced_salmon_out; ```. Now I get. ```; [2016-01-03 00:36:48.844] [jointLog] [info] parsing read library format; [2016-01-03 00:36:49.995] [jointLog] [info] Loading Quasi index; [2016-01-03 00:37:08.293] [jointLog] [info] done; [2016-01-03 00:37:25.106] [jointLog] [info] Computed 23484 rich equivalence classes for further processing; [2016-01-03 00:37:25.106] [jointLog] [info] Counted 667333 total reads in the equivalence classes; [2016-01-03 00:37:25.106] [fileLog] [info]; At end of round 0; ==================; Observed 3060000 total fragments (3060000 in most recent round). [2016-01-03 00:37:31.905] [jointLog] [warning] Only 667333 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-01-03 00:37:31.905] [jointLog] [info] Mapping rate = 21.8083%. [2016-01-03 00:37:31.905] [jointLog] [info] finished quantifyLibrary(); [2016-01-03 00:37:31.905] [jointLog] [info] Starting optimizer; [2016-01-03 00:37:33.275] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-03 00:37:33.279] [jointLog] [info] iteration = 0 | max rel diff.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784:2998,Load,Loading,2998,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784,1,['Load'],['Loading']
Performance,"\; > -o /tmp/SRR2048254_salmon_out \; > --biasCorrect \; > --useFSPD; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna_38.p4.83_repbase20.11_ercc_SIRV.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /dev/fd/63 }; # [ mates2 ] => { /dev/fd/62 }; # [ output ] => { /tmp/SRR2048254_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to /tmp/SRR2048254_salmon_out/logs; [2016-06-21 10:04:29.524] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi indextcmalloc: large alloc 4294967296 bytes == 0x4d084000 @; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Suffix Array; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Position Hash; [2016-06-21 10:04:30.158] [jointLog] [info] Loading Quasi index; [2016-06-21 10:04:32.681] [stderrLog] [info] Loading Transcript Info; [2016-06-21 10:04:33.686] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-06-21 10:04:34.050] [stderrLog] [info] There were 115426 set bits in the bit array; [2016-06-21 10:04:34.376] [stderrLog] [info] Computing transcript lengths; [2016-06-21 10:04:34.377] [stderrLog] [info] Waiting to finish loading hash; Index contained 115426 targets; [2016-06-21 10:04:47.033] [jointLog] [info] done; [2016-06-21 10:04:47.033] [stderrLog] [info] Done loading index. processed 6500000 fragments; hits: 13927069, hits per frag: 2.15389. [2016-06-21 10:05:13.847] [jointLog] [info] Computed 165969 rich equivalence classes for further processing; [2016-06-21 10:05:13.847] [jointLog] [info] Counted 6514601 total reads in the equivalence classes; [2016-06-21 10:05:13.893] [jointLog] [info] Mapping rate = 95.0922%. [2016-06-21 10:05:13.893] [jointLog] [info] finished quantifyLibrary(); [2016-06-21 10:05:13.894] [jointLog] [info] Starting optimizer; Segmentation fault (core dumped); ```.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/64:1575,Load,Loading,1575,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/64,1,['Load'],['Loading']
Performance,"] => { }; ### [ rangeFactorizationBins ] => { 4 }; ### [ output ] => { SRR14506785.salmon.rmsk.out }; ### [ writeUnmappedNames ] => { }; Logs will be written to SRR14506785.salmon.rmsk.out/logs; [2023-09-28 04:51:02.450] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-09-28 04:51:02.450] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-09-28 04:51:02.450] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:3074,Load,Loading,3074,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"] Done indexing Barcodes; [2018-12-12 15:08:51.146] [alevinLog] [info] Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.666] [jointLog] [info] Thread saw mini-batch with a maximum of 5.34% zero probability fragments; [2018-12-12 15:12:07.677] [jointLog] [info] Thread saw mini-batch with a maximum of 5.48% zero probability fragments. [2018-12-12 15:12:07.721] [jointLog] [info] Computed 173,365 rich equivalence classes for further processing; [2018-12-12 15:12:07.721] [jointLog] [info] Counted 27,831,508 total reads in the equivalence classes ; [2018-12-12 15:12:07.721] [jointLog] [warning] Found 31347 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4790,load,loading,4790,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['load'],['loading']
Performance,] Processing barcodes files (if Present) . ; processed 87 Million barcodes. [2018-07-19 18:26:13.307] [alevinLog] [info] Done barcode density calculation.; [2018-07-19 18:26:13.307] [alevinLog] [info] # Barcodes Used: 86885223 / 87959276.; [2018-07-19 18:26:13.334] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 18:26:13.334] [alevinLog] [info] Total 54879 white-listed Barcodes; [2018-07-19 18:26:18.285] [alevinLog] [info] Done populating Z matrix; [2018-07-19 18:26:18.300] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.11753.0.PTF-default #1 SMP Wed Oct 19 14:11:00 UTC 2016 (56c73f1) x86_,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5148,Load,Loading,5148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['Load'],['Loading']
Performance,"] Total 3856(has 998 low confidence) barcodes; [2018-12-05 16:31:50.638] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 16:31:50.935] [alevinLog] [info] Done populating Z matrix; [2018-12-05 16:31:51.000] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 16:31:51.000] [alevinLog] [info] Total Unique barcodes found: 3825581; [2018-12-05 16:31:51.000] [alevinLog] [info] Used Barcodes except Whitelist: 138266; [2018-12-05 16:31:51.087] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 16:31:51.087] [alevinLog] [info] parsing read library format; [2018-12-05 16:31:51.087] [jointLog] [info] There are 2 libraries.; [2018-12-05 16:31:51.161] [jointLog] [info] Loading Quasi index; [2018-12-05 16:31:51.162] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 16:31:51.164] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 16:31:51.808] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 16:31:51.960] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 16:31:52.001] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 16:31:52.022] [stderrLog] [info] Computing transcript lengths; [2018-12-05 16:31:52.022] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 16:31:56.025] [stderrLog] [info] Done loading index; [2018-12-05 16:31:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the equivalence classes ; [2018-12-05 16:57:31.421] [jointLog] [warning] 0.000112378% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 24. [2018-12-05 16",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:12831,Load,Loading,12831,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,"] Total 5344(has 999 low confidence) barcodes; [2018-09-11 16:33:59.358] [alevinLog] [info] Done True Barcode Sampling; [2018-09-11 16:33:59.891] [alevinLog] [info] Done populating Z matrix; [2018-09-11 16:33:59.972] [alevinLog] [info] Done indexing Barcodes; [2018-09-11 16:33:59.972] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-09-11 16:34:30.116] [jointLog] [warning] Something seems to be wrong with the calculation of the mapping rate. The recorded ratio is likely wro",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:11253,Load,Loading,11253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['Load'],['Loading']
Performance,"] Total 5344(has 999 low confidence) barcodes; [2018-12-05 15:12:27.494] [alevinLog] [info] Done True Barcode Sampling; [2018-12-05 15:12:27.880] [alevinLog] [info] Done populating Z matrix; [2018-12-05 15:12:27.952] [alevinLog] [info] Done indexing Barcodes; [2018-12-05 15:12:27.952] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-05 15:12:27.952] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-05 15:12:29.321] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 15:12:29.216] [jointLog] [info] There are 2 libraries.; [2018-12-05 15:12:29.318] [jointLog] [info] Loading Quasi index; [2018-12-05 15:12:29.319] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 15:12:29.216] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 15:12:29.216] [alevinLog] [info] parsing read library format; [2018-12-05 15:12:29.949] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 15:12:30.141] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 15:12:30.181] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for further processing; [2018-12-05 15:45:46.198] [jointLog] [info] Counted 163,106,139 total reads in the equivalence classes ; [2018-12-05 15:45:46.199] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 15:45:46.199] [jointLog] [info] Mapping rate = 60.9633%. [2018-12-05 15:45:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:7319,Load,Loading,7319,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['Load'],['Loading']
Performance,"] Total 5344(has 999 low confidence) barcodes; [2018-12-06 11:16:55.059] [alevinLog] [info] Done True Barcode Sampling; [2018-12-06 11:16:55.395] [alevinLog] [info] Done populating Z matrix; [2018-12-06 11:16:55.453] [alevinLog] [info] Done indexing Barcodes; [2018-12-06 11:16:55.453] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-06 11:16:55.453] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06 11:45:12.188] [jointLog] [info] Counted 154,595,094 total reads in the equivalence classes ; [2018-12-06 11:45:12.188] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-06 11:45:12.188] [jointLog] [info] Mapping rate = 57.7821%. [2018-12-06 11:45:12.188] [jointLog] [info] fin",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6493,Load,Loading,6493,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['Load'],['Loading']
Performance,"] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.30% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.06% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.64% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 9.94% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:3146,load,loading,3146,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['load'],['loading']
Performance,"] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 14.838 s; -----------------------------------------; size = 3401221626; -----------------------------------------; | Loading reference sequence | Time = 1.1113 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 9.0843 ms; -----------------------------------------. [2020-08-13 09:36:14.700] [jointLog] [info] done; [2020-08-13 09:36:14.700] [jointLog] [info] Index contained 177,651 targets; [2020-08-13 09:36:14.782] [jointLog] [info] Number of decoys : 195; processed 500,000 fragmentsjointLog] [info",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:2302,Load,Loading,2302,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance,"] [alevinLog] [warning] Gauss Prediction 0 Too far from knee prediction skipping it; [2018-06-30 22:10:52.498] [alevinLog] [info] Learned InvCov: 457.073 normfactor: 260.286; [2018-06-30 22:10:52.498] [alevinLog] [info] Total 10434(has 987 low confidence) barcodes; [2018-06-30 22:10:52.530] [alevinLog] [info] Done True Barcode Sampling; [2018-06-30 22:10:53.101] [alevinLog] [info] Done populating Z matrix; [2018-06-30 22:10:53.103] [alevinLog] [info] Done indexing Barcodes; [2018-06-30 22:10:53.104] [alevinLog] [info] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.116] [jointL",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:2614,Load,Loading,2614,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['Load'],['Loading']
Performance,"] [info] Total 10434(has 987 low confidence) barcodes; [2018-06-30 22:10:52.530] [alevinLog] [info] Done True Barcode Sampling; [2018-06-30 22:10:53.101] [alevinLog] [info] Done populating Z matrix; [2018-06-30 22:10:53.103] [alevinLog] [info] Done indexing Barcodes; [2018-06-30 22:10:53.104] [alevinLog] [info] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.30% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.06% zero probability fragments; [2018-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:2824,Load,Loading,2824,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['Load'],['Loading']
Performance,"] [info] Total 293(has 193 low confidence) barcodes; [2019-01-29 09:56:53.224] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:56:53.254] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:56:53.255] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:56:53.255] [alevinLog] [info] Total Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence classes ; [2019-01-29 09:57:36.601] [jointLog] [warning] Only 242520 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappin",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8487,Load,Loading,8487,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance,"] [jointLog] [info] iteration = 400 | max rel diff. = 2.20112 ; [2022-04-16 11:25:15.019] [jointLog] [info] iteration = 500 | max rel diff. = 8.9451 ; [2022-04-16 11:25:20.936] [jointLog] [info] iteration = 600 | max rel diff. = 8.80249 ; [2022-04-16 11:25:26.808] [jointLog] [info] iteration = 700 | max rel diff. = 0.955605 ; [2022-04-16 11:25:32.739] [jointLog] [info] iteration = 800 | max rel diff. = 0.783506 ; [2022-04-16 11:25:38.614] [jointLog] [info] iteration = 900 | max rel diff. = 0.315252 ; [2022-04-16 11:25:44.475] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.345064 ; [2022-04-16 11:25:50.254] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.277546 ; [2022-04-16 11:25:56.156] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.350471 ; [2022-04-16 11:26:02.062] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.0385924 ; [2022-04-16 11:26:08.103] [jointLog] [info] iteration = 1,400 | max rel diff. = 10.4871 ; [2022-04-16 11:26:14.033] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.0571527 ; [2022-04-16 11:26:20.066] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.260293 ; [2022-04-16 11:26:26.129] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.0360025 ; [2022-04-16 11:26:32.099] [jointLog] [info] iteration = 1,800 | max rel diff. = 0.0550004 ; [2022-04-16 11:26:38.060] [jointLog] [info] iteration = 1,900 | max rel diff. = 1.52554 ; [2022-04-16 11:26:45.086] [jointLog] [info] iteration = 2,000 | max rel diff. = 0.0264604 ; [2022-04-16 11:26:54.108] [jointLog] [info] iteration = 2,100 | max rel diff. = 0.0825479 ; [2022-04-16 11:27:03.466] [jointLog] [info] iteration = 2,200 | max rel diff. = 0.0842979 ; [2022-04-16 11:27:12.895] [jointLog] [info] iteration = 2,300 | max rel diff. = 0.441117 ; [2022-04-16 11:27:21.476] [jointLog] [info] iteration = 2,389 | max rel diff. = 0.0091923 ; [2022-04-16 11:27:21.658] [jointLog] [info] Finished optimizer ; [2022-04-16 11:27:21.658] [jointLog] [info] writing output",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317:19756,optimiz,optimizer,19756,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317,1,['optimiz'],['optimizer']
Performance,"] iteration = 1000 | max rel diff. = 0.0146819; [2016-01-02 20:17:40.968] [jointLog] [info] iteration = 1100 | max rel diff. = 0.021278; [2016-01-02 20:17:41.343] [jointLog] [info] iteration = 1200 | max rel diff. = 0.0188351; [2016-01-02 20:17:41.695] [jointLog] [info] iteration = 1300 | max rel diff. = 0.0115257; [2016-01-02 20:17:42.020] [jointLog] [info] iteration = 1400 | max rel diff. = 0.019727; [2016-01-02 20:17:42.346] [jointLog] [info] iteration = 1500 | max rel diff. = 0.0290858; [2016-01-02 20:17:42.679] [jointLog] [info] iteration = 1600 | max rel diff. = 0.0100559; [2016-01-02 20:17:42.993] [jointLog] [info] iteration = 1700 | max rel diff. = 0.0101365; [2016-01-02 20:17:43.314] [jointLog] [info] iteration = 1800 | max rel diff. = 0.0100707; [2016-01-02 20:17:43.650] [jointLog] [info] iteration = 1900 | max rel diff. = 0.0100722; [2016-01-02 20:17:43.933] [jointLog] [info] iteration = 1990 | max rel diff. = 0.00542674; [2016-01-02 20:17:43.937] [jointLog] [info] Finished optimizer; [2016-01-02 20:17:43.937] [jointLog] [info] writing output. [2016-01-02 20:17:44.160] [jointLog] [warning] NOTE: Read Lib [( SRP057125_SRS936134_1.fastq, SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCoun ts.txt for details. [vale@ebi-003 salmon-problem]$; ```. The command run being:. ```; salmon quant \; -i mouse_cdna_38.p3.78_repbase_ercc.fa \; -l IU \; -1 SRP057125_SRS936134_1.fastq \; -2 SRP057125_SRS936134_2.fastq \; -o SRP057125_SRS936134_salmon_out \; -g /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt \; --biasCorrect \; --useFSPD; ```. But if I instead run salmon in the NFS directory where I want to run it, the core dumps... ```; [vale@ebi-003 mouse]$ salmon quant \; > -i /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:5240,optimiz,optimizer,5240,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['optimiz'],['optimizer']
Performance,"_2 }; Logs will be written to XX_2/logs; [2020-08-13 09:35:38.575] [jointLog] [info] setting maxHashResizeThreads to 12; [2020-08-13 09:35:38.576] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 14.838 s; -----------------------------------------; size = 3401221626; -----------------------------------------; | Loading refere",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:1793,Load,Loading,1793,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance,"_R1_001.fastq.gz }; ### [ mates2 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R2_001.fastq.gz }; ### [ threads ] => { 32 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942/logs; [2018-07-27 16:24:55.658] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-27 16:24:55.658] [jointLog] [info] parsing read library format; [2018-07-27 16:24:55.658] [jointLog] [info] There is 1 library.; [2018-07-27 16:25:01.242] [jointLog] [info] Loading Quasi index; [2018-07-27 16:25:01.242] [jointLog] [info] Loading 32-bit quasi index; [2018-07-27 16:25:01.243] [stderrLog] [info] Loading Suffix Array ; [2018-07-27 16:25:42.630] [stderrLog] [info] Loading Transcript Info ; [2018-07-27 16:25:45.683] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-27 16:25:47.834] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-27 16:25:48.128] [stderrLog] [info] Computing transcript lengths; [2018-07-27 16:25:48.200] [stderrLog] [info] Waiting to finish loading hash; [2018-07-27 16:25:48.331] [stderrLog] [info] Done loading index; [2018-07-27 16:25:48.331] [jointLog] [info] done; [2018-07-27 16:25:48.331] [jointLog] [info] Index contained 203027 targets. processed 239500000 fragmentsintLog] [info] Automatically detected most likely library type as ISR; hits: 651420499, hits per frag: 2.72282[2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.70% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898:1531,Load,Loading,1531,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898,1,['Load'],['Loading']
Performance,"_blank() # element_rect(fill = 'grey'); ) +; facet_wrap(paste('tx strand:', tx_strand) ~ paste('tx ID:', tx_id) + paste('myFasta seq type:', myFastaSeqType), ncol = 3, scales = 'free'). print(ggp). # dev.off(). ```. R session info:; ```; R version 4.0.2 (2020-06-22); Platform: x86_64-pc-linux-gnu (64-bit); Running under: CentOS Linux 7 (Core). Matrix products: default; BLAS/LAPACK: [hidden]/easybuild/software/2017/Core/imkl/2018.3.222/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so. locale:; [1] LC_CTYPE=en_CA.UTF-8 LC_NUMERIC=C LC_TIME=en_CA.UTF-8 LC_COLLATE=en_CA.UTF-8 ; [5] LC_MONETARY=en_CA.UTF-8 LC_MESSAGES=en_CA.UTF-8 LC_PAPER=en_CA.UTF-8 LC_NAME=C ; [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C . attached base packages:; [1] parallel stats4 stats graphics grDevices utils datasets methods base . other attached packages:; [1] ggplot2_3.3.3 reshape2_1.4.4 Biostrings_2.58.0 XVector_0.30.0 rtracklayer_1.50.0 ; [6] GenomicRanges_1.42.0 GenomeInfoDb_1.26.7 IRanges_2.24.1 S4Vectors_0.28.1 BiocGenerics_0.36.1 ; [11] magrittr_2.0.1 data.table_1.14.0 . loaded via a namespace (and not attached):; [1] SummarizedExperiment_1.20.0 tidyselect_1.1.0 purrr_0.3.4 lattice_0.20-41 ; [5] colorspace_2.0-0 vctrs_0.3.7 generics_0.1.0 yaml_2.2.1 ; [9] utf8_1.2.1 XML_3.99-0.6 rlang_0.4.10 pillar_1.6.0 ; [13] glue_1.4.2 withr_2.4.1 DBI_1.1.1 BiocParallel_1.24.1 ; [17] matrixStats_0.58.0 GenomeInfoDbData_1.2.4 lifecycle_1.0.0 plyr_1.8.6 ; [21] stringr_1.4.0 zlibbioc_1.36.0 MatrixGenerics_1.2.1 munsell_0.5.0 ; [25] gtable_0.3.0 labeling_0.4.2 Biobase_2.50.0 fansi_0.4.2 ; [29] Rcpp_1.0.6 scales_1.1.1 DelayedArray_0.16.3 farver_2.1.0 ; [33] Rsamtools_2.6.0 digest_0.6.27 stringi_1.5.3 dplyr_1.0.5 ; [37] grid_4.0.2 tools_4.0.2 bitops_1.0-6 RCurl_1.98-1.3 ; [41] tibble_3.1.0 crayon_1.4.1 pkgconfig_2.0.3 ellipsis_0.3.1 ; [45] Matrix_1.2-18 assertthat_0.2.1 rstudioapi_0.13 R6_2.5.0 ; [49] GenomicAlignments_1.26.0 compiler_4.0.2; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:11816,load,loaded,11816,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['load'],['loaded']
Performance,"_dr_salmonindex_transcriptome_ercc"" \; -o ""$newfilename-salmon-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-08-02 14:41:46.432] [jointLog] [info] Mapping rate = 42.6252%. [2017-08-02 14:41:46.432] [jointLog] [info] finished quantifyLibrary(); [2017-08-02 14:41:46.446] [jointLog] [info] Starting optimizer; [2017-08-02 14:41:46.508] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-08-02 14:41:46.510] [jointLog] [info] iteration = 0 | max rel diff. = 2",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1600,load,loading,1600,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['load'],['loading']
Performance,_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further processing; [2016-12-15 16:01:44.937] [jointLog] [info] Counted 12227080 total reads in the equivalence classes; [2016-12-15 16:01:44.948] [jointLog] [info] Mapping rate = 72.5194%. [2016-12-15 16:01:44.948] [jointLog] [info] finished quantifyLibrary(); [2016-12-15 16:01:44.949] [jointLog] [info] Starting optimizer; [2016-12-15 16:01:45.059] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-15 16:01:45.075] [jointLog] [info] iteration = 0 | max rel diff. = 261.892; [2016-12-15 16:01:45.248] [join,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1618,load,loading,1618,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['load'],['loading']
Performance,"_mono_S58_R1_001.fastq_AT_QT.fastq.gz.STAR_aligned.toTranscriptome.bam.salmon_quant }; Logs will be written to 4010760_5_mono_S58_R1_001.fastq_AT_QT.fastq.gz.STAR_aligned.toTranscriptome.bam.salmon_quant/logs; [2021-03-05 18:20:21.015] [jointLog] [info] setting maxHashResizeThreads to 10; [2021-03-05 18:20:21.015] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; parseThreads = 5; [2021-03-05 18:20:21.314] [jointLog] [info] numQuantThreads = 5; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""/groups/inah/test_Salmon/4010760_5_mono_S58_L001_R1_001.fastq_AT_QT.fastq.gz.STAR_aligned.toTranscriptome.bam"", fasta = ""a; ll_transcripts.fa"" . . .done; [2021-03-05 18:20:24.846] [jointLog] [info] replaced 1216 non-ACGT nucleotides with random nucleotides; processed 0 reads in current round[2021-03-05 18:20:25.180] [jointLog] [info] Automatically detected most likely library type as ISR; processed 3000000 reads in current round[2021-03-05 18:20:39.705] [jointLog] [info]; The alignment group queue pool has been exhausted. 7187672 extra fragments were allocated on the heap to saturate the pool. No new fragments will be allocated; processed 12000000 reads in current round; processed 21000000 reads in current round; processed 29000000 reads in current round; processed 38000000 reads in current round; processed 47000000 reads in current round; processed 56000000 reads in current round; processed 57000000 reads in current round/var/spool/slurmd/job599153/slurm_script: line 102: 17542 Segmentation fault singularity exec --bind $TMPDIR:/tmp,/groups:/groups,/work:/work /groups/arcsingularity/salmon_1.4.0.sif salmon quant -t all_transcripts.fa -l A -p 10 -a $in_FILES -o $outdir.salmon_quant. Salmon does not quantify transcript expression. I would appreciate any suggestions.; Thanks, Ina",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/638:2485,queue,queue,2485,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/638,1,['queue'],['queue']
Performance,"_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per frag: 1.25428[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 1873468, hits per frag: 1.25316[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2492702, hits per frag: 1.24947[A. [32mprocessed[31m 2500000 [32mfragments[0m; hits: 3114558, hits per frag: 1.24832[A. [32mprocessed[31m 3000000 [32mfragments[0m; hits: 3733674, hits per frag: 1.24664[A. [32mprocessed[31m 3500000 [32mfragments[0m; hits: 4356329, hits per frag: 1.24645[A. [32mprocessed[31m 4000000 [32mfragments[0m; hits: 4978863, hits per frag: 1.24627[A. [32mprocessed[31m 4500000 [32mfragments[0m; hits: 5601788, hits per frag: 1.24623[A. [32mprocessed[31m 5000000 ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:4188,load,loading,4188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['load'],['loading']
Performance,```; % salmon cite. Version Info: This is the most recent version of Salmon.; Salmon v0.8.2. Usage: salmon -h|--help or; salmon -v|--version or; salmon -c|--cite or; salmon [--no-version-check] <COMMAND> [-h | options]. Commands:; cite Show salmon citation information; index Create a salmon index; quant Quantify a sample; swim Perform super-secret operation; ```. It seems I need to do `salmon -c` instead,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/149:329,Perform,Perform,329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/149,1,['Perform'],['Perform']
Performance,"`salmon` command gives as expected:. ```; salmon v1.1.0. Usage: salmon -h|--help or; salmon -v|--version or; salmon -c|--cite or; salmon [--no-version-check] <COMMAND> [-h | options]. Commands:; index Create a salmon index; quant Quantify a sample; alevin single cell analysis; swim Perform super-secret operation; quantmerge Merge multiple quantifications into a single file; ```. However, `salmon index --help` freezes without any CPU usage. `strace` shows it's trying to connect to an IP address, which belongs to GitHub but out of commission right now. ```; socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 6; epoll_ctl(4, EPOLL_CTL_ADD, 6, {EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP|EPOLLET, {u32=509961152, u64=140196832437184}}) = 0; ioctl(6, FIONBIO, [1]) = 0; connect(6, {sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(""185.199.108.153"")}, 16) = -1 EINPROGRESS (Operation now in progress); epoll_ctl(4, EPOLL_CTL_MOD, 6, {EPOLLIN|EPOLLPRI|EPOLLOUT|EPOLLERR|EPOLLHUP|EPOLLET, {u32=509961152, u64=140196832437184}}) = 0; epoll_wait(4, ^Cstrace: Process 4488 detached; ```. Waiting long enough, it tries another IP address, which is also broken. My Salmon is compiled with GCC 8.2.0 / gompi2019a toolset using EasyBuild. It runs on Centos 7. Passing `--no-version-check` solves the problem but this option isn't displayed on main help screen, I found it somewhere in the source.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486:283,Perform,Perform,283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486,1,['Perform'],['Perform']
Performance,"`salmon` is found from `bioconda` but ... ```; $ conda search salmon; Loading channels: done; # Name Version Build Channel; salmon 0.5.1 0 bioconda; salmon 0.6.0 0 bioconda; salmon 0.6.0 1 bioconda; salmon 0.6.0 boost1.60_1 bioconda; salmon 0.6.0 boost1.60_2 bioconda; salmon 0.7.2 boost1.60_2 bioconda; salmon 0.7.2 boost1.60_3 bioconda; salmon 0.7.2 boost1.61_3 bioconda; salmon 0.8.0 boost1.60_0 bioconda; salmon 0.8.0 boost1.61_0 bioconda; salmon 0.8.1 0 bioconda; salmon 0.8.2 0 bioconda; salmon 0.8.2 1 bioconda; salmon 0.9.0 0 bioconda; salmon 0.9.1 0 bioconda; salmon 0.9.1 1 bioconda; salmon 0.10.0 1 bioconda; salmon 0.10.1 1 bioconda; salmon 0.10.2 1 bioconda; salmon 0.11.0 h445c947_0 bioconda; salmon 0.11.1 h445c947_0 bioconda; salmon 0.11.2 h445c947_0 bioconda; salmon 0.11.3 h86b0361_1 bioconda; salmon 0.11.3 h86b0361_2 bioconda; ```. When I try to install, I get `PackageNotFoundError`.; ```; $ conda create -n salmon salmon=0.11.3; Solving environment: failed. PackagesNotFoundError: The following packages are not available from current channels:. - salmon=0.11.3; - jemalloc[version='>=5.1.0']; - salmon=0.11.3; - libcxx. Current channels:. - https://conda.anaconda.org/bioconda/linux-64; - https://conda.anaconda.org/bioconda/noarch; - https://repo.anaconda.com/pkgs/main/linux-64; - https://repo.anaconda.com/pkgs/main/noarch; - https://repo.anaconda.com/pkgs/free/linux-64; - https://repo.anaconda.com/pkgs/free/noarch; - https://repo.anaconda.com/pkgs/r/linux-64; - https://repo.anaconda.com/pkgs/r/noarch; - https://repo.anaconda.com/pkgs/pro/linux-64; - https://repo.anaconda.com/pkgs/pro/noarch. To search for alternate channels that may provide the conda package you're; looking for, navigate to. https://anaconda.org. and use the search bar at the top of the page.; ```. It is weird because I am installing on `linux64`.; ```; $ lsb_release -a; LSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/308:70,Load,Loading,70,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/308,1,['Load'],['Loading']
Performance,"abriel/Projects/salmon-0.13.1/build/CMakeFiles/libcereal.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; checking whether the C compiler works... yes; checking for C compiler default output file name... a.out",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:1942,Perform,Performing,1942,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['Perform'],['Performing']
Performance,"aco_m@med0113 1_bootstrappedAlevin]$ ls -al alevin; total 1; drwxrwxr-x 2 amonaco_m hpc-ag-zinzen 4096 Mar 3 11:00 .; drwxrwxr-x 3 amonaco_m hpc-ag-zinzen 4096 Mar 3 11:00 ..; -rw-rw-r-- 1 amonaco_m hpc-ag-zinzen 0 Mar 3 11:00 alevin.log; ```. I have used Salmon Alevin before on this dataset - without the bootstrap option - while providing the Cell Ranger whitelisted barcodes, and everything has gone smoothly (same script as below, commented out line). I have tried increasing the allotted memory and thread number as well, but with no change in outcome. Have you ever encountered something like this or could address me to where the issue may be (I'm assuming something to do with the bootstrap)?. *****Script I submit:*****; ```; #!/bin/bash; # expected run time ; #SBATCH --time=24:00:00 ; # Combine stderr and stdout log files into the stdout log file.; #SBATCH -o without -e; # Keep current environment variables.; #SBATCH --export=variables; # number of cores; #SBATCH -n 30; # expected memory to be used; #SBATCH ‚Äîmem=50000; # Specify queue via expected length of job. ; #SBATCH --partition=medium; # Set the log directory.; #SBATCH -o logs. ####declarations; conda activate salmon. Read1=$1 # fastq file - CB+UMI; Read2=$2 # fastq file - insert read; index=$3 # directory from salmon index; outDir=$4 # output directory; tsv=$5 # tsv containing txp-gene-id pairs; whitelist=$6 # cell ranger output barcodes. salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist --numCellBootstraps 20 --dumpFeatures. #salmon alevin -lISR -1 $Read1 -2 $Read2 --chromiumV3 -i $index -p 8 -o $outDir --tgMap $tsv --whitelist $whitelist. ```. Thank you in advance!; Anna. -------------------------; Additional FYI:; ```; (salmon) [amonaco_m@med0113 1_bootstrappedAlevin]$ salmon version; Version Info: This is the most recent version of salmon.; salmon v1.4.0. Usage: salmon -h|--help or ; salmon -v|--version or ; salmon -c|--cite or ; salmon [--n",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/636:1876,queue,queue,1876,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/636,1,['queue'],['queue']
Performance,"ads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per frag: 1.25428[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 1873468, hits per frag: 1.25316[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2492702, hits per frag: 1.24947[A. [32mprocessed[31m 2500000 [32mfragments",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:3740,Load,Loading,3740,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['Load'],['Loading']
Performance,agments will be ignored.; [2018-07-19 18:24:03.059] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 87 Million barcodes. [2018-07-19 18:26:13.307] [alevinLog] [info] Done barcode density calculation.; [2018-07-19 18:26:13.307] [alevinLog] [info] # Barcodes Used: 86885223 / 87959276.; [2018-07-19 18:26:13.334] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 18:26:13.334] [alevinLog] [info] Total 54879 white-listed Barcodes; [2018-07-19 18:26:18.285] [alevinLog] [info] Done populating Z matrix; [2018-07-19 18:26:18.300] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5080,Load,Loading,5080,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['Load'],['Loading']
Performance,"ail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l A \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_old/${line} --seqBias --gcBias. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.8.2-IGB-gcc-4.9.4-Python-2.7.13. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l A \; -1 ~/results/trimmingSheng/${line}1.paired.fastq \; -2 ~/results/trimmingSheng/${line}2.paired.fastq --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_new/${line} --seqBias --gcBias. **Steps and data to reproduce the behavior: for version 0.12**; module load Cufflinks/2.2.1; gffread MSU7_all.gff3 -g all.chrs.fasta -w MSU7_newtranscript.fasta. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=50G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J index_Salmon. module load Salmon/0.12.0-IGB-gcc-8.2.0. salmon index -t ~/data/genome/MSU7_newtranscript.fasta -i ~/data/genome/MSU7new_transcript.index --type quasi -k 31. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l A \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_BLB/${line} --seqBias --gcBias --validateMappings. #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:2726,load,load,2726,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['load'],['load']
Performance,"al `1,099,008` are being discarded because they have only dovetail mappings. . We discard dovetail mappings by default, but you can admit them with `--allowDovetail`. The other `2,776,678` fragments are discarded because, though there are seeds for mapping that match, they do not have sufficiently high alignment score to be allowed for mapping. This default behavior, too, can be modified. The main flags that affect the behavior here are `--minScoreFraction`, where a lower number allows lower-quality alignments through and also the `--softclipOverhangs` flag which will decrease the penalty on alignments that overhang the end of an annotated transcript. However, it's worth noting that this is up to `3,875,686` more reads that might be mappable. This number is non-trivial, but quite far from the 90% rate of STAR. The rest of the reads, however, simply don't have support for alignment against the annotated transcriptome. **This suggests to me that STAR is probably aligning a lot of reads outside of annotated genes**. If you build the salmon index [using a full decoy of the genome](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/), then you might be able to evaluate intergenic mapping in the output in terms of `Number of fragments discarded because they are best-mapped to decoys`. However, in that case, these reads still won't contribute to transcript expression, as they do not align to annotated transcripts. Finally, if you suspect these reads might be coming from genes expressed in your sample but not present in the annotation, you might consider performing a transcript assembly on your data, using a tool like [scallop2](https://github.com/Shao-Group/scallop2) or [stringtie](https://github.com/gpertea/stringtie). Best,; Rob. P.S. I'm closing the thread, since I think the above answers your direct question, but please feel free to continue commenting here (for discussion) or to open up another issue if there are follow-ups that are salmon-related.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126361719:1778,perform,performing,1778,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126361719,2,['perform'],['performing']
Performance,alevinLog] [info] Throwing 0 barcodes with < 1 reads; > [2020-06-04 12:26:05.872] [alevinLog] [info] Total [32m95377[0m(has [32m101[0m low confidence) barcodes; > [2020-06-04 12:26:06.746] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-04 12:26:06.880] [alevinLog] [info] Total 1.2299% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-04 12:26:10.886] [alevinLog] [info] Done populating Z matrix; > [2020-06-04 12:26:10.924] [alevinLog] [info] Total 118774 CB got sequence corrected; > [2020-06-04 12:26:10.936] [alevinLog] [info] Done indexing Barcodes; > [2020-06-04 12:26:10.936] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-04 12:26:10.936] [alevinLog] [info] Used Barcodes except Whitelist: 88156; > [2020-06-04 12:26:11.113] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-04 12:26:11.113] [alevinLog] [info] parsing read library format; > [2020-06-04 12:27:21.373] [alevinLog] [info] Starting optimizer; > ; > [2020-06-04 12:27:22.086] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:27:22.086] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 23937.00 UMI after deduplicating.; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 91 BiDirected Edges.; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 82 UniDirected Edges.; > [2020-06-04 12:27:22.409] [alevinLog] [warning] Skipped 82268 barcodes due to No mapped read; > [2020-06-04 12:27:22.412] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-04 12:27:22.418] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 100.Can't performing whitelisting; Skipping; > [2020-06-04 12:27:22.418] [alevinLog] [info] Finished optimizer. Run 2: `salmon alevin -l ISR --citeseq --barcodeLength 16 --umiLength 10 --end 5 --featureStart 19 --featureLength 21 --maxNumBarcod,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199:3175,optimiz,optimizer,3175,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199,2,['optimiz'],['optimizer']
Performance,"alevinLog] [info] Total 958944 UniDirected Edges.; [2019-07-18 14:30:09.475] [alevinLog] [warning] Skipped 28272 barcodes due to No mapped read; [2019-07-18 14:30:09.552] [alevinLog] [info] Finished optimizer; ```. ## R code (How to Use alevin with Seurat). ```; > library(here); > library(tidyverse); > library(Seurat); > library(tximport); > library(tictoc). > files <- file.path(here(""alevin_output/alevin/quants_mat.gz"")); > file.exists(files); [1] TRUE; >; > tic(""starts...""); > txi <- tximport(files, type=""alevin""; > toc(); starts...: 728.506 sec elapsed; > sessionInfo(); ```; R version 3.6.1 (2019-07-05); Platform: x86_64-conda_cos6-linux-gnu (64-bit); Running under: CentOS Linux 7 (Core). Matrix products: default; BLAS/LAPACK: /gpfs/data/software/anaconda3/envs/R3.6/lib/libopenblasp-r0.3.6.so. locale:; [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C; [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8; [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8; [7] LC_PAPER=en_US.UTF-8 LC_NAME=C; [9] LC_ADDRESS=C LC_TELEPHONE=C; [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C. attached base packages:; [1] stats graphics grDevices utils datasets methods base. other attached packages:; [1] tictoc_1.0.1 tximport_1.12.3 forcats_0.4.0 stringr_1.4.0; [5] dplyr_0.8.3 purrr_0.3.2 readr_1.3.1 tidyr_0.8.3; [9] tibble_2.1.3 ggplot2_3.2.0 tidyverse_1.2.1 here_0.1. loaded via a namespace (and not attached):; [1] Rcpp_1.0.1 cellranger_1.1.0 pillar_1.4.2 compiler_3.6.1; [5] tools_3.6.1 zeallot_0.1.0 jsonlite_1.6 lubridate_1.7.4; [9] gtable_0.3.0 nlme_3.1-140 lattice_0.20-38 pkgconfig_2.0.2; [13] rlang_0.4.0 cli_1.1.0 rstudioapi_0.10 haven_2.1.1; [17] withr_2.1.2 xml2_1.2.0 httr_1.4.0 generics_0.0.2; [21] vctrs_0.2.0 hms_0.5.0 rprojroot_1.3-2 grid_3.6.1; [25] tidyselect_0.2.5 glue_1.3.1 R6_2.4.0 readxl_1.3.1; [29] modelr_0.1.4 magrittr_1.5 backports_1.1.4 scales_1.0.0; [33] rvest_0.3.4 assertthat_0.2.1 colorspace_1.4-1 stringi_1.4.3; [37] lazyeval_0.2.2 munsell_0.5.0 broom_0.5.2 crayon_1.3.4; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/404:3787,load,loaded,3787,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/404,1,['load'],['loaded']
Performance,"alevinLog] [warning] Gauss Prediction 12274 Too far from knee prediction skipping it; [2018-06-12 21:08:55.712] [alevinLog] [info] Learned InvCov: 255.229 normfactor: 12656.9; [2018-06-12 21:08:55.712] [alevinLog] [info] Total 327(has 200 low confidence) barcodes; [2018-06-12 21:08:55.895] [alevinLog] [info] Done True Barcode Sampling; [2018-06-12 21:08:56.092] [alevinLog] [info] Done populating Z matrix; [2018-06-12 21:08:56.093] [alevinLog] [info] Done indexing Barcodes; [2018-06-12 21:08:56.094] [alevinLog] [info] Total Unique barcodes found: 1530568; [2018-06-12 21:08:56.094] [alevinLog] [info] Used Barcodes except Whitelist: 4828; [2018-06-12 21:08:56.124] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-12 21:08:56.124] [alevinLog] [info] parsing read library format; [2018-06-12 21:08:56.124] [jointLog] [info] There is 1 library.; [2018-06-12 21:08:56.183] [jointLog] [info] Loading Quasi index; [2018-06-12 21:08:56.184] [jointLog] [info] Loading 32-bit quasi index; [2018-06-12 21:08:56.184] [stderrLog] [info] Loading Suffix Array ; [2018-06-12 21:08:56.530] [stderrLog] [info] Loading Transcript Info ; [2018-06-12 21:08:56.675] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-12 21:08:56.724] [stderrLog] [info] There were 36191 set bits in the bit array; [2018-06-12 21:08:56.729] [stderrLog] [info] Computing transcript lengths; [2018-06-12 21:08:56.729] [stderrLog] [info] Waiting to finish loading hash; [2018-06-12 21:08:58.508] [jointLog] [info] done; [2018-06-12 21:08:58.508] [jointLog] [info] Index contained 36191 targets; [2018-06-12 21:08:58.508] [stderrLog] [info] Done loading index. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; hits: 169917, hits per frag: 0.0489674[2018-06-12 21:09:22.500] [jointLog] [error] umi indexing of jellyfish failing.; Ple",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/237:3466,Load,Loading,3466,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/237,1,['Load'],['Loading']
Performance,"alidateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-20 10:53:54.760] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-20 10:53:54.760] [jointLog] [info] parsing read library format; [2021-05-20 10:53:54.760] [jointLog] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:2256,Load,Loading,2256,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"almon (mapping-based) v0.7.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/GENCODE/GRCh38_hg38/transcripts/salmon_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:3501,Load,Loading,3501,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['Load'],['Loading']
Performance,"and ] => quant ; ### [ index ] => { /share/genomes/human/hg38/gencode_v43/primary_comprehensive/SalmonIndex }; ### [ libType ] => { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.fastq }; ### [ output ] => { salmon_out }; ### [ threads ] => { 1 }; Logs will be written to salmon_out/logs; [2023-11-30 09:36:58.680] [jointLog] [info] setting maxHashResizeThreads to 1; [2023-11-30 09:36:58.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:36:58.680] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:36:58.680] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:36:58.680] [jointLog] [info] parsing read library format; [2023-11-30 09:36:58.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:6193,Load,Loading,6193,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"ant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/GENCODE/GRCh38_hg38/transcripts/salmon_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.26074[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1248009, hits per frag: 1.25428[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 1873468",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:3583,Load,Loading,3583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['Load'],['Loading']
Performance,"appings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-05 09:19:06.171] [jointLog] [info] parsing read library format; [2020-05-05 09:19:06.171] [jointLog] [info] There is 1 library.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading pufferfish index; [2020-05-05 09:19:06.278] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 30.609 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 1.3312 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.6842 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 20.002 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 11.467 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 9.5665 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 4.3912 ms; -----------------------------------------; Exception : [std::bad_alloc]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. Not sure why it happens... memory doesn't reach the max. ![Screenshot at 2020-05-05 09-45-37](https://user-images.githubusercontent.com/61701461/81045096-d14e0f00-8eb5-11ea-97ed-b4f4454ba042.png). Than you so much in advan",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021:2197,Load,Loading,2197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021,1,['Load'],['Loading']
Performance,"ar, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_status cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_fast_double<std::integral_constant<bool, false>, std::integral_constant<bool, true> >(unsigned long)::{lambda(unsigned long, unsigned long, std::__exception_ptr::exception_ptr&)#1}) (this=this@entry=0x7fffffffc520, start=34816, start@entry=0, end=65536, func=...); at /u/user/tmp/salmon/include/cuckoohash_map.hh:1756; #12 0x00000000007a69ac in cuckoo_fast_double<std::integral_constant<bool, false>, std::integral_constant<bool, true> >; (current_hp=<optimized out>, this=0x7fffffffc520) at /u/user/tmp/salmon/include/cuckoohash_map.hh:1583; #13 cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_insert_loop<std::integral_constant<bool, false>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=this@entry=0x7fffffffc520, hv=..., b=..., key=...); at /u/user/tmp/salmon/include/cuckoohash_map.hh:1086; #14 0x00000000007a8540 in uprase_fn<std::__cxx11::basic_string<char>&, cuckoohash_map<Key, T, Hash, KeyEqual, Allocator, SLOT_PER_BUCKET>::upsert(K&&, F, Args&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOp",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:7808,optimiz,optimized,7808,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,arcodes; [2018-07-19 18:26:13.334] [alevinLog] [info] Total 54879 white-listed Barcodes; [2018-07-19 18:26:18.285] [alevinLog] [info] Done populating Z matrix; [2018-07-19 18:26:18.300] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.11753.0.PTF-default #1 SMP Wed Oct 19 14:11:00 UTC 2016 (56c73f1) x86_64 x86_64 x86_64 GNU/Linux`; `$ lsb_release -a; LSB Version:	core-2.0-noarch:core-3.2-noarch:core-4.0-noarch:core-2.0-x86_64:core-3.2-x86_64:core-4.0-x86_64:desktop-4.0-amd64:desktop-4.0-noarch:graphics-2.0-amd64:graphics-2.0-noarch:graphics-3.2-amd64:graphics-3.2-noarch:graphics-4.0-amd64:graphics-4.0-noarch; ,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5475,load,loading,5475,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['load'],['loading']
Performance,"arsing read library format; [2019-01-29 09:55:05.014] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:55:04.882] [jointLog] [info] There is 1 library.; [2019-01-29 09:55:05.012] [jointLog] [info] Loading Quasi index; [2019-01-29 09:55:05.013] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:55:06.105] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:55:09.968] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:55:16.908] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:55:19.931] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:55:19.931] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:55:41.122] [jointLog] [info] done; [2019-01-29 09:55:41.122] [jointLog] [info] Index contained 80,511 targets; [2019-01-29 09:55:41.122] [stderrLog] [info] Done loading index. processed 0 Million fragments; hits: 161433, hits per frag: 0.32698. [2019-01-29 09:55:54.788] [alevinLog] [info] Starting optimizer; [2019-01-29 09:55:54.742] [jointLog] [info] Computed 6,346 rich equivalence classes for further processing; [2019-01-29 09:55:54.742] [jointLog] [info] Counted 80,300 total reads in the equivalence classes ; [2019-01-29 09:55:54.754] [jointLog] [warning] Only 80300 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2019-01-29 09:55:54.754] [jointLog] [info] Mapping rate = 8.80342%. [2019-01-29 09:55:54.754] [jointLog] [info] finished quantifyLibrary(). Analyzed 289 cells (100% of all).; [2019-01-29 09:55:56.858] [alevinLog] [info] Total 72037 UMI after deduplicating.; [2019-01-29 09:55:56.858] [alevinLog] [warning] Skipped 151 barcodes due to No mapped read; [2019-01-29 09:55:56.876] [alevinLog] [info] Clearing EqMap; Might take some time.; [2019-01-29 09:55:56.917] [alevinLog] [info] Starting Import of the gene count matrix.; [2019-01-29 09:55:57.130] [alevinLog] [info] Done ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:3675,optimiz,optimizer,3675,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['optimiz'],['optimizer']
Performance,"ary format; [2018-11-29 22:28:18.184] [jointLog] [info] There is 1 library.; [2018-11-29 22:28:18.324] [jointLog] [info] Loading Quasi index; [2018-11-29 22:28:18.325] [jointLog] [info] Loading 32-bit quasi index; [2018-11-29 22:28:18.325] [stderrLog] [info] Loading Suffix Array; [2018-11-29 22:28:19.339] [stderrLog] [info] Loading Transcript Info; [2018-11-29 22:28:19.536] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-29 22:28:19.554] [stderrLog] [info] There were 64,431 set bits in the bit array; [2018-11-29 22:28:19.561] [stderrLog] [info] Computing transcript lengths; [2018-11-29 22:28:19.561] [stderrLog] [info] Waiting to finish loading hash; [2018-11-29 22:28:23.502] [stderrLog] [info] Done loading index; [2018-11-29 22:28:23.502] [jointLog] [info] done; [2018-11-29 22:28:23.502] [jointLog] [info] Index contained 64,431 targets. processed 178 Million fragments; hits: 212754413, hits per frag: 1.19535. [2018-11-29 22:40:56.510] [jointLog] [info] Computed 110,023 rich equivalence classes for further processing; [2018-11-29 22:40:56.510] [jointLog] [info] Counted 95,071,703 total reads in the equivalence classes; [2018-11-29 22:40:56.510] [jointLog] [info] Mapping rate = 53.3587%. [2018-11-29 22:40:56.510] [jointLog] [info] finished quantifyLibrary(); [2018-11-29 22:41:01.682] [alevinLog] [info] Starting optimizer. Analyzed 12346 cells (100% of all).; Skipped Barcodes are from High Confidence Region; Should not happen%. **Desktop (please complete the following information):**; - OS: macOS; - Version: 10.14.1. **Additional context**; This failure comes when analyzing data from the new 10X v3 chemistry. Initially, I thought that was the issue, but our analysis worked when using the 'neuron_1k' dataset (the read sequences that makes the program fail come from the 'neuron_10k' dataset), which was also produced with similar v3 chemistry but quasi-maps correctly. I can attach screenshots for either dataset for anyone still trying to figure out the problem.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324:3346,optimiz,optimizer,3346,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324,1,['optimiz'],['optimizer']
Performance,"ase<Derived, 1>::Scalar& Eigen::DenseCoeffsBase<Derived, 1>::operator[](Eigen::DenseCoeffsBase<Derived, 1>::Index) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::DenseCoeffsBase<Derived, 1>::Scalar = double; Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.; /home/ngs/scripts/sc-rna/sc-s-salmon-quant.sh: line 40: 10170 Aborted (core dumped) . when I run. ```bash; salmon quant \; -i ""$path_dr_salmonindex_transcriptome_ercc"" \; -o ""$newfilename-salmon-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1132,Load,Loading,1132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['Load'],['Loading']
Performance,"ase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:17:29.867] [jointLog] [info] Starting optimizer; [2016-01-02 20:17:30.130] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-02 20:17:30.136] [jointLog] [info] iteration = 0 | max rel diff. = 65.1271; [2016-01-02 20:17:30.315] [jointLog] [info] iteration 50, recomputing effective lengths; [2016-01-02 20:17:32.978] [jointLog] [info] iteration = 100 | max rel diff. = 0.259134; [2016",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:2299,load,loading,2299,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['load'],['loading']
Performance,"assigned_fragments"": 46363434,; ""num_frags_with_concordant_consistent_mappings"": 0,; ""num_frags_with_inconsistent_or_orphan_mappings"": 135602410,; ""strand_mapping_bias"": 0.0,; ""MSF"": 0,; ""OSF"": 0,; ""ISF"": 0,; ""MSR"": 0,; ""OSR"": 0,; ""ISR"": 0,; ""SF"": 0,; ""SR"": 0,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; ```. And here is the `alevin_meta_info.json`, which shows the huge attrition in recognized CBs and poor mapping rate:; ```; ""total_reads"": 1153394214,; ""reads_with_N"": 17295,; ""noisy_cb_reads"": 708796684,; ""noisy_umi_reads"": 149640,; ""used_reads"": 444430595,; ""mapping_rate"": 4.019738736091838,; ""reads_in_eqclasses"": 46363434,; ""total_cbs"": 132768705,; ""used_cbs"": 398369,; ""initial_whitelist"": 5383,; ""low_conf_cbs"": 1000,; ""num_features"": 5,; ""no_read_mapping_cbs"": 148,; ""final_num_cbs"": 3931,; ""deduplicated_umis"": 24178832,; ""mean_umis_per_cell"": 6150,; ""mean_genes_per_cell"": 2810; ```. This, in conjunction with the fact that running with `-l A` suggests incorrectly the data are unstranded (`IU`), led @mikelove to suspect alevin may be skipping the libType guesswork that salmon typically performs. . I know these data are of reasonably good quality, because I have instead processed them using [zUMIs](https://github.com/sdparekh/zUMIs), which supports SPLiT-seq data. A side-by-side of the same FASTQs processed this way using alevin or using zUMIs gave me ~270 cells that pass filters (alevin) vs ~50k cells that pass filters (zUMIs), so something is definitely up here. . I'd like to confirm a few details and ask for some guidance on how to move forward:. 1. Is the reversal of R1/R2 like I did here necessary/recommended/correct?; 2. Is alevin truly skipping the libType identification bits such that I need to know which architecture to use? If so, how do I know?; 3. Why are so many CBs called as ""noisy"" here?; 4. Why is the mapping rate so low?; 5. Is there anything else I'm missing that can explain the unexpectedly poor outcome, or some other reason why this approach will not w",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699:6444,perform,performs,6444,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699,1,['perform'],['performs']
Performance,"at 4345 ; [2018-09-11 16:33:59.242] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-09-11 16:33:59.242] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-09-11 16:33:59.358] [alevinLog] [info] Done True Barcode Sampling; [2018-09-11 16:33:59.891] [alevinLog] [info] Done populating Z matrix; [2018-09-11 16:33:59.972] [alevinLog] [info] Done indexing Barcodes; [2018-09-11 16:33:59.972] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-09-11 16:33:59.972] [alevinLog] [info] Used Barcodes except Whitelist: 173007; [2018-09-11 16:34:00.783] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-09-11 16:34:00.784] [alevinLog] [info] parsing read library format; [2018-09-11 16:34:00.784] [jointLog] [info] There are 2 libraries.; [2018-09-11 16:34:00.868] [jointLog] [info] Loading Quasi index; [2018-09-11 16:34:00.876] [jointLog] [info] Loading 32-bit quasi index; [2018-09-11 16:34:00.876] [stderrLog] [info] Loading Suffix Array ; [2018-09-11 16:34:18.777] [stderrLog] [info] Loading Transcript Info ; [2018-09-11 16:34:27.531] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-09-11 16:34:27.735] [stderrLog] [info] There were 97465 set bits in the bit array; [2018-09-11 16:34:27.776] [stderrLog] [info] Computing transcript lengths; [2018-09-11 16:34:27.776] [stderrLog] [info] Waiting to finish loading hash; [2018-09-11 16:34:29.276] [stderrLog] [info] Done loading index; [2018-09-11 16:34:29.276] [jointLog] [info] done; [2018-09-11 16:34:29.276] [jointLog] [info] Index contained 97465 targets. [2018-09-11 16:34:30.109] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2018-09-11 16:34:30.109] [jointLog] [info] Counted 0 total reads in the equivalence classes ; [2018-09-11 16:34:30.116] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294:11114,Load,Loading,11114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294,1,['Load'],['Loading']
Performance,"at 692 ; [2019-01-29 09:56:53.219] [alevinLog] [info] Gauss Corrected Boundary at 100 ; [2019-01-29 09:56:53.219] [alevinLog] [info] Learned InvCov: 114.414 normfactor: 148.807; [2019-01-29 09:56:53.219] [alevinLog] [info] Total 293(has 193 low confidence) barcodes; [2019-01-29 09:56:53.224] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:56:53.254] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:56:53.255] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:56:53.255] [alevinLog] [info] Total Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence cl",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8278,Load,Loading,8278,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance,"ata, which is why the total # of reads is so small). ```; rob@feynman:/mnt/scratch3/rob/JoshTest$ ~/SoftwareStaging/salmon/scripts/SalmonBeta-0.6.5-pre_CentOS5/bin/salmon quant -p 15 -i salmon_index -l IU -1 ../strange_peak/19232_1_1.fastq -2 ../strange_peak/19232_1_2.fastq -o quant_binary; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 15 }; # [ index ] => { salmon_index }; # [ libType ] => { IU }; # [ mates1 ] => { ../strange_peak/19232_1_1.fastq }; # [ mates2 ] => { ../strange_peak/19232_1_2.fastq }; # [ output ] => { quant_binary }; Logs will be written to quant_binary/logs; there is 1[2016-03-31 14:05:14.184] [jointLog] [info] parsing read library format; lib; Loading 64-bit quasi index[2016-03-31 14:05:14.266] [stderrLog] [info] Loading Suffix Array; [2016-03-31 14:05:14.266] [jointLog] [info] Loading Quasi index. [2016-03-31 14:07:58.647] [stderrLog] [info] Loading Transcript Info; [2016-03-31 14:08:59.703] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-31 14:09:06.744] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in the equivalence classes. [2016-03-31 14:13:24.480] [jointLog] [warning] Only 159824 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-03-31 14:13:24.480",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:1246,Load,Loading,1246,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['Load'],['Loading']
Performance,"ause of noisy Cellular barcodes.; [2019-01-29 15:49:35.112] [alevinLog] [info] Total 4000(has 1000 low confidence) barcodes; [2019-01-29 15:49:35.251] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 15:49:35.896] [alevinLog] [info] Done populating Z matrix; [2019-01-29 15:49:35.994] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 15:49:35.994] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-29 15:49:35.994] [alevinLog] [info] Used Barcodes except Whitelist: 105901; [2019-01-29 15:49:36.107] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 15:49:36.107] [alevinLog] [info] parsing read library format; [2019-01-29 15:49:36.415] [stderrLog] [info] Loading Suffix Array; [2019-01-29 15:49:36.107] [jointLog] [info] There is 1 library.; [2019-01-29 15:49:36.373] [jointLog] [info] Loading Quasi index; [2019-01-29 15:49:36.396] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 15:49:50.479] [stderrLog] [info] Loading Transcript Info; [2019-01-29 15:49:55.550] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 15:49:56.036] [stderrLog] [info] There were 58,086 set bits in the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.677] [jointLog] [info] Counted 58,047,553 total reads in the equivalence classes; [2019-01-29 16:05:46.678] [jointLog] [warning] Found 21006 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-29 16:05:4",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:1507,Load,Loading,1507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['Load'],['Loading']
Performance,"b total reads per sample (90,000,000 to 100,000,000 reads, ~75 bp reads). I've tried running these samples through the `nf-core/rnaseq` pipeline, but the pipeline took an age to run before dying at the `salmon quant` steps. Some samples finished in about 12 minutes. Others timed out after 8+ hours. - Successful log:. ```; [2023-02-22 16:33:49.782] [jointLog] [info] setting maxHashResizeThreads to 6; [2023-02-22 16:33:49.782] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-22 16:33:49.782] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-22 16:33:49.782] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-22 16:33:49.782] [jointLog] [info] parsing read library format; [2023-02-22 16:33:49.783] [jointLog] [info] There is 1 library.; [2023-02-22 16:33:49.784] [jointLog] [info] Loading pufferfish index; [2023-02-22 16:33:49.784] [jointLog] [info] Loading dense pufferfish index.; [2023-02-22 16:34:17.987] [jointLog] [info] done; [2023-02-22 16:34:18.037] [jointLog] [info] Index contained 245549 targets; [2023-02-22 16:34:19.908] [jointLog] [info] Number of decoys : 194; [2023-02-22 16:34:19.908] [jointLog] [info] First decoy index : 245314 ; [2023-02-22 16:39:30.638] [jointLog] [info] Thread saw mini-batch with a maximum of 1.10% zero probability fragments; [2023-02-22 16:39:30.653] [jointLog] [info] Thread saw mini-batch with a maximum of 1.02% zero probability fragments; [2023-02-22 16:39:30.653] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2023-02-22 16:39:30.654] [jointLog] [info] Thread saw mini-batch with a maximum of 1.12% zero probability fragments; [2023-02-22 16:39:30.679] [jointLog] [info] Thread saw mini-batch with a maximum of 1.02% zero probability fragments; [2023-02-22 16:39:30.680] [jointLog] [info] Thread s",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:1142,Load,Loading,1142,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"b2450d88e8e92fa0f3c06/ACV_REP2_1_val_1.fq.gz }; ### [ mates2 ] => { /home/cfos/Documents/Collaboration/Ece/2023_Bulk/work/5d/a1220b107b2450d88e8e92fa0f3c06/ACV_REP2_2_val_2.fq.gz }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ posBias ] => { }; ### [ output ] => { ACV_REP2 }; Logs will be written to ACV_REP2/logs; [2023-02-23 09:39:48.709] [jointLog] [info] setting maxHashResizeThreads to 6; [2023-02-23 09:39:48.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-02-23 09:39:48.709] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; --------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:9202,Load,Loading,9202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,barcodes; [2021-04-09 12:16:37.883] [alevinLog] [info] Done True Barcode Sampling; [2021-04-09 12:16:37.884] [alevinLog] [info] Total 15.7% reads will be thrown away because of noisy Cellular barcodes.; [2021-04-09 12:16:37.892] [alevinLog] [info] Done populating Z matrix; [2021-04-09 12:16:37.892] [alevinLog] [info] Total 0 CB got sequence corrected; [2021-04-09 12:16:37.892] [alevinLog] [info] Done indexing Barcodes; [2021-04-09 12:16:37.892] [alevinLog] [info] Total Unique barcodes found: 822; [2021-04-09 12:16:37.892] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2021-04-09 12:16:37.914] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-04-09 12:16:37.914] [alevinLog] [info] parsing read library format; [2021-04-09 12:16:37.914] [jointLog] [info] There is 1 library.; [2021-04-09 12:16:38.027] [jointLog] [info] Loading pufferfish index; [2021-04-09 12:16:38.027] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:4245,Load,Loading,4245,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"bbs error. I just ran using the binary you compiled with the following command, and got this output:. ```; $LD_LIBRARY_PATH=~/SoftwareStaging/salmon/lib:$LD_LIBRARY_PATH ./salmon quant --index Salmon_index_hg38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --us; eVBOpt --output test_quant --numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1247,Load,Loading,1247,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['Load'],['Loading']
Performance,"be ignored.; Library format { type:single end, relative orientation:none, strandedness:unstranded }; [2023-01-29 16:02:11.308] [jointLog] [info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"", fasta = ""/rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas"" . . .done. processed 0 reads in current round[2023-01-29 16:02:12.216] [jointLog] [info] replaced 186,207 non-ACGT nucleotides with random nucleotides; [2023-01-29 16:02:12.668] [jointLog] [info] Automatically detected most likely library type as U. processed 2000000 reads in current round[2023-01-29 16:02:13.116] [jointLog] [info] . The alignment group queue pool has been exhausted. 1842 extra fragments were allocated on the heap to saturate the pool. No new fragments will be allocated. processed 13423395 reads in current round; killing thread 3 . . . done. Freeing memory used by read queue . . . 00000; Joined parsing thread . . . ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"" ; Closed all files . . . ; Emptied frag queue. . . ; Emptied Alignment Group Pool. . ; Emptied Alignment Group Queue. . . done; [2023-01-29 16:02:59.265] [jointLog] [info] . Completed first pass through the alignment file.; Total # of mapped reads : 13423395; # of uniquely mapped reads : 13423394; # ambiguously mapped reads : 1. [2023-01-29 16:02:59.271] [jointLog] [info] Computed 169 rich equivalence classes for further processing; [2023-01-29 16:02:59.272] [jointLog] [info] Counted 13,423,395 total reads in the equivalence classes ; [2023-01-29 16:02:59.272] [jointLog] [info] starting optimizer; [2023-01-29 16:02:59.274] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-01-29 16:02:59.274] [jointLog] [info] iteration = 0 | max rel diff. = 237.557; [2023-01-29 16:02:59.282] [jointLog] [info] iteration = 100 | max rel diff. = 3.78077e-16; [2023-01-29 16:02:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/825:3005,queue,queue,3005,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/825,1,['queue'],['queue']
Performance,"be ignored.; [2021-08-20 12:29:32.343] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2021-08-20 12:29:32.343] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-08-20 12:29:32.343] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; [2021-08-20 12:29:32.343] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-08-20 12:29:32.343] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2021-08-20 13:19:51.055] [jointLog] [info] There is 1 library.; [2021-08-20 13:19:51.124] [jointLog] [info] Loading pufferfish index; [2021-08-20 13:19:51.125] [jointLog] [info] Loading dense pufferfish index.; [2021-08-20 13:19:53.706] [jointLog] [info] done; [2021-08-20 13:19:53.706] [jointLog] [info] Index contained 231,288 targets; [2021-08-20 13:19:53.777] [jointLog] [info] Number of decoys : 0; [2021-08-20 16:03:00.061] [jointLog] [info] Computed 307,354 rich equivalence classes for further processing; [2021-08-20 16:03:00.061] [jointLog] [info] Counted 46,363,434 total reads in the equivalence classes ; [2021-08-20 16:03:00.062] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2021-08-20 16:03:00.062] [jointLog] [warning] Found 149640 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2021-08-20 16:03:00.062] [jointLog] [info] Mapping rate = 4.01974%. [2021-08-20 16:03:00.062] [jointLog] [info] finished quantifyLibrary(); ```. And here is my `lib_format_counts.json`, which has 0s for the different potential libTypes and shows a very high rate of inconsi",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699:4150,Load,Loading,4150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699,1,['Load'],['Loading']
Performance,"be ignored.; [2022-03-27 05:24:09.395] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2022-03-27 05:24:09.395] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2022-03-27 05:24:09.395] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; [2022-03-27 05:24:09.395] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2022-03-27 05:24:09.395] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2022-03-27 05:34:26.966] [jointLog] [info] There is 1 library.; [2022-03-27 05:34:26.967] [jointLog] [info] Loading pufferfish index; [2022-03-27 05:34:26.967] [jointLog] [info] Loading dense pufferfish index.; [2022-03-27 05:34:27.433] [jointLog] [info] done; [2022-03-27 05:34:27.504] [jointLog] [info] Index contained 116,755 targets; [2022-03-27 05:34:27.540] [jointLog] [info] Number of decoys : 0; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch with a maximum of 7.74% zero probability fragments; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch with a maximum of 23.62% zero probability fragments; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch with a maximum of 9.60% zero probability fragments; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch with a maximum of 15.40% zero probability fragments; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch with a maximum of 25.48% zero probability fragments; [2022-03-27 05:46:41.460] [jointLog] [info] Thread saw mini-batch ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/763#issuecomment-1082597942:5355,Load,Loading,5355,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/763#issuecomment-1082597942,1,['Load'],['Loading']
Performance,"bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in the equivalence classes. [2016-03-31 14:13:24.480] [jointLog] [warning] Only 159824 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-03-31 14:13:24.480] [jointLog] [info] Mapping rate = 36.3942%. [2016-03-31 14:13:24.480] [jointLog] [info] finished quantifyLibrary(); [2016-03-31 14:13:24.480] [jointLog] [info] Starting optimizer; [2016-03-31 14:13:25.441] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-03-31 14:13:25.660] [jointLog] [info] iteration = 0 | max rel diff. = 13.7627; [2016-03-31 14:13:26.460] [jointLog] [info] iteration = 100 | max rel diff. = 0.100799; [2016-03-31 14:13:27.252] [jointLog] [info] iteration = 200 | max rel diff. = 0.0452885; [2016-03-31 14:13:28.046] [jointLog] [info] iteration = 300 | max rel diff. = 0.0323517; [2016-03-31 14:13:29.037] [jointLog] [info] iteration = 400 | max rel diff. = 0.0173087; [2016-03-31 14:13:29.842] [jointLog] [info] iteration = 500 | max rel diff. = 0.0173241; [2016-03-31 14:13:30.837] [jointLog] [info] iteration = 600 | max rel diff. = 0.0131171; [2016-03-31 14:13:31.633] [jointLog] [info] iteration = 700 | max rel diff. = 0.0117939; [2016-03-31 14:13:32.631] [jointLog] [info] iteration = 800 | max rel diff. = 0.0102536; [2016-03-31 14:13:32.724] [jointLog] [info] iteration = 813 | max rel diff. = 0.00845215; [2016-",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:2427,optimiz,optimizer,2427,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['optimiz'],['optimizer']
Performance,"bit on a few of @k3yavi's answers. 1&2) Yes; if you want to use SAF, you no longer need mashmap, as what you are essentially doing is treating the entire genome as a ""decoy"". As @k3yavi alludes, SA is still useful when you need to run in a very memory-constrained environment. After adopting the new [pufferfish-based](https://github.com/COMBINE-lab/pufferfish/tree/develop) index, the size of the transcriptome plush mashmap 2 decoys becomes considerably smaller than the previous size of the transcriptome in earlier versions of salmon (<= 0.15.0). However, depending on the organism, indexing the entire genome as decoy, even though it yields the best accuracy, does require a bit more memory, as specified in the release notes for the 0.99 betas and 1.0.0. 3) Yes; it is still possible to use `salmon index` without any decoy sequence. In this case, one can expect results similar to if you had aligned to the target transcriptome using Bowtie2. In this case, you perform indexing by simply not providing any `--decoy` flag to the `index` command. In that case, all of the records in the target fasta will be treated as valid and quantifiable targets. Of course, for reasons detailed in the pre-print --- the high _sensitivity_ of both Bowtie2 and selective-alignment --- we recommend including either mashmap-derived decoys or the organism's genome as a decoy whenever possible. . 4) Related to @k3yavi's response and my elaboration above: we have dropped quasi-mapping from 1.0.0 (though something akin to it may return in the future if there is sufficient demand and if the shortcomings described in the manuscript can be overcome). However, as I mention in part 3 above, this doesn't mean it's not possible to use v1.0.0 without an explicit decoy sequence. The `--decoy` flag of the indexing command is optional, not required. We will update this in the documentation making it more explicit. However, as @k3yavi points out, it is true that if you wish to use quasi-mapping and selective-alig",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390:1041,perform,perform,1041,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390,2,['perform'],['perform']
Performance,"bled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4358,Load,Loadable,4358,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"cal/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 609, in result_iterator; yield fs.pop().result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 446, in result; return self.__get_result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 391, in __get_result; raise self._exception; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 132, in <lambda>; subdir_query = lambda url: tuple(SubdirData(Channel(url), repodata_fn=repodata_fn).query(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/adapters.py"", line 413, in send; conn = ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:3556,load,load,3556,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['load'],['load']
Performance,"ce/BLBnew.txt). salmon quant -i ~/data/genome/MSU7_transcript.index -l IU \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_IU_old/${line} --seqBias --gcBias. The EffectiveLength is again the same (250) for all genes across all samples:; Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250 28.8836 527.392; LOC_Os01g01010.2 2218 250 1.84062 33.6083; LOC_Os01g01019.1 1127 250 0.0547668 1; LOC_Os01g01030.1 2464 250 4.43611 81; LOC_Os01g01040.4 1524 250 0.941635 17.1935; LOC_Os01g01040.1 2508 250 11.5632 211.135; LOC_Os01g01040.2 2482 250 8.02082 146.454; LOC_Os01g01040.3 2583 250 8.55554 156.218; LOC_Os01g01050.1 2039 250 17.2333 314.667. The mapping rate is again similar for all samples:; [2019-03-04 04:42:18.872] [jointLog] [info] parsing read library format; [2019-03-04 04:42:18.872] [jointLog] [info] There is 1 library.; [2019-03-04 04:42:18.928] [jointLog] [info] Loading Quasi index; [2019-03-04 04:42:18.929] [jointLog] [info] Loading 32-bit quasi index; [2019-03-04 04:42:28.958] [jointLog] [info] done; [2019-03-04 04:42:28.958] [jointLog] [info] Index contained 66153 targets; [2019-03-04 04:44:08.443] [fileLog] [info]; At end of round 0; ==================; Observed 18861231 total fragments (18861231 in most recent round). [2019-03-04 04:44:08.442] [jointLog] [info] Computed 48502 rich equivalence classes for further processing; [2019-03-04 04:44:08.442] [jointLog] [info] Counted 17308442 total reads in the equivalence classes; [2019-03-04 04:44:08.450] [jointLog] [info] Mapping rate = 91.7673%. [2019-03-04 04:44:08.450] [jointLog] [info] finished quantifyLibrary(). **For version 0.12**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256:1651,Load,Loading,1651,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256,1,['Load'],['Loading']
Performance,"cessed 74 Million barcodes. [2018-12-12 15:08:51.135] [alevinLog] [info] Done barcode density calculation.; [2018-12-12 15:08:51.135] [alevinLog] [info] # Barcodes Used: 74376522 / 74376522.; [2018-12-12 15:08:51.141] [alevinLog] [info] Done importing white-list Barcodes; [2018-12-12 15:08:51.141] [alevinLog] [warning] Skipping 1 Barcodes with 0 reads; Assuming this is the required behavior.; [2018-12-12 15:08:51.141] [alevinLog] [info] Total 95 white-listed Barcodes; [2018-12-12 15:08:51.144] [alevinLog] [info] Done populating Z matrix; [2018-12-12 15:08:51.146] [alevinLog] [info] Done indexing Barcodes; [2018-12-12 15:08:51.146] [alevinLog] [info] Total Unique barcodes found: 4096; [2018-12-12 15:08:51.146] [alevinLog] [info] Used Barcodes except Whitelist: 1864; [2018-12-12 15:08:51.272] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-12 15:08:51.272] [alevinLog] [info] parsing read library format; [2018-12-12 15:08:51.375] [stderrLog] [info] Loading Suffix Array ; [2018-12-12 15:08:51.272] [jointLog] [info] There is 1 library.; [2018-12-12 15:08:51.375] [jointLog] [info] Loading Quasi index; [2018-12-12 15:08:51.375] [jointLog] [info] Loading 32-bit quasi index; [2018-12-12 15:09:10.216] [stderrLog] [info] Loading Transcript Info ; [2018-12-12 15:09:15.719] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-12 15:09:16.330] [stderrLog] [info] There were 205,870 set bits in the bit array; [2018-12-12 15:09:16.343] [stderrLog] [info] Computing transcript lengths; [2018-12-12 15:09:16.343] [stderrLog] [info] Waiting to finish loading hash; [2018-12-12 15:09:21.460] [stderrLog] [info] Done loading index; [2018-12-12 15:09:21.460] [jointLog] [info] done; [2018-12-12 15:09:21.460] [jointLog] [info] Index contained 205,870 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ..............; processed 74 Million fragments; hits: 111594303, hits per frag: 1.50848[2018-12-12 15:12:07.66",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:4189,Load,Loading,4189,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['Load'],['Loading']
Performance,"cessing barcodes files (if Present) . ; processed 31 Million barcodes. [2019-06-04 16:34:42.492] [alevinLog] [info] Done barcode density calculation.; [2019-06-04 16:34:42.492] [alevinLog] [info] # Barcodes Used: 31478936 / 31478936.; [2019-06-04 16:34:42.499] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-04 16:34:42.499] [alevinLog] [info] Done True Barcode Sampling; [2019-06-04 16:34:42.501] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 16:34:42.503] [alevinLog] [info] Done populating Z matrix; [2019-06-04 16:34:42.503] [alevinLog] [info] Done indexing Barcodes; [2019-06-04 16:34:42.503] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-04 16:34:42.503] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 16:34:43.373] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 16:34:43.208] [jointLog] [info] There is 1 library.; [2019-06-04 16:34:43.372] [jointLog] [info] Loading Quasi index; [2019-06-04 16:34:43.372] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 16:34:43.208] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 16:34:43.208] [alevinLog] [info] parsing read library format; [2019-06-04 16:34:44.226] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 16:34:44.464] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 16:34:44.501] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 16:34:44.526] [stderrLog] [info] Computing transcript lengths; [2019-06-04 16:34:44.526] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 16:34:53.359] [stderrLog] [info] Done loading index; [2019-06-04 16:34:53.359] [jointLog] [info] done; [2019-06-04 16:34:53.359] [jointLog] [info] Index contained 136,011 targets; [2019-06-04 16:34:53.523] [alevinLog] [error] Barcode not found in frequency table; ```. Is there any way to avoid using barcodes, or to overcome this error. ; Thanks.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:5799,Load,Loading,5799,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,5,"['Load', 'load']","['Loading', 'loading']"
Performance,"ckoohash_map<Key, T, Hash, KeyEqual, Allocator, SLOT_PER_BUCKET>::upsert(K&&, F, Args&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>; Args = {int}; Key = std::__cxx11::basic_string<char>; T = unsigned int; Hash = BarcodeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #12 0x00000000007a69ac in cuckoo_fast_double<std::integral_constant<bool, false>, std::integral_constant<bool, true> >; (current_hp=<optimized out>, this=0x7fffffffc520) at /u/user/tmp/salmon/include/cuckoohash_map.hh:1583; #13 cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_insert_loop<std::integral_constant<bool, false>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=this@entry=0x7fffffffc520, hv=..., b=..., key=...); at /u/user/tmp/salmon/include/cuckoohash_map.hh:1086; #14 0x00000000007a8540 in uprase_fn<std::__cxx11::basic_string<char>&, cuckoohash_map<Key, T, Hash, KeyEqual, A",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:9567,optimiz,optimized,9567,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,"ckoohash_map<Key, T, Hash, KeyEqual, Allocator, SLOT_PER_BUCKET>::upsert(K&&, F, Args&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>; Args = {int}; Key = std::__cxx11::basic_string<char>; T = unsigned int; Hash = BarcodeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #15 upsert<std::__cxx11::basic_string<char>&, densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:554; #16 densityCalculator<alevin::protocols::Chromium> (parser=<optimized out>, aopt=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:11529,optimiz,optimized,11529,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,2,['optimiz'],['optimized']
Performance,"command ] => quant ; ### [ index ] => { /data2/csijcs/hg38/hg38.transcriptome.index }; ### [ libType ] => { A }; ### [ mates1 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R1_001.fastq.gz }; ### [ mates2 ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/RHM5942/RHM5942_R2_001.fastq.gz }; ### [ threads ] => { 32 }; ### [ output ] => { /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942/logs; [2018-07-27 16:24:55.658] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-27 16:24:55.658] [jointLog] [info] parsing read library format; [2018-07-27 16:24:55.658] [jointLog] [info] There is 1 library.; [2018-07-27 16:25:01.242] [jointLog] [info] Loading Quasi index; [2018-07-27 16:25:01.242] [jointLog] [info] Loading 32-bit quasi index; [2018-07-27 16:25:01.243] [stderrLog] [info] Loading Suffix Array ; [2018-07-27 16:25:42.630] [stderrLog] [info] Loading Transcript Info ; [2018-07-27 16:25:45.683] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-27 16:25:47.834] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-27 16:25:48.128] [stderrLog] [info] Computing transcript lengths; [2018-07-27 16:25:48.200] [stderrLog] [info] Waiting to finish loading hash; [2018-07-27 16:25:48.331] [stderrLog] [info] Done loading index; [2018-07-27 16:25:48.331] [jointLog] [info] done; [2018-07-27 16:25:48.331] [jointLog] [info] Index contained 203027 targets. processed 239500000 fragmentsintLog] [info] Automatically detected most likely library type as ISR; hits: 651420499, hits per frag: 2.72282[2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.70% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898:1319,Load,Loading,1319,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898,1,['Load'],['Loading']
Performance,"command ] => quant; \#\#\# [ index ] => { salmon010.index.all_combined }; \#\#\# [ libType ] => { A }; \#\#\# [ mates1 ] => { R1.fastq.gz }; \#\#\# [ mates2 ] => { R2.fastq.gz }; \#\#\# [ posBias ] => { }; \#\#\# [ gcBias ] => { }; \#\#\# [ seqBias ] => { }; \#\#\# [ useVBOpt ] => { }; \#\#\# [ validateMappings ] => { }; \#\#\# [ output ] => { processed_salmon0100_k31_allcombined/R }; Logs will be written to processed_salmon0100_k31_allcombined/R/logs; [2018-05-31 16:54:42.310] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-05-31 16:54:42.310] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2018-05-31 16:54:42.310] [jointLog] [info] parsing read library format; [2018-05-31 16:54:42.310] [jointLog] [info] There is 1 library.; [2018-05-31 16:54:42.480] [jointLog] [info] Loading Quasi index; [2018-05-31 16:54:42.501] [jointLog] [info] Loading 32-bit quasi index; [2018-05-31 16:54:42.501] [stderrLog] [info] Loading Suffix Array; [2018-05-31 16:55:01.293] [stderrLog] [info] Loading Transcript Info; [2018-05-31 16:55:06.428] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-05-31 16:55:07.107] [stderrLog] [info] There were 310732 set bits in the bit array; [2018-05-31 16:55:07.158] [stderrLog] [info] Computing transcript lengths; [2018-05-31 16:55:07.159] [stderrLog] [info] Waiting to finish loading hash; [2018-05-31 16:55:25.973] [jointLog] [info] done; [2018-05-31 16:55:25.973] [jointLog] [info] Index contained 310732 targets; [2018-05-31 16:55:25.973] [stderrLog] [info] Done loading index. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 224580543, hits per frag: 3.35031[2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:1235,Load,Loading,1235,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['Load'],['Loading']
Performance,"common/modules/el8/x86_64/software/${package}/${pversion}-CentOS-vanilla; THELUA=/usr/common/modules/el8/x86_64/modules/all/${package}/${pversion}-CentOS-vanilla.lua; cd /usr/common/src; git clone -b develop https://github.com/COMBINE-lab/salmon.git; mv ${package} ${package}-${pversion}; cd ${package}-${pversion}; cp CMakeLists.txt CMakeLists.txt.dist; cat >mypatch <<'EOD'; --- CMakeLists.txt.dist	2020-04-21 22:31:07.000000000 -0700; +++ CMakeLists.txt	2020-06-09 14:55:02.733885772 -0700; @@ -419,6 +419,10 @@; find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); +message(""Forcing Boost_FOUND to TRUE""); +set(Boost_FOUND TRUE); +set(Boost_LIBRARY_DIRS ""/usr/lib64/boost169""); +set(Boost_LIBRARIES -lboost_iostreams -lboost_filesystem -lboost_system -lboost_timer -lboost_chrono -lboost_program_options); message(""Boost_FOUND = ${Boost_FOUND}""); endif(); ; EOD; patch -p0 <mypatch; module load cmake; module load io_lib; module load libgff; module load libtbb; # module load pufferfish #ignored even if set; mkdir build; cd build; cmake \; -DCMAKE_INSTALL_PREFIX=$TOPDIR \; -DSTADEN_ROOT=$ROOT_IO_LIB \; -DGFF_ROOT=$ROOT_LIBGFF \; -DTBB_ROOT=$ROOT_LIBTBB \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_23.log; make -j 4 2>&1 | tee build_2020_06_23.log; make test # both passed; make install 2>&1 | tee install_2020_06_23.log; cd ..; cp sample_data.tgz $TOPDIR; module_generate_from_directory.sh \; $package \; $pversion \; CentOS/vanilla \; $TOPDIR \; ""Fast highly-accurate, transcript-level quantification estimates from RNA-seq data."" \; ""https://github.com/COMBINE-lab/salmon""; ```. When the following commands are run in an XFCE4 terminal or an uxterm (black text, white background) using the sample data provid",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/541:1150,load,load,1150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/541,5,['load'],['load']
Performance,"core/solve.py"", line 463, in _collect_all_metadata; index, r = self._prepare(prepared_specs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 1058, in _prepare; reduced_index = get_reduced_index(self.prefix, self.channels,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/index.py"", line 288, in get_reduced_index; new_records = SubdirData.query_all(spec, channels=channels, subdirs=subdirs,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 140, in query_all; result = tuple(concat(executor.map(subdir_query, channel_urls))); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 609, in result_iterator; yield fs.pop().result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 446, in result; return self.__get_result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 391, in __get_result; raise self._exception; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 132, in <lambda>; subdir_query = lambda url: tuple(SubdirData(Channel(url), repodata_fn=repodata_fn).query(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_re",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:2877,concurren,concurrent,2877,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['concurren'],['concurrent']
Performance,"cs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/RHM5942/logs; [2018-07-27 16:24:55.658] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-27 16:24:55.658] [jointLog] [info] parsing read library format; [2018-07-27 16:24:55.658] [jointLog] [info] There is 1 library.; [2018-07-27 16:25:01.242] [jointLog] [info] Loading Quasi index; [2018-07-27 16:25:01.242] [jointLog] [info] Loading 32-bit quasi index; [2018-07-27 16:25:01.243] [stderrLog] [info] Loading Suffix Array ; [2018-07-27 16:25:42.630] [stderrLog] [info] Loading Transcript Info ; [2018-07-27 16:25:45.683] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-27 16:25:47.834] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-27 16:25:48.128] [stderrLog] [info] Computing transcript lengths; [2018-07-27 16:25:48.200] [stderrLog] [info] Waiting to finish loading hash; [2018-07-27 16:25:48.331] [stderrLog] [info] Done loading index; [2018-07-27 16:25:48.331] [jointLog] [info] done; [2018-07-27 16:25:48.331] [jointLog] [info] Index contained 203027 targets. processed 239500000 fragmentsintLog] [info] Automatically detected most likely library type as ISR; hits: 651420499, hits per frag: 2.72282[2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.70% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.74% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.76% zero probability fragments; [2018-07-27 16:51:47.947] [jointLog] [info] Thread saw mini-batch with a maximum of 1.72% zero probability fragments; [2018-07-27 16:5",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898:1854,load,loading,1854,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898,1,['load'],['loading']
Performance,"d 52 Million fragmentsvinLog] [info] parsing read library format; > hits: 0, hits per frag: 0; > ; > [2020-06-03 13:55:42.905] [alevinLog] [info] Starting optimizer; > ; > [2020-06-03 13:55:42.931] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.931] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0.00 UMI after deduplicating.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 BiDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 UniDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [warning] Skipped 50091 barcodes due to No mapped read; > [2020-06-03 13:55:42.934] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-03 13:55:42.940] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 200.Can't performing whitelisting; Skipping; > [2020-06-03 13:55:42.940] [alevinLog] [info] Finished optimizer; > `. I also tried . `salmon alevin -l ISR --chromium --featureStart 19 --featureLength 21 --tgMap guide_to_gene.tsv`. But I get the following output. > `; > [2020-06-03 13:47:17.330] [alevinLog] [info] Found 64 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); > [2020-06-03 13:47:17.330] [alevinLog] [info] Filled with 64 txp to gene entries ; > [2020-06-03 13:47:17.330] [alevinLog] [info] Found all transcripts to gene mappings; > [2020-06-03 13:47:17.336] [alevinLog] [info] Processing barcodes files (if Present) ; > ; > processed 52 Million barcodes; > ; > [2020-06-03 13:48:30.047] [alevinLog] [info] Done barcode density calculation.; > [2020-06-03 13:48:30.047] [alevinLog] [info] # Barcodes Used: 52200250 / 52200250.; > [2020-06-03 13:48:33.285] [alevinLog] [info] Knee found left boundary at 1174 ; > [2020-06-03 13:48:34.501] [alevinLog] [info] Gauss Corrected Boundary at 148 ; > [2020-06-03 13:48:34.501] [alevinLog] [info] Learned InvCov: 985.9",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531:3761,optimiz,optimizer,3761,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531,1,['optimiz'],['optimizer']
Performance,"d in the log) that there was a mapping bias (i.e. that the data look stranded). Specifically, here is what I get when I run (a close approximation of) your command. ```; $salmon quant --index Salmon_index_hg38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --useVBOpt --output test_quant --; numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:38:54.413] [jointLog] [info] parsing read library format; [2016-12-13 22:38:54.413] [jointLog] [info] There is 1 library.; [2016-12-13 22:38:56.240] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:38:56.240] [jointLog] [info] Loading Quasi index; [2016-12-13 22:38:56.240] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:39:01.268] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence c",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:1375,Load,Loading,1375,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,1,['Load'],['Loading']
Performance,"d libtbb; # module load pufferfish #ignored even if set; mkdir build; cd build; cmake \; -DCMAKE_INSTALL_PREFIX=$TOPDIR \; -DSTADEN_ROOT=$ROOT_IO_LIB \; -DGFF_ROOT=$ROOT_LIBGFF \; -DTBB_ROOT=$ROOT_LIBTBB \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_23.log; make -j 4 2>&1 | tee build_2020_06_23.log; make test # both passed; make install 2>&1 | tee install_2020_06_23.log; cd ..; cp sample_data.tgz $TOPDIR; module_generate_from_directory.sh \; $package \; $pversion \; CentOS/vanilla \; $TOPDIR \; ""Fast highly-accurate, transcript-level quantification estimates from RNA-seq data."" \; ""https://github.com/COMBINE-lab/salmon""; ```. When the following commands are run in an XFCE4 terminal or an uxterm (black text, white background) using the sample data provided in the distribution:. ```; gunzip -c sample_data.tgz | (cd /tmp; tar -xf -); module load salmon; cd /tmp/sample_data; salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type puff; salmon quant -i sample_salmon_fmd_index \; -l IU \; -1 reads_1.fastq -2 reads_2.fastq \; -o sample_salmon_fmd_quant. ```; the output line:. ```; [2020-06-23 13:58:50.657] [jointLog] [warning] Only 10000 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings.; ```. is emitted in yellow. Yellow on white is nearly impossible to read. The rest of the text is black (as it should be). If the final command is instead:. ```; salmon quant -i sample_salmon_fmd_index \; -l IU \; -1 reads_1.fastq -2 reads_2.fastq \; -o sample_salmon_fmd_quant >/tmp/sq.log 2>&1. ```. There are no embedded control codes in the sq.log file. Changing the terminal to white text on black background also results in that line being colored yellow. Yellow on black is easy enough to read. I understand that normally this is run in a script ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/541:2199,load,load,2199,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/541,1,['load'],['load']
Performance,"d parsing thread . . . ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"" ; Closed all files . . . ; Emptied frag queue. . . ; Emptied Alignment Group Pool. . ; Emptied Alignment Group Queue. . . done; [2023-01-29 16:02:59.265] [jointLog] [info] . Completed first pass through the alignment file.; Total # of mapped reads : 13423395; # of uniquely mapped reads : 13423394; # ambiguously mapped reads : 1. [2023-01-29 16:02:59.271] [jointLog] [info] Computed 169 rich equivalence classes for further processing; [2023-01-29 16:02:59.272] [jointLog] [info] Counted 13,423,395 total reads in the equivalence classes ; [2023-01-29 16:02:59.272] [jointLog] [info] starting optimizer; [2023-01-29 16:02:59.274] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-01-29 16:02:59.274] [jointLog] [info] iteration = 0 | max rel diff. = 237.557; [2023-01-29 16:02:59.282] [jointLog] [info] iteration = 100 | max rel diff. = 3.78077e-16; [2023-01-29 16:02:59.282] [jointLog] [info] finished optimizer; [2023-01-29 16:02:59.282] [jointLog] [info] writing output. ```. Output for failure case - 48 files:. ```; salmon quant -t /rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas -l A -a $file_list -o ../SalmonQuantFiles; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.9.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { /rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas }; # [ libType ] => { A }; # [ alignments ] => { apex_infe_t1_rep1_S29_R1_001Aligned.out.bam apex_infe_t1_rep3_S53_R1_001Aligned.out.bam apex_infe_t2_rep1_S30_R1_001Aligned.out.bam apex_infe_t2_rep3_S54_R1_001Aligned.out.bam apex_infe_t3_rep1_S31_R1_001Aligned.out.bam apex_infe_t3_rep3_S55_R1_001Aligned.out.bam apex_infe_t4_rep1_S32_R1_001Aligned.out.bam apex_infe_t4_rep3_S56_R1_001Aligned.out.bam apex_infe_t5_rep1_S33_R1_001Aligned.out.bam apex_infe_t5_rep3_S57_R1_001Aligned.out.bam apex_infe_t6_rep1_S34_R1_00",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/825:4029,optimiz,optimizer,4029,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/825,1,['optimiz'],['optimizer']
Performance,"d sequences do not retain the names of the GRanges used to subset them therefore my code could not identify minus strand transcripts and get their reverse complements. Apologies for any confusion!; ---; Thank you very much for the prompt response and for taking the time to validate Salmon's functionality. Indeed, Salmon is not the problem here. After taking a closer look at my transcript fasta, I noticed a problem with it, as you suggested. Long story short, half the premature transcripts had the wrong orientation and complementarity. Long story:. Oddly, the mature sequences were fine even though I used an identical approach to subset premature and mature transcripts from the genome reference!. Briefly my approach relied on three R packages rtracklayer, GenomicRanges, and Biostrings. 1. I used rtracklayer to load a gtf formatted exon annotations acquired from Ensembl. The file is loaded as a GenomicRanges object which essentially describes the locus of each exon (the transcribed strand [+ or -], chromosome, start and end positions relative to the reference strand) and its associated gene and transcript. 2. I used the GRanges object to generate pre-RNA coordinates that span all exons of a transcript. 3. I loaded the reference genome fasta acquired from Ensembl using the Biostrings package. GRanges and Biostrings are tightly integrated, allowing me to subset sequences from a Biostrings object using the GRanges object. **I believe the problem lies here.** It appears that when subsetting the mature exonic sequences from Biostrings using GRanges, the strand field in the GRanges object **was not** utilized. I.e., I needed to get the reverse complement of the extracted sequences for transcripts on the minus strand. I had done that and assumed that this behaviour would be consistent. However, for reasons I have not been able to pinpoint (potentially a bug), the strand information **was accounted for** when I used GRanges to subset the premature sequences. I **did not** need",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:1062,load,loaded,1062,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['load'],['loaded']
Performance,"d }; \#\#\# [ libType ] => { A }; \#\#\# [ mates1 ] => { R1.fastq.gz }; \#\#\# [ mates2 ] => { R2.fastq.gz }; \#\#\# [ posBias ] => { }; \#\#\# [ gcBias ] => { }; \#\#\# [ seqBias ] => { }; \#\#\# [ useVBOpt ] => { }; \#\#\# [ validateMappings ] => { }; \#\#\# [ output ] => { processed_salmon0100_k31_allcombined/R }; Logs will be written to processed_salmon0100_k31_allcombined/R/logs; [2018-05-31 16:54:42.310] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-05-31 16:54:42.310] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2018-05-31 16:54:42.310] [jointLog] [info] parsing read library format; [2018-05-31 16:54:42.310] [jointLog] [info] There is 1 library.; [2018-05-31 16:54:42.480] [jointLog] [info] Loading Quasi index; [2018-05-31 16:54:42.501] [jointLog] [info] Loading 32-bit quasi index; [2018-05-31 16:54:42.501] [stderrLog] [info] Loading Suffix Array; [2018-05-31 16:55:01.293] [stderrLog] [info] Loading Transcript Info; [2018-05-31 16:55:06.428] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-05-31 16:55:07.107] [stderrLog] [info] There were 310732 set bits in the bit array; [2018-05-31 16:55:07.158] [stderrLog] [info] Computing transcript lengths; [2018-05-31 16:55:07.159] [stderrLog] [info] Waiting to finish loading hash; [2018-05-31 16:55:25.973] [jointLog] [info] done; [2018-05-31 16:55:25.973] [jointLog] [info] Index contained 310732 targets; [2018-05-31 16:55:25.973] [stderrLog] [info] Done loading index. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 224580543, hits per frag: 3.35031[2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:1308,Load,Loading,1308,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['Load'],['Loading']
Performance,"d. Incompatible fragments will be ignored.; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-05 09:19:06.171] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-05 09:19:06.171] [jointLog] [info] parsing read library format; [2020-05-05 09:19:06.171] [jointLog] [info] There is 1 library.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading pufferfish index; [2020-05-05 09:19:06.278] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 30.609 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 1.3312 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.6842 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 20.002 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 11.467 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 9.5665 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 4.3912 ms; -----------------------------------------; Exception : [std::bad_alloc]; salmon quant was invoked improperly.; For usage",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021:1933,Load,Loading,1933,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021,1,['Load'],['Loading']
Performance,"d.PE.fastq IL100054706.R2.trimmed.PE.fastq IL100062514.R2.trimmed.PE.fastq }; ### [ validateMappings ] => { }; ### [ threads ] => { 12 }; ### [ output ] => { salmon_out }; Logs will be written to salmon_out/logs; [2019-08-27 11:44:12.350] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-08-27 11:44:12.350] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-08-27 11:44:12.350] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-08-27 11:44:12.350] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-08-27 11:44:12.350] [jointLog] [info] parsing read library format; [2019-08-27 11:44:12.350] [jointLog] [info] There is 1 library.; [2019-08-27 11:44:12.396] [stderrLog] [info] Loading Suffix Array; [2019-08-27 11:44:12.395] [jointLog] [info] Loading Quasi index; [2019-08-27 11:44:12.395] [jointLog] [info] Loading 32-bit quasi index; [2019-08-27 11:44:13.913] [stderrLog] [info] Loading Transcript Info; [2019-08-27 11:44:14.720] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-08-27 11:44:14.809] [stderrLog] [info] There were 583,596 set bits in the bit array; [2019-08-27 11:44:14.859] [stderrLog] [info] Computing transcript lengths; [2019-08-27 11:44:14.860] [stderrLog] [info] Waiting to finish loading hash; [2019-08-27 11:44:23.916] [stderrLog] [info] Done loading index; [2019-08-27 11:44:23.916] [jointLog] [info] done; [2019-08-27 11:44:23.916] [jointLog] [info] Index contained 583,596 targets. processed 978,500,000 fragments; hits: 2,484,589,998, hits per frag: 2.53933terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted. ```. **Desktop (please complete the following information):**; - OS: RHEL 7.4",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/426:2696,Load,Loading,2696,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/426,7,"['Load', 'load']","['Loading', 'loading']"
Performance,"d1c4adaacc6b23ad10cc00; seqHash 512 : 29ef1f67a252009538c30d22ab52f1aae09605f9cd6eb731cb5866275eeb4f50917c409fdac10c5da1a6396687c8d3da64ab33dc7cb426dba961639385ce7040; nameHash 256 : 120179531963e6930022681ba9f4226ad0871ca0f6ae01f6c16be496fee9e03f; nameHash 512 : 3ba5b8d011fe981bf67b581cb6d3d83ae1b8d7885c868b7ab634bbf86448889fcc246b9e65374b79270f6d11d5a71ac6335910fcda2b1b9e86bcafe1ae3ae89f; [2020-07-04 15:10:22.800] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers; [2020-07-04 15:11:07.094] [puff::index::jointLog] [info] ntHll estimated 2630714644 distinct k-mers, setting filter size to 2^36; error: Can't open a temporary file; error: Can't read the input file; [2020-07-04 15:34:24.273] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory /scratch/jl2e19/salmon_index; size = 0; -----------------------------------------; | Loading contigs | Time = 84.402 us; -----------------------------------------; size = 0; -----------------------------------------; | Loading contig boundaries | Time = 30.909 us; -----------------------------------------; Number of ones: 0; Number of ones per inventory item: 512; Inventory entries filled: 1; [2020-07-04 15:34:24.273] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2020-07-04 15:34:24.273] [puff::index::jointLog] [info] contig count for validation: 0; [2020-07-04 15:34:24.274] [puff::index::jointLog] [info] Total # of Contigs : 0; [2020-07-04 15:34:24.274] [puff::index::jointLog] [info] Total # of numerical Contigs : 0; [2020-07-04 15:34:24.274] [puff::index::jointLog] [info]; Total # of segments we have position for : 0; [2020-07-04 15:34:24.277] [puff::index::jointLog] [info] total contig vec entries 0; [2020-07-04 15:34:24.277] [puff::index::jointLog] [info] bits per offset entry 0; [2020-07-04 15:34:24.277] [puff::index::jointLog] [info] there were 0 equivalence classes; [2020-07-04 15:34:24.278] [puff::index::jointLog] [",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/543:16403,Load,Loading,16403,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/543,1,['Load'],['Loading']
Performance,"dence) barcodes; [2019-06-06 19:24:55.688] [alevinLog] [info] Done True Barcode Sampling; [2019-06-06 19:24:55.690] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-06 19:24:55.692] [alevinLog] [info] Done populating Z matrix; [2019-06-06 19:24:55.692] [alevinLog] [info] Done indexing Barcodes; [2019-06-06 19:24:55.692] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-06 19:24:55.692] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --valid",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:1506,Load,Loading,1506,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['Load'],['Loading']
Performance,"des Used: 267451749 / 267548197.; [2018-12-06 11:16:52.732] [alevinLog] [info] Knee found left boundary at 11955 ; [2018-12-06 11:16:54.977] [alevinLog] [info] Gauss Corrected Boundary at 4345 ; [2018-12-06 11:16:54.977] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-12-06 11:16:54.985] [alevinLog] [info] Total 31.0106% reads will be thrown away because of noisy Cellular barcodes.; [2018-12-06 11:16:54.985] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-06 11:16:55.059] [alevinLog] [info] Done True Barcode Sampling; [2018-12-06 11:16:55.395] [alevinLog] [info] Done populating Z matrix; [2018-12-06 11:16:55.453] [alevinLog] [info] Done indexing Barcodes; [2018-12-06 11:16:55.453] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-06 11:16:55.453] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6047,Load,Loading,6047,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['Load'],['Loading']
Performance,"develop branch; (the release candidate for 1.3.0), and I got the following time (used 8; threads, so timing is not directly comparable). ```; 4604.57user 43.64system 9:24.15elapsed 823%CPU; ```. The whole log is. ```; [2020-06-15 23:51:54.747] [jointLog] [info] setting maxHashResizeThreads to; 8; [2020-06-15 23:51:54.747] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-15 23:51:54.747] [jointLog] [info] parsing read library format; [2020-06-15 23:51:54.747] [jointLog] [info] There is 1 library.; [2020-06-15 23:51:54.814] [jointLog] [info] Loading pufferfish index; [2020-06-15 23:51:54.814] [jointLog] [info] Loading dense pufferfish index.; [2020-06-15 23:51:55.555] [jointLog] [info] done; [2020-06-15 23:51:55.555] [jointLog] [info] Index contained 116,248 targets; [2020-06-15 23:51:55.588] [jointLog] [info] Number of decoys : 0; [2020-06-16 00:00:59.666] [jointLog] [info] Computed 344,764 rich; equivalence classes for further processing; [2020-06-16 00:00:59.666] [jointLog] [info] Counted 12,956,134 total reads; in the equivalence classes; [2020-06-16 00:00:59.673] [jointLog] [warning] 0.0736383% of fragments were; shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a; smaller k.; The minimum read size found was 1. [2020-06-16 00:00:59.673] [jointLog] [info] Number of mappings discarded; because of alignment score : 134,091,887; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments entirely; discarded because of alignment score : 2,429,390; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments discarded; because t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228:1056,Load,Loading,1056,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228,2,['Load'],['Loading']
Performance,"ds you do, but here is what I get when using this pre-compiled binary on the 64-bit index (this is a small read set from single-cell data, which is why the total # of reads is so small). ```; rob@feynman:/mnt/scratch3/rob/JoshTest$ ~/SoftwareStaging/salmon/scripts/SalmonBeta-0.6.5-pre_CentOS5/bin/salmon quant -p 15 -i salmon_index -l IU -1 ../strange_peak/19232_1_1.fastq -2 ../strange_peak/19232_1_2.fastq -o quant_binary; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 15 }; # [ index ] => { salmon_index }; # [ libType ] => { IU }; # [ mates1 ] => { ../strange_peak/19232_1_1.fastq }; # [ mates2 ] => { ../strange_peak/19232_1_2.fastq }; # [ output ] => { quant_binary }; Logs will be written to quant_binary/logs; there is 1[2016-03-31 14:05:14.184] [jointLog] [info] parsing read library format; lib; Loading 64-bit quasi index[2016-03-31 14:05:14.266] [stderrLog] [info] Loading Suffix Array; [2016-03-31 14:05:14.266] [jointLog] [info] Loading Quasi index. [2016-03-31 14:07:58.647] [stderrLog] [info] Loading Transcript Info; [2016-03-31 14:08:59.703] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-31 14:09:06.744] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in the equivalence classes. [2016-03-31 14:13:24.480] [jointLog] [warning] Only 159824 fragments were mapped, but the number of ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:1114,Load,Loading,1114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['Load'],['Loading']
Performance,"ds/Trimmed/P2-5-11_221020_L002_R2.fastq.gz }; ### [ threads ] => { 100 }; ### [ validateMappings ] => { }; ### [ output ] => { salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant }; Logs will be written to salmon_out/P2-45-54_221020_L002_R1.fastq.gz_quant/logs; [2023-08-27 19:59:26.866] [jointLog] [info] setting maxHashResizeThreads to 100; [2023-08-27 19:59:26.866] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-08-27 19:59:26.866] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-08-27 19:59:26.866] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-08-27 19:59:26.866] [jointLog] [info] parsing read library format; [2023-08-27 19:59:26.866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; ---------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:10124,Load,Loading,10124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"e = 0.590918%. ```. and then this after processing the cells:; ```; [2018-07-24 10:56:23.180] [alevinLog] [info] Total 21135 UMI after deduplicating.; [2018-07-24 10:56:23.180] [alevinLog] [warning] Skipped 4 barcodes due to No mapped read; [2018-07-24 10:56:23.213] [alevinLog] [info] Clearing EqMap; Might take some time.; [2018-07-24 10:56:23.230] [alevinLog] [info] Starting Import of the gene count matrix.; [2018-07-24 10:56:23.743] [alevinLog] [info] Done Importing gene count matrix for dimension 290x57964; [2018-07-24 10:56:23.743] [alevinLog] [info] Starting dumping cell v gene counts in csv format; [2018-07-24 10:56:29.089] [alevinLog] [info] Finished dumping csv counts; [2018-07-24 10:56:29.089] [alevinLog] [info] Starting white listing; [2018-07-24 10:56:29.090] [alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2018-07-24 10:56:29.090] [alevinLog] [info] Total 290 barcodes found; [2018-07-24 10:56:29.090] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2018-07-24 10:56:29.090] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2018-07-24 10:56:29.090] [alevinLog] [info] Starting to make feature Matrix; [2018-07-24 10:56:29.354] [alevinLog] [info] Done making regular featues; [2018-07-24 10:56:29.354] [alevinLog] [info] Done making feature Matrix; [2018-07-24 10:56:29.359] [alevinLog] [info] Finished white listing; [2018-07-24 10:56:29.371] [alevinLog] [info] Finished optimizer; ```. Other info:; Salmon v0.11.0 - downloaded binary from Github; I used Gencode 28 for the transcriptome; read files: https://www.ncbi.nlm.nih.gov/sra/SRX2676721[accn]. OS: CentOS; version: 2.6.32-696.23.1.el6.centos.plus.x86_64; LSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch; Distributor ID:	CentOS; Description:	CentOS release 6.9 (Final); Release:	6.9; Codename:	Final",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:5970,optimiz,optimizer,5970,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['optimiz'],['optimizer']
Performance,"e as U; processed 37,000,000 fragments; hits: 117,167,504; hits per frag: 3.16785. [2021-09-20 16:24:48.269] [jointLog] [info] Computed 309,226 rich equivalence classes for further processing; [2021-09-20 16:24:48.269] [jointLog] [info] Counted 34,252,402 total reads in the equivalence classes ; [2021-09-20 16:24:48.274] [jointLog] [info] Number of mappings discarded because of alignment score : 13,534,931; [2021-09-20 16:24:48.274] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 627,298; [2021-09-20 16:24:48.274] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 340,039; [2021-09-20 16:24:48.274] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0; [2021-09-20 16:24:48.274] [jointLog] [info] Mapping rate = 91.4927%. [2021-09-20 16:24:48.274] [jointLog] [info] finished quantifyLibrary(); [2021-09-20 16:24:48.279] [jointLog] [info] Starting optimizer; [2021-09-20 16:24:48.402] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-09-20 16:24:48.422] [jointLog] [info] iteration = 0 | max rel diff. = 9200.26; [2021-09-20 16:24:49.989] [jointLog] [info] iteration = 100 | max rel diff. = 17.4012; [2021-09-20 16:24:51.518] [jointLog] [info] iteration = 200 | max rel diff. = 19.9377; [2021-09-20 16:24:53.017] [jointLog] [info] iteration = 300 | max rel diff. = 14.738; [2021-09-20 16:24:54.590] [jointLog] [info] iteration = 400 | max rel diff. = 8.91734; [2021-09-20 16:24:56.130] [jointLog] [info] iteration = 500 | max rel diff. = 1.26201; [2021-09-20 16:24:57.628] [jointLog] [info] iteration = 600 | max rel diff. = 0.155034; [2021-09-20 16:24:59.130] [jointLog] [info] iteration = 700 | max rel diff. = 16.1436; [2021-09-20 16:25:00.660] [jointLog] [info] iteration = 800 | max rel diff. = 2.09965; [2021-09-20 16:25:02.202] [jointLog] [info] iteration = 900 | max rel diff. = 0.122996; [2021-09-20 16:25:03.75",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:7229,optimiz,optimizer,7229,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['optimiz'],['optimizer']
Performance,e most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ libType ] => { SR }; ### [ unmatedReads ] => { fastq_files/SRR2454069.fq.gz }; ### [ threads ] => { 8 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further process,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1085,Load,Loading,1085,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['Load'],['Loading']
Performance,"e next, even on the same data file. . I appreciate any help you can offer and I apologize in advance if there's something obvious I should have read or known about. (it seems like the lines below that are preceded by ### are coming out in fold face. They are not meant to.). (salmon) MacBook-Pro-2:salmon-tutorial brent$ bash quant_tut_samples.sh; Processing sample DRR016125; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { athal_index }; ### [ libType ] => { A }; ### [ mates1 ] => { data/DRR016125/DRR016125_1.fastq.gz }; ### [ mates2 ] => { data/DRR016125/DRR016125_2.fastq.gz }; ### [ threads ] => { 8 }; ### [ output ] => { quants/DRR016125_quant }; Logs will be written to quants/DRR016125_quant/logs; [2018-11-24 15:08:09.785] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-11-24 15:08:09.785] [jointLog] [info] parsing read library format; [2018-11-24 15:08:09.785] [jointLog] [info] There is 1 library.; [2018-11-24 15:08:09.877] [jointLog] [info] Loading Quasi index; [2018-11-24 15:08:09.877] [jointLog] [info] Loading 32-bit quasi index; [2018-11-24 15:08:09.877] [stderrLog] [info] Loading Suffix Array ; [2018-11-24 15:08:10.319] [stderrLog] [info] Loading Transcript Info ; [2018-11-24 15:08:10.423] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-24 15:08:10.432] [stderrLog] [info] There were 40,812 set bits in the bit array; [2018-11-24 15:08:10.435] [stderrLog] [info] Computing transcript lengths; [2018-11-24 15:08:10.435] [stderrLog] [info] Waiting to finish loading hash. quant_tut_samples.sh: line 2: 914 Segmentation fault: 11 salmon quant -i athal_index -l A -1 ${fn}/${samp}_1.fastq.gz -2 ${fn}/${samp}_2.fastq.gz -p 8 -o quants/${samp}_quant; (salmon) MacBook-Pro-2:salmon-tutorial brent$",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828:1671,Load,Loading,1671,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828,6,"['Load', 'load']","['Loading', 'loading']"
Performance,"e of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2018-05-31 16:54:42.310] [jointLog] [info] parsing read library format; [2018-05-31 16:54:42.310] [jointLog] [info] There is 1 library.; [2018-05-31 16:54:42.480] [jointLog] [info] Loading Quasi index; [2018-05-31 16:54:42.501] [jointLog] [info] Loading 32-bit quasi index; [2018-05-31 16:54:42.501] [stderrLog] [info] Loading Suffix Array; [2018-05-31 16:55:01.293] [stderrLog] [info] Loading Transcript Info; [2018-05-31 16:55:06.428] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-05-31 16:55:07.107] [stderrLog] [info] There were 310732 set bits in the bit array; [2018-05-31 16:55:07.158] [stderrLog] [info] Computing transcript lengths; [2018-05-31 16:55:07.159] [stderrLog] [info] Waiting to finish loading hash; [2018-05-31 16:55:25.973] [jointLog] [info] done; [2018-05-31 16:55:25.973] [jointLog] [info] Index contained 310732 targets; [2018-05-31 16:55:25.973] [stderrLog] [info] Done loading index. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 224580543, hits per frag: 3.35031[2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.84% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.88% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.00% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.92% zero probability fragments; [2018-05-31 17",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:1894,load,loading,1894,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['load'],['loading']
Performance,"e of noisy Cellular barcodes.; [2018-12-06 11:16:54.985] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-06 11:16:55.059] [alevinLog] [info] Done True Barcode Sampling; [2018-12-06 11:16:55.395] [alevinLog] [info] Done populating Z matrix; [2018-12-06 11:16:55.453] [alevinLog] [info] Done indexing Barcodes; [2018-12-06 11:16:55.453] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-06 11:16:55.453] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06 11:45:12.188] [jointLog] [info] Counted 154,595,094 total reads in the equivalence classes ; [2018-12-06 11:45:12.188] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-06 11:45:12.188] [jointLog] [info]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6422,Load,Loading,6422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['Load'],['Loading']
Performance,"e, consider re-building the index with a smaller k.; The minimum read size found was 20. [2024-01-27 01:10:28.202] [jointLog] [info] Number of mappings discarded because of alignment score : 18,226,670; [2024-01-27 01:10:28.202] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 762,980; [2024-01-27 01:10:28.202] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2024-01-27 01:10:28.202] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 82,701; [2024-01-27 01:10:28.219] [jointLog] [warning] Only 446871 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2024-01-27 01:10:28.219] [jointLog] [info] Mapping rate = 12.4124%. [2024-01-27 01:10:28.219] [jointLog] [info] finished quantifyLibrary(); [2024-01-27 01:10:28.224] [jointLog] [info] Starting optimizer; [2024-01-27 01:10:28.368] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2024-01-27 01:10:28.376] [jointLog] [info] iteration = 0 | max rel diff. = 174.042; [2024-01-27 01:10:28.453] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2024-01-27 01:10:52.990] [jointLog] [info] Computed expected counts (for bias correction); [2024-01-27 01:10:52.990] [jointLog] [info] processed bias for 0.0% of the transcripts; [2024-01-27 01:10:55.410] [jointLog] [info] processed bias for 10.0% of the transcripts; [2024-01-27 01:10:57.934] [jointLog] [info] processed bias for 20.0% of the transcripts; [2024-01-27 01:11:00.570] [jointLog] [info] processed bias for 30.0% of the transcripts; [2024-01-27 01:11:03.092] [jointLog] [info] processed bias for 40.0% of the transcripts; [2024-01-27 01:11:05.416] [jointLog] [info] processed bias for 50.0% of the transcripts; [2024-01-27 01:11:07.798] [jointLog] [info] processed bias for 60.0% of t",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/908:2943,optimiz,optimizer,2943,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/908,1,['optimiz'],['optimizer']
Performance,"e; Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.; /home/ngs/scripts/sc-rna/sc-s-salmon-quant.sh: line 40: 10170 Aborted (core dumped) . when I run. ```bash; salmon quant \; -i ""$path_dr_salmonindex_transcriptome_ercc"" \; -o ""$newfilename-salmon-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-08-02 14:41:46.432] [jointLog] [info] Mapping rate = 42.6252%. [2017-08-02 14:41:46.432] [jointLog] [info] finished quantifyLibrary(",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1342,Load,Loading,1342,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['Load'],['Loading']
Performance,"ead2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/R10001_D2B1WACXX/logs; [1m[2017-03-29 14:56:39.675] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 14:56:39.733] [jointLog] [info] There is 1 library.; [00mterminate called without an active exception; /cm/local/apps/sge/var/spool/compute-067/job_scripts/110316: line 31: 64339 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}; **** Job ends ****; Wed Mar 29 14:58:05 EDT 2017. ```. ### SGE email example info. ```; Job-array task 110316.1 (step6-salmon_test4.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-067.cm.cluster; Host = compute-067.cm.cluster; Start Time = 03/29/2017 14:53:42; End Time = 03/29/2017 14:58:05; User Time = 00:00:00; System Time = 00:05:39; Wallclock Time = 00:04:23; CPU = 00:05:39; Max vmem = 24.202G; Exit Status = 0; ```. Note that in this case, it didn't read the maximum memory requested (16 * 3 = 48 GB). ## Large memory, p 1. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=80G,h_vmem=90G,h_fsize=100G; #$ -N step6-salmon_test5.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test5.$TASK_ID.txt; #$ -e ./logs/salmon_test5.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:6932,Queue,Queue,6932,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['Queue'],['Queue']
Performance,"eads to 48; [2022-12-03 15:43:11.767] [jointLog] [info] Fragment incompatibility prior below threshold. ; Incompatible fragments will be ignored.; [2022-12-03 15:43:11.767] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2022-12-03 15:43:11.767] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2022-12-03 15:43:11.767] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes.; [2022-12-03 15:43:11.767] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2022-12-03 15:43:11.767] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2022-12-03 15:58:24.389] [jointLog] [info] There is 1 library.; [2022-12-03 15:58:24.435] [jointLog] [info] Loading pufferfish index; [2022-12-03 15:58:24.454] [jointLog] [info] Loading dense pufferfish index.; [2022-12-03 15:58:26.905] [jointLog] [info] done; [2022-12-03 15:58:26.973] [jointLog] [info] Index contained 117,377 targets; [2022-12-03 15:58:27.002] [jointLog] [info] Number of decoys : 0; [2022-12-03 16:17:44.963] [jointLog] [info] Computed 194,611 rich equivalence classes for further processing; [2022-12-03 16:17:44.963] [jointLog] [info] Counted 35,761,228 total reads in the equivalence classes; [2022-12-03 16:17:44.964] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2022-12-03 16:17:44.964] [jointLog] [warning] Found 9264 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2022-12-03 16:17:44.964] [jointLog] [info] Mapping rate = 5.59508%. [2022-12-03 16:17:44.964] [jointLog] [info] finished quantifyLibrary(). ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/814:5202,Load,Loading,5202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/814,2,['Load'],['Loading']
Performance,"ebuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:3242,Load,Loadable,3242,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ed InvCov: 114.535 normfactor: 147.323; [2019-01-29 09:55:04.817] [alevinLog] [info] Total 289(has 190 low confidence) barcodes; [2019-01-29 09:55:04.822] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:55:04.855] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:55:04.855] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:55:04.855] [alevinLog] [info] Total Unique barcodes found: 70316; [2019-01-29 09:55:04.855] [alevinLog] [info] Used Barcodes except Whitelist: 184; [2019-01-29 09:55:04.882] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:55:04.882] [alevinLog] [info] parsing read library format; [2019-01-29 09:55:05.014] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:55:04.882] [jointLog] [info] There is 1 library.; [2019-01-29 09:55:05.012] [jointLog] [info] Loading Quasi index; [2019-01-29 09:55:05.013] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:55:06.105] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:55:09.968] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:55:16.908] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:55:19.931] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:55:19.931] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:55:41.122] [jointLog] [info] done; [2019-01-29 09:55:41.122] [jointLog] [info] Index contained 80,511 targets; [2019-01-29 09:55:41.122] [stderrLog] [info] Done loading index. processed 0 Million fragments; hits: 161433, hits per frag: 0.32698. [2019-01-29 09:55:54.788] [alevinLog] [info] Starting optimizer; [2019-01-29 09:55:54.742] [jointLog] [info] Computed 6,346 rich equivalence classes for further processing; [2019-01-29 09:55:54.742] [jointLog] [info] Counted 80,300 total reads in the equivalence classes ; [2019-01-29 09:55:54.754] [jointLog] [warning] Only 80300 fragments were mapped, but the number of burn-in fragments was set to 5000000",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:3017,Load,Loading,3017,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance,"ed alignment files have consistent headers . . . done; Populating targets from aln = ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"", fasta = ""/rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas"" . . .done. processed 0 reads in current round[2023-01-29 16:02:12.216] [jointLog] [info] replaced 186,207 non-ACGT nucleotides with random nucleotides; [2023-01-29 16:02:12.668] [jointLog] [info] Automatically detected most likely library type as U. processed 2000000 reads in current round[2023-01-29 16:02:13.116] [jointLog] [info] . The alignment group queue pool has been exhausted. 1842 extra fragments were allocated on the heap to saturate the pool. No new fragments will be allocated. processed 13423395 reads in current round; killing thread 3 . . . done. Freeing memory used by read queue . . . 00000; Joined parsing thread . . . ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"" ; Closed all files . . . ; Emptied frag queue. . . ; Emptied Alignment Group Pool. . ; Emptied Alignment Group Queue. . . done; [2023-01-29 16:02:59.265] [jointLog] [info] . Completed first pass through the alignment file.; Total # of mapped reads : 13423395; # of uniquely mapped reads : 13423394; # ambiguously mapped reads : 1. [2023-01-29 16:02:59.271] [jointLog] [info] Computed 169 rich equivalence classes for further processing; [2023-01-29 16:02:59.272] [jointLog] [info] Counted 13,423,395 total reads in the equivalence classes ; [2023-01-29 16:02:59.272] [jointLog] [info] starting optimizer; [2023-01-29 16:02:59.274] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-01-29 16:02:59.274] [jointLog] [info] iteration = 0 | max rel diff. = 237.557; [2023-01-29 16:02:59.282] [jointLog] [info] iteration = 100 | max rel diff. = 3.78077e-16; [2023-01-29 16:02:59.282] [jointLog] [info] finished optimizer; [2023-01-29 16:02:59.282] [jointLog] [info] writing output. ```. Output for failure case - 48 files:. ```; salmon quant -t /rsstu/users/c/cjdohert/NSF_Tomato/A",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/825:3209,Queue,Queue,3209,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/825,1,['Queue'],['Queue']
Performance,"ed more RAM? Or it is a bug.; ; More info as below:; [2018-10-24 11:14:15.505] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-24 11:14:15.505] [jointLog] [info] parsing read library format; [2018-10-24 11:14:15.505] [jointLog] [info] There is 1 library.; [2018-10-24 11:14:15.627] [jointLog] [info] Loading Quasi index; [2018-10-24 11:14:15.629] [jointLog] [info] Loading 32-bit quasi index; [2018-10-24 11:14:15.633] [stderrLog] [info] Loading Suffix Array; [2018-10-24 11:14:17.090] [stderrLog] [info] Loading Transcript Info; [2018-10-24 11:14:17.691] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-24 11:14:18.293] [stderrLog] [info] There were 309,566 set bits in the bit array; [2018-10-24 11:14:18.819] [stderrLog] [info] Computing transcript lengths; [2018-10-24 11:14:18.820] [stderrLog] [info] Waiting to finish loading hash; [2018-10-24 11:15:46.171] [jointLog] [info] done; [2018-10-24 11:15:46.171] [jointLog] [info] Index contained 309,566 targets; [2018-10-24 11:15:46.171] [stderrLog] [info] Done loading index. **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * Which version of salmon was used? 0.11.3; * How was salmon installed (compiled, downloaded executable, through bioconda)?. downloaded execitable. * Which reference (e.g. transcriptome) was used?; human; * Which read files were used?; * Which which program options were used?; All default. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX] Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/304:1660,load,loading,1660,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/304,1,['load'],['loading']
Performance,"eduplicated_umis"": 402386555,; ""mean_umis_per_cell"": 2954,; ""mean_genes_per_cell"": 896; }; ```. \* total reads have been corrected by adding 2^32. From my understanding of the numbers, this suggests a PCR duplication rate of either 8.95X (comparing ""used reads"" with ""deduplicated umis"") or 6.16X (comparing ""reads in eqclasses"" with ""deduplicated umis""). I had a go at trying to ""manually"" count (via awk/grep/sort/uniq/etc.) the cell barcodes and UMIs associated with the MT-ND1 gene:. ND1-matching reads with good cell barcode QC (barcodes linkable to expected cell barcodes), and good mapping (>60bp matching): 5292134; Unique cell/UMI pairs (subset from the above data): 1590232; => PCR duplication rate ~= 3.32 reads per unique molecule. So it seems like the duplication rate might be closer to the SevenBridges estimate than the Alevin estimate. The Alevin documentation seems to suggest that cell/transcript/UMI triplets are being used for UMI collapsing (""identify potential PCR/sequencing errors in the UMIs, and performs hybrid de-duplication while accounting for UMI collisions""), so I'm at a loss as to why the difference is this large. I'm not too worried about numbers being different, but the UMI proportion is a concern to me, because sequencing is expensive, and it'd be good to have an idea of whether we need to further improve our library prep (which would certainly be the case for 9X duplication, but less important with 3-5X duplication). Is anyone able to explain how the UMI deduplication is applied in Salmon Alevin, or why it might be different from other analysis platforms?. * Which version of salmon was used? v1.9.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? Binary download from github; * Which reference (e.g. transcriptome) was used? Gencode Human v42; * Which read files were used? NovaSeq 6000 S2; * Which program options were used?. ```; salmon alevin -l ISR \; -1 $(ls demultiplexed/squished_${machineID}*_R1_001.fastq.gz | ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/808:2060,perform,performs,2060,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/808,1,['perform'],['performs']
Performance,"efore used for quantification by default. Specifically, starting with 0.14, ""dovetail"" alignments [(as described in the Bowtie2 manual)](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#bowtie2-options-dovetail) are considered discordant. This is the same default behavior imposed by Bowtie2. If you look in the `meta_info.json` file for some of these samples (which is in the `aux_info` subdirectory of the quantification directory for a sample), you can see how many mappings are being discarded by virtue of being dovetail mappings. It is possible to allow such alignments (consider them as concordant) by passing the `--allowDovetail` flag. It is not the case that such alignments are always ""bad"", its simply that one would not expect many fragments to align in such a way, and if these constitute the overwhelming majority of the mappings, one might be suspicious about the underlying data. * Selective alignment actually _aligns_ the reads to the transcriptome. For this purpose, it performs end-to-end alignment. This means that if you suspect that the sample may contain adapters or very low-quality read ends, the reads should be trimmed prior to quantification. It is, therefore, worth checking how the mapping rate changes for some of these samples if the reads are trimmed first. * Selective alignment is more robust than quasi-mapping to the chosen value of `-k`, the minimum match length used when searching for alignments. I noticed that some of the samples contain relatively short reads, so you might see if the mapping rate changes if you adopt a smaller value of `-k` in the index (e.g. we use `23` in the [pre-print](https://www.biorxiv.org/content/10.1101/657874v2.full.pdf)). * You mention that this index doesn't contain any decoy sequence. This of course, should not affect the mapping rate. However, I'd be quite curious to see if you index the reference using the _whole genome_ as decoy (i.e. the SAF method from the pre-print), how many reads are discarded because ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-582734798:2690,perform,performs,2690,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-582734798,2,['perform'],['performs']
Performance,"elective alignment, we could compare and contrast the two. At that point, there are a few options depending on how deeply you want to dive. You could try to see how STAR and selective alignment are mapping differently to these transcripts. One potential difference is that STAR is _a lot_ more happy to softclip reads, which selective alignment won't do by default (you can test the effect with the `--softclipOverhangs` to allow selective alignment to softclip reads that hang off the transcript end or `--softclip` to allow softclips anywhere). Note that selective alignment may _still_ be a bit more conservative than STAR about softclips simply because of the nature of the scoring function it uses. This might give you a sense if one of these alignment methodologies is more consistent with your expectations in this case. Another option is to consider doing a grouping with `terminus`. This will reduce the set of ""genes"" that you can call as DE, because it will be happy to group together transcripts from different genes. However, it should help considerably in eliminating DE from highly-uncertain point estimates. Finally, you might consider performing DE with swish (cc @mikelove as he might have some input here) rather than DESeq2 (though we've typically been using swish at the transcript level rather than the gene level). Unlike DESeq2, swish will explicitly take into account the inferential uncertainty in the abundance estimates, using the Gibbs samples produced by salmon. This will allow it to avoid spurious DE calls that might otherwise occur when you have highly uncertain transcripts that, by chance, end up being assigned very different abundances in different samples / over different runs. Sorry for the information dump, but I wanted to lay out what might be going on, how to assess it, and what some potential solutions might be. If you dive in to start investigating this, feel free to reach out in this issue along the way if you get stuck or have follow-up questions.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115:4377,perform,performing,4377,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115,2,['perform'],['performing']
Performance,"elist: 0; [2021-04-09 12:16:37.914] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-04-09 12:16:37.914] [alevinLog] [info] parsing read library format; [2021-04-09 12:16:37.914] [jointLog] [info] There is 1 library.; [2021-04-09 12:16:38.027] [jointLog] [info] Loading pufferfish index; [2021-04-09 12:16:38.027] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference sequence | Time = 240.84 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.9587 ms; -----------------------------------------; [2021-04-09 12:16:41.658] [jointLog] [info] done; [2021-04-09 12:16:41.658] [jointLog] [info] Index contained 45,375 targets; [2021-04-09 12:16:41.673] [jointLog] [info] Number of decoys : 1; [2021-04-09 12:16:41.673] [jointLog] [info] Firs",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:4895,Load,Loading,4895,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"ells 3000; ```; [2019-01-29 15:49:33.693] [alevinLog] [info] Done barcode density calculation.; [2019-01-29 15:49:33.693] [alevinLog] [info] # Barcodes Used: 287883370 / 287983348.; [2019-01-29 15:49:35.112] [alevinLog] [info] Total 49.4292% reads will be thrown away because of noisy Cellular barcodes.; [2019-01-29 15:49:35.112] [alevinLog] [info] Total 4000(has 1000 low confidence) barcodes; [2019-01-29 15:49:35.251] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 15:49:35.896] [alevinLog] [info] Done populating Z matrix; [2019-01-29 15:49:35.994] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 15:49:35.994] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-29 15:49:35.994] [alevinLog] [info] Used Barcodes except Whitelist: 105901; [2019-01-29 15:49:36.107] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 15:49:36.107] [alevinLog] [info] parsing read library format; [2019-01-29 15:49:36.415] [stderrLog] [info] Loading Suffix Array; [2019-01-29 15:49:36.107] [jointLog] [info] There is 1 library.; [2019-01-29 15:49:36.373] [jointLog] [info] Loading Quasi index; [2019-01-29 15:49:36.396] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 15:49:50.479] [stderrLog] [info] Loading Transcript Info; [2019-01-29 15:49:55.550] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 15:49:56.036] [stderrLog] [info] There were 58,086 set bits in the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.67",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:1238,Load,Loading,1238,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['Load'],['Loading']
Performance,"en I build this index on one of our machines. Perhaps we could see if these match: . ```; $:salmon_index [j1] (develop ?) $ sha256sum *; 306e9d98b3460859f579059bf876aa3b6e264c8f38c04cde332b03632edc6dfb complete_ref_lens.bin; 28519aac34b84b4d0570c97340815e719511c204e04a240dd43e365d2872eed3 ctable.bin; 1c7501deaa4524f4700152713228cb03949775dce481384eac67bb45458508be ctg_offsets.bin; dbc575fed0d589b4671c26bd8cbcb4b3d52ef41c299a90de978ab940abb751fc duplicate_clusters.tsv; 987050914456cf247a24136429d8faaa293cf5617bfd57166c64976b2778d95b info.json; 0b7e8cb4ebed78513900831c047f0d66589068921c33bb15c49b3567c84e2edc mphf.bin; 117369928fde1bff4ca278246c331e079cc0860c3b415e34cd4b08f588063abc pos.bin; 297492e67d274b2ff8f026d2fbc8045f96e17793a58dd74c19b5ab1b7156df8a pre_indexing.log; 8e665e5fdee5af6fcedabc69fd04eda6e66055ef811ebde6de6f86a66521198a rank.bin; 793c79f5fd6046dfea07bbc9587d2835088e54c78197d652d1b1f205c6b16983 refAccumLengths.bin; 92acf575c90c6954ff75be1ea791f822eee05e486c6e86c52943d8bc1a0849ca ref_indexing.log; b580b9c6257254a018a9ae22291a64892c1a3715c69272637f5c504fc5545a70 reflengths.bin; 89679603ac0b28042275e5ff04b222bad3fd431cab573f0c2b61e7455aec43e7 refseq.bin; 94cb79a2f4acd811d2164f2926c96869a8103b9118170d0688f57b46e695cd5c seq.bin; 89d56bb135f32c7b5fa337bc3c45814b80c2886a3cccc31ff0533c6324ca11fd versionInfo.json; ```. I'm also including a link [here](https://drive.google.com/file/d/1uxGUy8gaQ20dpEi7-D3ookFF4JYawsIR/view?usp=sharing) to a tarball containing the index I built. Could you see if you can perform quantification with this index? Finally, it might be worth checking that nothing strange / unexpected is going on with how libraries are being resolved in the linker path when you are running salmon. Could you share the output of running `ldd salmon`? If none of those point at anything obvious, I might also suggest seeing if it runs as expected inside a Docker container. You can grab a dockerfile for salmon [here](https://hub.docker.com/r/combinelab/salmon).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674454751:1855,perform,perform,1855,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674454751,1,['perform'],['perform']
Performance,ene counts and my transcript count files are empty??; How is that possible; Cheers; Ashok; ```; [2017-07-18 17:14:11.438] [jointLog] [info] parsing read library format; [2017-07-18 17:14:11.438] [jointLog] [info] There is 1 library.; [2017-07-18 17:14:11.485] [jointLog] [info] Loading Quasi index; [2017-07-18 17:14:11.485] [jointLog] [info] Loading 32-bit quasi index; [2017-07-18 17:14:21.207] [jointLog] [info] done; [2017-07-18 17:14:21.207] [jointLog] [info] Index contained 107368 targets; [2017-07-18 17:14:22.320] [jointLog] [info] Automatically detected most likely library type as SF; [2017-07-18 17:22:52.788] [jointLog] [info] Computed 280679 rich equivalence classes for further processing; [2017-07-18 17:22:52.788] [jointLog] [info] Counted 27517563 total reads in the equivalence classes; [2017-07-18 17:22:52.850] [jointLog] [info] Mapping rate = 37.9965%. [2017-07-18 17:22:52.850] [jointLog] [info] finished quantifyLibrary(); [2017-07-18 17:22:52.853] [jointLog] [info] Starting optimizer; [2017-07-18 17:22:52.789] [fileLog] [info]; At end of round 0; ==================; Observed 72421398 total fragments (72421398 in most recent round). [2017-07-18 17:22:52.981] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2017-07-18 17:22:52.990] [jointLog] [info] iteration = 0 | max rel diff. = 9.36177; [2017-07-18 17:22:53.935] [jointLog] [info] iteration = 100 | max rel diff. = 0.0782409; [2017-07-18 17:22:54.889] [jointLog] [info] iteration = 200 | max rel diff. = 0.0347085; [2017-07-18 17:22:55.784] [jointLog] [info] iteration = 300 | max rel diff. = 0.0249461; [2017-07-18 17:22:56.790] [jointLog] [info] iteration = 400 | max rel diff. = 0.0188653; [2017-07-18 17:22:57.752] [jointLog] [info] iteration = 500 | max rel diff. = 0.0157419; [2017-07-18 17:22:58.688] [jointLog] [info] iteration = 600 | max rel diff. = 0.0128394; [2017-07-18 17:22:59.422] [jointLog] [info] iteration = 681 | max rel diff. = 0.00982758; [2017-07-18 17:22:59.432] [jointL,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/143:1121,optimiz,optimizer,1121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/143,1,['optimiz'],['optimizer']
Performance,"entation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from /u/user/local/bin/salmon...done.; (gdb) run alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] =",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:1863,load,load-safe-path,1863,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['load'],['load-safe-path']
Performance,"ents will be ignored.; [2023-09-28 04:51:02.450] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 18.506 ms; -----------------------------------------; [2023-09-28 04:51:48.011] [jointLog] [info] do",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:3484,Load,Loading,3484,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"eq"": true,; > ""have_edge_vec"": false,; > ""SeqHash"": ""34c8b30e5d42a0d4459fb24e44ecef46af39893984bf9613001e925a7b1308b7"",; > ""NameHash"": ""b503f6a369add974e996e5f42942882b50c2bf1419400420255d32a88fb61a18"",; > ""SeqHash512"": ""4b94376c390dd8e917d39dfbaed1092d9a661dbdb67635863f9a14b129948f1244929faf60f5b7c1d6fae142d87fb2c66455f49d0d3663f7498b275efad4ed93"",; > ""NameHash512"": ""46c31c9178b3290b2f57e9b682ea8eebe885ba9037e48cb6b385a0c70ce13e2b259400bc9bda4aca912c3b857edde7de41d11b1a7b9ccbe8b24df77808c22e59"",; > ""DecoySeqHash"": ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"",; > ""DecoyNameHash"": ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"",; > ""num_decoys"": 0,; > ""first_decoy_index"": 18446744073709551607,; > ""keep_duplicates"": false; > }. And the command I used:. `/home/bayegy/pipelines/metagenome/softwares/salmon-latest_linux_x86_64/bin/salmon quant --validateMappings -i /media/bayegy/disk1/Projects/qianquan-zhangke/result/Assembly_out//salmon_index -l A -p 90 --meta -1 /media/bayegy/disk1/Projects/qianquan-zhangke/result/kneaddata_out//YGSC11_R1_kneaddata_paired_1.fastq.gz -2 /media/bayegy/disk1/Projects/qianquan-zhangke/result/kneaddata_out//YGSC11_R1_kneaddata_paired_2.fastq.gz -o /media/bayegy/disk1/Projects/qianquan-zhangke/result/salmon_out//YGSC11.quant`. Sometimes, salmon would stay at the step of ""Starting optimizer"" for hours(10 hours at least). The CPU utilization is 100%, but the procedure never move forward. > [2020-06-04 12:06:12.254] [jointLog] [info] Mapping rate = 91.8009%; > ; > [2020-06-04 12:06:12.254] [jointLog] [info] finished quantifyLibrary(); > [2020-06-04 12:06:12.254] [jointLog] [info] Starting optimizer. The funny thing is that salmon would pass this step in no time if I restart the procedure with same command. It is annoying that I have to check the log time to time to restart salmon when it get blocked. I wonder what is the possible reason for this and how can i stop this from happening again. . Many thanks.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/532:1822,optimiz,optimizer,1822,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/532,2,['optimiz'],['optimizer']
Performance,"er; 2) exported path: export PATH=$PATH:/.../.../Salmon-0.8.2_linux_x86_64/bin/; 3) built index: salmon index -t salmon.index.human.052617.tar -i human_index; 4) now I want to preform quantification on fastq files (only one end of paired end, trimmed for 40 bp): ; salmon quant -i human_index -l U -r Sample1_r1_trimmed.fastq -p 5 -o quants/Sample1_quant. Logs will be written to quants/Sample1_quant/logs; [2017-10-25 10:57:25.879] [jointLog] [info] parsing read library format; [2017-10-25 10:57:25.879] [jointLog] [info] There is 1 library.; [2017-10-25 10:57:26.002] [jointLog] [info] Loading Quasi index; [2017-10-25 10:57:26.002] [jointLog] [info] Loading 32-bit quasi index; [2017-10-25 10:57:26.012] [jointLog] [info] done; [2017-10-25 10:57:26.012] [jointLog] [info] Index contained 28 targets; [2017-10-25 10:57:26.003] [stderrLog] [info] Loading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapping rate = 0%. [2017-10-25 10:58:22.293] [jointLog] [info] finished quantifyLibrary(); [2017-10-25 10:58:22.295] [jointLog] [info] Starting optimizer; [2017-10-25 10:58:22.3",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:1160,Load,Loading,1160,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,1,['Load'],['Loading']
Performance,"eration = 1,100 | max rel diff. = 0.172304; [2021-06-07 21:05:14.993] [jointLog] [info] iteration = 1,200 | max rel diff. = 1.17312; [2021-06-07 21:05:16.651] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.111995; [2021-06-07 21:05:18.313] [jointLog] [info] iteration = 1,400 | max rel diff. = 0.0191206; [2021-06-07 21:05:19.978] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.125342; [2021-06-07 21:05:21.640] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.024507; [2021-06-07 21:05:23.304] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.109772; [2021-06-07 21:05:23.469] [jointLog] [info] iteration = 1,711 | max rel diff. = 0.00699727; [2021-06-07 21:05:23.499] [jointLog] [info] finished optimizer; [2021-06-07 21:05:23.499] [jointLog] [info] writing output; [2021-06-07 21:05:23.829] [jointLog] [info] Staring Bootstrapping; [2021-06-07 21:05:23.962] [jointLog] [info] Will draw 30 bootstrap samples; [2021-06-07 21:05:23.962] [jointLog] [info] Optimizing over 430,852 equivalence classes; ```. `-l ISF`:; ```; Completed first pass through the alignment file.; Total # of mapped reads : 30,418,756; # of uniquely mapped reads : 8,515,058; # ambiguously mapped reads : 21,903,698; [2021-06-08 03:44:49.444] [jointLog] [info] Computed 430,882 rich equivalence classes for further processing; [2021-06-08 03:44:49.444] [jointLog] [info] Counted 29,619,881 total reads in the equivalence classes; [2021-06-08 03:44:49.445] [jointLog] [info] starting optimizer; [2021-06-08 03:44:49.599] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-06-08 03:44:49.615] [jointLog] [info] iteration = 0 | max rel diff. = 5827.73; [2021-06-08 03:44:51.123] [jointLog] [info] iteration = 100 | max rel diff. = 17.6527; [2021-06-08 03:44:52.620] [jointLog] [info] iteration = 200 | max rel diff. = 20.0555; [2021-06-08 03:44:54.133] [jointLog] [info] iteration = 300 | max rel diff. = 2.81129; [2021-06-08 03:44:55.641] [jointLog] [info] iteration = 40",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/669:4588,Optimiz,Optimizing,4588,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/669,1,['Optimiz'],['Optimizing']
Performance,es in the index); > [2020-06-09 12:31:05.494] [alevinLog] [info] Filled with 64 txp to gene entries ; > [2020-06-09 12:31:05.494] [alevinLog] [info] Found all transcripts to gene mappings; > [2020-06-09 12:31:05.499] [alevinLog] [info] Processing barcodes files (if Present) ; > ; > ; > [2020-06-09 12:32:20.000] [alevinLog] [info] Done barcode density calculation.; > [2020-06-09 12:32:20.000] [alevinLog] [info] # Barcodes Used: [32m52200250[0m / [31m52200250[0m.; > [2020-06-09 12:32:20.285] [alevinLog] [info] Done importing white-list Barcodes; > [2020-06-09 12:32:20.423] [alevinLog] [warning] Skipping 672237 Barcodes as no read was mapped; > [2020-06-09 12:32:20.578] [alevinLog] [info] Total 65042 white-listed Barcodes; > [2020-06-09 12:32:20.578] [alevinLog] [info] Sorting and dumping raw barcodes; > [2020-06-09 12:32:21.060] [alevinLog] [info] Total 5.06742% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-09 12:32:23.856] [alevinLog] [info] Done populating Z matrix; > [2020-06-09 12:32:23.882] [alevinLog] [info] Total 79207 CB got sequence corrected. > [2020-06-09 12:32:23.893] [alevinLog] [info] Done indexing Barcodes; > [2020-06-09 12:32:23.893] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-09 12:32:23.893] [alevinLog] [info] Used Barcodes except Whitelist: 71340; > [2020-06-09 12:32:24.004] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-09 12:32:24.004] [alevinLog] [info] parsing read library format; > [2020-06-09 12:33:33.719] [alevinLog] [info] Starting optimizer; > ; > ; > [2020-06-09 12:33:35.712] [alevinLog] [info] Total 161852.00 UMI after deduplicating.; > [2020-06-09 12:33:35.712] [alevinLog] [info] Total 14936 BiDirected Edges.; > [2020-06-09 12:33:35.712] [alevinLog] [info] Total 177402 UniDirected Edges.; > [2020-06-09 12:33:35.712] [alevinLog] [warning] Skipped 12422 barcodes due to No mapped read; > [2020-06-09 12:33:35.719] [alevinLog] [info] Finished optimizer,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-641426690:1990,optimiz,optimizer,1990,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-641426690,2,['optimiz'],['optimizer']
Performance,"es. Those jobs are still running (it's only been about 4hrs as of this writing, I'll update my post if/when they complete). Current logs are showing that they quickly consume all the available memory, but have not yet crashed. I've also got versions with 128-512GB of memory requested (by powers of 2) for comparison. Some random notes: both the 31-mer index experienced about twice as many soft page reclaims with the new/faster version and experienced a few hard page faults (the previous version saw none of the latter). The 17-mer version experienced fewer page reclaims than any of the 31-mer indices and far fewer than with the prior version. Again, a few page faults crept in, but relatively few by percentage and likely not contributing any significant amount of time overall. [index-qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4246516/index-qacct-17mer.log); [index-qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4246517/index-qacct-31mer.log). **UPDATE**; The 16GB version finished running. It actually only took a little over 4 hours to run, as well. The troubling thing about this job seems to be that, despite having successfully completed, according to the accounting log it used over 20GB of memory... which should be impossible to do. Our resident experts suspect there's a race condition occurring at the tail end of the job and that all of that extra memory is being allocated before the scheduler can kill it for exceeding the limit. Whatever the case, though, this throws into question some of those numbers that I've been grabbing from the accounting logs --- it's either being misreported, or the memory gobbling is happening so rapidly that it may not, in fact, be being properly recorded. I tested the index anyway. It *appears* to be working just fine. Nothing faulted or crashed when I attempted to quantify some reads against it. [index-qacct-17mer-16gigs.log](https://github.com/COMBINE-lab/salmon/files/4247214/index-qacct-17mer-16gigs.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702:2130,race condition,race condition,2130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702,1,['race condition'],['race condition']
Performance,es/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_quant/hg38.analysisSet_knownGene/SRR2454059 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 100 }; Logs will be written to salmon_quant/hg38.analysisSet_knownGene/SRR2454059/logs; [2016-12-13 12:44:39.271] [jointLog] [info] parsing read library format; [2016-12-13 12:44:39.271] [jointLog] [info] There is 1 library.; [2016-12-13 12:44:39.836] [jointLog] [info] Loading Quasi index; [2016-12-13 12:44:39.836] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 12:44:39.836] [stderrLog] [info] Loading Suffix Array ; [2016-12-13 12:44:43.439] [stderrLog] [info] Loading Transcript Info ; [2016-12-13 12:44:44.355] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 12:44:44.613] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 12:44:44.629] [stderrLog] [info] Computing transcript lengths; [2016-12-13 12:44:44.629] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 12:44:44.629] [stderrLog] [info] Done loading index; [2016-12-13 12:44:44.629] [jointLog] [info] done; [2016-12-13 12:44:44.629] [jointLog] [info] Index contained 182608 targets; [2016-12-13 12:44:49.583] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in ; single-end libraries. Please use this option with caution. processed 19000000 fragments; hits: 65897660; hits per frag: 3.46963. [2016-12-13 12:46:51.776] [jointLog] [info] Computed 137534 rich equivalence classes for further processin; g; [2016-12-13 12:46:51.776] [jointLog] [info] Counted 16265961 total reads in the equivalence classes . [2016-12-13 12:46:51.786] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 12:46:51.786] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 12:46:51.786] [jointLog] [info] Starting optimizer; [2016-12-13 12:46:51.867] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 12:46:51.877] [jointLog] [inf,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:2019,load,loading,2019,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['load'],['loading']
Performance,"es` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 650 us; -----------------------------------------; [2021-05-20 10:53:56.156] [jointLog] [info] done; [2021-05-20 10:53:56.156] [jointLog] [info] Index contained 44,026 targets. [2021-05-20 10:53:58.080] [jointLog] [info] Number of decoys : 0; [2021-05-20 10:54:28.729] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-20 11:34:48.022] [jointLog] [info] Computed 145,552 rich equivalence classes for further processing; [2021-05-20 11:34:48.022] [jointLog] [i",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:2784,Load,Loading,2784,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"esizeThreads to 16; [2024-11-01 05:13:59.563] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-11-01 05:13:59.563] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-11-01 05:13:59.563] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-11-01 05:13:59.563] [jointLog] [info] parsing read library format; [2024-11-01 05:13:59.563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:3124,Load,Loading,3124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"esizeThreads to 64; [2024-05-03 15:09:51.221] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-05-03 15:09:51.221] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-05-03 15:09:51.221] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-05-03 15:09:51.221] [jointLog] [info] parsing read library format; [2024-05-03 15:09:51.221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; -----------------------------------------; size = 2977516968; -----------------------------------------; | Loading reference sequence | Time = 228.26 ms; -----------------------------------------; -----------------------------------------; | Loading reference a",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:6201,Load,Loading,6201,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,et_knownGene }; ### [ libType ] => { SR }; ### [ unmatedReads ] => { fastq_files/SRR2454069.fq.gz }; ### [ threads ] => { 8 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further processing; [2016-12-15 16:01:44.937] [jointLog] [info] Counted 12227080 total reads in the equivalence classes; [2016-12-15 16:01:44.948] [jointLog] [info] Mapping rate = 72.5194%. [2016-12-15 16:01:44.948] [jointLog],MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1295,Load,Loading,1295,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['Load'],['Loading']
Performance,"evinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-04 17:56:30.294] [alevinLog] [info] parsing read library format; > [2020-06-04 17:57:36.339] [alevinLog] [info] Starting optimizer; > ; > ; > [2020-06-04 17:57:37.051] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 17:57:37.051] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 17:57:37.338] [alevinLog] [info] Total 23937.00 UMI after deduplicating.; > [2020-06-04 17:57:37.338] [alevinLog] [info] Total 91 BiDirected Edges.; > [2020-06-04 17:57:37.338] [alevinLog] [info] Total 82 UniDirected Edges.; > [2020-06-04 17:57:37.338] [alevinLog] [warning] Skipped 82268 barcodes due to No mapped read; > [2020-06-04 17:57:37.341] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-04 17:57:37.348] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 10.Can't performing whitelisting; Skipping; > [2020-06-04 17:57:37.348] [alevinLog] [info] Finished optimizer; > ; > . salmon_quant.log. > [2020-06-04 17:55:11.700] [jointLog] [info] setting maxHashResizeThreads to 7; > [2020-06-04 17:55:11.700] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; > [2020-06-04 17:55:11.700] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; > [2020-06-04 17:55:11.700] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; > [2020-06-04 17:55:11.700] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; > [2020-06-04 17:55:11.700] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639196415:2568,perform,performing,2568,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639196415,1,['perform'],['performing']
Performance,evinLog] [info] Total 15.7% reads will be thrown away because of noisy Cellular barcodes.; [2021-04-09 12:16:37.892] [alevinLog] [info] Done populating Z matrix; [2021-04-09 12:16:37.892] [alevinLog] [info] Total 0 CB got sequence corrected; [2021-04-09 12:16:37.892] [alevinLog] [info] Done indexing Barcodes; [2021-04-09 12:16:37.892] [alevinLog] [info] Total Unique barcodes found: 822; [2021-04-09 12:16:37.892] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2021-04-09 12:16:37.914] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-04-09 12:16:37.914] [alevinLog] [info] parsing read library format; [2021-04-09 12:16:37.914] [jointLog] [info] There is 1 library.; [2021-04-09 12:16:38.027] [jointLog] [info] Loading pufferfish index; [2021-04-09 12:16:38.027] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -----------------------------------------; size = 137186344; -----------------------------------------; | Loading positions | Time = 644.4 ms; -----------------------------------------; size = 476926644; -----------------------------------------; | Loading reference,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:4388,Load,Loading,4388,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"ex ] => { /share/genomes/human/hg38/gencode_v43/primary_comprehensive/SalmonIndex }; ### [ skipQuant ] => { }; ### [ libType ] => { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.fastq }; ### [ output ] => { salmon_out }; ### [ threads ] => { 1 }; Logs will be written to salmon_out/logs; [2023-11-30 09:40:21.543] [jointLog] [info] setting maxHashResizeThreads to 1; [2023-11-30 09:40:21.543] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:40:21.543] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:40:21.543] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:40:21.543] [jointLog] [info] parsing read library format; [2023-11-30 09:40:21.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:3068,Load,Loading,3068,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"fastq.gz }; ### [ mates2 ] => { testData/XX_R2.fastq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { XX_2 }; Logs will be written to XX_2/logs; [2020-08-13 09:35:38.575] [jointLog] [info] setting maxHashResizeThreads to 12; [2020-08-13 09:35:38.576] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-08-13 09:35:38.576] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 14.838 s; -------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:1648,Load,Loading,1648,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,1,['Load'],['Loading']
Performance,"ff67cfee700 (LWP 21670) exited]; [New Thread 0x7ff57cfec700 (LWP 21672)]; [Thread 0x7ff5fcfed700 (LWP 21671) exited]; [New Thread 0x7ff4fcfeb700 (LWP 21673)]; [Thread 0x7ff57cfec700 (LWP 21672) exited]; [New Thread 0x7ff47cfea700 (LWP 21674)]; [Thread 0x7ff4fcfeb700 (LWP 21673) exited]; [New Thread 0x7ff3fcfe9700 (LWP 21675)]; terminate called without an active exception; [Thread 0x7ff47cfea700 (LWP 21674) exited]; [Thread 0x7ff3fcfe9700 (LWP 21675) exited]. Program received signal SIGABRT, Aborted.; 0x00007fff7e8a7067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; 56 ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt; #0 0x00007fff7e8a7067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a8448 in __GI_abort () at abort.c:89; #2 0x0000000000c3b76d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000baf9b6 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000bafa01 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x0000000000715f1b in std::vector<std::thread, std::allocator<std::thread> >::~vector() (); #6 0x00000000007bee90 in void cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::parallel_exec<cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:5551,optimiz,optimized,5551,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['optimiz'],['optimized']
Performance,"finished quantifyLibrary(); [2016-03-31 14:13:24.480] [jointLog] [info] Starting optimizer; [2016-03-31 14:13:25.441] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-03-31 14:13:25.660] [jointLog] [info] iteration = 0 | max rel diff. = 13.7627; [2016-03-31 14:13:26.460] [jointLog] [info] iteration = 100 | max rel diff. = 0.100799; [2016-03-31 14:13:27.252] [jointLog] [info] iteration = 200 | max rel diff. = 0.0452885; [2016-03-31 14:13:28.046] [jointLog] [info] iteration = 300 | max rel diff. = 0.0323517; [2016-03-31 14:13:29.037] [jointLog] [info] iteration = 400 | max rel diff. = 0.0173087; [2016-03-31 14:13:29.842] [jointLog] [info] iteration = 500 | max rel diff. = 0.0173241; [2016-03-31 14:13:30.837] [jointLog] [info] iteration = 600 | max rel diff. = 0.0131171; [2016-03-31 14:13:31.633] [jointLog] [info] iteration = 700 | max rel diff. = 0.0117939; [2016-03-31 14:13:32.631] [jointLog] [info] iteration = 800 | max rel diff. = 0.0102536; [2016-03-31 14:13:32.724] [jointLog] [info] iteration = 813 | max rel diff. = 0.00845215; [2016-03-31 14:13:32.998] [jointLog] [info] Finished optimizer; [2016-03-31 14:13:32.998] [jointLog] [info] writing output. [2016-03-31 14:13:36.554] [jointLog] [warning] NOTE: Read Lib [( ../strange_peak/19232_1_1.fastq, ../strange_peak/19232_1_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: quant_binary/libFormatCounts.txt for details; ```. of course, it takes a stupid amount of time to load the giant index the first time around, but it seems able to do this successfully on my end (using the data you shared). Do you have any idea why it may have quit? What if you try running it with `gdb`; e.g.?. ```; $ gdb /home/jorvis/salmon/bin/salmon; (gbd) r quant -p 24 -i transcripts_index -l IU -1 R1.trimmed.PE.fastq -2 R2.trimmed.PE.fastq -o transcripts_quan; ```. does that give any more info into why it's not even loading the index?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:3474,optimiz,optimizer,3474,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,3,"['load', 'optimiz']","['load', 'loading', 'optimizer']"
Performance,"finished quantifyLibrary(); [2020-06-13 06:56:12.991] [jointLog] [info] Starting optimizer; [2020-06-13 06:56:13.091] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-06-13 06:56:13.106] [jointLog] [info] iteration = 0 | max rel diff. = 8178.65; [2020-06-13 06:56:14.511] [jointLog] [info] iteration = 100 | max rel diff. = 17.6849; [2020-06-13 06:56:16.028] [jointLog] [info] iteration = 200 | max rel diff. = 6.46204; [2020-06-13 06:56:17.541] [jointLog] [info] iteration = 300 | max rel diff. = 1.8111; [2020-06-13 06:56:19.027] [jointLog] [info] iteration = 400 | max rel diff. = 12.2108; [2020-06-13 06:56:20.501] [jointLog] [info] iteration = 500 | max rel diff. = 0.616929; [2020-06-13 06:56:21.954] [jointLog] [info] iteration = 600 | max rel diff. = 0.218435; [2020-06-13 06:56:23.439] [jointLog] [info] iteration = 700 | max rel diff. = 0.068711; [2020-06-13 06:56:24.945] [jointLog] [info] iteration = 800 | max rel diff. = 0.044637; [2020-06-13 06:56:26.398] [jointLog] [info] iteration = 900 | max rel diff. = 0.0340291; [2020-06-13 06:56:27.811] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.237808; [2020-06-13 06:56:29.235] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.0764161; [2020-06-13 06:56:30.717] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.0683725; [2020-06-13 06:56:32.253] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.0990377; [2020-06-13 06:56:33.509] [jointLog] [info] iteration = 1,389 | max rel diff. = 0.00998936; [2020-06-13 06:56:33.511] [jointLog] [info] Finished optimizer; [2020-06-13 06:56:33.511] [jointLog] [info] writing output ; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; ProductName:	Mac OS X; ProductVersion:	10.15.5; BuildVersion:	19F101. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537:5329,optimiz,optimizer,5329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537,1,['optimiz'],['optimizer']
Performance,"fo] Done indexing Barcodes; [2018-06-30 22:10:53.104] [alevinLog] [info] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.30% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.06% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.64% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 9.94% zero probability fragments; [2018-06-3",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:3082,load,loading,3082,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['load'],['loading']
Performance,"fo] Done indexing Barcodes; [2018-07-19 18:26:18.301] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 18:26:18.301] [alevinLog] [info] Used Barcodes except Whitelist: 26208; [2018-07-19 18:26:18.504] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 18:26:18.505] [alevinLog] [info] parsing read library format; [2018-07-19 18:26:18.632] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 18:26:18.641] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 18:26:18.647] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 18:26:18.648] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 18:26:18.648] [stderrLog] [info] Computing transcript lengths; [2018-07-19 18:26:18.648] [stderrLog] [info] Waiting to finish loading hash; [2018-07-19 18:26:18.720] [stderrLog] [info] Done loading index; [2018-07-19 18:26:18.506] [jointLog] [info] There is 1 library.; [2018-07-19 18:26:18.629] [jointLog] [info] Loading Quasi index; [2018-07-19 18:26:18.631] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 18:26:18.720] [jointLog] [info] done; [2018-07-19 18:26:18.720] [jointLog] [info] Index contained 179 targets; [2018-07-19 18:26:18.728] [alevinLog] [error] Barcode not found in frequency table. **Desktop (please complete the following information):**; - OS: Linux; - Version:; `$ uname -a; Linux login1 3.0.101-0.47.86.1.11753.0.PTF-default #1 SMP Wed Oct 19 14:11:00 UTC 2016 (56c73f1) x86_64 x86_64 x86_64 GNU/Linux`; `$ lsb_release -a; LSB Version:	core-2.0-noarch:core-3.2-noarch:core-4.0-noarch:core-2.0-x86_64:core-3.2-x86_64:core-4.0-x86_64:desktop-4.0-amd64:desktop-4.0-noarch:graphics-2.0-amd64:graphics-2.0-noarch:graphics-3.2-amd64:graphics-3.2-noarch:graphics-4.0-amd64:graphics-4.0-noarch; Distributor ID:	SUSE LINUX; Description:	SUSE Linux Enterprise Server 11 (x86_64); Release:	11; Codename:	n/a`. **Additional context**; I included a 10K subset of reads in the tarball, which leads to t",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253:5663,Load,Loading,5663,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253,1,['Load'],['Loading']
Performance,"fo] Knee found left boundary at 11347; [2018-11-29 22:28:16.264] [alevinLog] [warning] Gauss Prediction 11502 Too far from knee prediction skipping it; [2018-11-29 22:28:16.264] [alevinLog] [info] Learned InvCov: 180.957 normfactor: 13235.2; [2018-11-29 22:28:16.264] [alevinLog] [info] Total 12346(has 999 low confidence) barcodes; [2018-11-29 22:28:16.397] [alevinLog] [info] Done True Barcode Sampling; [2018-11-29 22:28:17.414] [alevinLog] [info] Done populating Z matrix; [2018-11-29 22:28:17.434] [alevinLog] [info] Done indexing Barcodes; [2018-11-29 22:28:17.434] [alevinLog] [info] Total Unique barcodes found: 3773873; [2018-11-29 22:28:17.434] [alevinLog] [info] Used Barcodes except Whitelist: 49866; [2018-11-29 22:28:18.184] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-11-29 22:28:18.184] [alevinLog] [info] parsing read library format; [2018-11-29 22:28:18.184] [jointLog] [info] There is 1 library.; [2018-11-29 22:28:18.324] [jointLog] [info] Loading Quasi index; [2018-11-29 22:28:18.325] [jointLog] [info] Loading 32-bit quasi index; [2018-11-29 22:28:18.325] [stderrLog] [info] Loading Suffix Array; [2018-11-29 22:28:19.339] [stderrLog] [info] Loading Transcript Info; [2018-11-29 22:28:19.536] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-29 22:28:19.554] [stderrLog] [info] There were 64,431 set bits in the bit array; [2018-11-29 22:28:19.561] [stderrLog] [info] Computing transcript lengths; [2018-11-29 22:28:19.561] [stderrLog] [info] Waiting to finish loading hash; [2018-11-29 22:28:23.502] [stderrLog] [info] Done loading index; [2018-11-29 22:28:23.502] [jointLog] [info] done; [2018-11-29 22:28:23.502] [jointLog] [info] Index contained 64,431 targets. processed 178 Million fragments; hits: 212754413, hits per frag: 1.19535. [2018-11-29 22:40:56.510] [jointLog] [info] Computed 110,023 rich equivalence classes for further processing; [2018-11-29 22:40:56.510] [jointLog] [info] Counted 95,071,703 total reads in the equiv",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324:2125,Load,Loading,2125,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324,1,['Load'],['Loading']
Performance,fo] Learned InvCov: 419.096 normfactor: 100.648; [2021-04-09 12:16:37.862] [alevinLog] [info] Total 195(has 201 low confidence) barcodes; [2021-04-09 12:16:37.883] [alevinLog] [info] Done True Barcode Sampling; [2021-04-09 12:16:37.884] [alevinLog] [info] Total 15.7% reads will be thrown away because of noisy Cellular barcodes.; [2021-04-09 12:16:37.892] [alevinLog] [info] Done populating Z matrix; [2021-04-09 12:16:37.892] [alevinLog] [info] Total 0 CB got sequence corrected; [2021-04-09 12:16:37.892] [alevinLog] [info] Done indexing Barcodes; [2021-04-09 12:16:37.892] [alevinLog] [info] Total Unique barcodes found: 822; [2021-04-09 12:16:37.892] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2021-04-09 12:16:37.914] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2021-04-09 12:16:37.914] [alevinLog] [info] parsing read library format; [2021-04-09 12:16:37.914] [jointLog] [info] There is 1 library.; [2021-04-09 12:16:38.027] [jointLog] [info] Loading pufferfish index; [2021-04-09 12:16:38.027] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 1.984 s; -----------------------------------------; size = 1802892; -----------------------------------------; | Loading contig offsets | Time = 8.5565 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 195.36 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 114.13 ms; -----------------------------------------; size = 191273074; Number of ones: 1802891; Number of ones per inventory item: 512; Inventory entries filled: 3522; -----------------------------------------; | Loading contig boundaries | Time = 572.65 ms; -----------------------------------------; size = 191273074; -----------------------------------------; | Loading sequence | Time = 61.761 ms; -------------------------,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647:4097,Load,Loading,4097,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647,1,['Load'],['Loading']
Performance,"fo] Number of fragments discarded because they are best-mapped to decoys : 3,572,798; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 54,775; [2022-05-14 00:49:06.636] [jointLog] [info] Mapping rate = 62.2613%. [2022-05-14 00:49:06.636] [jointLog] [info] finished quantifyLibrary(); [2022-05-14 00:49:06.643] [jointLog] [info] Starting optimizer; [2022-05-14 00:49:06.706] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2022-05-14 00:49:06.713] [jointLog] [info] iteration = 0 | max rel diff. = 8788.91; [2022-05-14 00:49:07.363] [jointLog] [info] iteration = 100 | max rel diff. = 12.9125; [2022-05-14 00:49:08.016] [jointLog] [info] iteration = 200 | max rel diff. = 10.1452; [2022-05-14 00:49:08.665] [jointLog] [info] iteration = 300 | max rel diff. = 10.5557; [2022-05-14 00:49:09.322] [jointLog] [info] iteration = 400 | max rel diff. = 5.35911; [2022-05-14 00:49:09.990] [jointLog] [info] iteration = 500 | max rel diff. = 0.278805; [2022-05-14 00:49:10.647] [jointLog] [info] iteration = 600 | max rel diff. = 4.69875; [2022-05-14 00:49:11.295] [jointLog] [info] iteration = 700 | max rel diff. = 0.696517; [2022-05-14 00:49:11.994] [jointLog] [info] iteration = 800 | max rel diff. = 3.63395; [2022-05-14 00:49:12.648] [jointLog] [info] iteration = 900 | max rel diff. = 0.0421211; [2022-05-14 00:49:13.295] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.150166; [2022-05-14 00:49:13.608] [jointLog] [info] iteration = 1,047 | max rel diff. = 0.00869236; [2022-05-14 00:49:13.620] [jointLog] [info] Finished optimizer; [2022-05-14 00:49:13.620] [jointLog] [info] writing output . I thought that the difference between the 84% from STAR and 57% from Salmon will be due mapping to introns or intergenic region (non-coding part) which I will get if I run salmon with the full decoy index but I got only 62% mapping.; Am I missing something here, please?; Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943:5717,optimiz,optimizer,5717,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943,1,['optimiz'],['optimizer']
Performance,fo] done; [2017-07-18 17:14:21.207] [jointLog] [info] Index contained 107368 targets; [2017-07-18 17:14:22.320] [jointLog] [info] Automatically detected most likely library type as SF; [2017-07-18 17:22:52.788] [jointLog] [info] Computed 280679 rich equivalence classes for further processing; [2017-07-18 17:22:52.788] [jointLog] [info] Counted 27517563 total reads in the equivalence classes; [2017-07-18 17:22:52.850] [jointLog] [info] Mapping rate = 37.9965%. [2017-07-18 17:22:52.850] [jointLog] [info] finished quantifyLibrary(); [2017-07-18 17:22:52.853] [jointLog] [info] Starting optimizer; [2017-07-18 17:22:52.789] [fileLog] [info]; At end of round 0; ==================; Observed 72421398 total fragments (72421398 in most recent round). [2017-07-18 17:22:52.981] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2017-07-18 17:22:52.990] [jointLog] [info] iteration = 0 | max rel diff. = 9.36177; [2017-07-18 17:22:53.935] [jointLog] [info] iteration = 100 | max rel diff. = 0.0782409; [2017-07-18 17:22:54.889] [jointLog] [info] iteration = 200 | max rel diff. = 0.0347085; [2017-07-18 17:22:55.784] [jointLog] [info] iteration = 300 | max rel diff. = 0.0249461; [2017-07-18 17:22:56.790] [jointLog] [info] iteration = 400 | max rel diff. = 0.0188653; [2017-07-18 17:22:57.752] [jointLog] [info] iteration = 500 | max rel diff. = 0.0157419; [2017-07-18 17:22:58.688] [jointLog] [info] iteration = 600 | max rel diff. = 0.0128394; [2017-07-18 17:22:59.422] [jointLog] [info] iteration = 681 | max rel diff. = 0.00982758; [2017-07-18 17:22:59.432] [jointLog] [info] Finished optimizer; [2017-07-18 17:22:59.432] [jointLog] [info] writing output. [2017-07-18 17:22:59.642] [jointLog] [info] Computing gene-level abundance estimates; [2017-07-18 17:23:27.020] [jointLog] [info] There were 128717 transcripts mapping to 51912 genes; [2017-07-18 17:23:27.021] [jointLog] [info] Aggregating expressions to gene level; [2017-07-18 17:23:27.021] [jointLog] [info] done; ```,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/143:2141,optimiz,optimizer,2141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/143,1,['optimiz'],['optimizer']
Performance,"fo] parsing read library format; [2022-12-03 16:17:47.714] [alevinLog] [info] Starting optimizer. [2022-12-03 16:17:47.868] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2022-12-03 16:17:47.868] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2022-12-03 16:18:01.362] [alevinLog] [info] Total 17192510.00 UMI after deduplicating.; [2022-12-03 16:18:01.362] [alevinLog] [info] Total 1333800 BiDirected Edges.; [2022-12-03 16:18:01.362] [alevinLog] [info] Total 181036 UniDirected Edges.; [2022-12-03 16:18:01.432] [alevinLog] [info] Clearing EqMap; Might take some time.; [2022-12-03 16:18:08.522] [alevinLog] [info] Starting white listing of 5460 cells; [2022-12-03 16:18:08.522] [alevinLog] [info] Starting to make feature Matrix; [2022-12-03 16:18:08.535] [alevinLog] [info] Done making feature Matrix; [2022-12-03 16:18:09.324] [alevinLog] [info] Finished white listing; [2022-12-03 16:18:09.513] [alevinLog] [info] Finished optimizer. Salmon_quant log:; [2022-12-03 15:43:11.767] [jointLog] [info] setting maxHashResizeThreads to 48; [2022-12-03 15:43:11.767] [jointLog] [info] Fragment incompatibility prior below threshold. ; Incompatible fragments will be ignored.; [2022-12-03 15:43:11.767] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2022-12-03 15:43:11.767] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2022-12-03 15:43:11.767] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes.; [2022-12-03 15:43:11.767] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2022-12-03 15:43:11.767] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/814:4045,optimiz,optimizer,4045,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/814,1,['optimiz'],['optimizer']
Performance,"fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 15. [2021-04-16 16:57:15.488] [jointLog] [info] Number of mappings discarded because of alignment score : 86,602; [2021-04-16 16:57:15.488] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 124,571; [2021-04-16 16:57:15.488] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2021-04-16 16:57:15.488] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 32,784; [2021-04-16 16:57:15.493] [jointLog] [warning] Only 10700 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2021-04-16 16:57:15.493] [jointLog] [info] Mapping rate = 0.0417748%. [2021-04-16 16:57:15.493] [jointLog] [info] finished quantifyLibrary(); [2021-04-16 16:57:15.535] [jointLog] [info] Starting optimizer; [2021-04-16 16:57:15.564] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-04-16 16:57:15.568] [jointLog] [info] iteration = 0 | max rel diff. = 6.66952; [2021-04-16 16:57:16.080] [jointLog] [info] iteration = 100 | max rel diff. = 0.0161125; [2021-04-16 16:57:16.555] [jointLog] [info] iteration = 194 | max rel diff. = 0.000157223; [2021-04-16 16:57:16.558] [jointLog] [info] Finished optimizer; [2021-04-16 16:57:16.558] [jointLog] [info] writing output. [2021-04-16 16:57:16.681] [jointLog] [info] Computing gene-level abundance estimates; [2021-04-16 16:57:16.775] [jointLog] [info] There were 77689 transcripts mapping to 26673 genes; [2021-04-16 16:57:16.775] [jointLog] [info] NOTE: We recommend using tximport (https://bioconductor.org/packages/release/bioc/html/tximport.html) for aggregating transcript-level salmon abundance estimates to the gene level. It is more versatile, exposes more features, and allows considering multi-sample information du",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:2653,optimiz,optimizer,2653,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['optimiz'],['optimizer']
Performance,"g bifurcations time: 8; True marks count: 335754103; Edges construction time: 117. Distinct junctions = 14895414. TwoPaCo::buildGraphMain:: allocated with scalable_malloc; freeing.; TwoPaCo::buildGraphMain:: Calling scalable_allocation_command(TBBMALLOC_CLEAN_ALL_BUFFERS, 0);; allowedIn: 21; Max Junction ID: 14896947; seen.size():119175585 kmerInfo.size():14896948; approximateContigTotalLength: 1087128541; counters for complex kmers:; (prec>1 & succ>1)=3126880 | (succ>1 & isStart)=773 | (prec>1 & isEnd)=671 | (isStart & isEnd)=30; contig count: 24974474 element count: 3020582944 complex nodes: 3128354; # of ones in rank vector: 24974473; [2022-06-01 18:28:09.708] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2022-06-01 18:28:09.708] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory Mus_musculus.GRCm39_v1.8.0_decoy.index; size = 3020582944. | Loading contigs | Time = 469.49 ms. size = 3020582944. | Loading contig boundaries | Time = 242.8 ms. Number of ones: 24974473; Number of ones per inventory item: 512; Inventory entries filled: 48779; 24974473; [2022-06-01 18:28:15.208] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2022-06-01 18:28:15.619] [puff::index::jointLog] [info] contig count for validation: 24,974,473; [2022-06-01 18:28:31.732] [puff::index::jointLog] [info] Total # of Contigs : 24,974,473; [2022-06-01 18:28:31.732] [puff::index::jointLog] [info] Total # of numerical Contigs : 24,974,473; [2022-06-01 18:28:33.958] [puff::index::jointLog] [info] Total # of contig vec entries: 345,523,986; [2022-06-01 18:28:33.958] [puff::index::jointLog] [info] bits per offset entry 29; [2022-06-01 18:28:53.341] [puff::index::jointLog] [info] Done constructing the contig vector. 24974474; [2022-06-01 18:29:07.368] [puff::index::jointLog] [info] # segments = 24,974,473; [2022-06-01 18:29:07.368] [puff::index::jointLog] [info] total length = 3,020,582,944; [202",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783:12610,Load,Loading,12610,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783,1,['Load'],['Loading']
Performance,"g command, and got this output:. ```; $LD_LIBRARY_PATH=~/SoftwareStaging/salmon/lib:$LD_LIBRARY_PATH ./salmon quant --index Salmon_index_hg38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --us; eVBOpt --output test_quant --numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1312,Load,Loading,1312,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['Load'],['Loading']
Performance,"g file in the folder of logs:; ```{shell}; $cat salmon_quant.log ; [2023-03-07 06:47:10.266] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-03-07 06:47:10.266] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-07 06:47:10.266] [jointLog] [info] parsing read library format; [2023-03-07 06:47:10.266] [jointLog] [info] There is 1 library.; [2023-03-07 06:47:10.412] [jointLog] [info] Loading Quasi index; [2023-03-07 06:47:10.412] [jointLog] [info] Loading 64-bit quasi index; [2023-03-07 06:51:59.707] [jointLog] [info] done; [2023-03-07 06:51:59.707] [jointLog] [info] Index contained 777288 targets; [2023-03-07 06:52:10.338] [jointLog] [info] Automatically detected most likely library type as IU; [2023-03-07 06:54:46.142] [fileLog] [info] ; At end of round 0; ==================; Observed 40535435 total fragments (40535435 in most recent round). [2023-03-07 06:54:46.141] [jointLog] [info] Computed 1249282 rich equivalence classes for further processing; [2023-03-07 06:54:46.141] [jointLog] [info] Counted 8925446 total reads in the equivalence classes ; [2023-03-07 06:54:46.282] [jointLog] [warning] 0.0015986% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 20. [2023-03-07 06:54:46.282] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 2762; [2023-03-07 06:54:4",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:2466,Load,Loading,2466,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,"g instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2738,Load,Loadable,2738,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"g it for different sample names and hence output directories). It works correctly for some samples and errs out with others like below. ```; Command executed:. salmon --no-version-check quant --threads 16 --seqBias --validateMappings; --numBootstraps 100 -l A --writeUnmappedNames -i <my_salmon_index> ; -r sample1.fastq.gz -o salmon_sample1. Command exit status:; 1. Command output:; (empty). Command error:; ### salmon (mapping-based) v1.2.0; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ threads ] => { 16 }; ### [ seqBias ] => { }; ### [ validateMappings ] => { }; ### [ numBootstraps ] => { 100 }; ### [ libType ] => { A }; ### [ writeUnmappedNames ] => { }; ### [ index ] => { my_salmon_index }; ### [ unmatedReads ] => { sample1.fastq.gz }; ### [ output ] => { salmon_sample1 }; Logs will be written to salmon_sample1/logs; [2020-04-22 19:51:56.392] [jointLog] [info] setting maxHashResizeThreads to 16; [2020-04-22 19:51:56.392] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-04-22 19:51:56.392] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-04-22 19:51:56.392] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-04-22 19:51:56.392] [jointLog] [info] parsing read library format; [2020-04-22 19:51:56.392] [jointLog] [info] There is 1 library.; -----------------------------------------; | Loading contig table | Time = 72.775 us; -----------------------------------------; [2020-04-22 19:51:56.470] [jointLog] [info] Loading pufferfish index; [2020-04-22 19:51:56.470] [jointLog] [info] Loading dense pufferfish index.; Exception : [Failed to read 8 bytes from input stream! Read 0]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.; ```. Why does it say `salmon quant was invoked improperly`",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/512:1732,Load,Loading,1732,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/512,3,['Load'],['Loading']
Performance,g38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --us; eVBOpt --output test_quant --numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:45:33.234] [jointLog] [info] Starting opti,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1452,Load,Loading,1452,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['Load'],['Loading']
Performance,g38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --useVBOpt --output test_quant --; numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:38:54.413] [jointLog] [info] parsing read library format; [2016-12-13 22:38:54.413] [jointLog] [info] There is 1 library.; [2016-12-13 22:38:56.240] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:38:56.240] [jointLog] [info] Loading Quasi index; [2016-12-13 22:38:56.240] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:39:01.268] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:40:22.618] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 22:40:22.619] [jointLog] [info] Starting opti,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:1579,Load,Loading,1579,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,1,['Load'],['Loading']
Performance,"g<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:554; #16 densityCalculator<alevin::protocols::Chromium> (parser=<optimized out>, aopt=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; (gdb); #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x00000000006f891b in ~thread (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/local/include/c++/5.4.0/thread:151; #6 _Destroy<std::thread> (__pointer=<optimized out>) at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:93; #7 __destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:103; #8 _Destroy<std::thread*> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:126; #9 _Destroy<std::thread*, std::thread> (__last=<optimized out>, __first=<optimized out>); at /u/user/local/include/c++/5.4.0/bits/stl_construct.h:151; #10 std::vector<std::thread, std::allocator<std::thread> >::~vector (this=<optimized out>, __in_chrg=<optimized out>); at /u/user/lo",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:12982,optimiz,optimized,12982,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,"g] [info] # Barcodes Used: 287883370 / 287983348.; [2019-01-29 15:49:35.112] [alevinLog] [info] Total 49.4292% reads will be thrown away because of noisy Cellular barcodes.; [2019-01-29 15:49:35.112] [alevinLog] [info] Total 4000(has 1000 low confidence) barcodes; [2019-01-29 15:49:35.251] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 15:49:35.896] [alevinLog] [info] Done populating Z matrix; [2019-01-29 15:49:35.994] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 15:49:35.994] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-29 15:49:35.994] [alevinLog] [info] Used Barcodes except Whitelist: 105901; [2019-01-29 15:49:36.107] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 15:49:36.107] [alevinLog] [info] parsing read library format; [2019-01-29 15:49:36.415] [stderrLog] [info] Loading Suffix Array; [2019-01-29 15:49:36.107] [jointLog] [info] There is 1 library.; [2019-01-29 15:49:36.373] [jointLog] [info] Loading Quasi index; [2019-01-29 15:49:36.396] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 15:49:50.479] [stderrLog] [info] Loading Transcript Info; [2019-01-29 15:49:55.550] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 15:49:56.036] [stderrLog] [info] There were 58,086 set bits in the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.677] [jointLog] [info] Counted 58,047,553 total reads in the equivalence classes; [2019-01-29 16:05:46.678] [jointLog] [warning] Foun",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:1369,Load,Loading,1369,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['Load'],['Loading']
Performance,"g] [info] Automatically detected most likely library type as IU; [2023-03-07 06:54:46.142] [fileLog] [info] ; At end of round 0; ==================; Observed 40535435 total fragments (40535435 in most recent round). [2023-03-07 06:54:46.141] [jointLog] [info] Computed 1249282 rich equivalence classes for further processing; [2023-03-07 06:54:46.141] [jointLog] [info] Counted 8925446 total reads in the equivalence classes ; [2023-03-07 06:54:46.282] [jointLog] [warning] 0.0015986% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 20. [2023-03-07 06:54:46.282] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 2762; [2023-03-07 06:54:46.290] [jointLog] [info] Mapping rate = 22.0189%. [2023-03-07 06:54:46.290] [jointLog] [info] finished quantifyLibrary(); [2023-03-07 06:54:46.290] [jointLog] [info] Starting optimizer; [2023-03-07 06:54:46.960] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-03-07 06:54:47.001] [jointLog] [info] iteration = 0 | max rel diff. = 433.028; [2023-03-07 06:54:50.676] [jointLog] [info] iteration = 100 | max rel diff. = 0.124404; [2023-03-07 06:54:54.362] [jointLog] [info] iteration = 200 | max rel diff. = 0.0697214; [2023-03-07 06:54:58.083] [jointLog] [info] iteration = 300 | max rel diff. = 0.0335353; [2023-03-07 06:55:01.780] [jointLog] [info] iteration = 400 | max rel diff. = 0.0247299; [2023-03-07 06:55:05.539] [jointLog] [info] iteration = 500 | max rel diff. = 0.0189304; [2023-03-07 06:55:09.278] [jointLog] [info] iteration = 600 | max rel diff. = 0.017332; [2023-03-07 06:55:13.044] [jointLog] [info] iteration = 700 | max rel diff. = 0.013562; [2023-03-07 06:55:16.780] [jointLog] [info] iteration = 800 | max rel diff. = 0.0118759; [2023-03-07 06:55:20.542] [jointLog] [info] iteration = 900 | max rel diff. = 0.0114777; [2023-03-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:3654,optimiz,optimizer,3654,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['optimiz'],['optimizer']
Performance,"g] [info] Knee found left boundary at 11955 ; [2018-12-06 11:16:54.977] [alevinLog] [info] Gauss Corrected Boundary at 4345 ; [2018-12-06 11:16:54.977] [alevinLog] [info] Learned InvCov: 713.683 normfactor: 1183.93; [2018-12-06 11:16:54.985] [alevinLog] [info] Total 31.0106% reads will be thrown away because of noisy Cellular barcodes.; [2018-12-06 11:16:54.985] [alevinLog] [info] Total 5344(has 999 low confidence) barcodes; [2018-12-06 11:16:55.059] [alevinLog] [info] Done True Barcode Sampling; [2018-12-06 11:16:55.395] [alevinLog] [info] Done populating Z matrix; [2018-12-06 11:16:55.453] [alevinLog] [info] Done indexing Barcodes; [2018-12-06 11:16:55.453] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-06 11:16:55.453] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6112,Load,Loading,6112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['Load'],['Loading']
Performance,"g] [info] iteration 11, adjusting effective lengths to account for biase; s; [2016-12-13 12:52:42.161] [jointLog] [info] Computed expected counts (for bias correction); [2016-12-13 12:52:42.162] [jointLog] [info] processed bias for 0.0% of the transcripts; [2016-12-13 12:53:40.240] [jointLog] [info] processed bias for 10.0% of the transcripts; [2016-12-13 12:54:40.032] [jointLog] [info] processed bias for 20.0% of the transcripts; [2016-12-13 12:55:40.277] [jointLog] [info] processed bias for 30.0% of the transcripts; [2016-12-13 12:56:41.225] [jointLog] [info] processed bias for 40.0% of the transcripts; [2016-12-13 12:57:41.888] [jointLog] [info] processed bias for 50.0% of the transcripts; [2016-12-13 12:58:37.148] [jointLog] [info] processed bias for 100.0% of the transcripts; [2016-12-13 12:58:37.809] [jointLog] [info] iteration = 100 | max rel diff. = 0.272558; [2016-12-13 12:58:38.544] [jointLog] [info] iteration = 200 | max rel diff. = 0.213603; [2016-12-13 12:58:39.275] [jointLog] [info] iteration = 300 | max rel diff. = 0.254034; [2016-12-13 12:58:40.017] [jointLog] [info] iteration = 400 | max rel diff. = 0.120455; [2016-12-13 12:58:40.754] [jointLog] [info] iteration = 500 | max rel diff. = 0.020828; [2016-12-13 12:58:41.487] [jointLog] [info] iteration = 600 | max rel diff. = 0.0153173; [2016-12-13 12:58:42.222] [jointLog] [info] iteration = 700 | max rel diff. = 0.0746574; [2016-12-13 12:58:42.359] [jointLog] [info] iteration = 720 | max rel diff. = 0.00908527; [2016-12-13 12:58:42.368] [jointLog] [info] Finished optimizer; [2016-12-13 12:58:42.368] [jointLog] [info] writing output . [2016-12-13 12:58:42.943] [jointLog] [info] Starting Gibbs Sampler; 0% [> ] ETA > 1 week ; ```. It remained stuck at 0% until I terminated it with Control+C around 2016-12-13 14:21, nearly 1.5 hours after the Gibbs sample started. Running it again on the same sample, I see the same behavior. I'm currently re-running with different options to see if that makes a difference.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:4647,optimiz,optimizer,4647,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['optimiz'],['optimizer']
Performance,"g] [info] iteration = 1200 | max rel diff. = 0.11409; [2023-02-22 16:42:12.875] [jointLog] [info] iteration = 1300 | max rel diff. = 3.98708; [2023-02-22 16:42:16.211] [jointLog] [info] iteration = 1400 | max rel diff. = 0.146333; [2023-02-22 16:42:19.531] [jointLog] [info] iteration = 1500 | max rel diff. = 0.118365; [2023-02-22 16:42:22.871] [jointLog] [info] iteration = 1600 | max rel diff. = 0.073492; [2023-02-22 16:42:26.203] [jointLog] [info] iteration = 1700 | max rel diff. = 0.201421; [2023-02-22 16:42:29.533] [jointLog] [info] iteration = 1800 | max rel diff. = 0.127739; [2023-02-22 16:42:32.868] [jointLog] [info] iteration = 1900 | max rel diff. = 0.042789; [2023-02-22 16:42:36.215] [jointLog] [info] iteration = 2000 | max rel diff. = 0.0303234; [2023-02-22 16:42:39.544] [jointLog] [info] iteration = 2100 | max rel diff. = 0.0413186; [2023-02-22 16:42:40.309] [jointLog] [info] iteration = 2124 | max rel diff. = 0.00863591; [2023-02-22 16:42:40.317] [jointLog] [info] Finished optimizer; [2023-02-22 16:42:40.317] [jointLog] [info] writing output . [2023-02-22 16:42:40.556] [jointLog] [info] Computing gene-level abundance estimates; [2023-02-22 16:45:41.884] [jointLog] [info] There were 246511 transcripts mapping to 61552 genes; [2023-02-22 16:45:41.884] [jointLog] [info] NOTE: We recommend using tximport (https://bioconductor.org/packages/release/bioc/html/tximport.html) for aggregating transcript-level salmon abundance estimates to the gene level. It is more versatile, exposes more features, and allows considering multi-sample information during aggregation.; [2023-02-22 16:45:42.113] [jointLog] [info] Aggregating expressions to gene level; [2023-02-22 16:45:42.215] [jointLog] [info] done; ```. - Unsuccessful log:. ```; Version Info: This is the most recent version of salmon.; ### salmon (selective-alignment-based) v1.9.0; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ geneMap ] => { /home/cfos/Documents/Collaboration/Ece/2023_Bulk/work/5d/a12",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:6898,optimiz,optimizer,6898,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['optimiz'],['optimizer']
Performance,"gencode_v43/primary_comprehensive/SalmonIndex }; ### [ libType ] => { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.fastq }; ### [ output ] => { salmon_out }; ### [ threads ] => { 1 }; Logs will be written to salmon_out/logs; [2023-11-30 09:36:58.680] [jointLog] [info] setting maxHashResizeThreads to 1; [2023-11-30 09:36:58.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:36:58.680] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:36:58.680] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:36:58.680] [jointLog] [info] parsing read library format; [2023-11-30 09:36:58.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:6263,Load,Loading,6263,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"gene counts in csv format; 0.00215799	7.4911e-08	0.000194712	11697.8	; 0.00705206	1.19109e-07	30039.7	29692.8	; [2019-01-29 09:55:59.105] [alevinLog] [info] Finished dumping csv counts; [2019-01-29 09:55:59.106] [alevinLog] [info] Starting white listing; [2019-01-29 09:55:59.107] [alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2019-01-29 09:55:59.107] [alevinLog] [info] Total 138 barcodes found; [2019-01-29 09:55:59.107] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 09:55:59.107] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 09:55:59.107] [alevinLog] [info] Starting to make feature Matrix; [2019-01-29 09:55:59.115] [alevinLog] [info] Done making regular featues; [2019-01-29 09:55:59.115] [alevinLog] [info] Done making feature Matrix; [2019-01-29 09:55:59.123] [alevinLog] [info] Finished white listing; [2019-01-29 09:55:59.126] [alevinLog] [info] Finished optimizer; ``` . Concat fastq:; ```; salmon alevin -l ISR -1 big.fastq.1.gz -2 big.fastq.2.gz --chromium -i geneset.dir/geneset_coding_exons.salmon.index/ -o salmon.dir/ --tgMap transcript2geneMap.tsv --dumpCsvCounts; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of Salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to salmon.dir/logs; ### alevin (dscRNA-seq quantification) v0.11.3; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { big.fastq.1.gz }; ### [ mates2 ] => { big.fastq.2.gz }; ### [ chromium ] => { }; ### [ index ] => { geneset.dir/geneset_coding_exons.salmon.index/ }; ### [ output ] => { salmon.dir/ }; ### [ tgMap ] => { transcript2geneMap.tsv }; ### [ dumpCsvCounts ] =>",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:5806,optimiz,optimizer,5806,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['optimiz'],['optimizer']
Performance,"generate; [2024-01-27 01:10:28.376] [jointLog] [info] iteration = 0 | max rel diff. = 174.042; [2024-01-27 01:10:28.453] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2024-01-27 01:10:52.990] [jointLog] [info] Computed expected counts (for bias correction); [2024-01-27 01:10:52.990] [jointLog] [info] processed bias for 0.0% of the transcripts; [2024-01-27 01:10:55.410] [jointLog] [info] processed bias for 10.0% of the transcripts; [2024-01-27 01:10:57.934] [jointLog] [info] processed bias for 20.0% of the transcripts; [2024-01-27 01:11:00.570] [jointLog] [info] processed bias for 30.0% of the transcripts; [2024-01-27 01:11:03.092] [jointLog] [info] processed bias for 40.0% of the transcripts; [2024-01-27 01:11:05.416] [jointLog] [info] processed bias for 50.0% of the transcripts; [2024-01-27 01:11:07.798] [jointLog] [info] processed bias for 60.0% of the transcripts; [2024-01-27 01:11:10.207] [jointLog] [info] processed bias for 70.0% of the transcripts; [2024-01-27 01:11:12.614] [jointLog] [info] processed bias for 80.0% of the transcripts; [2024-01-27 01:11:15.076] [jointLog] [info] processed bias for 90.0% of the transcripts; [2024-01-27 01:11:17.845] [jointLog] [info] processed bias for 100.0% of the transcripts; [2024-01-27 01:11:18.538] [jointLog] [info] iteration = 100 | max rel diff. = 3.26654; [2024-01-27 01:11:19.295] [jointLog] [info] iteration = 200 | max rel diff. = 0.0770813; [2024-01-27 01:11:20.053] [jointLog] [info] iteration = 300 | max rel diff. = 0.194297; [2024-01-27 01:11:20.809] [jointLog] [info] iteration = 400 | max rel diff. = 0.0224582; [2024-01-27 01:11:21.021] [jointLog] [info] iteration = 429 | max rel diff. = 0.00843674; [2024-01-27 01:11:21.067] [jointLog] [info] Finished optimizer; [2024-01-27 01:11:21.067] [jointLog] [info] writing output ; ```. Is it normal for such converted fastq files?; Thanks a lot!. _Originally posted by @KOBE24DUNK in https://github.com/COMBINE-lab/salmon/discussions/906_",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/908:4812,optimiz,optimizer,4812,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/908,1,['optimiz'],['optimizer']
Performance,"h 192M of ram.; Salmon quasi mode aborted with following message:; processed 14,000,000 fragmentsntLog] [info] Automatically detected most likely library type as SR; hits: 108,161,934; hits per frag: 8.53594terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; This happens when using a gffread-created transcripts.fa. Salmon built the index that have 309,566 targets. Do I just need more RAM? Or it is a bug.; ; More info as below:; [2018-10-24 11:14:15.505] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-10-24 11:14:15.505] [jointLog] [info] parsing read library format; [2018-10-24 11:14:15.505] [jointLog] [info] There is 1 library.; [2018-10-24 11:14:15.627] [jointLog] [info] Loading Quasi index; [2018-10-24 11:14:15.629] [jointLog] [info] Loading 32-bit quasi index; [2018-10-24 11:14:15.633] [stderrLog] [info] Loading Suffix Array; [2018-10-24 11:14:17.090] [stderrLog] [info] Loading Transcript Info; [2018-10-24 11:14:17.691] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-10-24 11:14:18.293] [stderrLog] [info] There were 309,566 set bits in the bit array; [2018-10-24 11:14:18.819] [stderrLog] [info] Computing transcript lengths; [2018-10-24 11:14:18.820] [stderrLog] [info] Waiting to finish loading hash; [2018-10-24 11:15:46.171] [jointLog] [info] done; [2018-10-24 11:15:46.171] [jointLog] [info] Index contained 309,566 targets; [2018-10-24 11:15:46.171] [stderrLog] [info] Done loading index. **To Reproduce**; Steps and data to reproduce the behavior:. Specifically, please provide at least the following information:. * Which version of salmon was used? 0.11.3; * How was salmon installed (compiled, downloaded executable, through bioconda)?. downloaded execitable. * Which reference (e.g. transcriptome) was used?; human; * Which read files were used?; * Which which program options were used?; All default. **Expected behavior**; A clear and concise description of",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/304:1139,Load,Loading,1139,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/304,1,['Load'],['Loading']
Performance,"h Barcode Processing; Moving to Quantify; > ; > processed 52 Million fragmentsvinLog] [info] parsing read library format; > hits: 0, hits per frag: 0; > ; > [2020-06-03 13:55:42.905] [alevinLog] [info] Starting optimizer; > ; > [2020-06-03 13:55:42.931] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.931] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0.00 UMI after deduplicating.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 BiDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [info] Total 0 UniDirected Edges.; > [2020-06-03 13:55:42.933] [alevinLog] [warning] Skipped 50091 barcodes due to No mapped read; > [2020-06-03 13:55:42.934] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-03 13:55:42.940] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 200.Can't performing whitelisting; Skipping; > [2020-06-03 13:55:42.940] [alevinLog] [info] Finished optimizer; > `. I also tried . `salmon alevin -l ISR --chromium --featureStart 19 --featureLength 21 --tgMap guide_to_gene.tsv`. But I get the following output. > `; > [2020-06-03 13:47:17.330] [alevinLog] [info] Found 64 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); > [2020-06-03 13:47:17.330] [alevinLog] [info] Filled with 64 txp to gene entries ; > [2020-06-03 13:47:17.330] [alevinLog] [info] Found all transcripts to gene mappings; > [2020-06-03 13:47:17.336] [alevinLog] [info] Processing barcodes files (if Present) ; > ; > processed 52 Million barcodes; > ; > [2020-06-03 13:48:30.047] [alevinLog] [info] Done barcode density calculation.; > [2020-06-03 13:48:30.047] [alevinLog] [info] # Barcodes Used: 52200250 / 52200250.; > [2020-06-03 13:48:33.285] [alevinLog] [info] Knee found left boundary at 1174 ; > [2020-06-03 13:48:34.501] [alevinLog] [info] Gauss Corrected Boundary at 148 ; > [2020-06-0",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531:3670,perform,performing,3670,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531,1,['perform'],['performing']
Performance,"hResizeThreads to 8; [2023-09-28 04:51:02.450] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-09-28 04:51:02.450] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-09-28 04:51:02.450] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-09-28 04:51:02.450] [jointLog] [info] parsing read library format; [2023-09-28 04:51:02.450] [jointLog] [info] There is 1 library.; [2023-09-28 04:51:02.450] [jointLog] [info] Loading pufferfish index; [2023-09-28 04:51:02.451] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:3350,Load,Loading,3350,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"he bit array; [2016-12-13 12:44:44.629] [stderrLog] [info] Computing transcript lengths; [2016-12-13 12:44:44.629] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 12:44:44.629] [stderrLog] [info] Done loading index; [2016-12-13 12:44:44.629] [jointLog] [info] done; [2016-12-13 12:44:44.629] [jointLog] [info] Index contained 182608 targets; [2016-12-13 12:44:49.583] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in ; single-end libraries. Please use this option with caution. processed 19000000 fragments; hits: 65897660; hits per frag: 3.46963. [2016-12-13 12:46:51.776] [jointLog] [info] Computed 137534 rich equivalence classes for further processin; g; [2016-12-13 12:46:51.776] [jointLog] [info] Counted 16265961 total reads in the equivalence classes . [2016-12-13 12:46:51.786] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 12:46:51.786] [jointLog] [info] finished quantifyLibrary(); [2016-12-13 12:46:51.786] [jointLog] [info] Starting optimizer; [2016-12-13 12:46:51.867] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-13 12:46:51.877] [jointLog] [info] iteration = 0 | max rel diff. = 299.948; [2016-12-13 12:46:51.959] [jointLog] [info] iteration 11, adjusting effective lengths to account for biase; s; [2016-12-13 12:52:42.161] [jointLog] [info] Computed expected counts (for bias correction); [2016-12-13 12:52:42.162] [jointLog] [info] processed bias for 0.0% of the transcripts; [2016-12-13 12:53:40.240] [jointLog] [info] processed bias for 10.0% of the transcripts; [2016-12-13 12:54:40.032] [jointLog] [info] processed bias for 20.0% of the transcripts; [2016-12-13 12:55:40.277] [jointLog] [info] processed bias for 30.0% of the transcripts; [2016-12-13 12:56:41.225] [jointLog] [info] processed bias for 40.0% of the transcripts; [2016-12-13 12:57:41.888] [jointLog] [info] processed bias for 50.0% of the transcripts; [2016-12-13 12:58:37.148] [jointLog] [info] processed bias for 100.0% o",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:2867,optimiz,optimizer,2867,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['optimiz'],['optimizer']
Performance,"hed to using precompiled binaries, version 0.6.0. Now working on a new server running CentOS Linux release 7.1.1503. I was able to successfully generate my index, then started running the quantification step. Here is my command:. `$ /home/jorvis/salmon/bin/salmon quant -p 24 -i transcripts_index -l IU -1 R1.trimmed.PE.fastq -2 R2.trimmed.PE.fastq -o transcripts_quan`. This host has 48 cores and 128GB RAM. . And here is the STDOUT. ```; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 24 }; # [ index ] => { transcripts_index }; # [ libType ] => { IU }; # [ mates1 ] => { R1.trimmed.PE.fastq }; # [ mates2 ] => { R2.trimmed.PE.fastq }; # [ output ] => { transcripts_quan }; Logs will be written to transcripts_quan/logs; [2016-03-30 15:50:48.489] [jointLog] [info] parsing read library format; there is 1 lib; Loading 64-bit quasi index[2016-03-30 15:50:48.543] [jointLog] [info] Loading Quasi index; [2016-03-30 15:50:48.544] [stderrLog] [info] Loading Suffix Array; [2016-03-30 15:50:48.544] [stderrLog] [info] Loading Position Hash; [2016-03-30 15:50:58.359] [stderrLog] [info] Loading Transcript Info; [2016-03-30 15:50:59.932] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-30 15:51:00.610] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-30 15:51:00.917] [stderrLog] [info] Computing transcript lengths; [2016-03-30 15:51:00.925] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-30 15:51:08.499] [jointLog] [info] done; [2016-03-30 15:51:08.499] [stderrLog] [info] Done loading index. Segmentation fault; ```. The only log file I see is this one: transcripts_quan/logs/salmon_quant.log. $ cat salmon_quant.log ; [2016-03-30 15:50:48.489] [jointLog] [info] parsing read library format; [2016-03-30 15:50:48.543] [jointLog] [info] Loading Quasi index; [2016-03-30 15:51:08.499] [jointLog] [info] done",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54:1004,Load,Loading,1004,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54,8,"['Load', 'load']","['Loading', 'loading']"
Performance,"hello! have you by any chance figured it out? I have quite similiar problem. . I am running salmon v.1.1.0 on my ubuntu machine with 128GB of RAM. I set the limit for vitrual memory at ~75GB to not overload the system:. ```bash; ‚óã ‚Üí ulimit -a; core file size (blocks, -c) 0; data seg size (kbytes, -d) unlimited; scheduling priority (-e) 0; file size (blocks, -f) unlimited; pending signals (-i) 514510; max locked memory (kbytes, -l) 65536; max memory size (kbytes, -m) unlimited; open files (-n) 1024; pipe size (512 bytes, -p) 8; POSIX message queues (bytes, -q) 819200; real-time priority (-r) 0; stack size (kbytes, -s) 8192; cpu time (seconds, -t) unlimited; max user processes (-u) 514510; virtual memory (kbytes, -v) 75331648; file locks (-x) unlimited; ```. I am building the index with the following command:. ```bash; salmon index \; -t /mnt/rescomp/ref/hg38/gentrome.fa.gz \; -i /mnt/rescomp/ref/hg38/salmon_index -k 31 \; --decoys /mnt/rescomp/ref/hg38/decoys.txt \; --threads 16 \; --gencode |& tee logs/salmon_index.log; ```. gentrome is created based on the gencode transcriptome (v33) and genome primary algnment sequence (GRCh38.p13). [salmon_index.log](https://github.com/COMBINE-lab/salmon/files/4392725/salmon_index.log). The output directory:; ```; ‚óã ‚Üí ll /mnt/rescomp/ref/hg38/salmon_index; total 7.9G; drwxr-sr-x 1 37304 723 4.0K Mar 27 01:36 ./; drwxr-sr-x 1 37304 723 4.0K Mar 26 22:13 ../; -rw-r--r-- 1 37304 723 888K Mar 27 00:32 complete_ref_lens.bin; -rw-r--r-- 1 37304 723 31K Mar 27 00:27 duplicate_clusters.tsv; -rw-r--r-- 1 37304 723 674M Mar 27 01:46 path.bin; -rw-r--r-- 1 37304 723 55 Mar 27 01:46 pre_indexing.log; -rw-r--r-- 1 37304 723 40K Mar 27 01:46 ref_indexing.log; -rw-r--r-- 1 37304 723 3.3G Mar 27 00:32 ref_k31_fixed.fa; -rw-r--r-- 1 37304 723 703 Mar 27 00:32 ref_sigs.json; -rw-r--r-- 1 37304 723 4.1G Mar 27 01:36 tmp_dbg.bin; ```; I know for a fact that the memory usage did not go over 16GB. Any hints how to proceed?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-604919589:547,queue,queues,547,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-604919589,1,['queue'],['queues']
Performance,"hensive/SalmonIndex }; ### [ skipQuant ] => { }; ### [ libType ] => { A }; ### [ mates1 ] => { GSM7099349.R1.fastq }; ### [ mates2 ] => { GSM7099349.R2.fastq }; ### [ output ] => { salmon_out }; ### [ threads ] => { 1 }; Logs will be written to salmon_out/logs; [2023-11-30 09:40:21.543] [jointLog] [info] setting maxHashResizeThreads to 1; [2023-11-30 09:40:21.543] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2023-11-30 09:40:21.543] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:40:21.543] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:40:21.543] [jointLog] [info] parsing read library format; [2023-11-30 09:40:21.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; ----------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:3138,Load,Loading,3138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"hi, I am running Salmon-1.2.1 on my MacBook with Sierra 10.13.6. I try to run Salmon binary with terminal, and I get this error. How'd do solve this problem? . Last login: Sat May 2 23:14:08 on ttys007; /Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0\ 2/bin/salmon ; exit;; Maysons-MacBook-Air:~ maysonlin$ /Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0\ 2/bin/salmon ; exit;; dyld: Library not loaded: @rpath/libtbbmalloc.dylib; Referenced from: /Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0 2/bin/salmon; Reason: image not found; Abort trap: 6; logout; Saving session...; ...copying shared history...; ...saving history...truncating history files...; ...completed. [Process completed]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517:402,load,loaded,402,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517,1,['load'],['loaded']
Performance,"hitelist forceCells 3000. The mapping rate was boost to 37%, but now the forceCells and expectCells seems not work, alevin still processed over 400,000 cells.; ```; cat logs/salmon_quant.log; [2019-01-28 21:02:08.487] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-01-28 21:02:08.487] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-01-28 21:02:08.487] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-01-28 21:02:08.487] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 1. Setting consensusSlack to 1.; [2019-01-28 21:02:08.487] [jointLog] [info] Using default value of 0.8 for minScoreFraction in Alevin; [2019-01-28 21:09:02.560] [jointLog] [info] There is 1 library.; [2019-01-28 21:09:04.049] [jointLog] [info] Loading Quasi index; [2019-01-28 21:09:04.286] [jointLog] [info] Loading 32-bit quasi index; [2019-01-28 21:09:43.870] [jointLog] [info] done; [2019-01-28 21:09:43.870] [jointLog] [info] Index contained 58,086 targets; [2019-01-28 21:40:30.445] [jointLog] [info] Computed 64,654 rich equivalence classes for further processing; [2019-01-28 21:40:30.445] [jointLog] [info] Counted 107,408,832 total reads in the equivalence classes; [2019-01-28 21:40:30.446] [jointLog] [warning] Found 39484 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-28 21:40:30.446] [jointLog] [info] Mapping rate = 37.2969%. [2019-01-28 21:40:30.446] [jointLog] [info] finished quantifyLibrary(). cat alevin/alevin.log; [2019-01-28 21:02:08.496] [alevinLog] [info] Processing barcodes files (if Present). [2019-01-28 21:07:56.106] [alevinLog] [info] Done barcode density calculation.; [2019-01-28 21:07:56.106] [alevinLog] [info] # Barcodes Used: 287883370 / 2879",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:6130,Load,Loading,6130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['Load'],['Loading']
Performance,"hold. Incompatible fragments will be ignored.; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2023-10-11 16:03:44.490] [jointLog] [info] parsing read library format; [2023-10-11 16:03:44.491] [jointLog] [info] There is 1 library.; [2023-10-11 16:03:45.109] [jointLog] [info] Loading Quasi index; [2023-10-11 16:03:45.111] [jointLog] [info] Loading 32-bit quasi index; [2023-10-11 16:03:45.173] [stderrLog] [info] Loading Suffix Array ; [2023-10-11 16:03:46.096] [stderrLog] [info] Loading Transcript Info ; [2023-10-11 16:03:46.382] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-10-11 16:03:46.474] [stderrLog] [info] There were 6195946 set bits in the bit array; [2023-10-11 16:03:46.481] [stderrLog] [info] Computing transcript lengths; [2023-10-11 16:03:46.481] [stderrLog] [info] Waiting to finish loading hash; [2023-10-11 16:03:56.007] [jointLog] [info] done; [2023-10-11 16:03:56.007] [jointLog] [info] Index contained 3744 targets; [2023-10-11 16:03:56.006] [stderrLog] [info] Done loading index; ; qemu: uncaught target signal 11 (Segmentation fault) - core dumped; .command.sh: line 9: 64 Segmentation fault salmon quant --validateMappings --threads 1 --libType A --index transcriptome-index --mates1 sample1_R1_001.trimmed.fastq.gz --mates2 sample1_R2_001.trimmed.fastq.gz --output sample1; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; Linux 0f0e43816679 6.4.16-li",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881:3289,Load,Loading,3289,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881,1,['Load'],['Loading']
Performance,"ib/python3.9/site-packages/conda/core/solve.py"", line 1058, in _prepare; reduced_index = get_reduced_index(self.prefix, self.channels,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/index.py"", line 288, in get_reduced_index; new_records = SubdirData.query_all(spec, channels=channels, subdirs=subdirs,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 140, in query_all; result = tuple(concat(executor.map(subdir_query, channel_urls))); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 609, in result_iterator; yield fs.pop().result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 446, in result; return self.__get_result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 391, in __get_result; raise self._exception; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 132, in <lambda>; subdir_query = lambda url: tuple(SubdirData(Channel(url), repodata_fn=repodata_fn).query(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforg",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:3012,concurren,concurrent,3012,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['concurren'],['concurrent']
Performance,"ible fragments will be ignored.; [2021-05-19 18:46:25.303] [jointLog] [info] You specified --dumpEqWeights, which implies --dumpEq; that option has been enabled.; [2021-05-19 18:46:25.303] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2021-05-19 18:46:25.303] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-19 18:46:25.303] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; [2021-05-19 18:46:25.303] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-19 18:46:25.303] [jointLog] [info] parsing read library format; [2021-05-19 18:46:25.303] [jointLog] [info] There is 1 library.; [2021-05-19 18:46:25.429] [jointLog] [info] Loading pufferfish index; [2021-05-19 18:46:25.429] [jointLog] [info] Loading dense pufferfish index.; [2021-05-19 18:46:27.087] [jointLog] [info] done; [2021-05-19 18:46:27.087] [jointLog] [info] Index contained 141,069 targets; [2021-05-19 18:46:32.618] [jointLog] [info] Number of decoys : 0; [2021-05-19 18:46:33.428] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-19 18:49:27.444] [jointLog] [error] . [2021-05-19 18:49:27.506] [jointLog] [error] Processing reads : Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid. ```; For rabbitQC's log; ```; Detecting adapter sequence for read1...; CCCAGCCATAACACAGTATCAAACTCCACTATTTGTCTGATCCGTACTTATTACAGCCGT. Detecting adapter sequence for read2...; CCAACTTGGTCTACAAGACGCCACATCCCCTATTATAGAAGAGCTAATAAATTTCCATGA. Read1 before filtering:; total reads: 44178187; total bases: 2140649565; Q20 bases: 1899503304(88.7349%); Q30 bases: 1839878933(85.9496%). Read1 aft",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660:1839,Load,Loading,1839,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660,1,['Load'],['Loading']
Performance,"icense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word"".; Attaching to process 29332; [New LWP 29334]; [New LWP 29335]; [New LWP 29336]; [New LWP 21224]; [New LWP 21225]; [New LWP 21226]; [New LWP 21227]; [New LWP 21228]; [New LWP 21229]; [New LWP 21230]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; 0x00007fcb8cf73789 in __ieee754_log_avx (x=<optimized out>) at ../sysdeps/ieee754/dbl-64/e_log.c:193; 193	../sysdeps/ieee754/dbl-64/e_log.c: No such file or directory.; #0 0x00007fcb8cf73789 in __ieee754_log_avx (x=<optimized out>) at ../sysdeps/ieee754/dbl-64/e_log.c:193; #1 0x0000000000637ccc in double std::gamma_distribution<double>::operator()<pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> > >(pcg_detail::engine<unsigned int, unsigned long, pcg_detail::xsh_rr_mixin<unsigned int, unsigned long>, true, pcg_detail::unique_stream<unsigned long>, pcg_detail::default_multiplier<unsigned long> >&, std::gamma_distribution<double>::param_type const&) (); #2 0x0000000000634b8d in tbb::interface9::internal::start_for<tbb::blocked_range<unsigned long>, sampleRoundNonCollapsedMultithreaded_(std::vector<std::pair<TranscriptGroup const, TGValue>, std::allocator<std::pair<Transcri",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267488748:1202,optimiz,optimized,1202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267488748,1,['optimiz'],['optimized']
Performance,"idateMappings ] => { }; ### [ gcBias ] => { }; Logs will be written to out/logs; [2021-09-20 16:29:51.663] [jointLog] [info] setting maxHashResizeThreads to 6; [2021-09-20 16:29:51.663] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-09-20 16:29:51.663] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:29:51.663] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:29:51.663] [jointLog] [info] parsing read library format; [2021-09-20 16:29:51.663] [jointLog] [info] There is 1 library.; [2021-09-20 16:29:51.736] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:29:51.738] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading refere",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:1724,Load,Loading,1724,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ides; [2021-12-31 11:26:33.218] [puff::index::jointLog] [info] Clipped poly-A tails from 758 transcripts; wrote 141009 cleaned references; [2021-12-31 11:26:34.700] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers; [2021-12-31 11:26:38.852] [puff::index::jointLog] [info] ntHll estimated 239287090 distinct k-mers, setting filter size to 2^32; allowedIn: 21; Max Junction ID: 1394611; seen.size():11156897 kmerInfo.size():1394612; approximateContigTotalLength: 132160289; counters for complex kmers:; (prec>1 & succ>1)=181344 | (succ>1 & isStart)=714 | (prec>1 & isEnd)=800 | (isStart & isEnd)=42; contig count: 2077595 element count: 297242564 complex nodes: 182900; # of ones in rank vector: 2077594; [2021-12-31 11:28:32.554] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2021-12-31 11:28:32.554] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory /no_backup/indexes/salmon/mm10_gencode; size = 297242564; -----------------------------------------; | Loading contigs | Time = 135.18 ms; -----------------------------------------; size = 297242564; -----------------------------------------; | Loading contig boundaries | Time = 61.18 ms; -----------------------------------------; Number of ones: 2077594; Number of ones per inventory item: 512; Inventory entries filled: 4058; 2077594; [2021-12-31 11:28:33.532] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2021-12-31 11:28:33.566] [puff::index::jointLog] [info] contig count for validation: 2,077,594; [2021-12-31 11:28:34.693] [puff::index::jointLog] [info] Total # of Contigs : 2,077,594; [2021-12-31 11:28:34.693] [puff::index::jointLog] [info] Total # of numerical Contigs : 2,077,594; [2021-12-31 11:28:34.787] [puff::index::jointLog] [info] Total # of contig vec entries: 13,003,859; [2021-12-31 11:28:34.787] [puff::index::jointLog] [info] bits per offset entry 24; [2021-1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003342883:2442,Load,Loading,2442,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003342883,1,['Load'],['Loading']
Performance,"iff. = 0.109768; [2021-06-08 03:45:01.617] [jointLog] [info] iteration = 800 | max rel diff. = 1.21662; [2021-06-08 03:45:03.120] [jointLog] [info] iteration = 900 | max rel diff. = 3.66627; [2021-06-08 03:45:04.608] [jointLog] [info] iteration = 1,000 | max rel diff. = 0.588204; [2021-06-08 03:45:06.110] [jointLog] [info] iteration = 1,100 | max rel diff. = 0.0684939; [2021-06-08 03:45:07.618] [jointLog] [info] iteration = 1,200 | max rel diff. = 0.12848; [2021-06-08 03:45:09.127] [jointLog] [info] iteration = 1,300 | max rel diff. = 0.0314333; [2021-06-08 03:45:10.652] [jointLog] [info] iteration = 1,400 | max rel diff. = 1.66027; [2021-06-08 03:45:12.161] [jointLog] [info] iteration = 1,500 | max rel diff. = 0.0215391; [2021-06-08 03:45:13.652] [jointLog] [info] iteration = 1,600 | max rel diff. = 0.0482054; [2021-06-08 03:45:15.168] [jointLog] [info] iteration = 1,700 | max rel diff. = 0.10638; [2021-06-08 03:45:16.664] [jointLog] [info] iteration = 1,800 | max rel diff. = 0.527726; [2021-06-08 03:45:16.709] [jointLog] [info] iteration = 1,804 | max rel diff. = 0.00520282; [2021-06-08 03:45:16.741] [jointLog] [info] finished optimizer; [2021-06-08 03:45:16.741] [jointLog] [info] writing output; [2021-06-08 03:45:17.047] [jointLog] [info] Staring Bootstrapping; [2021-06-08 03:45:17.157] [jointLog] [info] Will draw 30 bootstrap samples; [2021-06-08 03:45:17.157] [jointLog] [info] Optimizing over 430,882 equivalence classes; ```. I.e. `-l A` gives slightly more counts. When we excluded STAR from the process, and counted pseudoalignments, `-l A` again produced a bit more counts, so this effect is persistent for `-l A`:; - `-l A`: 36,310,400; - `-l ISF`: 36,309,800. (Here we are not comparing counts for pseudoalignments vs STAR aligments, just libtypes withing the same mode). While this difference in counts is not crucial and likely will not affect any downstream analyses, I would appreciate if you could share any insights on what could cause that difference!. Sergey",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/669:7023,optimiz,optimizer,7023,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/669,2,"['Optimiz', 'optimiz']","['Optimizing', 'optimizer']"
Performance,"ile. First, I've been using salmon for years and I love all the updates that have come about recently. The new selective alignment mode is an amazing upgrade!. My general question here is how to quantify various truncated isoforms of the same transcript. I'm working in S. cerevisiae and I am not referring to isoform switching via alternative splicing, but various isoforms that are fully contained as a subset of a larger transcript sequence. Imagine a standard gene that gives rise to a 1000 bp transcript. Through alternative promoter usage or post-transcriptional processing, it can give rise a truncated form that is identical to the parent transcript, except only has sequence from bases 400 to 1000. I know this scenario is similar to detecting differential splice forms, and indeed when I see overlapping genes that nonetheless have some unique sequence, salmon does an excellent job at fractionally apportioning the reads. In this particular case, however, it seems that because all mappings to the truncated isoform also give perfect mappings to the longer isoform, even a single few reads mapping uniquely to the longer isoform is enough evidence for the salmon EM algorithm (I assume that's the relevant part?) to give *all* of the reads to the long isoform. To visualize the problem, I'm attaching an image of alignments over a transcript that is only expressed as a portion of the annotated parent transcript. If i encode the short and long forms as separate transcripts in salmon fasta index, all of the reads get assigned to the longer form with the options I've tried. My question then is whether there's a combination of salmon quant options that would optimize apportioning the reads better for this class of transcript, or whether it's simply not going to work given the underlying assumptions in the software?. Thanks a ton for any help,; Jason. ![hmlalpha2_truncated_example](https://user-images.githubusercontent.com/10292386/80483743-6c217900-890b-11ea-8469-4883914d8ec0.png)",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514:1811,optimiz,optimize,1811,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514,1,['optimiz'],['optimize']
Performance,"imapNmax 20 --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 --outFilterMismatchNoverReadLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --eadFilesCommand zcat --outSAMtype BAM Unsorted --quantMode TranscriptomeSAM --outSAMattributes NH HI AS NM MD --quantTranscriptomeBan IndelSoftclipSingleend`; note that last parameter that I will come back to later. Also, the paper referenced above also describes a new capability present in recent versions of salmon that allow it to index the entire genome (as well as the transcriptome) to have the former act as a decoy. This allows avoiding what might otherwise be spurious mappings that result when one considers only the transcriptome as a source of mapping. There are a number of ways to proceed on this front, but this is a good place to first check for discrepancy (and the paper gives a good overview of the relative tradeoffs and merits of different alignment approaches). * Salmon and RSEM use related but distinct optimization algorithms by default. RSEM uses the EM algorithm, and salmon uses the variational Bayesian EM algorithm. The latter tends to induce more sparse solutions. This is simply because they are optimizing slightly different objectives. It is very difficult to say in general if one is ""better"" than the other in a blanket way, but [there is previous literature to support that the VBEM may be more accurate](https://academic.oup.com/bioinformatics/article/29/18/2292/239795). However, while RSEM only implements the EM algorithm, salmon actually implements and provides a switch to use either. So, if you want to test the effect of this difference, you can run salmon with the `--useEM` algorithm. This will tell salmon to use the ""classic"" EM algorithm and will eliminate this source of variation. * As with the other question you asked, there may be a _small_ discrepancy depending on when enforcement of a stranded library kicks in under salmon's `A` library type. You can eliminate tha",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590:2662,optimiz,optimization,2662,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/612#issuecomment-758004590,2,['optimiz'],['optimization']
Performance,"imizer; [2021-01-21 09:48:12.160] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:12.160] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 19031525.00 UMI after deduplicating.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 454402 BiDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 113688 UniDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [warning] Skipped 44 barcodes due to No mapped read; [2021-01-21 09:48:36.307] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting white listing of 9971 cells; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting to make feature Matrix; [2021-01-21 09:48:41.337] [alevinLog] [info] Done making feature Matrix; [2021-01-21 09:48:41.557] [alevinLog] [info] Finished white listing; [2021-01-21 09:48:41.580] [alevinLog] [info] Finished optimizer. > {; ""total_reads"": 188934609,; ""reads_with_N"": 0,; ""noisy_cb_reads"": 98310747,; ""noisy_umi_reads"": 16600,; ""used_reads"": 90607262,; ""mapping_rate"": 18.89108045842464,; ""reads_in_eqclasses"": 35691789,; ""total_cbs"": 3896665,; ""used_cbs"": 44518,; ""initial_whitelist"": 9015,; ""low_conf_cbs"": 1000,; ""num_features"": 5,; ""no_read_mapping_cbs"": 44,; ""final_num_cbs"": 6765,; ""deduplicated_umis"": 19031525,; ""mean_umis_per_cell"": 2813,; ""mean_genes_per_cell"": 1315; }. ## My best result with `--exceptCells 30000`; > ...; [2021-01-23 11:07:52.910] [alevinLog] [info] Done barcode density calculation.; [2021-01-23 11:07:52.910] [alevinLog] [info] # Barcodes Used: 188934609 / 188934609.; [2021-01-23 11:07:54.387] [alevinLog] [info] Total 12507(has 995 low confidence) barcodes; [2021-01-23 11:07:55.251] [alevinLog] [info] Done True Barcode Sampling; [2021-01-23 11:07:56.200] [alevinLog] [info] Total **49.0191% reads will be thrown away** because of noisy Cellular barcodes.; [2021-0",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567:6658,optimiz,optimizer,6658,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567,1,['optimiz'],['optimizer']
Performance,"imizer; [2021-01-21 09:48:12.160] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:12.160] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 19031525.00 UMI after deduplicating.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 454402 BiDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 113688 UniDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [warning] Skipped 44 barcodes due to No mapped read; [2021-01-21 09:48:36.307] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting white listing of 9971 cells; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting to make feature Matrix; [2021-01-21 09:48:41.337] [alevinLog] [info] Done making feature Matrix; [2021-01-21 09:48:41.557] [alevinLog] [info] Finished white listing; [2021-01-21 09:48:41.580] [alevinLog] [info] Finished optimizer. > {; ""total_reads"": 188934609,; ""reads_with_N"": 0,; ""noisy_cb_reads"": 98310747,; ""noisy_umi_reads"": 16600,; ""used_reads"": 90607262,; ""mapping_rate"": 18.89108045842464,; ""reads_in_eqclasses"": 35691789,; ""total_cbs"": 3896665,; ""used_cbs"": 44518,; ""initial_whitelist"": 9015,; ""low_conf_cbs"": 1000,; ""num_features"": 5,; ""no_read_mapping_cbs"": 44,; ""final_num_cbs"": 6765,; ""deduplicated_umis"": 19031525,; ""mean_umis_per_cell"": 2813,; ""mean_genes_per_cell"": 1315; }. ### My best result with `--exceptCells 30000`; > ...; [2021-01-23 11:07:52.910] [alevinLog] [info] Done barcode density calculation.; [2021-01-23 11:07:52.910] [alevinLog] [info] # Barcodes Used: 188934609 / 188934609.; [2021-01-23 11:07:54.387] [alevinLog] [info] Total 12507(has 995 low confidence) barcodes; [2021-01-23 11:07:55.251] [alevinLog] [info] Done True Barcode Sampling; [2021-01-23 11:07:56.200] [alevinLog] [info] Total **49.0191% reads will be thrown away** because of noisy Cellular barcodes.; [2021-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/620:7591,optimiz,optimizer,7591,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/620,1,['optimiz'],['optimizer']
Performance,"implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-05-05 09:19:06.171] [jointLog] [info] parsing read library format; [2020-05-05 09:19:06.171] [jointLog] [info] There is 1 library.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading pufferfish index; [2020-05-05 09:19:06.278] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2020-05-05 09:19:06.278] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 30.609 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 1.3312 s; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.6842 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 20.002 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 11.467 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 9.5665 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 4.3912 ms; -----------------------------------------; Exception : [std::bad_alloc]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. Not sure why it happens... memory doesn't reach the max. ![Screenshot at 2020-05-05 09-45-37](https://user-images.githubusercontent.com/61701461/81045096-d14e0f00-8eb5-11ea-97ed-b4f4454ba042.png). Than you so much in advance!; Fer",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021:2441,Load,Loading,2441,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623910021,3,['Load'],['Loading']
Performance,"implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-08-13 09:35:38.576] [jointLog] [info] parsing read library format; [2020-08-13 09:35:38.577] [jointLog] [info] There is 1 library.; [2020-08-13 09:35:38.642] [jointLog] [info] Loading pufferfish index; [2020-08-13 09:35:38.642] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 11.256 s; -----------------------------------------; size = 36981178; -----------------------------------------; | Loading contig offsets | Time = 127.43 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.7792 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.2186 s; -----------------------------------------; size = 3784352032; Number of ones: 36981177; Number of ones per inventory item: 512; Inventory entries filled: 72229; -----------------------------------------; | Loading contig boundaries | Time = 5.2845 s; -----------------------------------------; size = 3784352032; -----------------------------------------; | Loading sequence | Time = 1.1989 s; -----------------------------------------; size = 2674916722; -----------------------------------------; | Loading positions | Time = 14.838 s; -----------------------------------------; size = 3401221626; -----------------------------------------; | Loading reference sequence | Time = 1.1113 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 9.0843 ms; -----------------------------------------. [2020-08-13 09:36:14.700] [jointLog] [info] done; [2020-08-13 09:36:14.700] [jointLog] [info] Index contained 177,651 targets; [2020-08-13 09:36:14.782] [jointLog] [info] Number of decoys : 195; processed 500,000 fragmentsjointLog] [info] First decoy index : 177,412",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/560:2454,Load,Loading,2454,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/560,4,['Load'],['Loading']
Performance,"in query_all; result = tuple(concat(executor.map(subdir_query, channel_urls))); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 609, in result_iterator; yield fs.pop().result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 446, in result; return self.__get_result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 391, in __get_result; raise self._exception; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 132, in <lambda>; subdir_query = lambda url: tuple(SubdirData(Channel(url), repodata_fn=repodata_fn).query(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_request(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 701, in fetch_repodata_remote_request; resp = session.get(join_url(url, filename), headers=headers, proxies=session.proxies,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 542, in get; return self.request('GET', url, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 529, in request; resp = self.send(prep, **send_kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/requests/sessions.py"", line 645, in send; r = adapter.send(request, **kwargs); File ""/usr/local/Caskroom",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:3438,load,load,3438,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['load'],['load']
Performance,"in solve_final_state; ssc = self._collect_all_metadata(ssc); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/common/io.py"", line 88, in decorated; return f(*args, **kwds); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 463, in _collect_all_metadata; index, r = self._prepare(prepared_specs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 1058, in _prepare; reduced_index = get_reduced_index(self.prefix, self.channels,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/index.py"", line 288, in get_reduced_index; new_records = SubdirData.query_all(spec, channels=channels, subdirs=subdirs,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 140, in query_all; result = tuple(concat(executor.map(subdir_query, channel_urls))); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 609, in result_iterator; yield fs.pop().result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 446, in result; return self.__get_result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 391, in __get_result; raise self._exception; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 132, in <lambda>; subdir_query = lambda url: tuple(SubdirData(Channel(url), repodata_fn=repodata_fn).query(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Cask",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:2603,concurren,concurrent,2603,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['concurren'],['concurrent']
Performance,"in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog] [info] Computed 119318 rich equivalence classes for further processing; [2016-12-15 16:01:44.937] [jointLog] [info] Counted 12227080 total reads in the equivalence classes; [2016-12-15 16:01:44.948] [jointLog] [info] Mapping rate = 72.5194%. [2016-12-15 16:01:44.948] [jointLog] [info] finished quantifyLibrary(); [2016-12-15 16:01:44.949] [jointLog] [info] Starting optimizer; [2016-12-15 16:01:45.059] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-15 16:01:45.075] [jointLog] [info] iteration = 0 | max rel diff. = 261.892; [2016-12-15 16:01:45.248] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2016-12-15 16:11:15.738] [jointLog] [info] Computed expected counts (for bias correction); [2016-12-15 16:11:15.739] [jointLog] [info] processed bias for 0.0% of the transcripts; [2016-12-15 16:13:07.074] [jointLog] [info] processed bias for 10.0% of the transcripts; [2016-12-15 16:14:57.019] [jointLog] [info] processed bias for 20.0% of the transcripts; [2016-12-15 16:16:40.365] [jointLog] [info] processed bias for 30.0% of the transcripts; [2016-12-15 16:18:25.798] [jointLog] [info] processed bias for 40.0% of the transcripts; [2016-12-15 16:20:13.944] [jointLog] [info] processed bias for 50.0% of the transcripts; [2016-12-15 16:21:52.350] [jointLog] [info] processed bias for 100.0% of ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:2398,optimiz,optimizer,2398,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['optimiz'],['optimizer']
Performance,"ind the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2810,Load,Loadable,2810,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq; drwxrwxr-x 5 vale rst_pub 4.0K Jan 2 20:20 SRP057125_SRS936134_salmon_out; ```. But when I run the script there, it succeeds, without segfault. ```; [vale@ebi-003 salmon-problem]$ bash run_salmon.sh; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:17:29.867] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:17:29.867] [jointLog",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:1837,Load,Loading,1837,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-08-02 14:41:46.432] [jointLog] [info] Mapping rate = 42.6252%. [2017-08-02 14:41:46.432] [jointLog] [info] finished quantifyLibrary(); [2017-08-02 14:41:46.446] [jointLog] [info] Starting optimizer; [2017-08-02 14:41:46.508] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-08-02 14:41:46.510] [jointLog] [info] iteration = 0 | max rel diff. = 2.50175; [2017-08-02 14:41:46.521] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; salmon: /drone/src/github.com/COMBINE-lab/salmon/include/eigen3/Eigen/src/Core/DenseCoeffsBase.h:378: Eigen::DenseCoeffsBase<Derived, 1>::Scalar& Eigen::DenseCoeffsBase<Derived, 1>::operator[](Eigen::DenseCoeffsBase<Derived, 1>::Index) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::DenseCoeffsBase<Derived, 1>::Scalar = double; Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.; /home/ngs/scripts/sc-rna/sc-s-salmon-quant.sh: line 40: 10170 Aborted (core dumped) /home/ngs/programs/salmon/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i ""$path_dr_salmonindex_transcriptome_ercc"" -o ""$newfilename-salmon-quant"" -g ""$path_dr_gtf"" -l ""U"" -p 1",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:2412,optimiz,optimizer,2412,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['optimiz'],['optimizer']
Performance,"info] Total 222(has 200 low confidence) barcodes; [2018-07-26 11:25:31.440] [alevinLog] [info] Done True Barcode Sampling; [2018-07-26 11:25:31.789] [alevinLog] [info] Done populating Z matrix; [2018-07-26 11:25:31.793] [alevinLog] [info] Done indexing Barcodes; [2018-07-26 11:25:31.793] [alevinLog] [info] Total Unique barcodes found: 10630133; [2018-07-26 11:25:31.793] [alevinLog] [info] Used Barcodes except Whitelist: 10603; [2018-07-26 11:25:31.938] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-26 11:25:31.939] [alevinLog] [info] parsing read library format; [2018-07-26 11:25:31.949] [jointLog] [info] There is 1 library.; [2018-07-26 11:25:32.331] [jointLog] [info] Loading Quasi index; [2018-07-26 11:25:32.331] [jointLog] [info] Loading 32-bit quasi index; [2018-07-26 11:25:32.357] [stderrLog] [info] Loading Suffix Array ; [2018-07-26 11:26:09.413] [stderrLog] [info] Loading Transcript Info ; [2018-07-26 11:26:10.896] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-26 11:26:11.159] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-26 11:26:11.225] [stderrLog] [info] Computing transcript lengths; [2018-07-26 11:26:11.226] [stderrLog] [info] Waiting to finish loading hash; [2018-07-26 11:26:14.654] [stderrLog] [info] Done loading index; [2018-07-26 11:26:14.654] [jointLog] [info] done; [2018-07-26 11:26:14.654] [jointLog] [info] Index contained 203027 targets. Incorrect call for umi extractIncorrect call for umi extract; ```. I traced it back to AlevinUtils.cpp in the source files but could not make sense of it from there. The program will run completely on the same data and library if I change --dropseq to --Chromium, eventually outputting the following after processing the reads:. ```; [2018-07-24 10:56:20.712] [jointLog] [info] Computed 9968 rich equivalence classes for further processing; [2018-07-24 10:56:20.712] [jointLog] [info] Counted 2785976 total reads in the equivalence classes; [2018-07-",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:3029,Load,Loading,3029,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['Load'],['Loading']
Performance,"info] Total 4000(has 1000 low confidence) barcodes; [2019-01-29 15:49:35.251] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 15:49:35.896] [alevinLog] [info] Done populating Z matrix; [2019-01-29 15:49:35.994] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 15:49:35.994] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-29 15:49:35.994] [alevinLog] [info] Used Barcodes except Whitelist: 105901; [2019-01-29 15:49:36.107] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 15:49:36.107] [alevinLog] [info] parsing read library format; [2019-01-29 15:49:36.415] [stderrLog] [info] Loading Suffix Array; [2019-01-29 15:49:36.107] [jointLog] [info] There is 1 library.; [2019-01-29 15:49:36.373] [jointLog] [info] Loading Quasi index; [2019-01-29 15:49:36.396] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 15:49:50.479] [stderrLog] [info] Loading Transcript Info; [2019-01-29 15:49:55.550] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 15:49:56.036] [stderrLog] [info] There were 58,086 set bits in the bit array; [2019-01-29 15:49:56.077] [stderrLog] [info] Computing transcript lengths; [2019-01-29 15:49:56.077] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 15:49:56.077] [stderrLog] [info] Done loading index; [2019-01-29 15:49:56.077] [jointLog] [info] done; [2019-01-29 15:49:56.077] [jointLog] [info] Index contained 58,086 targets; processed 287 Million fragments; hits: 152080339, hits per frag: 0.529087. [2019-01-29 16:05:46.677] [jointLog] [info] Computed 58,128 rich equivalence classes for further processing; [2019-01-29 16:05:46.677] [jointLog] [info] Counted 58,047,553 total reads in the equivalence classes; [2019-01-29 16:05:46.678] [jointLog] [warning] Found 21006 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-29 16:05:46.678] [jointLog] [info] Mapping rate = 20.1566%. [2019-01-29 16:05:46.67",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:1577,Load,Loading,1577,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['Load'],['Loading']
Performance,"info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"", fasta = ""/rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas"" . . .done. processed 0 reads in current round[2023-01-29 16:02:12.216] [jointLog] [info] replaced 186,207 non-ACGT nucleotides with random nucleotides; [2023-01-29 16:02:12.668] [jointLog] [info] Automatically detected most likely library type as U. processed 2000000 reads in current round[2023-01-29 16:02:13.116] [jointLog] [info] . The alignment group queue pool has been exhausted. 1842 extra fragments were allocated on the heap to saturate the pool. No new fragments will be allocated. processed 13423395 reads in current round; killing thread 3 . . . done. Freeing memory used by read queue . . . 00000; Joined parsing thread . . . ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"" ; Closed all files . . . ; Emptied frag queue. . . ; Emptied Alignment Group Pool. . ; Emptied Alignment Group Queue. . . done; [2023-01-29 16:02:59.265] [jointLog] [info] . Completed first pass through the alignment file.; Total # of mapped reads : 13423395; # of uniquely mapped reads : 13423394; # ambiguously mapped reads : 1. [2023-01-29 16:02:59.271] [jointLog] [info] Computed 169 rich equivalence classes for further processing; [2023-01-29 16:02:59.272] [jointLog] [info] Counted 13,423,395 total reads in the equivalence classes ; [2023-01-29 16:02:59.272] [jointLog] [info] starting optimizer; [2023-01-29 16:02:59.274] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-01-29 16:02:59.274] [jointLog] [info] iteration = 0 | max rel diff. = 237.557; [2023-01-29 16:02:59.282] [jointLog] [info] iteration = 100 | max rel diff. = 3.78077e-16; [2023-01-29 16:02:59.282] [jointLog] [info] finished optimizer; [2023-01-29 16:02:59.282] [jointLog] [info] writing output. ```. Output for failure case - 48",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/825:3138,queue,queue,3138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/825,1,['queue'],['queue']
Performance,"ing with STAR but not when running with selective alignment. However, salmon will attempt to solve the optimization problem with the alignments it is given, regardless of if those come from STAR or from it's built-in selective alignment. While I would generally expect these to be similar, the alignment algorithms are different; see [e.g. the differences between SA/SAF & STAR here](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8). Nonetheless, it is possible that for a small subset of transcripts, the probabilistic allocations are _so_ ambiguous, that you get large swings in the resulting quantification estimates based on tiny variations in where the optimization starts (which is, itself, stochastic due to the asynchronous nature of salmon's online inference phase). One way we can test this hypothesis is as follows. You can run salmon with `--numGibbsSamples 100` and `-d`. This will tell salmon to perform posterior Gibbs sampling (`--numGibbsSamples 100`) and to dump the range-factorized equivalence classes used for offline quantification (`-d`). The Gibbs sampling files will contain the traces for the transcripts in question over the various iterations of the sampling procedure. Transcripts where there is a tremendous amount of ambiguity will tend to have highly anti-correlated posterior samples, and similarly, if you were to consider the abundance output of these transcripts as a *group*, there would be a large reduction in inferential relative variance. In fact, we [wrote a whole paper on this topic](https://academic.oup.com/bioinformatics/article/36/Supplement_1/i102/5870485). Consider this example from that paper:. ![image](https://user-images.githubusercontent.com/361470/101438021-706d3600-38df-11eb-9ada-a54ea9092d2d.png). The x-axis is samples from the Gibbs chains, and the y-values denote the estimated number of reads assigned to both transcripts in each sample. The green line at the top is what you get if you sum the abundances of ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115:1036,perform,perform,1036,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-740363115,2,['perform'],['perform']
Performance,ing/salmon/lib:$LD_LIBRARY_PATH ./salmon quant --index Salmon_index_hg38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --us; eVBOpt --output test_quant --numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000001 fragments; hits: 65897764; hits per frag: 3.48152. [2016-12-13 22:45:33.192] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:45:33.192] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:45:33.233] [jointLog] [info] Mapping rate = 83.509%. [2016-12-13 22:45:33.233] [jointLog] [info] finished quantify,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:1385,Load,Loading,1385,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,1,['Load'],['Loading']
Performance,"ing: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.x86_64 keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.17-9.el8.x86_64 libcom_err-1.44.6-3.el8.x86_64 libcurl-7.61.1-11.el8.x86_64 libgcc-8.3.1-4.5.el8.x86_64 libgomp-8.3.1-4.5.el8.x86_64 libidn2-2.2.0-1.el8.x86_64 libnghttp2-1.33.0-1.el8_0.1.x86_64 libpsl-0.20.2-5.el8.x86_64 libselinux-2.9-2.1.el8.x86_64 libssh-0.9.0-4.el8.x86_64 libstdc++-8.3.1-4.5.el8.x86_6",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4790,Load,Loadable,4790,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ing: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.x86_64 keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.17-9.el8.x86_64 libcom_err-1.44.6-3.el8.x86_64 libcurl-7.61.1-11.el8.x86_64 libgcc-8.3.1-4.5.el8.x86_64 libgomp-8.3.1-4.5.el8.x86_64 libidn2-2.2.0-1.el8.x86_64 libnghttp2-1.33.0-1.el8_0.1.x86_64 libpsl-0.20.2-5.el8.x86_64 libselinux-2.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4718,Load,Loadable,4718,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ing: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.x86_64 keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.17-9.el8.x86_64 libcom_err-1.44.6-3.el8.x86_64 libcurl-7.61.1-11.el8.x86_64 libgcc-8.3.1-4.5.el8.x86_64 libgomp-8.3.1-4.5.el8.x86_64 libidn2-2.2.0-1.el8.x86_64 lib",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4646,Load,Loadable,4646,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ing: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.x86_64 keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.17-9.el8.x86_64 libcom_err-1.44.6-3.el8.x86_64 libcurl-7.61.1-11.el8.x86_64 libgcc-8.3.1-4.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4574,Load,Loadable,4574,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ing: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.x86_64 keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.17-9.el8.x86_64 lib",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4502,Load,Loadable,4502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ing: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4430,Load,Loadable,4430,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"inly does seem very low. To answer your specific questions first:; 1) I'm not sure --- let's try tor find out; 2) I don't think so (if they are part of your index, they should be aligned against); 3) If there are many transcripts / targets you expect to be sequenced but which aren't present in this set, that can affect the mapping rate, but not likely to take it down to 6%. Here are the things I'd investigate --- roughly in order: . 1) In addition to the fraction of reads STAR mapped (which you report above), what fraction of the reads are assigned to features by featureCounts? In some cases, when there is a failure of rRNA depletion of polyA selection, you can end up with an experiment where most of the sequenced RNA comes from rRNA not present in the reference transcriptome. In this case, STAR will be able to align the reads to the genome, but you won't see these reads mapping to annotated features (and you also won't see them showing up in your transcript level quantifications). So, it may be worth to take a look at the count of reads assigned to the feature set of genes by featureCounts. 2) Above, it looks like a considerable number of fragments were discarded due to no alignment reaching the required alignment score (`11,448,458` fragments discarded because of this). Have you tried to adapter / quality trim the data? Does this have any effect on the mapping rate?. 3) If the above don't reveal any clues, I'd be happy to try to take a look at the data if you can share it. I'd be quite surprised if STAR is aligning a lot of reads *to transcriptome features* that are being missed by salmon. Nonetheless, if you pass the proper flags to STAR (including `--quantMode TranscriptomeSAM`), then you can use the SAM/BAM file generated by STAR to perform quantification with salmon (i.e. use STAR's alignments to do _transcript-level_ quantification). I'd be happy to help dig further on any of these, so please feel free to reach out if you find anything interesting. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054:1838,perform,perform,1838,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054,1,['perform'],['perform']
Performance,"intLog] [info] You specified --dumpEqWeights, which implies --dumpEq; that option has been enabled.; [2021-05-19 18:46:25.303] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2021-05-19 18:46:25.303] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-19 18:46:25.303] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; [2021-05-19 18:46:25.303] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-19 18:46:25.303] [jointLog] [info] parsing read library format; [2021-05-19 18:46:25.303] [jointLog] [info] There is 1 library.; [2021-05-19 18:46:25.429] [jointLog] [info] Loading pufferfish index; [2021-05-19 18:46:25.429] [jointLog] [info] Loading dense pufferfish index.; [2021-05-19 18:46:27.087] [jointLog] [info] done; [2021-05-19 18:46:27.087] [jointLog] [info] Index contained 141,069 targets; [2021-05-19 18:46:32.618] [jointLog] [info] Number of decoys : 0; [2021-05-19 18:46:33.428] [jointLog] [info] Automatically detected most likely library type as IU. [2021-05-19 18:49:27.444] [jointLog] [error] . [2021-05-19 18:49:27.506] [jointLog] [error] Processing reads : Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid. ```; For rabbitQC's log; ```; Detecting adapter sequence for read1...; CCCAGCCATAACACAGTATCAAACTCCACTATTTGTCTGATCCGTACTTATTACAGCCGT. Detecting adapter sequence for read2...; CCAACTTGGTCTACAAGACGCCACATCCCCTATTATAGAAGAGCTAATAAATTTCCATGA. Read1 before filtering:; total reads: 44178187; total bases: 2140649565; Q20 bases: 1899503304(88.7349%); Q30 bases: 1839878933(85.9496%). Read1 after filtering:; total reads: 34172299; total bases: 1775386278;",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/660:1909,Load,Loading,1909,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/660,1,['Load'],['Loading']
Performance,"ion skipping it; [2018-08-29 11:28:19.290] [alevinLog] [info] Learned InvCov: 568.346 normfactor: 688.271; [2018-08-29 11:28:19.290] [alevinLog] [info] Total 3385(has 1000 low confidence) barcodes; [2018-08-29 11:28:19.297] [alevinLog] [info] Done True Barcode Sampling; [2018-08-29 11:28:19.433] [alevinLog] [info] Done populating Z matrix; [2018-08-29 11:28:19.437] [alevinLog] [info] Done indexing Barcodes; [2018-08-29 11:28:19.437] [alevinLog] [info] Total Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33:18.039] [jointLog] [warning] Found 187 reads with `N` in the UMI se",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3426,Load,Loading,3426,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['Load'],['Loading']
Performance,ion.; [2021-01-21 09:33:35.885] [alevinLog] [info] # Barcodes Used: 188934609 / 188934609.; [2021-01-21 09:33:37.337] [alevinLog] [info] Total 10016(has 1000 low confidence) barcodes; [2021-01-21 09:33:38.202] [alevinLog] [info] Done True Barcode Sampling; [2021-01-21 09:33:39.137] [alevinLog] [warning] Total **52.0343% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-21 09:33:39.960] [alevinLog] [info] Done populating Z matrix; [2021-01-21 09:33:39.989] [alevinLog] [info] Total 34923 CB got sequence corrected; [2021-01-21 09:33:39.994] [alevinLog] [info] Done indexing Barcodes; [2021-01-21 09:33:39.994] [alevinLog] [info] Total Unique barcodes found: 3896665; [2021-01-21 09:33:39.994] [alevinLog] [info] Used Barcodes except Whitelist: 34503; [2021-01-21 09:33:40.718] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2021-01-21 09:33:40.718] [alevinLog] [info] parsing read library format; [2021-01-21 09:48:11.430] [alevinLog] [info] Starting optimizer; [2021-01-21 09:48:12.160] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:12.160] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 19031525.00 UMI after deduplicating.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 454402 BiDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 113688 UniDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [warning] Skipped 44 barcodes due to No mapped read; [2021-01-21 09:48:36.307] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting white listing of 9971 cells; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting to make feature Matrix; [2021-01-21 09:48:41.337] [alevinLog] [info] Done making feature Matrix; [2021-01-21 09:48:41.557] [alevinLog] [info] Finished white listing; [2021-01-21 09:48:41.580] [alevinLog] [,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/620:6576,optimiz,optimizer,6576,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/620,1,['optimiz'],['optimizer']
Performance,ion.; [2021-01-21 09:33:35.885] [alevinLog] [info] # Barcodes Used: 188934609 / 188934609.; [2021-01-21 09:33:37.337] [alevinLog] [info] Total 10016(has 1000 low confidence) barcodes; [2021-01-21 09:33:38.202] [alevinLog] [info] Done True Barcode Sampling; [2021-01-21 09:33:39.137] [alevinLog] [warning] Total **52.0343% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-21 09:33:39.960] [alevinLog] [info] Done populating Z matrix; [2021-01-21 09:33:39.989] [alevinLog] [info] Total 34923 CB got sequence corrected; [2021-01-21 09:33:39.994] [alevinLog] [info] Done indexing Barcodes; [2021-01-21 09:33:39.994] [alevinLog] [info] Total Unique barcodes found: 3896665; [2021-01-21 09:33:39.994] [alevinLog] [info] Used Barcodes except Whitelist: 34503; [2021-01-21 09:33:40.718] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2021-01-21 09:33:40.718] [alevinLog] [info] parsing read library format; [2021-01-21 09:48:11.430] [alevinLog] [info] Starting optimizer; [2021-01-21 09:48:12.160] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:12.160] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 19031525.00 UMI after deduplicating.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 454402 BiDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [info] Total 113688 UniDirected Edges.; [2021-01-21 09:48:36.288] [alevinLog] [warning] Skipped 44 barcodes due to No mapped read; [2021-01-21 09:48:36.307] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting white listing of 9971 cells; [2021-01-21 09:48:41.314] [alevinLog] [info] Starting to make feature Matrix; [2021-01-21 09:48:41.337] [alevinLog] [info] Done making feature Matrix; [2021-01-21 09:48:41.557] [alevinLog] [info] Finished white listing; [2021-01-21 09:48:41.580] [alevinLog] [,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567:5643,optimiz,optimizer,5643,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567,1,['optimiz'],['optimizer']
Performance,"ique barcodes found: 3825581; [2018-12-05 16:31:51.000] [alevinLog] [info] Used Barcodes except Whitelist: 138266; [2018-12-05 16:31:51.087] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 16:31:51.087] [alevinLog] [info] parsing read library format; [2018-12-05 16:31:51.087] [jointLog] [info] There are 2 libraries.; [2018-12-05 16:31:51.161] [jointLog] [info] Loading Quasi index; [2018-12-05 16:31:51.162] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 16:31:51.164] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 16:31:51.808] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 16:31:51.960] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 16:31:52.001] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 16:31:52.022] [stderrLog] [info] Computing transcript lengths; [2018-12-05 16:31:52.022] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 16:31:56.025] [stderrLog] [info] Done loading index; [2018-12-05 16:31:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the equivalence classes ; [2018-12-05 16:57:31.421] [jointLog] [warning] 0.000112378% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 24. [2018-12-05 16:57:31.421] [jointLog] [warning] Found 539897 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 16:57:31.421] [jointLog] [info] Mapping rate = 70.9532%. [2018-12-05 16:57:31.421] [jointLog] [info] finished quantifyLibrary(); [2018-12-05 16:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:13155,load,loading,13155,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['load'],['loading']
Performance,"ique barcodes found: 4180559; [2018-12-05 15:12:27.952] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-05 15:12:29.321] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 15:12:29.216] [jointLog] [info] There are 2 libraries.; [2018-12-05 15:12:29.318] [jointLog] [info] Loading Quasi index; [2018-12-05 15:12:29.319] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 15:12:29.216] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 15:12:29.216] [alevinLog] [info] parsing read library format; [2018-12-05 15:12:29.949] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 15:12:30.141] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 15:12:30.181] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for further processing; [2018-12-05 15:45:46.198] [jointLog] [info] Counted 163,106,139 total reads in the equivalence classes ; [2018-12-05 15:45:46.199] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 15:45:46.199] [jointLog] [info] Mapping rate = 60.9633%. [2018-12-05 15:45:46.199] [jointLog] [info] finished quantifyLibrary(); [2018-12-05 15:45:47.617] [alevinLog] [info] Starting optimizer. Analyzed 5344 cells (100% of all).; [2018-12-05 15:47:14.597] [alevinLog] [info] Total 1870793 UMI after deduplicating.; [2018-12-05 15:47:14.693] [alevinLog] [info] Clearing EqMap; Might take so",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:7643,load,loading,7643,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['load'],['loading']
Performance,itNum: 0; itNum: 1; [2018-05-31 22:48:54.566] [jointLog] [info] Computed 583973 rich equivalence classes for further processing; [2018-05-31 22:48:54.566] [jointLog] [info] Counted 59985214 total reads in the equivalence classes; [2018-05-31 22:48:54.609] [jointLog] [info] Mapping rate = 88.2723%. [2018-05-31 22:48:54.609] [jointLog] [info] finished quantifyLibrary(); [2018-05-31 22:48:54.610] [jointLog] [info] Starting optimizer; [2018-05-31 22:48:54.829] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2018-05-31 22:48:54.859] [jointLog] [info] iteration = 0 | max rel diff. = 127.38; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]; salmon quant was invoked improperly.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393675075:424,optimiz,optimizer,424,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393675075,1,['optimiz'],['optimizer']
Performance,"iteration = 1200 | max rel diff. = 0.0202505; [2015-11-03 14:08:31.792] [jointLog] [info] iteration = 1300 | max rel diff. = 0.0186214; [2015-11-03 14:08:32.177] [jointLog] [info] iteration = 1400 | max rel diff. = 0.0181308; [2015-11-03 14:08:32.568] [jointLog] [info] iteration = 1500 | max rel diff. = 0.0159512; [2015-11-03 14:08:32.948] [jointLog] [info] iteration = 1600 | max rel diff. = 0.0156004; [2015-11-03 14:08:33.323] [jointLog] [info] iteration = 1700 | max rel diff. = 0.0134322; [2015-11-03 14:08:33.700] [jointLog] [info] iteration = 1800 | max rel diff. = 0.0131983; [2015-11-03 14:08:34.077] [jointLog] [info] iteration = 1900 | max rel diff. = 0.0123282; [2015-11-03 14:08:34.453] [jointLog] [info] iteration = 2000 | max rel diff. = 0.0123282; [2015-11-03 14:08:34.835] [jointLog] [info] iteration = 2100 | max rel diff. = 0.0105099; [2015-11-03 14:08:35.439] [jointLog] [info] iteration = 2261 | max rel diff. = 0.00994575; [2015-11-03 14:08:35.441] [jointLog] [info] Finished optimizer; [2015-11-03 14:08:35.441] [jointLog] [info] writing output ; [2015-11-03 14:08:35.213] [jointLog] [info] iteration = 2200 | max rel diff. = 0.0105132. [2015-11-03 14:08:35.481] [jointLog] [warning] NOTE: Read Lib [( L101_resync_R1.fastq, L101_resync_R2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: L101.quant/libFormatCounts.txt for details. L101.quant/libFormatCounts.txt. ========; Read library consisting of files: ( L101_resync_R1.fastq, L101_resync_R2.fastq ). Expected format: Library format { type:paired end, relative orientation:inward, strandedness:(antisense, sense) }. # of consistent alignments: 6342265; # of inconsistent alignments: 2277243. ========; ---- counts for each format type ---; Library format { type:single end, relative orientation:matching, strandedness:(sense, antisense) } : 0; Library format { type:paired end, relative orientation:matching, strandedness:(sense, antise",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/31:2707,optimiz,optimizer,2707,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/31,1,['optimiz'],['optimizer']
Performance,"ithm so that specific details of the solution are dependent on the order in which the reads are processed (which is random given that multiple threads parse reads and update estimates asynchronously). However, the more important point here is that the inference estimates returned by Salmon (and, for that matter, every other transcript-level expression tool) are the result of a statistical optimization procedure that cannot guarantee a unique global optimal solution (and, in fact, even if a global optimum could be guaranteed, there may be multiple different optima). Thus, there is uncertainty inherent in the statistical problem being solved. Of course, if one ordered updates in the same way and set up the initial conditions precisely the same, there would be convergence to the same result, but any sense of confidence there is illusory. However, Salmon does provide a way to quantify, statistically, confidence in the result. The `--numBootstraps` option will do bootstrap sampling, or the `--numGibbsSamples` option will perform posterior Gibbs sampling. Both of these techniques will provide samples from the posterior distribution, and the variance of these samples will give you some information about the variance in the results that are due purely to the inherent statistical uncertainty in the problem. In the `scripts` folder there is a python script `ConvertBootstrapsToTSV.py` that will convert either the bootstrap or gibbs samples to a easily readable tsv format. These samples represent the estimated number of reads coming from each transcript when sampling from the posterior. These can be used to empirically estimate that statistical uncertainty in the abundance estimates of the different transcripts. Finally, I'll note that while, for the reasons described above, the output is not purely deterministic. The difference between subsequent runs of salmon (with differences changing depending on the order in which reads are parsed and processed) is typically small (and mu",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-259464248:1312,perform,perform,1312,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-259464248,1,['perform'],['perform']
Performance,"ityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>; Args = {int}; Key = std::__cxx11::basic_string<char>; T = unsigned int; Hash = BarcodeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #12 0x00000000007a69ac in cuckoo_fast_double<std::integral_constant<bool, false>, std::integral_constant<bool, true> >; (current_hp=<optimized out>, this=0x7fffffffc520) at /u/user/tmp/salmon/include/cuckoohash_map.hh:1583; #13 cuckoohash_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned int, BarcodeGroupStringHasher, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned int> >, 4ul>::cuckoo_insert_loop<std::integral_constant<bool, false>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=this@entry=0x7fffffffc520, hv=..., b=..., key=...); at /u/user/tmp/salmon/include/cuckoohash_map.hh:1086; #14 0x00000000007a8540 in uprase_fn<std::__cxx11::basic_string<char>&, cuckoohash_map<Key, T, Hash, KeyEqual, Allocator, SLOT_PER_BUCKET>::upsert(K&&, F, Args&& ...) [with K = std::__cxx11::basic_string<char>&; F = densityCalculator(single_parser*, AlevinOpt",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:9770,optimiz,optimized,9770,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,"ize = 16096732; Candidate marks count = 337141231. Reallocating bifurcations time: 8; True marks count: 335754103; Edges construction time: 117. Distinct junctions = 14895414. TwoPaCo::buildGraphMain:: allocated with scalable_malloc; freeing.; TwoPaCo::buildGraphMain:: Calling scalable_allocation_command(TBBMALLOC_CLEAN_ALL_BUFFERS, 0);; allowedIn: 21; Max Junction ID: 14896947; seen.size():119175585 kmerInfo.size():14896948; approximateContigTotalLength: 1087128541; counters for complex kmers:; (prec>1 & succ>1)=3126880 | (succ>1 & isStart)=773 | (prec>1 & isEnd)=671 | (isStart & isEnd)=30; contig count: 24974474 element count: 3020582944 complex nodes: 3128354; # of ones in rank vector: 24974473; [2022-06-01 18:28:09.708] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.; [2022-06-01 18:28:09.708] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory Mus_musculus.GRCm39_v1.8.0_decoy.index; size = 3020582944. | Loading contigs | Time = 469.49 ms. size = 3020582944. | Loading contig boundaries | Time = 242.8 ms. Number of ones: 24974473; Number of ones per inventory item: 512; Inventory entries filled: 48779; 24974473; [2022-06-01 18:28:15.208] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.; [2022-06-01 18:28:15.619] [puff::index::jointLog] [info] contig count for validation: 24,974,473; [2022-06-01 18:28:31.732] [puff::index::jointLog] [info] Total # of Contigs : 24,974,473; [2022-06-01 18:28:31.732] [puff::index::jointLog] [info] Total # of numerical Contigs : 24,974,473; [2022-06-01 18:28:33.958] [puff::index::jointLog] [info] Total # of contig vec entries: 345,523,986; [2022-06-01 18:28:33.958] [puff::index::jointLog] [info] bits per offset entry 29; [2022-06-01 18:28:53.341] [puff::index::jointLog] [info] Done constructing the contig vector. 24974474; [2022-06-01 18:29:07.368] [puff::index::jointLog] [info] # segments = 24,974,473; [2022-06-01 18:29:07.368] [pu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783:12553,Load,Loading,12553,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783,1,['Load'],['Loading']
Performance,"jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06 11:45:12.188] [jointLog] [info] Counted 154,595,094 total reads in the equivalence classes ; [2018-12-06 11:45:12.188] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-06 11:45:12.188] [jointLog] [info] Mapping rate = 57.7821%. [2018-12-06 11:45:12.188] [jointLog] [info] finished quantifyLibrary(); [2018-12-06 11:45:13.385] [alevinLog] [info] Starting optimizer. Analyzed 5344 cells (100% of all).; [2018-12-06 11:49:42.634] [alevinLog] [info] Total 4845644.00 UMI after deduplicating.; [2018-12-06 11:49:42.722] [alevinLog] [info] Clearing EqMap; Might take some time.; [2018-12-06 11:49:47.400] [alevinLog] [info] Starting Import of the gene count matrix of size 5344x167268.; Exception : [std::bad_alloc]; alevin was invoked improperly.; For usage information, try alevin --help; Exiting.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:7586,optimiz,optimizer,7586,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['optimiz'],['optimizer']
Performance,"l IU \; -1 ~/data/raw-data/BLB/${line}1.fastq.gz \; -2 ~/data/raw-data/BLB/${line}2.fastq.gz --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_IU_old/${line} --seqBias --gcBias. The EffectiveLength is again the same (250) for all genes across all samples:; Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250 28.8836 527.392; LOC_Os01g01010.2 2218 250 1.84062 33.6083; LOC_Os01g01019.1 1127 250 0.0547668 1; LOC_Os01g01030.1 2464 250 4.43611 81; LOC_Os01g01040.4 1524 250 0.941635 17.1935; LOC_Os01g01040.1 2508 250 11.5632 211.135; LOC_Os01g01040.2 2482 250 8.02082 146.454; LOC_Os01g01040.3 2583 250 8.55554 156.218; LOC_Os01g01050.1 2039 250 17.2333 314.667. The mapping rate is again similar for all samples:; [2019-03-04 04:42:18.872] [jointLog] [info] parsing read library format; [2019-03-04 04:42:18.872] [jointLog] [info] There is 1 library.; [2019-03-04 04:42:18.928] [jointLog] [info] Loading Quasi index; [2019-03-04 04:42:18.929] [jointLog] [info] Loading 32-bit quasi index; [2019-03-04 04:42:28.958] [jointLog] [info] done; [2019-03-04 04:42:28.958] [jointLog] [info] Index contained 66153 targets; [2019-03-04 04:44:08.443] [fileLog] [info]; At end of round 0; ==================; Observed 18861231 total fragments (18861231 in most recent round). [2019-03-04 04:44:08.442] [jointLog] [info] Computed 48502 rich equivalence classes for further processing; [2019-03-04 04:44:08.442] [jointLog] [info] Counted 17308442 total reads in the equivalence classes; [2019-03-04 04:44:08.450] [jointLog] [info] Mapping rate = 91.7673%. [2019-03-04 04:44:08.450] [jointLog] [info] finished quantifyLibrary(). **For version 0.12**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l IU \; -1 ~/results/trimmingSheng/${line",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256:1716,Load,Loading,1716,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256,1,['Load'],['Loading']
Performance,"l Unique barcodes found: 10630133; [2018-07-26 11:25:31.793] [alevinLog] [info] Used Barcodes except Whitelist: 10603; [2018-07-26 11:25:31.938] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-26 11:25:31.939] [alevinLog] [info] parsing read library format; [2018-07-26 11:25:31.949] [jointLog] [info] There is 1 library.; [2018-07-26 11:25:32.331] [jointLog] [info] Loading Quasi index; [2018-07-26 11:25:32.331] [jointLog] [info] Loading 32-bit quasi index; [2018-07-26 11:25:32.357] [stderrLog] [info] Loading Suffix Array ; [2018-07-26 11:26:09.413] [stderrLog] [info] Loading Transcript Info ; [2018-07-26 11:26:10.896] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-26 11:26:11.159] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-26 11:26:11.225] [stderrLog] [info] Computing transcript lengths; [2018-07-26 11:26:11.226] [stderrLog] [info] Waiting to finish loading hash; [2018-07-26 11:26:14.654] [stderrLog] [info] Done loading index; [2018-07-26 11:26:14.654] [jointLog] [info] done; [2018-07-26 11:26:14.654] [jointLog] [info] Index contained 203027 targets. Incorrect call for umi extractIncorrect call for umi extract; ```. I traced it back to AlevinUtils.cpp in the source files but could not make sense of it from there. The program will run completely on the same data and library if I change --dropseq to --Chromium, eventually outputting the following after processing the reads:. ```; [2018-07-24 10:56:20.712] [jointLog] [info] Computed 9968 rich equivalence classes for further processing; [2018-07-24 10:56:20.712] [jointLog] [info] Counted 2785976 total reads in the equivalence classes; [2018-07-24 10:56:20.729] [jointLog] [warning] Only 2785976 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-07-24 10:56:20.729] [jointLog] [warning] Found 82730645 reads with CB+UMI length smaller than expected.Ple",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:3352,load,loading,3352,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['load'],['loading']
Performance,ld is just the GNU linker.; I still think it's not able to find the zlib **library** file since the error at `-lz` where `-l` gives the namespace of the library.; If you are confident about the inclusion of the `Zlib` then can you try clearing the cmake cache (i.e. remove the file CMakeCache.txt) and build again?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314430634:254,cache,cache,254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314430634,2,['cache'],['cache']
Performance,"le | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; -----------------------------------------; size = 2977516968; -----------------------------------------; | Loading reference sequence | Time = 228.26 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 320.51 us; -----------------------------------------; [2024-05-03 15:10:04.136] [jointLog] [info] done; [2024-05-03 15:10:04.170] [jointLog] [info] Index contained 147554 targets. [2024-05-03 15:10:05.131] [jointLog] [info] Number of decoys : 61 ; processed 21000000 fragmentsointLog] [info] First decoy index : 147456; hits: 25885546, hits per frag: 1.2683(base) [**no further output**]; ```. **Desktop (please complete the following information):**; - OS: Ubuntu linux. ```; $ uname -a; Linux big-bird 5.15.0-102-generic #112-Ubuntu SMP Tue Mar 5 16:50:32 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux; $ lsb_release -a; No LSB modules are available.; Distributor ID: Ubuntu; Description: Ubuntu 22.04.4 LTS; Release: 22.04; Codename: jammy; ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:7019,Load,Loading,7019,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,2,['Load'],['Loading']
Performance,"lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-06-06 19:23:29.520] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; ```. It is interesting because the barcodes are recognized during the processing, but they don't appear in the frequency table? I don0t get that part. > Can you clarify a bit more about what you meant with: The FASTQ file of the reads is not paired-end. I mean that each of the files has all the unique reads, that is, it is not a paired-end sample where one fastq is forward and the other one is reverse. I just mentioned it in case it was necessary for the `--end 5`parameter. Thanks for the help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:3046,Load,Loading,3046,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,2,['Load'],['Loading']
Performance,"lentine/data/SRP034543/SRR2048254_1.fastq.gz) \; > -2 <(zcat /nfs/research2/teichmann/valentine/data/SRP034543/SRR2048254_2.fastq.gz) \; > -o /tmp/SRR2048254_salmon_out \; > --biasCorrect \; > --useFSPD; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna_38.p4.83_repbase20.11_ercc_SIRV.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /dev/fd/63 }; # [ mates2 ] => { /dev/fd/62 }; # [ output ] => { /tmp/SRR2048254_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to /tmp/SRR2048254_salmon_out/logs; [2016-06-21 10:04:29.524] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi indextcmalloc: large alloc 4294967296 bytes == 0x4d084000 @; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Suffix Array; [2016-06-21 10:04:30.159] [stderrLog] [info] Loading Position Hash; [2016-06-21 10:04:30.158] [jointLog] [info] Loading Quasi index; [2016-06-21 10:04:32.681] [stderrLog] [info] Loading Transcript Info; [2016-06-21 10:04:33.686] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-06-21 10:04:34.050] [stderrLog] [info] There were 115426 set bits in the bit array; [2016-06-21 10:04:34.376] [stderrLog] [info] Computing transcript lengths; [2016-06-21 10:04:34.377] [stderrLog] [info] Waiting to finish loading hash; Index contained 115426 targets; [2016-06-21 10:04:47.033] [jointLog] [info] done; [2016-06-21 10:04:47.033] [stderrLog] [info] Done loading index. processed 6500000 fragments; hits: 13927069, hits per frag: 2.15389. [2016-06-21 10:05:13.847] [jointLog] [info] Computed 165969 rich equivalence classes for further processing; [2016-06-21 10:05:13.847] [jointLog] [info] Counted 6514601 total reads in the equivalence classes; [2016-06-21 10:05:13.893] [jointLog] [info] Mapping rate = 95.0922%. [2016-06-21 10:05:13.893] [jointLog] [in",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/64:1442,Load,Loading,1442,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/64,1,['Load'],['Loading']
Performance,"levinLog] [info] Done barcode density calculation.; [2019-06-06 19:24:55.681] [alevinLog] [info] # Barcodes Used: 31478936 / 31478936.; [2019-06-06 19:24:55.688] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-06 19:24:55.688] [alevinLog] [info] Done True Barcode Sampling; [2019-06-06 19:24:55.690] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-06 19:24:55.692] [alevinLog] [info] Done populating Z matrix; [2019-06-06 19:24:55.692] [alevinLog] [info] Done indexing Barcodes; [2019-06-06 19:24:55.692] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-06 19:24:55.692] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:1300,Load,Loading,1300,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['Load'],['Loading']
Performance,levinLog] [info] Throwing 0 barcodes with < 1 reads; > [2020-06-04 17:56:25.388] [alevinLog] [info] Total [32m95377[0m(has [32m11[0m low confidence) barcodes; > [2020-06-04 17:56:25.577] [alevinLog] [info] Done True Barcode Sampling; > [2020-06-04 17:56:25.698] [alevinLog] [info] Total 1.2299% reads will be thrown away because of noisy Cellular barcodes.; > [2020-06-04 17:56:29.508] [alevinLog] [info] Done populating Z matrix; > [2020-06-04 17:56:29.545] [alevinLog] [info] Total 118774 CB got sequence corrected; > [2020-06-04 17:56:29.557] [alevinLog] [info] Done indexing Barcodes; > [2020-06-04 17:56:29.557] [alevinLog] [info] Total Unique barcodes found: 604589; > [2020-06-04 17:56:29.557] [alevinLog] [info] Used Barcodes except Whitelist: 88156; > [2020-06-04 17:56:30.294] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; > ; > [2020-06-04 17:56:30.294] [alevinLog] [info] parsing read library format; > [2020-06-04 17:57:36.339] [alevinLog] [info] Starting optimizer; > ; > ; > [2020-06-04 17:57:37.051] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 17:57:37.051] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 17:57:37.338] [alevinLog] [info] Total 23937.00 UMI after deduplicating.; > [2020-06-04 17:57:37.338] [alevinLog] [info] Total 91 BiDirected Edges.; > [2020-06-04 17:57:37.338] [alevinLog] [info] Total 82 UniDirected Edges.; > [2020-06-04 17:57:37.338] [alevinLog] [warning] Skipped 82268 barcodes due to No mapped read; > [2020-06-04 17:57:37.341] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-04 17:57:37.348] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 10.Can't performing whitelisting; Skipping; > [2020-06-04 17:57:37.348] [alevinLog] [info] Finished optimizer; > ; > . salmon_quant.log. > [2020-06-04 17:55:11.700] [jointLog] [info] setting maxHashResizeThreads to 7; > [2020-06-04 17:55:11.7,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639196415:1796,optimiz,optimizer,1796,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639196415,1,['optimiz'],['optimizer']
Performance,"lip ] => { }; ### [ allowDovetail ] => { }; ### [ recoverOrphans ] => { }; ### [ numBootstraps ] => { 10 }; ### [ output ] => { mapped/salmon_03 }; Logs will be written to mapped/salmon_03/logs; [2024-05-03 15:09:51.221] [jointLog] [info] setting maxHashResizeThreads to 64; [2024-05-03 15:09:51.221] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2024-05-03 15:09:51.221] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-05-03 15:09:51.221] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-05-03 15:09:51.221] [jointLog] [info] parsing read library format; [2024-05-03 15:09:51.221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; ------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:5925,Load,Loading,5925,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,"list ] => { barcode_seq_5K.txt }; ### [ dumpCsvCounts ] => { }. [2018-07-19 22:53:27.714] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 87 Million barcodes. [2018-07-19 22:55:37.299] [alevinLog] [info] Done barcode density calculation.; [2018-07-19 22:55:37.299] [alevinLog] [info] # Barcodes Used: 86885223 / 87959276.; [2018-07-19 22:55:37.303] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 22:55:37.303] [alevinLog] [info] Total 5238 white-listed Barcodes; [2018-07-19 22:55:37.675] [alevinLog] [info] Done populating Z matrix; [2018-07-19 22:55:37.683] [alevinLog] [info] Done indexing Barcodes; [2018-07-19 22:55:37.683] [alevinLog] [info] Total Unique barcodes found: 978816; [2018-07-19 22:55:37.683] [alevinLog] [info] Used Barcodes except Whitelist: 20705; [2018-07-19 22:55:38.386] [jointLog] [info] There is 1 library.; [2018-07-19 22:55:38.493] [jointLog] [info] Loading Quasi index; [2018-07-19 22:55:38.494] [jointLog] [info] Loading 32-bit quasi index; [2018-07-19 22:55:38.549] [jointLog] [info] done; [2018-07-19 22:55:38.549] [jointLog] [info] Index contained 179 targets. [2018-07-19 22:55:38.385] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-19 22:55:38.385] [alevinLog] [info] parsing read library format; [2018-07-19 22:55:38.495] [stderrLog] [info] Loading Suffix Array ; [2018-07-19 22:55:38.498] [stderrLog] [info] Loading Transcript Info ; [2018-07-19 22:55:38.499] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-19 22:55:38.500] [stderrLog] [info] There were 179 set bits in the bit array; [2018-07-19 22:55:38.501] [stderrLog] [info] Computing transcript lengths; [2018-07-19 22:55:38.501] [stderrLog] [info] Waiting to finish loading hash; processed 87 Million fragmentserrLog] [info] Done loading index; hits: 468892, hits per frag: 0.00535907. [2018-07-19 23:03:35.740] [jointLog] [info] Computed 150 rich equivalence classes for further processing; [2018-07-19 23:03:35.740] [",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:2471,Load,Loading,2471,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,1,['Load'],['Loading']
Performance,"ll/include/boost/thread/thread_only.hpp:22:; /gpfs/projects/hpc_support/salmon/external/install/include/boost/container_hash/hash.hpp:130:33: warning: ‚Äòtemplate<class _Arg, class _Result> struct std::unary_function‚Äô is deprecated [-Wdeprecated-declarations]; 130 | struct hash_base : std::unary_function<T, std::size_t> {};; | ^~~~~~~~~~~~~~; In file included from /gpfs/software/gcc/13.2.0/include/c++/13.2.0/string:49,; from /gpfs/projects/hpc_support/salmon/external/install/include/boost/thread/exceptions.hpp:20:; /gpfs/software/gcc/13.2.0/include/c++/13.2.0/bits/stl_function.h:117:12: note: declared here; 117 | struct unary_function; | ^~~~~~~~~~~~~~; make[2]: *** [src/CMakeFiles/salmon_core.dir/build.make:160: src/CMakeFiles/salmon_core.dir/GenomicFeature.cpp.o] Error 1; make[1]: *** [CMakeFiles/Makefile2:568: src/CMakeFiles/salmon_core.dir/all] Error 2; make: *** [Makefile:166: all] Error 2; ```. **To Reproduce**; ```; #!/usr/bin/env bash. module load cmake Bzip2/1.0.8 curl; module load oneTBB/gcc13.2/2021.13.0; module load boost/gcc13.2/1.86.0 . rm -rf CMake*. cmake .. \; -DCMAKE_C_COMPILER=gcc \; -DBOOST_ROOT=/gpfs/software/boost/xeonmax/gcc13.2/1.86.0/ \; -DTBB_INSTALL_DIR=/gpfs/software/oneTBB/xeonmax/gcc13.2.0/2021.13.0 \; -DTBB_ROOT=/gpfs/software/oneTBB/xeonmax/gcc13.2.0/2021.13.0 \; -DCMAKE_CXX_COMPILER=g++ \; -DCMAKE_C_FLAGS=""-O3 -march=sapphirerapids -mtune=sapphirerapids"" \; -DCMAKE_CXX_FLAGS=""-O3 -march=sapphirerapids -mtune=sapphirerapids"" \; -DCMAKE_INSTALL_PREFIX:PATH=/gpfs/software/salmon/xeonmax/gcc13.2.0/1.10.3. make clean; make -j 25; ```. Specifically, please provide at least the following information:. * Which version of salmon was used? **1.10.3**; * How was salmon installed (compiled, downloaded executable, through bioconda)? **compiled**. **Expected behavior**; A successful build. **Desktop (please complete the following information):**; - OS: **Rocky Linux 9.4**; - Version: **Linux xm013 5.14.0-427.26.1.el9_4.x86_64 #1 SMP PREEMPT_DYNAMIC T",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/953:2986,load,load,2986,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/953,1,['load'],['load']
Performance,"lmon (mapping-based) v0.10.0; \#\#\# [ program ] => salmon; \#\#\# [ command ] => quant; \#\#\# [ index ] => { salmon010.index.all_combined }; \#\#\# [ libType ] => { A }; \#\#\# [ mates1 ] => { R1.fastq.gz }; \#\#\# [ mates2 ] => { R2.fastq.gz }; \#\#\# [ posBias ] => { }; \#\#\# [ gcBias ] => { }; \#\#\# [ seqBias ] => { }; \#\#\# [ useVBOpt ] => { }; \#\#\# [ validateMappings ] => { }; \#\#\# [ output ] => { processed_salmon0100_k31_allcombined/R }; Logs will be written to processed_salmon0100_k31_allcombined/R/logs; [2018-05-31 16:54:42.310] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-05-31 16:54:42.310] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2018-05-31 16:54:42.310] [jointLog] [info] parsing read library format; [2018-05-31 16:54:42.310] [jointLog] [info] There is 1 library.; [2018-05-31 16:54:42.480] [jointLog] [info] Loading Quasi index; [2018-05-31 16:54:42.501] [jointLog] [info] Loading 32-bit quasi index; [2018-05-31 16:54:42.501] [stderrLog] [info] Loading Suffix Array; [2018-05-31 16:55:01.293] [stderrLog] [info] Loading Transcript Info; [2018-05-31 16:55:06.428] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-05-31 16:55:07.107] [stderrLog] [info] There were 310732 set bits in the bit array; [2018-05-31 16:55:07.158] [stderrLog] [info] Computing transcript lengths; [2018-05-31 16:55:07.159] [stderrLog] [info] Waiting to finish loading hash; [2018-05-31 16:55:25.973] [jointLog] [info] done; [2018-05-31 16:55:25.973] [jointLog] [info] Index contained 310732 targets; [2018-05-31 16:55:25.973] [stderrLog] [info] Done loading index. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 224580543, hits per frag: 3.35031[2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:1170,Load,Loading,1170,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['Load'],['Loading']
Performance,"lmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:23:49.875] [jointLog] [info] finished quantifyLibrary(); [2016-01-02 20:23:49.875] [jointLog] [info] Starting optimizer; [2016-01-02 20:23:50.378] [jointLog]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:7875,Load,Loading,7875,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"lowing is the content of the `salmon_quant.log`. ```; [2016-01-03 00:33:37.001] [jointLog] [info] parsing read library format; [2016-01-03 00:33:37.510] [jointLog] [info] Loading Quasi index; [2016-01-03 00:33:53.646] [jointLog] [info] done; [2016-01-03 00:34:14.501] [jointLog] [info] Computed 13742 rich equivalence classes for further processing; [2016-01-03 00:34:14.501] [jointLog] [info] Counted 335230 total reads in the equivalence classes; [2016-01-03 00:34:14.501] [fileLog] [info]; At end of round 0; ==================; Observed 3835342 total fragments (3835342 in most recent round). [2016-01-03 00:34:20.992] [jointLog] [warning] Only 335230 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-01-03 00:34:20.992] [jointLog] [info] Mapping rate = 8.74055%. [2016-01-03 00:34:20.992] [jointLog] [info] finished quantifyLibrary(); [2016-01-03 00:34:20.992] [jointLog] [info] Starting optimizer; [2016-01-03 00:34:21.028] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-01-03 00:34:21.030] [jointLog] [info] iteration = 0 | max rel diff. = 23.4889; [2016-01-03 00:34:21.167] [jointLog] [info] iteration = 100 | max rel diff. = 0.150549; [2016-01-03 00:34:21.304] [jointLog] [info] iteration = 200 | max rel diff. = 0.0517672; [2016-01-03 00:34:21.447] [jointLog] [info] iteration = 300 | max rel diff. = 0.0368208; [2016-01-03 00:34:21.578] [jointLog] [info] iteration = 400 | max rel diff. = 0.0237254; [2016-01-03 00:34:21.705] [jointLog] [info] iteration = 500 | max rel diff. = 0.0147784; [2016-01-03 00:34:21.834] [jointLog] [info] iteration = 600 | max rel diff. = 0.0131134; [2016-01-03 00:34:21.961] [jointLog] [info] iteration = 700 | max rel diff. = 0.0130094; [2016-01-03 00:34:22.092] [jointLog] [info] iteration = 800 | max rel diff. = 0.0100546; [2016-01-03 00:34:22.196] [jointLog] [info] iteration = 882 | max rel diff. = 0.00861472; [2016-",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784:1255,optimiz,optimizer,1255,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168447784,1,['optimiz'],['optimizer']
Performance,"lt still segfaults. It still needed an edit of the CMakeLists.txt file. Still, for future reference:. ```; pversion=1.2.1; package=salmon; TOPDIR=/usr/common/modules/el8/x86_64/software/${package}/${pversion}-CentOS-vanilla; wget https://github.com/COMBINE-lab/salmon/archive/v1.2.1.tar.gz; gunzip -c v1.2.1.tar.gz | tar -xf -; /bin/rm v1.2.1.tar.gz; cd ${package}-${pversion}; mv CMakeLists.txt CMakeLists.txt.dist; cat >mypatch <<'EOD'; --- CMakeLists.txt.dist	2020-04-21 22:31:07.000000000 -0700; +++ CMakeLists.txt	2020-06-09 14:55:02.733885772 -0700; @@ -419,6 +419,10 @@; find_package(Boost 1.59.0 COMPONENTS iostreams filesystem system timer chrono program_options); message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); +message(""Forcing Boost_FOUND to TRUE""); +set(Boost_FOUND TRUE); +set(Boost_LIBRARY_DIRS ""/usr/lib64/boost169""); +set(Boost_LIBRARIES -lboost_iostreams -lboost_filesystem -lboost_system -lboost_timer -lboost_chrono -lboost_program_options); message(""Boost_FOUND = ${Boost_FOUND}""); endif(); ; EOD; patch -p0 <mypatch; module load cmake; module load io_lib; module load libgff; module load libtbb; mkdir build; cd build; export CFLAGS=""-g -O0""; export CXXFLAGS=""-g -O0""; cmake \; -DCMAKE_INSTALL_PREFIX=$TOPDIR \; -DSTADEN_ROOT=$ROOT_IO_LIB \; -DGFF_ROOT=$ROOT_LIBGFF \; -DTBB_ROOT=$ROOT_LIBTBB \; -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_09.log; make -j 4 2>&1 | tee build_2020_06_09.log. ```. Since it was compiled ""-g -O0"" this time it was easier to step through it. Well, somewhat. In Salmon.cpp line 195 is the last place a break point works. If one is set for 197 it segfaults before reaching it. Line 195 is:. `	 po::store(parsed, vm);; `; I tried briefly to trace inward from there but couldn't make heads or tails of the path it was taking through an endless series of headers.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641612831:1149,load,load,1149,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641612831,4,['load'],['load']
Performance,"lt_multiplier<unsigned long> >&, std::gamma_distribution<double>::param_type const&) (); #2 0x0000000000634b8d in tbb::interface9::internal::start_for<tbb::blocked_range<unsigned long>, sampleRoundNonCollapsedMultithreaded_(std::vector<std::pair<TranscriptGroup const, TGValue>, std::allocator<std::pair<TranscriptGroup const, TGValue> > >&, std::vector<bool, std::allocator<bool> >&, std::vector<unsigned long, std::allocator<unsigned long> >&, std::vector<double, std::allocator<double> >&, std::vector<double, std::allocator<double> >&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, std::vector<double, std::allocator<double> > const&, std::vector<double, std::allocator<double> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)::{lambda(tbb::blocked_range<unsigned long> const&)#2}, tbb::auto_partitioner const>::execute() (); #3 0x00007f20171ca492 in tbb::internal::custom_scheduler<tbb::internal::IntelSchedulerTraits>::local_wait_for_all (this=0x7f1fd8dc0c00, parent=..., child=<optimized out>); at ../../src/tbb/custom_scheduler.h:469; #4 0x00007f20171c85a0 in tbb::internal::generic_scheduler::local_spawn_root_and_wait (this=0x7f1fd8dc0c00, first=..., next=@0x7f1fd8db7d38: 0x7f1fd8db7340); at ../../src/tbb/scheduler.cpp:649; #5 0x0000000000632eba in sampleRoundNonCollapsedMultithreaded_(std::vector<std::pair<TranscriptGroup const, TGValue>, std::allocator<std::pair<TranscriptGroup const, TGValue> > >&, std::vector<bool, std::allocator<bool> >&, std::vector<unsigned long, std::allocator<unsigned long> >&, std::vector<double, std::allocator<double> >&, std::vector<double, std::allocator<double> >&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, std::vector<double, std::allocator<double> > const&, std::vector<double, std::allocator<double> >&, std::vector<unsigned int, std::allocator<unsigned int> >&) (); #6 0x000000000063936f in bool CollapsedGibbsSampler::sample<ReadExperiment>(ReadExperiment&, SalmonOpts&, std::function<bool (std::vector<double, std::allocator<double> > c",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267534520:2867,optimiz,optimized,2867,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267534520,1,['optimiz'],['optimized']
Performance,"lude/eigen3/Eigen/src/Core/DenseCoeffsBase.h:378: Eigen::DenseCoeffsBase<Derived, 1>::Scalar& Eigen::DenseCoeffsBase<Derived, 1>::operator[](Eigen::DenseCoeffsBase<Derived, 1>::Index) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::DenseCoeffsBase<Derived, 1>::Scalar = double; Eigen::DenseCoeffsBase<Derived, 1>::Index = long int]: Assertion `index >= 0 && index < size()' failed.; /home/ngs/scripts/sc-rna/sc-s-salmon-quant.sh: line 40: 10170 Aborted (core dumped) . when I run. ```bash; salmon quant \; -i ""$path_dr_salmonindex_transcriptome_ercc"" \; -o ""$newfilename-salmon-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1067,Load,Loading,1067,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['Load'],['Loading']
Performance,"m protocol (END, BC length, UMI length) = (5, 16, 10) is being used. Updating UMI k-mer length accordingly.; [2019-06-23 18:08:01.803] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-23 18:08:01.804] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-23 18:08:01.804] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-06-23 18:08:01.804] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-06-23 18:08:01.804] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2019-06-23 18:08:01.805] [alevinLog] [info] Loading Header; [2019-06-23 18:08:01.807] [alevinLog] [info] Loading Transcript Info ; [2019-06-23 18:08:02.243] [alevinLog] [warning] Found {} transcripts with duplicate names; [2019-06-23 18:08:02.530] [alevinLog] [info] Found all transcripts to gene mappings; ### alevin (dscRNA-seq quantification) v0.14.0; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { U }; ### [ mates2 ] => { /mnt/beegfs/alexmascension/Projects/Single-cell_skin_analysis//Data/Cheng-2018/read_fastq//sample.fastq }; ### [ mates1 ] => { /mnt/beegfs/alexmascension/Projects/Single-cell_skin_analysis//Data/Cheng-2018/CB_UMI//sample.fastq }; ### [ index ] => { /mnt/beegfs/alexmascension/STAR//hg38/salmon_index/ }; ### [ threads ] => { 40 }; ### [ output ] => { /mnt/beegfs/alexmascension/Projects/Single-cell_skin_analysis//Data/Cheng-2018//Alevin/sample }; ### [ end ] => { 5 }; ### [ barcodeLength ] => { 16 }; ### [ umiLength ] => { 10 }; ### [ dumpUmiGraph ] => { }; ### [ tgMap ] => { /mnt/beegfs/alexmascension/STAR//hg38/dict_transcript_gene.tsv }. [2019-06-23 18",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:2641,Load,Loading,2641,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['Load'],['Loading']
Performance,mand ] => quant ; ### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { fastq_files/SRR2454059.fq.gz }; ### [ threads ] => { 8 }; ### [ libType ] => { ISF }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_quant/hg38.analysisSet_knownGene/SRR2454059 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 100 }; Logs will be written to salmon_quant/hg38.analysisSet_knownGene/SRR2454059/logs; [2016-12-13 12:44:39.271] [jointLog] [info] parsing read library format; [2016-12-13 12:44:39.271] [jointLog] [info] There is 1 library.; [2016-12-13 12:44:39.836] [jointLog] [info] Loading Quasi index; [2016-12-13 12:44:39.836] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 12:44:39.836] [stderrLog] [info] Loading Suffix Array ; [2016-12-13 12:44:43.439] [stderrLog] [info] Loading Transcript Info ; [2016-12-13 12:44:44.355] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 12:44:44.613] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 12:44:44.629] [stderrLog] [info] Computing transcript lengths; [2016-12-13 12:44:44.629] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 12:44:44.629] [stderrLog] [info] Done loading index; [2016-12-13 12:44:44.629] [jointLog] [info] done; [2016-12-13 12:44:44.629] [jointLog] [info] Index contained 182608 targets; [2016-12-13 12:44:49.583] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in ; single-end libraries. Please use this option with caution. processed 19000000 fragments; hits: 65897660; hits per frag: 3.46963. [2016-12-13 12:46:51.776] [jointLog] [info] Computed 137534 rich equivalence classes for further processin; g; [2016-12-13 12:46:51.776] [jointLog] [info] Counted 1626596,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:1621,Load,Loading,1621,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['Load'],['Loading']
Performance,"mat; [2019-03-04 04:42:18.872] [jointLog] [info] There is 1 library.; [2019-03-04 04:42:18.928] [jointLog] [info] Loading Quasi index; [2019-03-04 04:42:18.929] [jointLog] [info] Loading 32-bit quasi index; [2019-03-04 04:42:28.958] [jointLog] [info] done; [2019-03-04 04:42:28.958] [jointLog] [info] Index contained 66153 targets; [2019-03-04 04:44:08.443] [fileLog] [info]; At end of round 0; ==================; Observed 18861231 total fragments (18861231 in most recent round). [2019-03-04 04:44:08.442] [jointLog] [info] Computed 48502 rich equivalence classes for further processing; [2019-03-04 04:44:08.442] [jointLog] [info] Counted 17308442 total reads in the equivalence classes; [2019-03-04 04:44:08.450] [jointLog] [info] Mapping rate = 91.7673%. [2019-03-04 04:44:08.450] [jointLog] [info] finished quantifyLibrary(). **For version 0.12**; #!/bin/bash; #SBATCH -N 1; #SBATCH -c 8; #SBATCH --mem=10G; #SBATCH --mail-use=tarun2@illinois.edu; #SBATCH -J Salmon; #SBATCH -a 1-24. module load Salmon/0.12.0-IGB-gcc-8.2.0. line=$(sed -n -e ""$SLURM_ARRAY_TASK_ID p"" ~/source/BLBnew.txt). salmon quant -i ~/data/genome/MSU7new_transcript.index -l IU \; -1 ~/results/trimmingSheng/${line}1.paired.fastq \; -2 ~/results/trimmingSheng/${line}2.paired.fastq --numBootstraps=30 \; -p 12 -o ~/results/salmon_quant_Sheng_IU/${line} --seqBias --gcBias --validateMappings. There are no estimate and reads generated when invokin the library type IU:; Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 3017.000 0.000000 0.000; LOC_Os01g01010.2 2218 2218.000 0.000000 0.000; LOC_Os01g01019.1 1127 1127.000 0.000000 0.000; LOC_Os01g01030.1 2464 2464.000 0.000000 0.000; LOC_Os01g01040.4 1524 1524.000 0.000000 0.000; LOC_Os01g01040.1 2508 2508.000 0.000000 0.000; LOC_Os01g01040.2 2482 2482.000 0.000000 0.000; LOC_Os01g01040.3 2583 2583.000 0.000000 0.000; LOC_Os01g01050.1 2039 2039.000 0.000000 0.000. [2019-03-04 01:24:12.788] [jointLog] [info] Fragment incompatibility prior below thresho",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256:2534,load,load,2534,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346#issuecomment-469215256,1,['load'],['load']
Performance,"me sample with salmon index generated as discussed above and got this report ; [2022-05-14 01:26:06.437] [jointLog] [info] Computed 380,631 rich equivalence classes for further processing; [2022-05-14 01:26:06.437] [jointLog] [info] Counted 22,462,069 total reads in the equivalence classes ; [2022-05-14 01:26:06.454] [jointLog] [info] Number of mappings discarded because of alignment score : 236,393,072; [2022-05-14 01:26:06.454] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 3,028,418; [2022-05-14 01:26:06.454] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2022-05-14 01:26:06.454] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 1,137,227; [2022-05-14 01:26:06.454] [jointLog] [info] Mapping rate = 57.216%. [2022-05-14 01:26:06.455] [jointLog] [info] finished quantifyLibrary(); [2022-05-14 01:26:06.485] [jointLog] [info] Starting optimizer; [2022-05-14 01:26:06.581] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2022-05-14 01:26:06.593] [jointLog] [info] iteration = 0 | max rel diff. = 10507; [2022-05-14 01:26:07.966] [jointLog] [info] iteration = 100 | max rel diff. = 17.2222; [2022-05-14 01:26:09.253] [jointLog] [info] iteration = 200 | max rel diff. = 12.5822; [2022-05-14 01:26:10.641] [jointLog] [info] iteration = 300 | max rel diff. = 12.6466; [2022-05-14 01:26:11.976] [jointLog] [info] iteration = 400 | max rel diff. = 4.95752; [2022-05-14 01:26:13.272] [jointLog] [info] iteration = 500 | max rel diff. = 0.754259; [2022-05-14 01:26:14.546] [jointLog] [info] iteration = 600 | max rel diff. = 0.148902; [2022-05-14 01:26:15.788] [jointLog] [info] iteration = 700 | max rel diff. = 0.117727; [2022-05-14 01:26:17.074] [jointLog] [info] iteration = 800 | max rel diff. = 0.166671; [2022-05-14 01:26:18.385] [jointLog] [info] iteration = 900 | max rel diff. = 0.068019; [2022-05-14 01:26:19.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943:2311,optimiz,optimizer,2311,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943,1,['optimiz'],['optimizer']
Performance,"ments will be ignored.; [2021-09-20 16:20:48.240] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:20:48.240] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:20:48.240] [jointLog] [info] parsing read library format; [2021-09-20 16:20:48.240] [jointLog] [info] There is 1 library.; [2021-09-20 16:20:48.328] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:20:48.331] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 75.428 ms; -----------------------------------------. [2021-09-20 16:22:03.730] [jointLog] [info] done;",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:4953,Load,Loading,4953,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ments will be ignored.; [2021-09-20 16:29:51.663] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-09-20 16:29:51.663] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-09-20 16:29:51.663] [jointLog] [info] parsing read library format; [2021-09-20 16:29:51.663] [jointLog] [info] There is 1 library.; [2021-09-20 16:29:51.736] [jointLog] [info] Loading pufferfish index; [2021-09-20 16:29:51.738] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 5.1367 ms; -----------------------------------------; [2021-09-20 16:31:04.631] [jointLog] [info] done",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:1989,Load,Loading,1989,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ments will be ignored.; [2023-11-30 09:36:58.680] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:36:58.680] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:36:58.680] [jointLog] [info] parsing read library format; [2023-11-30 09:36:58.680] [jointLog] [info] There is 1 library.; [2023-11-30 09:36:58.681] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:36:58.681] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 2.8044 ms; -----------------------------------------. [2023-11-30 09:37:51.026] [jointLog] [info] done",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:6751,Load,Loading,6751,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"ments will be ignored.; [2023-11-30 09:40:21.543] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-11-30 09:40:21.543] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-11-30 09:40:21.543] [jointLog] [info] parsing read library format; [2023-11-30 09:40:21.543] [jointLog] [info] There is 1 library.; [2023-11-30 09:40:21.544] [jointLog] [info] Loading pufferfish index; [2023-11-30 09:40:21.545] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.3385 ms; -----------------------------------------. Segmentation fault (core dumped); ```. Output wh",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:3626,Load,Loading,3626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"mon for mapping and quantification, there is a separate background thread that simply consumes reads from file and puts them in memory for quantification, and while e.g. pairing information between files is guaranteed to be preserved, exact read order is not. This can lead to differences in the order in which reads are processed and, as a result, differences in the initialization conditions of the optimization. The ultimate result is that for transcripts that have large inferential uncertainty, different numbers of reads can be assigned between runs. We have thought *a lot* about this behavior, what it means, and how the `NumRead` values should best be communicated to users. At the end of the day, the `NumReads` constitute the expected value of latent variables inferred in a _very_ high-dimensional space (# of parameters is at least the number of transcripts). Therefore, there are certain transcripts, whose estimated number of reads simply have _tremendous_ inferential uncertainty ‚Äî and small perturbations in the initial conditions of the optimization will lead to different estimated values for their abundances. For those transcripts where you observe such fluctuations between runs, this is simply evidence that the precision that can be confidently placed on those estimates is below the degree of variation you observe. Treating these transcripts in downstream analysis as more certain can easily lead to spurious inferences regarding things like differential transcript expression or usage. . One can make an argument for trying to provide a way to enforce removal of this variation (which, granted, would be a challenge). However, the reason we decided against even attempting this is because it doesn't properly address any issue with respect to an actual biological analysis. That is, even if you could fix, precisely, the update order and initialization conditions for a specific sample to eliminate any variation between runs, almost all experiments consist of multiple samp",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858:1861,optimiz,optimization,1861,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858,2,['optimiz'],['optimization']
Performance,mon run that I got the backtrace from:. ```; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene }; ### [ libType ] => { SR }; ### [ unmatedReads ] => { fastq_files/SRR2454069.fq.gz }; ### [ threads ] => { 8 }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_temp/REF/SRR2454069 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 10 }; Logs will be written to salmon_temp/REF/SRR2454069/logs; [2016-12-15 15:58:50.157] [jointLog] [info] parsing read library format; [2016-12-15 15:58:50.157] [jointLog] [info] There is 1 library.; [2016-12-15 15:58:50.189] [jointLog] [info] Loading Quasi index; [2016-12-15 15:58:50.189] [jointLog] [info] Loading 32-bit quasi index; [2016-12-15 15:58:50.189] [stderrLog] [info] Loading Suffix Array; [2016-12-15 15:58:50.513] [stderrLog] [info] Loading Transcript Info; [2016-12-15 15:58:50.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-15 15:58:50.661] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-15 15:58:50.677] [stderrLog] [info] Computing transcript lengths; [2016-12-15 15:58:50.677] [stderrLog] [info] Waiting to finish loading hash; [2016-12-15 15:58:50.677] [stderrLog] [info] Done loading index; [2016-12-15 15:58:50.677] [jointLog] [info] done; [2016-12-15 15:58:50.677] [jointLog] [info] Index contained 182608 targets; [2016-12-15 15:58:51.587] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries. Please use this option with caution. processed 16500000 fragments; hits: 44017772; hits per frag: 2.67057. [2016-12-15 16:01:44.937] [jointLog],MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:1020,Load,Loading,1020,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['Load'],['Loading']
Performance,"mon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq; lrwxrwxrwx 1 vale rst_pub 112 Jan 2 20:08 SRP057125_SRS936134_2.fastq -> /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq; drwxrwxr-x 5 vale rst_pub 4.0K Jan 2 20:20 SRP057125_SRS936134_salmon_out; ```. But when I run the script there, it succeeds, without segfault. ```; [vale@ebi-003 salmon-problem]$ bash run_salmon.sh; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:16:39.349] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:16:39.895] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:16:39.895] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:16:39.894] [jointLog] [info] Loading Quasi index; [2016-01-02 20:16:42.565] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:16:43.654] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:16:44.075] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:16:44.448] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:16:44.448] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:16:57.606] [stderrLog] [info] Done loading index; [2016-01-02 20:16:57.606] [jointLog] [info] done. processed 12000000 fragments; hits: 24367197, hits per frag: 2.06194+06. [2016-01-02 20:17:29.841] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:17:29.841] [jointLog] [info] Cou",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:1699,Load,Loading,1699,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"mon_index }; # [ libType ] => { IU }; # [ mates1 ] => { ../strange_peak/19232_1_1.fastq }; # [ mates2 ] => { ../strange_peak/19232_1_2.fastq }; # [ output ] => { quant_binary }; Logs will be written to quant_binary/logs; there is 1[2016-03-31 14:05:14.184] [jointLog] [info] parsing read library format; lib; Loading 64-bit quasi index[2016-03-31 14:05:14.266] [stderrLog] [info] Loading Suffix Array; [2016-03-31 14:05:14.266] [jointLog] [info] Loading Quasi index. [2016-03-31 14:07:58.647] [stderrLog] [info] Loading Transcript Info; [2016-03-31 14:08:59.703] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-31 14:09:06.744] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in the equivalence classes. [2016-03-31 14:13:24.480] [jointLog] [warning] Only 159824 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2016-03-31 14:13:24.480] [jointLog] [info] Mapping rate = 36.3942%. [2016-03-31 14:13:24.480] [jointLog] [info] finished quantifyLibrary(); [2016-03-31 14:13:24.480] [jointLog] [info] Starting optimizer; [2016-03-31 14:13:25.441] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-03-31 14:13:25.660] [jointLog] [info] iteration = 0 | max rel diff. = 13.7627; [2016-03-31 14:13:26.460] [jointLog] [info] iteration = 100 | max rel diff. = 0.100799; [2016-03-31 14:13:27.252] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:1731,load,loaded,1731,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['load'],['loaded']
Performance,"mp3,. Thanks for raising this issue. So, I _am_ surprised at these particular differences that you found, but the behavior you are observing is consistent with how automatic library type detection works. Let me explain what it's doing, and then I'm open to discussing if we should focus on changing that behavior going forward. The standard library type detection works by looking at the total number of compatible mappings in both possible orientations for the first x=10,000 aligned reads. These 10,000 reads are themselves mapped with an `IU` orientation in paired data and a `U` orientation in unpaired data. Once the 10,000 data points have been processed, a heuristic chooses the most likely library type and applies it (and salmon issues a warning if, at the end of quantification,, there are too many reads that disagree). So, the explanation of what could be happening here is that the reads that are different between your runs are coming within the first set of 10,000 aligned reads (note, this may not be the first 10k reads of the file, because concurrent processing means that reads from different threads are being aligned in an essentially random order ... but of course maintaining pairing information). The argument for why this should usually not cause a considerable difference is because (1) the reads are assumed to arrive in a random order (2) this is only a very small fraction of the total data and (3) if the unoriented reads map to a target in the ""wrong"" direction, they will also align to the proper target in the ""right"" direction and, once the orientation filter is applied for future reads, the weight of evidence should turn the probability of assignment of these unoriented reads toward the proper target. However, I'm guessing there is an edge case you're seeing here where the conditions don't induce this behavior. So, there are 2 immediate solutions to the problem. First, if you know the library type explicitly, you can use that. Second (and some other folks h",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/489#issuecomment-738830213:1076,concurren,concurrent,1076,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/489#issuecomment-738830213,1,['concurren'],['concurrent']
Performance,"mples that have worked with Cell Ranger. I recompiled the program with `-DCMAKE_BUILD_TYPE=Debug` and have attached the output and gdb backtrace. There is roughly 8M reads in the single fastq file I am testing with. I can see a whole bunch of threads being created despite limiting the number of processes to two. Thanks!. ```; (gdb) run alevin -l ISR --chromium -p 1 -o 85948/alevin -1 <(gunzip -c ./85948/run1/85948_S18_L001_R1_001.fastq.gz) -2 <(gunzip -c ./85948/run1/85948_S18_L001_R2_001.fastq.gz) -i ./salmon/transcripts_index --tgMap tx2gene.txt; Starting program: ./salmon/build-debug/src/salmon alevin -l ISR --chromium -p 1 -o 85948/alevin -1 <(gunzip -c ./85948/run1/85948_S18_L001_R1_001.fastq.gz) -2 <(gunzip -c ./85948/run1/85948_S18_L001_R2_001.fastq.gz) -i ./salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 27861)]; [Thread 0x7fff7e0f4700 (LWP 27861) exited]; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 27862)]; Logs will be written to 85948/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 27865)]; [New Thread 0x7ffe7b56f700 (LWP 27866)]; [New Thread 0x7ffdfa6ed700 (LWP 27867)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 1 }; ### [ output ] => { 85948/alevin }; ### [ mates1 ] => { /dev/fd/63 }; ### [ mates2 ] => { /dev/fd/62 }; ### [ index ] => { ./salmon/transcripts_index }; ### [ t",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:1151,load,loading,1151,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['load'],['loading']
Performance,"mum of 0.90% zero probability fragments; [2018-05-31 17:08:09.572] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:08:09.634] [jointLog] [info] Thread saw mini-batch with a maximum of 0.90% zero probability fragments; [2018-05-31 17:08:09.641] [jointLog] [info] Thread saw mini-batch with a maximum of 1.00% zero probability fragments; [2018-05-31 17:08:09.649] [jointLog] [info] Thread saw mini-batch with a maximum of 0.88% zero probability fragments; [2018-05-31 17:08:09.690] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.702] [jointLog] [info] Thread saw mini-batch with a maximum of 0.92% zero probability fragments; [2018-05-31 17:08:09.721] [jointLog] [info] Thread saw mini-batch with a maximum of 0.88% zero probability fragments; [2018-05-31 17:08:09.728] [jointLog] [info] Thread saw mini-batch with a maximum of 0.90% zero probability fragments; [2018-05-31 17:08:09.782] [jointLog] [info] Thread saw mini-batch with a maximum of 0.86% zero probability fragments; [2018-05-31 17:08:09.786] [jointLog] [info] Thread saw mini-batch with a maximum of 0.90% zero probability fragments. [2018-05-31 17:08:10.483] [jointLog] [info] Computed 582392 rich equivalence classes for further processing; [2018-05-31 17:08:10.483] [jointLog] [info] Counted 59985194 total reads in the equivalence classes; [2018-05-31 17:08:10.551] [jointLog] [info] Mapping rate = 88.2723%. [2018-05-31 17:08:10.551] [jointLog] [info] finished quantifyLibrary(); [2018-05-31 17:08:10.551] [jointLog] [info] Starting optimizer; [2018-05-31 17:08:11.488] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2018-05-31 17:08:11.523] [jointLog] [info] iteration = 0 | max rel diff. = 127.399; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:7171,optimiz,optimizer,7171,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['optimiz'],['optimizer']
Performance,"n order to do that I run the following code:; Code (example):; `salmon quant -l A -i /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/spikein/Flox5YFP0_B07_R/index -p 6 -o /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/bcbiotx/tmpTest2/quant -1 <(gzip -cd /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R1_Flox5YFP0_B07_R.trimmed.fastq.gz) -2 <(gzip -cd /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R2_Flox5YFP0_B07_R.trimmed.fastq.gz); `; Some samples finish the quantification while others return the error. Some samples should have the genes while others not. The reads are 25 long and there is variability in the total number of reads among all the samples. . Please, indicate me what other information you may need. Thank you in advance,. Best,. Victor. ERROR:; `[2017-02-09 13:51:38.119] [jointLog] [info] parsing read library format; [2017-02-09 13:51:38.119] [jointLog] [info] There is 1 library.; [2017-02-09 13:51:38.559] [stderrLog] [info] Loading Suffix Array; [2017-02-09 13:51:38.560] [stderrLog] [info] Loading Transcript Info; [2017-02-09 13:51:38.561] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-02-09 13:51:38.562] [stderrLog] [info] There were 2 set bits in the bit array; [2017-02-09 13:51:38.562] [stderrLog] [info] Computing transcript lengths; [2017-02-09 13:51:38.562] [stderrLog] [info] Waiting to finish loading hash; [2017-02-09 13:51:38.562] [stderrLog] [info] Done loading index; [2017-02-09 13:51:38.557] [jointLog] [info] Loading Quasi index; [2017-02-09 13:51:38.558] [jointLog] [info] Loading 32-bit quasi index; [2017-02-09 13:51:38.562] [jointLog] [info] done; processed 3500000 fragmentsjointLog] [info] Index contained 2 targets; hits: 0, hits per frag: 0; [2017-02-09 13:51:48.488] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-02-09 13:51:48.488] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-02-09 13:51:48.502] [jointLog] [warning] Only 0 fra",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119:1219,Load,Loading,1219,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119,1,['Load'],['Loading']
Performance,"n quant -l A -i /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/spikein/Flox5YFP0_B07_R/index -p 6 -o /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/bcbiotx/tmpTest2/quant -1 <(gzip -cd /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R1_Flox5YFP0_B07_R.trimmed.fastq.gz) -2 <(gzip -cd /n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/trimmed/Flox5YFP0_B07.R2_Flox5YFP0_B07_R.trimmed.fastq.gz); `; Some samples finish the quantification while others return the error. Some samples should have the genes while others not. The reads are 25 long and there is variability in the total number of reads among all the samples. . Please, indicate me what other information you may need. Thank you in advance,. Best,. Victor. ERROR:; `[2017-02-09 13:51:38.119] [jointLog] [info] parsing read library format; [2017-02-09 13:51:38.119] [jointLog] [info] There is 1 library.; [2017-02-09 13:51:38.559] [stderrLog] [info] Loading Suffix Array; [2017-02-09 13:51:38.560] [stderrLog] [info] Loading Transcript Info; [2017-02-09 13:51:38.561] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-02-09 13:51:38.562] [stderrLog] [info] There were 2 set bits in the bit array; [2017-02-09 13:51:38.562] [stderrLog] [info] Computing transcript lengths; [2017-02-09 13:51:38.562] [stderrLog] [info] Waiting to finish loading hash; [2017-02-09 13:51:38.562] [stderrLog] [info] Done loading index; [2017-02-09 13:51:38.557] [jointLog] [info] Loading Quasi index; [2017-02-09 13:51:38.558] [jointLog] [info] Loading 32-bit quasi index; [2017-02-09 13:51:38.562] [jointLog] [info] done; processed 3500000 fragmentsjointLog] [info] Index contained 2 targets; hits: 0, hits per frag: 0; [2017-02-09 13:51:48.488] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-02-09 13:51:48.488] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-02-09 13:51:48.502] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119:1286,Load,Loading,1286,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119,1,['Load'],['Loading']
Performance,"n to salmonquant/logs; [2023-01-29 16:02:11.267] [jointLog] [info] setting maxHashResizeThreads to 8; [2023-01-29 16:02:11.267] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:single end, relative orientation:none, strandedness:unstranded }; [2023-01-29 16:02:11.308] [jointLog] [info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"", fasta = ""/rsstu/users/c/cjdohert/NSF_Tomato/AT_RefGenomeFiles/TAIR10_chr_all.fas"" . . .done. processed 0 reads in current round[2023-01-29 16:02:12.216] [jointLog] [info] replaced 186,207 non-ACGT nucleotides with random nucleotides; [2023-01-29 16:02:12.668] [jointLog] [info] Automatically detected most likely library type as U. processed 2000000 reads in current round[2023-01-29 16:02:13.116] [jointLog] [info] . The alignment group queue pool has been exhausted. 1842 extra fragments were allocated on the heap to saturate the pool. No new fragments will be allocated. processed 13423395 reads in current round; killing thread 3 . . . done. Freeing memory used by read queue . . . 00000; Joined parsing thread . . . ""leaf_mock_t6_rep3_S64_R1_001Aligned.out.bam"" ; Closed all files . . . ; Emptied frag queue. . . ; Emptied Alignment Group Pool. . ; Emptied Alignment Group Queue. . . done; [2023-01-29 16:02:59.265] [jointLog] [info] . Completed first pass through the alignment file.; Total # of mapped reads : 13423395; # of uniquely mapped reads : 13423394; # ambiguously mapped reads : 1. [2023-01-29 16:02:59.271] [jointLog] [info] Computed 169 rich equivalence classes for further processing; [2023-01-29 16:02:59.272] [jointLog] [info] Counted 13,423,395 total reads in the equivalence classes ; [2023-01-29 16:02:59.272] [jointLog] [info] starting optimizer; [2023-01-29 16:02:59.274] [jointLog] [info] Marked 0 weighted equivale",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/825:2768,queue,queue,2768,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/825,1,['queue'],['queue']
Performance,"n/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[2017-03-29 23:59:18.699] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 23:59:18.721] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-30 00:43:17.278] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-30 00:43:17.237] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-30 00:43:17.273] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-30 02:37:54.437] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-30 03:48:21.310] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-30 04:20:16.735] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-30 04:54:34.486] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-30 04:54:34.487] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-30 05:09:36.706] [stderrLog] [info] Done loading index; [00m[1m[2017-03-30 05:09:36.706] [jointLog] [info] done; [00m[1m[2017-03-30 05:09:36.790] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 699833, hits per frag: 1.4138[A. [32mprocessed[31m 1000000 [32mfragments[0m; hits: 1395659, hits per frag: 1.40267[A. [32mprocessed[31m 1500000 [32mfragments[0m; hits: 2097294, hits per frag: 1.40287[A. [32mprocessed[31m 2000000 [32mfragments[0m; hits: 2794766, hits per frag: 1.40089[A. [32mprocessed[31m 2500000 [32mfragments[0m; h",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:10083,Load,Loading,10083,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['Load'],['Loading']
Performance,"nLog] [warning] Skipping 50 Barcodes as no read was mapped; [2019-06-04 15:58:27.583] [alevinLog] [info] Total 0 white-listed Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [warning] Total 100% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-04 15:58:27.594] [alevinLog] [info] Done populating Z matrix; [2019-06-04 15:58:27.594] [alevinLog] [warning] 0 Whitelisted Barcodes with 0 frequency; [2019-06-04 15:58:27.594] [alevinLog] [info] Done indexing Barcodes; [2019-06-04 15:58:27.594] [alevinLog] [info] Total Unique barcodes found: 5; [2019-06-04 15:58:27.594] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-04 15:58:27.617] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-04 15:58:27.617] [alevinLog] [info] parsing read library format; [2019-06-04 15:58:27.617] [jointLog] [info] There is 1 library.; [2019-06-04 15:58:27.750] [jointLog] [info] Loading Quasi index; [2019-06-04 15:58:27.750] [jointLog] [info] Loading 32-bit quasi index; [2019-06-04 15:58:27.750] [stderrLog] [info] Loading Suffix Array ; [2019-06-04 15:58:28.626] [stderrLog] [info] Loading Transcript Info ; [2019-06-04 15:58:28.866] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-04 15:58:28.900] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-04 15:58:28.922] [stderrLog] [info] Computing transcript lengths; [2019-06-04 15:58:28.922] [stderrLog] [info] Waiting to finish loading hash; [2019-06-04 15:58:38.645] [jointLog] [info] done; [2019-06-04 15:58:38.645] [jointLog] [info] Index contained 136,011 targets. [2019-06-04 15:58:38.645] [stderrLog] [info] Done loading index; processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; processed 2 Million fragments; processed 2 Million fragments; processed 3 Million fragments; processed 3 Million fragments; processed 4 Million fragments; processed 4 Million fragments; processed 5 Million fragments; processed 5 Million fragm",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369:2251,Load,Loading,2251,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369,1,['Load'],['Loading']
Performance,n_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { fastq_files/SRR2454059.fq.gz }; ### [ threads ] => { 8 }; ### [ libType ] => { ISF }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ useVBOpt ] => { }; ### [ dumpEq ] => { }; ### [ dumpEqWeights ] => { }; ### [ geneMap ] => { /home/ryan/references/hg38/Salmon_index_hg38.analysisSet_knownGene/genemap.txt }; ### [ output ] => { salmon_quant/hg38.analysisSet_knownGene/SRR2454059 }; ### [ auxDir ] => { aux_info }; ### [ numGibbsSamples ] => { 100 }; Logs will be written to salmon_quant/hg38.analysisSet_knownGene/SRR2454059/logs; [2016-12-13 12:44:39.271] [jointLog] [info] parsing read library format; [2016-12-13 12:44:39.271] [jointLog] [info] There is 1 library.; [2016-12-13 12:44:39.836] [jointLog] [info] Loading Quasi index; [2016-12-13 12:44:39.836] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 12:44:39.836] [stderrLog] [info] Loading Suffix Array ; [2016-12-13 12:44:43.439] [stderrLog] [info] Loading Transcript Info ; [2016-12-13 12:44:44.355] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 12:44:44.613] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 12:44:44.629] [stderrLog] [info] Computing transcript lengths; [2016-12-13 12:44:44.629] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 12:44:44.629] [stderrLog] [info] Done loading index; [2016-12-13 12:44:44.629] [jointLog] [info] done; [2016-12-13 12:44:44.629] [jointLog] [info] Index contained 182608 targets; [2016-12-13 12:44:49.583] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in ; single-end libraries. Please use this option with caution. processed 19000000 fragments; hits: 65897660; hits per frag: 3.46963. [2016-12-13 12:46:51.776] [jointLog] [info] Computed 137534 rich equivalence classes for further processin; g; [2016-12-13 12:46:51.776] [jointLog] [info] Counted 16265961 total reads in the equivalence classes . [2016-12-13 12:46:51.786] [,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111:1689,Load,Loading,1689,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111,1,['Load'],['Loading']
Performance,"n_quants/PBMC_AML_BM_001 }; Logs will be written to /data2/csijcs/AML/RNA_seq/AML_total_MNC/total_MNCs/Fresh_samples/salmon_quants/PBMC_AML_BM_001/logs; [2018-07-30 15:41:42.232] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-07-30 15:41:42.232] [jointLog] [info] parsing read library format; [2018-07-30 15:41:42.232] [jointLog] [info] There is 1 library.; [2018-07-30 15:41:45.840] [jointLog] [info] Loading Quasi index; [2018-07-30 15:41:45.840] [jointLog] [info] Loading 32-bit quasi index; [2018-07-30 15:41:45.840] [stderrLog] [info] Loading Suffix Array ; [2018-07-30 15:42:39.168] [stderrLog] [info] Loading Transcript Info ; [2018-07-30 15:42:53.599] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-30 15:42:56.236] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-30 15:42:56.328] [stderrLog] [info] Computing transcript lengths; [2018-07-30 15:42:56.329] [stderrLog] [info] Waiting to finish loading hash; [2018-07-30 15:42:56.329] [stderrLog] [info] Done loading index; [2018-07-30 15:42:56.329] [jointLog] [info] done; [2018-07-30 15:42:56.329] [jointLog] [info] Index contained 203027 targets. processed 4000003 fragments; processed 298000000 fragments 0.071773[2018-07-30 15:43:47.415] [jointLog] [info] Automatically detected most likely library type as IU; hits: 20950511, hits per frag: 0.0703073[2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.06% zero probability fragments; [2018-07-30 16:26:22.399] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragments; [2018-07-30 16:26:22.432] [jointLog] [info] Thread saw mini-batch with a maximum of 0.06% zero probability fragments; [2018-07-30 16:26:22.469] [jointLog] [info] Thread saw mini-batch with a maximum of 0.08% zero probability fragmen",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261:2423,load,loading,2423,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261,1,['load'],['loading']
Performance,"nd minor bug fixes; please upgrade at your; earliest convenience.; ###; ### salmon (mapping-based) v0.7.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/GENCODE/GRCh38_hg38/transcripts/salmon_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/logs; [1m[2017-03-07 03:00:05.319] [jointLog] [info] parsing read library format; [00m[1m[2017-03-07 03:00:05.337] [jointLog] [info] There is 1 library.; [00m[1m[2017-03-07 03:00:41.948] [jointLog] [info] Loading Quasi index; [00m[1m[2017-03-07 03:00:41.972] [jointLog] [info] Loading 32-bit quasi index; [00m[1m[2017-03-07 03:42:43.689] [stderrLog] [info] Loading Suffix Array ; [00m[1m[2017-03-07 04:54:34.756] [stderrLog] [info] Loading Transcript Info ; [00m[1m[2017-03-07 04:58:51.467] [stderrLog] [info] Loading Rank-Select Bit Array; [00m[1m[2017-03-07 06:59:17.578] [stderrLog] [info] There were 198093 set bits in the bit array; [00m[1m[2017-03-07 07:29:20.417] [stderrLog] [info] Computing transcript lengths; [00m[1m[2017-03-07 07:56:34.913] [stderrLog] [info] Waiting to finish loading hash; [00m[1m[2017-03-07 08:38:09.635] [stderrLog] [info] Successfully loaded position hash; [00m[1m[2017-03-07 08:38:09.636] [stderrLog] [info] Done loading index; [00m[1m[2017-03-07 08:38:09.637] [jointLog] [info] done; [00m[1m[2017-03-07 08:38:09.655] [jointLog] [info] Index contained 198093 targets; [00m. [A. [32mprocessed[31m 500000 [32mfragments[0m; hits: 624068, hits per frag: 1.2607",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:3427,Load,Loading,3427,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['Load'],['Loading']
Performance,"ndexing Barcodes; [2018-12-05 15:12:27.952] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-05 15:12:27.952] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-05 15:12:29.321] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 15:12:29.216] [jointLog] [info] There are 2 libraries.; [2018-12-05 15:12:29.318] [jointLog] [info] Loading Quasi index; [2018-12-05 15:12:29.319] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 15:12:29.216] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 15:12:29.216] [alevinLog] [info] parsing read library format; [2018-12-05 15:12:29.949] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 15:12:30.141] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 15:12:30.181] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 15:12:30.197] [stderrLog] [info] Computing transcript lengths; [2018-12-05 15:12:30.197] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 15:12:34.297] [stderrLog] [info] Done loading index; [2018-12-05 15:12:34.297] [jointLog] [info] done; [2018-12-05 15:12:34.297] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragments; hits: 892324990, hits per frag: 3.33692. [2018-12-05 15:45:46.198] [jointLog] [info] Computed 185,593 rich equivalence classes for further processing; [2018-12-05 15:45:46.198] [jointLog] [info] Counted 163,106,139 total reads in the equivalence classes ; [2018-12-05 15:45:46.199] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 15:45:46.199] [jointLog] [info] Mapping rate = 60.9633%. [2018-12-05 15:45:46.199] [jointLog] [info] finished quantifyLibrary(); [2018-12-05 15:45:47.617] [alevinLog] [info] Starting optimizer. Analyzed 5344 cells (100% of all).; [2018-12-05 15:47:14.597] [alevinLog] [info] Total 1870793 UMI after deduplicating.; [20",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:7579,load,loading,7579,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['load'],['loading']
Performance,"ndexing Barcodes; [2018-12-05 16:31:51.000] [alevinLog] [info] Total Unique barcodes found: 3825581; [2018-12-05 16:31:51.000] [alevinLog] [info] Used Barcodes except Whitelist: 138266; [2018-12-05 16:31:51.087] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-05 16:31:51.087] [alevinLog] [info] parsing read library format; [2018-12-05 16:31:51.087] [jointLog] [info] There are 2 libraries.; [2018-12-05 16:31:51.161] [jointLog] [info] Loading Quasi index; [2018-12-05 16:31:51.162] [jointLog] [info] Loading 32-bit quasi index; [2018-12-05 16:31:51.164] [stderrLog] [info] Loading Suffix Array ; [2018-12-05 16:31:51.808] [stderrLog] [info] Loading Transcript Info ; [2018-12-05 16:31:51.960] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-05 16:31:52.001] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-05 16:31:52.022] [stderrLog] [info] Computing transcript lengths; [2018-12-05 16:31:52.022] [stderrLog] [info] Waiting to finish loading hash; [2018-12-05 16:31:56.025] [stderrLog] [info] Done loading index; [2018-12-05 16:31:56.025] [jointLog] [info] done; [2018-12-05 16:31:56.025] [jointLog] [info] Index contained 167,268 targets. processed 185 Million fragments; hits: 690426925, hits per frag: 3.72226. [2018-12-05 16:57:31.421] [jointLog] [info] Computed 215,739 rich equivalence classes for further processing; [2018-12-05 16:57:31.421] [jointLog] [info] Counted 131,957,987 total reads in the equivalence classes ; [2018-12-05 16:57:31.421] [jointLog] [warning] 0.000112378% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 24. [2018-12-05 16:57:31.421] [jointLog] [warning] Found 539897 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-05 16:57:31.421] [jointLog] [info] Mapping rate = 70.9532%. [2018-12-05 16:5",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328:13091,load,loading,13091,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328,1,['load'],['loading']
Performance,"ndexing Barcodes; [2018-12-06 11:16:55.453] [alevinLog] [info] Total Unique barcodes found: 4180559; [2018-12-06 11:16:55.453] [alevinLog] [info] Used Barcodes except Whitelist: 134856; [2018-12-06 11:16:56.218] [jointLog] [info] There are 2 libraries.; [2018-12-06 11:16:56.292] [jointLog] [info] Loading Quasi index; [2018-12-06 11:16:56.294] [jointLog] [info] Loading 32-bit quasi index; [2018-12-06 11:16:56.205] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-12-06 11:16:56.218] [alevinLog] [info] parsing read library format; [2018-12-06 11:16:56.296] [stderrLog] [info] Loading Suffix Array ; [2018-12-06 11:16:56.846] [stderrLog] [info] Loading Transcript Info ; [2018-12-06 11:16:57.009] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-12-06 11:16:57.046] [stderrLog] [info] There were 167,268 set bits in the bit array; [2018-12-06 11:16:57.063] [stderrLog] [info] Computing transcript lengths; [2018-12-06 11:16:57.064] [stderrLog] [info] Waiting to finish loading hash; [2018-12-06 11:17:00.929] [jointLog] [info] done; [2018-12-06 11:17:00.929] [jointLog] [info] Index contained 167,268 targets. processed 267 Million fragmentsrrLog] [info] Done loading index; hits: 844899161, hits per frag: 3.15864^[[D. [2018-12-06 11:45:12.188] [jointLog] [info] Computed 118,295 rich equivalence classes for further processing; [2018-12-06 11:45:12.188] [jointLog] [info] Counted 154,595,094 total reads in the equivalence classes ; [2018-12-06 11:45:12.188] [jointLog] [warning] Found 115077 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-12-06 11:45:12.188] [jointLog] [info] Mapping rate = 57.7821%. [2018-12-06 11:45:12.188] [jointLog] [info] finished quantifyLibrary(); [2018-12-06 11:45:13.385] [alevinLog] [info] Starting optimizer. Analyzed 5344 cells (100% of all).; [2018-12-06 11:49:42.634] [alevinLog] [info] Total 4845644.00 UMI after deduplicating.; [2018-12-06 11:49:42.722] [al",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548:6753,load,loading,6753,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445008548,1,['load'],['loading']
Performance,"ne indexing Barcodes; [2018-07-26 11:25:31.793] [alevinLog] [info] Total Unique barcodes found: 10630133; [2018-07-26 11:25:31.793] [alevinLog] [info] Used Barcodes except Whitelist: 10603; [2018-07-26 11:25:31.938] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-26 11:25:31.939] [alevinLog] [info] parsing read library format; [2018-07-26 11:25:31.949] [jointLog] [info] There is 1 library.; [2018-07-26 11:25:32.331] [jointLog] [info] Loading Quasi index; [2018-07-26 11:25:32.331] [jointLog] [info] Loading 32-bit quasi index; [2018-07-26 11:25:32.357] [stderrLog] [info] Loading Suffix Array ; [2018-07-26 11:26:09.413] [stderrLog] [info] Loading Transcript Info ; [2018-07-26 11:26:10.896] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-26 11:26:11.159] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-26 11:26:11.225] [stderrLog] [info] Computing transcript lengths; [2018-07-26 11:26:11.226] [stderrLog] [info] Waiting to finish loading hash; [2018-07-26 11:26:14.654] [stderrLog] [info] Done loading index; [2018-07-26 11:26:14.654] [jointLog] [info] done; [2018-07-26 11:26:14.654] [jointLog] [info] Index contained 203027 targets. Incorrect call for umi extractIncorrect call for umi extract; ```. I traced it back to AlevinUtils.cpp in the source files but could not make sense of it from there. The program will run completely on the same data and library if I change --dropseq to --Chromium, eventually outputting the following after processing the reads:. ```; [2018-07-24 10:56:20.712] [jointLog] [info] Computed 9968 rich equivalence classes for further processing; [2018-07-24 10:56:20.712] [jointLog] [info] Counted 2785976 total reads in the equivalence classes; [2018-07-24 10:56:20.729] [jointLog] [warning] Only 2785976 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2018-07-24 10:56:20.729] [jointLog] [war",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:3288,load,loading,3288,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['load'],['loading']
Performance,"ne is split into two version by exon skipping and is not alternatively spliced. I also want to make this process fast as the idea would be to look for differences in the proportions of gene versions that are created based on a large databases of RNAseq data (easily 200+ different RNAseq experiments). So to make it quick I am only passing two transcripts to Salmon (T - 1, and T - 2) for version 1 and 2 of the transcript, where version 2 has the 2nd exon (of 4 total exons) removed. . Now I know Salmon was created to map reads to a large number of transcripts across the whole genome, but I believe it still should be possible to narrow down the view to only 1 gene with 2 versions. I believe I just need to set the parameters right, but I also want to set the parameters in a general way so that my script can work across different species with different input RNAseq data. The other problem is that we currently do not have an idea of what proportion of these two versions of the gene should actually exist in the RNAseq data I have (which we didn't perform but just grabbed a random sample from GenBank to test with). My adviser wants to first try and test it computationally first and then verify it in the lab (which is somewhat backwards in my mind, as it's really just a shot in the dark and from my preliminary analysis of Salmon, different parameters can drastically change the proportions of the two versions). . As you can see below, I have tried some parameter settings that I thought would be helpful (particularly ```--quasiCoverage```). But again I could be wrong and would like to know your opinions in the matter. . These runs were all performed with this 'default' run: ; ```; salmon quant -i index -l A -1 reads_1.fq -2 reads_2.fq --validateMappings -p 20 --numPreAuxModelSamples 250 --numAuxModelSamples 1000 -o output ; ```; I changes the ```AuxModelSamples``` to low values as I was generally only mapping 6000 reads to the two transcripts in total, so I didn't think they we",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/401:1712,perform,perform,1712,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/401,1,['perform'],['perform']
Performance,"ned 245,261 targets ; [2022-04-16 11:23:53.776] [jointLog] [info] Number of decoys : 0 ; [2022-04-16 11:24:42.358] [jointLog] [info] Computed 960,194 rich equivalence classes for further processing [2022-04-16 11:24:42.358] [jointLog] [info] Counted 23,784,776 total reads in the equivalence classes [2022-04-16 11:24:42.426] [jointLog] [info] Number of mappings discarded because of alignment score : 3,206,484 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 170,372 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0 [2022-04-16 11:24:42.426] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 154,144 ; [2022-04-16 11:24:42.426] [jointLog] [info] Mapping rate = 95.4075% [2022-04-16 11:24:42.426] [jointLog] [info] finished quantifyLibrary() ; [2022-04-16 11:24:42.494] [jointLog] [info] Starting optimizer ; [2022-04-16 11:24:42.359] [fileLog] [info] ; At end of round 0 ; ================== ; Observed 24929662 total fragments (24929662 in most recent round) [2022-04-16 11:24:43.294] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate [2022-04-16 11:24:43.366] [jointLog] [info] iteration = 0 | max rel diff. = 5078.09 ; [2022-04-16 11:24:50.352] [jointLog] [info] iteration = 100 | max rel diff. = 20.8492 ; [2022-04-16 11:24:57.458] [jointLog] [info] iteration = 200 | max rel diff. = 18.848 ; [2022-04-16 11:25:04.256] [jointLog] [info] iteration = 300 | max rel diff. = 4.55549 ; [2022-04-16 11:25:09.015] [jointLog] [info] iteration = 400 | max rel diff. = 2.20112 ; [2022-04-16 11:25:15.019] [jointLog] [info] iteration = 500 | max rel diff. = 8.9451 ; [2022-04-16 11:25:20.936] [jointLog] [info] iteration = 600 | max rel diff. = 8.80249 ; [2022-04-16 11:25:26.808] [jointLog] [info] iteration = 700 | max rel diff. = 0.955605 ; [2022-04-16 11:25:32.739] [jointLog] [in",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317:17193,optimiz,optimizer,17193,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/768#issuecomment-1100734317,1,['optimiz'],['optimizer']
Performance,nfo] Thread saw mini-batch with a maximum of 9.94% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.26% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.30% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.56% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.48% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.16% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.02% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 9.84% zero probability fragments; [2018-06-30 22:12:13.117] [jointLog] [info] Thread saw mini-batch with a maximum of 10.24% zero probability fragments; [2018-06-30 22:12:13.120] [jointLog] [info] Thread saw mini-batch with a maximum of 10.88% zero probability fragments; [2018-06-30 22:12:13.141] [jointLog] [info] Thread saw mini-batch with a maximum of 10.26% zero probability fragments; [2018-06-30 22:12:13.146] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.160] [jointLog] [info] Thread saw mini-batch with a maximum of 10.24% zero probability fragments. [2018-06-30 22:12:13.224] [jointLog] [info] Computed 22103 rich equivalence classes for further processing; [2018-06-30 22:12:13.224] [jointLog] [info] Counted 12658995 total reads in the equivalence classes; [2018-06-30 22:12:13.224] [jointLog] [info] Mapping rate = 71.4689%. [2018-06-30 22:12:13.224] [jointLog] [info] finished quantifyLibrary(); [2018-06-30 22:12:13.424] [alevinLog] [info] Starting optimizer. Analyzed 1137 cells (11% of all).; ERROR: cell doesn't have any read count; ```,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:5900,optimiz,optimizer,5900,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['optimiz'],['optimizer']
Performance,"nfo] iteration = 200 | max rel diff. = 0.0530265; [00m[1m[2017-03-07 17:22:45.312] [jointLog] [info] iteration = 300 | max rel diff. = 0.0489765; [00m[1m[2017-03-07 17:23:12.877] [jointLog] [info] iteration = 400 | max rel diff. = 0.026371; [00m[1m[2017-03-07 17:23:37.183] [jointLog] [info] iteration = 500 | max rel diff. = 0.0212965; [00m[1m[2017-03-07 17:24:04.277] [jointLog] [info] iteration = 600 | max rel diff. = 0.0183011; [00m[1m[2017-03-07 17:24:42.607] [jointLog] [info] iteration = 700 | max rel diff. = 0.0209044; [00m[1m[2017-03-07 17:25:22.112] [jointLog] [info] iteration = 800 | max rel diff. = 0.0152222; [00m[1m[2017-03-07 17:26:12.037] [jointLog] [info] iteration = 900 | max rel diff. = 0.0129215; [00m[1m[2017-03-07 17:26:59.294] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0111141; [00m[1m[2017-03-07 17:27:42.086] [jointLog] [info] iteration = 1080 | max rel diff. = 0.00971233; [00m[1m[2017-03-07 17:27:42.099] [jointLog] [info] Finished optimizer; [00m[1m[2017-03-07 17:27:42.099] [jointLog] [info] writing output . [00m[33m[1m[2017-03-07 17:27:42.729] [jointLog] [warning] NOTE: Read Lib [( /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX.fastq.gz, /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10003_D19KGACXX_read2.fastq.gz )] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/Salmon_tx/R10003_D19KGACXX/lib_format_counts.json for details. [00m**** Job ends ****; Tue Mar 7 17:27:45 EST 2017; ```. The log looks ok to us. Using `qacct` (an SGE command) I can check the memory it used, and it used ~9 GB of RAM:. ```bash; $ qacct -j 9958683 -t 3; ==============================================================; qname shared.q; hostname compute-068.cm.cluster; group lieber_jaffe; owner lcollado; project NONE; department defaultdepartment; jobname step6-txQuant-alzheimer.gsk_phaseII; jobnumber 9958683",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126:19439,optimiz,optimizer,19439,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126,1,['optimiz'],['optimizer']
Performance,"ng it; [2021-01-25 16:27:05.707] [alevinLog] [info] Learned InvCov: 556.394 normfactor: 9159.58; [2021-01-25 16:27:05.707] [alevinLog] [info] Total 222(has 201 low confidence) barcodes; [2021-01-25 16:27:06.573] [alevinLog] [info] Done True Barcode Sampling; [2021-01-25 16:27:07.383] [alevinLog] [warning] Total **96.7029% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-25 16:27:07.412] [alevinLog] [info] Done populating Z matrix; [2021-01-25 16:27:07.414] [alevinLog] [info] Total 3667 CB got sequence corrected; [2021-01-25 16:27:07.414] [alevinLog] [info] Done indexing Barcodes; [2021-01-25 16:27:07.414] [alevinLog] [info] Total Unique barcodes found: 3896665; [2021-01-25 16:27:07.414] [alevinLog] [info] Used Barcodes except Whitelist: 3667; [2021-01-25 16:27:07.498] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2021-01-25 16:27:07.498] [alevinLog] [info] parsing read library format; [2021-01-25 16:30:54.542] [alevinLog] [info] Starting optimizer; [2021-01-25 16:30:54.782] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:54.782] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 1350278.00 UMI after deduplicating.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 30909 BiDirected Edges.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 8817 UniDirected Edges.; [2021-01-25 16:30:55.969] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-25 16:30:56.294] [alevinLog] [warning] Num High confidence barcodes too less 20 < 90.Can't performing whitelisting; Skipping; [2021-01-25 16:30:56.297] [alevinLog] [info] Finished optimizer. ## with `--exceptCells 7000`; > [2021-01-21 09:24:45.891] [alevinLog] [info] Found 43030 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); [2021-01-21 09:24:45.942] [alevinLog] [info] Filled with 43030 txp to gene ent",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567:3392,optimiz,optimizer,3392,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567,1,['optimiz'],['optimizer']
Performance,"ng it; [2021-01-25 16:27:05.707] [alevinLog] [info] Learned InvCov: 556.394 normfactor: 9159.58; [2021-01-25 16:27:05.707] [alevinLog] [info] Total 222(has 201 low confidence) barcodes; [2021-01-25 16:27:06.573] [alevinLog] [info] Done True Barcode Sampling; [2021-01-25 16:27:07.383] [alevinLog] [warning] Total **96.7029% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-25 16:27:07.412] [alevinLog] [info] Done populating Z matrix; [2021-01-25 16:27:07.414] [alevinLog] [info] Total 3667 CB got sequence corrected; [2021-01-25 16:27:07.414] [alevinLog] [info] Done indexing Barcodes; [2021-01-25 16:27:07.414] [alevinLog] [info] Total Unique barcodes found: 3896665; [2021-01-25 16:27:07.414] [alevinLog] [info] Used Barcodes except Whitelist: 3667; [2021-01-25 16:27:07.498] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; [2021-01-25 16:27:07.498] [alevinLog] [info] parsing read library format; [2021-01-25 16:30:54.542] [alevinLog] [info] Starting optimizer; [2021-01-25 16:30:54.782] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:54.782] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 1350278.00 UMI after deduplicating.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 30909 BiDirected Edges.; [2021-01-25 16:30:55.950] [alevinLog] [info] Total 8817 UniDirected Edges.; [2021-01-25 16:30:55.969] [alevinLog] [info] Clearing EqMap; Might take some time.; [2021-01-25 16:30:56.294] [alevinLog] [warning] Num High confidence barcodes too less 20 < 90.Can't performing whitelisting; Skipping; [2021-01-25 16:30:56.297] [alevinLog] [info] Finished optimizer. ### with `--exceptCells 7000`; > [2021-01-21 09:24:45.891] [alevinLog] [info] Found 43030 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); [2021-01-21 09:24:45.942] [alevinLog] [info] Filled with 43030 txp to gene en",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/620:4324,optimiz,optimizer,4324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/620,1,['optimiz'],['optimizer']
Performance,"ng of these considerations. It‚Äôs good to think about how data processing choices may affect your results and you are being thoughtful here. I wouldn‚Äôt say that, generally, alignment-free tools are more accurate than alignment-based ones. For example, you might look at our recent paper on how [alignment and mapping methodology can influence abundance estimation even when holding the quantification approach fixed](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8), or [this paper on the corner cases of alignment-free methodology](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-4869-5) (note the second paper pre-dates the first, and the new selective-alignment methodology in salmon should largely address the issues raised in that paper). However, the bigger and more meaningful distinction is between methods that attempt to properly quantify abundance (generally using a generative statistical model) ‚Äî including methods like RSEM, BitSeq, salmon, etc., and those that try to simply count aligned reads ‚Äî including methods like HTSeq and featureCounts. Generally, the former type of methods are more accurate than the latter at both the gene level and the former can also offer transcript-level estimates if desired (counting based methods generally cannot). Finally, to your question more directly, I don‚Äôt believe that model misspecification that may result due to not knowing the fragment length distribution will generally have enough of a deleterious effect on the probabilistic quantification methods to degrade their performance to the level of counting based methods. I would still argue to prefer probabilistic quantification (i.e. salmon) to read counting, even if you don‚Äôt know the fragment length distribution. As I mentioned above, it may change the maximum likelihood estimates a bit, but should do so across all samples, hopefully minimizing the downstream effects on differential analysis. Good luck with your analysis!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750943952:1629,perform,performance,1629,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750943952,2,['perform'],['performance']
Performance,"ng to Quantify; > ; > [2020-06-04 12:26:11.113] [alevinLog] [info] parsing read library format; > [2020-06-04 12:27:21.373] [alevinLog] [info] Starting optimizer; > ; > [2020-06-04 12:27:22.086] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:27:22.086] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 23937.00 UMI after deduplicating.; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 91 BiDirected Edges.; > [2020-06-04 12:27:22.409] [alevinLog] [info] Total 82 UniDirected Edges.; > [2020-06-04 12:27:22.409] [alevinLog] [warning] Skipped 82268 barcodes due to No mapped read; > [2020-06-04 12:27:22.412] [alevinLog] [info] Clearing EqMap; Might take some time.; > [2020-06-04 12:27:22.418] [alevinLog] [warning] Num Low confidence barcodes too less 1 < 100.Can't performing whitelisting; Skipping; > [2020-06-04 12:27:22.418] [alevinLog] [info] Finished optimizer. Run 2: `salmon alevin -l ISR --citeseq --barcodeLength 16 --umiLength 10 --end 5 --featureStart 19 --featureLength 21 --maxNumBarcodes 200000 --freqThreshold 1 --lowRegionMinNumBarcodes 100`. > [2020-06-04 12:40:45.455] [alevinLog] [info] set CITE-seq minScoreFraction parameter to : 0.797619; > [2020-06-04 12:40:45.456] [alevinLog] [info] Found 64 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); > [2020-06-04 12:40:45.456] [alevinLog] [info] Filled with 64 txp to gene entries ; > [2020-06-04 12:40:45.456] [alevinLog] [info] Found all transcripts to gene mappings; > [2020-06-04 12:40:45.461] [alevinLog] [info] Processing barcodes files (if Present) ; > ; > [2020-06-04 12:42:01.202] [alevinLog] [info] Done barcode density calculation.; > [2020-06-04 12:42:01.202] [alevinLog] [info] # Barcodes Used: [32m52200250[0m / [31m52200250[0m.; > [2020-06-04 12:42:01.300] [alevinLog] [info] Forcing to use 200000 cells; > [2020-06-04 12:42:02.037] [alev",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199:4035,optimiz,optimizer,4035,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199,2,['optimiz'],['optimizer']
Performance,"ng-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [info] Mapping rate = 83.0244%. [2016-01-02 20:23:49.875] [jointLog] [",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:7742,Load,Loading,7742,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"nscripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:3170,Load,Loadable,3170,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"nt algorithms like Bowtie2 and BWA-MEM with respect to both sensitivity and specificity. Here, you are likely seeing a manifestation of the former. Specifically, greedy behavior can lead to spurious matches. Many of these spurious matches are filtered out when applying a consensus mechanism to the series of matches produced by a read; however, this can result in the read going unmapped. We have noticed this behavior where spurious matches can ""mask"" better overall mappings, and we have developed an algorithm to overcome these limitations (called selective-alignment). This is currently implemented in [this branch](https://github.com/COMBINE-lab/salmon/tree/rescue-orphan) of the Salmon repo (if you want to test it out and have trouble building, we can build you a linux executable). This algorithm explores more potential mappings and then applies a fast algorithm for filtering potentially poor ones. In our benchmarks, it exhibits sensitivity and specificity very close to Bowtie2 (which is among the best of the alignment-based methods we considered). Also, I will note that, though the speed and statistical optimization procedures used in fast transcript abundance estimation tools make them a potentially desirable choice for microbiomic / metagenomic abundance estimation, their indices are typically optimized for speed and not size. For small numbers of bacterial species this can be okay, but if one wishes to index large collections of species, the memory usage can become a problem. To this end, we have developed a new indexing scheme (software [here](https://github.com/COMBINE-lab/pufferfish), slightly out-of-date pre-print [here](https://www.biorxiv.org/content/early/2017/09/21/191874)). That code already implements a tool for taxonomic read assignment (a la the excellent [Kraken](https://github.com/DerrickWood/kraken)), but not yet abundance estimation (that is coming soon). So, depending on how much you want to scale up, you might want to keep an eye on that as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/196#issuecomment-365337297:1447,optimiz,optimization,1447,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/196#issuecomment-365337297,2,['optimiz'],"['optimization', 'optimized']"
Performance,"nt incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-05-20 10:53:54.760] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-20 10:53:54.760] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-20 10:53:54.760] [jointLog] [info] parsing read library format; [2021-05-20 10:53:54.760] [jointLog] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference se",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:2125,Load,Loading,2125,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"ntLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 21.142 ms; -----------------------------------------; [2024-11-01 05:14:22.991] [jointLog] [info] done; [2024-11-01 05:14:23.016] [jointLog] [info] Index contained 252,149 targets. [2024-11-01 05:14:24.607] [jointLog] [info] Number of decoys : 194; [2024-11-01 05:14:24.607] [jointLog] [info] First decoy index : 251,913 ; [2024-11-01 05:14:29.425] [jointLog] [info] Automatically detected most likely library type as ISR. [A. [32mprocessed[31m 500,000 [32mfragments[0m; hits: 216,939, hits per frag: 0.43692[A. [32mprocessed[31m 1,000,000 [32mfragments[0m; hits: 435,436, hits per frag: 0.442697[A. [32mprocessed[31m 1,500,000 [32",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:3799,Load,Loading,3799,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"ntLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 985.04 us; -----------------------------------------; [2023-02-23 09:40:13.935] [jointLog] [info] done; ```; (taken from the terminal as the logfile is empty, and the current time is 12:54 pm = >3 hr run time so far). **To Reproduce**; I ran the following command:. ```; salmon quant \; --geneMap Homo_sapiens.GRCh38.106.gtf \; --threads 6 \; --libType=ISR \; --index salmon_index \; -1 ACV_REP2_1_val_1.fq.gz -2 CV_REP2_2_val_2.fq.gz \; --seqBias --gcBias --posBias \; -o ACV_REP2; ```; * Which version of salmon was used? v1.9.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? `nf-core/rnaseq`: v",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:10301,Load,Loading,10301,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"ntLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading reference sequence | Time = 408.65 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 48.085 ms; -----------------------------------------; Exception : [boost::filesystem::status: File name too long: ""/nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_33-41/33-41_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_32-40/32-40_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/P3_38-45_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_30-38/30-38_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-reads/Trimmed/Sample_20-28/20-28_221020_L002_R1.fastq.gz; /nobackup/qkdf72/Trinity/Reads/All-H.m-re",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:11152,Load,Loading,11152,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"ntLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 31.648 s; -----------------------------------------; size = 45110164; -----------------------------------------; | Loading contig offsets | Time = 96.211 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 9.7567 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 754.87 ms; -----------------------------------------; size = 4016010494; Number of ones: 45110163; Number of ones per inventory item: 512; Inventory entries filled: 88106; -----------------------------------------; | Loading contig boundaries | Time = 5.7049 s; -----------------------------------------; size = 4016010494; -----------------------------------------; | Loading sequence | Time = 554.02 ms; -----------------------------------------; size = 2662705604; -----------------------------------------; | Loading positions | Time = 6.1033 s; -----------------------------------------; size = 5024146461; -----------------------------------------; | Loading reference sequence | Time = 658.08 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 18.506 ms; -----------------------------------------; [2023-09-28 04:51:48.011] [jointLog] [info] done; [2023-09-28 04:51:48.061] [jointLog] [info] Index contained 5352508 targets; [2023-09-28 04:52:00.269] [jointLog] [info] Number of decoys : 182; [2023-09-28 04:52:00.269] [jointLog] [info] First decoy index : 5155176 . [2023-09-28 04:52:03.534] [jointLog] [info] Automatically detected most likely library type as ISR; processed 26000000 fragments; hits: 42435888, hits per frag: 1.63223/.../work2/c3/593743a22569a97e1d10b2a200b713/.command.sh: line 4: 38 Segmentation fault (core dumped) /usr/local/bin/salmon quant -i referen",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876:4025,Load,Loading,4025,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876,1,['Load'],['Loading']
Performance,"ntLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; -----------------------------------------; size = 2977516968; -----------------------------------------; | Loading reference sequence | Time = 228.26 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 320.51 us; -----------------------------------------; [2024-05-03 15:10:04.136] [jointLog] [info] done; [2024-05-03 15:10:04.170] [jointLog] [info] Index contained 147554 targets. [2024-05-03 15:10:05.131] [jointLog] [info] Number of decoys : 61 ; processed 21000000 fragmentsointLog] [info] First decoy index : 147456; hits: 25885546, hits per frag: 1.2683(base) [**no further output**]; ```. **Desktop (please complete the following information):**; - OS: Ubuntu linux. ```; $ uname -a; Linux big-bird 5.15.0-102-generic #112-Ubuntu SMP Tue Mar 5 16:50:32 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux; $ lsb_release -a; No LSB modules",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:6875,Load,Loading,6875,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,"ntLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2023-10-11 16:03:44.490] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2023-10-11 16:03:44.490] [jointLog] [info] parsing read library format; [2023-10-11 16:03:44.491] [jointLog] [info] There is 1 library.; [2023-10-11 16:03:45.109] [jointLog] [info] Loading Quasi index; [2023-10-11 16:03:45.111] [jointLog] [info] Loading 32-bit quasi index; [2023-10-11 16:03:45.173] [stderrLog] [info] Loading Suffix Array ; [2023-10-11 16:03:46.096] [stderrLog] [info] Loading Transcript Info ; [2023-10-11 16:03:46.382] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-10-11 16:03:46.474] [stderrLog] [info] There were 6195946 set bits in the bit array; [2023-10-11 16:03:46.481] [stderrLog] [info] Computing transcript lengths; [2023-10-11 16:03:46.481] [stderrLog] [info] Waiting to finish loading hash; [2023-10-11 16:03:56.007] [jointLog] [info] done; [2023-10-11 16:03:56.007] [jointLog] [info] Index contained 3744 targets; [2023-10-11 16:03:56.006] [stderrLog] [info] Done loading index; ; qemu: uncaught target signal 11 (Segmentation fault) - core dumped; .command.sh: line 9: 64 Segmentation fault salmon quant --validateMappings --threads 1 --libType A --index transcriptome-index --mates1 sample1_R1_001.trimmed.fastq.gz --mates2 sample1_R2_001.trimmed.fastq.gz --output sample1; ```. **Desktop (please complete the following information):**; - OS: [e.g. Ubuntu Linux, OSX]; Linux; - Version [ If you are on OSX, the output of `sw_vers`. If you are on linux the output of `uname -a` and `lsb_release -a`]; Linux 0f0e43816679 6.4.16-linuxkit. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881:3549,load,loading,3549,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881,2,['load'],['loading']
Performance,"nted 19,682,132 total reads in the equivalence classes; [2021-04-20 10:11:39.190] [jointLog] [warning] 0.00192356% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 15. [2021-04-20 10:11:39.190] [jointLog] [info] Number of mappings discarded because of alignment score : 17,018,803; [2021-04-20 10:11:39.190] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 1,750,387; [2021-04-20 10:11:39.190] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2021-04-20 10:11:39.190] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 234,041; [2021-04-20 10:11:39.190] [jointLog] [info] Mapping rate = 77.1074%. [2021-04-20 10:11:39.190] [jointLog] [info] finished quantifyLibrary(); [2021-04-20 10:11:39.193] [jointLog] [info] Starting optimizer; [2021-04-20 10:11:39.263] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2021-04-20 10:11:39.273] [jointLog] [info] iteration = 0 | max rel diff. = 14720; [2021-04-20 10:11:40.059] [jointLog] [info] iteration = 100 | max rel diff. = 11.9398; [2021-04-20 10:11:40.838] [jointLog] [info] iteration = 200 | max rel diff. = 8.95043; [2021-04-20 10:11:41.616] [jointLog] [info] iteration = 300 | max rel diff. = 8.965; [2021-04-20 10:11:42.390] [jointLog] [info] iteration = 400 | max rel diff. = 2.77483; [2021-04-20 10:11:43.170] [jointLog] [info] iteration = 500 | max rel diff. = 18.7693; [2021-04-20 10:11:43.921] [jointLog] [info] iteration = 600 | max rel diff. = 2.07666; [2021-04-20 10:11:44.677] [jointLog] [info] iteration = 700 | max rel diff. = 0.395157; [2021-04-20 10:11:45.418] [jointLog] [info] iteration = 800 | max rel diff. = 0.905927; [2021-04-20 10:11:46.136] [jointLog] [info] iteration = 900 | max rel diff. = 1.75975; [2021-04-20 10:11:46.842] ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/652:6583,optimiz,optimizer,6583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/652,1,['optimiz'],['optimizer']
Performance,"nted 22,215,758 total reads in the equivalence classes ; [2020-06-03 23:47:07.131] [jointLog] [warning] 0.00138398% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 1. [2020-06-03 23:47:07.131] [jointLog] [info] Number of mappings discarded because of alignment score : 50,180,647; [2020-06-03 23:47:07.131] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 5,461,169; [2020-06-03 23:47:07.131] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2020-06-03 23:47:07.131] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 324,394; [2020-06-03 23:47:07.131] [jointLog] [info] Mapping rate = 63.6568%. [2020-06-03 23:47:07.131] [jointLog] [info] finished quantifyLibrary(); [2020-06-03 23:47:07.136] [jointLog] [info] Starting optimizer; [2020-06-03 23:47:07.076] [fileLog] [info] ; At end of round 0; ==================; Observed 34899252 total fragments (34899252 in most recent round). [2020-06-03 23:47:08.309] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2020-06-03 23:47:08.317] [jointLog] [info] iteration = 0 | max rel diff. = 41473.1; [2020-06-03 23:47:08.967] [jointLog] [info] iteration = 100 | max rel diff. = 9.06606; [2020-06-03 23:47:09.603] [jointLog] [info] iteration = 200 | max rel diff. = 1.25243; [2020-06-03 23:47:10.262] [jointLog] [info] iteration = 300 | max rel diff. = 19.2449; [2020-06-03 23:47:10.896] [jointLog] [info] iteration = 400 | max rel diff. = 0.263527; [2020-06-03 23:47:11.533] [jointLog] [info] iteration = 500 | max rel diff. = 0.630176; [2020-06-03 23:47:12.175] [jointLog] [info] iteration = 600 | max rel diff. = 0.250806; [2020-06-03 23:47:12.830] [jointLog] [info] iteration = 700 | max rel diff. = 0.228813; [2020-06-03 23:47:13.475] [jointLog] [info]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/530:5414,optimiz,optimizer,5414,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/530,1,['optimiz'],['optimizer']
Performance,"nted 34607288 total reads in the equivalence classes ; [2023-02-22 16:39:31.099] [jointLog] [warning] 5.2431e-05% of fragments were shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 26. [2023-02-22 16:39:31.099] [jointLog] [info] Number of mappings discarded because of alignment score : 10896346; [2023-02-22 16:39:31.099] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 2579830; [2023-02-22 16:39:31.099] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 2262090; [2023-02-22 16:39:31.099] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 222960; [2023-02-22 16:39:31.099] [jointLog] [info] Mapping rate = 72.5797%. [2023-02-22 16:39:31.099] [jointLog] [info] finished quantifyLibrary(); [2023-02-22 16:39:31.099] [jointLog] [info] Starting optimizer; [2023-02-22 16:39:31.095] [fileLog] [info] ; At end of round 0; ==================; Observed 47681748 total fragments (47681748 in most recent round). [2023-02-22 16:39:31.343] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-02-22 16:39:31.387] [jointLog] [info] iteration = 0 | max rel diff. = 4339.45; [2023-02-22 16:39:31.726] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2023-02-22 16:40:27.779] [jointLog] [info] Computed expected counts (for bias correction); [2023-02-22 16:40:27.779] [jointLog] [info] processed bias for 0.0% of the transcripts; [2023-02-22 16:40:33.273] [jointLog] [info] processed bias for 10.0% of the transcripts; [2023-02-22 16:40:39.173] [jointLog] [info] processed bias for 20.0% of the transcripts; [2023-02-22 16:40:44.721] [jointLog] [info] processed bias for 30.0% of the transcripts; [2023-02-22 16:40:50.705] [jointLog] [info] processed bias for 40.0% of the transcripts; [2023-02-22",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:3376,optimiz,optimizer,3376,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['optimiz'],['optimizer']
Performance,"nts will be ignored.; [2023-02-23 09:39:48.709] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-02-23 09:39:48.709] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-02-23 09:39:48.709] [jointLog] [info] parsing read library format; [2023-02-23 09:39:48.709] [jointLog] [info] There is 1 library.; [2023-02-23 09:39:48.709] [jointLog] [info] Loading pufferfish index; [2023-02-23 09:39:48.709] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 15.056 s; -----------------------------------------; size = 37280289; -----------------------------------------; | Loading contig offsets | Time = 61.965 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 513.44 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 755.36 ms; -----------------------------------------; size = 3783918493; Number of ones: 37280288; Number of ones per inventory item: 512; Inventory entries filled: 72814; -----------------------------------------; | Loading contig boundaries | Time = 4.2405 s; -----------------------------------------; size = 3783918493; -----------------------------------------; | Loading sequence | Time = 387.95 ms; -----------------------------------------; size = 2665509853; -----------------------------------------; | Loading positions | Time = 4.3613 s; -----------------------------------------; size = 3516045923; -----------------------------------------; | Loading reference sequence | Time = 360.88 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 985.04 us; -----------------------------------------; [2023-02-23 09:40:13.935] [jointLog] [info] don",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830:9760,Load,Loading,9760,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830,1,['Load'],['Loading']
Performance,"nts will be ignored.; [2023-08-27 19:59:26.866] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2023-08-27 19:59:26.866] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2023-08-27 19:59:26.866] [jointLog] [info] parsing read library format; [2023-08-27 19:59:26.866] [jointLog] [info] There is 1 library.; [2023-08-27 19:59:26.867] [jointLog] [info] Loading pufferfish index; [2023-08-27 19:59:26.867] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 3.5071 s; -----------------------------------------; size = 23930024; -----------------------------------------; | Loading contig offsets | Time = 66.098 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 15.687 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 157.98 ms; -----------------------------------------; size = 2092742871; Number of ones: 23930023; Number of ones per inventory item: 512; Inventory entries filled: 46739; -----------------------------------------; | Loading contig boundaries | Time = 2.8293 s; -----------------------------------------; size = 2092742871; -----------------------------------------; | Loading sequence | Time = 394.6 ms; -----------------------------------------; size = 1374842181; -----------------------------------------; | Loading positions | Time = 4.3258 s; -----------------------------------------; size = 2139249936; -----------------------------------------; | Loading reference sequence | Time = 408.65 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 48.085 ms; -----------------------------------------; Exception : [boost::filesystem::status: File na",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870:10612,Load,Loading,10612,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870,1,['Load'],['Loading']
Performance,"nts will be ignored.; [2024-05-03 15:09:51.221] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-05-03 15:09:51.221] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-05-03 15:09:51.221] [jointLog] [info] parsing read library format; [2024-05-03 15:09:51.221] [jointLog] [info] There is 1 library.; [2024-05-03 15:09:51.221] [jointLog] [info] Loading pufferfish index; [2024-05-03 15:09:51.221] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 6.1119 s; -----------------------------------------; size = 25107960; -----------------------------------------; | Loading contig offsets | Time = 29.509 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 163.13 us; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 358.06 ms; -----------------------------------------; size = 3025374818; Number of ones: 25107959; Number of ones per inventory item: 512; Inventory entries filled: 49039; -----------------------------------------; | Loading contig boundaries | Time = 3.1166 s; -----------------------------------------; size = 3025374818; -----------------------------------------; | Loading sequence | Time = 237.3 ms; -----------------------------------------; size = 2272136048; -----------------------------------------; | Loading positions | Time = 2.8327 s; -----------------------------------------; size = 2977516968; -----------------------------------------; | Loading reference sequence | Time = 228.26 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 320.51 us; -----------------------------------------; [2024-05-03 15:10:04.136] [jointLog] [info] done",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/929:6335,Load,Loading,6335,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/929,1,['Load'],['Loading']
Performance,"nts will be ignored.; [2024-11-01 05:13:59.563] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2024-11-01 05:13:59.563] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2024-11-01 05:13:59.563] [jointLog] [info] parsing read library format; [2024-11-01 05:13:59.563] [jointLog] [info] There is 1 library.; [2024-11-01 05:13:59.563] [jointLog] [info] Loading pufferfish index; [2024-11-01 05:13:59.563] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 10.554 s; -----------------------------------------; size = 37302779; -----------------------------------------; | Loading contig offsets | Time = 91.707 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 21.463 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 725.65 ms; -----------------------------------------; size = 3781971583; Number of ones: 37302778; Number of ones per inventory item: 512; Inventory entries filled: 72857; -----------------------------------------; | Loading contig boundaries | Time = 5.6684 s; -----------------------------------------; size = 3781971583; -----------------------------------------; | Loading sequence | Time = 688.13 ms; -----------------------------------------; size = 2662888243; -----------------------------------------; | Loading positions | Time = 4.9343 s; -----------------------------------------; size = 3536939191; -----------------------------------------; | Loading reference sequence | Time = 681.27 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 21.142 ms; -----------------------------------------; [2024-11-01 05:14:22.991] [jointLog] [info] do",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/971:3258,Load,Loading,3258,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/971,1,['Load'],['Loading']
Performance,"nty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2594,Load,Loadable,2594,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"nu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-bas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2294,load,load-safe-path,2294,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['load'],['load-safe-path']
Performance,"nvCov: 1044.2 normfactor: 295.235; [2018-07-26 11:25:31.135] [alevinLog] [info] Total 222(has 200 low confidence) barcodes; [2018-07-26 11:25:31.440] [alevinLog] [info] Done True Barcode Sampling; [2018-07-26 11:25:31.789] [alevinLog] [info] Done populating Z matrix; [2018-07-26 11:25:31.793] [alevinLog] [info] Done indexing Barcodes; [2018-07-26 11:25:31.793] [alevinLog] [info] Total Unique barcodes found: 10630133; [2018-07-26 11:25:31.793] [alevinLog] [info] Used Barcodes except Whitelist: 10603; [2018-07-26 11:25:31.938] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-07-26 11:25:31.939] [alevinLog] [info] parsing read library format; [2018-07-26 11:25:31.949] [jointLog] [info] There is 1 library.; [2018-07-26 11:25:32.331] [jointLog] [info] Loading Quasi index; [2018-07-26 11:25:32.331] [jointLog] [info] Loading 32-bit quasi index; [2018-07-26 11:25:32.357] [stderrLog] [info] Loading Suffix Array ; [2018-07-26 11:26:09.413] [stderrLog] [info] Loading Transcript Info ; [2018-07-26 11:26:10.896] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-07-26 11:26:11.159] [stderrLog] [info] There were 203027 set bits in the bit array; [2018-07-26 11:26:11.225] [stderrLog] [info] Computing transcript lengths; [2018-07-26 11:26:11.226] [stderrLog] [info] Waiting to finish loading hash; [2018-07-26 11:26:14.654] [stderrLog] [info] Done loading index; [2018-07-26 11:26:14.654] [jointLog] [info] done; [2018-07-26 11:26:14.654] [jointLog] [info] Index contained 203027 targets. Incorrect call for umi extractIncorrect call for umi extract; ```. I traced it back to AlevinUtils.cpp in the source files but could not make sense of it from there. The program will run completely on the same data and library if I change --dropseq to --Chromium, eventually outputting the following after processing the reads:. ```; [2018-07-24 10:56:20.712] [jointLog] [info] Computed 9968 rich equivalence classes for further processing; [2018-07-24 10:56:20.712] [jointLog]",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258:2958,Load,Loading,2958,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258,1,['Load'],['Loading']
Performance,"nvCov: 568.346 normfactor: 688.271; [2018-08-29 11:28:19.290] [alevinLog] [info] Total 3385(has 1000 low confidence) barcodes; [2018-08-29 11:28:19.297] [alevinLog] [info] Done True Barcode Sampling; [2018-08-29 11:28:19.433] [alevinLog] [info] Done populating Z matrix; [2018-08-29 11:28:19.437] [alevinLog] [info] Done indexing Barcodes; [2018-08-29 11:28:19.437] [alevinLog] [info] Total Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33:18.039] [jointLog] [warning] Found 187 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3499,Load,Loading,3499,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['Load'],['Loading']
Performance,"o /results/RNA-Seq/Mice_A_batch2/salmon_out/logs; [2021-05-20 10:53:54.759] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-05-20 10:53:54.760] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2021-05-20 10:53:54.760] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2021-05-20 10:53:54.760] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.; [2021-05-20 10:53:54.760] [jointLog] [info] parsing read library format; [2021-05-20 10:53:54.760] [jointLog] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; ---------------------------",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:1903,Load,Loading,1903,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"o] Done indexing Barcodes; [2019-01-29 09:55:04.855] [alevinLog] [info] Total Unique barcodes found: 70316; [2019-01-29 09:55:04.855] [alevinLog] [info] Used Barcodes except Whitelist: 184; [2019-01-29 09:55:04.882] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:55:04.882] [alevinLog] [info] parsing read library format; [2019-01-29 09:55:05.014] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:55:04.882] [jointLog] [info] There is 1 library.; [2019-01-29 09:55:05.012] [jointLog] [info] Loading Quasi index; [2019-01-29 09:55:05.013] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:55:06.105] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:55:09.968] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:55:16.908] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:55:19.931] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:55:19.931] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:55:41.122] [jointLog] [info] done; [2019-01-29 09:55:41.122] [jointLog] [info] Index contained 80,511 targets; [2019-01-29 09:55:41.122] [stderrLog] [info] Done loading index. processed 0 Million fragments; hits: 161433, hits per frag: 0.32698. [2019-01-29 09:55:54.788] [alevinLog] [info] Starting optimizer; [2019-01-29 09:55:54.742] [jointLog] [info] Computed 6,346 rich equivalence classes for further processing; [2019-01-29 09:55:54.742] [jointLog] [info] Counted 80,300 total reads in the equivalence classes ; [2019-01-29 09:55:54.754] [jointLog] [warning] Only 80300 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2019-01-29 09:55:54.754] [jointLog] [info] Mapping rate = 8.80342%. [2019-01-29 09:55:54.754] [jointLog] [info] finished quantifyLibrary(). Analyzed 289 cells (100% of all).; [2019-01-29 09:55:56.858] [alevinLog] [info] Total 72037 UMI after",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:3347,load,loading,3347,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['load'],['loading']
Performance,"o] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivalence classes . [2023-03-17 07:46:19.488] [jointLog] [warning] 0.22783% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 20. [2023-03-17 07:46:19.488] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 0; [2023-03-17 07:46:19.488] [jointLog] [info] Mapping rate = 80.5964%. [2023-03-17 07:46:19.488] [jointLog] [info] finished quantifyLibrary(); [2023-03-17 07:46:19.489] [jointLog] [info] Starting optimizer; [2023-03-17 07:46:20.246] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2023-03-17 07:46:20.304] [jointLog] [info] iteration = 0 | max rel diff. = 431.329; [2023-03-17 07:46:25.793] [jointLog] [info] iteration = 100 | max rel diff. = 0.170791; [2023-03-17 07:46:31.221] [jointLog] [info] iteration = 200 | max rel diff. = 0.0893134; [2023-03-17 07:46:36.693] [jointLog] [info] iteration = 300 | max rel diff. = 0.0353826; [2023-03-17 07:46:42.208] [jointLog] [info] iteration = 400 | max rel diff. = 0.0328108; [2023-03-17 07:46:47.631] [jointLog] [info] iteration = 500 | max rel diff. = 0.0266592; [2023-03-17 07:46:53.042] [jointLog] [info] iteration = 600 | max rel diff. = 0.0419357; [2023-03-17 07:46:58.543] [jointLog] [info] iteration = 700 | max rel diff. = 0.0160998; [2023-03-17 07:47:04.035] [jointLog] [info] iteration = 800 | max rel diff. = 0.0122848; [2023-03-17 07:47:09.471] [jointLog] [info] iteration = 900 | max rel diff. = 0.0122846. ```",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:9162,optimiz,optimizer,9162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['optimiz'],['optimizer']
Performance,"o] iteration = 300 | max rel diff. = 0.0375335; [00m[1m[2017-03-30 11:33:16.917] [jointLog] [info] iteration = 400 | max rel diff. = 0.0281626; [00m[1m[2017-03-30 11:33:32.635] [jointLog] [info] iteration = 500 | max rel diff. = 0.0213515; [00m[1m[2017-03-30 11:33:48.229] [jointLog] [info] iteration = 600 | max rel diff. = 0.0163419; [00m[1m[2017-03-30 11:34:05.482] [jointLog] [info] iteration = 700 | max rel diff. = 0.0161512; [00m[1m[2017-03-30 11:34:22.202] [jointLog] [info] iteration = 800 | max rel diff. = 0.0161512; [00m[1m[2017-03-30 11:34:38.380] [jointLog] [info] iteration = 900 | max rel diff. = 0.0124406; [00m[1m[2017-03-30 11:34:54.979] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0116537; [00m[1m[2017-03-30 11:35:11.215] [jointLog] [info] iteration = 1100 | max rel diff. = 0.0116537; [00m[1m[2017-03-30 11:35:12.190] [jointLog] [info] iteration = 1107 | max rel diff. = 0.00948523; [00m[1m[2017-03-30 11:35:12.199] [jointLog] [info] Finished optimizer; [00m[1m[2017-03-30 11:35:12.199] [jointLog] [info] writing output . [00m[33m[1m[2017-03-30 11:38:26.886] [jointLog] [warning] NOTE: Read Lib [( /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz, /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz )] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/lib_format_counts.json for details. [00m**** Job ends ****; Thu Mar 30 11:38:30 EDT 2017; ```. ### SGE email example info. ```; Job-array task 110632.1 (step6-salmon_test5.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-066.cm.cluster; Host = compute-066.cm.cluster; Start Time = 03/29/2017 23:27:10; End Time = 03/30/2017 11:38:30; User Time = 06:08:32; System Time = 12:46:46; Wallclock Time = 12:11:20; CPU = 18:55:18; Max vmem = 6.961G; Exit Status = 0; ```. For some reaso",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:25136,optimiz,optimizer,25136,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['optimiz'],['optimizer']
Performance,"oading Suffix Array; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Transcript Info; [2017-10-25 10:57:26.004] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-10-25 10:57:26.005] [stderrLog] [info] There were 28 set bits in the bit array; [2017-10-25 10:57:26.005] [stderrLog] [info] Computing transcript lengths; [2017-10-25 10:57:26.005] [stderrLog] [info] Waiting to finish loading hash; [2017-10-25 10:57:26.012] [stderrLog] [info] Done loading index. processed 81500000 fragments; hits: 0; hits per frag: 0. [2017-10-25 10:58:22.290] [jointLog] [info] Computed 0 rich equivalence classes for further processing; [2017-10-25 10:58:22.290] [jointLog] [info] Counted 0 total reads in the equivalence classes; [2017-10-25 10:58:22.293] [jointLog] [warning] Only 0 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-10-25 10:58:22.293] [jointLog] [info] Mapping rate = 0%. [2017-10-25 10:58:22.293] [jointLog] [info] finished quantifyLibrary(); [2017-10-25 10:58:22.295] [jointLog] [info] Starting optimizer; [2017-10-25 10:58:22.308] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-10-25 10:58:22.308] [jointLog] [info] iteration = 0 | max rel diff. = 0.455425; [2017-10-25 10:58:22.308] [jointLog] [info] iteration = 50 | max rel diff. = -1.79769e+308; [2017-10-25 10:58:22.308] [jointLog] [error] Total alpha weight was too small! Make sure you ran salmon correclty.; [2017-10-25 10:58:22.308] [jointLog] [error] The optimization algorithm failed. This is likely the result of bad input (or a bug). If you cannot track down the cause, please report this issue on GitHub. I had a look at my fastq and all seems normal (?):. @HF1_23952:5:1101:9161:20709/1; CTCACAAGAGTGTGATCCAAGTCGGCCGTCGTCTTCTGCA; +; AAFFFJJJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ; @HF1_23952:5:1101:9343:20814/1; CTCACAAGAGTGTGATCCAAGTCGGCCGTCGTCTTCTGCA; +. Thank you for your help,; Rute",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/167:2141,optimiz,optimizer,2141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/167,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"oading positions | Time = 171.81 s; -----------------------------------------; size = 3221360466; -----------------------------------------; | Loading reference sequence | Time = 7.9564 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 35.741 ms; -----------------------------------------; Index requested greater than vector's size: 6442720932>6442720932; Index requested greater than vector's size: 6442720996>6442720932; Index requested greater than vector's size: 6442721060>6442720932; Index requested greater than vector's size: 6442721124>6442720932; Index requested greater than vector's size: 6442721188>6442720932; Index requested greater than vector's size: 6442721252>6442720932; Index requested greater than vector's size: 6442721316>6442720932; Index requested greater than vector's size: 6442721380>6442720932; Index requested greater than vector's size: 6442721444>6442720932; ...; ```. The index does not finish loading, and so salmon does not enter read quantification routines. **To Reproduce**. * Which version of salmon was used? 1.0; * How was salmon installed (compiled, downloaded executable, through bioconda)? ; Github release tarball; * Which reference (e.g. transcriptome) was used?; Gencode v32, with additional elements representing genic introns and intergenic spaces.; * Which read files were used?; NCBI SRA run accession GSM2392582; * Which which program options were used?; --no-version-check --libType ISR --threads 4 --seqBias --gcBias --useVBOpt. **Expected behavior**; I expected index loading to complete successfully.; **Desktop (please complete the following information):**; - OS: CentOS6. **Additional context**; I've uploaded the index file archive [here](https://www.icloud.com/iclouddrive/00DWWhkSucg2BTWLuFswSHwvQ#rapmap_issue_8_index) and the transcripts fasta file [here](https://www.icloud.com/iclouddrive/0oCdFG64TJe0IlvkYyIUZRfSQ#rapmap_issue_8_transcripts).",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/463:2583,load,loading,2583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/463,2,['load'],['loading']
Performance,"ob-p ,. Edit: I have resolved the problem. It is not a problem with Biostrings or GRanges. It turns out that when subsetting the premature sequences, the subsetted sequences do not retain the names of the GRanges used to subset them therefore my code could not identify minus strand transcripts and get their reverse complements. Apologies for any confusion!; ---; Thank you very much for the prompt response and for taking the time to validate Salmon's functionality. Indeed, Salmon is not the problem here. After taking a closer look at my transcript fasta, I noticed a problem with it, as you suggested. Long story short, half the premature transcripts had the wrong orientation and complementarity. Long story:. Oddly, the mature sequences were fine even though I used an identical approach to subset premature and mature transcripts from the genome reference!. Briefly my approach relied on three R packages rtracklayer, GenomicRanges, and Biostrings. 1. I used rtracklayer to load a gtf formatted exon annotations acquired from Ensembl. The file is loaded as a GenomicRanges object which essentially describes the locus of each exon (the transcribed strand [+ or -], chromosome, start and end positions relative to the reference strand) and its associated gene and transcript. 2. I used the GRanges object to generate pre-RNA coordinates that span all exons of a transcript. 3. I loaded the reference genome fasta acquired from Ensembl using the Biostrings package. GRanges and Biostrings are tightly integrated, allowing me to subset sequences from a Biostrings object using the GRanges object. **I believe the problem lies here.** It appears that when subsetting the mature exonic sequences from Biostrings using GRanges, the strand field in the GRanges object **was not** utilized. I.e., I needed to get the reverse complement of the extracted sequences for transcripts on the minus strand. I had done that and assumed that this behaviour would be consistent. However, for reasons I have not ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191:989,load,load,989,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826035191,2,['load'],['load']
Performance,"oblematic sample where the knee autodetection fails (way too high cell number). So I created a whitelist of the 5000 most frequent entries of the filtered_cb_frequency.txt. It seems to work as expected, but the quants_mat.csv is not created, which I need for further downstream analysis (Seurat). The quant_mat.gz is created though, is there a way to manually create a .csv from this file (it seems to be binary).; Thanks. P.S.: The alevin logs seem to contain some non-standard characters when the number of ""Barcodes used"" should be printed (maybe because of the colour highlighting?). **Expected behavior**; quants_mat.csv of the whitelisted cells should be created. **Logs**; ```; [2019-05-17 07:28:11.279] [alevinLog] [info] Processing barcodes files (if Present) . ; [2019-05-17 07:39:15.712] [alevinLog] [info] Done barcode density calculation.; [2019-05-17 07:39:15.712] [alevinLog] [info] # Barcodes Used: [32m346967519[0m / [31m347069857[0m.; [2019-05-17 07:39:15.731] [alevinLog] [info] Done importing white-list Barcodes; [2019-05-17 07:39:15.732] [alevinLog] [info] Total 4000 white-listed Barcodes; [2019-05-17 07:39:16.050] [alevinLog] [info] Done populating Z matrix; [2019-05-17 07:39:16.112] [alevinLog] [info] Done indexing Barcodes; [2019-05-17 07:39:16.112] [alevinLog] [info] Total Unique barcodes found: 3968995; [2019-05-17 07:39:16.112] [alevinLog] [info] Used Barcodes except Whitelist: 80709; [2019-05-17 07:39:16.858] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-05-17 07:39:16.868] [alevinLog] [info] parsing read library format; [2019-05-17 08:05:24.319] [alevinLog] [info] Starting optimizer. [2019-05-17 08:06:06.627] [alevinLog] [info] Total 14429442.00 UMI after deduplicating.; [2019-05-17 08:06:06.627] [alevinLog] [info] Total 14027858 BiDirected Edges.; [2019-05-17 08:06:06.627] [alevinLog] [info] Total 794402 UniDirected Edges.; [2019-05-17 08:06:06.689] [alevinLog] [info] Finished optimizer; ```. **Desktop:**; - OS: Ubuntu",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/363:2103,optimiz,optimizer,2103,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/363,2,['optimiz'],['optimizer']
Performance,"odeGroupStringHasher; KeyEqual = std::equal_to<std::__cxx11::basic_string<char> >; Allocator = std::allocator<std::pair<const std::__cxx11::basic_string<char>, unsigned int> >; long unsigned int SLOT_PER_BUCKET = 4ul]::<lambda(cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>::mapped_type&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:529; #15 upsert<std::__cxx11::basic_string<char>&, densityCalculator(single_parser*, AlevinOpts<ProtocolT>&, std::mutex&, CFreqMapT&, std::atomic<long unsigned int>&, std::atomic<long unsigned int>&) [with ProtocolT = alevin::protocols::Chromium; single_parser = fastx_parser::FastxParser<fastx_parser::ReadSeq>; CFreqMapT = cuckoohash_map<std::__cxx11::basic_string<char>, unsigned int, BarcodeGroupStringHasher>]::<lambda(uint32_t&)>, int> (fn=..., key=..., this=<optimized out>); at /u/user/tmp/salmon/include/cuckoohash_map.hh:554; #16 densityCalculator<alevin::protocols::Chromium> (parser=<optimized out>, aopt=..., ioMutex=..., freqCounter=...,; usedNumBarcodes=..., totNumBarcodes=...) at /u/user/tmp/salmon/src/Alevin.cpp:137; #17 0x0000000000ba4970 in std::execute_native_thread_routine (__p=<optimized out>); at ../../../.././libstdc++-v3/src/c++11/thread.cc:84; #18 0x00007fff7fbc7064 in start_thread (arg=0x7ffcf97e7700) at pthread_create.c:309; #19 0x00007fff7e95b62d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111; (gdb); #0 0x00007fff7e8a8067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56; #1 0x00007fff7e8a9448 in __GI_abort () at abort.c:89; #2 0x0000000000bc962d in __gnu_cxx::__verbose_terminate_handler (); at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x0000000000b3d856 in __cxxabiv1::__terminate (handler=<optimized out>); at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47; #4 0x0000000000b3d8a1 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57; #5 0x000000",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234:12190,optimiz,optimized,12190,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234,1,['optimiz'],['optimized']
Performance,"odes files (if Present). [2019-01-28 21:07:56.106] [alevinLog] [info] Done barcode density calculation.; [2019-01-28 21:07:56.106] [alevinLog] [info] # Barcodes Used: 287883370 / 287983348.; [2019-01-28 21:07:57.808] [alevinLog] [info] Done importing white-list Barcodes; [2019-01-28 21:07:58.273] [alevinLog] [warning] Skipping 290359 Barcodes with 0 reads; Assuming this is the required behavior.; [2019-01-28 21:07:58.517] [alevinLog] [info] Total 446921 white-listed Barcodes; [2019-01-28 21:09:02.029] [alevinLog] [info] Done populating Z matrix; [2019-01-28 21:09:02.331] [alevinLog] [info] Done indexing Barcodes; [2019-01-28 21:09:02.331] [alevinLog] [info] Total Unique barcodes found: 3214859; [2019-01-28 21:09:02.331] [alevinLog] [info] Used Barcodes except Whitelist: 168781; [2019-01-28 21:09:02.559] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-28 21:09:02.559] [alevinLog] [info] parsing read library format; [2019-01-28 21:40:44.514] [alevinLog] [info] Starting optimizer. [2019-01-28 22:05:50.958] [alevinLog] [info] Total 39006157.00 UMI after deduplicating.; [2019-01-28 22:05:50.960] [alevinLog] [warning] Skipped 160108 barcodes due to No mapped read; [2019-01-28 22:11:23.270] [alevinLog] [info] Finished optimizer. [2019-01-28 21:40:30.445] [jointLog] [info] Computed 64,654 rich equivalence classes for further processing; [2019-01-28 21:40:30.445] [jointLog] [info] Counted 107,408,832 total reads in the equivalence classes; [2019-01-28 21:40:30.446] [jointLog] [warning] Found 39484 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-01-28 21:40:30.446] [jointLog] [info] Mapping rate = 37.2969%. [2019-01-28 21:40:30.446] [jointLog] [info] finished quantifyLibrary(); [2019-01-28 21:40:44.514] [alevinLog] [info] Starting optimizer. Analyzed 446921 cells (100% of all).; [2019-01-28 22:05:50.958] [alevinLog] [info] Total 39006157.00 UMI after deduplicating.; [2019-01-28 ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340:7969,optimiz,optimizer,7969,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340,1,['optimiz'],['optimizer']
Performance,"of the parameters in the quant.sf parameters across all genes and across samples.; . **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem. ### For version 0.8. This is similar across all samples:; Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250 28.8836 527.392; LOC_Os01g01010.2 2218 250 1.84062 33.6083; LOC_Os01g01019.1 1127 250 0.0547668 1; LOC_Os01g01030.1 2464 250 4.43611 81; LOC_Os01g01040.4 1524 250 0.941635 17.1935; LOC_Os01g01040.1 2508 250 11.5632 211.135; LOC_Os01g01040.2 2482 250 8.02081 146.454; LOC_Os01g01040.3 2583 250 8.55554 156.218; LOC_Os01g01050.1 2039 250 17.2333 314.667. ### The counted total reads, observed total fragments, and the mapping rate is similar for all samples for both the raw-dat and the trimmed reads.; [2019-03-03 06:29:53.168] [jointLog] [info] parsing read library format; [2019-03-03 06:29:53.168] [jointLog] [info] There is 1 library.; [2019-03-03 06:29:53.224] [jointLog] [info] Loading Quasi index; [2019-03-03 06:29:53.224] [jointLog] [info] Loading 32-bit quasi index; [2019-03-03 06:30:02.239] [jointLog] [info] done; [2019-03-03 06:30:02.239] [jointLog] [info] Index contained 66153 targets; [2019-03-03 06:30:03.414] [jointLog] [info] Automatically detected most likely library type as MU; [2019-03-03 06:31:37.523] [fileLog] [info]; At end of round 0; ==================; Observed 18861231 total fragments (18861231 in most recent round). [2019-03-03 06:31:37.522] [jointLog] [info] Computed 48502 rich equivalence classes for further processing; [2019-03-03 06:31:37.522] [jointLog] [info] Counted 17308442 total reads in the equivalence classes; [2019-03-03 06:31:37.528] [jointLog] [info] Mapping rate = 91.7673%. [2019-03-03 06:31:37.528] [jointLog] [info] finished quantifyLibrary(). ### For version 0.12. This is similar across all samples:. Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250.000 30.539503 527.399; LOC_Os01g01010.2 2218 250.000 1.714089 29.6",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:6011,Load,Loading,6011,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['Load'],['Loading']
Performance,"oftware: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:2450,Load,Loadable,2450,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"og] [info] Knee found left boundary at 9447; [2018-06-30 22:10:52.498] [alevinLog] [warning] Gauss Prediction 0 Too far from knee prediction skipping it; [2018-06-30 22:10:52.498] [alevinLog] [info] Learned InvCov: 457.073 normfactor: 260.286; [2018-06-30 22:10:52.498] [alevinLog] [info] Total 10434(has 987 low confidence) barcodes; [2018-06-30 22:10:52.530] [alevinLog] [info] Done True Barcode Sampling; [2018-06-30 22:10:53.101] [alevinLog] [info] Done populating Z matrix; [2018-06-30 22:10:53.103] [alevinLog] [info] Done indexing Barcodes; [2018-06-30 22:10:53.104] [alevinLog] [info] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of ",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:2549,Load,Loading,2549,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['Load'],['Loading']
Performance,"og] [info] There is 1 library.; [2021-05-20 10:53:54.892] [jointLog] [info] Loading pufferfish index; [2021-05-20 10:53:54.901] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information.; [2021-05-20 10:53:54.901] [jointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 443.9 ms; -----------------------------------------; size = 1248328; -----------------------------------------; | Loading contig offsets | Time = 23.968 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 5.7496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 86.515 ms; -----------------------------------------; size = 115684262; Number of ones: 1248327; Number of ones per inventory item: 512; Inventory entries filled: 2439; -----------------------------------------; | Loading contig boundaries | Time = 277.94 ms; -----------------------------------------; size = 115684262; -----------------------------------------; | Loading sequence | Time = 56.72 ms; -----------------------------------------; size = 78234452; -----------------------------------------; | Loading positions | Time = 288.6 ms; -----------------------------------------; size = 128312800; -----------------------------------------; | Loading reference sequence | Time = 62.735 ms; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 650 us; -----------------------------------------; [2021-05-20 10:53:56.156] [jointLog] [info] done; [2021-05-20 10:53:56.156] [jointLog] [info] Index contained 44,026 targets. [2021-05-20 10:53:58.080] [jointLog] [info] Number of decoys : 0; [2021-05-20 10:54:28.729] [jointLog] [info] Automati",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661:2632,Load,Loading,2632,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661,1,['Load'],['Loading']
Performance,"og] [info] Total 289(has 190 low confidence) barcodes; [2019-01-29 09:55:04.822] [alevinLog] [info] Done True Barcode Sampling; [2019-01-29 09:55:04.855] [alevinLog] [info] Done populating Z matrix; [2019-01-29 09:55:04.855] [alevinLog] [info] Done indexing Barcodes; [2019-01-29 09:55:04.855] [alevinLog] [info] Total Unique barcodes found: 70316; [2019-01-29 09:55:04.855] [alevinLog] [info] Used Barcodes except Whitelist: 184; [2019-01-29 09:55:04.882] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:55:04.882] [alevinLog] [info] parsing read library format; [2019-01-29 09:55:05.014] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:55:04.882] [jointLog] [info] There is 1 library.; [2019-01-29 09:55:05.012] [jointLog] [info] Loading Quasi index; [2019-01-29 09:55:05.013] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:55:06.105] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:55:09.968] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:55:16.908] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:55:19.931] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:55:19.931] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:55:41.122] [jointLog] [info] done; [2019-01-29 09:55:41.122] [jointLog] [info] Index contained 80,511 targets; [2019-01-29 09:55:41.122] [stderrLog] [info] Done loading index. processed 0 Million fragments; hits: 161433, hits per frag: 0.32698. [2019-01-29 09:55:54.788] [alevinLog] [info] Starting optimizer; [2019-01-29 09:55:54.742] [jointLog] [info] Computed 6,346 rich equivalence classes for further processing; [2019-01-29 09:55:54.742] [jointLog] [info] Counted 80,300 total reads in the equivalence classes ; [2019-01-29 09:55:54.754] [jointLog] [warning] Only 80300 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:3088,Load,Loading,3088,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['Load'],['Loading']
Performance,"ogram ] => salmon ; ### [ command ] => quant ; ### [ index ] => { ./storage/tmm.idx }; ### [ mates1 ] => { DNA_1.fastq.gz }; ### [ mates2 ] => {DNA_2.fastq.gz }; ### [ output ] => { /DNA_tmm }; ### [ meta ] => { }; ### [ incompatPrior ] => { 0.0 }; ### [ libType ] => { A }; ### [ threads ] => { 8 }; ### [ gcBias ] => { }; ### [ seqBias ] => { }; ### [ numBootstraps ] => { 30 }; Logs will be written to ./storage/logs; [2017-03-15 11:53:20.568] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2017-03-15 11:53:20.568] [jointLog] [info] parsing read library format; [2017-03-15 11:53:20.568] [jointLog] [info] There is 1 library.; [2017-03-15 11:53:20.653] [jointLog] [info] Loading Quasi index; [2017-03-15 11:53:20.683] [jointLog] [info] Loading 64-bit quasi index; [2017-03-15 11:53:20.684] [stderrLog] [info] Loading Suffix Array ; [2017-03-15 12:19:05.982] [stderrLog] [info] Loading Transcript Info ; Exception : [Failed to read 130159192 bytes from input stream! Read 65079596]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.; ```. Index building log:. ```; Version Info: This is the most recent version of Salmon.; index ["" ./storage/tmm.idx""] did not previously exist . . . creating it; [2017-03-14 12:10:34.791] [jLog] [info] building index; RapMap Indexer. [Step 1 of 4] : counting k-mers; counted k-mers for 30000 transcripts[2017-03-14 12:10:36.701] [jointLog] [warning] Entry with header [734bf21190b56e1ed4c8d7093c340df1fc6266bd80ed60ebc0ae0f4e9343c3a4], had length less than the k-mer length of 31 (perhaps after poly-A clipping); counted k-mers for 420000 transcripts[2017-03-14 12:10:56.697] [jointLog] [warning] Entry with header [0c9d699aa70741734115dadd8175a44a013ad4122a3af7952e3b38e9593da047], had length less than the k-mer length of 31 (perhaps after poly-A clipping); counted k-mers for 11130000 transcripts[2017-03-14 12:20:15.975] [jointLog] [warning] Entry with h",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129:2077,Load,Loading,2077,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129,1,['Load'],['Loading']
Performance,"ogs; [2018-05-31 16:54:42.310] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-05-31 16:54:42.310] [jointLog] [info] Usage of --validateMappings implies use of range factorization. rangeFactorizationBins is being set to 4; [2018-05-31 16:54:42.310] [jointLog] [info] parsing read library format; [2018-05-31 16:54:42.310] [jointLog] [info] There is 1 library.; [2018-05-31 16:54:42.480] [jointLog] [info] Loading Quasi index; [2018-05-31 16:54:42.501] [jointLog] [info] Loading 32-bit quasi index; [2018-05-31 16:54:42.501] [stderrLog] [info] Loading Suffix Array; [2018-05-31 16:55:01.293] [stderrLog] [info] Loading Transcript Info; [2018-05-31 16:55:06.428] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-05-31 16:55:07.107] [stderrLog] [info] There were 310732 set bits in the bit array; [2018-05-31 16:55:07.158] [stderrLog] [info] Computing transcript lengths; [2018-05-31 16:55:07.159] [stderrLog] [info] Waiting to finish loading hash; [2018-05-31 16:55:25.973] [jointLog] [info] done; [2018-05-31 16:55:25.973] [jointLog] [info] Index contained 310732 targets; [2018-05-31 16:55:25.973] [stderrLog] [info] Done loading index. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 224580543, hits per frag: 3.35031[2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 1.04% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.84% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.96% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batch with a maximum of 0.88% zero probability fragments; [2018-05-31 17:08:09.486] [jointLog] [info] Thread saw mini-batc",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229:1704,load,loading,1704,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229,1,['load'],['loading']
Performance,"ointLog] [info] Finished optimizer; [2022-05-14 01:26:19.655] [jointLog] [info] writing output . Then I generated another index similar to [using a full decoy of the genome](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/) as suggested above but I got this report. [2022-05-14 00:49:06.636] [jointLog] [info] Number of mappings discarded because of alignment score : 7,179,799; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 3,986,275; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 3,572,798; [2022-05-14 00:49:06.636] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 54,775; [2022-05-14 00:49:06.636] [jointLog] [info] Mapping rate = 62.2613%. [2022-05-14 00:49:06.636] [jointLog] [info] finished quantifyLibrary(); [2022-05-14 00:49:06.643] [jointLog] [info] Starting optimizer; [2022-05-14 00:49:06.706] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2022-05-14 00:49:06.713] [jointLog] [info] iteration = 0 | max rel diff. = 8788.91; [2022-05-14 00:49:07.363] [jointLog] [info] iteration = 100 | max rel diff. = 12.9125; [2022-05-14 00:49:08.016] [jointLog] [info] iteration = 200 | max rel diff. = 10.1452; [2022-05-14 00:49:08.665] [jointLog] [info] iteration = 300 | max rel diff. = 10.5557; [2022-05-14 00:49:09.322] [jointLog] [info] iteration = 400 | max rel diff. = 5.35911; [2022-05-14 00:49:09.990] [jointLog] [info] iteration = 500 | max rel diff. = 0.278805; [2022-05-14 00:49:10.647] [jointLog] [info] iteration = 600 | max rel diff. = 4.69875; [2022-05-14 00:49:11.295] [jointLog] [info] iteration = 700 | max rel diff. = 0.696517; [2022-05-14 00:49:11.994] [jointLog] [info] iteration = 800 | max rel diff. = 3.63395; [2022-05-14 00:49:12.648] [jointLog] [info] iteration = 900 | max rel diff. = 0.0421211; [2022-05-14 00:49:13",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943:4502,optimiz,optimizer,4502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/775#issuecomment-1126593943,1,['optimiz'],['optimizer']
Performance,ointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.497 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 192.67 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.1496 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 3.0304 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.3668 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.5058 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 22.571 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 2.1723 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 2.8044 ms; -----------------------------------------. [2023-11-30 09:37:51.026] [jointLog] [info] done; [2023-11-30 09:37:51.104] [jointLog] [info] Index contained 253166 targets; [2023-11-30 09:37:51.166] [jointLog] [info] Number of decoys : 194; [2023-11-30 09:37:51.166] [jointLog] [info] First decoy index : 252924 ; [2023-11-30 09:37:54.100] [jointLog] [info] Automatically detected most likely library type as ISR. [2023-11-30 09:38:33.382] [jointLog] [info] Thread saw mini-batch with a maximum of 3.76% zero probability fragments; [2023-11-30 09:38:33.406] [jointLog] [info] Computed 12939 rich equivalence classes for furth,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:7290,Load,Loading,7290,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"ointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 17.538 s; -----------------------------------------; size = 37303070; -----------------------------------------; | Loading contig offsets | Time = 413.98 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 2.3736 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3485 s; -----------------------------------------; size = 3781978516; Number of ones: 37303069; Number of ones per inventory item: 512; Inventory entries filled: 72858; -----------------------------------------; | Loading contig boundaries | Time = 5.1701 s; -----------------------------------------; size = 3781978516; -----------------------------------------; | Loading sequence | Time = 1.3226 s; -----------------------------------------; size = 2662886446; -----------------------------------------; | Loading positions | Time = 18.788 s; -----------------------------------------; size = 3537474813; -----------------------------------------; | Loading reference sequence | Time = 1.6833 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 3.3385 ms; -----------------------------------------. Segmentation fault (core dumped); ```. Output when the flag is off and the process finishes without the seg fault:; ```; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Sign up for the salmon mailing list to hear about new versions, features and updates at:; https://oceangenomics.com/subscribe; ###",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/902:4165,Load,Loading,4165,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/902,1,['Load'],['Loading']
Performance,"ointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 22.244 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 390.62 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.8142 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 6.3526 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.5744 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.3167 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 34.246 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 3.165 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 75.428 ms; -----------------------------------------. [2021-09-20 16:22:03.730] [jointLog] [info] done; [2021-09-20 16:22:03.778] [jointLog] [info] Index contained 116,612 targets; [2021-09-20 16:22:03.892] [jointLog] [info] Number of decoys : 66; [2021-09-20 16:22:03.892] [jointLog] [info] First decoy index : 116,507 ; [2021-09-20 16:22:04.460] [jointLog] [info] Automatically detected most likely library type as U; processed 37,000,000 fragments; hits: 117,167,504; hits per frag: 3.16785. [2021-09-20 16:24:48.269] [jointLog] [info] Computed 309,226 rich equivalence classes for further processing; [2021-09-20 16:24:48.269] [j",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:5492,Load,Loading,5492,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ointLog] [info] Loading dense pufferfish index.; -----------------------------------------; | Loading contig table | Time = 23.321 s; -----------------------------------------; size = 24942314; -----------------------------------------; | Loading contig offsets | Time = 378.39 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 3.5966 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 5.4807 s; -----------------------------------------; size = 3023265381; Number of ones: 24942313; Number of ones per inventory item: 512; Inventory entries filled: 48716; -----------------------------------------; | Loading contig boundaries | Time = 6.7705 s; -----------------------------------------; size = 3023265381; -----------------------------------------; | Loading sequence | Time = 2.7757 s; -----------------------------------------; size = 2274995991; -----------------------------------------; | Loading positions | Time = 31.703 s; -----------------------------------------; size = 2944822425; -----------------------------------------; | Loading reference sequence | Time = 2.4349 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 5.1367 ms; -----------------------------------------; [2021-09-20 16:31:04.631] [jointLog] [info] done; [2021-09-20 16:31:04.632] [jointLog] [info] Index contained 116,612 targets; Killed. ```. However, if I run it only with --validateMappings, it works fine and generates the output quant.sf file. ```; $ salmon quant -l A -i /mnt/hgfs/Data/reference_data/mm10/default -r /mnt/hgfs/Data/raw_data/S01_S1_R1_001.fastq.gz -o out -p 6 --validateMappings; Version Server Response: Not Found; ### salmon (selective-alignment-based) v1.5.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ libType ] => { A }; ### [ index ] =>",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/708:2528,Load,Loading,2528,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/708,1,['Load'],['Loading']
Performance,"ok stranded). Specifically, here is what I get when I run (a close approximation of) your command. ```; $salmon quant --index Salmon_index_hg38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --useVBOpt --output test_quant --; numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:38:54.413] [jointLog] [info] parsing read library format; [2016-12-13 22:38:54.413] [jointLog] [info] There is 1 library.; [2016-12-13 22:38:56.240] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:38:56.240] [jointLog] [info] Loading Quasi index; [2016-12-13 22:38:56.240] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:39:01.268] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:39:02.630] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:39:03.041] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:39:03.159] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:39:03.160] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:39:07.653] [stderrLog] [info] Done loading index; [2016-12-13 22:39:07.653] [jointLog] [info] done; [2016-12-13 22:39:07.653] [jointLog] [info] Index contained 182608 targets. processed 19000000 fragments; hits: 65897209; hits per frag: 3.47349. [2016-12-13 22:40:22.572] [jointLog] [info] Computed 137534 rich equivalence classes for further processing; [2016-12-13 22:40:22.572] [jointLog] [info] Counted 16265961 total reads in the equivalence classes; [2016-12-13 22:40:22.618] [jointLog] [info] Mapping rate =",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878:1441,Load,Loading,1441,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266934878,1,['Load'],['Loading']
Performance,"ok, this is not really a bug but I think it needs attention. i am using anaconda environment for many tools and keep it updated as much as possible with the `conda update --all` command. but the bottleneck is salmon, which has very old dependencies, and it's a dilemma either to update salmon from 0.8.1 (pretty old buggy version) to the latest one (0.11.3) and downgrade a bunch of other important packages, or vice versa. **Describe the bug**; a bug is a species of animal kingdom, a small insect (just kidding). **To Reproduce**; Steps and data to reproduce the behavior:; ```; $ conda update salmon; Solving environment: done. ## Package Plan ##. environment location: /home/software/anaconda2. added / updated specs: ; - salmon. The following packages will be downloaded:. package | build; ---------------------------|-----------------; salmon-0.11.3 | h86b0361_2 2.9 MB bioconda; blas-1.0 | mkl 6 KB; numpy-1.14.3 | py27h28100ab_1 41 KB; ------------------------------------------------------------; Total: 3.0 MB. The following packages will be UPDATED:. jemalloc: 4.5.0-0 bioconda --> 5.1.0-hfc679d8_0 conda-forge; libgcc-ng: 7.2.0-hdf63c60_3 conda-forge --> 8.2.0-hdf63c60_1 ; libstdcxx-ng: 7.2.0-hdf63c60_3 conda-forge --> 8.2.0-hdf63c60_1 ; salmon: 0.8.1-0 bioconda --> 0.11.3-h86b0361_2 bioconda . The following packages will be DOWNGRADED:. blas: 1.1-openblas conda-forge --> 1.0-mkl ; fastqc: 0.11.7-5 bioconda --> 0.11.6-2 bioconda ; gsl: 2.4-blas_openblash47a8a8e_1 conda-forge [blas_openblas] --> 2.1-2 conda-forge; numpy: 1.15.1-py27_blas_openblashd3ea46f_1 conda-forge [blas_openblas] --> 1.14.3-py27h28100ab_1 ; openjdk: 8.0.144-zulu8.23.0.3_2 conda-forge --> 8.0.121-1 ; scikit-learn: 0.19.2-py27_blas_openblasha84fab4_201 conda-forge [blas_openblas] --> 0.19.1-py27hedc7406_0 ; scipy: 1.1.0-py27_blas_openblash7943236_201 conda-forge [blas_openblas] --> 1.1.0-py27hd20e5f9_0; ```. **Expected behavior**; salmon should be updated to the latest version without the requirement of d",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/286:195,bottleneck,bottleneck,195,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/286,1,['bottleneck'],['bottleneck']
Performance,"ols from salmon...done.; (gdb) r; Starting program: /home/common/modules/el8/x86_64/software/salmon/1.2.1-CentOS-vanilla/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-72.el8_1.1.x86_64; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:3026,Load,Loadable,3026,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Load'],['Loadable']
Performance,"ome a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivalence classes . [2023-03-17 07:46:19.488] [jointLog] [warning] 0.22783% of fragments were shorter than the k used to build the index (31).; If this fraction is too large, consider re-building the index with a smaller k.; The minimum read size found was 20. [2023-03-17 07:46:19.488] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings : 0; [2023-03-17 07:46:19.488] [jointLog] [info] Mapping rate = 80.5964%. [2023-03-17 07:46:19.488] [jointLog] [info] finished quantifyLibrary(",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:8102,load,loading,8102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['load'],['loading']
Performance,"ompatibility prior below threshold. Incompatible fragments will be ignored.; > [2020-06-04 17:55:11.700] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; > [2020-06-04 17:55:11.700] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; > [2020-06-04 17:55:11.700] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter. Disabling range-factorized equivalence classes. ; > [2020-06-04 17:55:11.700] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; > [2020-06-04 17:55:11.700] [jointLog] [info] Using default value of 0.797619 for minScoreFraction in Alevin; > Using default value of 0.6 for consensusSlack in Alevin; > [2020-06-04 17:56:30.294] [jointLog] [info] There is 1 library.; > [2020-06-04 17:56:30.355] [jointLog] [info] Loading pufferfish index; > [2020-06-04 17:56:30.355] [jointLog] [info] Loading dense pufferfish index.; > [2020-06-04 17:56:30.355] [jointLog] [info] done; > [2020-06-04 17:56:30.355] [jointLog] [info] Index contained 64 targets; > [2020-06-04 17:56:30.355] [jointLog] [info] Number of decoys : 0; > [2020-06-04 17:57:36.305] [jointLog] [info] Computed 64 rich equivalence classes for further processing; > [2020-06-04 17:57:36.305] [jointLog] [info] Counted 39,818 total reads in the equivalence classes ; > [2020-06-04 17:57:36.305] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; > [2020-06-04 17:57:36.305] [jointLog] [warning] Found 1354 reads with `N` in the UMI sequence and ignored the reads.; > Please report on github if this number is too large; > [2020-06-04 17:57:36.305] [jointLog] [info] Mapping rate = 0.0762793%; > ; > [2020-06-04 17:57:36.305] [jointLog] [info] finished quantifyLibrary()",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639196415:3884,Load,Loading,3884,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639196415,2,['Load'],['Loading']
Performance,"ompiled binary on the 64-bit index (this is a small read set from single-cell data, which is why the total # of reads is so small). ```; rob@feynman:/mnt/scratch3/rob/JoshTest$ ~/SoftwareStaging/salmon/scripts/SalmonBeta-0.6.5-pre_CentOS5/bin/salmon quant -p 15 -i salmon_index -l IU -1 ../strange_peak/19232_1_1.fastq -2 ../strange_peak/19232_1_2.fastq -o quant_binary; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ threads ] => { 15 }; # [ index ] => { salmon_index }; # [ libType ] => { IU }; # [ mates1 ] => { ../strange_peak/19232_1_1.fastq }; # [ mates2 ] => { ../strange_peak/19232_1_2.fastq }; # [ output ] => { quant_binary }; Logs will be written to quant_binary/logs; there is 1[2016-03-31 14:05:14.184] [jointLog] [info] parsing read library format; lib; Loading 64-bit quasi index[2016-03-31 14:05:14.266] [stderrLog] [info] Loading Suffix Array; [2016-03-31 14:05:14.266] [jointLog] [info] Loading Quasi index. [2016-03-31 14:07:58.647] [stderrLog] [info] Loading Transcript Info; [2016-03-31 14:08:59.703] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-03-31 14:09:06.744] [stderrLog] [info] There were 2027284 set bits in the bit array; [2016-03-31 14:09:08.123] [stderrLog] [info] Computing transcript lengths; [2016-03-31 14:09:08.240] [stderrLog] [info] Waiting to finish loading hash; Index contained 2027284 targets; [2016-03-31 14:09:15.789] [jointLog] [info] done; [2016-03-31 14:09:15.786] [stderrLog] [info] Successfully loaded position hash; [2016-03-31 14:09:15.789] [stderrLog] [info] Done loading index. [2016-03-31 14:09:36.623] [jointLog] [info] Computed 8083 rich equivalence classes for further processing; [2016-03-31 14:09:36.623] [jointLog] [info] Counted 159824 total reads in the equivalence classes. [2016-03-31 14:13:24.480] [jointLog] [warning] Only 159824 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective le",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023:1180,Load,Loading,1180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204066023,1,['Load'],['Loading']
Performance,"on = 900 | max rel diff. = 0.0146915; [2016-01-02 20:23:59.212] [jointLog] [info] iteration 1000, recomputing effective lengths; [2016-01-02 20:24:01.395] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0147088; [2016-01-02 20:24:01.837] [jointLog] [info] iteration = 1100 | max rel diff. = 0.021175; [2016-01-02 20:24:02.193] [jointLog] [info] iteration = 1200 | max rel diff. = 0.01904; [2016-01-02 20:24:02.572] [jointLog] [info] iteration = 1300 | max rel diff. = 0.0187047; [2016-01-02 20:24:02.972] [jointLog] [info] iteration = 1400 | max rel diff. = 0.0213549; [2016-01-02 20:24:03.360] [jointLog] [info] iteration = 1500 | max rel diff. = 0.0311727; [2016-01-02 20:24:03.745] [jointLog] [info] iteration = 1600 | max rel diff. = 0.0100658; [2016-01-02 20:24:04.141] [jointLog] [info] iteration = 1700 | max rel diff. = 0.0100679; [2016-01-02 20:24:04.536] [jointLog] [info] iteration = 1800 | max rel diff. = 0.0100686; [2016-01-02 20:24:04.642] [jointLog] [info] iteration = 1827 | max rel diff. = 0.00921912; [2016-01-02 20:24:04.646] [jointLog] [info] Finished optimizer; [2016-01-02 20:24:04.646] [jointLog] [info] writing output. Computing gene-level abundance estimates; [2016-01-02 20:24:04.882] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done; Segmentation fault (core dumped); [vale@ebi-003 mouse]$; ```. (I also tried the command in the NSF directory to write to /tmp/SRP057125_SRS936134_salmon_out, but that also segfaults)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:11049,optimiz,optimizer,11049,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['optimiz'],['optimizer']
Performance,"on Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counted 10033689 total reads in the equivalence classes; [2016-01-02 20:23:49.875] [jointLog] [in",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:7675,Load,Loading,7675,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,"on creates the appropriate offset for you to perform gene-level differential expression; - The second method is to use the tximport argument countsFromAbundance=""lengthScaledTPM"" or ""scaledTPM"", and then to use the gene-level count matrix txi$counts directly as you would a regular count matrix with these software. Let‚Äôs call this method ‚Äúbias corrected counts without an offset‚Äù. Now, if I were to use the 2nd bullet as guide, shouldn't txi be generated this way for use with DESeq -- see the addition of `countsFromAbundance = ""lengthScaledTPM""` to tximport line. ```; files <- file.path(dir, ""salmon"", samples$run, ""quant.sf.gz""); names(files) <- paste0(""sample"", 1:6); txi.salmon <- tximport(files, type = ""salmon"", tx2gene = tx2gene, countsFromAbundance = ""lengthScaledTPM""); head(txi.salmon$counts); write.csv(as.data.frame(txi.salmon$counts), file = ""tx2gene_NumReads.csv""); ```. And then use the tx2gene_NumReads.csv with DESeqDataSetFromMatrix, where the countData comes after reading in tx2gene_NumReads.csv upstream in the code. **Note**: I am using DESeqDataSetFromMatrix here and not DESeqDataSetFromTximport as I have used tximport with countsFromAbundance=lengthScaledTPM. ```; library(""DESeq2""); dds <- DESeqDataSetFromMatrix(countData = cts,; colData = coldata,; design = ~ condition); dds; ```. I also saw these 2 links - https://hbctraining.github.io/DGE_workshop_salmon/lessons/07_DGE_summarizing_workflow.html and https://hbctraining.github.io/DGE_workshop_salmon/lessons/01_DGE_setup_and_overview.html. - pseudocounts generated by Salmon are represented as normalized TPM (transcripts per million) counts and map to transcripts. These need to be converted into non-normalized count estimates for performing DESeq2 analysis. To use DESeq2 we also need to collapse our abundance estimates from the transcript level to the gene-level.; - note - the 1st link uses DESeqDataSetFromTximport after using tximport to get txi with countsFromAbundance=lengthScaledTPM. Thanks in advance,",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581:3655,perform,performing,3655,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581,1,['perform'],['performing']
Performance,"on skipping it; [2018-06-30 22:10:52.498] [alevinLog] [info] Learned InvCov: 457.073 normfactor: 260.286; [2018-06-30 22:10:52.498] [alevinLog] [info] Total 10434(has 987 low confidence) barcodes; [2018-06-30 22:10:52.530] [alevinLog] [info] Done True Barcode Sampling; [2018-06-30 22:10:53.101] [alevinLog] [info] Done populating Z matrix; [2018-06-30 22:10:53.103] [alevinLog] [info] Done indexing Barcodes; [2018-06-30 22:10:53.104] [alevinLog] [info] Total Unique barcodes found: 263650; [2018-06-30 22:10:53.104] [alevinLog] [info] Used Barcodes except Whitelist: 5556; [2018-06-30 22:10:53.248] [jointLog] [info] There is 1 library.; [2018-06-30 22:10:53.248] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-06-30 22:10:53.248] [alevinLog] [info] parsing read library format; [2018-06-30 22:10:53.308] [jointLog] [info] Loading Quasi index; [2018-06-30 22:10:53.308] [jointLog] [info] Loading 32-bit quasi index; [2018-06-30 22:10:53.308] [stderrLog] [info] Loading Suffix Array; [2018-06-30 22:10:53.375] [stderrLog] [info] Loading Transcript Info; [2018-06-30 22:10:53.396] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-06-30 22:10:53.402] [stderrLog] [info] There were 36541 set bits in the bit array; [2018-06-30 22:10:53.405] [stderrLog] [info] Computing transcript lengths; [2018-06-30 22:10:53.405] [stderrLog] [info] Waiting to finish loading hash; [2018-06-30 22:10:54.783] [stderrLog] [info] Done loading index; [2018-06-30 22:10:54.783] [jointLog] [info] done; [2018-06-30 22:10:54.783] [jointLog] [info] Index contained 36541 targets. processed 17 Million fragments; hits: 18237834, hits per frag: 1.04278[2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.50% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.14% zero probability fragments; [2018-06-30 22:12:13.116] [jointLog] [info] Thread saw mini-batch with a maximum of 10.30% zero probabi",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245:2687,Load,Loading,2687,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245,1,['Load'],['Loading']
Performance,"on-quant"" \; -g ""$path_dr_gtf"" \; -l ""U"" \; -p 1 \; --fldMax 50 \; --fldMean 43 \; --seqBias \; --numBootstraps 10 \; -r <(zcat $1); ```. <details>; <summary>Std out</summary>. ```; Logs will be written to 142-salmon-quant/logs; [2017-08-02 14:41:28.018] [jointLog] [info] parsing read library format; [2017-08-02 14:41:28.018] [jointLog] [info] There is 1 library.; [2017-08-02 14:41:28.190] [jointLog] [info] Loading Quasi index; [2017-08-02 14:41:28.254] [jointLog] [info] Loading 32-bit quasi index; [2017-08-02 14:41:28.286] [stderrLog] [info] Loading Suffix Array; [2017-08-02 14:41:36.196] [stderrLog] [info] Loading Transcript Info; [2017-08-02 14:41:38.296] [stderrLog] [info] Loading Rank-Select Bit Array; [2017-08-02 14:41:38.631] [stderrLog] [info] There were 51378 set bits in the bit array; [2017-08-02 14:41:38.676] [stderrLog] [info] Computing transcript lengths; [2017-08-02 14:41:38.676] [stderrLog] [info] Waiting to finish loading hash; [2017-08-02 14:41:42.951] [stderrLog] [info] Done loading index. [2017-08-02 14:41:42.951] [jointLog] [info] done; [2017-08-02 14:41:42.951] [jointLog] [info] Index contained 51378 targets. [2017-08-02 14:41:46.428] [jointLog] [info] Computed 10524 rich equivalence classes for further processing; [2017-08-02 14:41:46.428] [jointLog] [info] Counted 98301 total reads in the equivalence classes; [2017-08-02 14:41:46.432] [jointLog] [warning] Only 98301 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2017-08-02 14:41:46.432] [jointLog] [info] Mapping rate = 42.6252%. [2017-08-02 14:41:46.432] [jointLog] [info] finished quantifyLibrary(); [2017-08-02 14:41:46.446] [jointLog] [info] Starting optimizer; [2017-08-02 14:41:46.508] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2017-08-02 14:41:46.510] [jointLog] [info] iteration = 0 | max rel diff. = 2.50175; [2017-08-02 14:41:46.521] [jointLog] [info] iteratio",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144:1664,load,loading,1664,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144,1,['load'],['loading']
Performance,"on/io.py"", line 88, in decorated; return f(*args, **kwds); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 463, in _collect_all_metadata; index, r = self._prepare(prepared_specs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 1058, in _prepare; reduced_index = get_reduced_index(self.prefix, self.channels,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/index.py"", line 288, in get_reduced_index; new_records = SubdirData.query_all(spec, channels=channels, subdirs=subdirs,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 140, in query_all; result = tuple(concat(executor.map(subdir_query, channel_urls))); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 609, in result_iterator; yield fs.pop().result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 446, in result; return self.__get_result(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/_base.py"", line 391, in __get_result; raise self._exception; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 132, in <lambda>; subdir_query = lambda url: tuple(SubdirData(Channel(url), repodata_fn=repodata_fn).query(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 145, in query; self.load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 210, in load; _internal_state = self._load(); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/subdir_data.py"", line 375, in _load; raw_repodata_str = fetch_repodata_remote_req",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:2743,concurren,concurrent,2743,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['concurren'],['concurrent']
Performance,"on/mouse_cdna38.78_repbase_ercc_index_gene_map.txt \; > --biasCorrect \; > --useFSPD; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/quasi/mouse_cdna_38.p3.78_repbase_ercc.fa }; # [ libType ] => { IU }; # [ mates1 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq }; # [ mates2 ] => { /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq }; # [ output ] => { SRP057125_SRS936134_salmon_out }; # [ geneMap ] => { /nfs/research2/teichmann/reference/mus-musculus/salmon/mouse_cdna38.78_repbase_ercc_index_gene_map.txt }; # [ biasCorrect ] => { }; # [ useFSPD ] => { }; Logs will be written to SRP057125_SRS936134_salmon_out/logs; [2016-01-02 20:22:59.800] [jointLog] [info] parsing read library format; there is 1 lib; Loading 32-bit quasi index[2016-01-02 20:23:00.830] [stderrLog] [info] Loading Suffix Array; [2016-01-02 20:23:00.830] [stderrLog] [info] Loading Position Hash; [2016-01-02 20:23:00.829] [jointLog] [info] Loading Quasi index; [2016-01-02 20:23:03.751] [stderrLog] [info] Loading Transcript Info; [2016-01-02 20:23:04.776] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-02 20:23:05.009] [stderrLog] [info] There were 104534 set bits in the bit array; [2016-01-02 20:23:05.325] [stderrLog] [info] Computing transcript lengths; [2016-01-02 20:23:05.325] [stderrLog] [info] Waiting to finish loading hash; Index contained 104534 targets; [2016-01-02 20:23:16.571] [stderrLog] [info] Done loading index; [2016-01-02 20:23:16.571] [jointLog] [info] done. processed 12000001 fragments; hits: 24367128, hits per frag: 2.04044. [2016-01-02 20:23:49.850] [jointLog] [info] Computed 102251 rich equivalence classes for further processing; [2016-01-02 20:23:49.850] [jointLog] [info] Counte",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:7604,Load,Loading,7604,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['Load'],['Loading']
Performance,onvenience.; ###; ### salmon (mapping-based) v0.9.1; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { ./index }; ### [ libType ] => { U }; ### [ unmatedReads ] => { ./single.fastq }; ### [ output ] => { ./output }; ### [ allowOrphansFMD ] => { }; ### [ threads ] => { 16 }; ### [ incompatPrior ] => { 1e-20 }; ### [ biasSpeedSamp ] => { 1 }; ### [ fldMax ] => { 1000 }; ### [ fldMean ] => { 200 }; ### [ fldSD ] => { 80 }; ### [ forgettingFactor ] => { 0.65 }; ### [ maxOcc ] => { 200 }; ### [ maxReadOcc ] => { 100 }; ### [ numBiasSamples ] => { 2000000 }; ### [ numAuxModelSamples ] => { 5000000 }; ### [ numPreAuxModelSamples ] => { 1000000 }; ### [ numGibbsSamples ] => { 0 }; ### [ numBootstraps ] => { 0 }; ### [ vbPrior ] => { 0.001 }; Logs will be written to ./output/logs; [2018-08-16 19:47:14.418] [jointLog] [info] parsing read library format; [2018-08-16 19:47:14.418] [jointLog] [info] There is 1 library.; [2018-08-16 19:47:14.460] [stderrLog] [info] Loading Suffix Array ; [2018-08-16 19:47:14.459] [jointLog] [info] Loading Quasi index; [2018-08-16 19:47:14.459] [jointLog] [info] Loading 32-bit quasi index; [2018-08-16 19:47:15.044] [stderrLog] [info] Loading Transcript Info ; [2018-08-16 19:47:15.207] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-16 19:47:15.263] [stderrLog] [info] There were 173531 set bits in the bit array; [2018-08-16 19:47:15.285] [stderrLog] [info] Computing transcript lengths; [2018-08-16 19:47:15.285] [stderrLog] [info] Waiting to finish loading hash; [2018-08-16 19:47:20.808] [jointLog] [info] done; [2018-08-16 19:47:20.808] [jointLog] [info] Index contained 173531 targets; [2018-08-16 19:47:20.808] [stderrLog] [info] Done loading index. [A. [32mprocessed[31m 500002 [32mfragments[0m; hits: 2213374; hits per frag: 5.08859[A. [32mprocessed[31m 1000002 [32mfragments[0m; hits: 4422312; hits per frag: 4.78092[A. [32mprocessed[31m 1500006 [32mfragments[0m; hits: 6635818; hits per frag: 4.69843,MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271:24047,Load,Loading,24047,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271,1,['Load'],['Loading']
Performance,"or below threshold. Incompatible fragments will be ignored.; [2023-03-17 07:40:15.733] [jointLog] [warning] . NOTE: It appears you are running salmon without the `--validateMappings` option.; Mapping validation can generally improve both the sensitivity and specificity of mapping,; with only a moderate increase in use of computational resources. ; Mapping validation is planned to become a default option (i.e. turned on by default) in; the next release of salmon.; Unless there is a specific reason to do this (e.g. testing on clean simulated data),; `--validateMappings` is generally recommended. [2023-03-17 07:40:15.733] [jointLog] [info] parsing read library format; [2023-03-17 07:40:15.733] [jointLog] [info] There is 1 library.; [2023-03-17 07:40:15.882] [jointLog] [info] Loading Quasi index; [2023-03-17 07:40:15.882] [jointLog] [info] Loading 64-bit quasi index; [2023-03-17 07:40:15.882] [stderrLog] [info] Loading Suffix Array ; [2023-03-17 07:42:06.971] [stderrLog] [info] Loading Transcript Info ; [2023-03-17 07:42:17.580] [stderrLog] [info] Loading Rank-Select Bit Array; [2023-03-17 07:42:20.101] [stderrLog] [info] There were 777288 set bits in the bit array; [2023-03-17 07:42:20.887] [stderrLog] [info] Computing transcript lengths; [2023-03-17 07:42:20.892] [stderrLog] [info] Waiting to finish loading hash; [2023-03-17 07:44:44.131] [stderrLog] [info] Done loading index; [2023-03-17 07:44:44.131] [jointLog] [info] done; [2023-03-17 07:44:44.131] [jointLog] [info] Index contained 777288 targets. processed 40500000 fragmentsointLog] [info] Automatically detected most likely library type as U; hits: 157805072; hits per frag: 3.96148. [2023-03-17 07:46:19.284] [jointLog] [info] Computed 1819655 rich equivalence classes for further processing; [2023-03-17 07:46:19.284] [jointLog] [info] Counted 32670107 total reads in the equivalence classes . [2023-03-17 07:46:19.488] [jointLog] [warning] 0.22783% of fragments were shorter than the k used to build the index (31).; If",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/838:7708,Load,Loading,7708,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/838,1,['Load'],['Loading']
Performance,"or**; I expected the project to build and produce a binary I could use to test my changes. **Desktop (please complete the following information):**; - OS: Ubuntu 18.04; - Version:. ```; lsb_release -a; No LSB modules are available.; Distributor ID:	Ubuntu; Description:	Ubuntu 18.04.2 LTS; Release:	18.04; Codename:	bionic; kurt@kurtputer:~/Development/refinebio-collab$ uname -a; Linux kurtputer 4.15.0-51-generic #55-Ubuntu SMP Wed May 15 14:27:21 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux; ```. **Additional context**; I was able to fix the following errors with these resolutions:; ```; ERROR:; CMake Error: The following variables are used in this project, but they are set to NOTFOUND.; Please set them or make sure they are set and tested correctly in the CMake files:; CURL_LIBRARY; linked by target ""salmon"" in directory /home/kurt/Development/salmon/src; linked by target ""unitTests"" in directory /home/kurt/Development/salmon/src; RESOLUTION:; sudo apt-get install libcurl4-openssl-dev; ----------------------------------; ERROR:; Performing download step for 'libbz2'; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 227 100 227 0 0 1013 0 --:--:-- --:--:-- --:--:-- 1013; 100 16207 0 16207 0 0 34336 0 --:--:-- --:--:-- --:--:-- 166k; bzip2-1.0.6.tar.gz: FAILED; sha256sum: WARNING: 1 computed checksum did NOT match; bzip2-1.0.6.tar.gz did not match expected SHA256! Exiting.; CMakeFiles/libbz2.dir/build.make:89: recipe for target 'libbz2-prefix/src/libbz2-stamp/libbz2-download' failed; make[2]: *** [libbz2-prefix/src/libbz2-stamp/libbz2-download] Error 1; CMakeFiles/Makefile2:183: recipe for target 'CMakeFiles/libbz2.dir/all' failed; make[1]: *** [CMakeFiles/libbz2.dir/all] Error 2; Makefile:162: recipe for target 'all' failed; make: *** [all] Error 2; RESOLUTION:; modifying build.make to pull from sourceforge instead of bzip.org; -----------------------------------------------------------; ERROR:; libtool: compile: /us",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/383:3598,Perform,Performing,3598,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/383,1,['Perform'],['Performing']
Performance,"oss samples.; . **Screenshots**; If applicable, add screenshots or terminal output to help explain your problem. ### For version 0.8. This is similar across all samples:; Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250 28.8836 527.392; LOC_Os01g01010.2 2218 250 1.84062 33.6083; LOC_Os01g01019.1 1127 250 0.0547668 1; LOC_Os01g01030.1 2464 250 4.43611 81; LOC_Os01g01040.4 1524 250 0.941635 17.1935; LOC_Os01g01040.1 2508 250 11.5632 211.135; LOC_Os01g01040.2 2482 250 8.02081 146.454; LOC_Os01g01040.3 2583 250 8.55554 156.218; LOC_Os01g01050.1 2039 250 17.2333 314.667. ### The counted total reads, observed total fragments, and the mapping rate is similar for all samples for both the raw-dat and the trimmed reads.; [2019-03-03 06:29:53.168] [jointLog] [info] parsing read library format; [2019-03-03 06:29:53.168] [jointLog] [info] There is 1 library.; [2019-03-03 06:29:53.224] [jointLog] [info] Loading Quasi index; [2019-03-03 06:29:53.224] [jointLog] [info] Loading 32-bit quasi index; [2019-03-03 06:30:02.239] [jointLog] [info] done; [2019-03-03 06:30:02.239] [jointLog] [info] Index contained 66153 targets; [2019-03-03 06:30:03.414] [jointLog] [info] Automatically detected most likely library type as MU; [2019-03-03 06:31:37.523] [fileLog] [info]; At end of round 0; ==================; Observed 18861231 total fragments (18861231 in most recent round). [2019-03-03 06:31:37.522] [jointLog] [info] Computed 48502 rich equivalence classes for further processing; [2019-03-03 06:31:37.522] [jointLog] [info] Counted 17308442 total reads in the equivalence classes; [2019-03-03 06:31:37.528] [jointLog] [info] Mapping rate = 91.7673%. [2019-03-03 06:31:37.528] [jointLog] [info] finished quantifyLibrary(). ### For version 0.12. This is similar across all samples:. Name Length EffectiveLength TPM NumReads; LOC_Os01g01010.1 3017 250.000 30.539503 527.399; LOC_Os01g01010.2 2218 250.000 1.714089 29.601; LOC_Os01g01019.1 1127 250.000 0.057906 1.000; LOC_Os01g01030.1 2",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/346:6076,Load,Loading,6076,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/346,1,['Load'],['Loading']
Performance,"otal Unique barcodes found: 125401; [2019-01-29 09:56:53.255] [alevinLog] [info] Used Barcodes except Whitelist: 1256; [2019-01-29 09:56:53.281] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-01-29 09:56:53.281] [alevinLog] [info] parsing read library format; [2019-01-29 09:56:53.412] [stderrLog] [info] Loading Suffix Array ; [2019-01-29 09:56:53.281] [jointLog] [info] There is 1 library.; [2019-01-29 09:56:53.410] [jointLog] [info] Loading Quasi index; [2019-01-29 09:56:53.411] [jointLog] [info] Loading 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence classes ; [2019-01-29 09:57:36.601] [jointLog] [warning] Only 242520 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2019-01-29 09:57:36.601] [jointLog] [info] Mapping rate = 8.94141%. [2019-01-29 09:57:36.601] [jointLog] [info] finished quantifyLibrary(). Analyzed 293 cells (100% of all).; [2019-01-29 09:57:40.090] [alevinLog] [info] Total 206902 UMI after deduplicating.; [2019-01-29 09:57:40.091] [alevinLog] [warning] S",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:8810,load,loading,8810,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['load'],['loading']
Performance,"otal Unique barcodes found: 215368; [2018-08-29 11:28:19.437] [alevinLog] [info] Used Barcodes except Whitelist: 8563; [2018-08-29 11:28:19.464] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-08-29 11:28:19.477] [alevinLog] [info] parsing read library format; [2018-08-29 11:28:19.477] [jointLog] [info] There is 1 library.; [2018-08-29 11:28:27.306] [stderrLog] [info] Loading Suffix Array ; [2018-08-29 11:28:27.290] [jointLog] [info] Loading Quasi index; [2018-08-29 11:28:27.304] [jointLog] [info] Loading 32-bit quasi index; [2018-08-29 11:29:47.334] [stderrLog] [info] Loading Transcript Info ; [2018-08-29 11:30:08.761] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-08-29 11:30:11.254] [stderrLog] [info] There were 135226 set bits in the bit array; [2018-08-29 11:30:11.311] [stderrLog] [info] Computing transcript lengths; [2018-08-29 11:30:11.311] [stderrLog] [info] Waiting to finish loading hash; [2018-08-29 11:30:57.209] [stderrLog] [info] Done loading index; [2018-08-29 11:30:57.209] [jointLog] [info] done; [2018-08-29 11:30:57.209] [jointLog] [info] Index contained 135226 targets. processed 2 Million fragments; processed 18 Million fragments 2.38179; hits: 42509133, hits per frag: 2.29867. [2018-08-29 11:33:18.039] [jointLog] [info] Computed 59040 rich equivalence classes for further processing; [2018-08-29 11:33:18.039] [jointLog] [info] Counted 8158322 total reads in the equivalence classes ; [2018-08-29 11:33:18.039] [jointLog] [warning] Found 187 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-08-29 11:33:18.039] [jointLog] [info] Mapping rate = 43.5974%. [2018-08-29 11:33:18.039] [jointLog] [info] finished quantifyLibrary(); Analyzed 14 cells (0% of all).vinLog] [info] Starting optimizer; ......; ......; Analyzed 544 cells (16% of all). ERROR: cell doesn't have any read count; ------------------------------------------------------------; Sender: LSF Syst",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281:3893,load,loading,3893,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281,1,['load'],['loading']
Performance,"otal Unique barcodes found: 3773873; [2018-11-29 22:28:17.434] [alevinLog] [info] Used Barcodes except Whitelist: 49866; [2018-11-29 22:28:18.184] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2018-11-29 22:28:18.184] [alevinLog] [info] parsing read library format; [2018-11-29 22:28:18.184] [jointLog] [info] There is 1 library.; [2018-11-29 22:28:18.324] [jointLog] [info] Loading Quasi index; [2018-11-29 22:28:18.325] [jointLog] [info] Loading 32-bit quasi index; [2018-11-29 22:28:18.325] [stderrLog] [info] Loading Suffix Array; [2018-11-29 22:28:19.339] [stderrLog] [info] Loading Transcript Info; [2018-11-29 22:28:19.536] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-29 22:28:19.554] [stderrLog] [info] There were 64,431 set bits in the bit array; [2018-11-29 22:28:19.561] [stderrLog] [info] Computing transcript lengths; [2018-11-29 22:28:19.561] [stderrLog] [info] Waiting to finish loading hash; [2018-11-29 22:28:23.502] [stderrLog] [info] Done loading index; [2018-11-29 22:28:23.502] [jointLog] [info] done; [2018-11-29 22:28:23.502] [jointLog] [info] Index contained 64,431 targets. processed 178 Million fragments; hits: 212754413, hits per frag: 1.19535. [2018-11-29 22:40:56.510] [jointLog] [info] Computed 110,023 rich equivalence classes for further processing; [2018-11-29 22:40:56.510] [jointLog] [info] Counted 95,071,703 total reads in the equivalence classes; [2018-11-29 22:40:56.510] [jointLog] [info] Mapping rate = 53.3587%. [2018-11-29 22:40:56.510] [jointLog] [info] finished quantifyLibrary(); [2018-11-29 22:41:01.682] [alevinLog] [info] Starting optimizer. Analyzed 12346 cells (100% of all).; Skipped Barcodes are from High Confidence Region; Should not happen%. **Desktop (please complete the following information):**; - OS: macOS; - Version: 10.14.1. **Additional context**; This failure comes when analyzing data from the new 10X v3 chemistry. Initially, I thought that was the issue, but our analysis worked when using th",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324:2723,load,loading,2723,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324,1,['load'],['loading']
Performance,"otal Unique barcodes found: 561683; [2019-06-23 18:11:52.507] [alevinLog] [info] Used Barcodes except Whitelist: 104; [2019-06-23 18:11:53.211] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-23 18:11:53.224] [alevinLog] [info] parsing read library format; [2019-06-23 18:11:53.484] [stderrLog] [info] Loading Suffix Array ; [2019-06-23 18:11:53.225] [jointLog] [info] There is 1 library.; [2019-06-23 18:11:53.482] [jointLog] [info] Loading Quasi index; [2019-06-23 18:11:53.483] [jointLog] [info] Loading 32-bit quasi index; [2019-06-23 18:11:56.286] [stderrLog] [info] Loading Transcript Info ; [2019-06-23 18:11:57.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-23 18:11:57.409] [stderrLog] [info] There were 184,367 set bits in the bit array; [2019-06-23 18:11:57.434] [stderrLog] [info] Computing transcript lengths; [2019-06-23 18:11:57.434] [stderrLog] [info] Waiting to finish loading hash; [2019-06-23 18:12:09.374] [stderrLog] [info] Done loading index; [2019-06-23 18:12:09.374] [jointLog] [info] done; [2019-06-23 18:12:09.374] [jointLog] [info] Index contained 184,367 targets. processed 0 Million fragments; processed 1 Million fragments; processed 1 Million fragments; ...; processed 106 Million fragments; processed 106 Million fragments; processed 107 Million fragments; hits: 26644540, hits per frag: 0.249194. [2019-06-23 18:14:43.418] [jointLog] [info] Computed 90,673 rich equivalence classes for further processing; [2019-06-23 18:14:43.418] [jointLog] [info] Counted 5,043,781 total reads in the equivalence classes ; [2019-06-23 18:14:43.419] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2019-06-23 18:14:43.419] [jointLog] [warning] Found 494 reads with `N` in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2019-06-23 18:14:43.419] [jointLog] [info] Mapping rate = 4.69856%. [2019-06-23 18:14:43.419] [jointLog] [info] finished qua",MatchSource.ISSUE,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386:5678,load,loading,5678,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386,1,['load'],['loading']
Performance,"ounted 12227080 total reads in the equivalence classes; [2016-12-15 16:01:44.948] [jointLog] [info] Mapping rate = 72.5194%. [2016-12-15 16:01:44.948] [jointLog] [info] finished quantifyLibrary(); [2016-12-15 16:01:44.949] [jointLog] [info] Starting optimizer; [2016-12-15 16:01:45.059] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate; [2016-12-15 16:01:45.075] [jointLog] [info] iteration = 0 | max rel diff. = 261.892; [2016-12-15 16:01:45.248] [jointLog] [info] iteration 11, adjusting effective lengths to account for biases; [2016-12-15 16:11:15.738] [jointLog] [info] Computed expected counts (for bias correction); [2016-12-15 16:11:15.739] [jointLog] [info] processed bias for 0.0% of the transcripts; [2016-12-15 16:13:07.074] [jointLog] [info] processed bias for 10.0% of the transcripts; [2016-12-15 16:14:57.019] [jointLog] [info] processed bias for 20.0% of the transcripts; [2016-12-15 16:16:40.365] [jointLog] [info] processed bias for 30.0% of the transcripts; [2016-12-15 16:18:25.798] [jointLog] [info] processed bias for 40.0% of the transcripts; [2016-12-15 16:20:13.944] [jointLog] [info] processed bias for 50.0% of the transcripts; [2016-12-15 16:21:52.350] [jointLog] [info] processed bias for 100.0% of the transcripts; [2016-12-15 16:21:53.854] [jointLog] [info] iteration = 100 | max rel diff. = 0.250674; [2016-12-15 16:22:12.498] [jointLog] [info] iteration = 200 | max rel diff. = 0.251947; [2016-12-15 16:22:14.261] [jointLog] [info] iteration = 300 | max rel diff. = 0.377281; [2016-12-15 16:22:15.769] [jointLog] [info] iteration = 400 | max rel diff. = 0.121203; [2016-12-15 16:22:17.427] [jointLog] [info] iteration = 500 | max rel diff. = 0.0203027; [2016-12-15 16:22:18.761] [jointLog] [info] iteration = 583 | max rel diff. = 0.00813273; [2016-12-15 16:22:18.773] [jointLog] [info] Finished optimizer; [2016-12-15 16:22:18.773] [jointLog] [info] writing output. [2016-12-15 16:22:19.744] [jointLog] [info] Starting Gibbs Sampler 1 week; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196:3999,optimiz,optimizer,3999,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267489196,1,['optimiz'],['optimizer']
