quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"Hi, . I'm trying to run ""cnv_germline_cohort_workflow"" from this workspace (https://app.terra.bio/#workspaces/help-gatk/Germline-CNVs-GATK4), and the workflow is keep failing at the ""CollectCounts"" step with the following error; in multiple shards. --------------------------------------------------------------------------------------------------------------------; A USER ERROR has occurred: Traversal by intervals was requested but some input files are not indexed.; Please index all input files:. samtools index /cromwell_root/dg.4DFC_3615e55e-6aa3-43e7-8d7b-6f2824071971/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam; --------------------------------------------------------------------------------------------------------------------. This was weird since I set a correct index file as an input, but after some investigation, I realized that ; the error seemed to be occurring when the bucket path where BAM index was located was different from that of BAM file ; For example, if you look at this log below, . `Attempting to download gs://gdc-tcga-phs000178-controlled/KIRC/DNA/WXS/BI/ILLUMINA/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam to /cromwell_root/dg.4DFC_3615e55e-6aa3-43e7-8d7b-6f2824071971/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam; Successfully activated service account; Will continue with download. Activated service account credentials for: [kd5mqbpsed8lzz0kyz9tvkht-3274@dcf-prod.iam.gserviceaccount.com]; Download complete!; 2021/09/29 15:46:14 Localizing input drs://dg.4DFC:ab4d57fa-bfff-4a48-bd96-f2866ecfe0e1 -> /cromwell_root/dg.4DFC_ab4d57fa-bfff-4a48-bd96-f2866ecfe0e1/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam.bai; Requester Pays project ID is Some(vanallen-firecloud-nih); Attempting to download gs://gdc-tcga-phs000178-controlled/KIRC/DNA/WXS/BI/ILLUMINA/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam.bai to /cromwell_root/dg.4DFC_ab4d57fa-bfff-4a48-bd96-f2866ecfe0e1/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam.bai; Successfully activated service account; Will continue with download. Activa",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7487:997,log,log,997,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7487,1,['log'],['log']
Testability,"Hi, ; I am experimenting with submitting a PrintReadsSpark job to a yarn spark cluster in AWS. I run the job with the following command. ```; spark-submit --deploy-mode cluster --class org.broadinstitute.hellbender.Main --deploy-mode cluster --master yarn gatk-package-4.alpha.2-248-gcd449bf-SNAPSHOT-spark.jar PrintReadsSpark -I hdfs://chr1.bam -O hdfs://output.bam; ```. I can see from the output files that the job finished successfully, however the cluster tells me that it failed. It shows the following error message:. ```; 17/05/05 06:03:53 INFO ApplicationMaster: Final app status: FAILED, exitCode: 16, (reason: Shutdown hook called before final status was reported.); ```. I believe this may be due to the `System.exit(0)` statement at line 144 in hellbender.Main, though I am not sure. . Here is a more complete snippet from the stderr log. . ```; 17/05/05 06:03:50 INFO FileOutputCommitter: File Output Committer Algorithm version is 1; 17/05/05 06:03:52 WARN DFSClient: Caught exception ; java.lang.InterruptedException; 	at java.lang.Object.wait(Native Method); 	at java.lang.Thread.join(Thread.java:1249); 	at java.lang.Thread.join(Thread.java:1323); 	at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.closeResponder(DFSOutputStream.java:609); 	at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.endBlock(DFSOutputStream.java:370); 	at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.run(DFSOutputStream.java:546); 17/05/05 06:03:52 INFO FileOutputCommitter: Saved output of task 'attempt_20170505060336_0011_r_000001_0' to hdfs://ip-172-30-0-86.ec2.internal:8020/output.bam.parts/_temporary/0/task_20170505060336_0011_r_000001; 17/05/05 06:03:52 INFO Executor: Finished task 1.0 in stage 2.0 (TID 3). 1921 bytes result sent to driver; 17/05/05 06:03:52 INFO TaskSetManager: Finished task 1.0 in stage 2.0 (TID 3) in 10260 ms on localhost (executor driver) (1/4); 17/05/05 06:03:53 INFO FileOutputCommitter: Saved output of task 'attempt_20170505060336_0011_r_000000_0' to ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2666:847,log,log,847,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2666,1,['log'],['log']
Testability,"Hi, ; I am testing GatherBamFiles of gatk-4.1.4.1 and gatk-4.1.2.0:; when I set '--CREATE_INDEX false', the command goes well and the resulted bam could be indexed by samtools, however, when I set '--CREATE_INDEX true', exception printed, such as ""Exception in thread ""BamIndexingThread"" htsjdk.samtools.SAMException: Exception creating BAM index for record A00234:397:HTKTWDSXX:1:1266:22453:5807 2/2 135b aligned to chrM:1-131."". Thus, I think this could be a bug.; By the way, BuildBamIndex also fails to build index for the resulted bam.; With Regards!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6379:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6379,1,['test'],['testing']
Testability,"Hi, ; I have a suggestion that the updated verisons of Mutect2 method [pdfs](https://github.com/broadinstitute/gatk/blob/master/docs/mutect/mutect.pdf) should be kept. ; Of course we can look up from the git history log for what have changed in each edition, but it will be much more straightforward to obtain information from pdf file. Such as, [this picture](https://us.v-cdn.net/5019796/uploads/editor/8d/1rt7qtu6ohp2.png) ; in (this post)[https://gatkforums.broadinstitute.org/gatk/discussion/comment/56644#Comment_56644].; I know it comes from the Mutect2 method old version, but it was no longer here. Xiucz.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6001:216,log,log,216,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6001,1,['log'],['log']
Testability,"Hi, ; This is the command I used:; `gatk GenomicsDBImport \; $tmp \; --genomicsdb-workspace-path /scratch/user/wild_gwas/$genomicsdb/${chr}_$pos \; --intervals $contig \; --batch-size 100`. $tmp is a list of 150 gvcfs. $contig is 100kb window in the genome. ; The OS version is:. > LSB; Version: n/a; Distributor ID: CentOS; Description: CentOS Linux release 7.4.1708 (Core); Release: 7.4.1708; Codename: Core. I'll try to do the tests kgururaj suggests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4124#issuecomment-357001828:430,test,tests,430,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4124#issuecomment-357001828,1,['test'],['tests']
Testability,"Hi, ; When I used the `enable-all-annotations` option to run Mutect2, it failed.; ```; ~/software/gatktools/gatk-4.1.3.0/gatk Mutect2 \; -R ~/database/hg19/gatk_bundle/ucsc.hg19.fasta \; -I sample.recalibrated.bam -tumor sample -L tmp.bed \; --germline-resource ~/af-only-gnomad.raw.sites.hg19.vcf.gz \; -O gatk4p1p3p0.enable-all-annotations.vcf --enable-all-annotations true; ```; Error logs:; ```; ...; 15:52:06.727 INFO Mutect2 - Shutting down engine; [December 12, 2019 3:52:06 PM CST] org.broadinstitute.hellbender.tools.walkers.mutect.Mutect2 done. Elapsed time: 0.17 minutes.; Runtime.totalMemory()=2494038016; org.broadinstitute.hellbender.exceptions.GATKException: Reference coordinate corresponds to a non-existent base in the read. This should never happen -- check read with alignment start: 6257722 and cigar: 5H134M; at org.broadinstitute.hellbender.utils.read.ReadUtils.getReadCoordinateForReferenceCoordinate(ReadUtils.java:830); at org.broadinstitute.hellbender.utils.read.ReadUtils.getReadCoordinateForReferenceCoordinate(ReadUtils.java:761); at org.broadinstitute.hellbender.utils.read.ReadUtils.getReadCoordinateForReferenceCoordinateUpToEndOfRead(ReadUtils.java:679); at org.broadinstitute.hellbender.tools.walkers.annotator.BaseQualityRankSumTest.getReadBaseQuality(BaseQualityRankSumTest.java:43); at org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific.AS_BaseQualityRankSumTest.getElementForRead(AS_BaseQualityRankSumTest.java:57); at org.broadinstitute.hellbender.tools.walkers.annotator.RankSumTest.getElementForRead(RankSumTest.java:108); at org.broadinstitute.hellbender.tools.walkers.annotator.RankSumTest.fillQualsFromLikelihood(RankSumTest.java:86); at org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific.AS_RankSumTest.annotate(AS_RankSumTest.java:47); at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngine.annotateContext(VariantAnnotatorEngine.java:278); at org.broadinstitute.hellbender.tools.walkers.mutec",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6314:388,log,logs,388,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6314,1,['log'],['logs']
Testability,"Hi, ; when i test gatk4 MarkDuplicatesSpark command on yarn cluster, i encountered an issue ""non zero exit code 13"". How can i fix it ? . Here is my command and what i received from the terminal :; ****; gatk MarkDuplicatesSpark -I hdfs://192.168.0.104:9000/user/jacky/NA12878.mapped.illumina.mosaik.CEU.exome.20110411.bam -O hdfs://192.168.0.104:9000/user/jacky/marked_dup.bam -M hdfs://192.168.0.104:9000/user/jacky/marked_dup_metrics.txt -- --spark-runner SPARK --deploy-mode cluster --spark-master yarn; Using GATK jar /home/jacky/Exec/gatk/build/libs/gatk-spark.jar; Running:; /home/jacky/spark/bin/spark-submit --master yarn --conf spark.driver.userClassPathFirst=false --conf spark.io.compression.codec=lzf --conf spark.executor.memoryOverhead=600 --conf spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.kryoserializer.buffer.max=512m --conf spark.driver.maxResultSize=0 --deploy-mode cluster /home/jacky/Exec/gatk/build/libs/gatk-spark.jar MarkDuplicatesSpark -I hdfs://192.168.0.104:9000/user/jacky/NA12878.mapped.illumina.mosaik.CEU.exome.20110411.bam -O hdfs://192.168.0.104:9000/user/jacky/marked_dup.bam -M hdfs://192.168.0.104:9000/user/jacky/marked_dup_metrics.txt --spark-master yarn; 20/10/22 12:02:26 INFO client.RMProxy: Connecting to ResourceManager at /192.168.0.104:8032; 20/10/22 12:02:26 INFO yarn.Client: Requesting a new application from cluster with 2 NodeManagers; 20/10/22 12:02:26 INFO yarn.Client: Verifying our application has not requested more than the maximum memory capability of the cluster (1536 MB per container); 20/10/22 12:02:26 INF",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6906:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6906,1,['test'],['test']
Testability,"Hi, GATK contributors. Thank you for the great software!. I had looked for the answer several days. . Question:; Several samples are new sequenced and `g.vcf` was called using `GATK` with `-ERC GVCF` models.; I want to add this new sample variants into the existing VCF file (no g.vcf avaliable) that downloaded from other researchers.; I have tested some commands like `CombineGVCFs`, `MergeVcfs` but all failed.; Could you give some advices?; Any respone would be helpful. Thanks ~",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7292:344,test,tested,344,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7292,1,['test'],['tested']
Testability,"Hi, I also meet this issue. . The Specificity in `HaplotypeCallerSpark` was a bitter less than local mode in my test. Do you known which configuration can improve the Specificity in `HaplotypeCallerSpark` ? @Atahualkpa",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5323#issuecomment-433815315:112,test,test,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5323#issuecomment-433815315,1,['test'],['test']
Testability,"Hi, I do not recall seeing any of those errors during the GenomicsSBImport phase nor can I find any errors readily logged, although I can recreate the database for Chromosome 3 and tell you for sure if I find any errors logged. I am running GenomicsDBImport on a Linux v3.10.0-1127.19.1.el7.x86_64 amd64 server - and yes, I can rerun a debugged version.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7012#issuecomment-758364641:115,log,logged,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7012#issuecomment-758364641,2,['log'],['logged']
Testability,"Hi, I'm a GATK4 user and I apologize in advance if these questions can be answered in documentation: I could not find answers to these myself. Are releases not made alongside master branch changes? Is the master branch not a stable branch? I am every excited to try GATK with Java 17, however I'm unsure if it's time to test since there is not a release for this pull request. ; I also say this because I'm struggling to get `gradle` to build this on my machine for reasons unrelated to `GATK`, and I'm much more comfortable running an already-built `.jar`.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1457147115:320,test,test,320,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1457147115,1,['test'],['test']
Testability,"Hi, everyone! I'm trying to call mutation with Mutect2 with RNA-seq, and my scripts are given below. I simply use one sample as a test, with a prior knowledge that the mutation in ASXL1(c.1934dupG) can be detected with a pretty high VAF, and I can also see this mutation by using bam file in IGV, but I really wonder why my scripts can not call this mutation before filtering? Thank you so much!!!; ![image](https://github.com/user-attachments/assets/58bfd1be-748e-453c-be0b-d49569e14dd5); gatk Mutect2 \; -R ${ref}.fa \; -I ${sam}/${sam}.BQSR.bam \; -O ${sam}/gatk/${sam}_withpon.vcf \; --create-output-bam-index FALSE \; --af-of-alleles-not-in-resource 0.0000025 \; --create-output-variant-index false \; --germline-resource /home/cuiyiran/data/mtDNA_mutation/reference/somatic-hg38_af-only-gnomad.hg38.vcf \; --panel-of-normals /home/cuiyiran/data/mtDNA_mutation/reference/somatic-hg38_1000g_pon.hg38.vcf. gatk FilterMutectCalls \; -R ${ref}.fa \; -V ${sam}/gatk/${sam}_withpon.vcf \; --create-output-variant-index false \; -O ${sam}/gatk/${sam}_withpon_fv.vcf. bcftools norm -m -both ${sam}/gatk/${sam}_withpon_fv.vcf | bcftools norm -m +both -f ${ref}.fa ${sam}/gatk/${sam}_withpon_fv.vcf -Ov -o ${sam}/gatk/${sam}_withpon_norm.vcf; ####annotation; perl ~/miniconda3/envs/vep/bin/vcf2maf.pl \; --input-vcf ${sam}/gatk/${sam}_withpon_norm.vcf \; --output-maf ${sam}/gatk/${sam}_withpon_vep.maf \; --vep-path ~/miniconda3/envs/vep/bin/ \; --vep-data $vepcache \; --ncbi-build GRCh38 \; --cache-version=112 \; --ref-fasta ${ref}.fa \; --tumor-id ${sam}",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/9021:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/9021,1,['test'],['test']
Testability,"Hi, it is not likely that some mappings to other contigs still remain in the BAM file, as the command I used `samtools view test.bam| cut -f 3 | uniq` check the chromosome entry of all the mapped reads. I actually tried removing the contigs in the header section, and now it works fine. The end of the run looks like:. > 22:45:30.861 INFO ProgressMeter - chr21:48065662 88.1 10112630 114731.5; 22:45:30.976 INFO HaplotypeCaller - 0 read(s) filtered by: MappingQualityReadFilter; 0 read(s) filtered by: MappingQualityAvailableReadFilter; 0 read(s) filtered by: MappedReadFilter; 0 read(s) filtered by: NotSecondaryAlignmentReadFilter; 0 read(s) filtered by: NotDuplicateReadFilter; 0 read(s) filtered by: PassesVendorQualityCheckReadFilter; 0 read(s) filtered by: NonZeroReferenceLengthAlignmentReadFilter; 0 read(s) filtered by: GoodCigarReadFilter; 0 read(s) filtered by: WellformedReadFilter; 0 total reads filtered; 22:45:30.976 INFO ProgressMeter - chr21:48129366 88.1 10112861 114731.7; 22:45:30.976 INFO ProgressMeter - Traversal complete. Processed 10112861 total regions in 88.1 minutes.; 22:45:31.288 INFO VectorLoglessPairHMM - Time spent in setup for JNI call : 0.864119336; 22:45:31.288 INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 115.66789462000001; 22:45:31.288 INFO SmithWatermanAligner - Total compute time in java Smith-Waterman : 90.73 sec; 22:45:31.289 INFO HaplotypeCaller - Shutting down engine; [August 31, 2020 10:45:31 PM CDT] org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCaller done. Elapsed time: 88.19 minutes.; Runtime.totalMemory()=2630352896. And now the header looks like:; ```; @SQ SN:chr1 LN:249250621; @SQ SN:chr2 LN:243199373; @SQ SN:chr3 LN:198022430; @SQ SN:chr4 LN:191154276; @SQ SN:chr5 LN:180915260; @SQ SN:chr6 LN:171115067; @SQ SN:chr7 LN:159138663; @SQ SN:chr8 LN:146364022; @SQ SN:chr9 LN:141213431; @SQ SN:chr10 LN:135534747; @SQ SN:chr11 LN:135006516; @SQ SN:chr12 LN:133851895; @SQ SN:chr13 LN:115169878",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6783#issuecomment-684831011:124,test,test,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6783#issuecomment-684831011,1,['test'],['test']
Testability,"Hi, regarding making --linked-de-bruijn-graph the default, I wanted to share that I had recently run mutect2 (gatkv4.2.6.1) on a larger cohort of samples with that option, some of which had variant calls from a previous mutect2 run (gatkv4.1.0.0) without this option. I noticed that plenty of known cancer drivers (e.g. KRAS p.G12C or PIK3CA p.E545* or BRAF p.V600*) that were present in a substantial number of samples (>10%ish) in the old calls were completely absent in the new calls. I had to add the option --recover-all-dangling-branches to recover those known hotspot mutations. They also all have very sufficient coverage (O(100)x) and high VAF to make them obvious true positives. I'd expect from mutect2 to be always able to call presence or absence of known hotspot mutations, so you should either look into further testing/debugging the linked de Bruijn graph option or also make it a default to recover all dangling branches.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7809#issuecomment-1125355262:827,test,testing,827,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7809#issuecomment-1125355262,1,['test'],['testing']
Testability,"Hi, since there is DOS (Denial of Service) threat for log4j 2.16.0(https://logging.apache.org/log4j/2.x/security.html),; is that possible to update GATK with log4j_2.17.0? Thanks.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7603#issuecomment-998102555:75,log,logging,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7603#issuecomment-998102555,1,['log'],['logging']
Testability,"Hi, thanks for pointing this out.; I actually looked at the SAM file:; ```; samtools view test.bam| cut -f 3 | uniq; chr1; chr2; chr3; chr4; chr5; chr6; chr7; chr8; chr9; chr10; chr11; chr12; chr13; chr14; chr15; chr16; chr17; chr18; chr20; chr19; chr22; chr21; ```; and my reference file:; ```; zcat hg19.fa.gz|grep '>'; >chr1; >chr2; >chr3; >chr4; >chr5; >chr6; >chr7; >chrX; >chr8; >chr9; >chr10; >chr11; >chr12; >chr13; >chr14; >chr15; >chr16; >chr17; >chr18; >chr20; >chrY; >chr19; >chr22; >chr21; >chr6_ssto_hap7; >chr6_mcf_hap5; >chr6_cox_hap2; >chr6_mann_hap4; >chr6_apd_hap1; >chr6_qbl_hap6; >chr6_dbb_hap3; >chr17_ctg5_hap1; >chr4_ctg9_hap1; >chr1_gl000192_random; >chrUn_gl000225; >chr4_gl000194_random; >chr4_gl000193_random; >chr9_gl000200_random; >chrUn_gl000222; >chrUn_gl000212; >chr7_gl000195_random; >chrUn_gl000223; >chrUn_gl000224; >chrUn_gl000219; >chr17_gl000205_random; >chrUn_gl000215; >chrUn_gl000216; >chrUn_gl000217; >chr9_gl000199_random; >chrUn_gl000211; >chrUn_gl000213; >chrUn_gl000220; >chrUn_gl000218; >chr19_gl000209_random; >chrUn_gl000221; >chrUn_gl000214; >chrUn_gl000228; >chrUn_gl000227; >chr1_gl000191_random; >chr19_gl000208_random; >chr9_gl000198_random; >chr17_gl000204_random; >chrUn_gl000233; >chrUn_gl000237; >chrUn_gl000230; >chrUn_gl000242; >chrUn_gl000243; >chrUn_gl000241; >chrUn_gl000236; >chrUn_gl000240; >chr17_gl000206_random; >chrUn_gl000232; >chrUn_gl000234; >chr11_gl000202_random; >chrUn_gl000238; >chrUn_gl000244; >chrUn_gl000248; >chr8_gl000196_random; >chrUn_gl000249; >chrUn_gl000246; >chr17_gl000203_random; >chr8_gl000197_random; >chrUn_gl000245; >chrUn_gl000247; >chr9_gl000201_random; >chrUn_gl000235; >chrUn_gl000239; >chr21_gl000210_random; >chrUn_gl000231; >chrUn_gl000229; >chrM; >chrUn_gl000226; >chr18_gl000207_random; ```; So there is no contig in the SAM file itself that is not included in the reference. But I pre-filtered my SAM file using samtools, but there are some contigs in the header of SAM that does not exist in the",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6783#issuecomment-684119509:90,test,test,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6783#issuecomment-684119509,1,['test'],['test']
Testability,"Hi, there:. I realize that GATK team released plenty of wonderful tutorials, best practice guidances, WDL scripts, etc. However, for users like me, I still prefer some simple and straight-forward BASH scripts that I could easily embed into existing pipelines and fire up. . Below is what I got from Chat-GPT. I tested it and it actually worked magically, processing my fasta.gz files into VCF. Can someone please kindly take a look at this, and let me know if there is some issue with this script?. Thank you very much & best regards,; Jie. ![image](https://github.com/broadinstitute/gatk/assets/26947455/12e2c577-2633-4189-a02c-ec45c677aa50)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8905:311,test,tested,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8905,1,['test'],['tested']
Testability,"Hi,. I am trying to call common and rare germline copy number variants with GATK 4, for more than 100 human samples based on human genome reference: hg19. For this project, I have 500 GB for memory, 10 TB for storage and 300 cpu cores. The program version is as below:. GATK Version: 4.1.2.0; Openjdk Version: 1.8.0_232; Python Version: 3.6.8. I didn't use the WDL way. I just follow the document of Notebook#11684 and build a local pipeline. I split the my project based on Chromosome, including (chr1, chr2, chr3, chr4, chr5, chr6, chr7, chr8, chr9, chr10, chr11, chr12, chr13, chr14, chr15, chr16, chr17, chr18, chr19, chr20, chr21, chr22, chrX, chrY, chrMT). After finish the pipeline, I am testing it with 6 samples. When I separately submit my script for each chromosome, every sub-project goes well: through my Input BAM Files, I can get the corresponding VCF Files (10 cores and 10 GB for each single project). That is to say, the environment of our GATK and Python for germline copy number variants calling should be OK. However, When I submit all the 25 sub-projects (12 cores and 12 GB for each single project) at the same time, I' m **randomly** suffering the two following PythonScriptExecutorException for some of the **random** sub-projects: . .............................................................(BUG 001).......................................................... Traceback (most recent call last):; File ""/tmp/cohort_determine_ploidy_and_depth.3351404099122294482.py"", line 8, in <module>; import gcnvkernel; File ""/usr/local/Anaconda/envs_app/gatk/4.1.2.0/lib/python3.6/site-packages/gcnvkernel/__init__.py"", line 1, in <module>; from pymc3 import __version__ as pymc3_version; File ""/usr/local/Anaconda/envs_app/gatk/4.1.2.0/lib/python3.6/site-packages/pymc3/__init__.py"", line 5, in <module>; from .distributions import *; File ""/usr/local/Anaconda/envs_app/gatk/4.1.2.0/lib/python3.6/site-packages/pymc3/distributions/__init__.py"", line 1, in <module>; from . import times",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6235:695,test,testing,695,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6235,1,['test'],['testing']
Testability,"Hi,. I am trying to test the pathseq tutorial following the tutorial on [this]( https://gatkforums.broadinstitute.org/gatk/discussion/10913/how-to-run-the-pathseq-pipeline ""this"") link. I ran the following commands. bioinfo@bioinfo$ conda activate gatk; (gatk) bioinfo@bioinfo$ gatk PathSeqPipelineSpark \; > --input test_sample.bam \; > --filter-bwa-image hg19mini.fasta.img \; > --kmer-file hg19mini.hss \; > --min-clipped-read-length 70 \; > --microbe-fasta e_coli_k12.fasta \; > --microbe-bwa-image e_coli_k12.fasta.img \; > --taxonomy-file e_coli_k12.db \; > --output output.pathseq.bam \; > --scores-output output.pathseq.txt. And encountered below error:. Using GATK jar /home/bioinfo/Installers/gatk4/gatk-4.1.0.0/gatk-package-4.1.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /home/bioinfo/Installers/gatk4/gatk-4.1.0.0/gatk-package-4.1.0.0-local.jar PathSeqPipelineSpark --input test_sample.bam --filter-bwa-image hg19mini.fasta.img --kmer-file hg19mini.hss --min-clipped-read-length 70 --microbe-fasta e_coli_k12.fasta --microbe-bwa-image e_coli_k12.fasta.img --taxonomy-file e_coli_k12.db --output output.pathseq.bam --scores-output output.pathseq.txt; 18:57:39.629 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 18:57:39.729 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/bioinfo/Installers/gatk4/gatk-4.1.0.0/gatk-package-4.1.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 18:57:41.594 INFO PathSeqPipelineSpark - ------------------------------------------------------------; 18:57:41.594 INFO PathSeqPipelineSpark - The Genome Analysis Toolkit (GATK) v4.1.0.0; 18:57:41.594 INFO PathSeqPipelineSpark - For support and documentation go to https://software.broadi",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5802:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5802,1,['test'],['test']
Testability,"Hi,. I am using GATK `version gatk4-4.0.6.0-0` as part of the bcbio-nextgen pipeline for RNA-seq variant calling. There is one step in the pipeline i.e. `gatk GenomicsDBImport` that's been failing consistently no matter how less or many resources in terms of memory and cores I provide. I have tried to run the command as part of the pipeline and in stand-alone mode (like below) and both produce the same error:. ```; [rathik@reslnrefo01 log]$ gatk --java-options '-Xms454m -Xmx3181m -XX:+UseSerialGC' GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path CDL-164-04P-1_0_249250621_genomicsdb -L 1:1-249250621 --variant /mnt/isilon/cbmi/variome/rathik/mendelian_rnaseq/gatk_output/CDL-164-04P/variation/rnaseq/gatk-haplotype/Sample_1__CDL-164-04P-gatk-haplotype-annotated-rnaedit-annotated-gemini.vcf.gz; Using GATK jar /mnt/isilon/cbmi/variome/bin/bcbio-nextgen/bcbio/anaconda/share/gatk4-4.0.6.0-0/gatk-package-4.0.6.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xms454m -Xmx3181m -XX:+UseSerialGC -jar /mnt/isilon/cbmi/variome/bin/bcbio-nextgen/bcbio/anaconda/share/gatk4-4.0.6.0-0/gatk-package-4.0.6.0-local.jar GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path CDL-164-04P-1_0_249250621_genomicsdb -L 1:1-249250621 --variant /mnt/isilon/cbmi/variome/rathik/mendelian_rnaseq/gatk_output/CDL-164-04P/variation/rnaseq/gatk-haplotype/Sample_1__CDL-164-04P-gatk-haplotype-annotated-rnaedit-annotated-gemini.vcf.gz; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/mnt/isilon/cbmi/variome/tmp/rathik; 11:49:24.784 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/mnt/isilon/cbmi/variome/bin/bcbio-nextgen/bcbio/anaconda/share/gatk4-4.0.6.0-0/gatk-package-4.0.6.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 11:49:25.130 INFO GenomicsDBImport - ------------------------------------------------------------; 11:49",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5045:439,log,log,439,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5045,1,['log'],['log']
Testability,"Hi,. I have the allele counts from ASEReadCounter and I would like to do some statistical test on the output. You suggest MAMBA in your manual but in their manual they say the input file should have the required field: `EXON_INFO - variant annotation label`. . Can you recommend any other downstream tools to analyze ASEReadCounter output?. Thanks,; Komal",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3267:90,test,test,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3267,1,['test'],['test']
Testability,"Hi,. I'm trying to run BaseRecalibratorSpark (gatk-4.1.7.0) but I'm hitting a problem where the process carshe with a ""too many open files"" error. Here is my command:. ulimit -n 4096; /usr/local/bioinf/gatk/gatk-4.1.7.0/gatk BaseRecalibratorSpark \; --java-options '-Xmx64G' \; --tmp-dir /local/scratch/rieder \; -I Normal_fixed.bam \; -R GRCh38.d1.vd1.fa \; -L S07604514_Regions_merged_padded.interval_list \; -O P45507_normal_bqsr.table \; --known-sites Homo_sapiens_assembly38.dbsnp138.vcf \; --known-sites Homo_sapiens_assembly38.known_indels.vcf \; --known-sites Mills_and_1000G_gold_standard.indels.hg38.vcf \; --spark-master local[8] \; --conf 'spark.executor.cores=8' \; --conf 'spark.local.dir=/local/scratch/rieder'. Here is the (hopefully) relevant log extract:. 20/04/29 01:51:51 INFO TaskSetManager: Finished task 578.0 in stage 0.0 (TID 578) in 2720 ms on localhost (executor driver) (576/1585); 20/04/29 01:51:51 INFO NewHadoopRDD: Input split: file:/data/projects/2019/NeoAG/VCF-phasing/work/b8/d8dc550b7ba5f57d935d04e27b756a/Normal_fixed.bam:19562233856+33554432; 01:51:51.374 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Homo_sapiens_assembly38.dbsnp138.vcf; 01:51:51.431 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Homo_sapiens_assembly38.known_indels.vcf; 01:51:51.451 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Mills_and_1000G_gold_standard.indels.hg38.vcf; 01:51:51.457 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Homo_sapiens_assembly38.dbsnp138.vcf; 01:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6578:760,log,log,760,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6578,1,['log'],['log']
Testability,"Hi,. I'm trying to validate the performance of BwaSpark (I'm running it locally). The input ubam file size is 5.1 GB. It takes 65 minutes for GATK's BwaSpark to complete which is exactly same as bwa-mem. Below is the command that I used to run BwaSpark. Is there any way to make BwaSpark run faster while running it locally or will the performance increase only while running on spark cluster? Please let me know if I had to modify or add any parameter. . Also, please let me know where can I find the complete list of --conf parameters for BwaSpark? (I couldn't find these options in gatk BwaSpark --help). `time gatk BwaSpark --bwa-mem-index-image GRCh37.fasta.img --spark-master local[*] --bam-partition-size 4000000 --conf 'spark.executor.num=5' --conf 'spark.executor.cores=16' --conf 'spark.executor.memory=15G' --conf 'spark.driver.memory=30G' --conf 'spark.dynamicAllocation.enabled=true' -I unmapped_input.bam -O output.bam -R GRCh37.fasta 2> Log_file.log`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8897:961,log,log,961,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8897,1,['log'],['log']
Testability,"Hi,. Last night, I tried again, and when I submited all the 25 sub-projects, a similar exceptions happens during the function GermlineCNVCaller. It seems that the problem is from gcnvkernel, when parallel projects are submitted at the same time. .............................................................(BUG 003).......................................................... 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-07410307475890858352.tsv; 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project//0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-12290301678667639499.tsv; 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project//0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-21824691337189197401.tsv; 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project//0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-31776045115104931009.tsv; 00:50:20.554 DEBUG ScriptExecutor - --psi_s_scale=1.000000e-04; 00:50:20.554 DEBUG ScriptExecutor - --mapping_error_rate=1.000000e-02; 00:50:20.554 DEBUG ScriptExecutor - --depth_correction_tau=1.000000e+04; 00:50:20.554 DEBUG ScriptExecutor - --q_c_expectation_mode=hybrid; 00:50:20.554 DEBUG ScriptExecutor - --max_bias_factors=5; 00:50:20.554 DEBUG ScriptExecutor - --psi_t_scale=1.000000e-03; 00:50:20.554 DEBUG ScriptExecutor - --log_mean_bias_std=1.000000e-01; 00:50:20.554 DEBUG ScriptExecutor - --init_ard_rel_unexplained_variance=1.000000e-01; 00:50:20.554 DEBUG ScriptExecutor - --num_gc_bins=20; 00:50:20.554 DEBUG ScriptExecutor - --gc_curve_sd=1.000000e+00; 00:50:20.554 DEBUG ScriptExecutor - --active_class_padding_hybrid_mode=50000; 00:50:20.554 DEBUG ScriptExecutor - --enable_bias_factors=True; 00:50:20.554 DEBUG ScriptExecutor - --disable_bias_f",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6235#issuecomment-547440019:484,Test,Test-,484,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6235#issuecomment-547440019,3,['Test'],['Test-']
Testability,"Hi,. Not sure if it is applicable but I just ran vcf-validator on the input gvcf file (also not sure if you can run vcf-validator on a gvcf): . ```; vcf-validator Sample_1__CDL-164-04P-gatk-haplotype-annotated-rnaedit-annotated-gemini.vcf.gz; ```. Here are the first few lines from the logs:. ```; The header tag 'reference' not present. (Not required but highly recommended.); INFO field at 1:14599 .. INFO tag [max_aaf_all=0.2096] expected different number of values (expected 2, found 1); INFO field at 1:14604 .. INFO tag [max_aaf_all=0.2096] expected different number of values (expected 2, found 1); INFO field at 1:14930 .. INFO tag [max_aaf_all=0.5231] expected different number of values (expected 2, found 1); INFO field at 1:15211 .. INFO tag [max_aaf_all=0.7316] expected different number of values (expected 2, found 1); INFO field at 1:15274 .. INFO tag [max_aaf_all=0.7205] expected different number of values (expected 3, found 1); INFO field at 1:16949 .. INFO tag [max_aaf_all=0.0227] expected different number of values (expected 2, found 1); INFO field at 1:17365 .. INFO tag [max_aaf_all=0.3841] expected different number of values (expected 2, found 1),INFO tag [af_adj_exac_afr=; 0.1603] expected different number of values (expected 2, found 1),INFO tag [af_exac_all=0.2553] expected different number of values (expect; ed 2, found 1),INFO tag [af_adj_exac_nfe=0.2715] expected different number of values (expected 2, found 1),INFO tag [af_adj_exac_sas=0.2883; ] expected different number of values (expected 2, found 1),INFO tag [af_adj_exac_oth=0.2581] expected different number of values (expected; 2, found 1),INFO tag [af_adj_exac_eas=0.3841] expected different number of values (expected 2, found 1),INFO tag [af_adj_exac_amr=0.221] e; xpected different number of values (expected 2, found 1),INFO tag [af_adj_exac_fin=0.2245] expected different number of values (expected 2,; found 1); INFO field at 1:17373 .. INFO tag [af_adj_exac_amr=0.028] expected different number ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5045#issuecomment-407476343:286,log,logs,286,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5045#issuecomment-407476343,1,['log'],['logs']
Testability,"Hi,; Copying and running the `spark-submit` command run by gatk-launch, I found out the parameter `spark.driver.userClassPathFirst` is set to true, and if I set to false it runs well (well, my job has an error but because of my data ^^) when running in cluster mode.; Here, my command which works:; > spark-submit --master yarn \; > --conf 'spark.driver.userClassPathFirst=false' --conf 'spark.io.compression.codec=lzf' --conf 'spark.driver.maxResultSize=0' --conf 'spark.executor.extraJavaOptions=""-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1""' \; > --conf 'spark.driver.extraJavaOptions=""-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1""' \; > --conf 'spark.kryoserializer.buffer.max=512m' --conf 'spark.yarn.executor.memoryOverhead=600' \; > --conf 'spark.submit.deployMode=cluster' \; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-package-4.beta.6-spark.jar BwaSpark --programName gatk4-bwa-test --input hdfs://spark01:7222/user/axverdier/data/phalstedii/PLHAL710.710.unmappedReads.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_BWA_BwaSpark.bam --reference hdfs://spark01:7222/user/axverdier/data/phalstedii/Plhal710r1.1.fa. I didn't find out how to override `spark.driver.userClassPathFirst` to false in the gatk-launch command, it seems to be ignored or replaced by true.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350717821:1198,test,test,1198,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350717821,1,['test'],['test']
Testability,"Hi,; Glad to know that you have tested GATK4 with Amazon S3 using NIO file system plugin. ; I have been stuck on this process for long...I would really appreciate if you could share the work around procedure detail for this.; Thanks in advance !; Senthil",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3708#issuecomment-354368839:32,test,tested,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3708#issuecomment-354368839,1,['test'],['tested']
Testability,"Hi,; I am not sure if this is a gatk bug or some other issue on our system. ; Setup: Centos 6.9, Zlib 1.2.3, gatk 4.0.0. The issue:; I am running scatter/gather haplotyping for 30X WGS data, per sample using the BROAD interval list to launch parallel processing branches (1 per sample per interval). Each individual ""branch"" outputs a gzip compressed file for a given target interval. I am then trying to merge these files into a per-sample gvcf for subsequent genotyping across samples. . However, the combination using GatherVcfs fails with the following message: . `htsjdk.tribble.TribbleException: Line 14922244: there aren't enough columns for line 1 59930777 . A <NON_REF> . . END=5993077 (we expected 9 tokens, and saw 8 ), for input source: file:///ifs/data/nfs_share/sukmb352/projects/dzhk/genomes/test/work/2e/63b1bc25956a67ba90c2f2fadc21aa/Individual_AS-167622_Sample_AS-167622.merged.vcf.gz; at htsjdk.variant.vcf.AbstractVCFCodec.decodeLine(AbstractVCFCodec.java:281); at htsjdk.variant.vcf.AbstractVCFCodec.decode(AbstractVCFCodec.java:262); at htsjdk.variant.vcf.AbstractVCFCodec.decode(AbstractVCFCodec.java:64); at htsjdk.tribble.AsciiFeatureCodec.decode(AsciiFeatureCodec.java:70); at htsjdk.tribble.AsciiFeatureCodec.decode(AsciiFeatureCodec.java:37); at htsjdk.tribble.TribbleIndexedFeatureReader$WFIterator.readNextRecord(TribbleIndexedFeatureReader.java:365); at htsjdk.tribble.TribbleIndexedFeatureReader$WFIterator.next(TribbleIndexedFeatureReader.java:346); at htsjdk.tribble.TribbleIndexedFeatureReader$WFIterator.next(TribbleIndexedFeatureReader.java:307); at java.util.Iterator.forEachRemaining(Iterator.java:116); at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801); at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151); at java.util.stream.ForEachOps$Fo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4255:807,test,test,807,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4255,1,['test'],['test']
Testability,"Hi,; I ran into the following error when combining gVCF files generated by the HaplotypeCaller:. > htsjdk.tribble.TribbleException$InvalidHeader: Your input file has a malformed header: Discordant field size detected for field AS_RAW_ReadPosRankSum at chr1:13417. Field had 2 values but the header says this should have 1 values based on header record INFO=<ID=AS_RAW_ReadPosRankSum,Number=1,Type=String,Description=""allele specific raw data for rank sum test of read position bias"". Similar number info was found for several allele-specific annotations:; ```; ##INFO=<ID=AS_InbreedingCoeff,Number=A,Type=Float,Description=""allele specific heterozygosity as estimated from the genotype likelihoods per-sample when compared against the Hardy-Weinberg expectation; relate to inbreeding coefficient"">; ##INFO=<ID=AS_QD,Number=A,Type=Float,Description=""Allele-specific Variant Confidence/Quality by Depth"">; ##INFO=<ID=AS_RAW_BaseQRankSum,Number=1,Type=String,Description=""raw data for allele specific rank sum test of base qualities"">; ##INFO=<ID=AS_RAW_MQ,Number=1,Type=String,Description=""Allele-specfic raw data for RMS Mapping Quality"">; ##INFO=<ID=AS_RAW_MQRankSum,Number=1,Type=String,Description=""Allele-specfic raw data for Mapping Quality Rank Sum"">; ##INFO=<ID=AS_RAW_ReadPosRankSum,Number=1,Type=String,Description=""allele specific raw data for rank sum test of read position bias"">; ##INFO=<ID=AS_SB_TABLE,Number=1,Type=String,Description=""Allele-specific forward/reverse read counts for strand bias tests"">; ```; I assume, the correct annotation should be ""Number=A"". The gVCF files were generated with HaplotypeCaller using; ```; --emit-ref-confidence GVCF \; --annotation-group StandardAnnotation \; --annotation-group AS_StandardAnnotation \; --annotation-group StandardHCAnnotation \; ```. GATK version 4.0.0.0 (downloaded from GATK website)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4162:455,test,test,455,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4162,4,['test'],"['test', 'tests']"
Testability,"Hi,; I tried your commands (and many adaptions / changements) but I always get the same problem:; If the command line includes `--`, I get the JNI linkage error as if the spark related parameters were not parsed.; I tried many things, as:; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --javaOptions -Dmapr.library.flatclass -- --sparkRunner SPARK --sparkMaster yarn --deploy-mode cluster; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --javaOptions -Dmapr.library.flatclass --sparkRunner SPARK --sparkMaster yarn -- --master yarn --deploy-mode cluster. > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --javaOptions -Dmapr.library.flatclass --sparkRunner SPARK --sparkMaster yarn -- --master yarn --deploy-mode cluster --conf spark.driver.extraJavaOptions='-Dmapr.library.flatclass' --conf spark.executor.extraJavaOptions='-Dmapr.library.flatclass'. > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --javaOptions -Dmapr.library.flatclass --sparkRunner SPARK --sparkMaster yarn -- --master yarn --deploy-mode cluster --driver-java-options '-Dmapr.library.flatclass'. It's a non-exhaustive list, I tried a lot of configurations similar to these ones.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350227061:332,test,testing,332,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350227061,4,['test'],['testing']
Testability,"Hi,; I'm running a command:; ```; java -jar gatk-4.0.3.0/gatk-package-4.0.3.0-local.jar SelectVariants \; -R ref/human_g1k_b37_20.fasta \; -V dupa.raw.indels.snps.vcf \; -selectType INDEL \; -O dupa_raw.INDEL.vcf. ```; and I get error:; ```; ***********************************************************************. A USER ERROR has occurred: s is not a recognized option. ***********************************************************************; ```; Tested on various input files. ```; java -version; openjdk version ""1.8.0_152""; OpenJDK Runtime Environment (Zulu 8.25.0.1-linux64) (build 1.8.0_152-b16); OpenJDK 64-Bit Server VM (Zulu 8.25.0.1-linux64) (build 25.152-b16, mixed mode); ```. Looks like it's a bug?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4705:450,Test,Tested,450,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4705,1,['Test'],['Tested']
Testability,"Hi,; I've got some error messages about ""tranches"" when I'm running VariantRecalibrator. Here is my command lines:; ```; gatk=/public/home/fan_lab/shali/gatk/gatk-4.1.8.1/gatk; reference=/public/home/fan_lab/shali/gatk/gatk_bundle/Homo_sapiens_assembly38.fasta; GATK_bundle=/public/home/fan_lab/shali/gatk/gatk_bundle. indir=/public/home/fan_lab/shali/NGS_new; outdir=/public/home/fan_lab/shali/NGS_new. gatk VariantRecalibrator \; -R $reference \; --variant $outdir/population/24samples.HC.vcf.gz \; --resource:hapmap,known=false,training=true,truth=true,prior=15.0 $GATK_bundle/hapmap_3.3.hg38.vcf.gz \; --resource:omni,known=false,training=true,truth=false,prior=12.0 $GATK_bundle/1000G_omni2.5.hg38.vcf.gz \; --resource:1000G,known=false,training=true,truth=false,prior=10.0 $GATK_bundle/1000G_phase1.snps.high_confidence.hg38.vcf.gz \; --resource:dbsnp,known=true,training=false,truth=false,prior=6.0 $GATK_bundle/dbsnp_146.hg38.vcf.gz \; -an DP -an QD -an FS -an SOR -an ReadPosRankSum -an MQRankSum \; --mode SNP \; --tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 95.0 -tranche 90.0 \; --rscript-file $outdir/population/24samples.HC.snps.plots.R \; --tranches-file $outdir/poplation/24samples.HC.snps.tranches \; -O $outdir/poplation/24samples.HC.snps.recal; ```; The mission ended quickly.When I look at the log file, I find the following error message:; ```; A USER ERROR has occurred: /public/home/fan_lab/shali/NGS_new/poplation/24samples.HC.snps.tranches; ```; Any suggestions for me? Look forward to your reply. Thanks ever so much.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7225:1321,log,log,1321,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7225,1,['log'],['log']
Testability,"Hi,; On a new git clone of the master branch (23/01/2018), I'm not able to compile gatk with gradlew.; Here the logs:; ```bash; axverdier@spark:~/Tools/GATK4/git/gatk$ ./gradlew clean; :clean. BUILD SUCCESSFUL. Total time: 2.031 secs; axverdier@spark:~/Tools/GATK4/git/gatk$ ./gradlew --stacktrace --info; Initialized native services in: /home/axverdier/.gradle/native; Connected to daemon DaemonInfo{pid=32687, address=[a73e45df-d609-43d0-9385-508a26a328d4 port:39221, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1516787326803, context=DefaultDaemonContext[uid=7e8a7a6d-190b-445f-9873-f0329477e561,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/axverdier/.gradle/daemon,pid=32687,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=US-ASCII,-Duser.country=US,-Duser.language=en,-Duser.variant]}. Dispatching request Build{id=16e78f98-b0ed-404d-bf38-965d87be7924.1, currentDir=/home/axverdier/Tools/GATK4/git/gatk}.; Received result org.gradle.launcher.daemon.protocol.BuildStarted@5495333e from daemon DaemonInfo{pid=32687, address=[a73e45df-d609-43d0-9385-508a26a328d4 port:39221, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1516787326803, context=DefaultDaemonContext[uid=7e8a7a6d-190b-445f-9873-f0329477e561,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/axverdier/.gradle/daemon,pid=32687,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=US-ASCII,-Duser.country=US,-Duser.language=en,-Duser.variant]} (build should be starting).; The client will now receive all logging from the daemon (pid: 32687). The daemon log file: /home/axverdier/.gradle/daemon/3.1/daemon-32687.out.log; Starting 7th build in daemon [uptime: 5 mins 24.778 secs, performance: 92%, GC rate: 0.11/s, tenured heap usage: 12% of 716.2 MB]; Executing build with daemon context: DefaultDaemonContext[uid=7e8a7a6d-190b-445f-9873-f0329477e561,j",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4248:112,log,logs,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4248,1,['log'],['logs']
Testability,"Hi,; Our spark installation use a mapr filesystem ( hdfs compatible ).; GATK spark tools does not seems to recognize it.; When running the following command:; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input maprfs://spark-ics/user/axverdier/data/710-PE-G1.bam --output maprfs://spark-ics/user/axverdier/testOutGATK_CountReadsSpark --sparkRunner SPARK --sparkMaster yarn --javaOptions -Dmapr.library.flatclass; I got the following error!. > Driver stacktrace:; > 	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1436); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1424); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1423); > 	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59); > 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48); > 	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1423); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802); > 	at scala.Option.foreach(Option.scala:257); > 	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:802); > 	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1651); > 	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1606); > 	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1595); > 	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48); > 	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:628); > 	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1918); > 	at org.apache.spark.SparkCo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3936:251,test,testing,251,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3936,1,['test'],['testing']
Testability,"Hi,; While I test a new data set from fastq using bwamem, samtools and gatk4, I use the following scripts:. % step1: bwa mem. > bwa mem -t 12 -Ma -R '@RG ID:HCC1954 LB:HCC1954 SM:HCC1954' human_g1k_v37.fasta HCC1954_1.fq HCC1954_2.fq > HCC1954.sam. % step2: sort by queryname. > samtools sort -n HCC1954.sam -@ 24 > HCC1954.readnamesort.bam . % step3: gatk4 ReadsPipelineSpark. > /gatk-launch \; > ReadsPipelineSpark \; > -I HCC1954.readnamesort.bam \; > -R /benchmark/human_g1k_v37.2bit \; > -O HCC1954.bam \; > --knownSites /benchmark/dbsnp_138.b37.excluding_sites_after_129.vcf \; > --shardedOutput false \; > --emit_original_quals \; > --duplicates_scoring_strategy SUM_OF_BASE_QUALITIES \; > --sparkRunner SPARK \; > --driver-memory 8G \; > --executor-memory 60g \; > --num-executors 1 \; > --executor-cores 4 \; > --sparkMaster local[4]. I encounter problem like this:. org.broadinstitute.hellbender.exceptions.UserException$MalformedRead: A USER ERROR has occurred: Read C097FACXX111207:2:2301:17281:179267 1:1139151-1139251 is malformed: The input .bam file contains reads with no platform information. First observed at read with name = C097FACXX111207:2:2301:17281:179267; at org.broadinstitute.hellbender.utils.recalibration.RecalUtils.parsePlatformForRead(RecalUtils.java:510); at org.broadinstitute.hellbender.utils.recalibration.BaseRecalibrationEngine.processRead(BaseRecalibrationEngine.java:122); at org.broadinstitute.hellbender.tools.spark.transforms.BaseRecalibratorSparkFn.lambda$apply$26a6df3e$1(BaseRecalibratorSparkFn.java:33); at org.apache.spark.api.java.JavaRDDLike$$anonfun$fn$4$1.apply(JavaRDDLike.scala:159); at org.apache.spark.api.java.JavaRDDLike$$anonfun$fn$4$1.apply(JavaRDDLike.scala:159); at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710); at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710); at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); at org.apach",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1949:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1949,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Hi,; during compilation of 3.8 sources I get. ```; [INFO] --- exec-maven-plugin:1.2.1:exec (delete-mavens-links) @ gatk-aggregator ---; rm: missing operand; Try 'rm --help' for more information.; rm: missing operand; Try 'rm --help' for more information.; [INFO] ; [INFO] --- maven-failsafe-plugin:2.16:integration-test (integration-tests) @ gatk-aggregator ---; ```. I have no idea whether it breaks something downstream but provided building fails for me later with. ```; [INFO] Reactor Summary:; [INFO] ; [INFO] GATK Root .......................................... SUCCESS [ 16.744 s]; [INFO] GATK Aggregator .................................... SUCCESS [ 4.647 s]; [INFO] GATK GSALib ........................................ SUCCESS [ 6.040 s]; [INFO] GATK Utils ......................................... SUCCESS [ 39.733 s]; [INFO] GATK Engine ........................................ SUCCESS [ 7.557 s]; [INFO] GATK Tools Public .................................. SUCCESS [ 7.689 s]; [INFO] External Example ................................... FAILURE [ 0.051 s]; [INFO] GATK Queue ......................................... SKIPPED; [INFO] GATK Queue Extensions Generator .................... SKIPPED; [INFO] GATK Queue Extensions Public ....................... SKIPPED; [INFO] GATK Aggregator Public ............................. SKIPPED; [INFO] GATK Tools Protected ............................... SKIPPED; [INFO] GATK Package Distribution .......................... SKIPPED; [INFO] GATK Queue Extensions Distribution ................. SKIPPED; [INFO] GATK Queue Package Distribution .................... SKIPPED; [INFO] GATK Aggregator Protected .......................... SKIPPED; [INFO] GATK Tools Private ................................. SKIPPED; [INFO] GATK Package Internal .............................. SKIPPED; [INFO] NA12878 KB Utilities ............................... SKIPPED; [INFO] GATK Queue Private ................................. SKIPPED; [INFO] GATK Queue Extensions Inter",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4686:315,test,test,315,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4686,2,['test'],"['test', 'tests']"
Testability,"Hi,; when I test the gatk4 command, I encountered some issues, how can I fix it ? . bash-4.2$ ./gatk-launch PrintReadsSpark -I /gatk4/output.bam -O /gatk4/output_2.bam -- --sparkRunner SPARK --sparkMaster yarn-client; Using GATK jar /opt/Software/gatk/build/libs/gatk-package-4.beta.5-70-gdc3237e-SNAPSHOT-spark.jar; Running:; spark-submit --master yarn-client --conf spark.driver.userClassPathFirst=true --conf spark.io.compression.codec=lzf --conf spark.driver.maxResultSize=0 --conf spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 --conf spark.kryoserializer.buffer.max=512m --conf spark.yarn.executor.memoryOverhead=600 /opt/Software/gatk/build/libs/gatk-package-4.beta.5-70-gdc3237e-SNAPSHOT-spark.jar PrintReadsSpark -I /gatk4/output.bam -O /gatk4/output_2.bam --sparkMaster yarn-client; 14:19:09.870 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 14:19:10.155 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/opt/Software/gatk/build/libs/gatk-package-4.beta.5-70-gdc3237e-SNAPSHOT-spark.jar!/com/intel/gkl/native/libgkl_compression.so; [October 11, 2017 2:19:10 PM CST] PrintReadsSpark --output /gatk4/output_2.bam --input /gatk4/output.bam --sparkMaster yarn-client --readValidationStringency SILENT --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --interval_merging_rule ALL --bamPartitionSize 0 --disableSequenceDictionaryValidation false --shardedOutput false --numReducers 0 --help ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3686:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3686,1,['test'],['test']
Testability,"Hi- The header reports `##FORMAT=<ID=MFRL,Number=R,Type=Float,Description=""median fragment length"">`. There is an example vcf file, `in.vcf`, [here](https://github.com/dariober/bioinformatics-cafe/tree/master/fixMFRLforMutect/test_data) which I used to hack together a script to fix an input vcf file (see also [test.md](https://github.com/dariober/bioinformatics-cafe/blob/master/fixMFRLforMutect/test.md)).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4363#issuecomment-371170671:312,test,test,312,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4363#issuecomment-371170671,2,['test'],['test']
Testability,"Hi; I tried to run the recalibration using the gatk-generated vcf file as a known vcf file. I got an error which has been previously described ""The covariates table is missing ReadGroup V300019285_L2_ in RecalTable0"" but without the solution. ; I am wondering if the solution has been found. Anyone has the experience to fix this issue.; Thank ; **This is the batch file** ; java -Xmx16g -jar /scratch/ddo/gatk-4.1.9.0/gatk-package-4.1.9.0-local.jar ApplyBQSR \; -R /scratch/ddo/refgenomenew/New_IDs.fasta \; -I /scratch/ddo/markedsam/C18-436P.sort.rmdup.bam \; --bqsr-recal-file /scratch/ddo/reclibration/gatkmf01_C18-436P.recal_data.table \; -O /scratch/ddo/reclibration/C18-436P.bqsr.maf01.bam . **This is the log file**; -----------------------------------------------------------------------------------------------------; Picked up JAVA_TOOL_OPTIONS: -Xmx2g; 04:59:42.641 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/scratch/ddo/gatk-4.1.9.0/gatk-package-4.1.9.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Nov 08, 2021 4:59:43 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 04:59:43.044 INFO ApplyBQSR - ------------------------------------------------------------; 04:59:43.045 INFO ApplyBQSR - The Genome Analysis Toolkit (GATK) v4.1.9.0; 04:59:43.045 INFO ApplyBQSR - For support and documentation go to https://software.broadinstitute.org/gatk/; 04:59:43.045 INFO ApplyBQSR - Executing as on Linux v3.10.0-1160.36.2.el7.x86_64 amd64; 04:59:43.045 INFO ApplyBQSR - Java runtime: OpenJDK 64-Bit Server VM v13.0.2+8; 04:59:43.045 INFO ApplyBQSR - Start Date/Time: November 8, 2021 at 4:59:42 a.m. PST; 04:59:43.045 INFO ApplyBQSR - ------------------------------------------------------------; 04:59:43.045 INFO ApplyBQSR - ------------------------------------------------------------; 04:59:43.046 INFO ApplyBQSR - HTSJDK Version: 2.23.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7549:713,log,log,713,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7549,1,['log'],['log']
Testability,HiSeq.WGS.b37.NA12878.snippet_with_unmapped.cram.crai; src/test/resources/org/broadinstitute/hellbender/engine/cramtestWrongRef.dict; src/test/resources/org/broadinstitute/hellbender/engine/cramtestWrongRef.fasta.fai; src/test/resources/org/broadinstitute/hellbender/engine/cram_with_bai_index.cram.bai; src/test/resources/org/broadinstitute/hellbender/engine/cram_with_crai_index.cram.crai; src/test/resources/org/broadinstitute/hellbender/engine/example_features.bed.idx; src/test/resources/org/broadinstitute/hellbender/engine/example_variants_noSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/example_variants_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test_gvcf.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithIndex.vcf; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithOutIndex.vcf; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_multiple_intervals.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_multiple_intervals_with_unmapped.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_single_interval.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_unmapped_only.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_wholefile.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_VariantWal,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:9368,test,test,9368,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"Hm, Windows. I ran testAC0 (on a Mac) and it failed the same way as on Travis. I then regenerated the index using GATK4 IndexFeatureFile, and then the test passed, so there is definitely something wrong with the index files.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431361093:151,test,test,151,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431361093,1,['test'],['test']
Testability,"Hm. Even though I totally expected to be able to reproduce this, I can't. I tried quite a few different combinations. I think this one captures the steps that were reported, but it works:. ```; (base) /tmp/test a /Users/cnorman/projects/gatk/gatk MergeVcfs -I data/calling/my.vcf.gz -I data/calling/b.vcf.gz -O out.vcf.gz; Using GATK jar /Users/cnorman/projects/gatk/build/libs/gatk-package-4.1.7.0-41-g79586b8-SNAPSHOT-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /Users/cnorman/projects/gatk/build/libs/gatk-package-4.1.7.0-41-g79586b8-SNAPSHOT-local.jar MergeVcfs -I data/calling/my.vcf.gz -I data/calling/b.vcf.gz -O out.vcf.gz; 16:00:13.443 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/cnorman/projects/gatk/build/libs/gatk-package-4.1.7.0-41-g79586b8-SNAPSHOT-local.jar!/com/intel/gkl/native/libgkl_compression.dylib; [Mon Jun 22 16:00:13 EDT 2020] MergeVcfs --INPUT data/calling/my.vcf.gz --INPUT data/calling/b.vcf.gz --OUTPUT out.vcf.gz --VERBOSITY INFO --QUIET false --VALIDATION_STRINGENCY STRICT --COMPRESSION_LEVEL 2 --MAX_RECORDS_IN_RAM 500000 --CREATE_INDEX true --CREATE_MD5_FILE false --GA4GH_CLIENT_SECRETS client_secrets.json --help false --version false --showHidden false --USE_JDK_DEFLATER false --USE_JDK_INFLATER false; [Mon Jun 22 16:00:13 EDT 2020] Executing as cnorman@WMCEA-78B on Mac OS X 10.13.6 x86_64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_111-b14; Deflater: Intel; Inflater: Intel; Provider GCS is available; Picard version: Version:4.1.7.0-41-g79586b8-SNAPSHOT; [Mon Jun 22 16:00:13 EDT 2020] picard.vcf.MergeVcfs done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=373293056; Tool returned:; 0; ```; The only way I can reproduce it is to delete one of the files so it *really* doesn't exist at the specified location:; ```; (base) /tmp/test a /Users/cnorman/projects/gatk/gatk Merge",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-647743321:206,test,test,206,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-647743321,1,['test'],['test']
Testability,"Hm. So it does reproduce on the newest version, and there *are* tickets for it, but they're closed. Apparently it was a deliberate choice to make a breaking change in testNG. I'm going to make a separate PR with the details and change this test. But I think we should still add the force for 6.9.6 as part of this branch.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-296267356:167,test,testNG,167,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-296267356,2,['test'],"['test', 'testNG']"
Testability,"Hmm ok @droazen, I bow to your preference (if not entirely to your logic). Nice update overall by the way 👍",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3158#issuecomment-310784825:67,log,logic,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3158#issuecomment-310784825,1,['log'],['logic']
Testability,"Hmm, I guess I can go ahead and merge into my branch once tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7932#issuecomment-1189210015:58,test,tests,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7932#issuecomment-1189210015,1,['test'],['tests']
Testability,"Hmm, I see what you mean.; It’s an interesting idea, and I think Valentin does that for some CIGAR related tests; but I think it is difficult to apply in our case without having a “simulator”. I’ll keep this in mind.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4677#issuecomment-384788485:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4677#issuecomment-384788485,1,['test'],['tests']
Testability,"Hmm, actually, could this be a problem due to the way the native libraries are loaded in the test code? Note that we first cycle through all implementations in the DataProvider, loading the respective library for each implementation via the `synchronized boolean load` method in the `NativeLibraryLoader`. I'm not really that familiar with concurrency in Java (nor loading native libraries, for that matter), but it seems that the intermittent failure goes away when I refactor the test to remove the DataProvider (by just looping through the implementations in the test method). Perhaps related to https://github.com/broadinstitute/gatk/issues/5339?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607596205:93,test,test,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607596205,3,['test'],['test']
Testability,"Hmm, actually, let me take a second look at this. I think I got a bit confused looking back at the original forum post by the fact that two different users were posting about slightly different scenarios. I'll do some more testing of edge cases just to make sure I'm not missing anything. Apologies, but it's been a while since I opened this, so I need to refresh my memory!. EDIT: OK, I think I understand things now and edited the previous comment to remove confusing/misleading remarks. I'm OK with merging this for this release if you are, and we can look at the NaN issue later---doesn't seem to have caused any serious issues thus far...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6624#issuecomment-705868335:223,test,testing,223,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6624#issuecomment-705868335,1,['test'],['testing']
Testability,"Hmm, an interesting test failure—seems like serialization of Guava ImmutableList might not be cross compatible between Java 8 and 11 (the test file attempting to be deserialized here was generated using Java 11). @cmnbroad what’s the timeline for getting rid of Java 8?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8132#issuecomment-1353536569:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8132#issuecomment-1353536569,2,['test'],['test']
Testability,"Hmm, looks like I deleted the CRAM `/humgen/gsa-hpprojects/dev/shlee/1kg_GRCh38_exome/cram/HG02759.alt_bwamem_GRCh38DH.20150826.GWD.exome.cram`. (I was a high storage cost offender and asked to clean up.) Luckily, I have another CRAM available that I left for testing purposes. I can recapitulate the error with this other CRAM using the old `gatk-4.alpha.2-1134-ga9d9d91-SNAPSHOT` jar. ```; -bash-4.1$ /humgen/gsa-hpprojects/GATK/gatk4/gatk-4.alpha.2-1134-ga9d9d91-SNAPSHOT/gatk-launch PrintReads -R /humgen/gsa-hpprojects/dev/shlee/ref/GRCh38_1kg/GRCh38_full_analysis_set_plus_decoy_hla.fa -I /humgen/gsa-hpprojects/dev/shlee/1kg_GRCh38_exome/HG00190.alt_bwamem_GRCh38DH.20150826.FIN.exome.cram -O /humgen/gsa-hpprojects/dev/shlee/1kg_GRCh38_exome/test_decram_20171002.bam; ```. Gives the same error at an approximately similar region:; ```; ...; 10:50:54.603 INFO ProgressMeter - chr1:224042054 2.2 11004000 5016945.0; 10:51:04.609 INFO ProgressMeter - chr1:248061327 2.4 11905000 5044206.5; ERROR	2017-10-02 10:51:05	Slice	Reference MD5 mismatch for slice 0:248574592-248771907, AGTGGATGAG...TGTCGGTATG; 10:51:06.940 INFO PrintReads - Shutting down engine; [October 2, 2017 10:51:06 AM EDT] org.broadinstitute.hellbender.tools.PrintReads done. Elapsed time: 2.45 minutes.; Runtime.totalMemory()=5995233280; htsjdk.samtools.cram.CRAMException: Reference sequence MD5 mismatch for slice: sequence id 0, start 248574592, span 197316, expected MD5 cc8ace0545facc11349da783af07a076; 	at htsjdk.samtools.CRAMIterator.nextContainer(CRAMIterator.java:187); 	at htsjdk.samtools.CRAMIterator.hasNext(CRAMIterator.java:261); 	at htsjdk.samtools.SamReader$AssertingIterator.hasNext(SamReader.java:601); 	at org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator.hasNext(SAMRecordToReadIterator.java:24); 	at java.util.Iterator.forEachRemaining(Iterator.java:115); 	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801); 	at java.util.stream.AbstractPipeline.cop",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-333560828:260,test,testing,260,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-333560828,1,['test'],['testing']
Testability,"Hmm, running `./gradlew --info ...` yields the following snippet:. ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.downsampling.ReservoirDownsamplerUnitTest > testReservoirDownsampler[29](TestDataProvider(ReservoirDownsamplerTest: reservoirSize=10000 totalReads=10000 expectedNumReadsAfterDownsampling=10000 expectedNumDiscardedItems=0)) STANDARD_ERROR; 01:40:10.641 WARN gatk - Running test: TestDataProvider(ReservoirDownsamplerTest: reservoirSize=10000 totalReads=10000 expectedNumReadsAfterDownsampling=10000 expectedNumDiscardedItems=0); Finished 130000 tests; Finished 140000 tests. Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.pairhmm.VectorPairHMMUnitTest STANDARD_ERROR; 01:40:14.522 WARN NativeLibraryLoader - Unable to load libgkl_pairhmm_fpga.so from native/libgkl_pairhmm_fpga.so (/tmp/libgkl_pairhmm_fpga17703278887667828152.so: libgkl_pairhmm_shacc.so: cannot open shared object file: No such file or directory); #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007fe1a5cd00f2, pid=6969, tid=6997; #; # JRE version: OpenJDK Runtime Environment (11.0.2+9) (build 11.0.2+9); # Java VM: OpenJDK 64-Bit Server VM (11.0.2+9, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # V [libjvm.so+0x8fd0f2] jni_GetByteArrayElements+0x72; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P"" (or dumping to /home/travis/build/broadinstitute/gatk/core.6969); #; # An error report file with more information is saved as:; # /home/travis/build/broadinstitute/gatk/hs_err_pid6969.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #; Starting process 'Gradle Test Executor 2'. Working directory: /home/travis/build/broadinstitute/gatk Command: /usr/local/lib/jvm/openjdk11/bin/java -Dgatk.spark.debug -Dorg.gradle.native=false -Dsamjdk.compres",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607332088:94,test,test,94,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607332088,8,"['Test', 'test']","['TestDataProvider', 'test', 'testReservoirDownsampler', 'tests']"
Testability,"Hmm, tests are failing on Travis. To be precise, the allelic-count-only multisample segmentation test is failing---but only in Java 11 (it passes in Java 8). ""Write once, run anywhere"" indeed!. This is one reason why I’m not a fan of exact-match numerical tests… (Another is that they often impede future development by defining behavior too rigidly or adding maintenance costs.) Let me look into it and get back to you.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7652#issuecomment-1023649096:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7652#issuecomment-1023649096,3,['test'],"['test', 'tests']"
Testability,"Hmm, thanks for suggesting the addition of a regression test @fleharty. This caused me to realize that I actually missed another gap in the previous filtering logic that might have yielded NaNs (resulting from division by zero interval medians) in this particular edge case, which actually takes effect before the rounding error I originally fixed. However, because of how HDF5 writes NaN values as 0, this apparently doesn't lead to any catastrophic failures. We should definitely check that behavior is reasonable in this case (i.e., when interval medians are zero); I've filed #6878. In the end, I added a regression test that only passes with the changes to address the rounding error. This was a bit of a pain because we use simulated data in the tests that cover this code, and the filters are applied in sequential order only on those elements that passed the previous filter. Note that there are many other possible filtering combinations that would be impractical to test. I think that all of this filtering logic was ported over from GATK CNV (I only rewrote the code to perform the filtering in-place to improve memory usage), and I'm not sure that all edge-case behavior was well defined by the original logic (which probably implicitly assumed typical, well formed data, i.e., using more than one sample, without too many uncovered intervals). Fortunately, these edge-case usages (i.e., using a single sample to build the PoN, mistakenly including too many uncovered intervals, and/or disabling various filters) are probably not too common.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6624#issuecomment-705843882:56,test,test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6624#issuecomment-705843882,7,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"Hmm, that's strange, now only `testGenomicsDBImportFileInputs_newMQ()` is failing. `testGenomicsDBImportFileInputsAgainstCombineGVCFWithNonDiploidData()`, which was failing for me this morning, is now passing despite no additional changes. Error is ""Attribute RAW_MQandDP expected [353426] but found [352585]"". See https://storage.googleapis.com/hellbender-test-logs/build_reports/master_24137.4/tests/test/index.html",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5397#issuecomment-452881372:84,test,testGenomicsDBImportFileInputsAgainstCombineGVCFWithNonDiploidData,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5397#issuecomment-452881372,4,['test'],"['test', 'test-logs', 'testGenomicsDBImportFileInputsAgainstCombineGVCFWithNonDiploidData', 'tests']"
Testability,"Hmn, I haven't reproduced it manually myself. It's happening on the nightly jenkins tests that run on a google cluster. I'm assuming it reproduces if you run the same command that their running on any dataproc cluster:. something along the lines of :; ```; gatk-launch MarkDuplicatesSpark --shardedOutput true -O output.bam --numReducers 0 --apiKey $API_KEY -I gs://broad-gatk-test-jenkins/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam -- --sparkLauncher GCS --cluster $YOUR_CLUSTER; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2517#issuecomment-288546601:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2517#issuecomment-288546601,2,['test'],"['test-jenkins', 'tests']"
Testability,"Hmn... I didn't read this history carefully before responding. It looks like disq has been tested to not have any obvious file leaks, and @jshleap is seeing the problem in mutect2. . Mutect shouldn't be opening a lot of file handles, so I even if we're not closing them I wouldn't imagine it's really doing anything critically wrong. I would check your file handle limits and see if there's either a very low user limit or a low system limit. It's possible another user on the same system is consuming a lot of file handles. Is it consistently happening? What version of gatk are you using?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5316#issuecomment-598224260:91,test,tested,91,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5316#issuecomment-598224260,1,['test'],['tested']
Testability,Hook up the Python-based unit tests for NVScoreVariants to our test suite,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/9011:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/9011,2,['test'],"['test', 'tests']"
Testability,How do we do this? What happens if a job runs locally but fails in the cloud? How do we log and understand errors?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/276:88,log,log,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/276,1,['log'],['log']
Testability,How do you want to test this? The error was triggered only if a large number of intervals (~1000) was imported by the tool.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-406751089:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-406751089,1,['test'],['test']
Testability,How should I disable the ADAM support @droazen? Just disabling the ADAM tests? Or something else should be changed?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2247#issuecomment-258084470:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2247#issuecomment-258084470,1,['test'],['tests']
Testability,"How to reproduce:. Modify the code in ```AlignmentIntervalUnitTest.testConstructionFromSAMRecord``` to perform a validation of the read returned by ```applyAlignment```:. ```; final SAMRecord samRecord = BwaMemAlignmentUtils.applyAlignment(""whatever"", SVDiscoveryTestDataProvider.makeDummySequence(expectedContigLength, (byte)'A'), null, null, bwaMemAlignment, refNames, hg19Header, false, false);; if (samRecord.isValid() != null) {; throw new IllegalStateException(samRecord.isValid().stream().map(s -> s.getMessage()).collect(Collectors.joining("", "")));; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3459#issuecomment-323218384:67,test,testConstructionFromSAMRecord,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3459#issuecomment-323218384,1,['test'],['testConstructionFromSAMRecord']
Testability,How's the test coming @kdatta ? Anything we can do to help?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-291999079:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-291999079,1,['test'],['test']
Testability,HtsgetReader integration tests are failing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6803:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6803,1,['test'],['tests']
Testability,Htsjdk and the Disq snapshot have been updated and now the previously failing tests are passing.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5138#issuecomment-422341161:78,test,tests,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5138#issuecomment-422341161,1,['test'],['tests']
Testability,"Huh, test failure:. ```; java.io.IOException: GenomicsDB JNI Error: VCFAdapterException : Could not copy contents of VCF header filename gs://hellbender-test-logs/staging/2a733750-eaef-4df5-b971-2437358f5583/vcfheader.vcf to temporary file /tmp/TileDBTapu1R; 	at org.genomicsdb.reader.GenomicsDBQueryStream.jniGenomicsDBInit(Native Method); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:209); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:182); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:91); 	at org.genomicsdb.reader.GenomicsDBFeatureReader.generateHeadersForQuery(GenomicsDBFeatureReader.java:200); 	at org.genomicsdb.reader.GenomicsDBFeatureReader.<init>(GenomicsDBFeatureReader.java:85); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.getGenomicsDBFeatureReader(GenomicsDBImportIntegrationTest.java:927); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:551); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:521); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1104); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMeth",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253,2,['test'],"['test', 'test-logs']"
Testability,Huh. Our tests should be catching this. Looks like we have a failure in our test pipeline somewhere.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7338#issuecomment-876531256:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7338#issuecomment-876531256,2,['test'],"['test', 'tests']"
Testability,I actually will implement special case testing for each different genus that is listed on the wiki page for now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4863#issuecomment-431140730:39,test,testing,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4863#issuecomment-431140730,1,['test'],['testing']
Testability,"I added -m to `gsutil cp` in a previous PR but missed the `gsutil mv` step post-`bq load` - so here that is. tested it from the command line, works well. also confirmed that it will throw an error if one (or more) files has an error:. ```; $ cat test_files_bucket.txt | gsutil -m mv -I gs://dsp-fieldeng-dev/test_mv/. If you experience problems with multiprocessing on MacOS, they might be related to https://bugs.python.org/issue33725. You can disable multiprocessing by editing your .boto config or by adding the following flag to your command: `-o ""GSUtil:parallel_process_count=1""`. Note that multithreading is still available even if you disable multiprocessing. Copying gs://dsp-fieldeng-dev/test_cp/test1.txt [Content-Type=text/plain]...; Copying gs://dsp-fieldeng-dev/test_cp/test2.txt [Content-Type=text/plain]...; CommandException: No URLs matched: gs://dsp-fieldeng-dev/test_cp/test4.txt; Copying gs://dsp-fieldeng-dev/test_cp/test3.txt [Content-Type=text/plain]...; Copying gs://dsp-fieldeng-dev/test_cp/test5.txt [Content-Type=text/plain]...; Copying gs://dsp-fieldeng-dev/test_cp/test6.txt [Content-Type=text/plain]...; Removing gs://dsp-fieldeng-dev/test_cp/test1.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test2.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test3.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test5.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test6.txt...; - [5/5 files][ 37.0 B/ 37.0 B] 100% Done; Operation completed over 5 objects/37.0 B.; CommandException: 1 file/object could not be transferred.; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7129:109,test,tested,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7129,1,['test'],['tested']
Testability,"I added a check to build.gradle to verify that the large (runtime) resources are not lfs pointer files. I also added a test to verify that there is a .git folder, and non-null ToolProvider classLoader (fixes https://github.com/broadinstitute/gatk/issues/4532). To test the pointer file check, I created a branch of this branch with a temporary commit that reverts the addition of the large resources to the Docker staging area, and [submitted](https://travis-ci.org/broadinstitute/gatk/builds/354495062) it to Travis to verify that the build fails when they're not present.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4530#issuecomment-374238158:119,test,test,119,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4530#issuecomment-374238158,2,['test'],['test']
Testability,I added a new test file with 1 line that exhibits the problem. If you run it with the old code the dbSnp annotations are shuffled. It's easy to see if you edit the output renderer to include the field name in the field value.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6178#issuecomment-534735151:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6178#issuecomment-534735151,1,['test'],['test']
Testability,"I added a test according to #4642 , but can't reproduce the error. The user also noted that the error message was badly formed, which is true because it ended with a colon. Now it looks like:; ""Input src/test/resources/org/broadinstitute/hellbender/tools/walkers/ValidateVariants/validationExampleBad.vcf fails strict validation of type CHR_COUNTS: the Allele Count (AC) tag is incorrect for the record at position 1:985447, 1 vs. 2""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6076:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6076,2,['test'],['test']
Testability,"I added a test for @droazen question. @cmnbroad, if you find a way to test the return values for the long name, will be nice; if not, I think that this is ready to go.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2360#issuecomment-276619950:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2360#issuecomment-276619950,2,['test'],['test']
Testability,"I added a version with Path for CreateCommonSAMWriter. However for me to add the CRAM test, could you please tell me what I should pass for the reference? Without it I cannot write to that format, and I don't see an existing test here that writes a CRAM file.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332077503:86,test,test,86,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332077503,2,['test'],['test']
Testability,I added an integration test that tries the same thing with a bucket (it works fine). Merging as soon as green (do it for me if I miss it).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2643#issuecomment-299040179:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2643#issuecomment-299040179,1,['test'],['test']
Testability,"I added commits that fix this now and more tests. I think that it will probably break the integrations tests...so we need to be sure that we like this change before we make the effort to update all of them... One thing I'm not sure about is continuing to use the STANDARD_CONFIDENCE_FOR_CALLING as the threshold...as I think it will have the opposite effect: as the threshold is lowered, you expect to get more variants, but fewer alleles will pass the `passesThreshold` test...so perhaps another argument is needed...I just hate adding arguments...I leave it to more experienced folks to decide.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6363#issuecomment-575130541:43,test,tests,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6363#issuecomment-575130541,3,['test'],"['test', 'tests']"
Testability,I added integration tests for Gnarly and GGVCFs with data from #7483. Back to you @droazen,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7186#issuecomment-947863211:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7186#issuecomment-947863211,1,['test'],['tests']
Testability,"I added integration tests for simple output and including features or verbose. While doing it, I realized that GATK 3.5 included some filters that wasn't included here, and that indels weren't tracked, so I changed also the code to fit the previous implementation. Back to you @akiezun.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1836#issuecomment-221651158:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1836#issuecomment-221651158,1,['test'],['tests']
Testability,"I added one unrelated bugfix. FuncotatorUtils.createReferenceSnippet tries to expand the reference window. When doing this, it should never allow a start less than 1. The last commit addresses that. . Note: I did not see an easy way for createReferenceSnippet() to identify the length of the contig (such as access to the SequenceDictionary), but it would in theory be useful to also check contig size and not exceed it. @droazen or @jonn-smith: it would be helpful if you could approve the test run. ```; 22 Jun 2023 14:54:27,152 DEBUG: 	java.lang.IllegalArgumentException: Invalid interval. Contig:MT start:0 end:20; 22 Jun 2023 14:54:27,154 DEBUG: 		at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:804); 22 Jun 2023 14:54:27,155 DEBUG: 		at org.broadinstitute.hellbender.utils.SimpleInterval.validatePositions(SimpleInterval.java:59); 22 Jun 2023 14:54:27,156 DEBUG: 		at org.broadinstitute.hellbender.utils.SimpleInterval.<init>(SimpleInterval.java:35); 22 Jun 2023 14:54:27,158 DEBUG: 		at org.broadinstitute.hellbender.tools.funcotator.FuncotatorUtils.createReferenceSnippet(FuncotatorUtils.java:1461); 22 Jun 2023 14:54:27,159 DEBUG: 		at org.broadinstitute.hellbender.tools.funcotator.dataSources.gencode.GencodeFuncotationFactory.createIgrFuncotation(GencodeFuncotationFactory.java:2481); 22 Jun 2023 14:54:27,160 DEBUG: 		at org.broadinstitute.hellbender.tools.funcotator.dataSources.gencode.GencodeFuncotationFactory.createIgrFuncotations(GencodeFuncotationFactory.java:2407); 22 Jun 2023 14:54:27,162 DEBUG: 		at org.broadinstitute.hellbender.tools.funcotator.dataSources.gencode.GencodeFuncotationFactory.createDefaultFuncotationsOnVariant(GencodeFuncotationFactory.java:499); 22 Jun 2023 14:54:27,163 DEBUG: 		at org.broadinstitute.hellbender.tools.funcotator.DataSourceFuncotationFactory.createFuncotations(DataSourceFuncotationFactory.java:217); 22 Jun 2023 14:54:27,164 DEBUG: 		at org.broadinstitute.hellbender.tools.funcotator.DataSourceFuncotationFactory.create",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8363#issuecomment-1603412226:491,test,test,491,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8363#issuecomment-1603412226,1,['test'],['test']
Testability,I added some logging to show the partition boundaries and highlight the one the tripped the error (partition 631):. ```; partition 0: 0:9951; partition 1: 0:1085271; partition 2: 0:1900519; partition 3: 0:2658854; partition 4: 0:3369191; partition 5: 0:4271199; partition 6: 0:5234375; partition 7: 0:6165442; partition 8: 0:7043366; partition 9: 0:7945558; partition 10: 0:8834692; partition 11: 0:9712270; partition 12: 0:10597163; partition 13: 0:11491456; partition 14: 0:12370805; partition 15: 0:13369623; partition 16: 0:14335062; partition 17: 0:15273859; partition 18: 0:16143005; partition 19: 0:16852569; partition 20: 0:17683999; partition 21: 0:18625819; partition 22: 0:19514451; partition 23: 0:20434486; partition 24: 0:21333429; partition 25: 0:22209324; partition 26: 0:23102764; partition 27: 0:23983047; partition 28: 0:24866543; partition 29: 0:25761444; partition 30: 0:26663082; partition 31: 0:27541379; partition 32: 0:28425761; partition 33: 0:29319492; partition 34: 0:30281360; partition 35: 0:31192475; partition 36: 0:32077299; partition 37: 0:32961582; partition 38: 0:33876305; partition 39: 0:34855082; partition 40: 0:35781231; partition 41: 0:36672237; partition 42: 0:37620948; partition 43: 0:38541211; partition 44: 0:39457650; partition 45: 0:40367874; partition 46: 0:41269622; partition 47: 0:42168199; partition 48: 0:43088153; partition 49: 0:43971528; partition 50: 0:44872517; partition 51: 0:45791428; partition 52: 0:46682008; partition 53: 0:47642633; partition 54: 0:48631636; partition 55: 0:49673572; partition 56: 0:50675533; partition 57: 0:51594369; partition 58: 0:52498726; partition 59: 0:53406199; partition 60: 0:54327933; partition 61: 0:55241888; partition 62: 0:56229391; partition 63: 0:57216062; partition 64: 0:58233271; partition 65: 0:59158762; partition 66: 0:60117689; partition 67: 0:61089610; partition 68: 0:62043586; partition 69: 0:62985433; partition 70: 0:63941420; partition 71: 0:64889811; partition 72: 0:65830604; partiti,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3717#issuecomment-337936683:13,log,logging,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3717#issuecomment-337936683,1,['log'],['logging']
Testability,"I added the ability to send log4J and Java utility logs to file. Unfortunately, [Esotericsoft's MinLog](https://github.com/EsotericSoftware/minlog), that is used by kryo, [only has the ability to write to stdout](https://github.com/EsotericSoftware/minlog/blob/master/src/com/esotericsoftware/minlog/Log.java#L218).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2751#issuecomment-315402781:51,log,logs,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2751#issuecomment-315402781,2,"['Log', 'log']","['Log', 'logs']"
Testability,"I added the split size option back, and wrote a test for `dirSize`. All feedback should have been addressed now. Back to @droazen.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1432#issuecomment-173633156:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1432#issuecomment-173633156,1,['test'],['test']
Testability,I added the tests for the new method and default to unsorted. Back to you @lbergelson and thanks for reviewing!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3213#issuecomment-316107369:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3213#issuecomment-316107369,1,['test'],['tests']
Testability,"I addressed partially your comments (and fixed a compilation error due to the tests using the previous arguments). One of the major points of discussion are the following:. * `Collection` instead of `List`: I think that the first is more flexible, because a client maybe wants to have a `LinkedHashSet` as the argument to avoid repetition of the same filter. I agree that the abstract class should discourage not honoring the user order.; * Access to methods/fields: I think that the plugin could be used outside GATK in a different way by extending it. I explained some of my usage cases in one of the comments in the code, but just by overriding a simple method the whole plugin could be used very nicely in some of them. I would prefer to do that than copy your code and re-implement the bits that I would like to change. Back to you for your ideas on this, @cmnbroad!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2355#issuecomment-275359208:78,test,tests,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2355#issuecomment-275359208,2,['test'],['tests']
Testability,I addressed the latest comments (using `QualityUtils` static value for capping) and added one more test case. Thanks for the review and back to you @fleharty!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2154#issuecomment-255331248:99,test,test,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2154#issuecomment-255331248,1,['test'],['test']
Testability,"I agree with @sooheelee here, it would be better to use the unclipped 5' end as in mark-duplicates. ~also it would be better if the test; ```java; @Test(dataProvider = ""HasWellDefinedFragmentSizeData""); private void testHasWellDefinedFragmentSize(final String name, final GATKSAMRecord read, final boolean expected) {; Assert.assertEquals(ReadUtils.hasWellDefinedFragmentSize(read), expected);; }; ```; were public, so that it would be active...~ (doesn't need to be public)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3184#issuecomment-311616771:132,test,test,132,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3184#issuecomment-311616771,5,"['Assert', 'Test', 'assert', 'test']","['Assert', 'Test', 'assertEquals', 'test', 'testHasWellDefinedFragmentSize']"
Testability,"I agree with everything @magicDGS said. In general, the native GATK tool benefits from all of the automatic framework management and I/O support (like honoring md5, lenient args, etc.). #2234 also has the validation checking mentioned, and has more tests. (It is true that when #2223 goes in, we'll have to override the default sequence dictionary validation behavior, maybe via disableSequenceDictionaryValidation). So I think we should take the native one, but if we do choose to keep this one for any reason, then I'll still want to do a line-by-line CR before we merge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2232#issuecomment-257306629:249,test,tests,249,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2232#issuecomment-257306629,1,['test'],['tests']
Testability,"I also just got this ConcurrentModificationException in HaplotypeCallerSparkIntegrationTest locally when running tests on one of my branches (this time in `testNonStrictVCFModeIsConsistentWithPastResults`, but the rest of the stack looks the same). I also vaguely recall seeing once before on travis on a branch where all I did was try to update miniconda to a newer version. My local branch doesn't have any dependency changes, so I suspect this is an existing issue that is just showing up intermittently.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6513#issuecomment-602804665:113,test,tests,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6513#issuecomment-602804665,2,['test'],"['testNonStrictVCFModeIsConsistentWithPastResults', 'tests']"
Testability,"I also just noticed that tests are failing on the branch because they still reference the old constants in a number of places:. ```; symbol: variable READ_NAME_LONG_NAME; location: class ReadNameReadFilter; /gatk/src/test/java/org/broadinstitute/hellbender/cmdline/GATKPlugin/GATKReadFilterPluginDescriptorTest.java:117: error: cannot find symbol; { PlatformReadFilter.class.getSimpleName(), ""--"" + PlatformReadFilter.PL_FILTER_NAME_LONG_NAME, ""fakePlatform"" }, ; ```. You'll need to update these references in order to get tests passing.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4103#issuecomment-360806542:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4103#issuecomment-360806542,3,['test'],"['test', 'tests']"
Testability,I am a bot. Admins -- Can you tell me to test this?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2041#issuecomment-235033597:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2041#issuecomment-235033597,1,['test'],['test']
Testability,"I am attempting to create fasta files from specific regions in approximately 270 VCF files. For every other region/gene I've looked at, I have not had this issue. For one particular region (mrr1), I am getting the error seen below. I checked the coverage of the bam file and viewed the vcf in IGV viewer, but notice no problems. Can you please advise? Thank you. Similar to this issue, but am still not sure how to approach it?; https://github.com/broadinstitute/gatk/issues/6260#issue-521418442. Bash script:; ```; #!/bin/bash --login; #SBATCH --time=1:00:00 # limit of wall clock time - how long the job will run; #SBATCH --ntasks=1 # number of tasks - how many tasks (nodes) that you requir; #SBATCH --cpus-per-task=1 # number of CPUs (or cores) per task (same as -c); #SBATCH --mem=50G # memory required per node - amount of memory (in bytes); #SBATCH --job-name=VCF_FastaNEP_CCR; #SBATCH --mail-user=lukaskon@msu.edu; #SBATCH --mail-type=ALL; #SBATCH -o SpeciesID_CCR7_slurm. cd /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/. module load Java/JDK12. for sample in AI7 W18 B5 BU9 I9 R23 Y1; do; base=$(basename ${sample}). gatk-4.2.5.0/gatk SelectVariants -R /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/0_DNAscripts/ReferenceGenome/Botrytis_cinerea.ASM83294v1.dna.toplevel.fa -V /mn; t/research/Hausbeck_group/Lukasko/BotrytisDNASeq/10_FilteredVCF/Plates123/BcinereaP123.SNVonly.filteredPASS_renamed.vcf -sn ${sample} --remove-unused-alternates --exclu; de-sample-name /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/CCR7/ConservedGenes/ExcludeList.args -O /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/CCR7/Cons; ervedGenes/VCFs/${base}.vcf. gatk-4.2.5.0/gatk FastaAlternateReferenceMaker -R /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/0_DNAscripts/ReferenceGenome/Botrytis_cinerea.ASM83294v1.dna.tople; vel.fa -O /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/CCR7/ConservedGenes/mrr1/${base}_mrr1.fasta -L 5:680219-684662 -V /mnt/research/Hausbeck_group/Lu",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8427:530,log,login,530,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8427,1,['log'],['login']
Testability,I am curious why the WDL auto tests did not catch this..,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5019#issuecomment-405760843:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5019#issuecomment-405760843,1,['test'],['tests']
Testability,I am executing the following command @lbergelson ; software/spark/gatk4latest/gatk-launch SortSam --input BAM_BWA/SRR2.sorted.bam --output hpcinfra/hadoop/test.bam --SORT_ORDER queryname,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2300#issuecomment-265470604:155,test,test,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2300#issuecomment-265470604,1,['test'],['test']
Testability,"I am logged in to an old account, that's why I've got no info! I'll henceforth be contribution from @kohlkopf. The contact information is the same. I need to deactivate this ratty old account.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4908#issuecomment-398452676:5,log,logged,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4908#issuecomment-398452676,1,['log'],['logged']
Testability,I am not sure what you’re asking for. Can you be more specific? I feel exhausted fighting the brittle unit and integration tests. I think this is ready for merge.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-445858864:123,test,tests,123,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-445858864,1,['test'],['tests']
Testability,"I am running Gatk SelectVariant with -L and -ip options to filter out variants that are not inside my bed defined region +- interval padding. I am running gatk version 4.1.0.0 and for some of my task fails and returns ``` rc 1 (exit code 1) ``` but there is no clear error message on any logs. . ``` Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Dsamjdk.compression_level=5 -Xms100g -Xmx100g -jar /root/gatk.jar SelectVariants -L /cromwell_root/mybucket/ref/bed_files/mybedfile.bed -R /cromwell_root/mybucket2/NGS/ref/hg38/v0/Homo_sapiens_assembly38.fasta -V /cromwell_root/mybucket/cromwell-execution/mypipeline/2baacdb4-d3c5-4d98-afb2-6578c3ddcda9/call-MT2/calling.Mutect2/a4839059-9209-42da-b106-a91393c47546/call-Filter/input.vcf -ip 20 -O output.vcf --verbosity DEBUG ; ```. Task seems to end prematurely but I can not find out why. Also output file is generated but it only has variants from chr 1 even though my sample is whole exome, which also supports the premature end of task theory. Stdout is empty and stderr seems to end prematurely. [failing_SelectVariants-stderr.log](https://github.com/broadinstitute/gatk/files/5652756/failing_SelectVariants-stderr.log)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6990:288,log,logs,288,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6990,3,['log'],"['log', 'logs']"
Testability,"I am running into an issue with MarkDuplicatesSpark where it runs successfully in local mode, but if I run it in standalone mode with files on the file system or hdfs I get unexpected results. It could be that I'm doing something very basic wrong here, so I'm pasting a bunch of contextual information in case it helps. Thanks in advance!. ```; # Output BAM is correct in local mode:; $GATK_DIR/gatk-launch MarkDuplicatesSpark -I NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam -O test.local.bam. # Outputs empty BAM (i.e. header but no alignments) in standalone mode:; $GATK_DIR/gatk-launch MarkDuplicatesSpark -I NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam -O test.standalone.bam -- --sparkRunner SPARK --sparkMaster spark://localhost:7077. # Errors out with a wrong FS type (stacktrace below):; $GATK_DIR/gatk-launch MarkDuplicatesSpark -I hdfs://bam/NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam -O hdfs://bam/test.hdfs.bam -- --sparkRunner SPARK --sparkMaster spark://localhost:7077; ```. And the stacktrace for the HDFS case (I'm running HDFS in Pseudo-Distributed mode on the same host as I a running Spark standalone mode on): . ```; org.broadinstitute.hellbender.tools.spark.transforms.markduplicates.MarkDuplicatesSpark done. Elapsed time: 0.07 minutes.; Runtime.totalMemory()=1029177344; java.lang.IllegalArgumentException: Wrong FS: hdfs://bam/NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam, expected: file:///; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:645); at org.apache.hadoop.fs.FileSystem.makeQualified(FileSystem.java:465); at org.apache.hadoop.fs.FilterFileSystem.makeQualified(FilterFileSystem.java:119); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:181); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:284); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1444:491,test,test,491,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1444,3,['test'],['test']
Testability,"I am running unit tests locally, but as you know, they take a long time, so I am starting the PR process anyhow. Background: see #5314",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318,1,['test'],['tests']
Testability,"I am trying to use FilterVariantTranches in GATK 4.0.3.0 after running CNNScoreVariants. ```; ./gatk FilterVariantTranches \; -V test.cnnscore.vcf \; --snp-truth-vcf hapmap_3.3.hg19.sites.vcf \; --indel-truth-vcf Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \; --info-key CNN_1D \; --tranche 99.9 --tranche 99.0 --tranche 95 \; --max-sites 8000 \; -O test.cnnscore.filtered.vcf; ```. There are also index files in the directory. ```; test.cnnscore.vcf.idx (generated by CNNScoreVariants); hapmap_3.3.hg19.sites.vcf.idx; Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.idx; ```. and I got the error. ```; Traceback (most recent call last):; File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 124, in <module>; run(); File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 10, in run; write_tranches(args); File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 34, in write_tranches; v_scored = allele_in_vcf(allele, variant, vcf_reader); File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 84, in allele_in_vcf; variants = vcf_ram.fetch(variant.contig, variant.pos-1, variant.pos); File ""pysam/libcbcf.pyx"", line 4321, in pysam.libcbcf.VariantFile.fetch; ValueError: fetch requires an index. at org.broadinstitute.hellbender.utils.python.PythonExecutorBase.getScriptException(PythonExecutorBase.java:75); at org.broadinstitute.hellbender.utils.runtime.ScriptExecutor.executeCuratedArgs(ScriptExecutor.java:126); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeArgs(PythonScriptExecutor.java:170); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:151); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:121); at org.broadinstitute.hellbender.tools.walkers.vqsr.FilterVariantTranches.doWork(FilterVariantTranches.java:134); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:134); at",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4794:129,test,test,129,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4794,3,['test'],['test']
Testability,"I am using ASEReadCounter to call allelic read counts on 1000 genome reference. But, I found ASEReadCounter generatd only header in output file. Here I enclosed my command and stderr log. Please help me to check it. Thank you!. If you are seeing an error, please provide(REQUIRED) :; a) GATK version used: 4.1.8.1; b) Exact command used:. java -Xmx8000m -Djava.io.tmpdir=/broad/hptmp/cbao \; -jar ${path2gatk}/gatk-package-4.1.8.1-local.jar \; ASEReadCounter \; -L scattered.interval_list \; -R Homo_sapiens_assembly19.fasta \; -V 1000G_phase1.snps.high_confidence.b37.vcf.gz \; -I downsample_10k.bam \; -O output.txt --verbosity INFO . c) Entire error log:; 19:13:25.991 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/broad/software/free/Linux/redhat_7_x86_64/pkgs/gatk_4.1.8.1/gatk-package-4.1.8.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; Jun 14, 2021 7:13:26 PM shaded.cloud_nio.com.google.auth.oauth2.DefaultCredentialsProvider warnAboutProblematicCredentials; WARNING: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a ""quota exceeded"" or ""API not enabled"" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/.; 19:13:26.217 INFO ASEReadCounter - ------------------------------------------------------------; 19:13:26.218 INFO ASEReadCounter - The Genome Analysis Toolkit (GATK) v4.1.8.1; 19:13:26.218 INFO ASEReadCounter - For support and documentation go to https://software.broadinstitute.org/gatk/; 19:13:26.219 INFO ASEReadCounter - Executing as cbao@uger-c009.broadinstitute.org on Linux v3.10.0-1160.15.2.el7.x86_64 amd64; 19:13:26.219 INFO ASEReadCounter - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_181-b13; 19:13:26.219 INFO ASEReadCounter - Start Date/Time: June 14, 2021 7:13:25 PM ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7314:183,log,log,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7314,2,['log'],['log']
Testability,"I am working on a test for #1572. I am not sure what a test for #3069 would look like, or if it is really necessary. We simply changed the way GKL outputs warnings and information. Any ideas?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3177#issuecomment-312295566:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3177#issuecomment-312295566,4,['test'],['test']
Testability,"I apologize for the delay, but looking at the stack trace, I found that the problem seems to come from here: https://github.com/GenomicsDB/GenomicsDB/blob/master/src/main/java/org/genomicsdb/reader/GenomicsDBQueryStream.java . The constructor for GenomicsDBQueryStream, on line 209, calls the method jniGenomicsDBInit(). This method then throws an IOException. Perhaps if I do some testing of the C++ code involved, we can get some more information about this exception? I will post again with what I find.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745#issuecomment-675560709:382,test,testing,382,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745#issuecomment-675560709,1,['test'],['testing']
Testability,"I attended a journal club some months ago where a paper stated most researchers use default settings of tools. The paper benchmarked tool with default settings and with tweaked parameters. I can dig up the paper if anyone is interested. So there is some expectation from the user community that the default parameters reflect some sweet spot parameterization for running the tool. . I highly support @cmnbroad's suggestion for making argument sets callable by one flag. For exomes, please do not label flag as `WES`. We want to refer instead to _targeted exomes_, so `EXOMES` or variation is preferable.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4719#issuecomment-386411104:121,benchmark,benchmarked,121,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4719#issuecomment-386411104,1,['benchmark'],['benchmarked']
Testability,"I believe the most recent commit addresses all review comments except for ""missing tests for BAF"".",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7861#issuecomment-1147576906:83,test,tests,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7861#issuecomment-1147576906,1,['test'],['tests']
Testability,I believe this is ready now. Added a couple of unit tests on the AlleleCounter. @mwalker174: Can I get another quick look from you?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7861#issuecomment-1156580810:52,test,tests,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7861#issuecomment-1156580810,1,['test'],['tests']
Testability,I borked the gnarly docker image name. New tests running here: https://gotc-jenkins.dsp-techops.broadinstitute.org/job/warp-workflow-tests/11755/,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-912620107:43,test,tests,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-912620107,2,['test'],['tests']
Testability,"I bring the first point up given the safeguards our previous workflow had in place. In GATK3, CombineVariants checks that all the sample names are unique. You have to add `--genotypemergeoption UNIQUIFY` to allow use of the same normal sample. In GATK4, CreateSomaticPanelOfNormals allows input of the same sample twice and thereby counts the same evidence in the PoN it generates. Granted, I am doing something intentionally stupid here but I can imagine that this could happen accidentally for situations where we are dealing with hundreds of normal samples. . Interestingly, given the same sample twice, for my test case, it generates a PoN that has one less call than the inputs. Here is the command that runs successfully. Note that 2 is a direct copy of 1 made using unix `cp`.; ```; 	gatk-launch CreateSomaticPanelOfNormals \; 		-vcfs 1_normalforpon.vcf.gz \; 		-vcfs 2_normalforpon.vcf.gz \; 		-O 3_discard_practice_pon.vcf.gz; ```. Then I check the number of sites and I see a discrepency.; ```; WMCF9-CB5:working shlee$ gzcat 3_discard_practice_pon.vcf.gz | grep -v '#' | wc -l; 138; WMCF9-CB5:working shlee$ gzcat 1_normalforpon.vcf.gz | grep -v '#' | wc -l; 139; WMCF9-CB5:working shlee$ gzcat 2_normalforpon.vcf.gz | grep -v '#' | wc -l; 139; ```. Probing further we see:; ```; WMCF9-CB5:working shlee$ diff <(gzcat 1_normalforpon.vcf.gz | grep -v '#' | cut -f1,2) <(gzcat 3_discard_practice_pon.vcf.gz | grep -v '#' | cut -f1,2); 139d138; < chrX	153909841; WMCF9-CB5:working shlee$ gzcat 1_normalforpon.vcf.gz | grep 'chrX\t153909841'; chrX	153909841	.	C	A	.	.	DP=11;ECNT=1;POP_AF=1.000e-03;P_GERMLINE=-2.169e-04;TLOD=14.94	GT:AD:AF:ALT_F1R2:ALT_F2R1:FOXOG:MBQ:MCL:MFRL:MMQ:MPOS:REF_F1R2:REF_F2R1:SA_MAP_AF:SA_POST_PROB	0/1:6,5:0.455:3:2:0.400:30,33:0,0:191,278:60,60:11,20:1:5:0.404,0.444,0.455:0.025,0.025,0.950; WMCF9-CB5:working shlee$ gzcat 2_normalforpon.vcf.gz | grep 'chrX\t153909841'; chrX	153909841	.	C	A	.	.	DP=11;ECNT=1;POP_AF=1.000e-03;P_GERMLINE=-2.169e-04;TLOD=14.94	GT:AD",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3510:614,test,test,614,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3510,1,['test'],['test']
Testability,I broke external forks pull requests when the dataflow tests were turned on. They need to be updated so that tests that don't require keys will run without them.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/810:55,test,tests,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/810,2,['test'],['tests']
Testability,"I calculated ASECount of genome resequence data by GATK-3.8 , but I want do the same test by GATK-4.0 , It's so strange when I use GATK-4.0 argument ""--variants"" to substitute ""sites"" of GATK-3.8 , the ERROR remaind me that the ""SNP site is not hetero"" , so l want to ask ; What is the mean of ASECountReader ""sites"" argument of GATK-3.8 ? and what is the corresponding argument in GATK-4.0 ? the answer is undocumented in instruction of ""GATK-3.8 --help"", so l want get exact answer, thank you !",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7712:85,test,test,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7712,1,['test'],['test']
Testability,"I can add that my (rather empirical) tests on 3.8 vs 4.0 show a noticeable increase in runtime (currently around 4-5 hours for an Agilent OneSeq enrichment on a non-AVX capable CPU). I can explain it in part with the lack of downsampling (as mentioned in the last comments of the above GH ticket), but it's still far more than what I used to see with 3.8. Unlike the original reporter, however, I did not test the betas. Is there a standardized way to profile these results, so I can give out more concrete data?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4300#issuecomment-365974850:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4300#issuecomment-365974850,2,['test'],"['test', 'tests']"
Testability,I can confirm I was able to reproduce with:; ```; ./gatk-launch MarkDuplicatesSpark --shardedOutput true -O output.bam --numReducers 0 --apiKey $GOOGLE_API_KEY -I gs://broad-gatk-test-jenkins/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam -- --sparkRunner GCS --cluster $MYCLUSTER; ```,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2517#issuecomment-290261413:179,test,test-jenkins,179,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2517#issuecomment-290261413,1,['test'],['test-jenkins']
Testability,"I can confirm that in my own extensive runs of the tools I've seen it sometimes get hung when out of memory instead of exiting (resulting in bad data for that run). My own benchmarking was with PrintReads on a large file, using various cache buffer sizes. I remember seeing an increase in performance up to about 50MB buffer size and then it flattened out. I would expect a more CPU-intensive (or a more heavily loaded machine) would reduce the impact of the buffer size as I/O ceases to be the bottleneck. I also ran experiments on a 1-cpu machine with VCF and loading a single interval, which I think matches what you are asking about. In that experiment 10MB was enough, adding to the cache did not bring any improvement and of course too large a cache leads to running out of memory.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2640#issuecomment-298972380:172,benchmark,benchmarking,172,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2640#issuecomment-298972380,1,['benchmark'],['benchmarking']
Testability,I can confirm that it's not GenotypeGVCFs on it's own. Going to test @cmnbroad's branch now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2753#issuecomment-304103847:64,test,test,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2753#issuecomment-304103847,1,['test'],['test']
Testability,I can confirm that the fix in #6178 resolves the last failing test here for Java 11. Thanks @lbergelson. (The reason my bulk change to LinkedHashSet/Map didn't work was because it missed `Collectors.toMap()`.),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-534923496:62,test,test,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-534923496,1,['test'],['test']
Testability,"I can put this back, but I do think that many tests are skipped by one or the other of our 3 runs. Consider this line from the [log](https://s3.amazonaws.com/archive.travis-ci.org/jobs/219089434/log.txt):. 194479 tests completed, 7 failed, 9729 skipped",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292029659:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292029659,4,"['log', 'test']","['log', 'tests']"
Testability,"I can reproduce these intermittent failures locally with Ubuntu 18.04 and Java 11. Here's a snippet of one of the hs_err_pid*.logs:. ```; Stack: [0x00007f663c024000,0x00007f663c125000], sp=0x00007f663c121ee0, free space=1015k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); V [libjvm.so+0x8c4cb0]; C [libgkl_pairhmm_omp6531264563224332212.so+0x66e92] JavaData::getData(JNIEnv_*, _jobjectArray*&, _jobjectArray*&)+0x222. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); j com.intel.gkl.pairhmm.IntelPairHmm.computeLikelihoodsNative([Ljava/lang/Object;[Ljava/lang/Object;[D)V+0; j com.intel.gkl.pairhmm.IntelPairHmm.computeLikelihoods([Lorg/broadinstitute/gatk/nativebindings/pairhmm/ReadDataHolder;[Lorg/broadinstitute/gatk/nativebindings/pairhmm/HaplotypeDataHolder;[D)V+4; j org.broadinstitute.hellbender.utils.pairhmm.VectorLoglessPairHMM.computeLog10Likelihoods(Lorg/broadinstitute/hellbender/utils/genotyper/LikelihoodMatrix;Ljava/util/List;Ljava/util/Map;)V+221; j org.broadinstitute.hellbender.utils.pairhmm.VectorPairHMMUnitTest.testLikelihoodsFromHaplotypes(Lorg/broadinstitute/hellbender/utils/pairhmm/PairHMM;Ljava/lang/Boolean;)V+297; v ~StubRoutines::call_stub; ```. I've experimented with changing the testing order of the implementations (e.g., from AVX, OMP, FPGA to OMP, AVX, FPGA), and I've seen failures in both AVX and OMP (i.e., libgkl_pairhmm*.so and libgkl_pairhmm_omp*.so). It seems like the .so that is complained about is switched (i.e, the AVX test segfaults on libgkl_pairhmm_omp*.so and vice versa), and that the test that runs first is always the failing one (if there is a failure). Not sure if this is a real pattern or if it will be useful in debugging, but it seems to be persistent.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607561772:126,log,logs,126,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607561772,6,"['Stub', 'log', 'test']","['StubRoutines', 'logs', 'test', 'testLikelihoodsFromHaplotypes', 'testing']"
Testability,"I can reproduce this locally. It's possible it's already with the major cram changes in the upcoming version of htsjdk, but I haven't tested that yet.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6475#issuecomment-594100152:134,test,tested,134,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6475#issuecomment-594100152,1,['test'],['tested']
Testability,I can see the tests were a massive pain. Thanks for doing making them despite that.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6477#issuecomment-594887527:14,test,tests,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6477#issuecomment-594887527,1,['test'],['tests']
Testability,"I can't pin down a public dataset with this many real alternate alleles, but in my unit testing with fake alternate alleles `(T, TT, ..., n*T)` I found that the merger encountered an OOM when the number of alternate alleles was 2000. I'm not sure where the exact cutoff is though.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6962#issuecomment-730672154:88,test,testing,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6962#issuecomment-730672154,1,['test'],['testing']
Testability,"I can't reproduce this yet. I tried downloading the jar, unzipping it, and running the example command you gave, but I can't reproduce what you're seeing. I modified it for my local files:; ```; java -jar gatk-package-4.2.5.0-local.jar \; GenotypeGVCFs \; -R /Users/louisb/Workspace/gatk/src/test/resources/large/Homo_sapiens_assembly19.fasta.gz \; --variant gendb:///Users/louisb/Workspace/gatk/output \; -O out.vcf \; --annotate-with-num-discovered-alleles \; -stand-call-conf 30 \; --max-alternate-alleles 6 \; --force-output-intervals 20 \; -L 20 \; --only-output-calls-starting-in-intervals \; --genomicsdb-shared-posixfs-optimizations; ```; It runs to completion on my machine. ; My md5sum matches yours so that's not the problem. It's not clear to me what's going on here. Are the previous releases working on your cluster still?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7675#issuecomment-1042010522:292,test,test,292,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7675#issuecomment-1042010522,2,['test'],['test']
Testability,"I can't use it because of that, and it have lots of variables that I'm not using. I'm doing my own base test class, but I'd love to have a more general base test class in GATK to extend, without that many variables specific for this repository. Thanks a lot for your interest!. Should I do something for this PR? . So should I",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-242839085:104,test,test,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-242839085,2,['test'],['test']
Testability,"I can, this only happens on 10 of our 2000 samples (only in WES) none of our 600 WGS seems to have the same issue. It is always on some small contig (you can see here range is 544, but all cases are small ranges like this one). Everything is the default mutect2 pipeline and params (e.g. [gs://genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta](https://console.cloud.google.com/storage/browser/genomics-public-data/resources/broad/hg38/v0?prefix=Homo_sapiens_assembly38.fasta&authuser=jkalfon%40broadinstitute.org)) : except the interval file: [gs://ccleparams/region_file_wgs.list](https://console.cloud.google.com/storage/browser/ccleparams?prefix=region_file_wgs.list&authuser=jkalfon%40broadinstitute.org); GATK 4.2.6.1. . Here is the VCF file to annotate `gs://ccleparams/test/CDS-2jucw0.hg38-filtered.vcf.gz`. Here is the stacktrace:. ```; ....; 10:53:39.044 INFO VcfFuncotationFactory - ClinVar_VCF 20180429_hg38 cache hits/total: 0/2145; 10:53:39.249 INFO VcfFuncotationFactory - dbSNP 9606_b151 cache hits/total: 0/1069225; 10:53:39.520 INFO Funcotator - Shutting down engine; [July 12, 2022 10:53:39 AM GMT] org.broadinstitute.hellbender.tools.funcotator.Funcotator done. Elapsed time: 115.46 minutes.; Runtime.totalMemory()=2050490368; java.lang.StringIndexOutOfBoundsException: String index out of range: 544; at java.lang.String.substring(String.java:1963); at org.broadinstitute.hellbender.tools.funcotator.ProteinChangeInfo.initializeForInsertion(ProteinChangeInfo.java:293); at org.broadinstitute.hellbender.tools.funcotator.ProteinChangeInfo.<init>(ProteinChangeInfo.java:101); at org.broadinstitute.hellbender.tools.funcotator.ProteinChangeInfo.create(ProteinChangeInfo.java:399); at org.broadinstitute.hellbender.tools.funcotator.dataSources.gencode.GencodeFuncotationFactory.createSequenceComparison(GencodeFuncotationFactory.java:2054); at org.broadinstitute.hellbender.tools.funcotator.dataSources.gencode.GencodeFuncotationFactory.createCodingRegionFunc",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6651#issuecomment-1182102653:802,test,test,802,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6651#issuecomment-1182102653,1,['test'],['test']
Testability,"I checked in the spark JAR, and `META-INF/services/java.nio.file.spi.FileSystemProvider` contains . ```; com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider; hdfs.jsr203.HadoopFileSystemProvider; ```. So it looks like the service loader file is being created correctly. I tried to reproduce on GCS by running (essentially the same as @vdauwera's command.). ```; time ./gatk-launch ApplyBQSRSpark \; -I gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam \; -R gs://gatk-legacy-bundles/b37/human_g1k_v37.2bit \; -O gs://gatk-demo-tom/TEST/gatk4-spark/recalibrated.bam \; -bqsr gs://gatk-demo/TEST/gatk4-spark/recalibration.table \; -apiKey $GOOGLE_APPLICATION_CREDENTIALS \; -- \; --sparkRunner GCS \; --cluster cluster-tom \; --num-executors 40 \; --executor-cores 4 \; --executor-memory 10g; ```. But I got another error earlier on. Any ideas what this could be? (I can see the input bam with `gsutil cp`). ```; org.broadinstitute.hellbender.exceptions.UserException: A USER ERROR has occurred: Failed to read bam header from gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam; Caused by:Error reading null at position 0; 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:182); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:376); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.java:357); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:347); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:109); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:167); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.insta",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2287#issuecomment-264909676:434,test,test,434,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2287#issuecomment-264909676,4,"['TEST', 'benchmark', 'test']","['TEST', 'benchmark', 'test']"
Testability,"I commented on the issue (#3688) -- I'm happy with the output and the speedup. @droazen do you want to merge this as-is with the feature effectively hidden? I guess it will effectively get hooked up when the protobuf changes go in, at which point it should get some tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4496#issuecomment-377613909:266,test,tests,266,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4496#issuecomment-377613909,1,['test'],['tests']
Testability,I commented on the message itself. The problem seems to be that we output some log messages to STDOUT that break piping. Picard puts them on STDERR.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4133#issuecomment-357052981:79,log,log,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4133#issuecomment-357052981,1,['log'],['log']
Testability,I confirmed this can output to GCS like so:. ```; $ ./gatk ApplyBQSR \; -I src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate.bam \; --bqsr-recal-file src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.20mb.1RG.table.gz \; -O gs://$BUCKET/test-output/applybqsr.bam ; ```,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4424#issuecomment-366381735:79,test,test,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4424#issuecomment-366381735,3,['test'],"['test', 'test-output']"
Testability,"I created a minimal branch to clean up the way we were passing around credentials. We create a GCSOptions class instead of a DataflowPipelineOptions when we create the pipeline and pass in secrets in at the point instead at the ReadSources level. ReadSources now takes a pipeline instead of the secrets file location. This isn't a long term solution. We should switch the code to get rid of the GenomicsSecret and instead use the more general secret. I think much of the secets factory junk can go away now (they dated from a time when the Dataflow API wasn't built out much. All tests passed locally. Oddly, I now am sometimes getting a dialog about DSDE needing access to basic information about my Google account, not sure source of the issue (maybe the secret I grabbed?), if it's repeatable, or blocking. I recommend the reviewer patch my branch and test locally.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/513:580,test,tests,580,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/513,2,['test'],"['test', 'tests']"
Testability,"I created a panel of normals from 90 WGS TCGA samples with 250bp (~11.5M) bins, which took **~57 minutes** total and produced an **11GB PoN** (this file includes all of the input read counts---which take up 20GB as a combined TSV file and a whopping 63GB as individual TSV files---as well as the eigenvectors, filtering results, etc.). The run can be found in /dsde/working/slee/wgs-pon-test/tieout/no-gc. It completed successfully with **-Xmx32G** (in comparison, CreatePanelOfNormals crashed after 40 minutes with -Xmx128G). The runtime breakdown was as follows:. - ~45 minutes simply from reading of the 90 TSV read-count files in serial. Hopefully #3349 should greatly speed this up. (In comparison, CombineReadCounts reading 10 files in parallel at a time took ~100 minutes to create the aforementioned 20GB combined TSV file, creating 25+GB of temp files along the way.). - ~5 minutes from the preprocessing and filtering steps. We could probably further optimize some of this code in terms of speed and heap usage. (I had to throw in a call to System.gc() to avoid an OOM with -Xmx32G, which I encountered in my first attempt at the run...). - ~5 minutes from performing the SVD of the post-filtering 8643028 x 86 matrix, maintaining 30 eigensamples. I could write a quick implementation of randomized SVD, which I think could bring this down a bit (the scikit-learn implementation takes <2 minutes on a 10M x 100 matrix), but this can probably wait. Clearly making I/O faster and more space efficient is the highest priority. Luckily it's also low hanging fruit. The 8643028 x 30 matrix of eigenvectors takes <2 minutes to read from HDF5 when the WGS PoN is used in DenoiseReadCounts, which gives us a rough idea of how long it should take to read in the original ~11.5M x 90 counts from HDF5. So once #3349 is in, then I think that a **~15 minute single-core WGS PoN could easily be viable**. I believe that a PoN on the order of this size will be all that is required for WGS denoising, if i",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2858#issuecomment-317614503:387,test,test,387,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2858#issuecomment-317614503,2,['test'],['test']
Testability,"I definitely like the idea of moving in this direction, and it will become more compelling as we extend the GATKSparkTool hierarchy, which is currently pretty flat and doesn't mirror the GATKTool hierarchy. I think we should also consider using some of the concepts from the metrics refactoring, which introduces a layer that separates the implementation of the processing logic from the containing tool/driver, and allows a single implementation (i.e. metrics collector, but could be FlagStats, CountReads, SelectVariants, whatever) to be independent of the source and/or destination of the data. It adds more moving parts, but has the advantage of allowing a single implementation to be used from any of Spark tool, standalone tool, Spark pipeline, standalone pipeline, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2217#issuecomment-254216118:373,log,logic,373,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2217#issuecomment-254216118,1,['log'],['logic']
Testability,I did a bit of testing with the following variant and haplotype caller.; ```; 20 10187114 . CAACCTCATTCTTTTGCAAATG C; ```. As far as I can tell you only get a result if the interval contains the entirety of the deletion. We don't output any part of a leading deletion or of a deletion that continues off the edge of the interval. This seems wrong.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6339#issuecomment-572766399:15,test,testing,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6339#issuecomment-572766399,1,['test'],['testing']
Testability,I did a final rebase on this branch to account for the `VariantLocusWalker` and to make a few minor tweaks. Will merge once tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3480#issuecomment-453645733:124,test,tests,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3480#issuecomment-453645733,1,['test'],['tests']
Testability,"I did a really rough benchmarking of the new mode on my local machine. There were ~80,000 samples and ~40,000 variants. Master finished in 139.6 minutes and the new branch finished in 44.74. Significant speedup! At a glance the variants and INFO field attributes look like they match, but I'm running a more thorough comparison now. There's something weird about the logging though. Master output a progress update every 1000 variants, but the new branch only had an update at 1000 and then the total stats when it finished:; ```; 16:19:16.342 INFO ProgressMeter - Current Locus Elapsed Minutes Variants Processed Variants/Minute; Chromosome chr20 position 1279618 (TileDB column 2714308521) has too many alleles in the combined VCF record : 61 : current limit : 50. Fields, such as PL, with length equal to the number of genotypes will NOT be added for this location.; 17:03:54.604 INFO ProgressMeter - chr20:1269692 44.6 1000 22.4; GENOMICSDB_TIMER,GenomicsDB iterator next() timer,Wall-clock time(s),0.36128615400000264,Cpu time(s),0.3515559999999785; 17:03:56.445 INFO ProgressMeter - chr20:1308850 44.7 40156 899.0; 17:03:56.445 INFO ProgressMeter - Traversal complete. Processed 40156 total variants in 44.7 minutes.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3688#issuecomment-376883431:21,benchmark,benchmarking,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3688#issuecomment-376883431,2,"['benchmark', 'log']","['benchmarking', 'logging']"
Testability,"I did a simple experiment and changed the version of Java used in the non-Docker (""17"", although again I'm not sure what this actually resolves to) to that used in the Docker (17.0.1+12). This causes both non-Docker and Docker tests to now fail, rather than just the Docker tests; see https://github.com/broadinstitute/gatk/pull/8174#issuecomment-1402974502. Moreover, the test failures produce exactly the same discrepant numerical results. I think we can probably conclude that the expected test results were generated with ""17"" and that changing to 17.0.1+12 generates different results. This is not too unreasonable; see the Slack thread linked in https://github.com/broadinstitute/gatk/pull/8111#issuecomment-1331407680, for example, which shows that we might be getting into pretty hairy territory and that even changes to things like how HotSpot Intrinsics are implemented in each JVM can cause the numerical differences we see here. So perhaps we can either 1) change the Docker version to the version corresponding to ""17"" or 2) change the non-Docker version to 17.0.1+12 and update the expected results?. Not sure about the failing WDL test yet, but hopefully this is enough to get us started!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1403016955:227,test,tests,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1403016955,10,['test'],"['test', 'tests']"
Testability,"I did a smoke test and ran a slightly out of date version of the VQSR_CNN NeuralNetStreamingExecutor in this environment, so I'm merging this.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3912#issuecomment-351384177:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3912#issuecomment-351384177,1,['test'],['test']
Testability,"I did add new test files, but they should be in git lfs so they don't actually contribute to the repo size (technically). Maybe @droazen or @lbergelson want to weigh in and make sure I added the files correctly?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3255#issuecomment-314769738:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3255#issuecomment-314769738,1,['test'],['test']
Testability,I didn't add a regression test because the most naive implementation of one would require adding a large test file. Closes #4140.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4145:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4145,2,['test'],['test']
Testability,"I didn't add a test for this, but I opened a ticket #2172 to do so.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2173#issuecomment-247720941:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2173#issuecomment-247720941,1,['test'],['test']
Testability,"I didn't realize before that there is no ""include"" (opt-in) validation type arg, only ""exclude"". So I'm not sure what the purpose of having ""ALL"" is in the first place, if the only thing you can usefully do with it is exclude it. I think the best longer term fix would be to add an ""--validation-type-to-include"" arg, and have it default to the everything except for IDs, and then construct the actual types based on merging include/exclude args. But thats a bigger change then just fixing the current (silent do-nothing) default behavior, and requires more error checking for conflicting args. Lets start with changing it so that in the default (no args) case, we log a warning message saying that IDs will be left out since no IDS were provided, and proceed with the remaining validations. Then if we want to get more ambitious we can talk about making the bigger change. Also, as part of the initial fix, it might be a good idea to change `calculateValidationTypesToApply` so that it doesn't modify the `excludeTypes` list directly, since this is the list provided by the user, and instead uses it's own temporary list.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5862#issuecomment-498685279:665,log,log,665,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5862#issuecomment-498685279,1,['log'],['log']
Testability,"I didn't think that test was flakey, but I don't really know anything about it. I restarted to be sure. I'm not sure what's happening exactly the output wasn't helpful... We'll see what happens when it reruns. Hopefully it's just some transient thing.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4044#issuecomment-356122899:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4044#issuecomment-356122899,1,['test'],['test']
Testability,"I didnt see an example, but I could have easily missed it: I am writing an integration test for a walker where the user supplies an output prefix, and the tool created three output files based on that prefix. I want to write an integration test, ideally using IntegrationTestSpec in an intended form. Are there any existing integration tests of tools that use this style argument, and/or is there an intended way to make that work using IntegrationTestSpec? . Most examples I see require the test to supply ""-O %s"", and the test creates a temp file for the output. It then expects to compare that path to the expected file you supply. I see how to work around it (dont use %s and manually check outputs), but I thought I'd check to see if there was an official solution. Thanks in advance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5446:87,test,test,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5446,5,['test'],"['test', 'tests']"
Testability,"I discovered some strange behavior in our test suite. This test in `PrintReadsSparkIntegrationTest` passes:. ```; @Test; public void testReadFiltering() throws IOException {; final File samWithOneMalformedRead = new File(getTestDataDir(), ""print_reads_one_malformed_read.sam"");; final File outBam = createTempFile(""print_reads_testReadFiltering"", "".bam"");. ArgumentsBuilder args = new ArgumentsBuilder();; args.add(""--"" + StandardArgumentDefinitions.INPUT_LONG_NAME);; args.add(samWithOneMalformedRead.getCanonicalPath());; args.add(""--"" + StandardArgumentDefinitions.OUTPUT_LONG_NAME);; args.add(outBam.getCanonicalPath());. runCommandLine(args.getArgsArray());; SamAssertionUtils.assertSamsEqual(outBam, new File(getTestDataDir(), ""expected.print_reads_one_malformed_read.bam""));; }; ```. But if you re-write it to use `IntegrationTestSpec` with the same input, output, and expected file, it fails with `Sort order differs. File 1: nullFile 2: coordinate`:. ```; @Test; public void testReadFiltering() throws IOException {; final File samWithOneMalformedRead = new File(getTestDataDir(), ""print_reads_one_malformed_read.sam"");; final File outBam = createTempFile(""print_reads_testReadFiltering"", "".bam"");. final IntegrationTestSpec spec = new IntegrationTestSpec(; "" --"" + StandardArgumentDefinitions.INPUT_LONG_NAME + "" "" + samWithOneMalformedRead.getCanonicalPath() +; "" --"" + StandardArgumentDefinitions.OUTPUT_LONG_NAME + "" "" + outBam.getCanonicalPath(),; Arrays.asList(new File(getTestDataDir(), ""expected.print_reads_one_malformed_read.bam"").getCanonicalPath()); );. spec.executeTest(""PrintReadsSpark_testReadFiltering"", this);; }; ```. Possibly this is indicative of a bug in `IntegrationTestSpec`?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1164:42,test,test,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1164,7,"['Test', 'assert', 'test']","['Test', 'assertSamsEqual', 'test', 'testReadFiltering']"
Testability,"I discovered that one of the 345 input gvcfs failed VCF validation. When I removed that file and reran with no other changes, I did not get the ""terminate called without an active exception"" error. However, ImportGvcfs still fails; the failure seems to occur immediately after GenomicsDBImport logs success in importing all batches, in each shard. From all the Cromwell logs it looks like everything is working, but the top level workflow execution fails. I've been trying various configurations of memory, scatter count, and #nodes, so I don't have those log files around still. I can rerun with -DGATK_STACKTRACE_ON_USER_EXCEPTION=true and see if I get anything useful.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8076#issuecomment-1295310651:294,log,logs,294,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8076#issuecomment-1295310651,3,['log'],"['log', 'logs']"
Testability,"I don't know how to accomplish that with gradle. Is just keeping the test jvm going all we need? Or does the ui shutdown after each test? We could add an infinitely running ""test"" in a special test group to If we want to be keep the test jvm open. Alternatively if we really need to be able to run tests and then view the UI afterwards we could put together something using https://github.com/hammerlab/spree. It's a minor pain to set up, I had weird ruby packaging problems getting meteor installed, but it solves the problem of ""how do we collect spark logs in a usable way"".",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1193#issuecomment-159679676:69,test,test,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1193#issuecomment-159679676,7,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"I don't know. Do you want me to run them in GATK3?. It's hard to find bams run with GATK3 HC that needed more than 4GB memory because Zamboni has a memory retry loop, so one would have to parse the java options out of the logs like looking for a needle in a haystack. FWIW the Zamboni initial memory allocation is 3GB (https://github.com/broadinstitute/zamboni/blob/develop/Workflows/src/scala/org/broadinstitute/picard/steprunners/variantcalling/HaplotypeCaller.scala) seems to be applicable to exomes and genomes(?) I asked about finding problematic samples in green team slack.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4272#issuecomment-385672647:222,log,logs,222,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4272#issuecomment-385672647,1,['log'],['logs']
Testability,"I don't see anything bad in the Travis logs. Please rerun if necessary, or let me know what you'd like me to fix.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5477#issuecomment-457003839:39,log,logs,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5477#issuecomment-457003839,1,['log'],['logs']
Testability,"I don't think this PR is going to work. I believe the changes I have made will make the tests pass, but in my own testing I'm experiencing the HC dropping variants when running with phasing on in non-ERC mode. I'll update the linked issue.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5772#issuecomment-470688534:88,test,tests,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5772#issuecomment-470688534,2,['test'],"['testing', 'tests']"
Testability,"I don't want the palantir evaluation to be any more complicated than it needs to be, and I'm also in the process of ripping apart the `HaplotypeCaller` tests in another branch -- let's put this PR on hold until after that's done.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3472#issuecomment-324067644:152,test,tests,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3472#issuecomment-324067644,1,['test'],['tests']
Testability,"I don't want to use CombineVariants. A) It's got some hinky combine behavior for certain attributes, B) I still don't want to port it to GATK4, and C) it's a slow as cold molasses. I was stapling together about 200 CNV VCFs, which are on the order of 100 variants each. CombineVariants took 11 hours and bcftools was so fast I couldn't push the button on my stopwatch (which is 17 minutes in the cloud with localizing and pulling Docker images and everything). 11 hours is unacceptable. I'm in favor of specifying the BCF codec for the PoN workflow AND adding a small test to Travis -- it can honestly just be like 10 variants with two multi-allelics. We should test the PoN WDL anyway, which I don't think we do anywhere right now (i.e. not in Terra either.)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6744#issuecomment-678308393:568,test,test,568,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6744#issuecomment-678308393,2,['test'],['test']
Testability,"I doubt much CRAM testing has been done with HaplotypeCaller, and I don't see any integration tests for it using CRAM. FWIW, since we have a CRAM version of the BAM we use for those tests, I did just try running them on the CRAM and they passed. As SooHee mentioned though, you'll have issues if the reference you use is in a GCS bucket, or if you specify intervals and the CRAM (and it's index) are in a bucket.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334831157:18,test,testing,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334831157,3,['test'],"['testing', 'tests']"
Testability,"I find hundreds of those in jstack dump created towards the end of our test run. The wait has no timeout and so these threads never die. ```; ""OutputCapture-3-stdout-Test worker-12"" #1118 daemon prio=5 os_prio=31 tid=0x00007f818d05c000 nid=0xde23 in Object.wait() [0x0000000127aae000]; java.lang.Thread.State: WAITING (on object monitor); at java.lang.Object.wait(Native Method); at java.lang.Object.wait(Object.java:502); at org.broadinstitute.hellbender.utils.runtime.ProcessController$OutputCapture.run(ProcessController.java:315); - locked <0x000000077cf28d98> (a java.util.EnumMap); ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1740:71,test,test,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1740,2,"['Test', 'test']","['Test', 'test']"
Testability,I find it funny we show the samtools command that our tool emulates.... Restarted the failed travis test. I can show you how to do this @chandrans.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2789#issuecomment-307526651:100,test,test,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2789#issuecomment-307526651,1,['test'],['test']
Testability,"I finished the implementation for the draft `SlidingWindowWalker` (I should implement an example and an integration test, but I would like to wait till some issues are solved). made a ""TODO"" about the way in which the intervals are constructed, because I will need a that `ReadShard` have a way to construct a shard without `ReadSource` (either null or empty source), just in case that the implemented `SlidingWindowWalker` does not require reads. @droazen, could you review and give me some feedback about this, because this class is important for other parts of GATK?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1708#issuecomment-215710163:116,test,test,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1708#issuecomment-215710163,1,['test'],['test']
Testability,I fixed the artifact uploading as well now. Everything should be good provided tests are passing. It turned out to be something really simple and dumb.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6007#issuecomment-506503209:79,test,tests,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6007#issuecomment-506503209,2,['test'],['tests']
Testability,"I forgot about this for a month, but tests are finally passing and I addressed comments from @cmnbroad -- rereview?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6570#issuecomment-646855327:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6570#issuecomment-646855327,1,['test'],['tests']
Testability,I forgot to test with the branch after Patrick's changes - using the pre-generated merged VCF header caused issues with BCF2Codec. I have now implemented a workaround.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355786013:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355786013,1,['test'],['test']
Testability,I found a pretty nasty funcotator bug as part of looking into this test failure. I think we will need to patch that as a separate pr.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-533669193:67,test,test,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-533669193,1,['test'],['test']
Testability,"I found that if an indel + snp combination straddles a shard boundary GenotypeGVCFs will produce different calls. More info:. https://gatkforums.broadinstitute.org/gatk/discussion/comment/58230. This is in GATK 3.7. I do not know how this issue is related, would it have been merged in 3.7? https://github.com/broadinstitute/gatk/issues/2735. What is the expected behaviour of sharding in this circumstance? I am unable to perform the test using gatk4+ as it would require immense amounts of recomputation, just to confirm a bug report. Hopefully the devs know if this is expected behaviour or has been fixed already.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5905:435,test,test,435,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5905,1,['test'],['test']
Testability,"I found the data from yet another example of this behavior (see poorly aligned reads in the bamout -- somehow the big fat deletion is preferred over the reference):; ![dlbcl-c_d_pair13 nkap x_119059262 frame_shift_del ctctcttcttggttaaaggatgcaaggg_-](https://user-images.githubusercontent.com/6578548/40785072-7fdff344-64b5-11e8-8539-78267b9a2950.png). tumor exome: /seq/picard_aggregation/C1637/c_D_pair13_Dx/v3/c_D_pair13_Dx.bam; normal exome: /seq/picard_aggregation/C1637/RICOVER_134_N/v2/RICOVER_134_N.bam; M2 tumor bam: /xchip/cga_home/stewart/Cancer/DLBCL/M2/test/c_D_pair13_Dx.bam; M2 normal bam: /xchip/cga_home/stewart/Cancer/DLBCL/M2/test/RICOVER_134_N.bam; M2 combined bam: /xchip/cga_home/stewart/Cancer/DLBCL/M2/test/DLBCL-c_D_pair13.M2_validation_bam.bam; I can't guarantee the data is still around and I don't have the exact intervals, but if it doesn't reproduce in the latest GATK4 M2 then we can forget about it. If it does reproduce then it would put my mind at ease if the prior fixes this case too (and you could let Chip know that it got fixed 2.5 years later :-P)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4829#issuecomment-393531485:565,test,test,565,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4829#issuecomment-393531485,3,['test'],['test']
Testability,I found this useful to debug some results that varied under different test conditions (different processors or something like that). It could be useful for debugging in the future.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7753:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7753,1,['test'],['test']
Testability,"I fully understand, and realize this isnt a priority for the group. Nonetheless, just getting the test data seems like it should be a simple thing if at all possible. i dont know the full reasoning behind why the GATK3 test data are not public, but I have no need to share it beyond myself if that makes this easier.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/616#issuecomment-358031120:98,test,test,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/616#issuecomment-358031120,2,['test'],['test']
Testability,"I get : `500032 tests completed, 20 failed, 1 skipped`. The 2 extra failed tests are spark related (I don't have a spark setup so I assume this is normal); `ExampleAssemblyRegionWalkerSparkIntegrationTest. testExampleAssemblyRegionWalkerNonStrict`; `ExampleAssemblyRegionWalkerSparkIntegrationTest. testExampleAssemblyRegionWalkerStrict`; The skipped test is `testLikelihoodsFromHaplotypes[2](null, false)` in the `VectorPairHMMUnitTest`. I did install git-lfs and downloaded all the required files per the instructions, the files are up to date.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-446230121:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-446230121,6,['test'],"['test', 'testExampleAssemblyRegionWalkerNonStrict', 'testExampleAssemblyRegionWalkerStrict', 'testLikelihoodsFromHaplotypes', 'tests']"
Testability,"I got 348 samples to analyse their variants. I have read several turorials about how to use gatk to get a population vcf. At the beginning , I tried to use CombineGVCFs to get the Gvcf and use SelectVariants to pick the snps out. . CombineGVCFs truns to a error ""Exception in thread ""main"" java.lang.OutOfMemoryError"" .; then I chose to use GenomicsDBImport to do this job. It still doesn't work. First error is ""read_one_line_fully && ""Buffer did not have space to hold a line fully - increase buffer size""; I add ""--genomicsdb-vcf-buffer-size 16384000"" , it causes different error ""Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space"". This is my command and work log.; My java version is ; openjdk version ""1.8.0_152-release""; OpenJDK Runtime Environment (build 1.8.0_152-release-1056-b12). GATK is very helpful in my research, and I really need some help to get it work. gatk --java-options ""-Xmx48g -Xms48G"" GenomicsDBImport -V C1_sentieon_gvcf.gz .......... -V SCAU-106.gvcf.gz -V SCAU-107.gvcf.gz -V SCAU-108.gvcf.gz -V SCAU-128.gvcf.gz --genomicsdb-workspace-path my_database.chr01 -R IRGSP-1.0_genome.fasta --genomicsdb-vcf-buffer-size 16384000 --intervals chr01. 11:48:08.245 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/ayu/anaconda3/share/gatk4-4.0.5.1-0/gatk-package-4.0.5.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; 11:48:09.327 INFO GenomicsDBImport - ------------------------------------------------------------; 11:48:09.327 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.0.5.1; 11:48:09.327 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 11:48:09.327 INFO GenomicsDBImport - Executing as ayu@ayu on Linux v5.15.90.1-microsoft-standard-WSL2 amd64; 11:48:09.327 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_152-release-1056-b12; 11:48:09.327 INFO GenomicsDBImport - Start Date/Time: November 26, 2023 11:48:08 AM CST; 11:48:0",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8593:685,log,log,685,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8593,1,['log'],['log']
Testability,I got exception use run BaseRecalibratorSpark:. > java.io.FileNotFoundException: /home/data/WGS/F002/F002.sort.bam (Too many open files). My version is 4393c86 (after 4.0.10.1).; I have set `ulimit -n 4096` but still got this exception. My command:; `./gatk BaseRecalibratorSpark --tmp-dir /dev/shm/gatktmp/ -I /home/data/WGS/F002/F002.sort.bam -O 1.grp --known-sites /home/data/ref/dbsnp_138.hg19.vcf --known-sites /home/data/ref/1000G_phase1.indels.hg19.sites.vcf --known-sites /home/data/ref/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf -R /home/data/ref/ucsc.hg19.fasta -- --spark-runner SPARK --spark-master local[8] --driver-memory 100G`. Here is the log:. > 19:23:59.384 INFO FeatureManager - Using codec VCFCodec to read file file:///dev/shm/gatktmp/spark-30e238e4-b1b7-41f9-b31e-844f16879051/userFiles-4621c82d-5f86-4b51-9321-ccc84ab49979/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf; 19:23:59.411 INFO BaseRecalibrationEngine - The covariates being used here: ; 19:23:59.411 INFO BaseRecalibrationEngine - 	ReadGroupCovariate; 19:23:59.412 INFO BaseRecalibrationEngine - 	QualityScoreCovariate; 19:23:59.412 INFO BaseRecalibrationEngine - 	ContextCovariate; 19:23:59.412 INFO BaseRecalibrationEngine - 	CycleCovariate; 18/10/17 19:23:59 ERROR Executor: Exception in task 517.0 in stage 0.0 (TID 517); org.broadinstitute.hellbender.exceptions.UserException$NoSuitableCodecs: Cannot read /dev/shm/gatktmp/spark-30e238e4-b1b7-41f9-b31e-844f16879051/userFiles-4621c82d-5f86-4b51-9321-ccc84ab49979/dbsnp_138.hg19.vcf because no suitable codecs found; 	at org.broadinstitute.hellbender.engine.FeatureManager.getCodecForFile(FeatureManager.java:462); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.getCodecForFeatureInput(FeatureDataSource.java:320); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.getFeatureReader(FeatureDataSource.java:300); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:256); 	at org.broadinstitut,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5316:664,log,log,664,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5316,1,['log'],['log']
Testability,"I got the following error and log file from BaseRecalibrator: . ```; Using GATK jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -Xms4000m -jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar BaseRecalibrator -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O CHMI_CHMI3_WGS2.recal_data.csv -knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf -knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz -knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz -L chr11:1+; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.WXYB31; [July 20, 2017 2:18:26 PM UTC] BaseRecalibrator --useOriginalQualities true --knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf --knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz --output CHMI_CHMI3_WGS2.recal_data.csv --intervals chr11:1+ --input gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --reference /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta --mismatches_context_size 2 --indels_context_size 3 --maximum_cycle_value 500 --misma",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3316:30,log,log,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3316,2,['log'],['log']
Testability,"I got the same issue and there is ""**picpicard.PicardException: This program requires input that are either coordinate or query sorted**"" in logfile, sort inputting bam might solve the issue",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8520#issuecomment-2107869537:141,log,logfile,141,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8520#issuecomment-2107869537,1,['log'],['logfile']
Testability,I got this error running tests once. It's unclear what the problem was. It's nice that it bubbles up as a java exception but it's hard to know what the underlying issue was. ```; java.io.IOException: GenomicsDB JNI Error: std::exception; 	at org.genomicsdb.reader.GenomicsDBQueryStream.jniGenomicsDBInit(Native Method); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:209); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:182); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:91); 	at org.genomicsdb.reader.GenomicsDBFeatureReader.generateHeadersForQuery(GenomicsDBFeatureReader.java:200); 	at org.genomicsdb.reader.GenomicsDBFeatureReader.<init>(GenomicsDBFeatureReader.java:85); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.getGenomicsDBFeatureReader(GenomicsDBImportIntegrationTest.java:927); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:551); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:521); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1104); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:1,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,1,['test'],['tests']
Testability,I guess that should be fixed as well. Do you have the command and data to reproduce... I can add the integration test for that.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5434#issuecomment-447125138:113,test,test,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5434#issuecomment-447125138,1,['test'],['test']
Testability,"I had a dumb permissions issue that had me spinning my wheels for a while because of some very terse logging. With the 5 reader threads we use in production I get:; `A USER ERROR has occurred: Couldn't read file. Error was: Failure while waiting for FeatureReader to initialize with exception: com.google.cloud.storage.StorageException: All 20 retries failed. Waited a total of 1918000 ms between attempts` ; (The error message has a placeholder for a path, but for some reason it's empty for me.). Finally I went to one thread, which called the serial FeatureReader creation method and gave me an error that could actually help solve my problem:; ```; com.google.cloud.storage.StorageException: All 20 retries failed. Waited a total of 1918000 ms between attempts; 	at com.google.cloud.storage.contrib.nio.CloudStorageRetryHandler.handleRetryForStorageException(CloudStorageRetryHandler.java:108); 	at com.google.cloud.storage.contrib.nio.CloudStorageRetryHandler.handleStorageException(CloudStorageRetryHandler.java:89); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.checkAccess(CloudStorageFileSystemProvider.java:621); 	at java.nio.file.Files.exists(Files.java:2385); 	at htsjdk.tribble.util.ParsingUtils.resourceExists(ParsingUtils.java:419); 	at htsjdk.tribble.AbstractFeatureReader.isTabix(AbstractFeatureReader.java:243); 	at htsjdk.tribble.AbstractFeatureReader$ComponentMethods.isTabix(AbstractFeatureReader.java:249); 	at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:103); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getReaderFromPath(GenomicsDBImport.java:619); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getFeatureReadersSerially(GenomicsDBImport.java:602); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.traverse(GenomicsDBImport.java:490); 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:893); 	at org.broadinstitute.hellbender.cmd",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4592:101,log,logging,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4592,1,['log'],['logging']
Testability,"I had a look at the source code of [HypergeometricDistribution](HypergeometricDistribution). If I am right, we are doing the following. We are invoking `logProbability()` for all possible `x[0][0]`. For a table with large numbers, we have to compute logBinomial for many iterations (see line 202–222 in the HypergeometricDistribution source code). Typically logBinomial calls three logGamma and each logGamma calls `log()` twice. This involves lots of computation and is not the fastest way to implement Fisher's exact test. A faster way to implement the test takes the advantage of two observations. 1) When carrying the test, we are calling hypergeo(i,m+n,m,k), hypergeo(i+1,m+n,m,k), ... in order, and we can derive hypergeo(i+1,m+n,m,k) from hypergeo(i,m+n,m,k) by simply multiplying a number. This will be much faster than doing the full hypergeo->logBionomial->logGamma->log computation for each `i`. 2) For a large table, often when `i` is sufficiently smaller or larger than `x[0][0]`, the hypergeo probability is small enough to be ignored from the sum. It is not necessary to calculate hypergeo for the full range of `lo<=i<hi`. This trick can also dramatically reduce the number of iterations for large tables. htslib has a [exact test implementation](https://github.com/samtools/htslib/blob/bf753361dab9b1640cf64f7886dbfe35357a43c5/kfunc.c#L201) that considers the two observations. I understand that the time spent on the `FisherExactTest` class probably won't show up at all in a profiler. I am not requesting to improve the implementation now. Just let you know the tricks. In addition, when we use this class for other purposes, a fast exact test may become a good thing.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2307#issuecomment-266289212:153,log,logProbability,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2307#issuecomment-266289212,28,"['log', 'test']","['log', 'logBinomial', 'logBionomial', 'logGamma', 'logProbability', 'test']"
Testability,I had another go at this. Passes tests and doesn't cause the problem on a cluster that Adam encountered (https://github.com/broadinstitute/gatk/issues/1389). Fixes #1266.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1421:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1421,1,['test'],['tests']
Testability,I had restarted the travis test before but they failed I think because we are missing an import line for the documented feature tag. I went ahead and put one in and let's see if the tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2763#issuecomment-307525087:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2763#issuecomment-307525087,2,['test'],"['test', 'tests']"
Testability,"I had to implement a few other features in order to get my unit tests to function properly, so this contains fixes for a few different issues (sorry). Adding in functionality to:. - Only create annotations for a specific set of transcripts via a command-line flag.; - Select the most detailed annotation for a transcript to be in ""cannonical"" or ""best effect"" order. Fixes #3780.; Fixes #3781.; Fixes #3782.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3858:64,test,tests,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3858,1,['test'],['tests']
Testability,"I had trouble restarting my Travis tests, but luckily I can restart yours. Hopefully they pass this time.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519976099:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519976099,1,['test'],['tests']
Testability,I have a branch that fixes the `AS_QD` for both of those sites. @ldgauthier It *did* turn out to be numerical stability in log space. @skwalker Could you re-run with `/dsde/working/davidben/new-qual-october-2018/new-qual-10-30-2018.jar`?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-434735854:123,log,log,123,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-434735854,1,['log'],['log']
Testability,I have a branch with a test that should pass once #3677 is fixed https://github.com/broadinstitute/gatk/tree/lb_add_header_line_to_genomicsdbimport,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3670#issuecomment-334865871:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3670#issuecomment-334865871,1,['test'],['test']
Testability,"I have a few lines of code that dynamically sets the log4j level for command line tools to match the existing VERBOSITY arg, It seems to work in simple testing so I don't think we need to downgrade to do it. Let me know if you want the code, or if you haven't started you can reassign this to me.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/243#issuecomment-115810391:152,test,testing,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/243#issuecomment-115810391,1,['test'],['testing']
Testability,I have a fix for this in [lb_fixing_read_filter_for_bwa](https://github.com/broadinstitute/gatk/tree/lb_fixing_read_filter_for_bwa) but I still need to write a test.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2120#issuecomment-287807856:160,test,test,160,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2120#issuecomment-287807856,1,['test'],['test']
Testability,"I have a good feeling about numerical instability from this point forward because:. * My terminology was lazy. It's not really ""numerical instability,"" which is a deep and frightening topic, but rather just plain old finite precision, which is not nearly so hydra-headed a problem.; * I learned the general rule for avoiding finite precision problems with a qual score, which is: always calculate probabilities of alleles being absent. Previously I was calculating the probability that samples had an allele and subtracting (in log space) that from 1. The problem with that is that for very good GQs this probability is so closed to 1 that quals can become infinite. In this PR we add up the probabilities of genotypes that don't have the allele, which is small but non-zero and everything works fine.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-434769078:528,log,log,528,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-434769078,2,['log'],['log']
Testability,I have a local test case using a modified version of @davidbenjamin 's interval list (cut down to 175000 intervals) and can see thats where the time is going. I'll run it and save the profile - it just takes forever to run.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3788#issuecomment-341741473:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3788#issuecomment-341741473,1,['test'],['test']
Testability,I have a new build of the GKL that I need to test and then integrate into a new gatk. It's not available yet though.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5690#issuecomment-814269292:45,test,test,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5690#issuecomment-814269292,1,['test'],['test']
Testability,I have a test case that fails without it :),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2466#issuecomment-287448731:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2466#issuecomment-287448731,1,['test'],['test']
Testability,"I have a version of this working in the branch `cw_phase_star_allele`, but am holding off on making a PR until https://github.com/broadinstitute/gatk/pull/6859 can be merged to avoid conflicting changes to integration test files.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5651#issuecomment-712158375:218,test,test,218,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5651#issuecomment-712158375,1,['test'],['test']
Testability,"I have added extra checking and some debug code in the branch nalini_issue_5342 -https://github.com/broadinstitute/gatk/tree/nalini_issue_5342. @bhanugandham, would it be possible to run gatk from this branch to get more information?. Also, would it be possible to get what mount and other nfs options were used while mounting the drive?. If we are not able to pinpoint the issue, we can introduce an option to treat NFS like HDFS/GCS, that is, think about NFS eventually getting consistent and react accordingly. But, I would like to test this branch out first to get more information.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5342#issuecomment-433760934:535,test,test,535,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5342#issuecomment-433760934,1,['test'],['test']
Testability,"I have addressed @mwalker174 comments, Will merge once tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3531#issuecomment-327613819:55,test,tests,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3531#issuecomment-327613819,1,['test'],['tests']
Testability,I have also stumbled over this. I am adding a detailed error log.; I think that the incompatibility of accelerated PairHMM with a tmp directory mounted noexec should be mentioned in ; the installation requirements. I found it well-documented in [the troubleshooting section](https://gatk.broadinstitute.org/hc/en-us/articles/18965297287067-How-to-setup-and-use-temporary-folder-for-GATK-local-execution). But everyone with this setup will experience falling back to the slow implementation for no other reason. . ```; INFO NativeLibraryLoader - Loading libgkl_utils.so from jar:file:/; miniconda2/envs/polyploidPhasing/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar!/com/intel/gkl/native/libgkl_utils.so; WARN NativeLibraryLoader - Unable to load libgkl_utils.so from native/libgkl_utils.so (/tmp/libgkl_utils9418239050694741169.so: /tmp/libgkl_utils9; 418239050694741169.so: failed to map segment from shared object: Operation not permitted); WARN IntelPairHmm - Intel GKL Utils not loaded; PairHMM - OpenMP multi-threaded AVX-accelerated native PairHMM implementation is not supported; ```,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8453#issuecomment-1905717389:61,log,log,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8453#issuecomment-1905717389,1,['log'],['log']
Testability,I have asked the user for test data and will update this issue when they get back to me.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6776#issuecomment-683959259:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6776#issuecomment-683959259,1,['test'],['test']
Testability,"I have been able to get the connector working on GCP VMs where I have manually authenticated locally with my own account. I have not successfully gotten it working on a cromwell VM or ortherwise using manually supplied keyfiles. Anecdotal evidence, but its worth mentioning that both: `fs.gs.impl`; `fs.AbstractFileSystem.gs.impl`; seem to be optional for getting a run to work. It seems to have defaulted to the right things in the trials I've tested (though thats not to say the default will always work). I have put in a question on the issue tracker asking about available authentication inside a pipelines API VM.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5996#issuecomment-500846568:445,test,tested,445,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5996#issuecomment-500846568,1,['test'],['tested']
Testability,I have been burned one too many times by the fact that this count silently filters reads for you. Since there is no logging output printing the number of filtered reads in spark it makes more sense to remove filtering from the tool altogether.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5329:116,log,logging,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5329,1,['log'],['logging']
Testability,"I have been running into an issue with Funcotator where some mutations are causing Funcotator to crash because it attempts to query a segment that extends beyond the boundary of the transcript ( see https://github.com/broadinstitute/gatk/issues/6345 ). This pull request addresses the issue by adding a check for transcript length before executing the query. I looked at the code, and Funcotator currently handles problematic sequence queries in `getFivePrimeUtrSequenceFromTranscriptFasta()` by returning an empty string. I modified `getFivePrimeUtrSequenceFromTranscriptFasta()` to also return an empty string when the segment it is trying to retrieve extends beyond the boundary of the transcript. . I have a small VCF that can be used to reproduce the problem using the current code on `master` and the hg38 data source, and I have verified that this pull request allows Funcotator to process the problematic variant without crashing. I did not add the VCF to the tree, but can provide it if that is preferred. Is there any guidance for how to implement integration tests with funcotator? The Funcotator data source I am using is ~12gb, but I would think the problem could be reproduced with 1 transcript and 1 variant. This is my first pull request to GATK, so please let me know if there is anything you would like me to adjust, I'm happy to address any comments.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6546:1070,test,tests,1070,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6546,1,['test'],['tests']
Testability,I have been trying to run the tutorial ( https://gatkforums.broadinstitute.org/gatk/discussion/10913/how-to-run-the-pathseq-pipeline ). When running without the --spark-master the turoail runs smoothly. Bu twhen I try my spark master I get an error. I downloaded SPARK 2.2.0 with hadoop 2.7.3; Java is 1.8.0_131; I set the java classpath (I think correctly); I am aware of this thread: https://github.com/broadinstitute/gatk/issues/3050. But noentheless I cannot get the error to solve. I tried to copy the jar files:; hbase-client-1.4.3.jar; hbase-common-1.4.3.jar; hbase-hadoop2-compat-1.4.3.jar; hbase-protocol-1.4.3.jar; hbase-server-1.4.3.jar; To my spark jar folder. Shall I do smething else? I am also a SPARK newbie. Thank you very much!. ***************** Here is the error log:. ../../../gatk PathSeqPipelineSpark --spark-master spark://xx.xx.xx.xx:7077 --input test_sample.bam --filter-bwa-image hg19mini.fasta.img --kmer-file hg19mini.hss --min-clipped-read-length 70 --microbe-fasta e_coli_k12.fasta --microbe-bwa-image e_coli_k12.fasta.img --conf [jars=~/bin/spark-2.2.0-bin-hadoop2.7/jars/hbase-client-1.4.3.jar] --taxonomy-file e_coli_k12.db --output output.pathseq.bam --verbosity DEBUG --scores-output output.pathseq.txt; Using GATK jar /scratch/home/int/eva/zorzan/bin/gatk-4.0.3.0/gatk-package-4.0.3.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /scratch/home/int/eva/zorzan/bin/gatk-4.0.3.0/gatk-package-4.0.3.0-local.jar PathSeqPipelineSpark --spark-master spark://xx.xx.xx.xx:7077 --input test_sample.bam --filter-bwa-image hg19mini.fasta.img --kmer-file hg19mini.hss --min-clipped-read-length 70 --microbe-fasta e_coli_k12.fasta --microbe-bwa-image e_coli_k12.fasta.img --conf [jars=~/bin/spark-2.2.0-bin-hadoop2.7/jars/hbase-client-1.4.3.jar] --taxonomy-file e_coli_k12.db --output output.pathseq.bam --verbosity DEBUG --scores-output,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4694:783,log,log,783,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4694,1,['log'],['log']
Testability,"I have benchmarked several runs with various parameters for number of samples for emitting denoised copy ratio. In particular, with num_samples = 20, 200, 500.; The average shard run time for num_samples=20 was 2h34m, for num_samples=200 also 2h34m and for num_samples=500 it was 2h35m, so there is really no significant difference in the runtime. . Here are the concordance plots for different parameters for 3 1KG exome samples: ; ![image](https://user-images.githubusercontent.com/4894545/137433767-40666bd6-bca5-4c62-913b-d518239dfab9.png). ![image](https://user-images.githubusercontent.com/4894545/137433966-b18ab68d-defc-409b-b2da-df429b48bb68.png). ![image](https://user-images.githubusercontent.com/4894545/137433981-a3c4cff3-44db-411a-8dc0-c0c9d67c39a1.png). ![image](https://user-images.githubusercontent.com/4894545/137433987-fac46d67-bf3a-4e0f-916d-2b10535f6260.png). ![image](https://user-images.githubusercontent.com/4894545/137433994-c7da1ea8-9a82-449d-8c27-7ca873f8a75e.png). ![image](https://user-images.githubusercontent.com/4894545/137433999-8767faad-41af-488b-83d3-1607c1bc27ad.png). Since there is no effect on the runtime, and there is poor concordance for high denoised copy ratio values it makes sense to raise the default parameter to 200.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5754#issuecomment-944002011:7,benchmark,benchmarked,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5754#issuecomment-944002011,1,['benchmark'],['benchmarked']
Testability,I have built several docker images and showed that it will build without SUDO. The only worry is pushing which I have not tested.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3931#issuecomment-349755716:122,test,tested,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3931#issuecomment-349755716,1,['test'],['tested']
Testability,"I have compare the result of MarkDuplicates and MarkDuplicatesSpark.; the same input SAM file and the default parameter, the MarkDuplicatesSpark have more data marked as duplicated.; Can you give me any suggest how to debug it, why the Spark version have more data marked?. READ_PAIR_DUPLICATES; **11933661 (MarkDuplicates); 11974162 (MarkDuplicatesSpark)**. Here is the metric file; ```. MarkDuplicatesSpark --output hdfs://wolfpass-aep:9000/user/test/spark_412.MarkDuplicates.bam --metrics-file hdfs://wolfpass-aep:9000/user/test/spark_412.MarkDuplicates-metrics.txt --input hdfs://wolfpass-aep:9000/user/test/spark_412.bowtie2.bam --spark-master yarn --duplicate-scoring-strategy SUM_OF_BASE_QUALITIES --do-not-mark-unmapped-mates false --read-name-regex <optimized capture of last three ':' separated fields as numeric values> --optical-duplicate-pixel-distance 100 --read-validation-stringency SILENT --interval-set-rule UNION --interval-padding 0 --interval-exclusion-padding 0 --interval-merging-rule ALL --bam-partition-size 0 --disable-sequence-dictionary-validation false --add-output-vcf-command-line true --sharded-output false --num-reducers 0 --help false --version false --showHidden false --verbosity INFO --QUIET false --use-jdk-deflater false --use-jdk-inflater false --gcs-max-retries 20 --gcs-project-for-requester-pays --disable-tool-default-read-filters false. METRICS CLASS	org.broadinstitute.hellbender.utils.read.markduplicates.GATKDuplicationMetrics LIBRARY	UNPAIRED_READS_EXAMINED	READ_PAIRS_EXAMINED	SECONDARY_OR_SUPPLEMENTARY_RDS	UNMAPPED_READS	UNPAIRED_READ_DUPLICATES READ_PAIR_DUPLICATES	READ_PAIR_OPTICAL_DUPLICATES	PERCENT_DUPLICATION ESTIMATED_LIBRARY_SIZE; lib1	173613	53799913	0	7610605	81003	11974162	585768	0.222961	05870713. MarkDuplicates --INPUT /home/test/WGS_pipeline/TEST/output/orig_412.bowtie2.bam --OUTPUT /home/test/WGS_pipeline/TEST/output/orig_412.MarkDuplicates.bam --METRICS_FILE /home/test/WGS_pipeline/TEST/output/orig_412.MarkDuplicates-metrics.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4675#issuecomment-427229905:448,test,test,448,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4675#issuecomment-427229905,3,['test'],['test']
Testability,"I have corrected all the comments and modified code. For haplotypeCaller Tests should I add AVX_ENABLED for all tests?, apparently Travis is non AVX2 machine so it will skip the test if hardware is not available.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3701#issuecomment-337586625:73,Test,Tests,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3701#issuecomment-337586625,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"I have developed a tool to write on maprfs using Hadoop libraries for our owns projects. But it's not really tested yet and the reader is not done. I prefer to wait it to be complete and to be sure it works perfectly. Btw, it's in scala. [Here a file](https://github.com/broadinstitute/gatk/files/1542351/HadoopWriter.scala.txt) to give you an idea, keep in mind it's not clean and complete. I tried with `maprfs:/` and `maprfs://`but still was getting an error but not the same:; >/home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input maprfs:///spark-ics/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --javaOptions -Dmapr.library.flatclass --sparkRunner SPARK --sparkMaster yarn. > ***********************************************************************; > ; > A USER ERROR has occurred: Failed to read bam header from maprfs:///spark-ics/user/axverdier/data/710-PE-G1.bam; > Caused by:/spark-ics/user/axverdier/data/710-PE-G1.bam; > ; > ***********************************************************************; > org.broadinstitute.hellbender.exceptions.UserException: Failed to read bam header from maprfs:///spark-ics/user/axverdier/data/710-PE-G1.bam; > Caused by:/spark-ics/user/axverdier/data/710-PE-G1.bam; > 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:207); > 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:390); > 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.java:370); > 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:360); > 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); > 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:119); > 	at org.broadinstitute.hellbe",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3936#issuecomment-350232988:109,test,tested,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3936#issuecomment-350232988,2,['test'],"['tested', 'testing']"
Testability,"I have encountered a discrepancy between the IGV visualization and the VCF output generated by GATK HaplotypeCaller. Here are the details of the issue:. IGV Visualization:. When inspecting the BAM file in IGV, I observe 16 reads, excluding artificial reads. Among these, 2 reads show an insertion, and the remaining are wildtype.; Including artificial reads, there are a total of 20 reads: 17 are wildtype, and 3 show an insertion. The variant is reported in the VCF file as follows:. `chr6 170561961 . G GCAA 133.98 PASS AC=2;AF=1;AN=2;DP=17;ExcessHet=3.0103;FS=0;MLEAC=2;MLEAF=1;MQ=60;QD=22.33;SOR=0.693 GT:AD:DP:GQ:PL 1/1:0,6:6:18:214,18,0`. Discrepancy Observed:. The DP value in the INFO field is 17.; The DP value in the FORMAT field is 6.; The AD value is 0,6.; Questions:. What could be the cause of the mismatch between the read counts observed in IGV and the DP values reported in the VCF file?; Why is there a discrepancy between the INFO field DP value and the FORMAT field DP value?. Command Used:; ```; shell(; ""gatk --java-options '{java_opts}' HaplotypeCaller {extra} ""; ""-L {snakemake.input.interval_list} ""; ""-R {snakemake.input.ref} {bams} ""; ""-A StrandBiasBySample ""; ""-bamout {snakemake.output.bam} ""; ""-O {snakemake.output.gvcf} {dbsnp} {log}""; ); ```; GATK Version:; gatk4==4.2.0.0. I have attached the IGV screenshot for your reference. I would appreciate any insights or suggestions regarding this issue. Thank you!; <img width=""1011"" alt=""image"" src=""https://github.com/user-attachments/assets/48337fa9-5c66-405d-abd6-12da223400e9"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8956:1260,log,log,1260,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8956,1,['log'],['log']
Testability,"I have found an error in the _ClippingOp_ class used by the _ReadClipper_. The offending function is _cleanHardClippedCigar_. In this function a logic error results in the returned _CigarShift_ object always having zero values for the _shiftFromStart_ and _shiftFromEnd_ members. The offending loop is shown below:; `. for (int i = 1; i <= 2; i++) {; final int shift = 0;; int totalHardClip = 0;; boolean readHasStarted = false;; boolean addedHardClips = false;. while (!cigarStack.empty()) {; final CigarElement cigarElement = cigarStack.pop();. if (!readHasStarted &&; cigarElement.getOperator() != CigarOperator.DELETION &&; cigarElement.getOperator() != CigarOperator.SKIPPED_REGION &&; cigarElement.getOperator() != CigarOperator.HARD_CLIP) {; readHasStarted = true;; } else if (!readHasStarted && cigarElement.getOperator() == CigarOperator.HARD_CLIP) {; totalHardClip += cigarElement.getLength();; } else if (!readHasStarted && cigarElement.getOperator() == CigarOperator.DELETION) {; totalHardClip += cigarElement.getLength();; } else if (!readHasStarted && cigarElement.getOperator() == CigarOperator.SKIPPED_REGION) {; totalHardClip += cigarElement.getLength();; }. if (readHasStarted) {; if (i == 1) {; if (!addedHardClips) {; if (totalHardClip > 0) {; inverseCigarStack.push(new CigarElement(totalHardClip, CigarOperator.HARD_CLIP));; }; addedHardClips = true;; }; inverseCigarStack.push(cigarElement);; } else {; if (!addedHardClips) {; if (totalHardClip > 0) {; cleanCigar.add(new CigarElement(totalHardClip, CigarOperator.HARD_CLIP));; }; addedHardClips = true;; }; cleanCigar.add(cigarElement);; }; }; }; // first pass (i=1) is from end to start of the cigar elements; if (i == 1) {; shiftFromEnd = shift;; cigarStack = inverseCigarStack;; }; // second pass (i=2) is from start to end with the end already cleaned; else {; shiftFromStart = shift;; }; }; }; `. Notice that the variable _shift_ is initialized, but never assigned to again for the duration of the loop. Thus _shiftFromSta",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6130:145,log,logic,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6130,1,['log'],['logic']
Testability,"I have four phased variants in close proximity that have the following pattern:. ```; chrA 10 ... GT:PS 0|1:1; chrA 20 ... GT:PS 0|1:2; chrA 30 ... GT:PS 0|1:1; chrA 40 ... GT:PS 0|1:2; ```. These four variants are wholly contained in a single set of reads. There are of course other reads that partially span them. The first variant is a deletion, while the remaining three are SNVs.; Examining the reads, there are two haplotypes since:; 1. Alternate for the 1st and 3rd read; 2. Alternate for the 2nd and 4th read. I would have expected them all to have the same phase set (`PS`) value. I have a test case I can share privately (let me know a good email to send it to confidentially).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6845:599,test,test,599,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6845,1,['test'],['test']
Testability,I have imported into GenomicDB and am using 3200 intervals to paralelise across hg38 but most intervals don't finish within four hours. It worked decently for ten to fifteen samples but not now that I have 108 samples. Can you test it out on such data to reproduce?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8637:227,test,test,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8637,1,['test'],['test']
Testability,I have no OSX laptop. Can I solicit someone in GATK Engine team? @droazen @lbergelson @jonn-smith I can provide everything you need to run a test on the jar file...,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4723#issuecomment-386162511:141,test,test,141,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4723#issuecomment-386162511,1,['test'],['test']
Testability,I have noticed after looking at the HaplotypeCaller command line in some recent forum posts (https://gatk.broadinstitute.org/hc/en-us/community/posts/7293912288795-Haploytpe-caller-shows-me-that-0-read-s-were-filtered-by-MappingQualityAvailableReadFilter-etc) that the output of the filtering summary can be confusing if a lot of reads were processed. It can be very useful to know that a lot of reads are lost to a particular filter as an important sanity check for processing but unfortunately that information can be very confusing and not helpful without some indication of the total number of reads that were processed to begin with. I propose that we add to the `CountingReadFilter` code additional logic to keep track of the unfiltered reads as well so we can report both numbers to the user and clear up potential confusion.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7944:705,log,logic,705,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7944,1,['log'],['logic']
Testability,"I have noticed in debugging an issue that there is an inconsistency in the overlaps methods in a somewhat pathological edge case that we should probably address somewhere in the future. In the case where a read (locatable) consumes no reference bases I see inconsistent behavior if the read is ""aligned"" to the last base in a simple interval. To demonstrate I have this read (which is all insertions): ; `<READNAME>	99	chr1	72515809	34	70I81H	=	72515809	70	ATATATGTATACATATATATGTACATATATATGTATACATATATGCACATATATATGTATACATATATAT	....`; and the simple interval: ; `chr1:72515804-72515808`; Calling the method `read.overlaps(simpleInterval)` returns true, whereas calling the method `simpleInterval.overlaps(read)` returns false. Doing a little digging into why this is, it appears that the `.overlaps()` method that gets called in the former case maps to the Locatable overlaps method which calls return `withinDistanceOf(other, 0);` which from what I can tell fails in this case because `<READNAME>.getEnd()` returns `72515808` for this all insertion read. The latter case seems to map to -> `overlapsWithMargin(other, 0);` which doesn't end up getting tripped by the `read.getEnd()` result. . This is a very marginal case and perhaps it is best addressed by making sure we aren't producing meaningless all insertion reads but we should probably add some better tests to the locatable/simpleInterval overlaps methods and change them so they are absolutely concordant in every pathological edge case so this doesn't cause issues for us in the future.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6898:1361,test,tests,1361,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6898,1,['test'],['tests']
Testability,I have seen this 4 times in the last week or so. e2cd74d3-33b9-47de-98ce-0bdd22729fa0; gs://broad-jg-dev-11k-call-set/JointGenotyping/e2cd74d3-33b9-47de-98ce-0bdd22729fa0/call-ImportGVCFs/shard-179/ImportGVCFs-179-stderr.log. 94b9b228-852b-40ab-8791-16edd4a229c1; gs://broad-jg-dev-11k-call-set/JointGenotyping/94b9b228-852b-40ab-8791-16edd4a229c1/call-ImportGVCFs/shard-684/ImportGVCFs-684-stderr.log. 0cb36821-b8bf-4e6d-a352-07b101f6b7d1; gs://broad-jg-dev-11k-call-set/JointGenotyping/0cb36821-b8bf-4e6d-a352-07b101f6b7d1/call-FinalGatherVcf/FinalGatherVcf-stderr.log. 6ab86d5a-fc66-41ac-bd14-2df027c94629; gs://broad-jg-dev-11k-call-set/JointGenotyping/6ab86d5a-fc66-41ac-bd14-2df027c94629/call-ImportGVCFs/shard-143/attempt-2/ImportGVCFs-143-stderr.log,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3735#issuecomment-338713618:221,log,log,221,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3735#issuecomment-338713618,4,['log'],['log']
Testability,"I have some code to do that in a test project - if you are interested on it, I can submit a PR with my proposal. It will be nice for an idea that I have in mind, and if it is used also in GATK it would have more support (as a single developer, my reviews are not as good as in a team). Just let me know if you wanna port the code to some utility class!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4865#issuecomment-396600621:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4865#issuecomment-396600621,1,['test'],['test']
Testability,"I have tested several program functions by GATK4, some of them work pretty well. GATK4 does a great job to organize all steps by different tools like BWA, samtools, picard. Besides, it seems that there is also some optimization inside. Like ""cleanSam"" step, GATK4 cuts the time half compared to the one using Picard. (From 8 mins to 4 mins on same data) . However, the problem about GATK4 is that some programs fail due to java related problem (Maybe some reasons else). So far, the functions I failed are ""FastqToSam"" and ""ReadsPipelineSpark "". . Note that, I am using spark locally not scale-out cluster. So the command I am running ReadsPipelineSpark is as below(with oracle java8). Then it gives me java error. . ./bin/gatk/gatk­launch \; ReadsPipelineSpark \; -O hdfs:<PATH>CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam.md.bqsr \; -I hdfs:<PATH>/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam \; -R hdfs:<PATH>human_g1k_v37.2bit \; --knownSites hdfs:<PATH>dbsnp_138.b37.excluding_sites_after_129.vcf \; --shardedOutput true \; --emit_original_quals \; --duplicates_scoring_strategy SUM_OF_BASE_QUALITIES. All the failure seems to do with the java.lang.IllegalArgumentException with different error causes:; 1. readpipeline: java.lang.IllegalArgumentException: Null object is not allowed here; 2. fastqtosam: java.lang.IllegalArgumentException: Self-suppression not permitted",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1876:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1876,1,['test'],['tested']
Testability,I have tested that this explicitly works on the users data. I decided it was simplest to just check for mis-trimming at the very last stage. I'm a little weary about the change of the locus for the ref context from being the culledVC to being the mergedVC. . Fixes #5994,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6044:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6044,1,['test'],['tested']
Testability,"I have tested the output by running building the docker on my machine, here is the command line output demonstrating that it works: ; ```; 12:31:13 emeryj@wma77-b9c:~/hellbender/gatk $ docker run -it 2d5bf2e7022f; root@98ca222ca7ae:/gatk# ls build/libs/; gatk-4.beta.6-6-g92fc3a2.jar gatk-spark.jar hellbender.jar; gatk-package-4.beta.6-6-g92fc3a2-local.jar gatk.jar ; gatk-package-4.beta.6-6-g92fc3a2-spark.jar hellbender-spark.jar ; root@98ca222ca7ae:/gatk# exit ; exit; 12:31:43 emeryj@wma77-b9c:~/hellbender/gatk $ docker run -it ef280f7ce04f; root@d0413e8512b4:/gatk# ls build/libs/; gatk-4.beta.6-SNAPSHOT.jar gatk-spark.jar hellbender.jar; gatk-package-4.beta.6-SNAPSHOT-local.jar gatk.jar ; gatk-package-4.beta.6-SNAPSHOT-spark.jar hellbender-spark.jar ; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3719#issuecomment-337965962:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3719#issuecomment-337965962,1,['test'],['tested']
Testability,"I have tested this with a fresh `gcloud` client and have not been able to reproduce the error. I did find an article from someone else who got the `400: invalid_grant` error: https://blog.timekit.io/google-oauth-invalid-grant-nightmare-and-how-to-fix-it-9f4efaf1da35. The long and short of it is that it's an authentication issue. Can you verify that the authentication you're using on the terminal is valid? That is, can you get at other public resources on gcloud?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6926#issuecomment-725097056:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6926#issuecomment-725097056,1,['test'],['tested']
Testability,"I have the following instruction in a handson tutorial:. > If you haven't already done so, create a symlink to the gatk-launch script. Navigate back to /gatk and test the symlink by listing the tools available.; ```; cd /usr/local/bin; ln -s /gatk/gatk-launch gatk-launch; cd /gatk; gatk-launch –-list; ```. @vdauwera says:; > wouldn't it be simpler to export to path?. My reply:; > Environmental variables persist ephemerally. I haven't tested persistence when containers are stopped and restarted. @vdauwera requests:; > hmm, could also add to path in the bash profile... we should ask the devs if it's possible to set that up in the docker itself, for next time. Could we have both an environmental variable and a symlink that invokes the launch script in the Docker from any location? Thanks.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3899:162,test,test,162,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3899,2,['test'],"['test', 'tested']"
Testability,"I have the same error with HaplotypeCallerSpark gatk-4.2.0.0 without interval (-L) parameter:; gatk HaplotypeCallerSpark -R ucsc.hg19.fasta -I CHH43_recal.bam -O CHH43_raw.vcf.gz; But when I add -L CHH43.bed parameter the process finished correctly, without errors. Not Spark version of HaplotypeCaller ends correctly in all cases.; [HCSpark.log](https://github.com/broadinstitute/gatk/files/6638429/HCSpark.log)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7199#issuecomment-859555158:342,log,log,342,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7199#issuecomment-859555158,2,['log'],['log']
Testability,"I have the same error; let me know if it would be helpful to have my input files, logs, etc. I'm seeing it in version 4.1.4.0.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6289#issuecomment-577356900:82,log,logs,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6289#issuecomment-577356900,1,['log'],['logs']
Testability,"I have the same problem and I use `sed` to change the header line before merging.; But could you consider changing the allele separator in this field to `,` and keep the `Number=A` in the header to allow for easy splitting of the field with `bcftools norm -m`, as in the examples below:; `Number=A` - split; ```; zcat test.vcf.gz ; ##fileformat=VCFv4.2; ##INFO=<ID=AS_FilterStatus,Number=A,Type=String,Description=""Some Description"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT s1 s2; chr1 1000 . A T,C 100 PASS ANNOTATION=aboutT,aboutC GT 0/2 0/1. bcftools norm -m -any test.vcf.gz; ##fileformat=VCFv4.2; ##FILTER=<ID=PASS,Description=""All filters passed"">; ##INFO=<ID=AS_FilterStatus,Number=A,Type=String,Description=""Some Description"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; ##contig=<ID=chr1>; ##bcftools_normVersion=1.10.2+htslib-1.10.2; ##bcftools_normCommand=norm -m -any test.vcf.gz; Date=Wed Jun 8 20:51:27 2022; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT s1 s2; chr1 1000 . A T 100 PASS AS_FilterStatus=aboutT GT 0/0 0/1; chr1 1000 . A C 100 PASS AS_FilterStatus=aboutC GT 0/1 0/0; ```; `Number=.` - no split; ```; zcat test1.vcf.gz ; ##fileformat=VCFv4.2; ##INFO=<ID=AS_FilterStatus,Number=.,Type=String,Description=""Some Description"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT s1 s2; chr1 1000 . A T,C 100 PASS AS_FilterStatus=aboutT|aboutC GT 0/2 0/1. bcftools norm -m -any test1.vcf.gz; ##fileformat=VCFv4.2; ##FILTER=<ID=PASS,Description=""All filters passed"">; ##INFO=<ID=AS_FilterStatus,Number=.,Type=String,Description=""Some Description"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; ##contig=<ID=chr1>; ##bcftools_normVersion=1.10.2+htslib-1.10.2; ##bcftools_normCommand=norm -m -any test1.vcf.gz; Date=Wed Jun 8 21:14:22 2022; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT s1 s2; chr1 1000 . A T 100 PASS ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6857#issuecomment-1150425563:318,test,test,318,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6857#issuecomment-1150425563,3,['test'],['test']
Testability,"I have the same problem. The error seems to occur when the number of alleles is exactly one greater than the value of ` --max-alternate-alleles`. Note that is the case in Andrius's output above: it throws a warning, but no error, when there are more than 7 alleles, but when there are exactly 7 alleles (one more than the default max of 6) it errors out. . I have tried this on a number of different chromosomes (small test cases with 4 Chinook salmon) and always get the error immediately after a warning about having 7 alleles. On one chromosome, an earlier warning about 8 alleles causes no error, UNLESS I set `--max-alternate-alleles` to 7, in which case, the position with 8 alleles causes the error immediately after the warning. This is evident from the two log files for two different runs, below. ### Log from run with value of `--max-alternate-alleles` left at default value of 6:; ```; on-chinookomes-dna-seq-gatk-variant-calling]--% gatk --java-options ""-Xmx4g"" GenotypeGVCFs -R resources/genome.fasta -V gendb://results/genomics_db/chromosomes/CM031199.1 -O results/vcf_parts/CM031199.1.vcf.gz. Using GATK jar /home/eanderson/Documents/projects/yukon-chinookomes-dna-seq-gatk-variant-calling/.snakemake/conda/cd50d464/share/gatk4-4.2.4.1-0/gatk-package-4.2.4.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx4g -jar /home/eanderson/Documents/projects/yukon-chinookomes-dna-seq-gatk-variant-calling/.snakemake/conda/cd50d464/share/gatk4-4.2.4.1-0/gatk-package-4.2.4.1-local.jar GenotypeGVCFs -R resources/genome.fasta -V gendb://results/genomics_db/chromosomes/CM031199.1 -O results/vcf_parts/CM031199.1.vcf.gz; 22:17:18.737 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/eanderson/Documents/projects/yukon-chinookomes-dna-seq-gatk-variant-calling/.snakemake/conda/cd50d464/share/gatk4-4.2.4.1-0/gatk-package-4.2.4.1-loc",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7639#issuecomment-1014180059:419,test,test,419,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7639#issuecomment-1014180059,3,"['Log', 'log', 'test']","['Log', 'log', 'test']"
Testability,"I have to say, I loathe the logger ecosystem... So much complexity for such boring results.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3416#issuecomment-320788037:28,log,logger,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3416#issuecomment-320788037,1,['log'],['logger']
Testability,"I have to say, too bad we don't have a mechanism in place that allows for the full reference, e.g. NIO only the contigs or portions thereof that are needed for a particular analysis @droazen @cmnbroad. That would make making test data so much easier. I would imagine this is simple to implement, given the reference is indexed. Such a feature would be useful for cloud analyses. I have to jump through ridiculous hoops to make small test data.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-373131560:225,test,test,225,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-373131560,4,['test'],['test']
Testability,"I haven't been able to reproduce this locally by running `ReadsPipelineSparkIntegrationTest` repeatedly. In fact, it looks like another test is interacting with this one, since the stack trace references HDFS paths, but this test doesn't use HDFS at all. Another oddity: `TribbleIndexedFeatureReader` implies it's reading a vcf.idx file, but `HaplotypeCallerSpark`, where the exception occurs, is not reading any VCF files (although BQSR does earlier in the pipeline for known sites). Also, we shouldn't be serializing `FeatureDataSource` objects with remote resources any more, since we use Spark `--files` to copy them to the worker nodes (see https://github.com/broadinstitute/gatk/blob/master/src/main/java/org/broadinstitute/hellbender/engine/spark/GATKSparkTool.java#L699). So we shouldn't be seeing `FeatureDataSource` trying to serializing with an HDFS path. Has anyone seen this running locally on their machine, or only on Travis?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5680#issuecomment-469224499:136,test,test,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5680#issuecomment-469224499,2,['test'],['test']
Testability,"I haven't done anything on this, although we recently talked about the increased need for a separate test artifact. But I'm not sure when we'll get to it. The new runtime resources do add more incentive to do something, though AFAIK they will be a few 10s of MB. Not great but not super huge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3900#issuecomment-376147299:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3900#issuecomment-376147299,1,['test'],['test']
Testability,"I haven't seen this in a while either, though I almost never run the whole test suite locally any more. I just tried it and these tests passed, so I'll close this for now, and re-open if it resurfaces.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349#issuecomment-342157836:75,test,test,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349#issuecomment-342157836,2,['test'],"['test', 'tests']"
Testability,"I haven't seen those before and have no emotional investment. On Fri, Jun 8, 2018 at 11:56 AM, David Benjamin <notifications@github.com>; wrote:. > DiploidGenotype and ProbabilityVector are not used except in their own; > unit tests. Delete? @ldgauthier <https://github.com/ldgauthier>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/issues/4866>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AGRhdGmGPyRVd9KwG3OauuYs9TDz26F0ks5t6p6TgaJpZM4UgjvA>; > .; >. -- ; Laura Doyle Gauthier, Ph.D.; Group Leader, Germline Methods; Data Sciences Platform; gauthier@broadinstitute.org; Broad Institute of MIT & Harvard; 320 Charles St.; Cambridge MA 0214",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4866#issuecomment-395839722:227,test,tests,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4866#issuecomment-395839722,1,['test'],['tests']
Testability,"I haven't test it by myself (all my computers have the default locale to US-En), but regarding https://github.com/broadinstitute/gatk/pull/3447#discussion_r134548399, it looks like it won't work.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3483#issuecomment-324566619:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3483#issuecomment-324566619,1,['test'],['test']
Testability,I haven't tested these in Terra (or in the cloud at all). But the local tests should now be passing. Happy to test this in Terra if there's an easy way to do that. @davidbenjamin or @fleharty care to review?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6108:10,test,tested,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6108,3,['test'],"['test', 'tested', 'tests']"
Testability,I haven't updated the tests since I want confirmation on approach and the answers to our previous questions. Updating the test files is something I only want to do once.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-436771688:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-436771688,2,['test'],"['test', 'tests']"
Testability,"I havent looked into this in detail, but if the description above is right, would running this with a GenomicsDB data source and ""--max-alternate-alleles=1"" likely trigger this? The reasoning is that there are probably sites in your existing test data with more than one ALT?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7639#issuecomment-1023475315:242,test,test,242,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7639#issuecomment-1023475315,1,['test'],['test']
Testability,"I hit this error as well when I was doing a ""plumbing"" test for the new exome joint calling (I meant to merge the intervals like you suggested, but I made a mistake). That was just one sample over half of chr20. I can email you the inputs.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5300#issuecomment-437364345:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5300#issuecomment-437364345,1,['test'],['test']
Testability,"I hit this same segmentation violation issue on 4 separate branches on travis today (I believe in each case only the Java 11 unit test job failed - the rest of the matrix succeeded). It seems to be intermittent since, so far rerunning the job seems to make it go away. . ```; Finished 210000 tests; Finished 220000 tests; Finished 230000 tests; Finished 240000 tests; Finished 250000 tests; Finished 260000 tests; Finished 270000 tests; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f2bcaefd0f2, pid=10075, tid=10100; #; # JRE version: OpenJDK Runtime Environment (11.0.2+9) (build 11.0.2+9); # Java VM: OpenJDK 64-Bit Server VM (11.0.2+9, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # V [libjvm.so+0x8fd0f2] jni_GetByteArrayElements+0x72; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/travis/build/broadinstitute/gatk/core.10075); #; # An error report file with more information is saved as:; # /home/travis/build/broadinstitute/gatk/hs_err_pid10075.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #. Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.pairhmm.VectorPairHMMUnitTest > testLikelihoodsFromHaplotypesForAvailableImplementations SKIPPED; Results: SUCCESS (276386 tests, 276385 successes, 0 failures, 1 skipped). > Task :test FAILED; ```. Entire log is attached. ; [java11segv.txt](https://github.com/broadinstitute/gatk/files/4747769/java11segv.txt)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6649:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6649,14,"['log', 'test']","['log', 'test', 'testLikelihoodsFromHaplotypesForAvailableImplementations', 'tests']"
Testability,"I implemented a very simple test for tracking Ns. Is it enough, @akiezun?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1833#issuecomment-220032813:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1833#issuecomment-220032813,1,['test'],['test']
Testability,"I implemented the pre/post methods and added tests for them, @droazen. I guess that this is ready for review.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2085#issuecomment-246310057:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2085#issuecomment-246310057,1,['test'],['tests']
Testability,"I just a quick test, out of the 7M genotypes that are called and phased, 2.8M have the PGT value of 1|1, regardless of concordance or discordance with the GT field.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6220#issuecomment-544491074:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6220#issuecomment-544491074,1,['test'],['test']
Testability,"I just pushed a branch:; https://github.com/broadinstitute/picard/tree/yf_documentation_update we; can use that for initial testing. On Tue, Dec 5, 2017 at 1:56 PM, sooheelee <notifications@github.com> wrote:. > @samuelklee <https://github.com/samuelklee>, thanks for the update and; > suggestion. I moved CollectAllelicCounts to the Coverage Analysis; > category. CollectFragmentCounts isn't on the list currently so I added it; > to the same. I hope I'm not missing a bunch of other new tools given I; > missed this one.; >; > @yfarjoun <https://github.com/yfarjoun>; >; > - You are now in charge of deciding whether we should include; > authorship in code. What the Comms team wants is for authorship to NOT show; > up in the gatkDoc/javaDoc. If you want to keep them, author lines should be; > at the bottom and formatted so they do not show up in the documentation.; > Geraldine is fine with completely removing them if you prefer that. There; > is a format trick that has javaDoc skip the author line and I can get that; > to you if you decide to keep some of these and @vdauwera; > <https://github.com/vdauwera> would know this or I can get you what I; > see in other docs. Let either of us know.; > - I can help you test your changes. I think the categories are good to; > go now so I will need to put these into both Picard and GATK; > HelpConstants.java, with the latter being a placeholder until the new; > Picard release is incorporated into the next GATK release, with variables; > that then must be included in each tool doc. I will find an example in a; > bit. Which tool do you want to test? @cmnbroad; > <https://github.com/cmnbroad> can explain the engineering details in; > engineering lingo if you need more information.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/issues/3853#issuecomment-349404645>,; > or mute the thread; > <https://github.com/notifications/unsubscr",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-349407253:124,test,testing,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-349407253,1,['test'],['testing']
Testability,"I just ran GATK 4.1.7.0 with GDB 1.2.1 and I'm seeing these logging messages again. Granted I've also built a few old jars lately, but after a clean build I'm still seeing it. @nalinigans can you run the latest and confirm or deny?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5568#issuecomment-663151098:60,log,logging,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5568#issuecomment-663151098,1,['log'],['logging']
Testability,I just ran a preliminary test and it appears that the transient attribute field is apparently getting purged between `if (trimmingResult.hasLeftFlankingRegion())` and `if (trimmingResult.hasRightFlankingRegion())` `ReferenceConfidenceModel` calls. That means this should be a safe operation but I would rather be absolutely that this won't cause problems. To that end I would like to explicitly clean the transient attribute fields before every reference confidence call for an added layer of protection.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5908#issuecomment-488329795:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5908#issuecomment-488329795,1,['test'],['test']
Testability,"I just ran our pipeline with `--conf spark.driver.userClassPathFirst=false`. It failed near the end with an error that I think is unrelated to the parameter (looks like a regression bug in our logic introduced recently), so I'm inclined to believe changing this setting is fine.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3946#issuecomment-357348189:193,log,logic,193,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3946#issuecomment-357348189,1,['log'],['logic']
Testability,I just ran the pipeline from master on the WGS1 BAM file with the following parameters:. ```; /Users/cwhelan/Documents/code/gatk/gatk StructuralVariationDiscoveryPipelineSpark -I hdfs://cw-test-m:8020/data/G94794.CHMI_CHMI3_WGS1.cram.bam -O hdfs://cw-test-m:8020/output/variants/inv_del_ins.vcf -R hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.2bit --aligner-index-image /mnt/1/reference/Homo_sapiens_assembly38.fasta.img --exclusion-intervals hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.kill.intervals --kmers-to-ignore hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.kill.kmers --cross-contigs-to-ignore hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.kill.alts --breakpoint-intervals hdfs://cw-test-m:8020/output/intervals --fastq-dir hdfs://cw-test-m:8020/output/fastq --contig-sam-file hdfs://cw-test-m:8020/output/assemblies.sam --target-link-file hdfs://cw-test-m:8020/output/target_links.bedpe --exp-variants-out-dir hdfs://cw-test-m:8020/output/experimentalVariantInterpretations -- --spark-runner GCS --cluster cw-test --num-executors 20 --driver-memory 30G --executor-memory 30G --conf spark.yarn.executor.memoryOverhead=5000 --conf spark.network.timeout=600 --conf spark.executor.heartbeatInterval=120 --conf spark.driver.userClassPathFirst=false; ```. It failed near the end of the pipeline. Here is the tail of the log:. ```; 20:38:14.368 INFO StructuralVariationDiscoveryPipelineSpark - Used 3549 evidence target links to annotate assembled breakpoints; 20:38:14.462 INFO StructuralVariationDiscoveryPipelineSpark - Called 662 imprecise deletion variants; 20:38:14.492 INFO StructuralVariationDiscoveryPipelineSpark - Discovered 7234 variants.; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - INV: 184; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - DEL: 4486; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - DUP: 1170; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - INS: 1394; 18/01/12 20:,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4141:189,test,test-m,189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4141,10,['test'],['test-m']
Testability,"I just tested the latest nightly and am still seeing non-determinism. 😱😭; https://cromwell.gotc-dev.broadinstitute.org/api/workflows/v1/17e71de0-d0ef-4f96-a896-72281a44283f/metadata; ```; 586061c586061; < chr1 152216371 . A C,G,<NON_REF> 1090.60 . AS_RAW_BaseQRankSum=|-4.1,1|-1.2,1|NaN;AS_RAW_MQ=606200.00|18120.00|114893.00|0.00;AS_RAW_MQRankSum=|3.7,1|-0.6,1|NaN;AS_RAW_ReadPosRankSum=|0.1,1|0.0,1|NaN;AS_SB_TABLE=354,399|2,10|70,64|0,0;BaseQRankSum=-2.190;DP=900;ExcessHet=3.0103;MLEAC=0,1,0;MLEAF=0.00,0.500,0.00;MQRankSum=0.473;RAW_MQandDP=740813,900;ReadPosRankSum=0.072 GT:AD:DP:GQ:PL:SB 0/2:753,12,134,0:899:99:1098,3165,23351,0,19699,19444,3362,23242,19891,23387:354,399,72,74; ---; > chr1 152216371 . A C,G,<NON_REF> 1090.60 . AS_RAW_BaseQRankSum=|-4.1,1|-1.2,1|NaN;AS_RAW_MQ=606200.00|18120.00|114893.00|0.00;AS_RAW_MQRankSum=|3.7,1|-0.6,1|NaN;AS_RAW_ReadPosRankSum=|0.1,1|0.0,1|NaN;AS_SB_TABLE=354,399|2,10|70,64|0,0;BaseQRankSum=-2.190;DP=900;ExcessHet=3.0103;MLEAC=0,1,0;MLEAF=0.00,0.500,0.00;MQRankSum=0.473;RAW_MQandDP=740813,900;ReadPosRankSum=0.072 GT:AD:DP:GQ:PL:SB 0/2:753,12,134,0:899:99:1098,3165,23351,0,19737,19491,3362,23258,19931,23410:354,399,72,74; 586063,586066c586063,586066; < chr1 152216444 . C T,<NON_REF> 5469.60 . AS_RAW_BaseQRankSum=|1.1,1|NaN;AS_RAW_MQ=671197.00|288043.00|0.00;AS_RAW_MQRankSum=|0.7,1|NaN;AS_RAW_ReadPosRankSum=|-1.0,1|NaN;AS_SB_TABLE=324,363|126,166|0,0;BaseQRankSum=1.152;DP=987;ExcessHet=3.0103;MLEAC=1,0;MLEAF=0.500,0.00;MQRankSum=0.797;RAW_MQandDP=970235,987;ReadPosRankSum=-0.959 GT:AD:DP:GQ:PL:SB 0/1:687,292,0:979:99:5477,0,17931,7537,18795,26332:324,363,126,166; < chr1 152216445 . G <NON_REF> . . END=152216521 GT:DP:GQ:MIN_DP:PL 0/0:990:99:684:0,120,1800; < chr1 152216522 . C T,<NON_REF> 2633.60 . AS_RAW_BaseQRankSum=|1.8,1|NaN;AS_RAW_MQ=448678.00|155539.00|0.00;AS_RAW_MQRankSum=|2.2,1|NaN;AS_RAW_ReadPosRankSum=|0.0,1|NaN;AS_SB_TABLE=130,373|29,128|0,0;BaseQRankSum=1.847;DP=660;ExcessHet=3.0103;MLEAC=1,0;MLEAF=0.500,0.00;MQRankSu",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6105#issuecomment-528868593:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6105#issuecomment-528868593,1,['test'],['tested']
Testability,"I just tested your branch @kvinter1 with some data at hand with the following command:; ```; ./gatk SelectVariants \; -V /Users/shlee/Downloads/gatk_bundle_1807/2-germline/input_vcfs/trio.vcf.gz \; -sn NA12878 \; --exclude-non-variants ; --remove-unused-alternates \; -O trio_excludeNVrmvUA.vcf.gz; ```. And when I grep for the spanning deletion with `gzcat trio_excludeNVrmvUA.vcf.gz | grep -v '##' | grep '*' | awk '$5=""*""' | wc -l`, I see two records pop up:; ```; 20 19013133 . C * 2084.57 . AC=1,1;AF=0.500,0.500;AN=2;BaseQRankSum=1.46;ClippingRankSum=0.00;DP=48;ExcessHet=3.9794;FS=0.000;MQ=44.84;MQRankSum=-4.256e+00;QD=18.29;ReadPosRankSum=-3.990e-01;SOR=0.672 GT:AD:DP:GQ:PL 1/2:0,0,18:48:1:732,732,732,1,0,178; 20 25939208 . A * 352.14 . AC=1,1;AF=0.500,0.500;AN=2;BaseQRankSum=1.14;ClippingRankSum=0.00;DP=12;ExcessHet=3.0103;FS=21.733;MQ=31.92;MQRankSum=-3.331e+00;QD=11.74;ReadPosRankSum=1.99;SOR=1.570 GT:AD:DP:GQ:PL 1/2:1,0,6:12:15:195,156,177,15,0,923; ```. I assume testing functionality is what you meant for review? In terms of updating the JavaDoc portion, is this something you can write a draft of, e.g. a summary of the functionality implemented. I noticed there were no changes to the doc portions. Your synopsis is something I can then review for clarity and style. P.S. I should mention otherwise your branch removed 511 such unwanted records. Nice.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5129#issuecomment-417095082:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5129#issuecomment-417095082,2,['test'],"['tested', 'testing']"
Testability,"I just tried with gatk 4.1.7.0 and 4.1.8.0 released zips and cannot reproduce the issue. I can only see buffer resize logging messages when I use a debug version of libtiledbgenomicsdb.so in my private builds. . That said, `gatk 4.1.7.0` picks up `libtiledbgenomicsdb.so` from the LD_LIBRARY_PATH, otherwise it extracts from the genomicsdb.jar. @ldgauthier, do you have an older version of the native `libtiledbgenomicsdb.so` in your LD_LIBRARY_PATH env? That could be one cause. Otherwise, if you move to using `gatk 4.1.8.1` as @droazen recommends, it will only pick up the native library packed with the genomicsdb 1.3.0 jar. To override the packed genomicsdb library, in versions 1.3.0+, one has to explicitly the path specify via java options -Dgenomicsdb.library.path=<path_to_libtiledbgenomicsdb.so>.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5568#issuecomment-663238869:118,log,logging,118,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5568#issuecomment-663238869,1,['log'],['logging']
Testability,I kicked off an integration test run this morning. I don't expect the results to change (since the integration tests all set the `drop_state` themselves). But I've been burned before!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8550#issuecomment-1758135199:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8550#issuecomment-1758135199,2,['test'],"['test', 'tests']"
Testability,I loaded the docker repo GATK v4.1.4.0 and had the same (or similar) error result. ```; 2019-10-30T13:35:51.791637449Z java.lang.IllegalArgumentException: log10 p: Values must be non-infinite and non-NAN; 2019-10-30T13:35:51.792001654Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.logSumExp(NaturalLogUtils.java:84); 2019-10-30T13:35:51.792175325Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.normalizeLog(NaturalLogUtils.java:51); 2019-10-30T13:35:51.792358868Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.clusterProbabilities(SomaticClusteringModel.java:203); 2019-10-30T13:35:51.792559803Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.probabilityOfSequencingError(SomaticClusteringModel.java:96); 2019-10-30T13:35:51.792736667Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.TumorEvidenceFilter.calculateErrorProbability(TumorEvidenceFilter.java:27); 2019-10-30T13:35:51.792905235Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.Mutect2VariantFilter.errorProbability(Mutect2VariantFilter.java:15); 2019-10-30T13:35:51.793072365Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.ErrorProbabilities.lambda$new$1(ErrorProbabilities.java:19); 2019-10-30T13:35:51.793261944Z 	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321); 2019-10-30T13:35:51.793456807Z 	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169); 2019-10-30T13:35:51.793619935Z 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382); 2019-10-30T13:35:51.793810301Z 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482); 2019-10-30T13:35:51.794006885Z 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472); 2019-10-30T13:35:51.794191116Z 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708); 2019-10-30T13:35:51.794367593Z 	at java.util.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5821#issuecomment-547909227:292,log,logSumExp,292,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5821#issuecomment-547909227,1,['log'],['logSumExp']
Testability,"I looked at the code and opening the channel does not seem to send any RPC, not even to check that the file exists (I double-checked by calling it on a nonexistent file). So we'll be OK leaving `innerOpen` out of the retry logic.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3253#issuecomment-314832364:223,log,logic,223,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3253#issuecomment-314832364,1,['log'],['logic']
Testability,"I looked at the first new commit and skimmed the second. I'm assuming; tests still pass. If you want another set of eyes on the test data; refactor it'll have to wait until Monday. -L. On Fri, Oct 21, 2016 at 12:19 PM, David Benjamin notifications@github.com; wrote:. > @ldgauthier https://github.com/ldgauthier I _think_ you approved; > without needing it to send back to you, but I'm paranoid and not fully; > confident with the new github review system. Also, the changes to the test; > code to get rid of the duplicated likelihood-setting were pretty big.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/gatk/pull/2185#issuecomment-255445145,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/AGRhdEDyfInQUcZiSZ5qBFhrAOnJpNZiks5q2RBVgaJpZM4KFNEm; > .",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2185#issuecomment-256139184:71,test,tests,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2185#issuecomment-256139184,3,['test'],"['test', 'tests']"
Testability,"I made no changes to the copied files. @kcibul @ahaessly let me know if I'm missing anything. I left some of the demo bash scripts thinking that we didn't necessarily need to keep them now that we have WDLs, but let me know if you want me to move anything else. . The readme update here assumes that #6881 will get merged. I also turned off the tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6902:345,test,tests,345,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6902,1,['test'],['tests']
Testability,"I made them as TODOs in the existing test:; 1) Align a small queryname-sorted BAM in single-ended mode.; 2) Realign a small, coordinate-sorted BAM.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2523#issuecomment-288763365:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2523#issuecomment-288763365,1,['test'],['test']
Testability,I made you a page to start collecting such reminders at https://github.com/broadinstitute/gatk/wiki/Checks-and-tests-guidelines.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4825#issuecomment-468819341:111,test,tests-guidelines,111,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4825#issuecomment-468819341,2,['test'],['tests-guidelines']
Testability,"I managed to 1) wrap the cohort_determine_ploidy_and_depth.py script in a CLI tool (see the sl_gcnv_ploidy_cli branch), and 2) build the gcnvkernel package within a conda environment on gsa6 and run the tool, both without too much trouble. A few things:. 1) I don't see any logging from the python script (but then again, I didn't try anything out of the ordinary to get it working---should I have had to?). 2) I had to copy the cohort_determine_ploidy_and_depth.py script to the appropriate place in src/main/resources. Perhaps that's a better place for python scripts/packages, rather than src/main/python?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3838#issuecomment-345745315:274,log,logging,274,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3838#issuecomment-345745315,1,['log'],['logging']
Testability,I may have given James some dubious test data for CombineGVCFs. The header line in GATKVCFHeaderLines.java describes AS_RAW_MQ as having one string value. That's the version I would like to move forward with. I can fix the CombineGVCFs test data if that's causing a problem.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355645173:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355645173,2,['test'],['test']
Testability,I might be able to take a look on Friday. You can help me by confirming that there are integration tests where the output GT is `1|0` and that should jive with the existing PGT.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-436752851:99,test,tests,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-436752851,1,['test'],['tests']
Testability,"I modified it to work with Mutect2, so it must work with HaplotypeCaller. I never added test coverage for HC so I didn't remove the note.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5943#issuecomment-493078073:88,test,test,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5943#issuecomment-493078073,1,['test'],['test']
Testability,"I moved the WDL for importing the array manifest from the variantstore repo and added a test. The test here only checks that the WDL succeeded, it doesn't look a the results (yet). It's ingesting the manifest to a dataset with a 7 day TTL, so the tables eventually get cleaned up. That might be too long for this case, since it adds a table each time the test is run (so on push and PR). . I plan to add more of the ""end-to-end"" pipeline with more testing in the future using a similar scheme, so welcome feedback on the structure.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6860:88,test,test,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6860,4,['test'],"['test', 'testing']"
Testability,"I moved the transformers up to GATK tool in the last commit (the previous one was fixing the barclay change in the tests). Integraction with `AssemblyRegionWalker` is more complicated, because it requires to modify the read shard implementation to include transformers there. Maybe we should open an issue regarding that, or I can include a setter for pre/post transformers in the changes for #2372. Back to you @cmnbroad.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2085#issuecomment-290037394:115,test,tests,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2085#issuecomment-290037394,1,['test'],['tests']
Testability,I need to run this with both passing AND failing tests to make sure paths are all correct.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8718#issuecomment-1981528323:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8718#issuecomment-1981528323,1,['test'],['tests']
Testability,"I noticed a huge amount of ""Jumbo genotype annotations requested but fragment likelihoods or haplotype likelihoods were not given"" logging in some of our pipeline jobs. This patch fixes two things:. 1) I propose GATK only log this message once, the first time it hits this. 2) I think the logic here is wrong. It lacked parenthesis. This logic was:. ```; if (!jumboGenotypeAnnotations.isEmpty() && !fragmentLikelihoods.isPresent() || !haplotypeLikelihoods.isPresent()) {; ```. In java: ""false && false || true"" gives true, which is not what you want. For example, if jumboGenotypeAnnotations was empty, this would still log if either fragmentLikelihoods or haplotypeLikelihoods tests true. That doesnt seem like what you want. In contrast, false && (false || true) still tests false. Adding the parentheses fixes the logic.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7612:131,log,logging,131,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7612,8,"['log', 'test']","['log', 'logging', 'logic', 'tests']"
Testability,"I noticed that `VcfUtils.getSortedSampleSet` takes a `GenotypeMergeType`. The only case it looks at is `UNIQIFY`. You would expect that calling `getSortedSampleSet(someHeaderWithDuplicateSamples, GenotypeMergeType.REQUIRE_UNIQUE)` should throw, but instead it silently continues. . ex, the following test passes just fine:; ```; @Test; public void testGetSortedSampleSet(){; final HashMap<String, VCFHeader> headers = new HashMap<>();; headers.put(""track1"", new VCFHeader(Collections.emptySet(), Sets.newSet(""sample1"")));; headers.put(""track2"", new VCFHeader(Collections.emptySet(), Sets.newSet(""sample1"")));. final SortedSet<String> sortedSampleSet = VcfUtils.getSortedSampleSet(headers, GATKVariantContextUtils.GenotypeMergeType.REQUIRE_UNIQUE);; }; ```. The method is also lacking any tests or javadoc.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3744:300,test,test,300,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3744,4,"['Test', 'test']","['Test', 'test', 'testGetSortedSampleSet', 'tests']"
Testability,"I noticed that in the GATK3 test data, the dictionary built into the test file noGenotypes.vcf and human_g1k_v37.dict do not line up. They're close, but the VCF's header dictionary has hs37d5 and NC_007605. On both GATK3 and GATK4 this seems to be allowed. Should it?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4453:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4453,2,['test'],['test']
Testability,"I often find that when I get a stack trace it doesn't include sufficient information about the record that triggered it, or even where in the file it was. It would be possible to have GATKTools track their position and most recently `applied` records and then output that information either as log messages during a crash, or by wrapping incoming exceptions. . I think it would probably be useful, but it's also possible that we'd output irrelevant information when the record wasn't what caused the problem. Of course people could also write more complete exception messages, but it seems like the ones I hit never have quite what I want. What do people think about it?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4748:294,log,log,294,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4748,1,['log'],['log']
Testability,"I only know of one time we needed this since this issue was opened and the shell script was just fine. For posterity, the script is at scripts/funcotator/testing/compareTwoReferenceDictionaries.sh",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5345#issuecomment-592067740:154,test,testing,154,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5345#issuecomment-592067740,1,['test'],['testing']
Testability,"I only want adjacent bases, so I am okay. On Thu, Apr 12, 2018, 12:34 David Benjamin <notifications@github.com> wrote:. > @ldgauthier <https://github.com/ldgauthier> the GATK3 tests have two bams; > relevant to MNPs. One has two unphased SNPs 3 bases apart; the other has; > two phased adjacent SNPs ie a DNP. That's it as far as I can tell. I think; > I ought to cook up some synthetic reads for a nice test.; >; > By the way, should add a MNP merging distance option as in; > ReadBackedPhasing? Currently, for example, the code I wrote can't make a; > MNP out of ACT -> GCA.; >; > —; > You are receiving this because your review was requested.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/4650#issuecomment-380867582>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ACDXk7itJIetc3iY3pptj9ljoscsExcqks5tn4IngaJpZM4TRJxM>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4650#issuecomment-380871983:176,test,tests,176,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4650#issuecomment-380871983,2,['test'],"['test', 'tests']"
Testability,I opened https://github.com/broadinstitute/gatk/issues/4129 to keep track of this. If we can save test logs there when they happen maybe it will help shed light on the problem.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4118#issuecomment-357038771:98,test,test,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4118#issuecomment-357038771,2,"['log', 'test']","['logs', 'test']"
Testability,"I propose to still hide from the command line and docs the example walkers. They are meant only for developers, to show how to use some kind of walkers and have a running tool for integration tests. Having then in the command line will generate software users to run them instead of use them for developmental purposes... In addition, I think that this is a good moment to also generate a sub-module structure (as I suggested in #3838) to separate artifact for different pipelines/framework bits (e.g., engine, Spark-engine, experimental, example-code, CNV pipeline, general-tools, etc.). For the aim of this issue, this will be useful for setting documentation guidelines in each of the sub-modules: e.g., example-code should be documented for developers, but not for the final user; experimental module should have the `@Experimental` barclay annotation in every `@DocumentedFeature`; etc.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-346291829:192,test,tests,192,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-346291829,2,['test'],['tests']
Testability,I push the wrong local clone by mistake... this should fix the test errors.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3676#issuecomment-334862846:63,test,test,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3676#issuecomment-334862846,1,['test'],['test']
Testability,I pushed the final requested changes myself just now -- will merge once tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4744#issuecomment-389992421:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4744#issuecomment-389992421,1,['test'],['tests']
Testability,"I quickly looked at the nature of Mann-Whitney test. Seems to me the current implementation is correct algorithmic-wise. @droazen , I guess your concern is that using double as the key to the look-up function in `map` is too fragile?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4290#issuecomment-422442649:47,test,test,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4290#issuecomment-422442649,1,['test'],['test']
Testability,"I ran 408 invocations of an nio using command for BQSR using gatk4 and got 2 failures that looked pretty similar. Is there something I might be doing wrong? The two failures were also on different shards. . I cant remember exactly when I built this jar but it was after this commit - https://github.com/broadinstitute/gatk/commit/4df1d16518cbd3a05a45a070d682446878ec4eaa less than a week ago. If you need any more info let me know, thanks. ```; Using GATK jar /usr/gitc/gatk4/gatk-package-4.beta.3-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xms3000m -jar /usr/gitc/gatk4/gatk-package-4.beta.3-local.jar ApplyBQSR --createOutputBamMD5 --addOutputSAMProgramRecord -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/4a87f12f-014e-438a-9a10-260c70bf3584/call-SortSampleBam/attempt-4/NA12878.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O NA12878.aligned.duplicates_marked.recalibrated.bam -bqsr /cromwell_root/broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/4a87f12f-014e-438a-9a10-260c70bf3584/call-GatherBqsrReports/NA12878.recal_data.csv -SQQ 10 -SQQ 20 -SQQ 30 -L chr5:1+; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.Ni4zSL; [August 22, 2017 2:52:59 PM UTC] ApplyBQSR --output NA12878.aligned.duplicates_marked.recalibrated.bam --bqsr_recal_file /cromwell_root/broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/4a87f12f-014e-438a-9a10-260c70bf3584/call-GatherBqsrReports/NA12878.recal_data.csv --useOriginalQualities true --static_quantized_quals 10 --static_quantized_quals 20 --static_quantized_quals 30 --intervals chr5:1+ --input gs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3481:803,log,log,803,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3481,1,['log'],['log']
Testability,"I ran `FindBreakpointEvidenceSpark` and did some high-level checks to see if there are any opportunities for performance improvements. (cc @tedsharpe @cwhelan). This is the command line I ran. (Earlier I had run more executors with smaller memory settings, but the job didn't complete then.); ; ```bash; ./gatk-launch FindBreakpointEvidenceSpark \; -I hdfs:///user/$USER/broad-svdev-test-data/data/NA12878_PCR-_30X.bam \; -O hdfs:///user/$USER/broad-svdev-test-data/assembly \; --exclusionIntervals hdfs:///user/$USER/broad-svdev-test-data/reference/GRCh37.kill.intervals \; --kmersToIgnore hdfs:///user/$USER/broad-svdev-test-data/reference/Homo_sapiens_assembly38.dups \; -- \; --sparkRunner SPARK --sparkMaster yarn-client --sparkSubmitCommand spark2-submit\; --driver-memory 16G \; --num-executors 5 \; --executor-cores 7 \; --executor-memory 25G; ```. What does FindBreakpointEvidenceSpark do, from the perspective of Spark?. * [runTool] filter out secondary and supplementary alignments; * [getMappedQNamesSet] filter out duplicate reads, reads that failed vendor checks, unmapped reads; * Job 0 [ReadMetadata] mapPartitions to find partition stats; * Job 1 [getIntervals] filter and multiple map partitions to find breakpoint intervals ; * Job 2 [removeHighCoverageIntervals] mapPartitionsToPair to find coverage for each interval, then reduceByKey; * Job 3 [getQNames] mapPartitions; * Job 4 [addAssemblyQNames -> getKmerIntervals] mapPartitionsToPair, then reduceByKey, then mapPartitions; * Job 5 [getAssemblyQNames] mapPartitions twice and a collect; * Job 6 [generateFastqs] mapPartitions and combineByKey, then write FASTQ to files. A few observations:; * Jobs 0,1,3 are simple map jobs - very quick 1-2 mins each.; * Job 2 is a simple MR, with a tiny shuffle to sum by key (<1MB of shuffle data); * Job 4 takes a bit longer longer (3min), and shuffles ~3GB. This is a lot faster than when I ran it before with less memory, when it took 9 min. Is it creating a lot of garbage? If you want",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2458#issuecomment-292171884:383,test,test-data,383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2458#issuecomment-292171884,8,['test'],['test-data']
Testability,I ran a couple of tests - in case of single contig case the ploidy calls correspond to most likely apriori ploidies. In the case of multiple contigs there is no numerical changes to inference whatsoever.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6613:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6613,1,['test'],['tests']
Testability,"I ran the full test suite using a [branch](https://github.com/broadinstitute/gatk/tree/cn_check_cache_thrash) that throws if a tool ever tries to query the FeatureCache using a query interval that is earlier than, but on the same contig as, the one currently cached. Several tests [failed](https://travis-ci.org/broadinstitute/gatk/builds/422089722), including a few of the Funcotator ones:. FuncotatorIntegrationTest.exhaustiveArgumentTest; FuncotatorIntegrationTest.testFuncotatorWithoutValidatingResults; FuncotatorIntegrationTest.testVcfDatasourceAccountsForAltAlleles; FuncotatorIntegrationTest.testVcfMafConcordance. These may be test artifacts, but we should audit the Funcotator cache access patterns and see if this is actually causing thrashing that affects performance. Since the FeatureCache caching strategy assumes queries will be forward-only, it might be an indication that Funcotator performance could be improved by either turning off caching or using an alternative cache strategy.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5143:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5143,6,['test'],"['test', 'testFuncotatorWithoutValidatingResults', 'testVcfDatasourceAccountsForAltAlleles', 'testVcfMafConcordance', 'tests']"
Testability,"I ran the full test suite using a [branch](https://github.com/broadinstitute/gatk/tree/cn_check_cache_thrash) that throws if a tool ever tries to query the FeatureCache using a query interval that is earlier than, but on the same contig as, the one currently cached. Several tests failed, including a few of the Mutect2/HC ones:. Mutect2IntegrationTest.testContaminationFilter; Mutect2IntegrationTest.testDreamTumorNormal; Mutect2IntegrationTest.testGivenAllelesMode; Mutect2IntegrationTest.testPon; Mutect2IntegrationTest.testTumorOnly ; HaplotypeCallerIntegrationTest.testGenotypeGivenAllelesMode. The FeatureCache assumes that queries are always increasing along a contig; the failures in this branch indicate that the caller is attempting to back up and re-query territory that has already been cached and then trimmed. I didn't track down all of these cases, but the general pattern appears to be that active region determination results in initial caching and trimming, and then the same/similar territory is traversed again during calling, resulting in cache misses. It happens pretty frequently when running M2 tests, at least for pon and germline resource inputs; we should investigate how much a better caching strategy would help performance. If it would, we'd need https://github.com/broadinstitute/gatk/pull/4902 at a mimimum in order to use a alternate cache strategy.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5148:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5148,9,['test'],"['test', 'testContaminationFilter', 'testDreamTumorNormal', 'testGenotypeGivenAllelesMode', 'testGivenAllelesMode', 'testPon', 'testTumorOnly', 'tests']"
Testability,I ran the test case from #2287 using this branch and I get . ```; ./gatk-launch ApplyBQSRSpark \; -I gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam \; -R gs://gatk-legacy-bundles/b37/human_g1k_v37.2bit \; -O gs://hellbender/test/output/gatk4-spark/recalibrated.bam \; -bqsr gs://gatk-demo/TEST/gatk4-spark/recalibration.table \; -apiKey $HELLBENDER_TEST_APIKEY \; -- \; --sparkRunner GCS \; --cluster methods-test-cluster \; --executor-cores 4 \; --executor-memory 20g; ```. ```; org.broadinstitute.hellbender.exceptions.GATKException: unable to write bam: org.apache.hadoop.fs.FileAlreadyExistsException: A directory with that name exists: gs://hellbender/test/output/gatk4-spark/recalibrated.bam; 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.writeReads(GATKSparkTool.java:253); 	at org.broadinstitute.hellbender.tools.spark.ApplyBQSRSpark.runTool(ApplyBQSRSpark.java:49); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:349); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:112); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:170); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:189); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:96); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:103); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:116); 	at org.broadinstitute.hellbender.Main.main(Main.java:158); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2306#issuecomment-266830647:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2306#issuecomment-266830647,7,"['TEST', 'benchmark', 'test']","['TEST', 'benchmark', 'test', 'test-cluster']"
Testability,"I rebased this, and responded to code review comments:. - updated comments; - reverted GenotypeGVCFs change; - reverted changing the default lookahead for VariantWalker side inputs. I think changing the default lookahead for VariantWalker side inputs to the new, smaller value will hurt performance for tools like VQSR. I did some crude timing tests using the FeatureDataSource default (1000 bases) proposed in this branch, and the current default (100,000 bases). The following are total times as reported by Gradle for serial runs of the VQSR integration tests:. With 1000 base lookahead:; 1m40s; 1m29s; 1m29s; 1m25s. With 100,000 base lookahead:; 1m29s; 1m17s; 1m16s; 1m18s. Back to 1000 base lookahead again:; 1m36s; 1m26s; 1m26s; 1m29s. It seems pretty consistently slower with the smaller lookahead.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3480#issuecomment-417360848:344,test,tests,344,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3480#issuecomment-417360848,2,['test'],['tests']
Testability,"I recently noticed a series of what were evidently memory failures when running HaplotypeCaller on some standard test WGS data when using the exact task used in the warp pipeline here: https://github.com/broadinstitute/warp/blob/develop/pipelines/broad/dna_seq/germline/variant_calling/VariantCalling.wdl. I found that running that wdl with otherwise default inputs except for `haplotype_scatter_count` being set to 10 (so each node doing approximately 5x as much work as when the default, 50, is set) I would get repeated HaplotypeCaller job failures after a few hours that had the pattern of memory failures. The errors tend to involve HaplotypeCaller abruptly ending without any sort of error message or exception at all (which could indicate the vm is dying):; ```; 03:22:15.993 INFO ProgressMeter - chr13:18173014 378.6 1419490 3749.0; 03:22:26.338 INFO ProgressMeter - chr13:18177988 378.8 1419530 3747.4; 03:22:36.801 INFO ProgressMeter - chr13:18203610 379.0 1419700 3746.1; (END); ```; Or alternatively it seems to end without the end-of-run messages being output:; ```; 23:05:30.662 INFO ProgressMeter - chr2:47207099 428.8 1372310 3200.4; 23:05:40.859 INFO ProgressMeter - chr2:47323745 429.0 1372960 3200.7; 23:05:50.896 INFO ProgressMeter - chr2:47476709 429.1 1373720 3201.2; Using GATK jar /gatk/gatk-package-4.2.2.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx6933m -Xms6933m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -jar /gatk/gatk-package-4.2.2.0-local.jar HaplotypeCaller [INPUTS]; 2022/02/10 23:06:52 Starting delocalization.; 2022/02/10 23:06:53 Delocalization script execution started...; ```. These failures appear to be reproducible and happen at about the same point in every run. The fact that increasing the memory or decreasing the interval per shard seems to remove the issue it makes me suspect there might be an issue where Hapl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7693:113,test,test,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7693,1,['test'],['test']
Testability,"I recently rebased and re-ran this test. The results look similar to last time. The travis results can be found [here](https://app.travis-ci.com/github/broadinstitute/gatk/builds/246119278), while they last. The branch with the code is https://github.com/broadinstitute/gatk/tree/cn_cache_thrash_master.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5895#issuecomment-1039141762:35,test,test,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5895#issuecomment-1039141762,1,['test'],['test']
Testability,"I recode java to c (just haplotypecaller step 2), and will merge CommonSuffixSplitter.java SharedSequenceMerger.java in to one file, ; I'll just add vertex suffixVTemplate(graph.addVertex(suffixVTemplate)),then add in_edge to suffixVTemplate, last do something like this(this is not c code): final SeqVertex newV = new SeqVertex(ArrayUtils.addAll(suffixVTemplate.getSequence(), v.getSequence())).; for some test ,also the algorithm does,after process removePathsNotConnectedToRef(),; MergeTails() does not work!May be we can change MergeTails.java where logic like SharedSequenceMerger.java.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4214#issuecomment-360353829:407,test,test,407,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4214#issuecomment-360353829,2,"['log', 'test']","['logic', 'test']"
Testability,I reenabled ReadCovariateUnit tests (disabled in GATK3 because it was failing) and added a bunch of code to make it tests the right thing. A lot of testing problems with reverse-strand reads is fixed now. fixes #412,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/442:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/442,3,['test'],"['testing', 'tests']"
Testability,I released a new version of Hadoop-BAM (7.8.0) and updated this PR to use it. All tests are passing now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2350#issuecomment-282037559:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2350#issuecomment-282037559,1,['test'],['tests']
Testability,"I reran option 2 with latest gatk4/master. I ran the BaseRecalibrator step (scattered about 20 ways) 10 times each. All 10 runs failed. I haven't checked all of the error messages yet, but I did see a couple with a new error message about the dbsnp vcf, which I was also streaming with NIO. I'm going to change that back to localizing the dbsnp vcf to see if those go away. Here's that message:. ```; Using GATK jar /usr/gitc/gatk-package-4.beta.2-11-g1b884aa-SNAPSHOT-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -Xms4000m -jar /usr/gitc/gatk-package-4.beta.2-11-g1b884aa-SNAPSHOT-local.jar BaseRecalibrator -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O CHIM.recal_data.csv -knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf -knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz -knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz -L chr8:1+ --cloudPrefetchBuffer 0 --cloudIndexPrefetchBuffer 0; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.DoXBYr; [July 24, 2017 9:31:25 PM UTC] BaseRecalibrator --useOriginalQualities true --knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf --knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz --output CHIM.re",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317736963:816,log,log,816,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317736963,1,['log'],['log']
Testability,"I reran the BQSR step 5 times using the exact same input bam as before. One has succeeded, 3 are still running and I got a new yet similar error message on a different shard this time:. ```; Using GATK jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -Xms4000m -jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar BaseRecalibrator -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O CHIM.recal_data.csv -knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf -knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz -knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz -L chr12:1+ -L chr13:1+; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.KnjoXJ; [July 21, 2017 2:50:20 PM UTC] BaseRecalibrator --useOriginalQualities true --knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf --knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz --output CHIM.recal_data.csv --intervals chr12:1+ --intervals chr13:1+ --input gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --reference /cromwell_root/broad-r",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317028955:591,log,log,591,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317028955,1,['log'],['log']
Testability,"I reran the workflow, this time allocating 200GB RAM to tmp in the slurm job, everything else exactly the same, and got the ""terminate called without an active exception"" failure again, so that error was not due to the gvcf that failed VCF validation as it was not included. This time, shard 9 succeeded in ImportGvcfs and also successfully completed GenotypeGVCFs. I have attached the top level stdout and stderr logs for the slurm job, and the stdout.background and stderr.background logs from shard 3 of ImportGvcfs. No java error log was present on any of the ImportGvcfs shards' execution directories, and all except shard 9 had rc=250.; [ImportGvcfsWithTmpError.tar.gz](https://github.com/broadinstitute/gatk/files/9911311/ImportGvcfsWithTmpError.tar.gz)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8076#issuecomment-1298661994:414,log,logs,414,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8076#issuecomment-1298661994,3,['log'],"['log', 'logs']"
Testability,"I run HaplotypeCaller twice , the former one was stopped because of unexpected power outages. I check the LOG and found the chromosome where HaplotypeCaller stopped. So i star another HaplotypeCaller(later one) with the ""-L *.intervals"", it begin from the chromosome where former HaplotypeCaller stopped.The ref genome and the parameters were all the same. However, HaplotypeCaller give different results. Note: the ref genome has 26 chromosomes :A01-A13;D01-D13. **_The former LOG:_**. nohup: ignoring input and appending output to ‘nohup.out’; 09:04:49.857 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/home/chenwei/biosoft/gatk-4.0.10.1/gatk-package-4.0.10.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; 09:05:02.971 INFO HaplotypeCaller - ------------------------------------------------------------; 09:05:02.971 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.0.10.1; 09:05:02.971 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 09:05:02.972 INFO HaplotypeCaller - Executing as chenwei@localhost.localdomain on Linux v3.10.0-1160.31.1.el7.x86_64 amd64; 09:05:02.972 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_292-b10; 09:05:02.973 INFO HaplotypeCaller - Start Date/Time: August 22, 2021 9:04:49 AM CST; 09:05:02.973 INFO HaplotypeCaller - ------------------------------------------------------------; 09:05:02.973 INFO HaplotypeCaller - ------------------------------------------------------------; 09:05:02.974 INFO HaplotypeCaller - HTSJDK Version: 2.16.1; 09:05:02.974 INFO HaplotypeCaller - Picard Version: 2.18.13; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBL",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7454:106,LOG,LOG,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7454,2,['LOG'],['LOG']
Testability,"I run the BaseRecalibrator,and at fisrt it can good running,after a time,I got this error：; htsjdk.samtools.SAMFormatException: Invalid GZIP header; This is the log:; Using GATK jar /data/home/wuly/soft/GATK4/gatk-4.1.2.0/gatk-package-4.1.2.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx20G -Djava.io.tmpdir=./; -jar /data/home/wuly/soft/GATK4/gatk-4.1.2.0/gatk-package-4.1.2.0-local.jar BaseRecalibrator -R /data/home/wuly/source/Homo_sapiens_assembly38.fasta -I M1.bam --known-sites /data/home/wuly/source/dbsnp_146.hg38.vcf.gz --known-sites /data/home/wuly/source/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --known-sites /data/home/wuly/source/1000G_phase1.snps.high_confidence.hg38.vcf.gz --known-sites /data/home/wuly/source/hapmap_3.3.hg38.vcf.gz -O M1_recal.table17:55:54.326 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/data/home/wuly/soft/GATK4/gatk-4.1.2.0/gatk-package-4.1.2.0-local.jar!/com/intel/gkl/native/libgkl_compre; ssion.soMay 24, 2019 5:55:56 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 17:55:56.095 INFO BaseRecalibrator - ------------------------------------------------------------; 17:55:56.096 INFO BaseRecalibrator - The Genome Analysis Toolkit (GATK) v4.1.2.0; 17:55:56.096 INFO BaseRecalibrator - For support and documentation go to https://software.broadinstitute.org/gatk/; 17:55:56.096 INFO BaseRecalibrator - Executing as wuly@localhost.localdomain on Linux v3.10.0-957.10.1.el7.x86_64 amd64; 17:55:56.096 INFO BaseRecalibrator - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_192-b01; 17:55:56.096 INFO BaseRecalibrator - Start Date/Time: May 24, 2019 5:55:54 PM EDT; 17:55:56.096 INFO BaseRecalibrator - ------------------------------------------------------------; 17:55:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5968:161,log,log,161,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5968,1,['log'],['log']
Testability,"I run the GATK MarkDuplicates in Spark mode and it throws an; **NoClassDefFoundError: scala/Product$class**. The GATK version is **4.1.7** and; **4.0.0**,the environment is: **spark-3.0.0**, **scala-2.12.11**. **GATK commands:**. ```; gatk MarkDuplicatesSpark \; -I hdfs://master2:9000/Drosophila/output/Drosophila.sorted.bam \; -O hdfs://master2:9000/Drosophila/output/Drosophila.sorted.markdup.bam \; -M; hdfs://master2:9000/Drosophila/output/Drosophila.sorted.markdup_metrics.txt; \; -- \; --spark-runner SPARK --spark-master spark://master2:7077; ```; **error logs:**. ```; Exception in thread ""main"" java.lang.NoClassDefFoundError:; scala/Product$class; at; org.bdgenomics.adam.serialization.InputStreamWithDecoder.<init>(ADAMKryoRegistrator.scala:35); at; org.bdgenomics.adam.serialization.AvroSerializer.<init>(ADAMKryoRegistrator.scala:45); at; org.bdgenomics.adam.models.VariantContextSerializer.<init>(VariantContext.scala:94); at; org.bdgenomics.adam.serialization.ADAMKryoRegistrator.registerClasses(ADAMKryoRegistrator.scala:179); at; org.broadinstitute.hellbender.engine.spark.GATKRegistrator.registerClasses(GATKRegistrator.java:78); at; org.apache.spark.serializer.KryoSerializer.$anonfun$newKryo$8(KryoSerializer.scala:170); at; org.apache.spark.serializer.KryoSerializer.$anonfun$newKryo$8$adapted(KryoSerializer.scala:170); at scala.Option.foreach(Option.scala:407); at; org.apache.spark.serializer.KryoSerializer.$anonfun$newKryo$5(KryoSerializer.scala:170); at; scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); at; org.apache.spark.util.Utils$.withContextClassLoader(Utils.scala:221); at; org.apache.spark.serializer.KryoSerializer.newKryo(KryoSerializer.scala:161); at; org.apache.spark.serializer.KryoSerializer$$anon$1.create(KryoSerializer.scala:102); at; com.esotericsoftware.kryo.pool.KryoPoolQueueImpl.borrow(KryoPoolQueueImpl.java:48); at; org.apache.spark.serializer.KryoSerializer$PoolWrapper.borrow(KryoSerializer.scala:109); at; org.apache.spark",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6644:564,log,logs,564,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6644,1,['log'],['logs']
Testability,"I saw this message recently when running gcloud:. ```; WARNING: `gcloud auth login` no longer writes application default credentials.; If you need to use ADC, see:; gcloud auth application-default --help; ```. It looks like we may have to update our travis script / our instructions for running on cloud files at some point in the near future.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2660:77,log,login,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2660,1,['log'],['login']
Testability,"I saw your ""whoops"" commit -- I have actually merged commits that turn off tests. James is trying to figure out if we can have codecov check the absolute number of tests since that should almost never go down. He claims you can run select tests from the data provider with IntelliJ, but it seems... cumbersome.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8717#issuecomment-2008200128:75,test,tests,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8717#issuecomment-2008200128,3,['test'],['tests']
Testability,"I second @gspowley -- JNI transfer overhead is certainly more than ~ 10 ns it takes to calculate 3 logs (see below). Here's the benchmarking code just in case:; ```; final int[] sizes = new int[]{1, 10, 100, 1000, 10000, 100000, 10000000};; final int numTrials = 500;; final RandomGenerator rng = new MersenneTwister();; final List<DescriptiveStatistics> apacheStats = new ArrayList<>(sizes.length);; final List<DescriptiveStatistics> nd4jStats = new ArrayList<>(sizes.length);; final List<DescriptiveStatistics> nd4jCreationStats = new ArrayList<>(sizes.length);. for (int idx = 0; idx < sizes.length; idx++) {; final DescriptiveStatistics currentApacheStats = new DescriptiveStatistics();; final DescriptiveStatistics currentNd4jStats = new DescriptiveStatistics();; final DescriptiveStatistics currentNd4jCreationStats = new DescriptiveStatistics();; apacheStats.add(currentApacheStats);; nd4jStats.add(currentNd4jStats);; nd4jCreationStats.add(currentNd4jCreationStats);. for (int n = 0; n < numTrials; n++) {; final double[] vals = IntStream.range(0, sizes[idx]); .mapToDouble(i -> 100 * FastMath.abs(rng.nextDouble())).toArray();. final long t0 = System.nanoTime();; apacheLog(vals);; final long t1 = System.nanoTime();; ndLog(vals);; final long t2 = System.nanoTime();; ndJustCreate(vals);; final long t3 = System.nanoTime();. currentApacheStats.addValue((t1 - t0) / 1000000.0);; currentNd4jStats.addValue((t2 - t1) / 1000000.0);; currentNd4jCreationStats.addValue((t3 - t2) / 1000000.0);; }; }. for (int idx = 0; idx < sizes.length; idx++) {; System.out.println(String.format(""N = %d, ApacheFastMath = %f +/- %f ms, Nd4jLog = %f +/- %f ms, Nd4jOverhead = %f +/- %f ms"",; sizes[idx],; apacheStats.get(idx).getMean(), apacheStats.get(idx).getStandardDeviation(),; nd4jStats.get(idx).getMean(), nd4jStats.get(idx).getStandardDeviation(),; nd4jCreationStats.get(idx).getMean(), nd4jCreationStats.get(idx).getStandardDeviation()));; }. }. private double[] apacheLog(final double[] vals) {; return A",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2577#issuecomment-292667861:99,log,logs,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2577#issuecomment-292667861,2,"['benchmark', 'log']","['benchmarking', 'logs']"
Testability,"I see `Timeout (30 minutes) reached. Terminating ""./gradlew jacocoTestReport""`. It's not clear to me how my changes could have introduced a deadlock or similar problem. . I ran the full test suite (`./gradlew test`) locally to take a look and it passes. Took 20min. Running `SeekableByteChannelPrefetcherTest` by itself also passes, unsurprisingly.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2391#issuecomment-277399501:186,test,test,186,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2391#issuecomment-277399501,4,['test'],['test']
Testability,"I see that argument, but I think one could reasonably argue either way here. I'm really not that invested in this particular test, so I'm happy to check in the files. Thanks for approving the changes. As you might have seen we got a docker pull limit failure: https://travis-ci.com/github/broadinstitute/gatk/jobs/502703296",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7238#issuecomment-831482999:125,test,test,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7238#issuecomment-831482999,1,['test'],['test']
Testability,"I see that in the tests, I'll try it out!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7711#issuecomment-1061919240:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7711#issuecomment-1061919240,1,['test'],['tests']
Testability,I see this doesn't pass the tests; I'll try to fix that first and then we can do a review.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3885#issuecomment-347949058:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3885#issuecomment-347949058,1,['test'],['tests']
Testability,"I see whats going on now - I had been assuming that the extra lines were variant records, but they're just extra filter metadata lines resulting from the bogus tranches. So, the actual fix for this was https://github.com/broadinstitute/gatk/pull/2275. I'm closing this ticket out and will add a separate PR with an integration test that uses multiple tranches so we don't regress.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2276#issuecomment-263878175:327,test,test,327,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2276#issuecomment-263878175,1,['test'],['test']
Testability,"I see. . Yes. That's what I'm planning on (except that `AssemblyContigAlignmentsConfigPicker` is upstream of this unit), and here's the thought for why:; * I'd try to place the alignment picking step in a single place as much as possible, this makes improvements to the alignment picking/filtering step easier; * the size-based filter can be tuned, even by an CLI argument, this would affect the number of segments in the CPX logic, and the alt_arrangment annotations, and the simple variants re-interpreted by `CpxVariantReInterpreterSpark`, but it won't affect the alt haplotype sequence, which IMO is what really is important. ; * I'm developing a downstream variant filter, which hopefully can cut down the false-positives. And for the question of ""why 2 instead of 1"", I think what you are suggesting is to change; ```java; public static final int MIN_READ_SPAN_AFTER_DEOVERLAP = 2;; if (one.getSizeOnRead() >= MIN_READ_SPAN_AFTER_DEOVERLAP) result.add(one);; ```; to; ```java; public static final int MIN_READ_SPAN_AFTER_DEOVERLAP = 1;; if (one.getSizeOnRead() > MIN_READ_SPAN_AFTER_DEOVERLAP) result.add(one);; ```; Am i right?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4962#issuecomment-405619353:426,log,logic,426,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4962#issuecomment-405619353,2,['log'],['logic']
Testability,"I see. Yes, I think this is closer to the issue at hand -- for instance, we'll have variants that are called, then when we go back to the original alignments there will be no indication of alternate observations at the loci which the variants were called (and vice versa, we'll have original alignments that suggest a variant, but won't get called). In the worst cases scenarios, the haplotype alignments seem ridiculous compared to the original reads (e.g. my GATK forum post: https://gatk.broadinstitute.org/hc/en-us/community/posts/360075749392-Bamout-haplotypes-are-much-worse-than-bamout-tumor-reads-would-suggest). So, right, it's not the realignment of the reads, it's the alignment of the assembled haplotypes that complicates things. Thinking about it in this context though, I see we might be at an impasse (or back at square one with considering the assembly process). . My true fear is that we'll lose what appear to be definite-somatic variants in the original alignments because of the internal assembly + haplotype alignment engine. But I will say, it does seem like we see these problems for lower-coverage areas/variants, so I might be exaggerating the issue at hand. Maybe the solution for testing our expectations is to use higher depths to avoid bad assemblies and to apply some post-processing to the calls. (And wait and see if there are truly troubling cases of ""obvious"" variants getting lost)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7064#issuecomment-773628190:1208,test,testing,1208,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7064#issuecomment-773628190,1,['test'],['testing']
Testability,"I set TEST_TYPE to ""all"" and was able to run this test without failure. The command I used is:; ```; ./gradlew test --tests org.broadinstitute.hellbender.utils.nio.GcsNioIntegrationTest.openPublicFile; ```; I ran it 10 times and got the same result every time:; `BUILD SUCCESSFUL`. It looks like this was a transient problem: either the internet connection was stalled or the authentication server was down temporarily. As this happens at the very beginning of the execution, it's probably not a very big deal: the user can just retry. Incidentally, PR #2506 that is under review lengthens the connection timeouts, if I am not mistaken. This will probably make the problem less likely to reoccur.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2514#issuecomment-288852260:50,test,test,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2514#issuecomment-288852260,3,['test'],"['test', 'tests']"
Testability,I set up a test requester pays bucket in GCS: `gs://droazen-requester-pays/` with a test file `gs://droazen-requester-pays/reads_data_source_test1.bam`. . GATK `CountReads` happily reads from this file even when I don't specify the `--gcs-project-for-requester-pays` argument. The expected behavior is that it will refuse to proceed unless that argument is specified. Command to replicate:. ```; ./gatk CountReads -I gs://droazen-requester-pays/reads_data_source_test1.bam; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6176:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6176,2,['test'],['test']
Testability,I should have it momentarily...just running the tests now *fingers crossed*,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519667841:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519667841,1,['test'],['tests']
Testability,I should have looked at the tests... @rickymagner,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8605:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8605,1,['test'],['tests']
Testability,"I started looking into allele-specific annotation combine setting and it should be possible from the GATK-side, but then I realized I don't want to write all the tests for it right now. I'll put it in a branch and open an issue, but the gist is that this PR is useful, I want it merged, and my feature request can be addressed by a GATK dev at some point in the future if necessary.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4993#issuecomment-426369168:162,test,tests,162,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4993#issuecomment-426369168,1,['test'],['tests']
Testability,I started seeing this in PathSeq as well. It also seems that the Spark history logs are broken.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3290#issuecomment-315853798:79,log,logs,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3290#issuecomment-315853798,1,['log'],['logs']
Testability,"I still need to finish up the tool-level Javadocs for the TrainVariantAnnotationsModel tool. But since I'll be off on vacation until the end of the week, I wanted to go ahead and open this up for review. There's a lot here, but not too much of it is production code (<2k LOC). I've split things up into commits that should hopefully make it more easy to review. The first commit contains the WDL added in #7932 and has already been reviewed by me, although it may benefit from a second pass. The second commit updates that WDL to account for some changes I added after review. There are TODOs scattered throughout the code, but some of them are intentionally left as an exercise for future developers. See the meta issue linked above to get an idea of what might be appropriate to leave to future work. Also note that tools are marked BETA, so there’s certainly room for improvement or changes!. There are also stubs throughout for the BGMM implementation, which will be added in a separate PR. Hopefully we can get some ML club reviewers then. @meganshand @droazen @davidbenjamin mind taking a look or suggesting other reviewers? I would hope that we can get this in by the next release after the other flow-based methods are released, since the IsolationForest filtering method added here is also used in that pipeline. It would also be nice to get this merged by the next release to keep us on track on the malaria side.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7954#issuecomment-1198182182:911,stub,stubs,911,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7954#issuecomment-1198182182,1,['stub'],['stubs']
Testability,"I still want @davidbenjamin to double check the * handling in his code (i.e. we shouldn't count it as a real allele since it's echoing an upstream event that's already been evaluated -- otherwise we could have a lot of high quality * only variants where the triggering SNP is too low quality, which would be silly). @skwalker I would like to do one more thing to check on the allele-specific annotations. Can you genotype all David B.'s GATK4 GVCFs together using GenomicsDBImport? We can use this to test #3707 on a larger callset and then compare the AS vs. non-AS output at biallelic sites.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-385668755:501,test,test,501,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-385668755,1,['test'],['test']
Testability,"I submited all the 25 sub-projects, a similar exceptions happens during the function GermlineCNVCaller. It seems that the problem is from gcnvkernel, when parallel projects are submitted at the same time. .............................................................(BUG 003).......................................................... 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-07410307475890858352.tsv; 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project//0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-12290301678667639499.tsv; 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project//0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-21824691337189197401.tsv; 00:50:20.554 DEBUG ScriptExecutor - /gpfs/gsfs7/users/gatk_users1/0-Project//0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-31776045115104931009.tsv; 00:50:20.554 DEBUG ScriptExecutor - --psi_s_scale=1.000000e-04; 00:50:20.554 DEBUG ScriptExecutor - --mapping_error_rate=1.000000e-02; 00:50:20.554 DEBUG ScriptExecutor - --depth_correction_tau=1.000000e+04; 00:50:20.554 DEBUG ScriptExecutor - --q_c_expectation_mode=hybrid; 00:50:20.554 DEBUG ScriptExecutor - --max_bias_factors=5; 00:50:20.554 DEBUG ScriptExecutor - --psi_t_scale=1.000000e-03; 00:50:20.554 DEBUG ScriptExecutor - --log_mean_bias_std=1.000000e-01; 00:50:20.554 DEBUG ScriptExecutor - --init_ard_rel_unexplained_variance=1.000000e-01; 00:50:20.554 DEBUG ScriptExecutor - --num_gc_bins=20; 00:50:20.554 DEBUG ScriptExecutor - --gc_curve_sd=1.000000e+00; 00:50:20.554 DEBUG ScriptExecutor - --active_class_padding_hybrid_mode=50000; 00:50:20.554 DEBUG ScriptExecutor - --enable_bias_factors=True; 00:50:20.554 DEBUG ScriptExecutor - --disable_bias_factors_in_active_class=False; 00:50:20.55",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6235#issuecomment-547440019:1063,Test,Test-,1063,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6235#issuecomment-547440019,1,['Test'],['Test-']
Testability,"I successfully ran `ReadsPipelineSpark` on a small dataset on a Dataproc cluster with this branch. I tried Dataproc 1.3 and 1.4 and both worked. I don't think there's a problem with upgrading to Spark 2.3 (or even Spark 2.4). There is a problem with the tests that run a mini HDFS cluster (i.e. a cluster running in the same JVM as everything else). I tried upgrading to Spark 2.3 and Hadoop 2.9, but there are Guava conflicts (with Hadoop), which is not surprising. I'm not sure of the best way to fix these tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5928#issuecomment-490800782:254,test,tests,254,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5928#issuecomment-490800782,2,['test'],['tests']
Testability,"I suppose we can wait, but I still think there is some inherent instability that is transient that we're going to have to deal with at some point. It looks like the last time I ran the CI tests on the Java 17 branch, these tests were failing on the docker job but passing on the the non-docker job, both with (probably different versions) of Java 17. I was hoping that narrowing it down to a small range of Java versions might help.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8111#issuecomment-1331373214:188,test,tests,188,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8111#issuecomment-1331373214,2,['test'],['tests']
Testability,"I suspect that we restricted it to GVCF mode because we didn't have time to test VCF mode in the push to call the ExAC samples. Did you try multi-sample VCF mode? It will probably be fine, but I've got this mixed up with the MNP issue in my mind.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5772#issuecomment-470944850:76,test,test,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5772#issuecomment-470944850,1,['test'],['test']
Testability,"I suspect this instance is cause by the branch being pushed and then a pr being created after a small delay. It gives the travis vms enough time to start and pass the check for ""no pr exists"". Then the PR is created and it starts a pr build while the original branch build is still runnning. I suspect a second push on this branch won't run the branch build again. . There's a small window of time between pushing the commit and making the pr where the branch build will be skipped entirely, but it's reasonable to get 1 branch build when you push a new branch. . It's also possible that I mangled the github key and the tests are always failing now.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7536#issuecomment-954986714:621,test,tests,621,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7536#issuecomment-954986714,1,['test'],['tests']
Testability,I suspect this is related to the jar configuration (3 separate uber- jars) that is unique to the docker CI tests. I'll debug and resolve this after #6351 is merged.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7991#issuecomment-1251462525:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7991#issuecomment-1251462525,1,['test'],['tests']
Testability,"I tested on a 30Gb file, trying to write to HDFS. It wrote more than 1.4 TB to disk and took hours to complete.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/940:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/940,1,['test'],['tested']
Testability,"I tested this by:; - running the `GvsAssignIds` workflow; - manually updated the `sample_ids` to span from 1 to 15535; - manually created the `vet_002`, `vet_003`, `vet_004`, `ref_ranges_002`, `ref_ranges_003`, `ref_ranged_004` tables; - running the `GvsImportGenomes` workflow; - running the `GvsPopulateAltAllele` workflow with `max_alt_allele_shards` to 3 so that it would divide the vet tables into (at most) 3 files; see https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/b1b319bc-a2aa-44cb-ad9a-079b7c1c33de for `GvsPopulateAltAllele` run",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7998:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7998,1,['test'],['tested']
Testability,I tested this on a Terra workspace here: https://app.terra.bio/#workspaces/broad-firecloud-dsde-methods/VariantCallingSparkMulticore.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6213#issuecomment-544576576:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6213#issuecomment-544576576,1,['test'],['tested']
Testability,"I tested this on a collection of 32 tandem duplications (~10kbp-50kbp events, 5kbp padding, 100bp bins) from an HGSV proband case. Using the latest release docker it nailed almost all of them (hooray!) but it hardly called any dups when I tried to do the calling/postprocessing locally using this branch (log reports successful convergence). This could just be an error on my end but we should check before merging.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4720#issuecomment-386454276:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4720#issuecomment-386454276,2,"['log', 'test']","['log', 'tested']"
Testability,"I tested this using the following sketchy procedure: I temporarily reverted https://github.com/broadinstitute/gatk/pull/5936 on this branch, thereby re-introducing non-ASCII characters into the source. That builds without error, as it should. Then I temporarily changed the newly added encoding declarations included this PR in build.gradle from ""UTF-8"" to ""US-ASCII"", after which I was able to reproduce exactly the same errors as reported in https://github.com/broadinstitute/gatk/issues/5934, for both compile and gatkDoc tasks. So I think these changes achieve the desired result (accept UTF-8 in source).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5946:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5946,1,['test'],['tested']
Testability,"I think a good test would be to add a new test vcf datasource with a number of fields, and the values of each field are just the field header. It's easy to assert that and obvious when there's an error.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6178#issuecomment-534738783:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6178#issuecomment-534738783,3,"['assert', 'test']","['assert', 'test']"
Testability,"I think it would be good for there to be as little lift as possible required to run the tests, so adding it to ./build_docker.sh is probably best.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7756#issuecomment-1113490893:88,test,tests,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7756#issuecomment-1113490893,1,['test'],['tests']
Testability,I think it's simply that HDF5Library uses `org.apache.log4j.LogManager` rather than `org.apache.logging.log4j.LogManager`.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3763#issuecomment-340867902:96,log,logging,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3763#issuecomment-340867902,4,"['Log', 'log']","['LogManager', 'logging']"
Testability,I think tests are failing only because I changed a header line. I will update the expected VCFs.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7996#issuecomment-1263856833:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7996#issuecomment-1263856833,1,['test'],['tests']
Testability,"I think that a proper example would be the one in the tutorial from @sooheelee (https://software.broadinstitute.org/gatk/blog?id=7847, see also https://github.com/broadinstitute/gatk/issues/3104#issuecomment-314886000). I divided the PRs for the `IndelRealignment` into 4 different sections for better review (2 components of indel-realignment, `RealignerTargetCreator`and `IndelRealignment`). This strategy is because I dissected the pipeline into the easy `RealignerTargetCreator` to found regions worth to look at (this could be marked as experimental/beta before the indel-realignment is in) and the more complicated and component-based `IndelRealigner` (the same as with other tools, this can be marked as experimental/beta until a really good coverage is achieved - in the meantime, I have some test with the current data in the repository and the GATK3 counterpart). There are two parts that are usable outside `IndelRealigner` that are worthy to separate into two commits, and might be useful for other tools/downstream projects: `ConstrainedMateFixingManager` and `NWaySAMFileWriter`. That's the reason of making the port in split PRs. One option can be to have the PRs open, and reviewed independently without acceptance until every component is ready. Otherwise, I think that an experimental tag would be good until we find a good set of tests for edge cases. Does this approach make sense for you, @cmnbroad?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-366187605:801,test,test,801,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-366187605,4,['test'],"['test', 'tests']"
Testability,"I think that change is fine. I expected you to add a test, rather than altering an existing one, but it looks like you are testing a superset of the typical conditions, anyway. If that is not the case, don't merge. Otherwise, go for it!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2556#issuecomment-290980959:53,test,test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2556#issuecomment-290980959,2,['test'],"['test', 'testing']"
Testability,"I think the code and tests are fine (except for the conflicts). I was just trying to empathize about updating expected GVCFs. I want to talk to the engine team about the release schedule, but we won't merge anything else in the HC->GGVCFs pipeline before this, so the tests won't need updating.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-445876386:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-445876386,2,['test'],['tests']
Testability,"I think the issue might be that you need a ` -- ` between the gatk options on the left, and the spark specific options on the right. This is a confusing artifact of how our arg parsing works and the fact that the gatk-launch script needs a way of finding the spark options but doesn't have access to our java parser. (we're planning on fixing that in the near future, but no good time line) . Could you try:; ```; /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --javaOptions -Dmapr.library.flatclass -- --sparkRunner SPARK --sparkMaster yarn --deploy-mode cluster; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350064538:504,test,testing,504,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350064538,1,['test'],['testing']
Testability,"I think this is a duplicate of https://github.com/broadinstitute/gatk/issues/2219. Based on that ticket, it appears that this error occurs when trying to write an empty file -- which is why I was hoping that https://github.com/broadinstitute/gatk/pull/2494 would fix this by adjusting the read filtering. @tushu1232 Can you test with https://github.com/broadinstitute/gatk/pull/2494 and tell us whether you still see the error?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2503#issuecomment-288545709:324,test,test,324,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2503#issuecomment-288545709,1,['test'],['test']
Testability,I think this is fixed but we need to test it.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2119#issuecomment-319406469:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2119#issuecomment-319406469,1,['test'],['test']
Testability,I think this is ready for initial review while I start testing it on larger scale data. I've left adding in the full VQSR tranche filtering as TODOs for now.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6971:55,test,testing,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6971,1,['test'],['testing']
Testability,"I think this is still worth pursuing, but we need to do some legwork to set up good tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4903#issuecomment-459443188:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4903#issuecomment-459443188,1,['test'],['tests']
Testability,I think this issue still persists: ; The Genome Analysis Toolkit (GATK) v4.1.3.0; ```; 2019-10-29T18:18:04.000640760Z java.lang.IllegalArgumentException: log10 p: Values must be non-infinite and non-NAN; 2019-10-29T18:18:04.001018863Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.logSumExp(NaturalLogUtils.java:84); 2019-10-29T18:18:04.001194549Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.normalizeLog(NaturalLogUtils.java:51); 2019-10-29T18:18:04.001367357Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.clusterProbabilities(SomaticClusteringModel.java:203); 2019-10-29T18:18:04.001518160Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.probabilityOfSequencingError(SomaticClusteringModel.java:96); 2019-10-29T18:18:04.001673083Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.TumorEvidenceFilter.calculateErrorProbability(TumorEvidenceFilter.java:27); 2019-10-29T18:18:04.001846904Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.Mutect2VariantFilter.errorProbability(Mutect2VariantFilter.java:15); 2019-10-29T18:18:04.002024760Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.ErrorProbabilities.lambda$new$1(ErrorProbabilities.java:19); 2019-10-29T18:18:04.002140012Z 	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321); 2019-10-29T18:18:04.002232542Z 	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169); 2019-10-29T18:18:04.002242727Z 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382); 2019-10-29T18:18:04.002292461Z 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); 2019-10-29T18:18:04.002301667Z 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); 2019-10-29T18:18:04.002307019Z 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708); 2019-10-29T18:18:04.002311722Z 	at java.util.s,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6237:291,log,logSumExp,291,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6237,1,['log'],['logSumExp']
Testability,I think this issue still persists: ; The Genome Analysis Toolkit (GATK) v4.1.3.0; ```; 2019-10-29T18:18:04.000640760Z java.lang.IllegalArgumentException: log10 p: Values must be non-infinite and non-NAN; 2019-10-29T18:18:04.001018863Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.logSumExp(NaturalLogUtils.java:84); 2019-10-29T18:18:04.001194549Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.normalizeLog(NaturalLogUtils.java:51); 2019-10-29T18:18:04.001367357Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.clusterProbabilities(SomaticClusteringModel.java:203); 2019-10-29T18:18:04.001518160Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.probabilityOfSequencingError(SomaticClusteringModel.java:96); 2019-10-29T18:18:04.001673083Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.TumorEvidenceFilter.calculateErrorProbability(TumorEvidenceFilter.java:27); 2019-10-29T18:18:04.001846904Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.Mutect2VariantFilter.errorProbability(Mutect2VariantFilter.java:15); 2019-10-29T18:18:04.002024760Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.ErrorProbabilities.lambda$new$1(ErrorProbabilities.java:19); 2019-10-29T18:18:04.002140012Z 	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321); 2019-10-29T18:18:04.002232542Z 	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169); 2019-10-29T18:18:04.002242727Z 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382); 2019-10-29T18:18:04.002292461Z 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); 2019-10-29T18:18:04.002301667Z 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); 2019-10-29T18:18:04.002307019Z 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708); 2019-10-29T18:18:04.002311722Z 	at java.util.s,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5821#issuecomment-547566300:291,log,logSumExp,291,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5821#issuecomment-547566300,1,['log'],['logSumExp']
Testability,"I think this makes sense, but is low priority and can definitely wait until after release.; Add tests for theano HMM + example use case for Hybrid ADVI.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4043:96,test,tests,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4043,1,['test'],['tests']
Testability,I think this will be difficult and we don't have a python unit testing framework. Let's try for some simple tests in #4375.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4464#issuecomment-459532819:63,test,testing,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4464#issuecomment-459532819,4,['test'],"['testing', 'tests']"
Testability,I think uploading the logs to a bucket like we do with the test outputs is a good idea. There's an example of how to do it in the after_script block of the .travis.yml.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4130#issuecomment-358056737:22,log,logs,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4130#issuecomment-358056737,2,"['log', 'test']","['logs', 'test']"
Testability,"I think we can close this, we have simulated data used for gCNV tests in 4.0.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2841#issuecomment-356685286:64,test,tests,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2841#issuecomment-356685286,1,['test'],['tests']
Testability,"I think we could probably change away from 3.25, I have 3.4.3 installed on my machine and tests run fine. We just chose one arbitrarily that worked and set it at that so that it wouldn't change out from under us.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4209#issuecomment-359074433:90,test,tests,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4209#issuecomment-359074433,1,['test'],['tests']
Testability,"I think we just don't have any borderline cases in our integration tests. We have a lot of cases where VQSR passes and one with artificial data where it's obviously going to fail. I couldn't reproduce the particular failure they saw in production, so I didn't want to add that to Travis if it's persnickety.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6534#issuecomment-617341642:67,test,tests,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6534#issuecomment-617341642,1,['test'],['tests']
Testability,I think we should merge this PR. Our fixes are a sort of workaround the fact that GCS doesn't warm up as quickly as we'd like it to. It's good to have the code to test that again if needed.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3070#issuecomment-330364525:163,test,test,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3070#issuecomment-330364525,1,['test'],['test']
Testability,I think we will add a logger for GenomicsDB with configurable verbosity - but this is low priority for us.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2689#issuecomment-300298389:22,log,logger,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2689#issuecomment-300298389,1,['log'],['logger']
Testability,"I think without a matched normal, there is not much you can do for high purity samples in LOH regions. Flipping the binomial test to filter against the null hypothesis of hom (rather than a null of f = 0.5, as in GetHetCoverage) seems to work well otherwise. Expanding the allele-fraction model to include hom sites is an option, but then you would be guided by the prior. Closing for now.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2856#issuecomment-335586260:125,test,test,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2856#issuecomment-335586260,2,['test'],['test']
Testability,I took the 2022-03-10-4.2.5.0-13-g1c749b37f-NIGHTLY-SNAPSHOT from 18hours ago and got what looks to be the same error message. [mutect2.log](https://github.com/broadinstitute/gatk/files/8226353/mutect2.log),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7700#issuecomment-1064400690:136,log,log,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7700#issuecomment-1064400690,2,['log'],['log']
Testability,"I tried `CountReadsSpark` and that also worked fine:. ```; $ ./gatk-launch CountReadsSpark -I gs://$BUCKET/hellbender-test-inputs/CEUTrio.HiSeq.WGS.b37.ch20.1m-2m.NA12878.bam -O gs://$BUCKET/test-output/readcount_2 -- --sparkRunner GCS --cluster jps-test-cluster; [November 20, 2017 7:04:27 PM UTC] org.broadinstitute.hellbender.tools.spark.pipelines.CountReadsSpark done. Elapsed time: 0.43 minutes.; Runtime.totalMemory()=653787136; Job [d9b686ed-3971-4494-b98b-336f751a449d] finished successfully.; (...); $ gsutil cat gs://$BUCKET/test-output/readcount_2; 836574; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3855#issuecomment-345795866:118,test,test-inputs,118,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3855#issuecomment-345795866,4,['test'],"['test-cluster', 'test-inputs', 'test-output']"
Testability,"I tried a quick upgrade of our guava dependency from 18 -> 22, but it ends in test failures. It looks like at least one of our hadoop dependencies requires guava <= 18. I'm not totally clear if it's an issue for hadoop-core or only in hadoop-minicluster which is a library we use for running tests. If you're not using hdfs I think you won't have any problems including 22, but I'm afraid we can't upgrade our default version without some work. . Hopefully hadoop 3.x will solve the problem in general by shading their internal version of guava. ; https://issues.apache.org/jira/browse/HADOOP-14284, https://issues.apache.org/jira/browse/HADOOP-10101. It sounds like you have a reasonable workaround, let us know if you have further issues with it.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3102#issuecomment-308181516:78,test,test,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3102#issuecomment-308181516,4,['test'],"['test', 'tests']"
Testability,"I tried rewriting the core part of MarkDuplicatesSpark to use Spark Datasets rather than the current RDD implementation: see https://github.com/broadinstitute/gatk/compare/tw_md_spark_sql. The classes in `org.broadinstitute.hellbender.utils.read.markduplicates.sparkrecords` are replaced with a single ""union"" type `MarkDuplicatesSparkSqlRecord`, that can represent all of them (it uses a `type` field to indicate which is stored). To test, I ran `MarkDuplicatesSpark` before and after the change on a cluster on exome-sized data. . Before: 7.32 minutes; After: 7.43 minutes. So there was no significant difference in runtime with this change. This is probably because the part of `MarkDuplicatesSpark` that was changed is the `group by` on fragment/pair key, which actually is a fairly small part of the total runtime of MD; the rest is a shuffle to ensure the input data is queryname sorted. (Previous experiments have shown that using Spark SQL is no faster than using Spark RDDs for sorting reads.). /cc @jamesemery @droazen",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6103#issuecomment-523052748:435,test,test,435,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6103#issuecomment-523052748,1,['test'],['test']
Testability,"I tried several things, the only thing that has made the call was -forceActive.; For -minPruning HaplotypeCaller would only accept integer values, I tested 0,1,2,3, and none of these worked.; I also tried setting -dontTrimActiveRegions and --allowNonUniqueKmersInRef (separately, not simultaneously) neither helped with grabbing the het call. Based on the fact that forceActive allows the call to be made, it seems like the problem is in the definition of active regions...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3697#issuecomment-400024228:149,test,tested,149,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3697#issuecomment-400024228,1,['test'],['tested']
Testability,"I tried the FilterSamReads command using the Picard jar file and the output bam file to stdout had no issues; Command:; `java -jar ~/picard/build/libs/picard.jar FilterSamReads -I subsampled.bam -O /dev/stdout --READ_LIST_FILE read_names.txt --FILTER excludeReadList --VALIDATION_STRINGENCY SILENT --QUIET > picard_stdoutbam.bam`; Log:; ```; 10:33:09.327 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/gbrandt/picard/build/libs/picard.jar!/com/intel/gkl/native/libgkl_compression.dylib; INFO	2021-02-23 10:33:09	FilterSamReads	Filtering [presorted=true] subsampled.bam -> OUTPUT=stdout [sortorder=coordinate]; INFO	2021-02-23 10:33:09	SAMFileWriterFactory	Unknown file extension, assuming BAM format when writing file: file:///dev/stdout; INFO	2021-02-23 10:33:09	FilterSamReads	6 SAMRecords written to stdout; ```; Checking the file:; `gunzip -c -d -f picard_stdoutbam.bam | head -n 5`; No issues:; ```; BAM?2@HD	VN:1.6	SO:coordinate; @SQ	SN:1	LN:249250621	AS:NCBI-Build-37	SP:Homo sapiens	UR:http://www.bcgsc.ca/downloads/genomes/9606/hg19/1000genomes/bwa_ind/genome/GRCh37-lite.fa; @SQ	SN:2	LN:243199373	AS:NCBI-Build-37	SP:Homo sapiens	UR:http://www.bcgsc.ca/downloads/genomes/9606/hg19/1000genomes/bwa_ind/genome/GRCh37-lite.fa; @SQ	SN:3	LN:198022430	AS:NCBI-Build-37	SP:Homo sapiens	UR:http://www.bcgsc.ca/downloads/genomes/9606/hg19/1000genomes/bwa_ind/genome/GRCh37-lite.fa; @SQ	SN:4	LN:191154276	AS:NCBI-Build-37	SP:Homo sapiens	UR:http://www.bcgsc.ca/downloads/genomes/9606/hg19/1000genomes/bwa_ind/genome/GRCh37-lite.fa; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7080#issuecomment-784427228:331,Log,Log,331,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7080#issuecomment-784427228,1,['Log'],['Log']
Testability,"I tried this branch out and got the dreaded 404 error, unfortunately:. ```; $ ./gatk-launch CountReadsSpark -I gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -- --sparkRunner GCS --cluster droazen-test-cluster --executor-cores 2 --num-executors 2; Using GATK jar /Users/droazen/src/hellbender/build/libs/gatk-package-4.beta.6-54-g0ee99da-SNAPSHOT-spark.jar; jar caching is disabled because GATK_GCS_STAGING is not set. please set GATK_GCS_STAGING to a bucket you have write access too in order to enable jar caching; add the following line to you .bashrc or equivalent startup script. export GATK_GCS_STAGING=gs://<my_bucket>/. Replacing spark-submit style args with dataproc style args. --cluster droazen-test-cluster --executor-cores 2 --num-executors 2 -> --cluster droazen-test-cluster --properties spark.driver.userClassPathFirst=true,spark.io.compression.codec=lzf,spark.driver.maxResultSize=0,spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.kryoserializer.buffer.max=512m,spark.yarn.executor.memoryOverhead=600,spark.executor.cores=2,spark.executor.instances=2. Running:; gcloud dataproc jobs submit spark --cluster droazen-test-cluster --properties spark.driver.userClassPathFirst=true,spark.io.compression.codec=lzf,spark.driver.maxResultSize=0,spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3855#issuecomment-347320994:127,test,test,127,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3855#issuecomment-347320994,4,['test'],"['test', 'test-cluster']"
Testability,"I tried to ERR000589 process data with BwaSpark. The bam file size is 1.3G. The average time spent is about 25 min (5 nodes).; However it would only cost 5 min in processing same data if I tried to use original C bwa with 32 threads.; Base on this observation, I have several questions list as follow:; 1. If there is anything wrong with my params?; 2. For each Partition, is BwaSpark running in multi-thread mode?; 3. How to control the number of the bwa threads inside BwaSpark?. P.S. ; The running command is:; ./gatk-launch BwaSpark -I hdfs:///user/XX/ERR000589/ERR000589.bam -O hdfs:///user/XX/ERR000589/ERR000589_bwa.bam -R hdfs:///user/xx/refs/ucsc.hg19.fasta --bwamemIndexImage ~/data/ref/ucsc.hg19.img -disableSequenceDictionaryValidation true -- --sparkRunner SPARK --sparkMaster <master_url> --executor-cores 1 --total-executor-cores 16 --executor-memory 4G. I tried to further adjust the following parameters,; --executor-cores --total-executor-cores --executor-memory --driver-memory; but none of these took less time than 16 min. Besides, I alsow tried to run it in local mode, while it won't end successfully. It seems that CPU was in endless waiting. I guess it occupied so much memory that the swap space is in use? Pic 1 shows the memory consumed while running ; This time, the command is:; ./gatk-launch BwaSpark -I hdfs:///user/XX/ERR000589/ERR000589.bam -O hdfs:///user/xx/ERR000589/ERR000589.bwa.bam -R /software/home/xx/data/ref/ucsc.hg19.fasta \ --bwamemIndexImage ~/data/ref/ucsc.hg19.img -disableSequenceDictionaryValidation true -- --sparkRunner SPARK --sparkMaster local[*] --total-executor-cores 8 --executor-memory 20G --driver-memory 30G. BTW, the testing environment is:; CPU 2 X 8 physical core; node: 5 ; network: GBE; memory: 64G; ![memory](https://cloud.githubusercontent.com/assets/22440517/25929003/19a38210-3632-11e7-8dfc-c18f75604de6.png); ![cpu](https://cloud.githubusercontent.com/assets/22440517/25929008/205497ac-3632-11e7-8aa9-9c459d99371d.png)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2705:1679,test,testing,1679,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2705,1,['test'],['testing']
Testability,"I tried to do it, and I'm afraid that it won't be trivial as I expected: because it is a facade, there is not accesibility to `Logger.setLogLevel()` and this is required to set the verbosity level in the command line. After explore a bit the code, it seems that [`LoggingUtils`](https://github.com/broadinstitute/gatk/blob/master/src/main/java/org/broadinstitute/hellbender/utils/LoggingUtils.java) is the only place where a concrete implementation should be used. My suggestion is to move this class to a package that could be excluded by the backend user (because it contains methods to change the logging of log4j, I suggest `org.apache.logging.log4j`), which implements a simple interface/abstract class `org.broadinstitute.hellbender.utils.LoggingUtils` to set the log level (LoggingUtils.setLoggingLevel(final Log.LogLevel verbosity)`. The default implementation (that could be used by final users callid`super.setLoggingLevel(final Log.LogLevel verbosity)`) could setup the htsjdk and the java.util.logger.Logger. This implementation requires to change the `CommandLineProgram` to have a setter for the `LoggingUtils` to use, that could be set in `Main` (as in my PR for improve the extensibility of this class). The only pronblem is that it requires to be initialize with a simple implementation class of `LoggingUtils`, which should use the default. I think that this design does not break the behaviour of GATK, but introduce more complexity in the code. If you think that this is worthy, I could implement it today. @lbergelson, I'm not able to run Spark tools in a cluster yet, neither in gcloud dataproc, sorry. I'll wait for your answers on this.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2176#issuecomment-259073062:600,log,logging,600,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2176#issuecomment-259073062,20,"['Log', 'log']","['Log', 'LogLevel', 'Logger', 'LoggingUtils', 'log', 'logger', 'logging']"
Testability,"I tried to process data with BQSRPipelineSpark( the latest released gatk4 beta version), but the job always failed at middle of processing.; I use ERR000589, the bam file size is 1.3G.; knownSites uses dbsnp_138.hg19.vcf, and the data size is 10G.; reference is ucsc.hg19.2bit, data size is 0.8G .; it was running on spark2.0, and there are 4 worker in total. Each node has 16 physical cores and 64G data memory.; Below is my command.; ./gatk-launch BQSRPipelineSpark -I hdfs:///user/xxx/ERR000589.bwa.mark.bam -O hdfs:///user/xxx/ERR000589.bwa.marked.bqsr.bam -R hdfs:///user/liucheng/refs/ucsc.hg19.2bit --knownSites hdfs:///user/liucheng/dbsnp/dbsnp_138.hg19.vcf -- --sparkRunner SPARK --sparkMaster spark://cu11:7077 --total-executor-cores 48 --executor-cores 6 --executor-memory 25G --driver-memory 30G. The log is attached as follow:; [July 19, 2017 2:39:55 PM CST] org.broadinstitute.hellbender.tools.spark.pipelines.BQSRPipelineSpark done. Elapsed time: 3.24 minutes.; Runtime.totalMemory()=23515365376; com.esotericsoftware.kryo.KryoException: java.lang.NegativeArraySizeException; Serialization trace:; vs (org.broadinstitute.hellbender.utils.collections.IntervalsSkipListOneContig); intervals (org.broadinstitute.hellbender.utils.collections.IntervalsSkipList); 	at com.esotericsoftware.kryo.serializers.ObjectField.write(ObjectField.java:101); 	at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:518); 	at com.esotericsoftware.kryo.Kryo.writeObjectOrNull(Kryo.java:606); 	at com.esotericsoftware.kryo.serializers.MapSerializer.write(MapSerializer.java:109); 	at com.esotericsoftware.kryo.serializers.MapSerializer.write(MapSerializer.java:39); 	at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:552); 	at com.esotericsoftware.kryo.serializers.ObjectField.write(ObjectField.java:80); 	at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:518); 	at com.esotericsoftware.kryo.Kryo.writeClassAndObject(Kryo.java:628); 	at o",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3303:813,log,log,813,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3303,1,['log'],['log']
Testability,"I tried to reproduce this error, but failed. In fact, we have CI tests that exercise this case. Could you describe the case in more detail? Perhaps I misunderstood. * VCF A (single sample VCF) has a long deletion and overlapping spanning deletions in subsequent lines; * It gets imported into GenomicsDB along with other files; * Querying a position that overlaps the long deletion causes a crash",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5449#issuecomment-445910647:65,test,tests,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5449#issuecomment-445910647,1,['test'],['tests']
Testability,"I tried to run VariantRecalibrator using the args echoed from an integration test and found that the resource files weren't listed properly. The command in the test was ` "" --resource known,known=true,prior=10.0:"" + getLargeVQSRTestDataDir() + ""dbsnp_132_b37.leftAligned.20.1M-10M.vcf""` and what came out of the engine was `--resource known:/Users/gauthier/workspaces/gatk/src/test/resources/large/VQSR/dbsnp_132_b37.leftAligned.20.1M-10M.vcf`, so it lost the known=true and the prior which makes the command line unrunnable. Probably affects #2269 too. This behavior can be replicated by running any of the VariantRecalibration integration tests and checking the console output.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3247:77,test,test,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3247,4,['test'],"['test', 'tests']"
Testability,"I tried to run the whole test suite with `./gradlew clean test`, and several tests are failing with `org.broadinstitute.hellbender.exceptions.UserException$HardwareFeatureException: Machine does not support AVX PairHMM`:. * `HaplotypeCallerIntegrationTest`; * `HaplotypeCallerSparkIntegrationTest`; * `ReadsPipelineSparkIntegrationTest`. Because there are already several tests skipped if the support is not present (e.g., `VectorPairHMMUnitTest`), I expect that the tests do not fail and are skipped instead. I understand that maybe it is important to keep them failing with the GKL implementation for integration, but maybe a setting a flag to force them to do not be skipped would be enough in the travis build to check that nothing is broken, and still do not be scare if lots of tests fail after an unrelated change in a non-AVX machine...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3732:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3732,6,['test'],"['test', 'tests']"
Testability,I updated the test to check that the bases that remain in the reads are indeed the correct length and bases. I use random bases since createArtificialRead returns 'A' bases and so we will not know if it was the first or the last bases that were removed.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6139#issuecomment-529004212:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6139#issuecomment-529004212,1,['test'],['test']
Testability,I updated the test to check the output genotype here and I'm now in the process of running the WARP tests and on a dragen callset with 60 haploid/diploid mix samples.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8862#issuecomment-2168083426:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8862#issuecomment-2168083426,2,['test'],"['test', 'tests']"
Testability,"I upgraded both the File and the Path tests for `createCommonSAMWriter`, checking that the written file contents match the source file.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332080826:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332080826,1,['test'],['tests']
Testability,"I uploaded a slice of a cram file with a script that triggers the error.; The name of the file is issue.3845.tar.gz. On Wed, Jan 17, 2018 at 4:09 PM, Louis Bergelson <notifications@github.com>; wrote:. > @jjfarrell <https://github.com/jjfarrell> Yes, the fix was included in; > 4.0.0.0, if you're still encountering the problem then the fix must be; > incomplete. Would it be possible to provide a test case that triggers the; > bug in 4.0.0.0?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/issues/3845#issuecomment-358446091>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AB3rDZRttq4wA6-k9ri1dJlN4NaaPamyks5tLmGdgaJpZM4QgCf5>; > .; >. -- ; John Farrell, Ph.D.; Biomedical Genetics-Evans 218; Boston University Medical School; 72 East Concord Street; Boston, MA. ph: 617-638-5491",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3845#issuecomment-358517044:398,test,test,398,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3845#issuecomment-358517044,1,['test'],['test']
Testability,"I use PreprocessIntervals to convert my bed,but noo output of chrY data was found,the output is empty. example : my bed data; ; ![image](https://github.com/user-attachments/assets/416a31dd-1e71-4b0a-9dd1-357364120288). my command : . **gatk PreprocessIntervals -L test.bed -R Homo_sapiens_assembly38.fasta --bin-length 0 --interval-merging-rule OVERLAPPING_ONLY -O test.interval_list** . Why is this happening, is there something unusual in this ChrY area?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8945:264,test,test,264,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8945,2,['test'],['test']
Testability,"I use gatk 4.0.0.0.; I don't think the crashing caused by running ConvertHeaderlessHadoopBamShardToBam .Beause I try the test with unalign Header-Bam file by picard tools , the BwaAndMarkDuplicatesPipelineSpark crashing is still",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4179#issuecomment-358606933:121,test,test,121,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4179#issuecomment-358606933,1,['test'],['test']
Testability,I use this class to allow the user to pass a Normal or LogNormal expected distribution for insert sizes; notice that the String parameter constructor allows for it to use as an [at]Argument type in a tool. . @tedsharpe please review.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4827#issuecomment-393313238:55,Log,LogNormal,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4827#issuecomment-393313238,1,['Log'],['LogNormal']
Testability,"I used newly GATK4.1 version, and my scripts are:. java -Xmx300g -jar $GATK Mutect2 \; --dont-use-soft-clipped-bases true \; --tmp-dir $cw/$i/tmp \; --input $DNAbam/ADAR16-DNA-2_NKD180600323/ADAR16-DNA-2_NKD180600323.best.uniq.pair.sort.markdup.bam \; --input $RNAbam/$i/$i.merge.markdup.reheader.bam \; --reference $genome\; --output $cw/$i/$i.dna.rna.vcf \; --normal-sample ADAR16-DNA-2_NKD180600323 \; --tumor-sample $i \; -bamout $cw/$i/$i.support.bam. and tail of error log are:. 12:05:06.287 INFO ProgressMeter - scaffold23905:111448 948.1 636040 670.9; 12:05:30.519 INFO ProgressMeter - scaffold23905:133852 948.5 636120 670.7; 12:05:57.277 INFO ProgressMeter - scaffold23905:147186 949.0 636170 670.4; 12:24:34.669 INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 31261.455155273; 12:24:34.670 INFO SmithWatermanAligner - Total compute time in java Smith-Waterman : 14618.28 sec; INFO	2019-04-13 12:45:11	SortingCollection	Creating merging iterator from 2 files; 13:30:49.708 INFO Mutect2 - Shutting down engine; [April 13, 2019 1:30:49 PM CST] org.broadinstitute.hellbender.tools.walkers.mutect.Mutect2 done. Elapsed time: 1,035.35 minutes.; Runtime.totalMemory()=238653800448; Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space; 	at java.util.Arrays.copyOf(Arrays.java:3332); 	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:137); 	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:121); 	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:421); 	at java.lang.StringBuilder.append(StringBuilder.java:136); 	at htsjdk.samtools.SAMTextHeaderCodec.advanceLine(SAMTextHeaderCodec.java:142); 	at htsjdk.samtools.SAMTextHeaderCodec.decode(SAMTextHeaderCodec.java:97); 	at htsjdk.samtools.reference.ReferenceSequenceFileFactory.loadDictionary(ReferenceSequenceFileFactory.java:235); 	at htsjdk.samtools.reference.AbstractFastaSequenceFile.(AbstractFastaSequenceFile.java:68)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5900:475,log,log,475,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5900,1,['log'],['log']
Testability,"I utilized Mutect2 during clinical tumor testing, and the example I provided earlier clearly represents a false positive site. Regrettably, Mutect2 failed to accurately identify it, thereby leading to the inclusion of such false positive sites in clinical medical reports. This outcome is entirely unacceptable. If it is inappropriate to categorize these false positives as STRs, are there alternative methods available for determining these erroneous sites?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8340#issuecomment-1613985690:41,test,testing,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8340#issuecomment-1613985690,2,['test'],['testing']
Testability,"I was able to download the gnomAD VCFs with a gsutil cp command within a; couple hours of the remote funcotator failures. --; Alan Hoyle - alan@alanhoyle.com - alanhoyle.com; ------------------------------; *From:* Jonn Smith <notifications@github.com>; *Sent:* Tuesday, November 10, 2020 9:59:06 PM; *To:* broadinstitute/gatk <gatk@noreply.github.com>; *Cc:* Alan Hoyle <alan@alanhoyle.com>; Mention <mention@noreply.github.com>; *Subject:* Re: [broadinstitute/gatk] Funcotator with gnomAD enabled crashes; with Bad Request (#6926). I have tested this with a fresh gcloud client and have not been able to; reproduce the error. I did find an article from someone else who got the 400: invalid_grant; error:; https://blog.timekit.io/google-oauth-invalid-grant-nightmare-and-how-to-fix-it-9f4efaf1da35; <https://www.google.com/url?q=https://blog.timekit.io/google-oauth-invalid-grant-nightmare-and-how-to-fix-it-9f4efaf1da35&source=gmail-imap&ust=1605668351000000&usg=AOvVaw03ZXI9QiPy1AFI5zfsFIjB>. The long and short of it is that it's an authentication issue. Can you; verify that the authentication you're using on the terminal is valid? That; is, can you get at other public resources on gcloud?. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub; <https://www.google.com/url?q=https://github.com/broadinstitute/gatk/issues/6926%23issuecomment-725097056&source=gmail-imap&ust=1605668351000000&usg=AOvVaw0sZboplCCqclv3xBdQk3Fb>,; or unsubscribe; <https://www.google.com/url?q=https://github.com/notifications/unsubscribe-auth/AACGX433BU42UPHZTKQLTBTSPH4XVANCNFSM4TD2FDGA&source=gmail-imap&ust=1605668351000000&usg=AOvVaw0n415Vb2d-0gOnEk9wramu>; .",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6926#issuecomment-728261716:541,test,tested,541,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6926#issuecomment-728261716,1,['test'],['tested']
Testability,I was able to get all the unit tests working after updating to the current master branch and making sure to use Java 8.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748#issuecomment-696986279:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748#issuecomment-696986279,1,['test'],['tests']
Testability,"I was able to replicate the users error with GATK4.1.1.0 and the latest build on Nov21. The users data is on the FTP as livinlrg_Problem_Interval. . Running SelectVariants on the same data generates the same error as GenomicsDBImport. ```; /home/tools/gatk/gatk SelectVariants --java-options ""-Xmx20g"" -R /home/test/livinlrg_Problem_Interval/Reference/sacCer3_2micron.fasta -V gendb:///home/test/livinlrg_Problem_Interval/GenomicsDB_ProblemInterval_Test -O /home/test/livinlrg_Problem_Interval/work_dir/selectvariantsout.vcf. WARNING: No valid combination operation found for INFO field MLEAF - the field will NOT be part of INFO fields in the generated VCF records; 14:28:46.814 INFO ProgressMeter - chrI:2000 0.2 2000 10258.2; 14:29:00.359 INFO ProgressMeter - chrI:6003 0.4 6000 14261.4; 14:29:28.258 INFO SelectVariants - Shutting down engine; GENOMICSDB_TIMER,GenomicsDB iterator next() timer,Wall-clock time(s),37.44650732699998,Cpu time(s),37.414083634000015; [November 21, 2019 2:29:29 PM UTC] org.broadinstitute.hellbender.tools.walkers.variantutils.SelectVariants done. Elapsed time: 0.92 minutes.; Runtime.totalMemory()=1783103488; htsjdk.tribble.TribbleException: Invalid block size -1539959833; at htsjdk.variant.bcf2.BCF2Decoder.readNextBlock(BCF2Decoder.java:66); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:134); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:58); at org.genomicsdb.reader.GenomicsDBFeatureIterator.next(GenomicsDBFeatureIterator.java:181); at org.genomicsdb.reader.GenomicsDBFeatureIterator.next(GenomicsDBFeatureIterator.java:49); at java.util.Iterator.forEachRemaining(Iterator.java:116); at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801); at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482); at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472); at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150); at java.util.stream.ForEachOps$F",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6275:311,test,test,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6275,3,['test'],['test']
Testability,"I was able to reproduce a hang in `VariantsSparkSinkUnitTest` by running a test group with only `IntelInflaterDeflaterIntegrationTest` and `VariantsSparkSinkUnitTest`. Removing this line in `testIntelInflaterDeflaterWithPrintReads` resolved the hang on my system:; ```java; args.add(""--verbosity""); args.add(""DEBUG"");; ```. After setting the verbosity to DEBUG here, all subsequent tests use the same level of verbosity. This generated >1G of log information during `VariantsSparkSinkUnitTest` before hanging. @cmnbroad, can you please try running on your system with the verbosity setting removed in `IntelInflaterDeflaterIntegrationTest.testIntelInflaterDeflaterWithPrintReads`?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2490#issuecomment-290957700:75,test,test,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2490#issuecomment-290957700,5,"['log', 'test']","['log', 'test', 'testIntelInflaterDeflaterWithPrintReads', 'tests']"
Testability,"I was able to trigger the ArrayIndexOutOfBoundException (and subsequently fix it with your synchronization) with the following code, so perhaps a test similar to this would be useful to include:; ``` @Test(); public void testRaceCondition(){; final GenotypeLikelihoodCalculators calculator = new GenotypeLikelihoodCalculators();. List<int[]> counts = new ArrayList<>();; Random random = new Random(10);; for (int i = 1; i < 19; i++) {; counts.add(new int[]{random.nextInt(i), random.nextInt(i)});; }. Utils.stream(counts).parallel().forEach(params -> calculator.getInstance(params[0]+1, params[1]+1));; }```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5071#issuecomment-417006227:146,test,test,146,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5071#issuecomment-417006227,3,"['Test', 'test']","['Test', 'test', 'testRaceCondition']"
Testability,"I was looking into this myself as part of other argument renaming tasks. I don't see that you have changed any of the recalibration table arguments checked into the repo, namely in the test resources /tools/BQSR. (eg. `src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.lowMaxCycle.table`) You should probably take a look at this and other .table files and maybe update them to have more up to date summary statistics, as it could indicate that the gatk is writing its output with the old argument styles as these are used in integration tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4029#issuecomment-355064406:185,test,test,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4029#issuecomment-355064406,3,['test'],"['test', 'tests']"
Testability,"I was mistaken about this not being faster - I was using a counting function that Spark can optimise by pulling onto the map side so that the records don't go through the shuffle. I changed this to simply dump the processed reads so they have to go through the shuffle, and I got the following timings when processing a 121GB BAM file.; - With shuffle: 27 min; - No shuffle (two scans over input): 24.7 min (8% saving); - No shuffle (one scan over input): 17 min (37% saving). The version that does two scans is faster, but not hugely so. Removing a scan is possible, but requires the use of a sequence dictionary to find the end points of contigs. I've done this in the latest version of my branch (https://github.com/broadinstitute/gatk/compare/tw_overlap_partitioner), but there are more edge cases to test. Before I do this, however, it would be worth trying this approach with the Haplotype Caller to see if it works, and if it is appreciably faster. If the number of reads is filtered significantly so only a fraction go through the shuffle, then the performance gains will be smaller, and may not in fact be worth the increase in code complexity. @droazen, what do you think?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1988#issuecomment-249590040:805,test,test,805,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1988#issuecomment-249590040,1,['test'],['test']
Testability,"I was running this cmd : ; I get : java -jar /Users/mac/Downloads/picard-2.jar AddOrReplaceReadGroups I=/Users/mac/Desktop/NGS-/SRR6369642-pe.bam O=/Users/mac/Desktop/NGS-/SRR6369642-pe-RG.bam RGID=C7BDWACXX.5 RGLB=Lmj_A445_EP+3.2run1 RGPL=Illumina RGPU=C7BDWACXX.5 RGSM=NO8162944. record positions. Printing Read-names as well.; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000000010d32bea7, pid=1681, tid=6403; #; # JRE version: Java(TM) SE Runtime Environment (8.0_65-b17) (build 1.8.0_65-b17); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.65-b01 mixed mode bsd-amd64 compressed oops); # Problematic frame:; # C [libgkl_compression7875913179822684367.dylib+0x6ea7] deflate_medium+0x867; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /Users/mac/Desktop/NGS-/hs_err_pid1681.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #; Abort trap: 6. how can I fix it",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6796:991,log,log,991,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6796,1,['log'],['log']
Testability,I was testing the latest beta.6 release and ran into an issue that HaplotypeCallerSpark no longer outputs bgzipped VCF outputs. Specifying `--output outfile.vcf.gz` produces a plain unzipped VCF. This worked in the beta.5 release so appears to be due to recent changes. Here is a small self-contained test case that reproduces the issue:. https://s3.amazonaws.com/chapmanb/testcases/gatk/gatk4_spark_output.tar.gz. Please let me know if I can provide anything else that would help. Thanks as always for all the improvements and work on GATK.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3725:6,test,testing,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3725,3,['test'],"['test', 'testcases', 'testing']"
Testability,"I was wrong, there is a test for --aggregate because I broke it after I took out the arg. :-D In that case, let's leave the arg and this issue is resolved.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2290#issuecomment-691175730:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2290#issuecomment-691175730,1,['test'],['test']
Testability,I will approve after you take a look at the integration test I linked above.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1062986841:56,test,test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1062986841,1,['test'],['test']
Testability,I will be back after some reading and testing.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5703#issuecomment-470555076:38,test,testing,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5703#issuecomment-470555076,1,['test'],['testing']
Testability,"I will do a big PR with a commit for each of the issues that we found in the plugin, and including tests. Although the plugin interface is going to change in Barclay, I think that before that the PR should setup all the tests for the issues to ensura that the change does not broke anything. Any opinion on this, @cmnbroad, @droazen, @lbergelson?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2377#issuecomment-278248587:99,test,tests,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2377#issuecomment-278248587,2,['test'],['tests']
Testability,"I will send along some notes for the release. By the way, I don't think I've enough permissions to merge the PR or rerun Travis tests....",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519972528:128,test,tests,128,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519972528,1,['test'],['tests']
Testability,I will try to test it next time I have a chance. I don't have the pipeline and data up anymore on Terra. But the default Terra pipeline for Mutect2 FilterAlignmentArtifacts with the default Terra cpu platform should reproduce the issue on GATK 4.1.9.0.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5690#issuecomment-782779694:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5690#issuecomment-782779694,1,['test'],['test']
Testability,"I wondered how much of the time was due to parsing the VCF file. To test this, I used Kryo to serialize the `IntervalsSkipList` to a binary blob, then tried loading the binary blob directly. This reduced the load time from around 6 minutes to 4.7 minutes - so some speed improvement, but not a lot. See https://github.com/broadinstitute/gatk/tree/tw_known_sites_perf_kryo",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5103#issuecomment-412897602:68,test,test,68,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5103#issuecomment-412897602,1,['test'],['test']
Testability,I would also really appreciate it if these log messages contained the locus/position that generated the warning.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5912#issuecomment-708684109:43,log,log,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5912#issuecomment-708684109,1,['log'],['log']
Testability,"I would guess that we actually do get the requested r-backports 1.1.10, but since this is an R package rather than a python package, the python package version check performed by the failing test is not applicable (i.e., you cannot `import r-backports` in python).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6955#issuecomment-726977652:191,test,test,191,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6955#issuecomment-726977652,1,['test'],['test']
Testability,I would like to add that this behaviour also occurs with nested SNVs that are in panel of normals. Based on intersecting MNVs with PoN and quick testing (on 4.1.7.0) it seems that Mutect2 only checks if the first ALT base of an MNV is in normal (whole MNV not emitted) or PoN (MNV emitted by M2 but filtered by FilterMutectCalls). This is not applied for other positions of an MNV.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6476#issuecomment-669899424:145,test,testing,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6476#issuecomment-669899424,1,['test'],['testing']
Testability,"I would like to reiterate that the one code path in ADAM that is. 1. changed between 0.20.0 and 0.23.0 and; 2. that is used in both the GATK BQSR and HC engines. is the two bit file parsing and extraction engine. The main commit that changed in that code path was https://github.com/bigdatagenomics/adam/commit/1eed8e8e464f8f92a6e87afc1d334e751423e810, which reverts cleanly on ADAM trunk. There are also some changes in the `ReferenceRegion` class, they appear to be mostly cosmetic, but this necessitated changing one parameter from `null` to `Strand.INDEPENDENT` in https://github.com/broadinstitute/gatk/commit/8a366c7ba570c61338f7109b86c3284b80d5cf47. The GATK does one lookup into the TwoBitFile (which creates one ReferenceRegion along the way) per read during BQSR and two per assembly region during HC, so this code is inside your inner loop. Again, all it should take to test this hypothesis is:. ```; git clone git@github.com:bigdatagenomics/adam.git; cd adam; git checkout adam-parent-spark2_2.10-0.23.0; git revert 1eed8e8e464f8f92a6e87afc1d334e751423e810; mvn install -DskipTests; ```. You'd then need to build the GATK with the JAR this generates. If this makes the perf regression go away, then we can easily revert this change in ADAM 0.24.0, which will release two weeks from now. Let me know if there's any way I can be of help.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4376#issuecomment-367122365:881,test,test,881,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4376#issuecomment-367122365,1,['test'],['test']
Testability,"I'd also note that in the example command that @tomwhite is running uses just 4GB of memory on the driver while using a broadcast join strategy, which I believe is the default strategy used by BQSR. The [GZIP'ed dbSnp build 138 VCF in the hg18 GATK bundle](ftp://ftp.broadinstitute.org/bundle/hg18/) is ~1.4GB, and the hg18 2bit file is probably going to be ballpark 1GB of data. That's a lot of data to collect onto a driver with just 4GB of memory, so I wouldn't be surprised if the driver is OOMing. @lbergelson you'd mentioned [above](https://github.com/broadinstitute/gatk/issues/4376#issuecomment-364187885) that you haven't seen said performance regression and that it isn't showing up in the regression tests kicked off by CI. Can you confirm what driver memory settings you are using?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4376#issuecomment-367150206:711,test,tests,711,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4376#issuecomment-367150206,1,['test'],['tests']
Testability,"I'd be OK with adding some sort of experimental tag, but I'm not sure where to put it. Does that goes in the docs or somewhere in the code to post a warning to the log? I think the new tests should cover that it's working as intended. There is definitely room for future work (e.g. paying closer attention around the boundaries, the refactoring ideas, etc), but for now the docs should describe the expected behavior well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1847926227:164,log,log,164,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1847926227,2,"['log', 'test']","['log', 'tests']"
Testability,"I'd like to test this out. @tedsharpe could you add your ""contigNameToMoleculeName"" file to the /broad-dsde-methods/sv/reference/GRCh38 bucket, perhaps along with a little README note on how you created it? It'd also be nice if you could update the scripts in scripts/sv in github (I think you'd have to change svDiscover.sh and scanBam.sh) to correctly pass this along.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2527#issuecomment-289044888:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2527#issuecomment-289044888,1,['test'],['test']
Testability,"I'd rather keep the message more generic, and think of the check as simply defining what a valid `CopyRatio` object can be: an interval associated with a finite double value. One might imagine that someone would try to create such an object that does not originate from a BAM (perhaps for test data, or for imputing missing values in pre-existing data, etc.). This check says that they must create it with some finite value. A more appropriate place for the sort of message you suggest is in the relevant denoising method. In the edge case you encountered, you used a BAM that was almost completely uncovered in all bins at the specified resolution, resulting in a sample median of zero. Since one of the steps in standardization is dividing by the sample median, this results in a divide by zero. I've added the corresponding check.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4292#issuecomment-365726746:289,test,test,289,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4292#issuecomment-365726746,2,['test'],['test']
Testability,"I'd rather not change the default HC behavior, but this is pretty exciting because we can lay the argument about porting ReadBackedPhasing to rest. It would be good to do a comparison with RBP -- can you take a look at the RBP integration tests from GATK3 to see if there was a MNP test there?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4650#issuecomment-380816090:239,test,tests,239,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4650#issuecomment-380816090,2,['test'],"['test', 'tests']"
Testability,"I'll add, as a supplement to the above: for the first test case, `samjdk.use_async_io_write_samtools` should be disabled in every GATK/Picard tool in the WDL. The syntax for disabling it in GATK4 with gatk-launch is given above, for Picard and GATK3 it's just -Dsamjdk.use_async_io_write_samtools=false",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317037304:54,test,test,54,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317037304,1,['test'],['test']
Testability,I'll add: I suspect that this could get done pretty quickly/painlessly if @lbergelson (our travis expert) and yourself (who has set up tests like this before many times) got together in a room and hashed it out. Recommend setting up a meeting with @lbergelson at a time that's convenient in the next week or two. I'll post command lines here by early next week.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2298#issuecomment-287478818:135,test,tests,135,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2298#issuecomment-287478818,1,['test'],['tests']
Testability,"I'll check this out. I dont see local test failures, so i'm not sure what 7 you're referring to, but I agree callRegion() is worth checking out. I am initially seeing this causing some other GenotypeGVCFsIntegrationTest test failures, but need to look more closely.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6406#issuecomment-582244533:38,test,test,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6406#issuecomment-582244533,2,['test'],['test']
Testability,I'll kick off a test run on FC soon (the queue is currently a bit backed up)...,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5490#issuecomment-450968381:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5490#issuecomment-450968381,1,['test'],['test']
Testability,I'll merge as soon as tests pass (ETA ~25 minutes).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5594#issuecomment-458698474:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5594#issuecomment-458698474,1,['test'],['tests']
Testability,"I'll take this one, since it's needed for @lbergelson 's current work, and since the HC tests will likely be affected.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2278#issuecomment-288546925:88,test,tests,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2278#issuecomment-288546925,1,['test'],['tests']
Testability,I'll test and let you know asap. Thanks for the hint!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4158#issuecomment-358082004:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4158#issuecomment-358082004,1,['test'],['test']
Testability,I'll test it with this comment,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8299#issuecomment-1528021015:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8299#issuecomment-1528021015,1,['test'],['test']
Testability,"I'll try to explain my understanding of how spanning deletions and the associated attributes are computed in GenomicsDB - you can let me know what part of the logic I should fix. 1. The spanning deletion allele at 20 : 10068160 corresponds to the deletion at 20 : 10068158; 1. The spanning deletion alleles at positions 20 : 10068160-10068175 correspond to the deletion GTATATATATATGTA -> G at 20 : 10068160.; 1. In GenomicsDB:; 1. ALT allele GTATATATATATGTA -> G at 20 : 10068160 is considered a deletion.; 1. GTATATATATATGTA -> * at 20 : 10068160 is NOT considered a deletion. Should it be considered a deletion ALT allele and be part of the min PL computation?; 1. Hence, GTATATATATATGTA -> G is the deletion ALT allele with min PL value. All the AD and PL values in the subsequent positions correspond to this ALT allele. Let me know if I should fix 3.ii",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4963#issuecomment-404310473:159,log,logic,159,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4963#issuecomment-404310473,1,['log'],['logic']
Testability,"I'll try to see if I can create a test to verify index creation. It will probably involve manually integrating an hg38 header with a clone of one of the existing tests, though, since I need something that matches a real recal file.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2821#issuecomment-306814748:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2821#issuecomment-306814748,2,['test'],"['test', 'tests']"
Testability,I'm able to create a dummy test data that reproduces the same error messages.; On it to fix now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4458#issuecomment-368541002:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4458#issuecomment-368541002,1,['test'],['test']
Testability,"I'm almost certain this used to work. ```; ./bin/gatk/gatk-launch FlagStatSpark -I file:///local/dev/akiezun/bin/gatk/src/test/resources/org/broadinstitute/hellbender/tools/valid.bam -- --sparkRunner SPARK --sparkMaster yarn-client; ```. the error is . ```; java.lang.IllegalArgumentException: Wrong FS: file:/local/dev/akiezun/bin/gatk/src/test/resources/org/broadinstitute/hellbender/tools/valid.bam, expected: hdfs://dataflow01.broadinstitute.org:8020; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:654); at org.apache.hadoop.fs.FileSystem.makeQualified(FileSystem.java:474); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:181); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:284); ```. It's fine when running a LOCAL runner, or when the file is on HDFS. . When resolving the ticket, make sure to devise a way (or at least enter a ticket) to prevent this from happening again - ie some way to discover this kind of problem.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1417:122,test,test,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1417,2,['test'],['test']
Testability,"I'm fine with it.; If the skipped tests are the primary irritant let's just delete them. > On Sep 25, 2017, at 8:47 PM, Steve Huang <notifications@github.com> wrote:; > ; > I am OK with removing it, since our pipeline seems to have been stabilized without it for almost 6 months now. What do you think @cwhelan @tedsharpe ?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3612#issuecomment-332170554:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3612#issuecomment-332170554,1,['test'],['tests']
Testability,I'm forcing this to rerun tests so we can merge it.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8050#issuecomment-1364327805:26,test,tests,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8050#issuecomment-1364327805,1,['test'],['tests']
Testability,I'm going to close this until someone sees it again. Test data is gone.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3119#issuecomment-428714850:53,Test,Test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3119#issuecomment-428714850,1,['Test'],['Test']
Testability,I'm going to copy your tests verbatim into this PR. Thanks!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6461#issuecomment-591071355:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6461#issuecomment-591071355,1,['test'],['tests']
Testability,"I'm merging this as is. Once we have some real installable python packages in place, the dummy python package and corresponding test can be reverted, but we need to retain it in the interim or the packaging step would fail.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3964#issuecomment-355132066:128,test,test,128,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3964#issuecomment-355132066,1,['test'],['test']
Testability,"I'm missing the possibility of tuning the logging to produce TRACE level log messages. As it is stands the users only can choose down to DEBUG. . It seems that this is due to the integration of several logging systems from old GATK, htjsdk and picard where DEBUG the lowest common level. . It would be great to have the ability to produce TRACE level log messages allowing the user to have control on whether these are output or not. . In this case DEBUG log messages that are going to be produced in big numbers should be TRACE whereas unfrequent (one very 5 second or more) would stay as DEBUG.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6378:42,log,logging,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6378,5,['log'],"['log', 'logging']"
Testability,"I'm new at this, so I may be missing something, but it looks to me like there is an issue with the conversion code in GenomicsConverter.makeSAMRecord() in com.google.cloud.genomics.gatk.common. I've been working on this bam file issue, correcting errors in the files used for tests. Many of the errors involve reads with FLAGs that indicate that they are in pairs, but the mate is not extant in the file, causing the error. A way to fix this without deleting the offending reads is to set the FLAG to zero and also modify the RNEXT, PNEXT, and TLEN fields, if necessary, so that the read becomes single (provided that the values of all of these fields are not important for the tests). However, when I do this, I find that tests that write and then read bam files fail, because when the just-written file is read back, SAM validation complains that the mate unmapped FLAG is set for an unpaired read. It turns out that the copy of the file written by the test substitutes the value '8' for '0' as the FLAG for the modified reads. The relevant code in GenomicsConvertermakeSamRecord() (line 170) is:. flags += ((read.getNextMatePosition() == null || read.getNextMatePosition.getPosition() == null)) ? 8 : 0;. The effect of this line is that all reads which have null mate positions, even those which the FLAG specifies as unpaired, get the mate unmapped FLAG set, causing the validation errors that i'm seeing. The reason the tests have not failed before is apparently that the existing test files do not contain any reads with FLAGs that specify them as unpaired. A simple fix for this would be to convert the line above to:. flags += ( paired && (read.getNextMatePosition() == null || read.getNextMatePosition.getPosition() == null)) ? 8 : 0;. The redundant parens in the original code suggest that something like this may have been intended,but the google genomics documentation at http://google-genomics.readthedocs.org/en/latest/migrating_tips.html gives the following pseudocode:. flags += read.n",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/569#issuecomment-114101033:276,test,tests,276,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/569#issuecomment-114101033,4,['test'],"['test', 'tests']"
Testability,"I'm not completely opposed to that way of dealing with this, but I'm not yet convinced either. . I'm not sure I see how having an extra argument is somehow shorter than having one special value that is included in the description of the original argument. As in:. --trimWhatever | -trimWvr -- bla bla bla; default w; min x max y; to disable trimming, use z. . As for the documentation auto-generator showing the two args together, that is dependent on setting up the arguments so that the code specifies they are related, and adding some logic to the auto-generation to pull related arguments together. (As a contributing developer to a documentation auto-generator --the GATKDocs-- I can tell you that is not necessarily trivial and adds even more moving parts.) This also generates additional complexity for third-party developers of wrappers (such as Galaxy). Finally, it can be a source of confusion for users who are trying to look up an argument called ""-dont-Trim-whatever"" since presumably it's only going to be listed under T (-Trim-whatever) and not under D in the alphabetical list. Or should it be listed twice? . A reference manual can be very ""nice"" and helpful, and it must be organized in the most intuitive way possible, especially since there is no way we can provide examples that cover every single use case under the sun (trust me, there's not).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/143#issuecomment-71122930:538,log,logic,538,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/143#issuecomment-71122930,1,['log'],['logic']
Testability,"I'm not sure about avx and tensorflow. @cmnbroad Do you know the state of that? . I think we'd be open to accepting PR's that would help run on other architectures, but we don't have the resources to implement (or to test) support ourselves.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6118#issuecomment-524962561:217,test,test,217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6118#issuecomment-524962561,1,['test'],['test']
Testability,"I'm not sure how you're getting. `Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.pairhmm.VectorPairHMMUnitTest > testLikelihoodsFromHaplotypesForAvailableImplementations SKIPPED`. from master---I thought I changed the SkipException to a warning in #5026? I could be missing something, though. See https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607332088 and https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607561772 for more details, if you haven't already.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6649#issuecomment-640890920:56,test,test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6649#issuecomment-640890920,2,['test'],"['test', 'testLikelihoodsFromHaplotypesForAvailableImplementations']"
Testability,"I'm not sure if there is another way to see the reports on travis without going through the PR link. Looks like tests are passing now, though. There is quite a bot of code here - I'll start going through it in the next day or so and see where we stand. Also, thx for reducing those files down...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-432388063:112,test,tests,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-432388063,1,['test'],['tests']
Testability,"I'm not sure this is the right place, but I saw that gencode V34 was tested on hg19, I have downloaded the funcotator datasource files V1.7 but it raised an error for gencode, I made a topic of it on the GATK forum, but it might be relevant for you to look at. ; I use Funcotator V4.1.7; https://gatk.broadinstitute.org/hc/en-us/community/posts/360072132411-Funcotator-datasources-v1-7-gencode-raise-error. Further I think Cosmic.db is not working correctly, I don't see any cosmic fields in my vcf output, while I know some of the mutations are in the Cosmic db and also in the Cosmic.db file provided.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6660#issuecomment-673295906:69,test,tested,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6660#issuecomment-673295906,1,['test'],['tested']
Testability,"I'm only in an introductory Java class, geared towards Android app development. So I cannot comment on the code. What I have done is take the branch and test it against the data that I have and I can say the counts now match up to the lower expected value. Furthermore, the four questionable sites are now absent. Before:; ![screenshot 2018-03-08 11 05 38](https://user-images.githubusercontent.com/11543866/37161473-c63273c6-22c0-11e8-9ac6-aeb817fa1a35.png). With changes:; ![screenshot 2018-03-08 11 06 06](https://user-images.githubusercontent.com/11543866/37161478-ca9842f6-22c0-11e8-84d5-6fbebcac1b4c.png). Let me know if and how I can help with your efforts in creating a test if you decide to test for such a scenario.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4510#issuecomment-371535111:153,test,test,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4510#issuecomment-371535111,3,['test'],['test']
Testability,"I'm opposed to including 2 entire references since it will raise our git lfs files to somewhere around 5gb. This is a significant drag on downloading / building / testing gatk and should be avoided if possible. I understand that I may be overruled here, but keeping the test files to a reasonable size was and should remain an important goal of gatk4. . It looks like there may be some options to slim down the existing test files that we should take advantage of if possible. There are a number of large vcfs and fasta files which are NOT currently compressed in our large files. We should compress them.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-423617603:163,test,testing,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-423617603,3,['test'],"['test', 'testing']"
Testability,I'm running in intermittent issues when running HaplotypeCallerSpark with GATK 4.0.3.0 and was hoping to generate ideas to debug further. The underlying error is an index error when calculating likelihoods:; ```; java.lang.ArrayIndexOutOfBoundsException: 4; 	at org.broadinstitute.hellbender.tools.walkers.genotyper.GenotypeLikelihoodCalculators.calculateGenotypeCountUsingTables(GenotypeLikelihoodCalculators.java:388); ```; I've been unable to generate a reproducible test case. Re-running on the same machine (Amazon m4.4xlarge instances with 16 cores and 64Gb of memory) works. I've seen the error on two different datasets but it happens infrequently as I've also run hundreds using the same setup without any exceptions. The only other thing I spot when looking through the traceback is block issues about the RDDs but I'm not sure if these are a symptom of the failure or a cause:; ```; 18/04/15 03:55:19 WARN BlockManager: Putting block rdd_18_12 failed due to an exception; 18/04/15 03:55:19 WARN BlockManager: Block rdd_18_12 could not be removed as it was not found on disk or in memory; ```; Here's the full traceback of the failure:; ```; [2018-04-15T03:55Z] ip-10-0-0-57: 18/04/15 03:55:19 WARN BlockManager: Putting block rdd_18_12 failed due to an exception; [2018-04-15T03:55Z] ip-10-0-0-57: 18/04/15 03:55:19 WARN BlockManager: Block rdd_18_12 could not be removed as it was not found on disk or in memory; [2018-04-15T03:55Z] ip-10-0-0-57: 18/04/15 03:55:19 ERROR Executor: Exception in task 12.0 in stage 7.0 (TID 828); [2018-04-15T03:55Z] ip-10-0-0-57: java.lang.ArrayIndexOutOfBoundsException: 4; [2018-04-15T03:55Z] ip-10-0-0-57: 	at org.broadinstitute.hellbender.tools.walkers.genotyper.GenotypeLikelihoodCalculators.calculateGenotypeCountUsingTables(GenotypeLikelihoodCalculators.java:388); [2018-04-15T03:55Z] ip-10-0-0-57: 	at org.broadinstitute.hellbender.tools.walkers.genotyper.GenotypeLikelihoodCalculators.getInstance(GenotypeLikelihoodCalculators.java:263); [2018-04-1,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4661:470,test,test,470,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4661,1,['test'],['test']
Testability,"I'm running into an issue with the latest MuTect2 (also it also goes back as far as beta4, I haven't tested prior to that), where triploid calls get produced. Here's an example output where the normal is diploid `0/0` and the tumor is triploid `0/1/2`:; ```; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT control_downsample tumor_downsample; 1 725556 . A G,AGAATAGAATGGAATAGAAAGGAATG . . DP=460;ECNT=3;NLOD=54.98,46.06;N_ART_LOD=2.72,8.00;POP_AF=1.000e-03,1.000e-03;P_GERMLINE=-5.185e+01,-4.276e+01;TLOD=6.33,19.76 GT:AD:AF:F1R2:F2R1:MBQ:MFRL:MMQ:MPOS:SA_MAP_AF:SA_POST_PROB 0/0:205,6,4:0.020,0.044:101,4,0:104,2,4:34,0:415,467,130:40,25:4,0 0/1/2:209,9,8:0.035,0.047:108,7,4:101,2,4:34,0:404,485,137:28,42:2,0:0.030,0.030,0.035:3.983e-03,5.306e-03,0.991; ```; This happens both if I explictly specify `--ploidy 2` or leave it at the default. Here is a reproducible test case:. wget https://s3.amazonaws.com/chapmanb/testcases/gatk4_mutect2_triploid.tar.gz. You can unpack, edit `REF` in `run_mutect2.sh` to point at a GRCh37 reference, and run to demonstrate the issue. This happens pretty regularly in the outputs, although it is very sensitive to the size of the reference regions. If you decrease the end point in `regions.bed` you'll get diploid calls again. Thanks for the help and please let me know if I can provide any other information.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3564:101,test,tested,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3564,3,['test'],"['test', 'testcases', 'tested']"
Testability,"I'm seeing this type of problem with GATK 4.1.2 for a massive WGS sample (> 2 Billion reads); Note that although the error log below says exome, this is a genome sample. I tried raising the ulimit to the same number this other user tried, but I still can get through BaseRecalibratorSpark. I've been trying for awhile to push this data through MarkDuplicatesSpark and finally gave up and switched back to the Picard MarkDuplicates. But even though I got through Picard MarkDuplicates I'm having problems with BaseRecalibratorSpark. I'm running in local mode with 250gb of memory and 128 cores available. . Is there something else for Spark that I can modify to prevent so many tasks getting created in stage 0.0? I'm running on a shared computing system, so it's quite possible that I can't change the ulimit number of open files. I am able to set ulimit -s unlimited, but I might not be able to set ulimit -n beyond a particular threshold on this system. I'll continue to explore the ulimit setting but I'd like to know if there's something else I could try instead. The relevant portion of the error logs are below... 20/01/05 17:43:23 INFO TaskSetManager: Starting task 4991.0 in stage 0.0 (TID 49; 91, localhost, executor driver, partition 4991, PROCESS_LOCAL, 4959 bytes); 20/01/05 17:43:23 INFO Executor: Running task 4991.0 in stage 0.0 (TID 4991); 20/01/05 17:43:23 INFO TaskSetManager: Finished task 4843.0 in stage 0.0 (TID 48; 43) in 74817 ms on localhost (executor driver) (4864/5114); 20/01/05 17:43:23 ERROR Executor: Exception in task 4876.0 in stage 0.0 (TID 487; 6); org.broadinstitute.hellbender.exceptions.UserException$NoSuitableCodecs: Cannot ; read file:///scratch/tmp/spark-ecd63991-68be-4879-b481-68e6789a2004/userFiles-b7; 2d4821-5e36-4d36-aa79-aa6263768669/dbsnp_138.hg19.vcf because no suitable codecs; found; at org.broadinstitute.hellbender.engine.FeatureManager.getCodecForFile(F; eatureManager.java:468); at org.broadinstitute.hellbender.engine.FeatureDataSource.getCode",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5316#issuecomment-570992855:123,log,log,123,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5316#issuecomment-570992855,1,['log'],['log']
Testability,I'm sick of scrolling to the bottom to find the test report uri.; This saves the pain of having to scroll all the way down.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3892:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3892,1,['test'],['test']
Testability,"I'm somewhat at a loss here. I make a clean enlistment (on the theory maybe something about roundtripping the VCFs to/from github matters), remade the indexes, and same problem. . Next, I copied the VCFs to a linux machine, ran GATK4 IndexFeatureFile there, copied the indexes back to my windows laptop and checked in. Same travis errors. . Interestingly, this might only be a problem for VCFs I added to the main source tree, not gitlfs. For example, VariantEvalIntegrationTest.testFunctionClassWithSnpeff isnt erroring (i dont believe), and its VCF file lives in gitlfs, not the main repo. I do not know why this would matter.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431470219:479,test,testFunctionClassWithSnpeff,479,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431470219,1,['test'],['testFunctionClassWithSnpeff']
Testability,"I'm sorry, I don't know another tool that does the same thing. If you could provide some samples that cause the problem that would actually be really helpful. It *should* be a simple fix so I could try to get a path out soon, but it's always faster with a test case.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8427#issuecomment-1646250031:256,test,test,256,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8427#issuecomment-1646250031,2,['test'],['test']
Testability,"I'm stepping into the 7 remaining test failures in the debugger, and I think they may just be fixed by overwriting the actual output of `GenotypeGVCFsIntegrationTest.testEntireVariant` onto the expected output for all the forced output test cases. However, this exercise has revealed some other changes:. `GenotypeGVCFsEngine.callRegion` contains the line `final VariantContext mergedVC = merger.merge(variantsToProcess, loc, ref.getBase(), !outputNonVariants, false)`. Since we want to remove the non-ref allele regardless, we should replace `!outputNonVariants` with `true`. It is important to do this here, because only then does `regenotypeVC` correctly restrict the `AD` to the emitted alleles. Also, doing this strips the variant QUAL from the output if it's monomorphic, which is desired (the `RGQ` field is in the output, so there remains a sense of the quality of the call). Once you do that, could you check whether `removeNonRefAndUnusedAltAlleles` is still necessary? In the integration tests, at least, I didn't see any alt alleles output except those called in a genotype.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6406#issuecomment-582242487:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6406#issuecomment-582242487,4,['test'],"['test', 'testEntireVariant', 'tests']"
Testability,"I'm surprised none of the variant calling integration tests change. @cmnbroad Would you expect this to change the behavior in any common use cases or is this more of a safety check?. It's admittedly also possible that the MT calling in the Mutect2 integration test does change slightly, but that's a very lenient concordance check.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5594#issuecomment-456900212:54,test,tests,54,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5594#issuecomment-456900212,2,['test'],"['test', 'tests']"
Testability,I'm testing it tonight.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2618#issuecomment-296834831:4,test,testing,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2618#issuecomment-296834831,1,['test'],['testing']
Testability,"I'm trying this, but it breaks the test, because the test relies on being; able to set a not-actually-buffering wrapper. As a compromise I'd adding; both methods, so the convenience method is available but the tests can also; do their thing. On Tue, Jan 24, 2017 at 8:48 AM, droazen <notifications@github.com> wrote:. > *@droazen* commented on this pull request.; > ------------------------------; >; > In src/main/java/org/broadinstitute/hellbender/engine/GATKTool.java; > <https://github.com/broadinstitute/gatk/pull/2331>:; >; > > @@ -137,6 +157,16 @@ void initializeReference() {; > */; > void initializeReads() {; > if (! readArguments.getReadFiles().isEmpty()) {; > + // Prefetcher is useful for cloud files because of the latencies involved.; > + Function<SeekableByteChannel, SeekableByteChannel> wrapper = Function.identity();; > + Function<SeekableByteChannel, SeekableByteChannel> indexWrapper = Function.identity();; > +; > + if (cloudPrefetchBuffer > 0) {; > + wrapper = is -> GATKTool.addPrefetcher(cloudPrefetchBuffer, is);; > + }; > + if (cloudIndexPrefetchBuffer > 0) {; > + indexWrapper = is -> GATKTool.addPrefetcher(cloudIndexPrefetchBuffer, is);; > + }; >; > Yes, please move it all down into ReadsDataSource, and have the; > ReadsDataSource constructors take the buffer sizes as ints. There are; > clients in gatk-protected that use ReadsDataSource directly and would; > benefit, and in general we want to encapsulate these sort of low-level; > details in the data source classes as much as possible, and not bleed into; > the tool hierarchy.; >; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/2331>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AJ-XRcG2t6_144OndJhGaT5zdw9TSWRIks5rVit7gaJpZM4LdCht>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2331#issuecomment-274949252:35,test,test,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2331#issuecomment-274949252,3,['test'],"['test', 'tests']"
Testability,"I'm using GATK4 as a framework to implement my own tools, and it will be nice to have a way of perform integration tests using `IntegrationTestSpec`. Nevertheless, it requires the extension of the `CommandLineProgramTest` to run the command, and thus it is extending `BaseTest`. The issues that this infrastructure generates when trying to use this test classes are the following:; - `BaseTest` loading of `GenomeLocParser` is annotated with `@BeforeClass`, which throws an error because the reference genome (hg19MiniReference) is not present in the repository.; - `CommandLineProgramTest` is using `org.broadinstitute.hellbender.Main` for running the commands, but for custom tools the instanceMain with a different list of packages. Although this could be solved by extending the class by another abstract class. I propose (and I can implemented if you agree) the following:; - `CommandLineProgramTest` not implementing `BaseTest`.; - `CommandLineProgramTest` as a real abstract class without implementations of `getTestDataDir()` or `runCommandLine()`; - Abstract `GATKCommandLineProgramTest` extending both `CommandLineProgramTest` and `BaseTest`, sited in `org.broadinstitute.hellbender.utils.test` and used in all integrations tests in this repository and the protected repository.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2033:115,test,tests,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2033,4,['test'],"['test', 'tests']"
Testability,"I'm using HaplotypeCaller (`gatk-package-4.beta.5`) to analyse the control medulloblastoma sample from the ICGC benchmark https://www.nature.com/articles/ncomms10001. Reads are aligned to `GRCh37` (from the Broad bundle, without decoy sequences) using `bwa mem`. Analysis is performed within the [bcbio-nextgen](https://github.com/chapmanb/bcbio-nextgen), which splits input into chunks by chromosome for parallelisation. For some reason, the chunk corresponding to the chromosome `GL000216.1` makes HaplotypeCaller crash with the error `IllegalArgumentException: contig must be non-null and not equal to *, and start must be >= 1`. I isolated the `gatk-launch` command, and narrowed down the reproducible example to these 2 reads:; ```; H239:179:C1K3VACXX:8:2116:11771:72429 161 GL000216.1 19 23 70S31M 4 49141708 0 ATTCCCTTACATTCGGATTGATACTATTAAAATCACTTACTCTTCCTTACATTCCATTCCATCCGGGCTGTTCCATTTCATTCTATTACACTCCACTCAAT ?1:=D>?B?CC:?A,<C;:AEGC<+AC+++2+:3*1:*11999*:099?<?0?99BBG*9?D*?##################################### NM:i:2 MD:Z:25T2C2 AS:i:25 XS:i:20 RG:Z:MB_normal_50x MQ:i:0 ms:i:1911 mc:i:49141802 MC:Z:11S30M5D60M; HWI-7001436:66:C3FYFACXX:5:1216:4411:82080 65 GL000216.1 27 57 101M 9 72653232 0 CATTCTATTACACTCCATTCCATTTCTATCCATTCCATTCCATTCTATTCCATTCCACTTGGGTCGATTCAATTCCATTCCATTCTATCCCTTCCATTCCA CCCFFFFFHHHHHJJJJJIJJJJJJIJJJJHIJJJJJJJJJJJJJJJJJJJJJJJJJIJIJIJGGIJIJJJJJJJJJJJJJJJJJJGJHHHHHHFFFFFFD NM:i:7 MD:Z:24C2T14A16C1T21C4T12 AS:i:66 XS:i:36 RG:Z:MB_normal_50x MQ:i:0 ms:i:3858 mc:i:72653218 MC:Z:14S45M1D33M9; ```; And one nucleotide target region:; ```; GL000216.1 87 88; ```. These BAM and BED files are attached here: [GL000216.1_87_gatk_debug.zip](https://github.com/broadinstitute/gatk/files/1477532/GL000216.1_87_gatk_debug.zip). Running command below:; ```; gatk-launch HaplotypeCaller \; -R /data/projects/punim0010/local/share/bcbio/genomes/Hsapiens/GRCh37/seq/GRCh37.fa \ ; -I GL000216.1_start_49__read_84_88.bam \; -L GL000216.1_87-88.bed \; --output out.vcf.gz; ```. Gives",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3845:112,benchmark,benchmark,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3845,1,['benchmark'],['benchmark']
Testability,"I'm using the `ReadLikelihoods` in a test and I'm setting the likelihoods to negative values. Nevertheless, when I'm trying to get the best alleles for each read using the `bestAlleles()` method, it turns out to return the allele where I haven't set any likelihood (by default, 0). I think that the bug is in the private method [`searchBestAllele`](https://github.com/broadinstitute/gatk/blob/master/src/main/java/org/broadinstitute/hellbender/utils/genotyper/ReadLikelihoods.java#L438), were if the candidate likelihood is __bigger than__ the best likelihood, the best allele is updated. I apologize in advance if this is not a bug, but I would like to know if I should use negative likelihoods as in the removed `PerReadAlleleLikelihoodMap`, or positive ones, as suggest the current implementation for getting the best alleles. Thank you in advance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2311:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2311,1,['test'],['test']
Testability,I'm using:. ```; gatk-launch CreatePanelOfNormals \; -I combinedcoverage_C.tsv \; -O ponC.pon \; ```; With or without `--disableSpark`. The stdout logging is super verbose when using Spark. Changing with `--verbosity` does not allow for a summary level stdout that I can get with `--disableSpark`. . @samuelklee notes that many of the Spark tools are very verbose. Is there a reason why we need the Spark mode to be so verbose @droazen @lbergelson?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3231:147,log,logging,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3231,1,['log'],['logging']
Testability,"I'm wondering if you have a recommended way of detecting misencoded base quality reads. If I run FixMisencodedBaseQualityReads, I do get a USER ERROR message that I could possibly detect by checking the logs, but I would rather use another tool to check for the error in a script, or store an emitted value from the tool to check for the error. As far as I can tell, I don't see such a tool or value. I have tried the following in a bash commandline interface:; ```; acesnik@DESKTOP$ var=$(gatk FixMisencodedBaseQualityReads -I input.bam -O output.bam); acesnik@DESKTOP$ echo $var # this echos nothing, indicating there's no emitted value; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4242:203,log,logs,203,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4242,1,['log'],['logs']
Testability,"I've actually been lobbying to get rid of IntegrationTestSpec completely. Although it probably once added value, it has some [problems](https://github.com/broadinstitute/gatk/issues/1562) that limit its usefulness, and the remaining functionality (like expected exception checking) is available directly in the test framework. We have quite a few tests that don't use it at all, and it would be nice to only support one style, so I'd be inclined to discourage rather than encourage it, and focus on resolving the BaseTest issues.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-243120257:311,test,test,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-243120257,2,['test'],"['test', 'tests']"
Testability,"I've added a bunch of additional unit tests for the `StandardCallerArgumentCollection`, and beefed up the `HaplotypeCaller` integration tests as well (we now check for concordance against the GATK3 contamination-corrected calls, in addition to just asserting that the calls in GATK4 improve with contamination correction on).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4455#issuecomment-369983458:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4455#issuecomment-369983458,3,"['assert', 'test']","['asserting', 'tests']"
Testability,"I've added a few commits that clean up some of the code inherited from VQSR regarding the use of labeled resources when using allele-specific annotations. This should be ready for review and/or experimentation with importing into the WARP repo, @meganshand. There are a few unrelated failing tests, which I think others are seeing in their branches as well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8074#issuecomment-1323953256:292,test,tests,292,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8074#issuecomment-1323953256,1,['test'],['tests']
Testability,"I've added a new end-to-end test for SelectVariants that writes to GCS. Sadly, the IntegrationTestSpec class uses Files throughout, so it wasn't possible to do this simply without first completely refactoring IntegrationTestSpec (which should probably be its own pull request). . Doing this refactoring would have the advantage that changing existing end-to-end tests from local to GCS would be trivial. For now instead I went with an ad-hoc approach. It works, and the test passes.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-455686612:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-455686612,6,['test'],"['test', 'tests']"
Testability,"I've added a test to write via NIO, but instead of writing to an actual bucket I'm using the jimfs in-memory filesystem NIO provider. This still checks that the VCF code can use NIO paths, but it runs a lot faster.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-443382334:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-443382334,1,['test'],['test']
Testability,I've added an `IntervalArgumentsCollection` which includes all of the interval related arguments. ; It and `SpecialArguments` implement a new marker interface `ArgumentCollectionDefinition`. . ReadWalker has been modified to respect intervals.; Tests for this are in CountReadsTest . This should close #98,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/164:245,Test,Tests,245,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/164,1,['Test'],['Tests']
Testability,I've added some doc and tests for what we can test in ReadSource. ; @droazen Please review,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/480:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/480,2,['test'],"['test', 'tests']"
Testability,"I've added some non-trivial (code-wise, logical wise very simple) code to single out slow assemblies more obviously. That is, generating another txt file collecting the runtime for those slow ones.; Example here ; /user/shuang/experiments/NA12878_PCR-_30X; /user/shuang/experiments/NA12878_PCR-_30X/assembly_betterLogging_longOnes",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1997#issuecomment-245295941:40,log,logical,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1997#issuecomment-245295941,1,['log'],['logical']
Testability,"I've added the CRAM tests. Remain to add an integration test that writes to GCS. @cmnbroad can you explain what you mean by ""Also note that you won't be able to use iterator comparison when comparing an Iterator with Iterator."" ?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332368738:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332368738,2,['test'],"['test', 'tests']"
Testability,"I've added the additional test you requested, and confirmed that it passes. The `SkipExceptions` are there to skip JBWA tests on platforms for which we don't have a build of the library -- I've extracted a `skipJBWATestOnUnsupportedPlatforms()` method to make this clearer.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1847#issuecomment-220757508:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1847#issuecomment-220757508,2,['test'],"['test', 'tests']"
Testability,"I've addressed @davidadamsphd's feedback. The tests were passing on Friday, but now the build is failing due to https://github.com/broadinstitute/gatk/pull/1185, so that should be merged before this one.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1174#issuecomment-158912039:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1174#issuecomment-158912039,1,['test'],['tests']
Testability,I've addressed all the feedback and all tests are passing so I'm going to squash and merge this now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3452#issuecomment-325607019:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3452#issuecomment-325607019,2,['test'],['tests']
Testability,"I've asked and they seeming do have success with other files. As for Java, we use OpenJDK downloaded from https://jdk.java.net/; ```; openjdk version ""17.0.2"" 2022-01-18; OpenJDK Runtime Environment (build 17.0.2+8-86); OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing); ```. Because it's a shared cluster, we aren't able to run Docker directly. But I attempted converting it in to a Singularity container and it didn't crash in the same way, but the job did end up failing. Logs are as follows -. For the ""bare metal"" known-crashing conditions (AMD-based machine), the final lines of the output are:; ```; 22:47:45.999 INFO ProgressMeter - Scaffold_1:21181812 551.0 125350 227.5; 22:47:56.192 INFO ProgressMeter - Scaffold_1:21203869 551.1 125450 227.6; 22:48:06.937 INFO ProgressMeter - Scaffold_1:21251889 551.3 125650 227.9; 22:48:18.177 INFO ProgressMeter - Scaffold_1:21271601 551.5 125750 228.0; 22:48:29.896 INFO ProgressMeter - Scaffold_1:21281660 551.7 125810 228.0; 22:48:40.223 INFO ProgressMeter - Scaffold_1:21284898 551.9 125830 228.0; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f889b5be310, pid=1422929, tid=1422930; #; # JRE version: OpenJDK Runtime Environment (17.0.2+8) (build 17.0.2+8-86); # Java VM: OpenJDK 64-Bit Server VM (17.0.2+8-86, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0xcf310] __memset_avx2_unaligned_erms+0x60; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to /bigdata/operations/ejaco020/gatk/core.1422929); #; # An error report file with more information is saved as:; # /bigdata/operations/ejaco020/gatk/hs_err_pid1422929.log; #; # If you would like to submit a bug report, please visit:; # https://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8988#issuecomment-2386154680:491,Log,Logs,491,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8988#issuecomment-2386154680,1,['Log'],['Logs']
Testability,"I've attached the java error log from one of the ImportGvcfs shards as well as the top level stdout and stderr logs for the slurm job that was running the workflow. The JRE error is a SIGBUS (!) which seems to be occurring at the point where the C++ native code is trying to hand off execution to the JRE; it gets into uncompiled Java code, switches to the Java interpreter, and throws a ClassNotFound exception. ; [ImportGvcfsError.tar.gz](https://github.com/broadinstitute/gatk/files/9902359/ImportGvcfsError.tar.gz)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8076#issuecomment-1297238255:29,log,log,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8076#issuecomment-1297238255,2,['log'],"['log', 'logs']"
Testability,I've been taking a look this morning but am so far unable to reproduce the problem. I tried adding lines to the integration test file to mimic having a SNP at the last base of a spanning deletion as in the bug report:. ```; 20 10001300 . GGG G . . .; 20 10001302 . G C . . .; ```. But I'm not hitting this error. . @gmagoon any chance you could provide any more information that would help us reproduce this? The exact command line you're using might help. Do you still get the error if you run with an alleles file consisting _only_ of one of the pairs of given allele lines listed above?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5336#issuecomment-431865967:124,test,test,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5336#issuecomment-431865967,1,['test'],['test']
Testability,I've created (and tested) a fix in jsr203-hadoop: https://github.com/damiencarol/jsr203-hadoop/pull/32,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3468#issuecomment-324932250:18,test,tested,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3468#issuecomment-324932250,1,['test'],['tested']
Testability,"I've created a branch for testing here: https://github.com/broadinstitute/gatk/tree/tw_spark2. Note that we can't upgrade until the CDH cluster is upgraded to Spark 2. Also, ADAM format support is disabled until ADAM works with Spark 2 (slated for ADAM 0.20.0: https://github.com/bigdatagenomics/adam/issues/1021)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2073#issuecomment-241432101:26,test,testing,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2073#issuecomment-241432101,1,['test'],['testing']
Testability,"I've created a regression test corpus for Funcotator that exercises all of the variant classifications that it can produce, but to do so I pulled from data sets that I had already been annotating. As such, it spans more than the chromosomes that are checked in as references for Funcotator tests already. These are also `HG19` (really, B37) variants, because Oncotator can't do `HG38` and I needed ground truth. So I need the B37 reference to go in so that these regression tests can be run. It will also preemptively solve the issue of needing to add unit tests for variants outside of the ""supported testing regions"" in Funcotator (where ""supported testing regions"" are loci supported by references in the tests) . This would be for when we find a problem variant in user data and need to add a new unit test. Anecdotally, I have found cases like this in some of the germline data that I've been running. On the plus side, adding in a complete HG19 reference will allow me to delete the references checked in for my unit tests. It won't be much saved space, but it will be some (~120Mb).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-423636264:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-423636264,9,['test'],"['test', 'testing', 'tests']"
Testability,"I've extracted this change to ReferenceConfidenceModel from the now-closed PR; https://github.com/broadinstitute/gatk-protected/pull/1022, since it causes tests; to fail spectacularly (including concordance tests against GATK3), so that we can; unblock the badly-needed merge of https://github.com/broadinstitute/gatk-protected/pull/1027. Let's review and test this change in isolation to be sure we understand it fully; before accepting it into master.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2807:155,test,tests,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2807,3,['test'],"['test', 'tests']"
Testability,"I've gone in and worked directly on the branches in #4025, #4068 and #4019, in the doc portions of the code. These are undergoing Travis testing and one of these is awaiting additional (dev) review.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-355890542:137,test,testing,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-355890542,1,['test'],['testing']
Testability,"I've had ConcurrentModificationExceptions several times when mocked ReferenceMultiSource objects are both mocked and broadcast ([for example](https://travis-ci.org/broadinstitute/gatk/jobs/275982454)). Mocks appear to be mutated, even when the mocked object is immutable, so serialization can fail. This replaces the mock object with a faked one.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3586:61,mock,mocked,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3586,5,"['Mock', 'mock']","['Mocks', 'mock', 'mocked']"
Testability,"I've had several Travis test failures (on my picard removal branch) that appear to be failures during kryo serialization of a mocked ReferenceMultiSource object (based on the failing class name, (org.broadinstitute.hellbender.engine.datasources.ReferenceMultiSource$$EnhancerByMockitoWithCGLIB$$b0dc631f, which looks like the CGLIB names mentioned [here](https://github.com/mockito/mockito/issues/319)). We're on an ancient version of mockito anyway, and newer versions no longer use cglib, so it seemed like a good time to upgrade. To do so I also had to replace usage of the method getArgumentAt, which has been [deprecated](https://github.com/mockito/mockito/pull/373) in favor of getArgument.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3581:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3581,7,"['mock', 'test']","['mocked', 'mockito', 'test']"
Testability,"I've had to temporarily disable `testBlockGather()` to get tests to pass here -- the test passes locally, but appears to run out of memory on travis (gets killed with signal 9). Will open a ticket for this.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3139#issuecomment-312503544:33,test,testBlockGather,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3139#issuecomment-312503544,3,['test'],"['test', 'testBlockGather', 'tests']"
Testability,"I've implemented the Gaussian-kernel binary-segmentation algorithm from this paper: https://hal.inria.fr/hal-01413230/document This method uses a low-rank approximation to the kernel to obtain an approximate segmentation in linear complexity in time and space. In practice, performance is actually quite impressive!. The implementation is relatively straightforward, clocking in at ~100 lines of python. Time complexity is O(log(maximum number of segments) * number of data points) and space complexity is O(number of data points * dimension of the kernel approximation), which makes use for WGS feasible. Segmentation of 10^6 simulated points with 100 segments takes about a minute and tends to recover segments accurately. Compare this with CBS, where segmentation of a WGS sample with ~700k points takes ~10 minutes---and note that these ~700k points are split up amongst ~20 chromosomes to start!. There are a small number of parameters that can affect the segmentation, but we can probably find good defaults in practice. What's also nice is that this method can find changepoints in moments of the distribution other than the mean, which means that it can straightforwardly be used for alternate-allele fraction segmentation. For example, all segments were recovered in the following simulated multimodal data, even though all of the segments have zero mean:. ![baf](https://user-images.githubusercontent.com/11076296/29100464-ad687946-7c79-11e7-99e4-962ab93709b4.png). Replacing the SNP segmentation in ACNV (which performs expensive maximum-likelihood estimation of the allele-fraction model) with this method would give a significant speedup there. Joint segmentation is straightforward and is simply given by addition of the kernels. However, complete data is still required. Given such a fast heuristic, I'm more amenable to augmenting this method with additional heuristics to clean up or improve the segmentation if necessary. We can also use it to initialize our more sophisticated HMM m",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2858#issuecomment-321121666:425,log,log,425,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2858#issuecomment-321121666,2,['log'],['log']
Testability,"I've incorporated your feedback to #5601 @ldgauthier and the commit is undergoing tests. Please feel free to merge the PR if you accept the changes and have no further comments. . As for [Article#11074](https://software.broadinstitute.org/gatk/documentation/article?id=11074), given we have addressed the original issues (e.g. Latex), I am going to consider the additional recommendations as something for the not-so-near future. Would that be okay with you @ldgauthier?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5409#issuecomment-458728389:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5409#issuecomment-458728389,2,['test'],['tests']
Testability,"I've made some improvements to this PR, including:; - Made it easier to use the `joinOverlapping` method by making the function you supply only have to worry about one interval (shard) at a time. This simplifies the callers code, so PileupSpark (for example) is now shorter.; - Added some documentation. I've also used the same technique to improve `AddContextDataToReadSpark` so that references are filled in on a per shard basis, rather than per read. In tests on a 6.6GB file I managed to get BaseRecalibratorSpark's runtime down from 10.61 minutes to 3.73 minutes, which is over 60% faster.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2190#issuecomment-250750843:457,test,tests,457,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2190#issuecomment-250750843,2,['test'],['tests']
Testability,"I've merged https://github.com/broadinstitute/gatk/pull/2610, so after addressing comments and doing the squash described above, you should rebase onto the latest gatk master and see if tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-295939052:186,test,tests,186,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-295939052,1,['test'],['tests']
Testability,"I've now fixed this PR to build on Java 8 as usual. For Java 11 testing, I've suppressed the warnings for using the com.sun.javadoc classes (they are still available in Java 11, it's just that they are deprecated - or actually marked for removal). Ready for review.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-530296978:64,test,testing,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-530296978,1,['test'],['testing']
Testability,"I've opened https://github.com/broadinstitute/gatk/pull/5197 with the last few comments addressed. We'll see if the travis cloud tests pass (since they were never actually run on this PR), and if they do pass we can merge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5017#issuecomment-422559926:129,test,tests,129,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5017#issuecomment-422559926,1,['test'],['tests']
Testability,I've pushed up an initial patch to this branch to fix the issues I found. I'll push up tests later tonight after I grab some dinner :),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2393#issuecomment-277404479:87,test,tests,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2393#issuecomment-277404479,1,['test'],['tests']
Testability,I've ran this one in my test and it's clear the current code doesn't have the problem of prefetching a prefetcher.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2643#issuecomment-298468693:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2643#issuecomment-298468693,2,['test'],['test']
Testability,"I've rebased on the most recent GenomicsDB changes but am still having trouble getting tests to pass. Not sure yet what the solution is but here is the issue for documentation:. With these new changes HaplotypeCaller produces the following GVCF records on our chr20 test data:. ```; 20	10068158	.	GTGTATATATATA	G,<NON_REF>	66.73	.	BaseQRankSum=-0.652;ClippingRankSum=0.000;DP=29;ExcessHet=3.0103;MLEAC=1,0;MLEAF=0.500,0.00;MQRankSum=0.328;RAW_MQ=93364.00;ReadPosRankSum=-0.253	GT:AD:DP:GQ:PL:SB	0/1:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20	10068160	.	GTATATATATATGTA	G,*,<NON_REF>	697.73	.	DP=28;ExcessHet=3.0103;MLEAC=1,1,0;MLEAF=0.500,0.500,0.00;RAW_MQ=87005.00	GT:AD:DP:GQ:PL:SB	1/2:0,2,4,0:6:53:735,162,131,102,0,53,507,174,108,472:0,0,2,4; ```. If I run this through CombineGVCFs like this:. ```; ./gatk CombineGVCFs -V src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk4.g.vcf -O test_gdb_import_combine.g.vcf -R src/test/resources/large/human_g1k_v37.20.21.fasta; ```. The resulting GVCF has these records:. ```; 20 10068158 . GTGTATATATATA G,<NON_REF> . . BaseQRankSum=-6.520e-01;ClippingRankSum=0.00;DP=29;ExcessHet=3.01;MQRankSum=0.328;RAW_MQ=93364.00;ReadPosRankSum=-2.530e-01 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068159 . T *,<NON_REF> . . DP=29 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068160 . GTATATATATATGTA G,*,<NON_REF> . . DP=28;ExcessHet=3.01;RAW_MQ=87005.00 GT:AD:DP:GQ:PL:SB ./.:0,2,4,0:6:53:735,162,131,102,0,53,507,174,108,472:0,0,2,4; 20 10068161 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068162 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068163 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068164 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068165 . T *,<NON_R",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4963#issuecomment-403519172:87,test,tests,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4963#issuecomment-403519172,5,['test'],"['test', 'testGVCFMode', 'tests']"
Testability,"I've rebased this branch onto the latest master to see if tests still pass. If they do, I'll merge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2790#issuecomment-305919746:58,test,tests,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2790#issuecomment-305919746,1,['test'],['tests']
Testability,"I've rebased this branch, and added a few minor updates. This can be merged after test pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4003#issuecomment-356144033:82,test,test,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4003#issuecomment-356144033,1,['test'],['test']
Testability,"I've responded to the ancient comments, rebased, and added some test improvements.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6388#issuecomment-2297024012:64,test,test,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6388#issuecomment-2297024012,1,['test'],['test']
Testability,"I've run into an error using a certain BAM file I created for testing. Possibly relevant: I also tried running it through PrintReads - all reads were filtered out by the WellFormedReadFilter because they do not have read groups or base qualities. [test_pathseq_unmapped.bam.zip](https://github.com/broadinstitute/gatk/files/537153/test_pathseq_unmapped.bam.zip). > > ./gatk-launch PrintReadsSpark -I ~/Work/gatk/tests/test_pathseq_unmapped.bam -O ~/Work/gatk/tests/test_pathseq_unmapped.output.bam; > > Using GATK wrapper script /Users/markw/IdeaProjects/gatk/build/install/gatk/bin/gatk; > > Running:; > > /Users/markw/IdeaProjects/gatk/build/install/gatk/bin/gatk PrintReadsSpark -I /Users/markw/Work/gatk/tests/test_pathseq_unmapped.bam -O /Users/markw/Work/gatk/tests/test_pathseq_unmapped.output.bam; > > 15:10:22.765 INFO IntelGKLUtils - Trying to load Intel GKL library from:; > > jar:file:/Users/markw/IdeaProjects/gatk/build/install/gatk/lib/gkl-0.1.2.jar!/com/intel/gkl/native/libIntelGKL.dylib; > > 15:10:22.790 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; > > [October 18, 2016 3:10:22 PM EDT] org.broadinstitute.hellbender.tools.spark.pipelines.PrintReadsSpark --output /Users/markw/Work/gatk/tests/test_pathseq_unmapped.output.bam --input /Users/markw/Work/gatk/tests/test_pathseq_unmapped.bam --readValidationStringency SILENT --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --bamPartitionSize 0 --disableSequenceDictionaryValidation false --shardedOutput false --numReducers 0 --sparkMaster local[*] --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false --disableAllReadFilters false; > > [October 18, 2016 3:10:22 PM EDT] Executing as markw@WMC9F-819 on Mac OS X 10.11.6 x86_64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_91-b14; Version: Version:4.alpha.1-318-gcdc484c-SNAPSHOT; > > 15:10:22.793 INFO PrintReadsSpark - Defaults.BUFFER_SIZE : 131072; > > 15:10:22.793 INFO PrintReadsSpark - Defaults.COMPRESS",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2219:62,test,testing,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2219,5,['test'],"['testing', 'tests']"
Testability,I've run on two separate machines with the snapshot - still seeing the hanging while running gradle tests. Haven't seen #2535 though.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2490#issuecomment-289788677:100,test,tests,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2490#issuecomment-289788677,1,['test'],['tests']
Testability,"I've seen this a few times on two different Mac laptops (both with 16G), primarily while running the IntelInflaterDeflaterIntegrationTest from within IntelliJ, but a couple of times I've seen it while running the full test suite from gradle. I saw these while trying to narrow down https://github.com/broadinstitute/gatk/issues/2490 - its probably related. This one happened while several times when running just the IntelInflaterDeflaterIntegrationTest from (on one of the PrintReads tests) from within IntelliJ:. [TestNG] Running:; /Users/cnorman/Library/Caches/IntelliJIdea2016.3/temp-testng-customsuite.xml; java(79316,0x700000d3b000) malloc: *** error for object 0x7f9543bf1000: pointer being freed was not allocated; *** set a breakpoint in malloc_error_break to debug; Process finished with exit code 134 (interrupted by signal 6: SIGABRT). This one happened while running the full gatk test suite from gradle (note that this one appears to occur during VariantsSparkSinkUnitTest, but in this case the IntelInflaterDeflaterIntegrationTest was the test that had been run immediately previously):. Gradle suite > Gradle test > org.broadinstitute.hellbender.engine.spark.datasources.VariantsSparkSinkUnitTest.testWritingToFileURL[0](/Users/cmn/projects/hellbender/src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf, .vcf) STANDARD_OUT; 23:02 DEBUG: [kryo] Write: SerializableConfiguration; java(51936,0x119471000) malloc: *** error for object 0x7fd0b7a1d600: pointer being freed was not allocated; *** set a breakpoint in malloc_error_break to debug; Results: SUCCESS (0 tests, 0 successes, 0 failures, 0 skipped)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2535:218,test,test,218,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2535,10,"['Test', 'test']","['TestNG', 'test', 'testWritingToFileURL', 'testng-customsuite', 'tests']"
Testability,I've started to take a look at this. Thank you for running the Carrot Tests! I guess you might be right about the score jitter not mattering but man there are enough differences in the HC integration test that i'm a little worried....,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8332#issuecomment-1581501197:70,Test,Tests,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8332#issuecomment-1581501197,2,"['Test', 'test']","['Tests', 'test']"
Testability,I've tested my scenario and made notes in <https://github.com/broadinstitute/gatk/issues/3154>. I used `gatk-4.beta.5` to test. The issue is solved. Thank you for the fix.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3430#issuecomment-333562036:5,test,tested,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3430#issuecomment-333562036,2,['test'],"['test', 'tested']"
Testability,"I've tried to study the code that turns a split read into a stranded interval pair so that it can be compared directly to the disparate read pair info, and I can't convince myself that it's correct. There seem to be a bunch of cases that aren't covered. For example, it seems to me that the first step would have to be reversing the cigars on negative strand SA's, so that you can see which pairs of SA's are genuinely supplemental to -- and potentially partially overlapping -- each other, and the actual order of the aligned sequences. (I'm sure this is unclear, too. We can talk.). Is there a unit test that mocks the reads we'd expect to get from an inversion breakpoint, both discordant and split. And that demonstrates that the stranded interval pairs generated from the reads are consistent with each other and with that breakpoint?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3469#issuecomment-326088993:601,test,test,601,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3469#issuecomment-326088993,2,"['mock', 'test']","['mocks', 'test']"
Testability,I've updated the image and it seems to be working locally. Now for the true test...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8228:76,test,test,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8228,1,['test'],['test']
Testability,IGNORE: test issue,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8,1,['test'],['test']
Testability,"IMO. In fact ideally I'd like to write a design doc or something similar, and only code after the design is agreed on. --------. > I would of course prefer not to have to have a hard filter on length. This would mean we would never call a large inversion even if it exists. . Answer: Totally agree. Now looking back, it get clearer to me that this proposal contains two parts: the filtering part, and the breakpoint linking part, separated into two major classes `InversionBreakendPreFilter` and `LinkedInversionBreakpointsInference`. That being said, it doesn't make much sense to separate them into two PRs because _currently_ the filtering part is designed around the linking part, i.e. it is trying to check which BND's are suitable to the logic implemented in the linking part, and if the logic isn't applicable to an BND, the BND simply slips through without generating any new interpretations. So `InversionBreakendPreFilter` is a filter and a classifier at the same time, it function is really diverting different BND's to be handled by different logics, and it definitely should be improved.; If you buy this argument, I am also fully aware of the code design issue that it is preferable to NOT divert&mdash;gather&mdash;send through different handlers like it currently is for calling variants from the assembly contigs, instead it should be a single stream pass through all the BND's. I'll try to follow the preferred design. > What about some other filters more specifically aimed at the artifacts that cause these false large calls? I think it's a good idea to check annotations -- ie. do the mates lie at two regions that are segmental duplications of each other, or one side of the mate looks like a transposable element insertion? I guess it's ok to put in a tool with this limit temporarily, though. Answer: Agree. And I think these kind of checking are not only good, but a mandate for a good caller, i.e. to take advantage of prior knowledge. I am also thinking about improving it ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4789#issuecomment-406483929:1434,log,logics,1434,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4789#issuecomment-406483929,2,['log'],['logics']
Testability,"INFO DetermineGermlineContigPloidy - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 15:09:27.689 INFO DetermineGermlineContigPloidy - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 15:09:27.690 INFO DetermineGermlineContigPloidy - Deflater: IntelDeflater; 15:09:27.690 INFO DetermineGermlineContigPloidy - Inflater: IntelInflater; 15:09:27.690 INFO DetermineGermlineContigPloidy - GCS max retries/reopens: 20; 15:09:27.690 INFO DetermineGermlineContigPloidy - Requester pays: disabled; 15:09:27.690 INFO DetermineGermlineContigPloidy - Initializing engine; 15:09:37.241 INFO DetermineGermlineContigPloidy - Done initializing engine; 15:09:37.253 INFO DetermineGermlineContigPloidy - No contig-ploidy model was provided, running in cohort mode...; 15:09:37.253 INFO DetermineGermlineContigPloidy - Intervals specified...; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 15:09:38.533 INFO FeatureManager - Using codec IntervalListCodec to read file file:///home/n.liorni/snakemake_cnv_gatk/results/cnv/targets.preprocessed.interval_list; 15:09:38.659 INFO IntervalArgumentCollection - Processing 548086 bp from intervals; 15:09:38.697 INFO DetermineGermlineContigPloidy - Validating and aggregating coverage per contig from input read-count files...; 15:09:38.711 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-0848_S4.hdf5 (1 / 4); 15:09:38.734 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-0872_S2.hdf5 (2 / 4); 15:09:38.745 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-1121_S4.hdf5 (3 / 4); 15:09:38.757 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-1543_S10.hdf5 (4 / 4); 15:12:24.486 INFO DetermineGermlineContigPloidy - Shutti",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7444#issuecomment-945753905:3960,log,logging,3960,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7444#issuecomment-945753905,1,['log'],['logging']
Testability,IOUtils.unzipToFolder test missinbg,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7956:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7956,1,['test'],['test']
Testability,"ITY INFO --QUIET false --VALIDATION_STRINGENCY STRICT --COMPRESSION_LEVEL 2 --MAX_RECORDS_IN_RAM 500000 --CREATE_INDEX true --CREATE_MD5_FILE false --GA4GH_CLIENT_SECRETS client_secrets.json --help false --version false --showHidden false --USE_JDK_DEFLATER false --USE_JDK_INFLATER false; Jun 22, 2020 5:06:37 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; [Mon Jun 22 17:06:37 CDT 2020] Executing as xxxxxxx@yyyyyy on Linux 3.10.0-693.11.1.el7.x86_64 amd64; OpenJDK 64-Bit Server VM 1.8.0_152-release-1056-b12; Deflater: Intel; Inflater: Intel; Provider GCS is available; Picard version: Version:4.1.7.0; [Mon Jun 22 17:06:37 CDT 2020] picard.vcf.MergeVcfs done. Elapsed time: 0.00 minutes.; Runtime.totalMemory()=1249378304; To get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp; htsjdk.samtools.SAMException: Cannot read non-existent file: file:///data/infectious/schistosome/tmp/test%20a/data/calling/erc_prod2.SM_V7_1.vcf.gz; at htsjdk.samtools.util.IOUtil.assertFileIsReadable(IOUtil.java:498); at htsjdk.samtools.util.IOUtil.assertFileIsReadable(IOUtil.java:485); at picard.vcf.MergeVcfs.doWork(MergeVcfs.java:173); at picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:305); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgramExecutor.instanceMain(PicardCommandLineProgramExecutor.java:25); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:163); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); ```. ## Cases when the error does not occur; * If I rename `test a` folder in `test-a` as previously said.; * If I copy my current `test a` in the `/tmp/` directory (`/tmp/test a/`). This may suggest that the path length plays a role.; * If I renamed the VCF files (first VCF becomes `a.vcf.gz`, second `b.vcf.gz`) (`gatk Mer",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-647808241:6433,test,test,6433,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-647808241,1,['test'],['test']
Testability,"Ideally we'd minimize changes to core engine classes, and instead create new specialized subclasses (like a subclass of MultiVariantWalkerGroupedOnStart) that implement the desired behavior. The main thing is that we need something that only affects `VariantEval` - anything that affects other tools would run into the same issues as #4571 - specifically that tests that use VariantContext equality to validate results will start to fail because of the presence of source name in the actual values.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6973#issuecomment-823578133:360,test,tests,360,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6973#issuecomment-823578133,1,['test'],['tests']
Testability,"If I may interject here ... . I would not throw any allele that **itself is plausible** which seems to be the case for both AC and ACC. In other words it seems very harsh to ""throw"" alleles because there are viable alternative GTs that do not include them. These are two different tests. Under what circumstances is the AF **_pressed_** to removed any allele.... does it do it by default? ... @davidbenjamin?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6364#issuecomment-575731176:281,test,tests,281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6364#issuecomment-575731176,1,['test'],['tests']
Testability,"If I run BaseRecalibrator on a reference with contigs [20,21] and knownSites only has only sites from 17, then GATK3 blows up:. ```; ##### ERROR MESSAGE: Input files knownSites and reference have incompatible contigs: No overlapping contigs found.; ##### ERROR knownSites contigs = [17]; ##### ERROR reference contigs = [20, 21]; ```. but gatk4 does not (and it should). This is the cause of the bogus tests in #1017 (they should have never been allowed to exist). The commandline for GATK3 is; (the VCF has no sequence dictionary). ```; -T BaseRecalibrator -R src/test/resources/large/human_g1k_v37.20.21.fasta -I src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam --out gatk3.3.recal.txt --knownSites src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1029:402,test,tests,402,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1029,4,['test'],"['test', 'tests']"
Testability,"If a `VariantWalker` driving variant is indexed with tribble but does not have an sequence dictionary in the header, the dictionary is loaded from the index. Nevertheless, this is a truncated dictionary because the end coordinate for each chromosome is the last variant in that contig. Thus, even if a proper interval for the genome is provided (regarding the reference sequence), the program throw an user error exception. This could be reproduced with the following test in `ExampleVariantWalkerIntegrationTest`:. ``` java; @Test; public void testExampleVariantWalkerInvalidDictionary() throws IOException {; final IntegrationTestSpec testSpec = new IntegrationTestSpec(; "" -L 1:200-1125"" +; "" -R "" + hg19MiniReference +; "" -I "" + TEST_DATA_DIRECTORY + ""reads_data_source_test1.bam"" +; "" -V "" + TEST_DATA_DIRECTORY + ""example_variants.vcf"" +; "" -auxiliaryVariants "" + TEST_DATA_DIRECTORY + ""feature_data_source_test.vcf"" +; "" -O %s"", Arrays.asList(TEST_OUTPUT_DIRECTORY + ""expected_ExampleVariantWalkerIntegrationTest_output.txt""));; testSpec.executeTest(""testExampleVariantWalker_UndefinedContigLengthsInDictionary"", this);; }; ```. The thrown exceptions is the following:. ``` java; java.lang.RuntimeException: org.broadinstitute.hellbender.exceptions.UserException$MalformedGenomeLoc: A USER ERROR has occurred: Badly formed genome loc: Failed to parse Genome Location string: 1:200-1125; ```. This comes from the overrided method `VariantWalker.getBestAvailableSequenceDictionary()`, which prefers the one from the driving variant (in this case, the one which comes from the index), not using the one from the reference/reads if available.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2081:468,test,test,468,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2081,5,"['Test', 'test']","['Test', 'test', 'testExampleVariantWalkerInvalidDictionary', 'testSpec']"
Testability,"If a core dump is produced while running tests on travis, this will echo the log file to the travis log (ie., it was triggered [here](https://api.travis-ci.com/v3/job/468677651/log.txt) by the pair hmm seg fault) so the java and native thread stacks can be inspected.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7020:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7020,4,"['log', 'test']","['log', 'tests']"
Testability,"If it helps, I have seen this error when using local drives exclusively (not attached to a shared file system). . Twice it has manifested as a core dump that points to ` C [libc.so.6+0xaf4f9] malloc+0x169`: . ```; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000014cfb1d504f9, pid=1182729, tid=1195264; #; # JRE version: OpenJDK Runtime Environment (17.0.3) (build 17.0.3-internal+0-adhoc..src); # Java VM: OpenJDK 64-Bit Server VM (17.0.3-internal+0-adhoc..src, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0xaf4f9] malloc+0x169; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.3/core.1182729); #; # If you would like to submit a bug report, please visit:; # https://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; [dalegre@login4601 fdone]$ head -n 20 hs_err_pid1182729.log; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000014cfb1d504f9, pid=1182729, tid=1195264; #; # JRE version: OpenJDK Runtime Environment (17.0.3) (build 17.0.3-internal+0-adhoc..src); # Java VM: OpenJDK 64-Bit Server VM (17.0.3-internal+0-adhoc..src, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0xaf4f9] malloc+0x169; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.3/core.1182729); #; # If you would like to submit a bug report, please v",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8683#issuecomment-1936285520:887,test,test,887,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8683#issuecomment-1936285520,1,['test'],['test']
Testability,"If it's helpful, I can provide a couple samples for you to test. The VCFs that worked/didnt work appear to be homologous in the region that I specified (according to IGV), so I not sure a deletion is causing the issue?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8427#issuecomment-1646229329:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8427#issuecomment-1646229329,1,['test'],['test']
Testability,"If it's not too hard, it would be nice to add a unit test for `getKmerIntervals` that exercises this scenario.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2137#issuecomment-245081416:53,test,test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2137#issuecomment-245081416,1,['test'],['test']
Testability,"If that solves your issue, then thats even better. The one change I'd request then is that you add javadoc saying that the getter can return null, since its possible to construct a PedigreeAnnotation without a File. Then once tests pass it should be good.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7277#issuecomment-856039598:226,test,tests,226,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7277#issuecomment-856039598,1,['test'],['tests']
Testability,"If that's the case, it might indeed be worth switching dictionaries/contigs to something real. You can probably shift the interval starts/ends as well, if you need them to overlap in some way with other test data, but I'd keep the split by contig and the bin sizes the same.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6957#issuecomment-727068946:203,test,test,203,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6957#issuecomment-727068946,1,['test'],['test']
Testability,"If the pattern is common, we could certainly explore adding some kind of ""argset"" support to Barclay. It would have the advantage of getting it integrated into the help and doc, though that could get complicated. Another possibility is a hybrid approach, where Barclay supports declarative argset definitions, but uses them for help interrogation only, with a command line argument that takes an argset name and generates output or an executable command line with recommended defaults for that argset:. `gatk GermlineCNVCaller --argsetfor WGS`. would generate:. `gatk GermlineCNVCaller --std-log-mean-bias 1.0 --interval-psi-scale 0.0001 ...`",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4719#issuecomment-385681493:592,log,log-mean-bias,592,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4719#issuecomment-385681493,1,['log'],['log-mean-bias']
Testability,If the second test passed in master then I don't consider it to be a good test of your fix. Can you make a test where the PLs with and without span del would lead to different QUALs in the old version? Maybe a case with a confident deletion in sample1 and a low quality SNP in sample2 that causes a spanning deletion in sample1. You could probably do this by modifying your first test by adding a sample that has A or B called with low GQ with respect to the reference.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4801#issuecomment-391455182:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4801#issuecomment-391455182,4,['test'],['test']
Testability,"If there are overlapping (e.g. a long SNV overlapping an INDEL) or multi-allelic germline variants, Mutect2 will check only the AF of the first variant/allele when searching for germline sites to exclude during active region detection. This PR updates the logic to iterate through all germline alleles.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7468:256,log,logic,256,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7468,1,['log'],['logic']
Testability,If this is blocking us from making otherwise useful changes then we should prioritize adding these tests...,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3184#issuecomment-358794078:99,test,tests,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3184#issuecomment-358794078,1,['test'],['tests']
Testability,"If we keep the old code in tact as you propose then the first phase could be to swap the default from old to new and make `-oldQual` an argument, then it won't affect any potential HC tie-outs. David B. is going to do the 1000 exome scale test -- is that what you were thinking of as the supplemental evaluation? Or do we still need something for FE?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-377566539:239,test,test,239,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-377566539,1,['test'],['test']
Testability,"If we like this -- we also need to . - [x] build a jar; - [x] update the WDL to use this tool (and the Jar); - [ ] Put the BED files someplace public/widely accessible (likely just the 1kb version); - [x] Run an E2E on QuickStart, merge the VCFs and compare (and see no differences); - [x] If we want to validate evenness we need to run with a lot of shards and enough data that they are interesting. Maybe Stroke 10k; - [x] In parallel if we could turn some of the above script into integration tests that would be awesome",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7643#issuecomment-1017113500:496,test,tests,496,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7643#issuecomment-1017113500,1,['test'],['tests']
Testability,"If you look at the approximation going from equation 34 to 35 in https://github.com/broadinstitute/gatk/blob/master/docs/mutect/mutect.pdf you will find that we replace f(1 - e) + (1 - f)e by just f(1 - e), where f is the allele fraction and e is the error rate. When f is much bigger than e this is okay but when they are comparable (consider mitochondrial or cfDNA calling with f = 1% and base qualities of 25) the approximation breaks down and we significantly underestimate the log odds, thereby failing to consider a region active. This must be fixed!. @meganshand",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4816:482,log,log,482,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4816,1,['log'],['log']
Testability,"If you run AlignAssembledContigsSpark with an incorrect BWA index version (ie. one that was generated with BWA index 0.7.12 or previous), you get executor logs that trace back to an ""IOException: File system is closed"" error, which is very misleading. I believe that this happens because Spark retries the tasks multiple times after they have failed, and in the subsequent tries the filesystem is in a bad state. It would be nice if we could either catch this error earlier, or check to make sure that the reference is compatible before trying to load it somehow.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2123:155,log,logs,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2123,1,['log'],['logs']
Testability,"If you run this on position 20:10022820 in `src/test/resources/large/mutect/dream_synthetic_bams/tumor.bam` you will get the wrong alt (you get C, but should be T). . Proposed solution: Use findLast() (or reverse b1 and b2 in the compare statement to get this to sort in descending order). ```; private static Nucleotide inferAltFromPileupBaseCounts(final Nucleotide.Counter baseCounts,; final Nucleotide refNucleotide) {; return BASES.stream(); .filter(b -> b != refNucleotide); .sorted((b1, b2) -> Long.compare(baseCounts.get(b1), baseCounts.get(b2))); .findFirst().get();; }; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3548:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3548,1,['test'],['test']
Testability,"If you train a VQSR model on a subset of the variants under consideration and serialize it, then provide it via `--input-model` to subsequent VQSR runs on sets of variants including those other than in the original training subset (the only use case for which you'd bother serializing a model in the first place, probably), this will result in variants in those subsequent sets being incorrectly labeled as `NEGATIVE_TRAINING_SITE`. The culprit lines of code are: https://github.com/broadinstitute/gatk/blob/5b8736715724d6ba7994613acbc37e1bf187f538/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java#L644-L650. Instead, only those negative training sites taken from the original subset and used to generate the serialized negative model should be labeled as such. Note also that we needlessly select the worst scoring variants here, which leads to the bad behavior as well as a misleading log message. There is also some residual funkiness from the fact that we require the specification of the number of training variants in order to construct a GMM from a serialized model, which is a result of further funkiness from the fact that we require the size of the array of responsibilities to be initialized using this number. Unfortunately, I don't think there's an easy fix, since we don't actually pass either the correct positive/negative training labels (in the recal table generated by the original run) or the necessary information to reconstruct them otherwise (e.g., we could repeat the VQSLOD calculations, given the original training subset sites and VQSLOD cutoffs used to originally derive the negative labels) to these subsequent runs. (Unless we actually want to pass those things, which seems messy.). Note also that the `POSITIVE_TRAIN_SITE` label is still applied to sites that get dropped because of standard deviation thresholding and are hence not used to train the positive GMM, which seems slightly inconsistent (since the `NEGATIVE_TRAIN_SITE`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7630:926,log,log,926,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7630,1,['log'],['log']
Testability,"If you want a proper test using the empirical data that cause the report, you cannot close otherwise the new code does exactly check for the offending condition and so it should be now fixed.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7182#issuecomment-858037303:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7182#issuecomment-858037303,1,['test'],['test']
Testability,"If you will benchmark this @kelepiradam, that would be awesome.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3697#issuecomment-380131187:12,benchmark,benchmark,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3697#issuecomment-380131187,1,['benchmark'],['benchmark']
Testability,"If you're interested in BWASpark tool I might wait a bit. There are a lot of issues with it as it currently stands, it's one of the least tested tools we have. We have someone working on a different more efficient implementation of the bwa bindings that may eventually be integrated into mainline gatk, so we've sort of stopped most development on BWASparkEngine until we're clear on the direction that the new work is going to take.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2300#issuecomment-267119998:138,test,tested,138,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2300#issuecomment-267119998,2,['test'],['tested']
Testability,Ignore spanning deletions in Rank Sum tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2059:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2059,2,['test'],['tests']
Testability,"Ignore this ticket, testing function of new app<br><br><i>(created from <a href='https://broadinstitute.zendesk.com/agent/tickets/4212'>Zendesk ticket #4212</a>)<br>gz#4212</i>",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6353:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6353,1,['test'],['testing']
Testability,Ignoring test classes when counting coverage,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5565:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5565,1,['test'],['test']
Testability,IlluminaBasecallsConverter used multiple threads which has already led to sporadically failing tests (issie #364) Multithreading needs to be removed from Hellbender.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/378:95,test,tests,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/378,1,['test'],['tests']
Testability,ImmutableComputableGraph code improvement + unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3034:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3034,1,['test'],['tests']
Testability,ImmutableComputableGraph code improvement + unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3035:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3035,1,['test'],['tests']
Testability,Impl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorIm,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2646,test,testng,2646,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testng']
Testability,Impl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorIm,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253:2667,test,testng,2667,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253,1,['test'],['testng']
Testability,Implement PathSeqBwaSpark tool and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3113:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3113,1,['test'],['tests']
Testability,Implement PathSeqScoreSpark tool and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3114:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3114,1,['test'],['tests']
Testability,Implement Spark correctness tests on gatk-jenkins separate from performance tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2288:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2288,2,['test'],['tests']
Testability,Implement WDL test data generation for tools with mutex args.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6805:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6805,1,['test'],['test']
Testability,Implement a test that catches failures to register new annotations in GATKVCFHeaderLines,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1713:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1713,1,['test'],['test']
Testability,Implement additional dataproc-based tests on travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4168:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4168,1,['test'],['tests']
Testability,Implement at least one good roundtrip test bam -> cram -> bam in htsjdk,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1661:38,test,test,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1661,1,['test'],['test']
Testability,Implement automated performance benchmarks (in Jenkins or similar),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5261:32,benchmark,benchmarks,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5261,1,['benchmark'],['benchmarks']
Testability,"Implement bi-directional conversion utilities between fasta and 2bit formats, and test on-the-fly conversion as a solution to the ""multi-reference"" issue in ReadsPipelineSpark",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2074:82,test,test,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2074,1,['test'],['test']
Testability,Implement comprehensive tests for Spark inputs/outputs (all supported combinations),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5637:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5637,1,['test'],['tests']
Testability,Implement good tests for GCS NIO support in ReadWalkers,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2406:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2406,1,['test'],['tests']
Testability,Implement long-running regression tests for variant-calling tools (including automated plotting of results over time),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4630:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4630,1,['test'],['tests']
Testability,Implement short-running dataproc regression tests on travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2298:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2298,1,['test'],['tests']
Testability,Implement tests for new GenomicsDB support for non-diploid genotypes and phasing information,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3609:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3609,1,['test'],['tests']
Testability,Implement unit tests for PairHMM in gatk-native-bindings,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2030:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2030,1,['test'],['tests']
Testability,"Implemented CombineRawData() and GenerateRawData() methods from GATK3 in all Allele Specific annotations and added tests designed to mimic the existing CombineGVCFs integration tests in GATK3 by asserting the combined output matches that of GATK3. This could still use more substantial tests for finalizeRawAnnotations and AnnotateRawData. Additionally, I would like to ask for advice as to how I should go about further implementing tests for the annotation classes. . Fixes #1893; Fixes #3535",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3527:115,test,tests,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3527,5,"['assert', 'test']","['asserting', 'tests']"
Testability,Implemented VCF ID for VCF data sources. - Now VCF data sources create an ID field for the ID of the variant; used for the annotation. - Updated the regression test suite with a VCF data source to increase; test coverage. Fixes #5186,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5327:160,test,test,160,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5327,2,['test'],['test']
Testability,Implemented getExecutorCores() and getMemoryPerCore() to command line tools and added sensible local tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1947:101,test,tests,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1947,1,['test'],['tests']
Testability,"Implements #1552 . When the StrandAlleleCountsBySample (SAC) annotation is present in VCFs, allele subsetting by SelectVariants will now update this field in the final VCF. **Summary of changes**; - `SelectVariants.subsetRecord()` uses the updated `GATKVariantContextUtils.updatePLsSACsAD()`, which contains the machinery to subset SAC by the used alleles.; - Added unit and integration tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1852:387,test,tests,387,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1852,1,['test'],['tests']
Testability,Implements #2059.; Ignore loci inside spanning deletions in Rank Sum tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2104:69,test,tests,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2104,1,['test'],['tests']
Testability,"Implements #2193.; This is a port of https://github.com/broadinstitute/gsa-unstable/pull/1417. Unit tests were added since the GATK3 version was tested with GenotypeGVCFs, which is in `gatk-protected`. There is a new internal class, `GenomeLocation` is used instead of `GenomeLoc` to store the deletions. This is because `GenomeLocParser`, which is used to create `GenomeLoc` is not passed into `GenotypingEngine` in GATK4. I could not find a clean way to add it.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2326:100,test,tests,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2326,2,['test'],"['tested', 'tests']"
Testability,Implements #2430.; Made the exception message informative.; Created a test where the input covariates table file has a read group in the quality score (RecalTable1) or covariates (RecalTable2) report that is not in read group report (RecalTable0).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2431:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2431,1,['test'],['test']
Testability,"Implements allele collapsing for ""breakend replacement"" BND alleles, as described in section 5.4 of the [VCFv4.2 spec](https://samtools.github.io/hts-specs/VCFv4.2.pdf). Also:; - Validates symbolic alt allele for non-BND SV classes when attempting to collapse multiple alt alleles.; - Greatly improves unit test coverage for `CanonicalSVCollapser`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8408:307,test,test,307,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8408,1,['test'],['test']
Testability,"Implements https://github.com/broadinstitute/gatk/issues/1382.; Remove diploid assumptions during allele subsetting. **Summary**; - Changed `GenotypeLikelihoods.GenotypeLikelihoodsAllelePair GenotypeLikelihoods.getAllelePair(int PLindex)` to `ArrayList<Integer> GenotypeLikelihoods.getAlleles(int PLindex, int ploidy)` in GATKVariantContextUtils. ; - Added integration and unit tests.tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1845:378,test,tests,378,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1845,2,['test'],['tests']
Testability,"Implements https://github.com/broadinstitute/gatk/issues/2787.; **Summary of Changes**; * HaplotypeBAMDestination.java - Added a statement to put the the input `@PG` header lines in the output BAM.; * ArtificialReadUtils.java - Added a methods to create a SAM header with Program Records. Fixed a bug in `createArtificialSamHeaderWithReadGroup` where the Read Group was using `PG` instead of the `RG` tag.; * SamAssertionUtils.java - Created a utility, `assertOutBamContainsInBamProgramRecords`, that checks that output BAM file header contains the input BAM file header Program Records.; * SamAssertionUtilsUnitTest.java - Unit tests `assertOutBamContainsInBamProgramRecords`.; * HaplotypeCallerIntegrationTest.java - Tested the input BAM Program Record (PG) tags are forwarded to the output BAM.; * HaplotypeBAMWriterUnitTest.java - Tested the input BAM Program Record (PG) tags are forwarded to the output SAM and BAM.; * testSAM.sam and testBAM.sam - Modified to reflect forwarded PG tags in HaplotypeBAMWriterUnitTest.; * ArtificialReadUtilsUnitTest.java and ReadPileupUnitTest.java - change null to the RG value due to using the correct tag in `ArtificialReadUtils.createArtificialSamHeaderWithReadGroup`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3065:454,assert,assertOutBamContainsInBamProgramRecords,454,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3065,7,"['Test', 'assert', 'test']","['Tested', 'assertOutBamContainsInBamProgramRecords', 'testBAM', 'testSAM', 'tests']"
Testability,"Implements tool for clustering SVs, built on top of the clustering engine code refined recently in #7243. In addition to a few bug fixes, updates also include:. - `PloidyTable` class, which ingests and serves as a simple data class for a tsv of per-sample contig ploidies. This was necessary for inferring genotypes when input vcfs contain non-matching sample and variant records.; - Modified `SVClusterEngine` to render sorted output.; - Improved code for SV record collapsing (see the `CanonicalSVCollapser`), particularly for CNVs. Genotype collapsing now infers allele phasing in certain unambiguous cases, in particular for DUPs and multi-allelic CNVs. Testing for this has been cleaned up and augmented with further cases to validate this functionality.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7541:658,Test,Testing,658,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7541,1,['Test'],['Testing']
Testability,"Implements two new tools and updates some methods for a revamp of the `CombineBatches` cross-batch integration module in [gatk-sv](https://github.com/broadinstitute/gatk-sv). - `SVStratify` - tool for splitting out a VCF by variant class. Users pass in a configuration table (see tool documentation for an example) specifying one or more stratification groups classified by SVTYPE, SVLEN range, and reference context(s). The latter are specified as a set of interval lists using `--context-name` and `--context-intervals` arguments. All variants are matched with their respective group which is annotated in the `STRAT` INFO field. Optionally, the output can be split into multiple VCFs by group, which is a very useful functionality that currently can't be done efficiently with common commands/toolkits.; - `GroupedSVCluster` - a hybrid tool combining functionality from `SVStratify` with `SVCluster` to perform intra-stratum clustering. This tool is critical for fine-tuned clustering of specific variants types within certain reference contexts. For example, small variants in simple repeats tend to have lower breakpoint accuracy and are typically ""reclustered"" during call set refinement with looser clustering criteria.; - `SVStratificationEngine` - new class for performing stratification.; - Updates to breakpoint refinement in `CanonicalSVCollapser` that should improve breakpoint accuracy, particularly in larger call sets. Raw evidence support and variant quality are now considered when choosing a representative breakpoint for a group of clustered SVs.; - Added `FlagFieldLogic` type for customizing how `BOTHSIDE_PASS` and `HIGH_SR_BACKGROUND` INFO flags are collapsed during clustering.; - `RD_CN` is now used as a backup if `CN` is not available when determining carrier status for sample overlap.; - Removed no-sort option in favor of spooled sorting.; - Bug fix: support for empty EVIDENCE info fields; - Bug fix: in one of the JointGermlineCnvDefragmenter tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8990:1976,test,tests,1976,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8990,1,['test'],['tests']
Testability,"Improve handling of clipped read ""stubs"" in HC",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5079:34,stub,stubs,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5079,1,['stub'],['stubs']
Testability,Improve logging and exception handling of CreateReadCountPanelOfNormals.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5771:8,log,logging,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5771,1,['log'],['logging']
Testability,Improve testing and reduce costs. Sounds right to me.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2726#issuecomment-302242076:8,test,testing,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2726#issuecomment-302242076,1,['test'],['testing']
Testability,Improve the commenting/warning for Forked-PR tests in Github Actions tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7799:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7799,2,['test'],['tests']
Testability,Improve unit test coverage for existing CRAM classes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5204:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5204,1,['test'],['test']
Testability,Improve unit testing for getAlignedRefAllele,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5351:13,test,testing,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5351,1,['test'],['testing']
Testability,Improving test coverage by deleting dead code and moving more tests from GATK3,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/218:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/218,2,['test'],"['test', 'tests']"
Testability,In #6991 I introduced an option for HC to not print artificial haplotypes in the bamout. I overlooked the fact that when this option is enabled we should not include the read group for the artificial haplotypes in the header. The present PR fixes this and adds tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7141:261,test,tests,261,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7141,1,['test'],['tests']
Testability,"In <https://github.com/broadinstitute/dsde-docs/issues/2639> we agreed to tag all tools, regardless of status (alpha, deprecated, test tools), so long as straightforward to do so, with the documentedfeature tag. This allows the javaDoc portion of the tooldoc to show up in our forum (gatkDoc). ### Tools missing from gatkDocs that show up in `--list`that we need documentation to show up for this year; - [x] CalculatePulldownPhasePosteriors; - [x] GetSampleName; - [x] PathSeqBuildKmers; - [x] PathSeqBuildReferenceTaxonomy; - [x] PathSeqBwaSpark; - [x] PathSeqFilterSpark; - [x] PathSeqPipelineSpark; - [x] PathSeqScoreSpark; - [x] ASEReadCounter; - [x] CompareBaseQualities; - [x] FixMisencodedBaseQualityReads; - [x] LeftAlignIndels; - [x] RevertBaseQualityScores; - [x] SplitNCigarReads; - [x] UnmarkDuplicates; - [x] DiscoverVariantsFromContigAlignmentsSAMSpark; - [x] FindBadGenomicKmersSpark; - [x] FindBreakpointEvidenceSpark; - [x] StructuralVariationDiscoveryPipelineSpark; - [x] BwaSpark; - [x] MarkDuplicatesSpark; - [x] MeanQualityByCycleSpark; - [x] ParallelCopyGCSDirectoryIntoHDFSSpark; - [x] QualityScoreDistributionSpark; - [x] SortReadFileSpark; - [x] AnnotatePairOrientation; - [x] CountVariants; - [x] GatherVcfsCloud; - [x] GenomicsDBImport; - [x] BwaMemIndexImageCreator; - [x] CompareDuplicatesSpark; - [x] ConvertHeaderlessHadoopBamShardToBam. 32 total. #### Those needing tags within the Picard repo:; - [x] CollectIndependentReplicateMetrics; - [x] CollectWgsMetricsWithNonZeroCoverage; - [x] UmiAwareMarkDuplicatesWithMateCigar; - [x] CrosscheckReadGroupFingerprints; - [x] SetNmAndUqTags; - [x] SimpleMarkDuplicatesWithMateCigar. Also added `@BetaFeature` tag and `(Experimental)` label in summary to first three, given they are currently categorized under ; ```; Alpha Tools: | Tools that are currently UNSUPPORTED until further testing and maturation.; -- | --; ```. ---; ### Tools missing from `--list` that show up in gatkDocs ; - [x] CallCopyRatioSegments `added bet",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3847:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3847,1,['test'],['test']
Testability,"In GATK3, when merging variants, the IDs of all the source VCFs were retained. This code path seems like it intended that, since the variantSources set is generated, but it doesnt get used for anything. This PR will use that set to set the source of the resulting merged VC. Note: i dont think I can kick off the test suite. It is possible this change would result in tests breaking, and those would need updates.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8750:313,test,test,313,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8750,2,['test'],"['test', 'tests']"
Testability,"In `IntervalListMetadata`, the contig list is sorted lexicographically:. ```self.contig_list = sorted(list(self.contig_set))```. This causes, e.g., the output of DetermineGermlineContigPloidy to be sorted lexicographically. Let's remove this and assume that incoming data from temporary files is always sorted according to the sequence dictionary. We should double check that this didn't affect any previous results in any unexpected way. We should also add some basic checks on the Java testing side. One easy modification would be to use contigs 1, 2, and 10 (along with X and Y) for the PostprocessGermlineCNVCalls test. The expected VCF should be in the correct order.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4374:488,test,testing,488,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4374,2,['test'],"['test', 'testing']"
Testability,"In any case, fixing the bad behavior in test code should be done soon. See #6107, which prompted this discussion, for an example.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6112#issuecomment-524428951:40,test,test,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6112#issuecomment-524428951,1,['test'],['test']
Testability,"In debugging Java 17 issues with the docker tests, I noticed some lines in the Docker file were missing the append i/o redirection that I assume was intended to be included. Not sure what impact this will have so running the build with these changes as a test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7997:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7997,2,['test'],"['test', 'tests']"
Testability,"In fact, setting the deploy-mode works with manual jobs as we get logs in our Hadoop monitor ( the tool to monitor the jobs on the spark cluster ) and directly on our console if deploy-mode is not set / set to client. Both `--deploy-mode` and `--conf 'spark.submit.deployMode=cluster'`. But with GATK, logs appear directly on my console and not in the Hadoop monitor even if we set with `--conf 'spark.submit.deployMode=cluster`. The other methods `--deploy-mode` and `-- --deploy-mode` having the said problems.; About the `-- --deploy-mode` and the JNI linkage error, I'm currently checking this.; All our Spark nodes have access to the mapr libraries from `/opt/mapr/...`.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350676916:66,log,logs,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3933#issuecomment-350676916,2,['log'],['logs']
Testability,"In good news, the spark mailing list announced that spark master builds and runs all tests on 11 now. So it looks like support for java 11 coming in spark 3.0. When that is is going to be release isn't clear though. We should start moving to support java 11 in advance of that so we're ready when it releases.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6053#issuecomment-525337068:85,test,tests,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6053#issuecomment-525337068,2,['test'],['tests']
Testability,"In helping @bhanugandham figure out why a particular site was failing it became apparent that merging dangling head code was failing to recover deletions in the dangling head. Furthermore there is some code in the dangling end recovery code that asserts a certain high standard of matching (usually 1 but sometimes dangling branch length/kmersize) `getMaxMismatches(final int lengthOfDanglingBranch)`. Both of these facts seem likely to cause dangling heads to be dropped despite their being still potentially informative, particularly the indel code. . I have added the ability for the index recovery code to account for the cigar string when merging dangling ends. Addtionally rather than counting mismatches to reject the branch it simply requires a minimum matching end (which can be changed, I suspect this is where the lionshare of the differences come from). Unfortunately changing the tests is non-trivial (as this happened to change the integration test results for HaplotypeCaller at a few sites) so I wanted to get this branch up to solicit advice a to whether it is worth pursuing this fix. @davidbenjamin @ldgauthier @droazen",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6113:246,assert,asserts,246,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6113,3,"['assert', 'test']","['asserts', 'test', 'tests']"
Testability,"In implementing these tests, I have run into https://github.com/samtools/htsjdk/issues/1044, which is waiting on to unblock https://github.com/samtools/htsjdk/pull/1048.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3609#issuecomment-349667094:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3609#issuecomment-349667094,1,['test'],['tests']
Testability,In light of #7754 the tests run in about an 1:15 minutes for the slowest variant calling docker tests. This can be improved by farther sub-dividing the tests and eliminating some of the redundancy between docker and non-docker tests so the test suite runs faster.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7798:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7798,5,['test'],"['test', 'tests']"
Testability,"In light of the discovery of the (relatively minor) numerical differences caused by changes to non-CNV code outlined in #7649, and because we are still awaiting coverage from pipeline-level/CARROT testing, I decided to go ahead and add these exact-match tests. This essentially freezes current ModelSegments behavior, which has been exactly stable since https://github.com/broadinstitute/gatk/pull/5814; that is, from sometime between 4.1.0.0/4.1.1.0 almost 3 years ago up to 4.2.4.1 today. Note that the original test files were generated from the test BAMs (e.g., src/test/resources/large/cnv_somatic_workflows_test_files/HCC1143-t1-chr20-downsampled.deduplicated.bam), since these BAMs have been used in the past to consistently generate test files for other tools in the ModelSegments and GermlineCNVCaller pipelines. However, these original test files contained insufficient data to activate the changes found in #7649, even had exact-match tests been present. I thus took some old HCC1143T 100% WES data that I had and snippeted it to chr20. I've confirmed that the added tests with these files would've picked up the regression of log10factorial seen in #7649 for all relevant modes (i.e., all those that take in the allele counts as input, since that regression only affected allele-fraction MCMC sampling). Tests take maybe an additional minute to run and there was about ~12MB of additional large resources checked in, but I didn't try too hard to bring either down. I also added some early-fail parameter validation to check that the minimum total allele count in the case sample is zero in matched-normal mode. There are actually some open questions in my mind as to what the best behavior should be here, but given some of the discussion in #6499 and possible plans for using joint segmentation to do filtering of germline events, I think it's best to enforce that all het sites coming out of the genotyping step are the same across all samples. Recall that we added this parameter in #55",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7652:197,test,testing,197,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7652,8,['test'],"['test', 'testing', 'tests']"
Testability,In light of the recent #7357 and #7358 it has become clear that we are blind changes that cause the logging outputs for GATK to become unusable because we are spitting endless warnings to stdout. I think we should change our integration tests to capture the log output for each of our tests and assert that none of them balloon beyond some reasonable threshold that would capture these problems (perhaps a megabyte but it would take a little bit of sleuthing to be sure). . I would think the best place would be to add a capture into `CommandLineProgramTest.runCommandLine()` that instead of using the current behavior `injectDefaultVerbosity()` we instead leave the logging output as the default and capture it somewhere explicit where we can make assertions about the size of the outputs. Possibly we could create a dummy logging level that just saves and counts the outputs so we can make assertions about the logs. Ideally this should apply to every tool simultaneously since it would be too patchwork to simply add logging output tests for enough of the tools to protect us manually.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7368:100,log,logging,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7368,12,"['assert', 'log', 'test']","['assert', 'assertions', 'log', 'logging', 'logs', 'tests']"
Testability,"In my test, if use the hg19 ref it will cause oom and if use the hg18 ref it will have stackoverflow(related to this [issue](https://github.com/broadinstitute/gatk/issues/5869))",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5950#issuecomment-501192205:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5950#issuecomment-501192205,1,['test'],['test']
Testability,"In order to better match changes between gatk and picard, the gatk has been set to rely on the picard version of the OpticalDuplicateFinder. Unfortunately this means we have to rely on the Picard Log interface which we don't have a good reason to get involved in the gatk. Furthermore, the logger isn't serializable so it might cause problems with spark.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4759:196,Log,Log,196,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4759,2,"['Log', 'log']","['Log', 'logger']"
Testability,"In order to test this, I created a small (10 sample) test set using all of us data. That is [here](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test); Here are successful runs of the following wdls:; [GvsAssignIds](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/5e56ae8b-4f5f-46cf-bbe9-24aab2a19b3a); [GvsImportGenomes](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/5c230d7d-79ca-492c-9ee0-b85dc2c709d5); [GvsCreateAltAllele](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/7006e654-eddb-4a15-a11f-2cf00a69c44d); [GvsCreateFilterSet](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/b0efe339-46c2-4037-bf94-fcd9d23483f3); [GvsPrepareRangesCallSet](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/14f0d6db-2865-4f1e-8d85-bf5b1eafd06b); [GvsExtractCallSet](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/ff484de7-f6e4-488f-b4b9-ce037de514e2); [GvsCreateVAT](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/aa935629-e6d4-4973-9068-3862c22c703a); [GvsValidateVAT](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/1f450821-d682-4f98-9f6c-37350e2b8b26); [GvsUnified](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/c4911c52-7b1b-4d0f-bc77-a187d497f629); [GvsJointVariantCalling](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/c487b70a-f0fe-471c-b43c-08c19bde0bf9); [GvsRescatterCallsetInterval](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/AoU_DRC_WGS_GVS_NoSA_WDL_Test/job_history/9fb9bb33-6c74-436e-83f5-76ab2e4885a0) - Failed but got beyond the point where it would need the ser",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7985#issuecomment-1211284481:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7985#issuecomment-1211284481,2,['test'],['test']
Testability,"In other region, -stand-call-conf 0/10 works well in my test.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4576#issuecomment-376201246:56,test,test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4576#issuecomment-376201246,1,['test'],['test']
Testability,"In particular add output GATKTool.getDefaultToolVCFHeaderLines to the VCF header, and rewrite the integration test for GenerateVCFFromPosteriors so that it validates the equivalence of variant context records, instead of file equivalency",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4267:110,test,test,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4267,1,['test'],['test']
Testability,"In particular, we should not package the full clone of our repo in the docker image (and instead mount it externally during tests).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3929#issuecomment-349749635:124,test,tests,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3929#issuecomment-349749635,1,['test'],['tests']
Testability,"In previous benchmarking I've always seen an effect at the exome scale, so trying with a larger dataset is unlikely to reveal any significant difference. Here is the stage breakdown. Spark stages (master):. ![MarkDuplicatesSparkMaster](https://user-images.githubusercontent.com/85085/63683680-e8027900-c7f2-11e9-9a88-5682c91c161a.png). Spark stages (this branch):. ![MarkDuplicatesSparkSql](https://user-images.githubusercontent.com/85085/63683694-f2247780-c7f2-11e9-963e-f28dd7114ee2.png). The timings are essentially the same. The dataset code is run in stage 7, which only takes 11-12 seconds in either case - a small part of the overall runtime of Mark Duplicates Spark (>7 minutes). The runtime is dominated by sorting which I haven't managed to do any faster with Spark SQL.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6103#issuecomment-524808084:12,benchmark,benchmarking,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6103#issuecomment-524808084,1,['benchmark'],['benchmarking']
Testability,"In some cases it may be useful to know what reads are giving rise to which specific variants. I have run into several cases while debugging some strange results where this would be useful to know, and also there is a QC workflow we would like to implement where this would be essential information. This is unlikely to be generally useful, however. This PR adds a flag, `--write-qnames`, which will, for each variant, write the list of qnames in the bam that give rise to that variant as a comma separated list in the final column. This PR also makes synonymous variants (with no protein-level consequence) write an empty value rather than nothing, in order to keep column order. This seems to work with SE reads, but hasn't been tested much with PE reads. This should also probably not parse read names by default, but only if write-qnames is set.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8656:730,test,tested,730,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8656,1,['test'],['tested']
Testability,"In some preliminary testing I've done it looks like using native Hadoop libraries can speed up tools running in Spark local mode. In private Spark tools under development (which travers a WGS BAM and then performing several shuffles) I have seen speedups of up to 40% (~ 46 minutes -> 26 minutes). An initial test of `MarkDuplicatesSpark` using a 30GB bam file gave me a 9% speedup (logs are below). It might be good to investigate making this easier for users (I downloaded Hadoop and built it from source, and then set gatk's java opts to load the native library). Two options might be: 1) distribute native libraries for supported architectures with gatk or 2) make sure gatk docker images include the native libraries and are set to use them. Logs for `MarkDuplicatesSpark` without and with native libraries, running on a Broad login server:. Without:. ```; $ ${GATK_DIR}/gatk MarkDuplicatesSpark -I CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam -O CEUTrio.HiSeq.WEx37; .NA12892.readnamesort.dupmarked.bam -- --spark-runner LOCAL --spark-master local[8]; Using GATK wrapper script ${GATK_DIR}/gatk/build/install/gatk/bin/gatk; Running:; ${GATK_DIR}/gatk/build/install/gatk/bin/gatk MarkDuplicatesSpark -I CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam -O CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.dupmarked.bam --spark; -master local[8]; 14:40:21.800 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 14:40:21.889 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:${GATK_DIR}/gatk/build/install/gatk/lib/gkl-0.8.5.jar!/com/intel/gkl/native/libgkl_compression.so; 14:40:21.989 INFO MarkDuplicatesSpark - ------------------------------------------------------------; 14:40:21.990 INFO MarkDuplicatesSpark - The Genome Analysis Toolkit (GATK) v4.0.4.0-7-g46a8661-SNAPSHOT; 14:40:21.990 INFO MarkDuplicatesSpark - For support and documentatio",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4746:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4746,5,"['Log', 'log', 'test']","['Logs', 'login', 'logs', 'test', 'testing']"
Testability,"In src/test/java/org/broadinstitute/hellbender/engine/GenomicsDBIntegrationTest.java, line 33, the system is checking for the dynamic library at ""/genomicsdb/libtiledbgenomicsdb.so"". I think this should be moved to ""/libtiledbgenomicsdb.so"" since the library lives at the root of the genomicsdb jar (in an older version it lived at ""/genomicsdb/libtiledbgenomicsdb.so"".",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-294218613:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-294218613,1,['test'],['test']
Testability,"In terms of the two tools, I don't think it's necessary at this point to make an inheritance structure. `CallVariantsFromAlignedContigsSAMSpark` is more of a one-off for dealing with de novo assembly files and I'm not sure if it will be supported long term. However, I did extract a `callVariantsFromAlignmentRegions` method in `CallVariantsFromAlignedContigsSpark` that `CallVariantsFromAlignedContigsSAMSpark` can use, which reduces code duplication a lot. There's not much left in `CallVariantsFromAlignedContigsSAMSpark` except for the logic to convert GATKReads into AlignmentRegions, which seems appropriate.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2079#issuecomment-240514475:540,log,logic,540,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2079#issuecomment-240514475,1,['log'],['logic']
Testability,"In the HaplotypeCaller test, about 80% of the Smith-Waterman calls result in a substring match to the reference without any indels. Add a substring search to SWPairwiseAlignment and avoid running the full Smith-Waterman for these cases.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1655:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1655,1,['test'],['test']
Testability,"In the branch `dr_intel_deflater_bug_repro`, running `./gradlew clean test -Dtest.single=GatherVcfsIntegrationTest` will trigger the following test failure:. ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.tools.GatherVcfsIntegrationTest.testBlockGather[14](/Users/droazen/src/hellbender/src/test/resources/large/gvcfs/combined.gatk3.7_30_ga4f720357.expected.vcf, 8536) FAILED; java.lang.AssertionError: different sizes 16940 vs 17070; at org.broadinstitute.hellbender.utils.test.VariantContextTestUtils.assertEqualVariants(VariantContextTestUtils.java:173); at org.broadinstitute.hellbender.tools.GatherVcfsIntegrationTest.testBlockGather(GatherVcfsIntegrationTest.java:103); Results: FAILURE (15 tests, 14 successes, 1 failures, 0 skipped); ```. The tool writes a vcf that, when read back in by GATK, appears to have fewer records than it should. The same test does NOT fail if you do ANY of the following:. * Edit `GatherVcfsIntegrationTest.testBlockGather()` to turn on the JDK deflater by changing `.addBooleanArgument(""use_jdk_deflater"", false);` to `.addBooleanArgument(""use_jdk_deflater"", true);`. * Keep the Intel deflater on, but edit `build.gradle` to change `samjdk.compression_level` to 1 or 2. (You'll also need to change the `Assert.assertEquals(System.getProperty(""samjdk.compression_level""), ""5"");` line in `GatherVcfsIntegrationTest.testBlockGather()` accordingly). * Edit the `getVcfsToShard` `DataProvider` in `GatherVcfsIntegrationTest` to change the failing `{LARGE_VCF, 8536}` test case to `{LARGE_VCF, 8535}`. This cuts the number of files that the vcf gets split into in half, and the test passes. * Comment out all but the last test case in the `getVcfsToShard` `DataProvider` in `GatherVcfsIntegrationTest`. This indicates that there is something stateful going on, since the test case does not fail if run in isolation. One additional bit of information: the test fails with the Intel deflater and compression levels 5 and 9, but with compression level 9 GA",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3117:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3117,12,"['Assert', 'assert', 'test']","['AssertionError', 'assertEqualVariants', 'test', 'testBlockGather', 'tests']"
Testability,"In the course of investigating https://github.com/broadinstitute/gsa-unstable/issues/1409 a few things came up that I want to document for when it's time to test the new model:; - Throw away the spanning deletions alleles! They shouldn't affect the QUAL anymore since we won't be using the independent alleles approximation, but I don't want them mucking with the site type and choice of prior (SNP vs INDEL); - For the purposes of QD for VQSR, we should be using AS_QD very shortly, in which case the choice of prior for mixed sites will be clear because we're evaluating per-allele; - For the purposes of QUAL for emission, at mixed sites I'm in favor of continuing to apply the SNP prior in accordance with the doctrine of maximal sensitivity until VQSR",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1697#issuecomment-230464015:157,test,test,157,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1697#issuecomment-230464015,1,['test'],['test']
Testability,"In the course of tinkering with the GATK tutorial, I discovered that FilterVariantTranches errors out if it doesn't find any indels. The new logic isn't bulletproof (e.g. it will still run if it has SNP input and indel training), but it solves the SNP-only (and indel-only) case.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6411:141,log,logic,141,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6411,1,['log'],['logic']
Testability,In the discussion in this branch https://github.com/broadinstitute/gatk/pull/6351#pullrequestreview-1430841832 we were tripped up by the fact that the Carrot tests were showing a slight (between 5 and 7% on the aggregated `$ time` command output across 50 shards) runtime regression in the current version of HaplotypeCaller compared with a misconfigured older version of the tool. Specifically the faster older version was broadinstitute/gatk-nightly:2022-03-04-4.2.5.0-9-gb097f75c5-NIGHTLY-SNAPSHOT which was before the Java 17 migration (which is a high likelihood culprit form the past year). . Somebody should spend a few hours with a profiler to make sure there isn't some obvious culprit. . Here is the command that Carrot was running:; ```HaplotypeCaller \; -R /cromwell_root/dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta \; -I gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/chm1_chm13_hiseqx_sm_hf3mo.bam \; -L /cromwell_root/dsde-methods-carrot-prod-cromwell/VariantCallingCarrotOrchestrated/9886a710-334a-41eb-a495-6968d322730a/call-CHMSampleHeadToHead/VariantCallingCarrot/63594353-145d-4c4a-a713-352ad41ff3e6/call-ScatterIntervalList/cacheCopy/glob-cb4648beeaff920acb03de7603c06f98/10scattered.interval_list \; -O CHM113.g.vcf.gz \; -contamination 0.0 \; -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation \; \; \; \; -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90 \; -ERC GVCF \; ```; And a shard where a significant slowdown was observed spanned the region `chr3:55313816` -> `chr3:113699078` which should hopefully provide a good starting point for anybody investigating this.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8327:158,test,tests,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8327,1,['test'],['tests']
Testability,"In the interest of getting this merged, I've addressed the remaining blocking issue via documentation and naming: tool is now named `ConvertHeaderlessHadoopBamShardToBam`, and the docs make it clear what kinds of Hadoop bam shards it should be used with, and which it shouldn't. Will merge once tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1278#issuecomment-221101168:295,test,tests,295,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1278#issuecomment-221101168,1,['test'],['tests']
Testability,"In the latest master, running for example `java -jar build/libs/gatk.jar FixVcfHead` returns:. ```; USAGE: <program name> [-h]. Available Programs:; --------------------------------------------------------------------------------------; Base Calling: Tools that process sequencing machine data, e.g. Illumina base calls, and detect sequencing level attributes, e.g. adapters; CheckIlluminaDirectory (Picard) Asserts the validity for specified Illumina basecalling data.; CollectIlluminaBasecallingMetrics (Picard) Collects Illumina Basecalling metrics for a sequencing run. ...skipped for brevity... VcfFormatConverter (Picard) Converts VCF to BCF or BCF to VCF.; VcfToIntervalList (Picard) Converts a VCF or BCF file to a Picard Interval List. --------------------------------------------------------------------------------------. Exception in thread ""main"" org.broadinstitute.hellbender.exceptions.UserException: 'FixVcfHead' is not a valid command.; Did you mean this?; FixVcfHeader; 	at org.broadinstitute.hellbender.Main.extractCommandLineProgram(Main.java:341); 	at org.broadinstitute.hellbender.Main.setupConfigAndExtractProgram(Main.java:172); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:192); 	at org.broadinstitute.hellbender.Main.main(Main.java:275); ```. I expect something without the stack trace and the scary ""Exception"" message. For example:. ```; USAGE: <program name> [-h]. Available Programs:; --------------------------------------------------------------------------------------; Base Calling: Tools that process sequencing machine data, e.g. Illumina base calls, and detect sequencing level attributes, e.g. adapters; CheckIlluminaDirectory (Picard) Asserts the validity for specified Illumina basecalling data.; CollectIlluminaBasecallingMetrics (Picard) Collects Illumina Basecalling metrics for a sequencing run. ...skipped for brevity... VcfFormatConverter (Picard) Converts VCF to BCF or BCF to VCF.; VcfToIntervalList (Picard) Converts a VCF or BCF file to ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4256:408,Assert,Asserts,408,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4256,1,['Assert'],['Asserts']
Testability,"In the presence of insertions or deletions in the cigar, hardClipByReadCoordinates gets confused regarding the amount of bases that were clipped, thereby creating an incorrect cigar. The following snippet, placed in ReadClipperUnitText.java can serve as a test. ```java; @DataProvider; Object[][] cigarsToClipData(){; return new Object[][]{; new Object[]{""20M"", 6},; new Object[]{""3M2I20M"", 4},; new Object[]{""10I20M"", 0},; new Object[]{""3M2D20M"", 6},; };; }. public void testHardClipSoftClippedBasesClipsTheCorrectAmount(final String cigarString, final int alignmentOffset) {; final int start = 100;; final GATKRead originalRead = ArtificialReadUtils.createArtificialRead(TextCigarCodec.decode(cigarString));; BaseUtils.fillWithRandomBases(originalRead.getBasesNoCopy(),0,originalRead.getLength());; originalRead.setPosition(originalRead.getContig(), start);. final GATKRead clippedRead = ReadClipper.hardClipByReadCoordinates(originalRead, 0, 5);; Assert.assertEquals(; clippedRead.getCigar().getReadLength() + AlignmentUtils.getNumHardClippedBases(clippedRead),; originalRead.getCigar().getReadLength(), "" Clipped cigar: "" + clippedRead.getCigar());; Assert.assertEquals(clippedRead.getStart(),start + alignmentOffset, "" Clipped cigar: "" + clippedRead.getCigar());; Assert.assertEquals(clippedRead.getBasesNoCopy(),Arrays.copyOfRange(originalRead.getBases(),5,originalRead.getBasesNoCopy().length));; Assert.assertEquals(clippedRead.getBaseQualitiesNoCopy(),Arrays.copyOfRange(originalRead.getBases(),5,originalRead.getBaseQualitiesNoCopy().length));; }. ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6139:256,test,test,256,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6139,10,"['Assert', 'assert', 'test']","['Assert', 'assertEquals', 'test', 'testHardClipSoftClippedBasesClipsTheCorrectAmount']"
Testability,"In the process of designing correctness tests for `MarkDuplicatesSpark`, @davidadamsphd has come up with a potential set of optimizations to `MarkDuplicatesSpark` that have the potential to improve performance by an order of magnitude. The task here is to meet with @davidadamsphd, get access to and understand his optimizations, and port them to the main `MarkDuplicatesSpark` tool (along with any other optimizations you feel are appropriate).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1100:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1100,1,['test'],['tests']
Testability,In the test suite for `GenotypeGVCFs` and `CombineGVCFs` there is some nearly duplicated code related to comparing VCF files intelligently when there exists an expectation that certain fields in the file will vary between runs. Similar functionality exists in for sam file comparison with `org.broadinstitute.hellbender.utils.test.SamAssertionUtils`. Factoring the VCF comparison tests out into a `VCFAssertionUtils` class could help alleviate this code duplication problem.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3811:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3811,3,['test'],"['test', 'tests']"
Testability,"In theory I like the idea of having the intergration test results from different tools chained together, but it's usually more trouble than it's worth. Sorry.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-445827582:53,test,test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318#issuecomment-445827582,1,['test'],['test']
Testability,"In working on #8296 we have discovered that in the `MafOutputRendererConstants.java` there are myriad constants that hard code aliases with the pattern ""Gencode_34_hugoSymbol"". This can lead to bad behavior if a non-bundled Gencode version is used in Funcotator, specifically it can cause the MAF file to be missing most of its hard-coded fields as they will be mis-identified by the output-renderer resulting in mostly empty outputs. We should rewrite the logic in the MAF code to be completely agnostic to Gencode versions used to generate the Funcotations to drop this hard-coding all-together.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8482:457,log,logic,457,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8482,1,['log'],['logic']
Testability,"In working with the SampleDBBuilder code I have noticed that there is an argument for validationStrictness which purports to assert that there is a >1:1 mach between the discovered samples in the pedigree file and those in the underlying variantDataSources according to the code on line 83. Unfortunately, as it stands there is no way to input `samplesFromDataSources` into the builder, so these assertions are skipped. There are tests for validation but these only apply to asserting that there are no name collisions between the samples added as pedigree files, which appears to be different.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3949:125,assert,assert,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3949,4,"['assert', 'test']","['assert', 'asserting', 'assertions', 'tests']"
Testability,"InbreedingCoeff uses likelihoods for its calculation _and_ uses GQ0s (regardless of call or no-call), which add equal likelihoods (to homRef and het or all three) because of the flat prior, which is out of HWE. So the more GQ0s there are, the more likely a variant ""looks"" like it's out of Hardy-Weinberg equilibrium. I would rather assign uninformative genotypes to be no-calls and ignore no-call genotypes in the InbreedingCoeff calculation. (ExcessHet has its own idiosyncrasies, which are different because it rounds to integer genotypes counts.). One place to enforce more consistent behavior is in GenotypeUtils.shouldBeCalled, which currently maintains the previous behavior of GT=./.;PL=[0,0,0] genotypes for reblocked GT=0/0;GQ=0 genotypes. This is going to involve overwriting a bunch of test data.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7481:798,test,test,798,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7481,1,['test'],['test']
Testability,"Included a test case generated using the buggy version of GenomicsDBImport in which the sample names declared in the file headers did not always match the samples provided to GenomicsDBImport via the sample name map file, and showed that the tool could repair the callset successfully.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3868:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3868,1,['test'],['test']
Testability,"Included is a JProfiler screenshot of where it is spending all of its time. As you can see below, it has not even run any of the ```LocusWalker.apply(...)``` code.; ```; lichtens@OncobuntuMk3:~/IdeaProjects/hellbender-protected$ java -jar build/libs/gatk-protected.jar Pileup -I ~/broad_oncotator_configs/hcc_purity/SM-74NEG.bam -O ~/broad_oncotator_configs/pileup.out -L /home/lichtens/broad_oncotator_configs/allchr.1kg.phase3.v5a.snp.maf10.biallelic.recode.fixed.prune5.trim1M.test.interval_list; 15:04:36.262 INFO IntelGKLUtils - Trying to load Intel GKL library from:; 	jar:file:/home/lichtens/IdeaProjects/hellbender-protected/build/libs/gatk-protected-all-0556d5b-SNAPSHOT-spark_standalone.jar!/com/intel/gkl/native/libIntelGKL.so; 15:04:36.344 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; [January 25, 2017 3:04:36 PM EST] org.broadinstitute.hellbender.tools.walkers.qc.Pileup --output /home/lichtens/broad_oncotator_configs/pileup.out --intervals /home/lichtens/broad_oncotator_configs/allchr.1kg.phase3.v5a.snp.maf10.biallelic.recode.fixed.prune5.trim1M.test.interval_list --input /home/lichtens/broad_oncotator_configs/hcc_purity/SM-74NEG.bam --showVerbose false --outputInsertLength false --maxDepthPerSample 0 --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --readValidationStringency SILENT --secondsBetweenProgressUpdates 10.0 --disableSequenceDictionaryValidation false --createOutputBamIndex true --createOutputBamMD5 false --createOutputVariantIndex true --createOutputVariantMD5 false --lenient false --addOutputSAMProgramRecord true --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false --disableAllReadFilters false; [January 25, 2017 3:04:36 PM EST] Executing as lichtens@OncobuntuMk3 on Linux 3.19.0-30-generic amd64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_51-b16; Version: Version:0556d5b-SNAPSHOT; 15:04:36.348 INFO Pileup - Defaults.BUFFER_SIZE : 131072; 15:04:36.348 INFO Pileup - Defaults.COMP",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2356:480,test,test,480,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2356,1,['test'],['test']
Testability,"Includes a test for the non-Spark version, and tests the two produce the same result. Fixes #5276.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5289:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5289,2,['test'],"['test', 'tests']"
Testability,"Includes latest Gencode and an implicit fix for #6564. Had to make some code changes for latest liftover Gencode data(v34 -> hg19). . The associated DS test release correctly annotates data on hg19 and hg38. Left to do:. - [x] Update data sources downloader.; - [x] Update data source version validation code. Code updates:; - Now both hg19 and hg38 have the contig names translated to `chr__`; - Added 'lncRNA' to GeneTranscriptType.; - Added ""TAGENE"" gene tag.; - Added the MANE_SELECT tag to FeatureTag.; - Added the STOP_CODON_READTHROUGH tag to FeatureTag.; - Updated the GTF versions that are parseable.; - Fixed a parsing error with new versions of gencode and the remap; positions (for liftover files).; - Added test for indexing new lifted over gencode GTF.; - Added Gencode_34 entries to MAF output map.; - Minor changes to FuncotatorIntegrationTest.java for code syntax.; - Pointed data source downloader at new data sources URL.; - Minor updates to workflows to point at new data sources. Script updates:; - Updated retrieval scripts for dbSNP and Gencode.; - Added required field to gencode config file generation.; - Now gencode retrieval script enforces double hash comments at; top of gencode GTF files. Bug Fixes:; Removing erroneous trailing tab in MAF file output. - Fixes #6693",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6660:152,test,test,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6660,2,['test'],['test']
Testability,Includes tests for both hg19 and hg38.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3410:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3410,1,['test'],['tests']
Testability,Includes:. * `ShardingIterator` to avoid too many query calls; * `ReadSliderWalker` with documentation on how to implement (edited: walker name is `SlidingWindowReadWalker` instead); * Argument collection interface for sharding arguments; * Example walker and argument collection; * Tests for example walker. Closes https://github.com/broadinstitute/gatk/issues/1198,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4682:283,Test,Tests,283,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4682,1,['Test'],['Tests']
Testability,Inconsistent behavior when running unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,1,['test'],['tests']
Testability,Increase verbosity of Travis logging for WDL tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4130:29,log,logging,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4130,2,"['log', 'test']","['logging', 'tests']"
Testability,IndexFeatureFile needs integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/235:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/235,1,['test'],['tests']
Testability,"Inflater; 20:11:35.531 INFO CombineGVCFs - GCS max retries/reopens: 20; 20:11:35.531 INFO CombineGVCFs - Requester pays: disabled; 20:11:35.531 INFO CombineGVCFs - Initializing engine; 20:11:35.957 INFO FeatureManager - Using codec VCFCodec to read file file:///fs/scratch/PHS0338/appz/elprep-v5.0.2/PA113.vcf.gz; 20:11:35.969 INFO CombineGVCFs - Shutting down engine; [June 13, 2021 8:11:35 PM GMT] org.broadinstitute.hellbender.tools.walkers.CombineGVCFs done. Elapsed time: 0.03 minutes.; Runtime.totalMemory()=1772093440; ***********************************************************************; A USER ERROR has occurred: An index is required but was not found for file /fs/scratch/PHS0338/appz/elprep-v5.0.2/PA113.vcf.gz. Support for unindexed block-compressed files has been temporarily disabled. Try running IndexFeatureFile on the input. ***********************************************************************. Set the system property GATK_STACKTRACE_ON_USER_EXCEPTION (--java-options '-DGATK_STACKTRACE_ON_USER_EXCEPTION=true') to print the stack trace.; Using GATK jar /gatk/gatk-package-4.2.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /gatk/gatk-package-4.2.0.0-local.jar CombineGVCFs -R /users/PHS0338/jpac1984/data/Autosome.fasta --variant PA113.vcf.gz --variant PA113corr.vcf.gz --variant PA112.vcf.gz --variant PA112corr.vcf.gz --variant IN33.vcf.gz --variant IN33corr.vcf.gz --variant AL82.vcf.gz -O test.vcf.gz. ------; The CombineGVCFs website - https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs - does not mention anything about this????. What did I miss or was not even mentioned and what should I do?; There is no reference about this ""https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs"" in the website, https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7311:4793,test,test,4793,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7311,1,['test'],['test']
Testability,"Initial Spark dataflow commit, basic skeleton with some tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/850:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/850,1,['test'],['tests']
Testability,Initial check-in to find test failures. . Adresses #8328,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8689:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8689,1,['test'],['test']
Testability,"Initial commit by Mark DP in 2009: . > simpleComplement function() in BaseUtils. Generic framework for clipp…; > …ing reads along with tests. Support for Q score based clipping, sequence-specific clipping (not1), and clipping of ranges of bases (cycles 1-5, 10-15 for example). Can write out clipped bases as Ns, quality scores as 0s, or in the future will support softclipping the bases themselves. https://github.com/broadinstitute/gsa-unstable/commit/d6385e0d884cbd80c34e16e848297c3694f85a5a",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/263#issuecomment-95101660:135,test,tests,135,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/263#issuecomment-95101660,1,['test'],['tests']
Testability,"Initial commit, command line, CountReads tool, tests, gradle build, trav...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/23:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/23,1,['test'],['tests']
Testability,"Initial port of native PairHMM AVX code from GATK3. (@akiezun #1492). Includes gradle code to build the shared library and package it in the GATK jar file. . Added a new unit test VectorPairHMMUnitTest, which can be integrated into PairHMMUnitTest later.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1504:175,test,test,175,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1504,1,['test'],['test']
Testability,"Initial signed url support exists as of https://github.com/broadinstitute/gatk/pull/6526 but there are some caveats that may prevent production use. * Some methods in the Path api weren't implemented yet, the noticeable exception is the method used when finding sister paths such as the .bai. This means that indexes must be manually specified or you'll hit a UnimplementedFeatureException. * There isn't retry logic so http failures will cause job failure.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6317#issuecomment-801427075:411,log,logic,411,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6317#issuecomment-801427075,1,['log'],['logic']
Testability,Initial support for spanning deletions and refactoring for testability,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7857:59,test,testability,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7857,1,['test'],['testability']
Testability,"InputStream.processNextBlock(BlockCompressedInputStream.java:536); at htsjdk.samtools.util.BlockCompressedInputStream.nextBlock(BlockCompressedInputStream.java:479); at htsjdk.samtools.util.BlockCompressedInputStream.readBlock(BlockCompressedInputStream.java:469); at htsjdk.samtools.util.BlockCompressedInputStream.available(BlockCompressedInputStream.java:207); at htsjdk.samtools.util.BlockCompressedInputStream.read(BlockCompressedInputStream.java:252); at htsjdk.tribble.readers.TabixReader.readLine(TabixReader.java:215); at htsjdk.tribble.readers.TabixReader$IteratorImpl.next(TabixReader.java:434); at htsjdk.tribble.readers.TabixIteratorLineReader.readLine(TabixIteratorLineReader.java:46); ... 29 more; Using GATK jar /gatk/gatk-package-4.5.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /gatk/gatk-package-4.5.0.0-local.jar CombineGVCFs -R ./test/test.fna -V ./gvcf_all.list -L NC_038255.2 -O ./NC_038255.2.merged.g.vcf.gz; total 2.3G; '""-rw-rw-rw- 1 root root  3.6K Dec 13 23:32 GATKConfig.EXAMPLE.properties""; drwxr-xr-x 2 root root  4.0K Mar 13 06:26 GCF_000004515.6_Glycine_max_v4.0; '""-rw-r--r-- 1 root root  1.6G Mar 13 06:47 NC_038255.2.merged.g.vcf.gz""; '""-rw-r--r-- 1 root root   24K Mar 13 06:47 NC_038255.2.merged.g.vcf.gz.tbi""; '""-rw-rw-rw- 1 root root   40K Dec 13 23:32 README.md""; '""-rwxrwxrwx 1 root root   21K Dec 13 23:32 gatk""; '""-rw-rw-rw- 1 root root 1016K Dec 13 23:32 gatk-completion.sh""; '""-rw-rw-rw- 1 root root  422M Dec 13 23:32 gatk-package-4.5.0.0-local.jar""; '""-rw-rw-rw- 1 root root  320M Dec 13 23:32 gatk-package-4.5.0.0-spark.jar""; lrwxrwxrwx 1 root root    36 Dec 13 23:33 gatk-spark.jar -> /gatk/gatk-package-4.5.0.0-spark.jar; lrwxrwxrwx 1 root root    36 Dec 13 23:33 gatk.jar -> /gatk/gatk-package-4.5.0.0-local.jar; '""-rw-rw-rw- 1 root root  117K Dec 13 23:32 gatkPythonPackageArchive.zip""; '""-rw-rw-rw- 1 r",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8735:26857,test,test,26857,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8735,2,['test'],['test']
Testability,Insofar as its matching all of the tests that currently exist for allele specific annotations it appears to be working this time around (with a few changes to the vcf test suite to handle the the precision issues). I'm thinking this might be good. I will take a closer look before I merge it.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355856775:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355856775,2,['test'],"['test', 'tests']"
Testability,"Instead of a String previously. Tested like this:. ```bash; $ ./gatk SelectVariants \; --variant src/test/resources/large/VQSR/dbsnp_132_b37.leftAligned.20.1M-10M.vcf \; --select-random-fraction 0.01 \; --output gs://$BUCKET/variants.vcf; ```. and. ```; $ ./gatk SelectVariants \; --variant src/test/resources/large/VQSR/dbsnp_132_b37.leftAligned.20.1M-10M.vcf \; --select-random-fraction 0.01 \; --output /tmp/variants.vcf; ```. If this works, the plan is to change all tools to use this format, so they can all write VCF output to Google Cloud Storage.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5870:32,Test,Tested,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5870,3,"['Test', 'test']","['Tested', 'test']"
Testability,Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/a795190c-dcc2-40a7-bfcc-84fa6a4ea0dc); Two failed on ValidateVDS (or rather something upstream). I *don't* think this is an effect of this PR.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8807:12,Test,Test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8807,1,['Test'],['Test']
Testability,"Integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/8eadce08-04fa-447f-bbbc-934f52e79030), still working on testing this by hand",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8923:151,test,testing,151,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8923,1,['test'],['testing']
Testability,Integration run with [all the tests here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/d6892c6d-0d1e-415b-819b-24a30ed08f0f),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8687:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8687,1,['test'],['tests']
Testability,"Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/4de33a53-be6f-43b2-96db-7e8a0fb398f8); Example run of GvsExtractAvroFilesForHail using an Exome data set that has PGT, PID, and PS defined is [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Exome%20Beta%20Test%20ggrant/job_history/43a87886-60be-4f60-a2d3-3f4a97ceea5b).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8536:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8536,1,['test'],['test']
Testability,Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/80b6ed98-3b79-40f3-b55b-524b6f63f1e1). Failed one of the four (in Hail VDS tieout) - with a weird python3 error. 99.9994% sure not related to this PR.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8393#issuecomment-1613622838:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8393#issuecomment-1613622838,1,['test'],['test']
Testability,Integration test for CollectTargetedPcrMetrics,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/872:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/872,1,['test'],['test']
Testability,Integration test successful https://app.terra.bio/#workspaces/broad-firecloud-dsde/VS-415%20GVS%20Quickstart%20Default%20Extract%20Scatter/job_history/73ac71db-0488-46be-a8e8-7f00e795edec,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7888:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7888,1,['test'],['test']
Testability,Integration testing tables are not forever [VS-1049],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8563:12,test,testing,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8563,1,['test'],['testing']
Testability,"Integration tests are not passing as the gold files have not been updated. Understanding what ""correct"" looks like for spanning deletions beyond just unit tests is very complex, and fraught with bad data (ie multiple overlapping reference blocks, etc). . Putting this work on the shelf until the value is worth the effort",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7945:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7945,2,['test'],['tests']
Testability,Integration tests have a million different VC/Genotype setup methods,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5709:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5709,1,['test'],['tests']
Testability,Integration tests look okay (there's a Python one that says to skip if it's in docker):; - org.broadinstitute.hellbender.utils.python.StreamingPythonExecutorIntegrationTest#testRequirePythonEnvironment; Unit tests:; - org.broadinstitute.hellbender.utils.pairhmm.VectorPairHMMUnitTest#testLikelihoodsFromHaplotypes; - org.broadinstitute.hellbender.utils.io.IOUtilsUnitTest#testUnsuccessfulCanReadFileCheck (intended to be skipped); - fixed ; No variant calling tests ignored; No python tests ignored; No R tests ignored. The PairHMM one returns:; ```; 03:44:48.410 WARN NativeLibraryLoader - Unable to load libgkl_pairhmm_fpga.so from native/libgkl_pairhmm_fpga.so (/tmp/libgkl_pairhmm_fpga7585161099923450811.so: libgkl_pairhmm_shacc.so: cannot open shared object file: No such file or directory); ```; I don't know if that's expected or not -- maybe yes because it's looking for an FPGA?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5339#issuecomment-592086345:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5339#issuecomment-592086345,8,['test'],"['testLikelihoodsFromHaplotypes', 'testRequirePythonEnvironment', 'testUnsuccessfulCanReadFileCheck', 'tests']"
Testability,Integration tests: add a way for intelligent comparison of files of different formats,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/190:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/190,1,['test'],['tests']
Testability,IntegrationTestSpec.executeTest(IntegrationTestSpec.java:86); at org.broadinstitute.hellbender.tools.dataflow.pipelines.BaseRecalibratorDataflowIntegrationTest.testBQSRBucket(BaseRecalibratorDataflowIntegrationTest.java:176); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorI,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:1616,Test,TestRunner,1616,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,1,['Test'],['TestRunner']
Testability,IntegrationTestSpec.java:86); at org.broadinstitute.hellbender.tools.dataflow.pipelines.BaseRecalibratorDataflowIntegrationTest.testBQSRBucket(BaseRecalibratorDataflowIntegrationTest.java:176); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.Dele,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:1645,test,testng,1645,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,1,['test'],['testng']
Testability,Intel Conda environment needs a continuous integration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5255:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5255,1,['test'],['test']
Testability,"Intellij pointed out to me that these two tests were identical, but they sound like they're testing different things. Are we missing an important test case? . We should either fix whichever one isn't testing the thing it says it is, or delete one of them. ```; @Test; public void testStartInMiddleWithBubble() {; final TestAssembler assembler = new TestAssembler(3);; final String ref = ""CAAAATGGGG"";; final String read = ""AAATCGGG"";; assembler.addSequence(ref.getBytes(), true);; assembler.addSequence(read.getBytes(), false);; assertSingleBubble(assembler, ref, ""CAAAATCGGG"");; }. @Test; public void testNoGoodStarts() {; final TestAssembler assembler = new TestAssembler(3);; final String ref = ""CAAAATGGGG"";; final String read = ""AAATCGGG"";; assembler.addSequence(ref.getBytes(), true);; assembler.addSequence(read.getBytes(), false);; assertSingleBubble(assembler, ref, ""CAAAATCGGG"");; }; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1081:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1081,14,"['Test', 'assert', 'test']","['Test', 'TestAssembler', 'assertSingleBubble', 'test', 'testNoGoodStarts', 'testStartInMiddleWithBubble', 'testing', 'tests']"
Testability,Interesting theory -- @jonn-smith is testing it out.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2793#issuecomment-305891820:37,test,testing,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2793#issuecomment-305891820,1,['test'],['testing']
Testability,"Interesting, also seeing:. ```; org.broadinstitute.hellbender.exceptions.GATKException: unable to write bam: gs://hellbender/test/output/gatk4-spark/recalibrated.bam; 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.writeReads(GATKSparkTool.java:253); 	at org.broadinstitute.hellbender.tools.spark.ApplyBQSRSpark.runTool(ApplyBQSRSpark.java:49); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:349); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:112); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:170); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:189); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:96); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:103); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:116); 	at org.broadinstitute.hellbender.Main.main(Main.java:158); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:736); 	at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:185); 	at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:210); 	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:124); 	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala); Caused by: java.io.IOException: Existing mirrorFile and resourceId don't match isDirectory status! '/hadoop_gcs_connector_metadata_cache/hellbender/test/output/gatk4-",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2306#issuecomment-271419191:125,test,test,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2306#issuecomment-271419191,1,['test'],['test']
Testability,"Interesting, this breaks the tests... @jamesemery any thoughts? Reversing the additional comparator fixes them... It seems like we already have a potential test case for non-deterministic order.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6105#issuecomment-523211743:29,test,tests,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6105#issuecomment-523211743,2,['test'],"['test', 'tests']"
Testability,"Interesting, when I run locally I get:. ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.tools.funcotator.FuncotatorIntegrationTest > nonTrivialLargeDataValidationTest[3](/Users/louisb/Workspace/gatk/src/test/resources/org/broadinstitute/hellbender/tools/funcotator/validationTestData/regressionTestHg19Large.vcf, /Users/louisb/Workspace/gatk/src/test/resources/large/Homo_sapiens_assembly19.fasta.gz, hg19, /Users/louisb/Workspace/gatk/src/test/resources/large/funcotator/funcotator_dataSources/, /Users/louisb/Workspace/gatk/src/test/resources/org/broadinstitute/hellbender/tools/funcotator/validationTestData/regressionTestHg19Large_expected.vcf) FAILED; java.lang.UnsatisfiedLinkError: 'void org.sqlite.core.NativeDB._open_utf8(byte[], int)'; at org.sqlite.core.NativeDB._open_utf8(Native Method); at org.sqlite.core.NativeDB._open(NativeDB.java:71); at org.sqlite.core.DB.open(DB.java:174); at org.sqlite.core.CoreConnection.open(CoreConnection.java:220); at org.sqlite.core.CoreConnection.<init>(CoreConnection.java:76); at org.sqlite.jdbc3.JDBC3Connection.<init>(JDBC3Connection.java:25); at org.sqlite.jdbc4.JDBC4Connection.<init>(JDBC4Connection.java:24); at org.sqlite.SQLiteConnection.<init>(SQLiteConnection.java:45); at org.sqlite.JDBC.createConnection(JDBC.java:114); at org.sqlite.JDBC.connect(JDBC.java:88); at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677); at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:189); at org.broadinstitute.hellbender.tools.funcotator.dataSources.cosmic.CosmicFuncotationFactory.<init>(CosmicFuncotationFactory.java:161); at org.broadinstitute.hellbender.tools.funcotator.dataSources.DataSourceUtils.createCosmicDataSource(DataSourceUtils.java:469); at org.broadinstitute.hellbender.tools.funcotator.dataSources.DataSourceUtils.createDataSourceFuncotationFactoriesForDataSources(DataSourceUtils.java:289); at org.broadinstitute.hellbender.tools.funcotator.Funcotator.onTraversalStart(Funcotator.java",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-532715444:67,test,test,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-532715444,5,['test'],['test']
Testability,"Interestingly, just adding the constant to gcloud allows gatk to proceed. Well it crashed for me a bit later:. [Stage 0:==========================================> (431 + 2) / 553]17/03/30 00:30:53 WARN org.apache.spark.scheduler.TaskSetManager: Lost task 431.0 in stage 0.0 (TID 431, jp-test-cluster-w-0.c.genomics-pipelines.internal): com.google.cloud.storage.StorageException: 503 Service Unavailable; Service Unavailable; 	at com.google.cloud.storage.spi.v1.HttpStorageRpc.translate(HttpStorageRpc.java:186); ...; 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.readAttributes(CloudStorageFileSystemProvider.java:571); 	at java.nio.file.Files.readAttributes(Files.java:1737); 	at java.nio.file.Files.isRegularFile(Files.java:2229); 	at htsjdk.samtools.SamFiles.lookForIndex(SamFiles.java:72). That's the same 503 we've been protecting against in reads, now rearing its head on a readAttributes call.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2517#issuecomment-290465707:288,test,test-cluster-w-,288,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2517#issuecomment-290465707,1,['test'],['test-cluster-w-']
Testability,"Intermittent failure at https://travis-ci.com/github/broadinstitute/gatk/jobs/297047618. ```; [TileDB::FileSystem] Error: hdfs: Cannot list contents of dir gs://hellbender-test-logs/staging/703469fc-52fe-441d-b6e0-8092a114fe2c//chr20$17960187$17981445/genomicsdb_meta_dir; hdfsBuilderConnect(forceNewInstance=0, nn=gs://hellbender-test-logs, port=0, kerbTicketCachePath=(NULL), userName=(NULL)) error:; java.io.IOException: Must supply a value for configuration setting: fs.gs.project.id; 	at com.google.cloud.hadoop.util.ConfigurationUtil.getMandatoryConfig(ConfigurationUtil.java:39); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.createOptionsBuilderFromConfig(GoogleHadoopFileSystemBase.java:2185); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.configure(GoogleHadoopFileSystemBase.java:1832); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.initialize(GoogleHadoopFileSystemBase.java:1013); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.initialize(GoogleHadoopFileSystemBase.java:976); 	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2812); 	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:100); 	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2849); 	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2831); 	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:389); 	at org.apache.hadoop.fs.FileSystem$1.run(FileSystem.java:171); 	at org.apache.hadoop.fs.FileSystem$1.run(FileSystem.java:168); 	at java.base/java.security.AccessController.doPrivileged(Native Method); 	at java.base/javax.security.auth.Subject.doAs(Subject.java:423); 	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1836); 	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:168); 	at org.genomicsdb.reader.GenomicsDBQueryStream.jniGenomicsDBInit(Native Method); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:209); 	at o",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:172,test,test-logs,172,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,2,['test'],['test-logs']
Testability,Intermittent failure of AsynchronousStreamWriterServiceUnitTest.testAsyncWriteInBatches on Travis.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4024:64,test,testAsyncWriteInBatches,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4024,1,['test'],['testAsyncWriteInBatches']
Testability,Intermittent failure of GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:56,test,testWriteToAndQueryFromGCS,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,1,['test'],['testWriteToAndQueryFromGCS']
Testability,IntervalUtilsUnitTest.java:215); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55); 	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45); 	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115); 	at org.testng.internal.Parameters.handleParameters(Parameters.java:509); 	at org.testng.internal.Invoker.handleParameters(Invoker.java:1308); 	at org.testng.internal.Invoker.createParameters(Invoker.java:1036); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1126); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:73). 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5339#issuecomment-431874410:1552,test,testng,1552,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5339#issuecomment-431874410,32,"['Test', 'test']","['TestMethodWorker', 'TestNG', 'TestRunner', 'testng']"
Testability,Introduce more rationalized date model for the GATK logger output,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8756:52,log,logger,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8756,1,['log'],['logger']
Testability,"Introducing the IntervalLocusIterator which will traverse every locus in intervals, regardless of coverage. Minor changes. Removed imports. AlignmentContextLocusIterator first cut. Still needs unit tests. Putting in the walker. Still needs unit tests. Adding tests (and fixes) so that we can get AlignmentContexts. Adding tests (and fixes) so that we can get AlignmentContexts. Working tests. Beginning migration to a LocusWalker change rather than a separate walker. Merging the emit empty loci into locus walker. Still need warnings and validation of parameters. Next step is the LocusWalker testing. Simple test of the new LocusWalker when it emit empty loci. Addressing PR requests and added ShardedIntervalIterator to save RAM on big intervals. Addressing the rest of the PR comments. Rolling back to int from long. Addressing second round of PR comments. Wrapped LIBS in a factory so that we can encapsulate the retrieval of the best alignment context iterator. Spark empty loci traversal being supported. Rebasing based off of the other emit loci branch.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2731:198,test,tests,198,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2731,7,['test'],"['test', 'testing', 'tests']"
Testability,Invalidating filters didn't work and (guess what!) there were no tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6412:65,test,tests,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6412,1,['test'],['tests']
Testability,Inverted SoftClippedReadFilter to conform to filtering logic,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8888:55,log,logic,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8888,1,['log'],['logic']
Testability,Investigate dataflow debugging/error logging,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/276:37,log,logging,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/276,1,['log'],['logging']
Testability,Investigating test failures. There might be a better approach.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6769#issuecomment-681107365:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6769#issuecomment-681107365,1,['test'],['test']
Testability,InvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.re,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2827,test,testng,2827,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testng']
Testability,InvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.re,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253:2848,test,testng,2848,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253,1,['test'],['testng']
Testability,"Is it possible to add an integration test to this? Since the change did not fail any test, it seems that the integrationtest is missing",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8442#issuecomment-1803448694:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8442#issuecomment-1803448694,2,['test'],['test']
Testability,Is the output bucket otherwise empty? Does it work if you specify `--shardedOutput true`? (I'm not able to test this at the moment),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2793#issuecomment-305797716:107,test,test,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2793#issuecomment-305797716,1,['test'],['test']
Testability,Is there a way you can use/update the [GvsQuickstartIntegration.AssertCostIsTrackedAndExpected](https://github.com/broadinstitute/gatk/blob/ah_var_store/scripts/variantstore/wdl/GvsQuickstartIntegration.wdl#L196) task to check for these additional tracked costs?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7919#issuecomment-1170602208:64,Assert,AssertCostIsTrackedAndExpected,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7919#issuecomment-1170602208,1,['Assert'],['AssertCostIsTrackedAndExpected']
Testability,Is this actually fixed? Is there a version of GATK tools that incorporates this change so I can stop having the majority of my logs when run locally be filled up by this exact error message?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5447#issuecomment-472935667:127,log,logs,127,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5447#issuecomment-472935667,1,['log'],['logs']
Testability,Issue 2697 docker testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2726:18,test,testing,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2726,1,['test'],['testing']
Testability,"Issue from the forum regarding GenotypeGVCFs. User is getting an error with the bcf codec. They are running 4.1.7.0, so I recommended updating to 4.1.8.1 for now to see if it is fixed. This request was created from a contribution made by Brynjar Sigurðsson on August 04, 2020 09:49 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360072049511-Assertion-nps-nps-line-n-sample-n-failed](https://gatk.broadinstitute.org/hc/en-us/community/posts/360072049511-Assertion-nps-nps-line-n-sample-n-failed). \--. Hello,. I am running a variant calling using GenotypeGVCFs. The process first creates a GenomicsDB on 50Kbase regions from 150K GVCFs and then runs GenotypeGVCFs wrapped in GNU parallel (after splitting the region into as many threads as are available). Most regions complete without a problem, but some fail on GenotypeGVCFs with the assertion error. java: /home/vagrant/GenomicsDB/dependencies/htslib/vcf.c:4225: bcf\_update\_format: Assertion \`nps && nps\*line->n\_sample==n' failed. Some of the failing regions I have run with up to 1.5 TB memory (18 threads) but they still fail. **a) GATK version used**. **version 4.1.7.0**. **b) Exact GATK commands used**. java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Xmx1290240M -Xms1290240M -DGATK\_STACKTRACE\_ON\_USER\_EXCEPTION=true -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenomicsDBImport --genomicsdb-workspace-path /tmp/tmp.ceRdvv/GDB --intervals chr1:5149001-5201000 --tmp-dir /tmp/tmp.ceRdvv/GDB\_tmp --sample-name-map /tmp/tmp.ceRdvv/snmap --batch-size 100 --reader-threads 17. java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Djava.io.tmpdir=/tmp/tmp.ceRdvv -Xmx71680M -Xms71680M -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6742:364,Assert,Assertion-nps-nps-line-n-sample-n-failed,364,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6742,4,"['Assert', 'assert']","['Assertion', 'Assertion-nps-nps-line-n-sample-n-failed', 'assertion']"
Testability,"Issue while Building GATK4. sudo ./gradlew bundle; Starting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details. FAILURE: Build failed with an exception. * Where:; Build file '/home/rafay/gatk-4.0.2.0/build.gradle' line: 289. * What went wrong:; A problem occurred evaluating root project 'gatk'.; > Cannot find '.git' directory. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 24.349 secs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4475:485,log,log,485,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4475,1,['log'],['log']
Testability,"It also fails in Mac OS X 10.11.6 x86_64. I'm trying to update my project to the latest version of GATK and this dependency throws the following error with some of my gradle tests and while running an uber-jar (using `--use_jdk_deflater false`):. ```; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGILL (0x4) at pc=0x000000011d925644, pid=7088, tid=20739; #; # JRE version: Java(TM) SE Runtime Environment (8.0_60-b27) (build 1.8.0_60-b27); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.60-b23 mixed mode bsd-amd64 compressed oops); # Problematic frame:; # C [libgkl_compression8215566221555962564.dylib+0x1644] Java_com_intel_gkl_compression_IntelDeflater_resetNative+0x164; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /Users/daniel/workspaces/ReadTools/hs_err_pid7088.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #; ```. Find attached the log: [hs_err_pid7088.log.txt](https://github.com/broadinstitute/gatk/files/652421/hs_err_pid7088.log.txt). Should I open a different issue for this?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2302#issuecomment-267103689:174,test,tests,174,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2302#issuecomment-267103689,5,"['log', 'test']","['log', 'tests']"
Testability,It also looks like the method in question is O(n^2) when it could be O(n log n) if it sorted the interval list first...,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4994#issuecomment-403951324:73,log,log,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4994#issuecomment-403951324,1,['log'],['log']
Testability,"It appears for at least the last 6 days that our travis tests for the the CNV and M2 WDLs have been failing generating the following error messages:. `[2017-09-07 10:05:53,75] [warn] BackendPreparationActor_for_0b561ba3:CNVSomaticPanelWorkflow.PadTargets:-1:1 [0b561ba3]: Docker lookup failed:; java.lang.Exception: Docker image broadinstitute/gatk:80d8662d760f451045957080813d3963a1b68cc5 not found; 	at cromwell.engine.workflow.WorkflowDockerLookupActor.cromwell$engine$workflow$WorkflowDockerLookupActor$$handleLookupFailure(WorkflowDockerLookupActor.scala:193); 	at cromwell.engine.workflow.WorkflowDockerLookupActor$$anonfun$3.applyOrElse(WorkflowDockerLookupActor.scala:91); 	at cromwell.engine.workflow.WorkflowDockerLookupActor$$anonfun$3.applyOrElse(WorkflowDockerLookupActor.scala:75); 	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); 	at akka.actor.FSM$class.processEvent(FSM.scala:663); 	at cromwell.engine.workflow.WorkflowDockerLookupActor.akka$actor$LoggingFSM$$super$processEvent(WorkflowDockerLookupActor.scala:39); 	at akka.actor.LoggingFSM$class.processEvent(FSM.scala:799); 	at cromwell.engine.workflow.WorkflowDockerLookupActor.processEvent(WorkflowDockerLookupActor.scala:39); 	at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:657); 	at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:651); 	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); 	at cromwell.docker.DockerClientHelper$$anonfun$dockerResponseReceive$1.applyOrElse(DockerClientHelper.scala:16); 	at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:170); 	at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:171); 	at akka.actor.Actor$class.aroundReceive(Actor.scala:496); 	at cromwell.engine.workflow.WorkflowDockerLookupActor.aroundReceive(WorkflowDockerLookupActor.scala:39); 	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:526); 	at akka.actor.ActorCell.invoke(ActorCell.scala:495); 	at akka.d",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3558:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3558,1,['test'],['tests']
Testability,"It appears that both the ""branch"" and ""PR"" builds are always running the complete test suite in travis. We had added a check in previously to skip the ""branch"" builds to save on costs. Here's an example:; https://github.com/broadinstitute/gatk/pull/7533",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7536:82,test,test,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7536,1,['test'],['test']
Testability,"It appears that several tests do not appropriately reset the seeds of the Utils random generators, which leads to non-deterministic behavior when new tests are introduced or tests are run in a different order. Although this effectively increases test coverage, it may make things difficult to debug... I think it is probably safer to have private generators as needed. @droazen or @lbergelson can you assign?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6112:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6112,4,['test'],"['test', 'tests']"
Testability,"It appears that when we try to write out a CRAM file in hellbender from input that contains an unmapped read, we produce a malformed CRAM. We need to fix this before we can write the tests in https://github.com/broadinstitute/hellbender/issues/675 and https://github.com/broadinstitute/hellbender/issues/590. To replicate, take a BAM file containing an unmapped read (eg., `src/test/resources/org/broadinstitute/hellbender/tools/print_reads.bam`), run it through hellbender's `PrintReads` with the output set to cram, then run `samtools view` on the resulting cram file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/766:183,test,tests,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/766,2,['test'],"['test', 'tests']"
Testability,"It could just be natural variability in the user's runtime environment, but it's worth doing some longer-running tests to be sure.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3491#issuecomment-324453449:113,test,tests,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3491#issuecomment-324453449,1,['test'],['tests']
Testability,It does in this very simple test I ran on dataproc.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2312#issuecomment-266636027:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2312#issuecomment-266636027,2,['test'],['test']
Testability,"It doesn't explode in GATK3 -- I had to drop -stand_call_conf to 10 to get it to output, then I got MQ=NaN. The NaN/explosion is my fault -- pulling the DP from the format field seemed like such a good idea at the time, but it's just causing problems. I had a ticket open for it, but the particular test case got fixed in another way. I'll open another ticket.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2658#issuecomment-299502902:299,test,test,299,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2658#issuecomment-299502902,1,['test'],['test']
Testability,"It doesn't seem related to the version of java. I updated my version of java to; ```; javac -version; javac 1.8.0_191. java -version; java version ""1.8.0_191""; Java(TM) SE Runtime Environment (build 1.8.0_191-b12); Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode); ```. The issue remains the same, I pulled the latest commit on master and ran; ```; ./gradlew clean; ./gradlew bundle; ./gradlew test; ...; Results: FAILURE (500075 tests, 500072 successes, 2 failures, 1 skipped). 500075 tests completed, 2 failed, 1 skipped; ```; The behavior is the same, the exact two same tests fail.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-451930915:410,test,test,410,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-451930915,4,['test'],"['test', 'tests']"
Testability,"It happened multiple times over the course of a couple days. Since I; downloaded the full gnomad exome data locally, I haven't tested again. --; - Alan Hoyle - alan@alanhoyle.com - http://www.alanhoyle.com/ -. On Mon, Nov 9, 2020 at 2:23 PM droazen <notifications@github.com> wrote:. > @alanhoyle <https://github.com/alanhoyle> Can you tell us whether the 400; > Bad Request error is repeatable -- did you see it more than once?; > Oftentimes when accessing cloud data we encounter transient errors like; > this that go away on their own.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/issues/6926#issuecomment-724225557>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AACGX43OY2CFF5KFZXZOH4LSPA6T3ANCNFSM4TD2FDGA>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6926#issuecomment-724267156:127,test,tested,127,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6926#issuecomment-724267156,1,['test'],['tested']
Testability,"It has asserts for a number of annotations, but it doesn't detect when new un-asserted annotations are added. ; We should consider:; A: adding asserts for new annotations since the test was written; B: adding a clause to fail when new annotations are added without an assert; C: renaming the method",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2798:7,assert,asserts,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2798,5,"['assert', 'test']","['assert', 'asserted', 'asserts', 'test']"
Testability,"It has been decided to merge this branch in after the release so it can be more substantially tested. Since it is being pushed off, we should take a look at the precision issue for annotations. Would it be possible to limit the precision of the output annotations to 3 decimal points? It seems to be outputting a lot of annotations that end up being excessively long.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-356037149:94,test,tested,94,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-356037149,1,['test'],['tested']
Testability,"It is not necessary to be packed in the testing framework, because it is specific for a single tool...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3762:40,test,testing,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3762,1,['test'],['testing']
Testability,It is now site-by-site independent (unlike GATK3). All integration tests were ported as is (after ditching the MD5s). The algorithm was changed so that it works on a site-by-site independent basis. Some changes to the engine classes were required to allow queries over intervals in feature data sources. Fixes https://github.com/broadinstitute/hellbender/issues/38,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/614:67,test,tests,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/614,1,['test'],['tests']
Testability,"It looks like a test was generating a top level `testSortingFile.txt every time it ran, which accidentally got committed.; I've replaced this with a tmp file. I took the opportunity to make a few cosmetic improvements to the test file as well. Fixes #471",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/481:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/481,3,['test'],"['test', 'testSortingFile']"
Testability,"It looks like all the changes in my original commit with the raw GATK3 code (except for one file) got squashed out somehow, so I can't see just the changes from GATK3 anymore. I'll probably have to go back and re-commit those when you're ready to make this tractable to review. I'll wait to comment on #1 until that happens. As for a default plugin descriptor, I'd prefer not to take one unless its fully implemented, with tests. Plus, although we could develop it here, it should really live in the Barclay repo if its truly generic. More importantly, I'm not sure the plugins in this PR should be plugins at all. Historically, plugins have required a lot of test development and iteration because they have command line arguments (the plugin system is for extending the command line parser with discoverable, re-useable components that are shared across multiple tools, and need shared command line arguments). I haven't looked at the new ones closely, but I'm not sure they're a good fit. As for the files, it look like about 400MB (?) Thats pretty big - you should try to squeeze them down or target some existing files if you can.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431839008:423,test,tests,423,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431839008,2,['test'],"['test', 'tests']"
Testability,"It looks like at one point GATK 3.8 was available via the [homebrew science tap](https://github.com/ilovezfs/homebrew-science/blob/master/gatk.rb). I've tried adding their formula to my homebrew formula folder and installing via ``` brew install gatk.rb``` but there's a ton of errors. ```Updating Homebrew...; ==> Downloading https://github.com/broadgsa/gatk-protected/archive/3.8-1.tar.gz; Already downloaded: /Users/timothystiles/Library/Caches/Homebrew/gatk-3.8-1.tar.gz; ==> mvn package -Dmaven.repo.local=${PWD}/repo; Last 15 lines from /Users/timothystiles/Library/Logs/Homebrew/gatk/01.mvn:; [INFO] Scanning for projects...; [ERROR] [ERROR] Some problems were encountered while processing the POMs:; [FATAL] Non-parseable POM /private/tmp/gatk-20180118-71498-skz9cg/gatk-protected-3.8-1/public/gatk-root/pom.xml: unexpected character in markup < (position: END_TAG seen ...</artifactId>\n<<... @15:3) @ /private/tmp/gatk-20180118-71498-skz9cg/gatk-protected-3.8-1/public/gatk-root/pom.xml, line 15, column 3; @; [ERROR] The build could not read 1 project -> [Help 1]; [ERROR]; [ERROR] The project org.broadinstitute.gatk:gatk-aggregator:[unknown-version] (/private/tmp/gatk-20180118-71498-skz9cg/gatk-protected-3.8-1/pom.xml) has 1 error; [ERROR] Non-parseable POM /private/tmp/gatk-20180118-71498-skz9cg/gatk-protected-3.8-1/public/gatk-root/pom.xml: unexpected character in markup < (position: END_TAG seen ...</artifactId>\n<<... @15:3) @ /private/tmp/gatk-20180118-71498-skz9cg/gatk-protected-3.8-1/public/gatk-root/pom.xml, line 15, column 3 -> [Help 2]; [ERROR]; [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.; [ERROR] Re-run Maven using the -X switch to enable full debug logging.; [ERROR]; [ERROR] For more information about the errors and possible solutions, please read the following articles:; [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException; [ERROR] [Help 2] http://cwiki.apache.org/confluence/display",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4164#issuecomment-358697586:572,Log,Logs,572,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4164#issuecomment-358697586,1,['Log'],['Logs']
Testability,It looks like it made the tests substantially slower.... I'm not totally clear on why. Maybe because it has to re-optimize code every time it restarts the jvm.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6093#issuecomment-521372663:26,test,tests,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6093#issuecomment-521372663,2,['test'],['tests']
Testability,It looks like something changed with the google reference api. Every test that uses it is failing. See https://storage.googleapis.com/hellbender-test-logs/build_reports/ll_issue3995_implement_metadata_16386.1/tests/test/index.html. . We should disable these until we can figure out what changed / what the fix is.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4163#issuecomment-358016315:69,test,test,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4163#issuecomment-358016315,4,['test'],"['test', 'test-logs', 'tests']"
Testability,"It looks like something went wrong with an earlier step (either a bug or some other condition), causing this step to see a truncated file. This will need some investigation. The first thing I'd suggest is to add more logging so we can visually make sure that each step finished correctly, and perhaps log the output file size every time.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3481#issuecomment-324686603:217,log,logging,217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3481#issuecomment-324686603,2,['log'],"['log', 'logging']"
Testability,"It looks like the conda env recently started resolving h5py to v3.1.0, which in turn appears to be incompatible with the keras version we're using, causing the CNNScoreVariants integration tests to fail when keras tries to load the model file (see https://github.com/tensorflow/tensorflow/issues/44467). This PR pins the version to the version used by the last build I could find that succeeded, which is 2.10.0.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6955:189,test,tests,189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6955,1,['test'],['tests']
Testability,It looks like the last rebase in the previous PR broke some things and tests were insufficient to catch them. I have added checks to the tests as to the actual contents of the paths as well as some more extreme tests. . Fixes #7085,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7086:71,test,tests,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7086,3,['test'],['tests']
Testability,"It looks like the mapPartitions call in BwaSpark results in a larger serialized object graph than the other Spark tools. I discovered this by accident when I added a non-serializeable read filter object to the ReadInput argument collection in GATK Spark tool, which caused the BwaSparkIntegrationTest to fail. All other tests passed. It can be reproduced it by just adding an instance of anything that's not serializeable to BwaSpark or GATKSparkTool and running the test BwaSparkIntegrationTest. At the moment the following line will do it since ReadGroupBlackListReadFilter is currently not serializeable (though anything containing a MapEntry will do):. ReadGroupBlackListReadFilter prf = new ReadGroupBlackListReadFilter(Collections.singletonList(""RG:test""), getHeaderForReads());",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1926:320,test,tests,320,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1926,3,['test'],"['test', 'tests']"
Testability,"It looks like the noGenotypes.vcf in GATK3 was derived from the v37 ref with decoy. In GATK4, the sequence dictionary validation requirement is that the input and reference have a common subset of contigs, so given your description of the difference I would expect it to pass that test. Feel free to reopen if you think I've missed something.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4453#issuecomment-410724975:281,test,test,281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4453#issuecomment-410724975,1,['test'],['test']
Testability,"It looks like the regression test failed due to some connectivity blip:. ```; pip._vendor.requests.packages.urllib3.exceptions.ProtocolError: (""Connection broken:; ConnectionResetError(104, 'Connection reset by peer')"", ; ConnectionResetError(104, 'Connection reset by peer')); ```; In the hope it's transient, could you please restart it?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5785#issuecomment-472529525:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5785#issuecomment-472529525,1,['test'],['test']
Testability,"It looks like the tests are running very slowly because of a performance regression due to the changes in `IntegrationTestSpec.assertEqualTextFiles`. You can see this on tests that should be unaffected by the core changes in this PR, like the VQSR integration tests, which have no cloud/bucket dependency and usually take about [1 minute](https://storage.googleapis.com/hellbender-test-logs/build_reports/master_24775.2/tests/test/classes/org.broadinstitute.hellbender.tools.walkers.vqsr.VariantRecalibratorIntegrationTest.html), but took [25 minutes](https://storage.googleapis.com/hellbender-test-logs/build_reports/master_24563.2/tests/test/classes/org.broadinstitute.hellbender.tools.walkers.vqsr.VariantRecalibratorIntegrationTest.html) with this branch. The same thing happens when the VQSR tests are run locally with this branch; all the time is spent in `assertEqualTextFiles`. @jean-philippe-martin I don't want to push to this branch without your ok, but reverting the first few lines of `assertEqualTextFiles` seems to fix the problem locally. (Separately, I will do some profiling to figure out for posterity sake why that change had such a dramatic affect ).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-462772143:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-462772143,13,"['assert', 'test']","['assertEqualTextFiles', 'test', 'test-logs', 'tests']"
Testability,"It looks like the tests ran on Travis but there is a legitimate failure (testMultipleCompTracks), which fails for me locally as well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-432235415:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-432235415,2,['test'],"['testMultipleCompTracks', 'tests']"
Testability,"It looks like there have been some changes since I last looked at this, including one new tool, so I can make another pass on the java code. But I'd feel a lot better about taking this if there were at least one integration test for each of the tools (right now there are a couple of tests for the inference tool, and none for the other 3 tools). @lucidtronix is that possible to do that in the next day or so ? . As for type hinting,I'd love to see it in all of our Python code. I think it made the gcnv code much more readable (BTW, does anyone have mypy stubs for numpy, theano, tensorflow) ? We might want to run a type/checker linter as part of the build.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4245#issuecomment-367435050:224,test,test,224,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4245#issuecomment-367435050,3,"['stub', 'test']","['stubs', 'test', 'tests']"
Testability,"It looks like this is a bug with 4.2.0.0 because the same Mutect2 output has no issues with FilterMutectCalls 4.1.6.0. . This request was created from a contribution made by Qihan Long on June 04, 2021 03:21 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360078236332-The-output-of-Mutect2-cannot-be-accepted-by-FilterMutectCalls-in-GATK-4-2-0-0](https://gatk.broadinstitute.org/hc/en-us/community/posts/360078236332-The-output-of-Mutect2-cannot-be-accepted-by-FilterMutectCalls-in-GATK-4-2-0-0). \--. If you are seeing an error, please provide(REQUIRED) : ; ; a) GATK version used: 4.2.0.0 ; ; b) Exact command used: . gatk FilterMutectCalls \\ ; ; \-R /public1/data/resources/ref\_genome/GRCh38/GRCh38.d1.vd1.fa \\ ; ; \-V somatic\_mutation/Mutect2/test.vcf.gz \\ ; ; \-O somatic\_mutation/FilterMutectCalls/test.vcf.gz. c) Entire error log:. I used the ""--enable-all-annotations"" option within Mutect2 to get a vcf file with abundant information. However, the following FilterMutectCalls step seemed to be intolerant of some information within previous step's vcf file record. The intolerated record within vcf listed below: . chr1 6197724 . C CT,CTT,CTTT . . AC=1,1,1;AF=0.167,0.167,0.167;AN=6;AS\_BaseQRankSum=-6.431;AS\_MQ=60.00,60.00,60.00;AS\_MQRankSum=0.000;AS\_ReadPosRankSum=5.751;AS\_SB\_TABLE=42,880|3,164|3,32|0,14;**AS\_UNIQ\_ALT\_READ\_COUNT=167|35|14**;BQHIST=5,1,0,0,1,11,2,0,0,0,14,2,0,0,1,15,1,0,0,0,16,1,0,0,0,17,0,2,0,0,18,2,0,0,1,19,6,0,1,0,20,25,0,2,2,21,13,0,1,2,22,20,0,3,3,23,2,1,2,1,24,6,0,2,0,25,21,1,4,7,26,33,0,5,6,27,18,0,0,7,28,29,0,0,4,29,26,2,4,8,30,161,4,5,51,31,263,2,3,51,32,129,2,3,22,33,41,0,0,0,34,15,0,0,0,35,20,0,0,0,36,19,0,0,0,37,12,0,0,0,38,1,0,0,0,39,9,0,0,0,41,18,0,0,0,44,26,0,0,0;BaseQRankSum=-6.431;ClippingRankSum=-7.714;DP=1323;ECNT=1;FS=0.000;LikelihoodRankSum=-7.886;MBQ=31,30,26,30;MFRL=6590,6585,4819,6586;MMQ=60,60,60,60;MPOS=16,15,7;MQ=59.98;MQ0=0;MQRankSum=0.000;NALOD=0.569,1.49,1.49;NCC=0;NCount=0;NLOD=27.80,30.51,30",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7298:773,test,test,773,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7298,3,"['log', 'test']","['log', 'test']"
Testability,"It looks like we copy and execute install_R_packages.R from the repo when building the base Docker image, and then on travis, we use the current repo version for the travis image. We also copy the current version to the final Docker image during the build, but we don't execute it there (at least as far as I can tell). This means the travis tests that use the Docker image run with a different R environment (the one established for the base image) than the non-Docker tests. Also, the Docker image winds up having the updated copy of the script, but its not the one reflected in the actual environment. @jamesemery It looks like you might have added the second copy - can you take a look and verify that we should fix this, or see if there is someting I'm missing.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4251:342,test,tests,342,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4251,2,['test'],['tests']
Testability,It looks like we need to update mockito. ; https://storage.googleapis.com/hellbender-test-logs/build_reports/master_27538.13/tests/test/index.html. ```. java.lang.IllegalArgumentException: Unknown Java version: 11; 	at net.bytebuddy.ClassFileVersion.ofJavaVersion(ClassFileVersion.java:135); 	at net.bytebuddy.ClassFileVersion$VersionLocator$ForJava9CapableVm.locate(ClassFileVersion.java:357); 	at net.bytebuddy.ClassFileVersion.ofThisVm(ClassFileVersion.java:147); 	at net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$CreationAction.run(ClassInjector.java:301); 	at net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$CreationAction.run(ClassInjector.java:290); 	at java.base/java.security.AccessController.doPrivileged(Native Method); 	at net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection.<clinit>(ClassInjector.java:70); 	at net.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$InjectionDispatcher.load(ClassLoadingStrategy.java:184); 	at net.bytebuddy.dynamic.TypeResolutionStrategy$Passive.initialize(TypeResolutionStrategy.java:79); 	at net.bytebuddy.dynamic.DynamicType$Default$Unloaded.load(DynamicType.java:4456); 	at org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:115); 	at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:37); 	at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:34); 	at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:138); 	at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:346); 	at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:161); 	at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:355); 	at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:32); 	at org.mockito.internal.creation.bytebuddy.SubclassB,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-532377836:32,mock,mockito,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6119#issuecomment-532377836,4,"['mock', 'test']","['mockito', 'test', 'test-logs', 'tests']"
Testability,"It looks like we're ignoring some tests by accident, probably due to bugs in their dataproviders. We should fix that. See: https://storage.googleapis.com/hellbender-test-logs/build_reports/master_22886.3/tests/test/index.html",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5339:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5339,4,['test'],"['test', 'test-logs', 'tests']"
Testability,"It looks like when this was added, a mistake was made between a filter returning test() == true (passing the filter) and test() == false (failing the filter, read removed). Furthermore the invert filter argument in here is now redundant as of #8724 and I will go ahead and remove it from this filter. I have also tweaked the filter arguments slightly to clarify what they do now mean more intuitively. . Fixes #8887",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8888:81,test,test,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8888,2,['test'],['test']
Testability,"It looks perfectly reasonable from that log output and when I select that line in particular (granted, after I've added the index back in) it looks fine. I count 10 columns. I dug into this before I figured out the index fix. I don't know why it's expecting 8 (apparently it thinks `header == null`) or getting 9 (apparently that's what `condenseTrailingTokens` does) If I pad that site to get the VC above and below they all look well behaved, whitespace and everything:; ```; chr14^I24736867^Irs854413^IT^IC^I.^IPASS^IAC=2;AF=1.00;AN=2;DB;DP=31;ExcessHet=0.5837;FS=0.000;InbreedingCoeff=0.0411;MQ=59.97;MQRankSum=-1.800e-02;MQ_DP=24250;POSITIVE_TRAIN_SITE;QD=25.91;QUALapprox=616134;ReadPosRankSum=0.576;SOR=0.704;VQSLOD=2.30;VarDP=23778;culprit=MQRankSum^IGT:AD:DP:GQ:PGT:PID:PL:SB^I1/1:0,31:31:93:0|1:24736864_A_G:1036,93,0:0,0,15,16$; chr14^I24737838^Irs1101636^IC^IT^I.^IPASS^IAC=2;AF=1.00;AN=2;DB;DP=38;ExcessHet=0.7420;FS=0.000;InbreedingCoeff=0.0357;MQ=59.98;MQRankSum=0.026;MQ_DP=24332;POSITIVE_TRAIN_SITE;QD=22.41;QUALapprox=537499;ReadPosRankSum=0.567;SOR=0.685;VQSLOD=2.09;VarDP=23982;culprit=DP^IGT:AD:DP:GQ:PL:SB^I1/1:1,37:38:79:1150,79,0:0,1,17,20$; chr14^I24739444^Irs12435407^IA^IT^I.^IPASS^IAC=2;AF=1.00;AN=2;DB;DP=30;ExcessHet=0.4770;FS=0.000;InbreedingCoeff=0.0430;MQ=59.99;MQRankSum=-6.000e-02;MQ_DP=17420;POSITIVE_TRAIN_SITE;QD=27.90;QUALapprox=478116;ReadPosRankSum=0.293;SOR=0.698;VQSLOD=2.27;VarDP=17137;culprit=MQRankSum^IGT:AD:DP:GQ:PGT:PID:PL:SB^I1/1:1,29:30:21:0|1:24739444_A_T:1167,21,0:1,0,15,14$; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4224#issuecomment-359573544:40,log,log,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4224#issuecomment-359573544,1,['log'],['log']
Testability,It might be prudent to hold off on this until after #5532 so the test update is less painful.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5676#issuecomment-463643786:65,test,test,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5676#issuecomment-463643786,1,['test'],['test']
Testability,"It needs to be integrated with CRAMIndexer, and tests should be added for both BAM and CRAM.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1135:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1135,1,['test'],['tests']
Testability,"It probably makes sense to fix HaplotypeCaller as well eventually, but the time scale for changes to HC is much slower and M2 can't afford to wait because, as it turns out, the bug you found doesn't just appear in mitochondria and is hurting sensitivity in the evaluation for our paper. . I will write a test.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5057#issuecomment-408417885:304,test,test,304,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5057#issuecomment-408417885,1,['test'],['test']
Testability,It seems fairly rare that the PL array is truly uninformative and consequently would be removed based on the fact that none of the integration tests seem to have failed as a result of this.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7148:143,test,tests,143,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7148,1,['test'],['tests']
Testability,"It seems like travis isn't really testing this properly, it's hard to prove that it's not using the default credentials. Would it make sense to do the following?; 1. create a new gcloud project; 2. create a private file in a bucket only accessible by that account ; 3. add a service account json for that account to travis, and use it in this test.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2879#issuecomment-330339002:34,test,testing,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2879#issuecomment-330339002,2,['test'],"['test', 'testing']"
Testability,It seems that it fails to hard-clip the bases array if the cigar has hard-clips. ```; java.lang.IllegalStateException: CIGAR covers 4 bases but the sequence is 8 read bases . 	at org.broadinstitute.hellbender.utils.bwa.BwaMemAlignmentUtils.applyAlignment(BwaMemAlignmentUtils.java:92); 	at org.broadinstitute.hellbender.tools.spark.sv.discovery.AlignmentIntervalUnitTest.testConstructionFromGATKRead(AlignmentIntervalUnitTest.java:133); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115). ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3459:371,test,testConstructionFromGATKRead,371,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3459,35,"['Test', 'test']","['TestMethodWorker', 'TestNG', 'TestRunner', 'testConstructionFromGATKRead', 'testng']"
Testability,"It seems that there are some small numerical differences in apache commons Math3 Hypergeometric distribution. In GATK3 we call the Hypergeometric distribution to get the probability directly, in GATK4 we call the Hypergeometric distribution to get the log of the probability. In these cases there are sometimes some very small rounding errors in the 15th or so least significant digit. The problem is that we either add these numbers to the p-value or not by checking if they are less than or equal to some threshold. In this case these rounding errors can have a large impact (especially when the number of reads is relatively small) on the final p-value. R seems to have more digits and therefore usually reports that they are the same values, so in this case neither GATK3 or GATK4 match R. I haven't tried other implementations.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2586#issuecomment-297749496:252,log,log,252,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2586#issuecomment-297749496,1,['log'],['log']
Testability,"It seems that using -L pulls in unmapped reads which is not what we want I think. The reason I think unmapped reads are pulled in is this progress log from a Spark job. Note the 'Current locus' on the last line. ```; org.broadinstitute.hellbender.tools.CountReads --intervals 1:1-20000000 --input /humgen/gsa-hpprojects/NA12878Collection/bams/CEUTrio.HiSeq.WGS.b37.NA12878.bam --disable_all_read_filters false --interval_set_rule UNION --interval_padding 0 --secondsBetweenProgressUpdates 10.0 --help false --version false --VERBOSITY INFO --QUIET false; [October 24, 2015 2:16:18 AM EDT] Executing as akiezun@dataflow01.broadinstitute.org on Linux 2.6.32-573.3.1.el6.x86_64 amd64; Java HotSpot(TM) 64-Bit Server VM 1.8.0-b132; Version: Version:4.pre-alpha-45-g168cd60-SNAPSHOT JdkDeflater; 02:16:18.972 INFO CountReads - Initializing engine; 02:16:19.296 INFO IntervalArgumentCollection - Processing 20000000 bp from intervals; 02:16:19.300 INFO ReadsDataSource - Preparing intervals for traversal; 02:16:19.301 INFO CountReads - Done initializing engine; 02:16:19.301 INFO ProgressMeter - Starting traversal; 02:16:19.302 INFO ProgressMeter - Current Locus Elapsed Minutes Records Processed Records/Minute; 02:16:29.306 INFO ProgressMeter - 1:3034965 0.2 2219000 13310007.0; 02:16:39.306 INFO ProgressMeter - unmapped 0.3 4542000 13623275.3; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1060:147,log,log,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1060,1,['log'],['log']
Testability,"It should be fairly easy to create a read transformer plugin; pretty much follow the pattern of read filter plugins: clone and modify GATKReadFilterPluginDescriptor, and add an instance of the new descriptor to the list of plugins passed in to the command line parser in (appropriate) tool base classes. And of course tests!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2084#issuecomment-245968764:318,test,tests,318,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2084#issuecomment-245968764,1,['test'],['tests']
Testability,"It should be possible to do this now, though tests need to be added.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5559#issuecomment-634752181:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5559#issuecomment-634752181,1,['test'],['tests']
Testability,"It turns out I was mistaken that setting the environment variables fixes the problem (stupid error on my part). It's possible the BaseTest message is unrelated. I haven't tested this branch out yet, but building from the commit immediately before the update works. I am going to try the next version to see if it helps. Edit: #3594 does not fix the issue.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3592#issuecomment-330896419:171,test,tested,171,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3592#issuecomment-330896419,1,['test'],['tested']
Testability,"It usually works but it's not really supported and as you've discovered there's a bug with colons (and possibly other bugs, it's not tested that way). The gatk accepts special modifiers to some arguments that are separated with colons and something about the parsing gets messed up when you have the equals sign in there as well. The recommendation is to not use them at all. Picard is going to migrate to the non-equal sign form of arguments in the near future as well so it should be less confusing to switch between them then.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5315#issuecomment-430706675:133,test,tested,133,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5315#issuecomment-430706675,1,['test'],['tested']
Testability,"It was assuming that the `ReferenceContext`'s interval has the same start as the `VariantContext` being annotated, which is often not true. I tested this in Mutect and it seems to work correctly now. @LeeTL1220 This will improve indel specificty in M2 by 75% or so. Can you review?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2556:142,test,tested,142,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2556,1,['test'],['tested']
Testability,It was noticed while doing #8351 that the `GencodeFunctotation.equals()` method has the following line in it; ``` ; if (geneTranscriptType != that.geneTranscriptType) return false; ; ```. Unfortunately the geneTranscriptType is stored as a Sting and thus this should NOT be expected to succeed in almost any case. As it stands fixing this innocuous oversight seems to break several of the combinatorial funcotator tests and an integration test. Somebody should fix this behavior (easy) and validate that the test changes are within tolerable levels (hard).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8385:414,test,tests,414,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8385,3,['test'],"['test', 'tests']"
Testability,"It will be nice to have the GATK testing framework in a different module and maven artifact to add it as a dependency only for testing, and do not include it in the uber-jar the TestNG dependecy (or the Mini-Cluster from Hadoop).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2533:33,test,testing,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2533,3,"['Test', 'test']","['TestNG', 'testing']"
Testability,"It will come as a surprise to no one that while tests pass locally, Travis has slightly different output. @cmnbroad the LODs match nicely, but the culprit values are different. Do you remember seeing this before? It seems like a vaguely familiar issue.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6570#issuecomment-619131041:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6570#issuecomment-619131041,1,['test'],['tests']
Testability,It would be helpful to have a failing unit test for this that runs on files in GCS.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2287#issuecomment-265136009:43,test,test,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2287#issuecomment-265136009,1,['test'],['test']
Testability,"It would be nice to have a StrandedInterval class, and then the distal targets could be stored as one of these in the various BreakpointEvidence subclasses that have distal targets, and the PairedStrandedIntervals class could just have two of them. This would also let you eliminate the methods hasDistalTargets and getDistalTargetsUpstreamOfBreakpoints -- getDistalTargets would do the job of all three.; I assume that PairedStrandedIntervals shouldn't ever have null intervals for source or target, so you could just validate in the constructor and then you wouldn't have to test nullness in equals and hashCode.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3469#issuecomment-328935711:577,test,test,577,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3469#issuecomment-328935711,1,['test'],['test']
Testability,"It would be wonderful to be able to use SelectVariants with a query like -select ""AF > 0.1"" on a VCF containing multiallelics and have it filter multiallelics by the allele with the highest AF. (Possibly conversely for ""AF < X""queries. Right now it crashes unless you use a crazy JEXL or pull out the multiallelics. Maybe we could make a maxAF/minAF in htsjdk/JEXLmap.java which equals AF for biallelics?. Internally, it might be nice to have a Map<Allele, Double> with the AF (or AC) for each allele for the SelectVariants issue and to simplify some of the crazy logic already in VariantAnnotator to deal with different allele ordering. As part of this task, we should also make 100% sure that allele ordering is preserved so that AF/AC array ordering is preserved during VC reading/writing/manipulation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/241:564,log,logic,564,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/241,1,['log'],['logic']
Testability,"It's a little confusing that we use downsampled tumor BAMs for the gCNV WDL tests, for example. Can wait until after release.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4007:76,test,tests,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4007,1,['test'],['tests']
Testability,"It's always difficult to come up with test data for these complex events. What I usually do is to create test data on what I know should work, including imaginable edge cases, and accumulate more edge cases as we run into them. Can you expand a little on what you mean by ; > to have an adversarial function that generates problems from known solutions rather than doing it by hand",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4677#issuecomment-384776520:38,test,test,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4677#issuecomment-384776520,2,['test'],['test']
Testability,It's no longer a test - just a private function. I just kept it in case somebody wishes to make it a good test in the future.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-408551280:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-408551280,2,['test'],['test']
Testability,"It's not clear to me what code path you're going through when using a `gs://` URI for the input bam in your second test. `CountReadsSpark` calls `GATKSparkTool.getReads()` which calls `JavaSparkContext.newAPIHadoopFile()`, but the question is how Hadoop-BAM handles your `gs://` URI. In other parts of the GATK (eg., `ReferenceTwoBitSource`) we call into `BucketUtils.openFile()`, which handles GCS URIs directly by calling into `GcsUtil.open()`.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1755#issuecomment-213153356:115,test,test,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1755#issuecomment-213153356,1,['test'],['test']
Testability,"It's not immediately obvious why the Spark tests are failing. It could be something to do with the Spark context which is shared between tests, and which may be picking up some state that is not cleared from one test to the next. The tests are passing on Travis, which also runs all of them. Do they fail if you run them individually?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-448275058:43,test,tests,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-448275058,8,['test'],"['test', 'tests']"
Testability,"It's not just index files -- many paths to test files are constructed programmatically rather than hardcoded into the source. And some files are used by out-of-band tests, such as our jenkins tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905#issuecomment-348593542:43,test,test,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905#issuecomment-348593542,3,['test'],"['test', 'tests']"
Testability,It's not necessary to update `DepthPerAlleleBySample`. This is verified by `DepthPerAlleleBySampleUnitTest.testUsingReads ` for the refDepth=altDepth=0 case.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2529#issuecomment-289564636:107,test,testUsingReads,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2529#issuecomment-289564636,1,['test'],['testUsingReads']
Testability,"It's not quite as logical to combine MNPs and deletions as it is to combine two deletions, but given that we only have one ""symbolic"" allele to represent both, I don't think there's any other choice.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6500#issuecomment-606847594:18,log,logical,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6500#issuecomment-606847594,1,['log'],['logical']
Testability,"It's possible that GenomicsDB was also optimized for diploids and thusly slower for other ploidies because a lot of the code was ported from GATK. I think `new-qual` is more likely to help, but you can certainly try CombineGVCFs. I don't have a lot of good benchmarks, honestly, but maybe @lbergelson does. GATK3 GenotypeGVCFs for 20,000 human samples took 113.54 hours for about 1.9Mbp, but that was on a CombinedGVCF already extracted from GenomicsDB. With that many samples there are a lot of multi-allelics so that part should be similar to your data. The java options were `java -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xmx11500m`, so still less memory than your task seems to need. And without `new-qual`. It also seems to be much faster than your run, but it's hard to say how runtime should scale with the number of samples.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4467#issuecomment-370477452:257,benchmark,benchmarks,257,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4467#issuecomment-370477452,1,['benchmark'],['benchmarks']
Testability,"It's this I'm hoping we can take out: https://github.com/broadinstitute/gatk/blob/b097f75c536b70f900a8c6ebfc6c819fdea45e44/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java#L229. Kevin has kindly volunteered to help me port the warp tests to Carrot, if I can ever make time. :-(",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1061860127:127,test,test,127,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1061860127,2,['test'],"['test', 'tests']"
Testability,"It's your call whether you want the test or not. Yeah, it would be good to put an advisory message if the number of intervals is more than 100. I uploaded a jar yesterday, but it's not showed up in Maven central",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-408165237:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-408165237,1,['test'],['test']
Testability,Its currently set to false since defaulting to true breaks a couple of PrintReads tests which will need to be fixed. Also add fullName doc attribute.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1183:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1183,1,['test'],['tests']
Testability,"Its possible to specify CNN inference size argument values that cause the Python process run out of memory, and the failure mode appears to be the java process hangs. Its not clear whether its always possible to recover from this using the global exception handler we currently install on the Python side - we need to explore a bit to see if the handler is being invoked on OOM; whether catching the OOM exception explicitly would help, or if we need an alternative reporting strategy for low-memory conditions. Attached is a log provided by @bhanugandham from a run in a Terra notebook that failed and that exhibited a hang that we assume was due to OOM, and that was resolved by reducing the inference batch size. [gatkStreamingProcessJournal-772629669.txt](https://github.com/broadinstitute/gatk/files/2988819/gatkStreamingProcessJournal-772629669.txt)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5820:526,log,log,526,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5820,1,['log'],['log']
Testability,Its use in `ValidateBasicSomaticShortMutations` seems limited to the integration test. Can I rewrite the test to do without `AnnotatedInterval` and call it a day?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3884#issuecomment-526876913:81,test,test,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3884#issuecomment-526876913,2,['test'],['test']
Testability,"I’ll take a look at the somatic tests. They should be OK, probably just something related to kebab case changes. EDIT: Or hmm, maybe they weren't passing before. Something to do with annotated-interval validation, I think. I think the WDL tests should be using the Docker, which has g++. Travis machines might be slower?. Integration tests will need to be in the python test group. Take a look at the python tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-350160424:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-350160424,5,['test'],"['test', 'tests']"
Testability,"I’m sorry I wasn’t really keeping a good trail of the errors and it was a few weeks ago and I have been doing other stuff. . . I have a notation in my log about the run time switch and I seem to have gotten the notion about using it from reading stuff in one of the tutorials or on the forum. I gotta admit I am clueless about what the dictionary validation is actually doing so it wouldn’t have been anything that I conjured up on my own. . . From: Louis Bergelson <notifications@github.com> ; Sent: Wednesday, October 30, 2019 4:13 PM; To: broadinstitute/gatk <gatk@noreply.github.com>; Cc: rdbremel <rdbremel017@gmail.com>; Mention <mention@noreply.github.com>; Subject: Re: [broadinstitute/gatk] Funcotator shuts down (#6182). . Can you point out where in the log you see that? I'm looking at it but I don't see anything about memory in the log you provided. (Except the Runtime.totalMemory()=4523032576 which is just standard output spam from gatk when it shutsdown) Sequence dictionary validation usually happens first, it's strange that a failure in the middle of a run would be effected by it. I'm no very curious what weird thing is happening that's causing this... —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub <https://github.com/broadinstitute/gatk/issues/6182?email_source=notifications&email_token=ANCR2VFFO5775FSQO6EHFX3QRH2HHA5CNFSM4I2MRFQKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECVZCVA#issuecomment-548114772> , or unsubscribe <https://github.com/notifications/unsubscribe-auth/ANCR2VA3C2XW4BZEI5YNGITQRH2HHANCNFSM4I2MRFQA> . <https://github.com/notifications/beacon/ANCR2VFOYRDVUGP66IIIVHDQRH2HHA5CNFSM4I2MRFQKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECVZCVA.gif>",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6182#issuecomment-548119939:151,log,log,151,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6182#issuecomment-548119939,3,['log'],['log']
Testability,"Java 17.0.12 from [Oracle](https://www.oracle.com/java/technologies/downloads/#java17) seems to display the same behavior. ```; 12:19:27.622 INFO ProgressMeter - Scaffold_1:21175995 247.8 125320 505.8; 12:19:49.612 INFO ProgressMeter - Scaffold_1:21178224 248.1 125330 505.1; 12:20:02.383 INFO ProgressMeter - Scaffold_1:21179909 248.4 125340 504.7; 12:20:14.545 INFO ProgressMeter - Scaffold_1:21183582 248.6 125360 504.4; 12:20:25.422 INFO ProgressMeter - Scaffold_1:21255583 248.7 125670 505.2; 12:20:36.810 INFO ProgressMeter - Scaffold_1:21281660 248.9 125810 505.4; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f4ad4d94291, pid=3638446, tid=3638447; #; # JRE version: Java(TM) SE Runtime Environment (17.0.12+8) (build 17.0.12+8-LTS-286); # Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.12+8-LTS-286, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0xcf291] __memset_avx2_erms+0x11; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to /bigdata/operations/ejaco020/gatk/core.3638446); #; # An error report file with more information is saved as:; # /bigdata/operations/ejaco020/gatk/hs_err_pid3638446.log; #; # If you would like to submit a bug report, please visit:; # https://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #; ```. I also attempted running within a singularity container, allocating 64GB of memory to the job and specifying -Xmx60G. Still seemed to silently ""crash"". Command I ran was:; ```; singularity run gatk_4.6.0.0.sif gatk HaplotypeCaller --java-options -Xmx60G -R /rhome/ejaco020/bigdata/gatk/Cclementina_182_v1_2.fa -I AlignedCalToCcl_Scaffolds_MarkDupOut.bam \ ; -O sing.vcf.gz \ ; -ERC GVCF; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8988#issuecomment-2389450721:1352,log,log,1352,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8988#issuecomment-2389450721,1,['log'],['log']
Testability,"Java 8 is now old enough that it's not the default on new machines, (java 12 seems to be what comes on a new macbook.) Installing java 8 has become more of a hassle because oracle now requires you to login in order to get it. We should update the readme with information about how to get java 8, probably pointing people to https://adoptopenjdk.net/. I think comms probably needs to update/add some documentation about this as well because it's definitely a friction point. We might also want to advise using jenv for people with multiple java installations to manage them.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6024:200,log,login,200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6024,1,['log'],['login']
Testability,"Java implementation of segmentation is now in the sl_wgs_segmentation dev branch, with a few simple unit tests. I'll expand on these and add tests for denoising in the future, but for now we have a working revised pipeline up through segmentation. The CLI is simply named ModelSegments (since my thinking is that it could eventually replace ACNV). I ran it on some old denoised exomes. Runtime is <10s, comparable to CBS. Here's a particularly noisy exome:. CBS found 1398 segments:; ![cbs](https://user-images.githubusercontent.com/11076296/30165095-cdf6251a-93ac-11e7-91fb-dcc8f48fe07f.png). Kernel segmentation with a penalty given by a = 1, b = 0 found 1018 segments:; ![kern](https://user-images.githubusercontent.com/11076296/30165106-dbbe0b40-93ac-11e7-99ec-5d58d8417d8b.png). Kernel segmentation with a penalty given by a = b = 1 (which is probably a reasonable default penalty, at least based on asymptotic theoretical arguments) reduced this to 270 segments :; ![kern-smooth](https://user-images.githubusercontent.com/11076296/30165113-e2b545a8-93ac-11e7-97a9-a692e43ebbdf.png). The number of segments can similarly be controlled in WGS. WGS runtime is ~7min for 250bp bins, ~30s of which is TSV reading, and there is one more spot in my implementation that could stand a bit of optimization, which might bring the runtime down. In contrast, I kicked off CBS 45 minutes ago, and it's still running... @LeeTL1220 this is probably ready to hand off to you for some WDL writing and preliminary evaluation. ; Although I can't guarantee that there aren't bugs, I ran about ~80 exomes with no problem. We can talk later today.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2858#issuecomment-327797936:105,test,tests,105,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2858#issuecomment-327797936,4,['test'],['tests']
Testability,JlY3RvcnlJbnRvSERGU1NwYXJrLmphdmE=) | `0% <0%> (-75.51%)` | `0% <0%> (-17%)` | |; | [...nder/tools/spark/pipelines/PrintVariantsSpark.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9waXBlbGluZXMvUHJpbnRWYXJpYW50c1NwYXJrLmphdmE=) | `0% <0%> (-66.667%)` | `0% <0%> (-2%)` | |; | [...institute/hellbender/utils/gcs/GATKGCSOptions.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvR0FUS0dDU09wdGlvbnMuamF2YQ==) | `0% <0%> (-66.667%)` | `0% <0%> (ø)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `54.194% <0%> (-25.806%)` | `30% <0%> (-9%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/3901/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3901#issuecomment-348476913:2461,test,test,2461,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3901#issuecomment-348476913,1,['test'],['test']
Testability,"Jumping on to report I've also been having issues using GATK 4 genotyping. CombineGVCFs (v4.0.1.1) runs fine no matter how many samples I use, but GenotypeGVCFs chokes at some limit. I iteratively subsetted my sample list to see at what point it begins to choke. I used line count of the final vcf file as an approximation of how far the genotyper got. Even at the 110 samples, though, CombineGVCFs ran for several hours. It just produced a final, genotyped VCF file that was severely truncated with few variants. See the graph at this image attached.; ![iterative memory loss](https://user-images.githubusercontent.com/5849554/37933389-e15935ac-30ff-11e8-91ea-80fffd8deb48.png). As for the errors:. `Exception in thread ""main"" java.lang.OutOfMemoryError: GC overhead limit exceeded`; and several; `at java.util....` and `at org.broadinstitute.hellbender.tools.walkers.genotyper....`. I attached three of these error files so you can see the full list of memory problems. `genotype55.e...` is the log file with the most number of samples that worked. `genotype60.e...` ends abruptly. `genotype65.e...` contains the memory errors. Note that these error/log files include both CombineGVCFs and GenotypeGVCFs. [genotype55.e5195822.txt](https://github.com/broadinstitute/gatk/files/1849559/genotype55.e5195822.txt); [genotype60.e5195820.txt](https://github.com/broadinstitute/gatk/files/1849560/genotype60.e5195820.txt); [genotype65.e5195821.txt](https://github.com/broadinstitute/gatk/files/1849561/genotype65.e5195821.txt). For reference, genotyping using GATK 3.8.0 on all 108 of my samples produced a final vcf file 2784 lines long in *36 seconds* with *no issue.* Let me know if you have any other questions!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4544#issuecomment-376314262:997,log,log,997,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4544#issuecomment-376314262,2,['log'],['log']
Testability,"Just a quick test of `--splitMultiallelics` looks good:; ```; WMCF9-CB5:shlee$ ./gatk LeftAlignAndTrimVariants -R ~/Documents/ref/hg38/Homo_sapiens_assembly38.fasta -V ~/Downloads/zeta_snippet_shlee/zeta_snippet.vcf.gz --maxIndelSize 250 -O zeta_snippet_leftalign_maxindelsize250_splitmultiallelics.vcf.gz --splitMultiallelics; Using GATK wrapper script /Users/shlee/Documents/branches/hellbender/build/install/gatk/bin/gatk; Running:; /Users/shlee/Documents/branches/hellbender/build/install/gatk/bin/gatk LeftAlignAndTrimVariants -R /Users/shlee/Documents/ref/hg38/Homo_sapiens_assembly38.fasta -V /Users/shlee/Downloads/zeta_snippet_shlee/zeta_snippet.vcf.gz --maxIndelSize 250 -O zeta_snippet_leftalign_maxindelsize250_splitmultiallelics.vcf.gz --splitMultiallelics; 17:52:19.004 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/shlee/Documents/branches/hellbender/build/install/gatk/lib/gkl-0.8.5.jar!/com/intel/gkl/native/libgkl_compression.dylib; Sep 05, 2018 5:52:19 PM shaded.cloud_nio.com.google.auth.oauth2.DefaultCredentialsProvider warnAboutProblematicCredentials; WARNING: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a ""quota exceeded"" or ""API not enabled"" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/.; 17:52:19.130 INFO LeftAlignAndTrimVariants - ------------------------------------------------------------; 17:52:19.131 INFO LeftAlignAndTrimVariants - The Genome Analysis Toolkit (GATK) v4.0.8.1-24-gb43bc27-SNAPSHOT; 17:52:19.131 INFO LeftAlignAndTrimVariants - For support and documentation go to https://software.broadinstitute.org/gatk/; 17:52:19.131 INFO LeftAlignAndTrimVariants - Executing as shlee@WMCF9-CB5 on Mac OS X v10.13.6 x86_64; 17:52:19.131 INFO LeftAlignAndTrimVariants ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3487#issuecomment-418893971:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3487#issuecomment-418893971,1,['test'],['test']
Testability,"Just as a test, what happens if you replace the bed file with an actual interval? For instance, `-L chr1`",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7037#issuecomment-760702697:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7037#issuecomment-760702697,1,['test'],['test']
Testability,"Just chatted with @lbergelson and we’re going to try to get this in over the next week or so, so that @vruano can slot it in between rounds of evaluations that he’s running. Sounded like some tests might need to be added, but I’ll try to do an initial review today—wouldn’t mind if anyone else wants to add comments, either!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6388#issuecomment-1011098085:192,test,tests,192,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6388#issuecomment-1011098085,1,['test'],['tests']
Testability,Just checks that the input and output bams are equal (which is still the; case for a bam with no duplicates). Once BQSR is hooked up we'll have; to update the expected output for this test. This is intended as a starting point for the more meaningful tests we; eventually want to have.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/772:184,test,test,184,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/772,2,['test'],"['test', 'tests']"
Testability,"Just for clarity, the last suggestion above is for the fix to https://github.com/broadinstitute/gatk/issues/5680. The fix for this issue is separate, but fixing https://github.com/broadinstitute/gatk/issues/5680 will enable us to re-enable the tests, which is a prerequisite to fixing this issue.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6730#issuecomment-671516272:244,test,tests,244,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6730#issuecomment-671516272,1,['test'],['tests']
Testability,"Just for future reference, note that comments in `testVariantRecalibratorSNPMaxAttempts` are also incorrect or out of date. The test passes even if you limit it to one attempt. ```; // For this test, we deliberately *DON'T* sample a single random int as above; this causes; // the tool to require 4 attempts to acquire enough negative training data to succeed; ```. So again, the tests were already ""broken."" But still, rather than attempt to fix them, I think it's best to follow the principle of not changing both production and test code to the extent that it is possible in this scenario. We've already updated enough exact-match expected results to make me a bit uncomfortable!. Someone else may want to tackle fixing the tests in a separate push, but I think it makes sense for me to focus on avoiding these sorts of issues when writing tests for the new tools. EDIT: For the record, I confirmed that the undesired behavior in this test that the RNG hack was trying to avoid was fixed (and hence, the test was ""broken"") in #6425. Probably wasn't noticed because this is the only non-exact-match test and the test isn't strict enough to check that attempts 1-3 fail, it only checks that we succeed by attempt 4. Again, someone else may feel free to examine the actual coverage of this test and whether it's safe to remove it and/or clean up all the duct tape---but at some point, it becomes difficult to tell which pieces of duct tape are load bearing!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1064236628:50,test,testVariantRecalibratorSNPMaxAttempts,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1064236628,12,['test'],"['test', 'testVariantRecalibratorSNPMaxAttempts', 'tests']"
Testability,"Just for posterity:. jhess 1:55 PM; just to clarify: what is the logic behind approximating σ_(τ/min/maj) ≈ (post90 - post10)/2? (edited) ; 1:55; what is the scale factor of 1/2 for?; 1:58; one other thing — how come σ_(min/maj) is the sum of the total CR segment’s variance (i.e. σ_τ) and the allelic segment’s variance?; 2:00; this would imply that the allelic segments are actually a sum of the random variables corresponding to the allelic and total segmentation, which I’m not sure is the case?. slee 5:32 PM; Sorry, just now seeing your questions!; 5:33; The scale factor of 1/2 is pretty arbitrary. Just trying to give an estimate of posterior width when the credible interval might be skewed. A better approach would be to refit posteriors with Gaussians/Betas as mentioned previously.; 5:35; However, I'm not actually convinced that these credible intervals are what we want to pass to the sigmas. As I also mentioned above, if sigma.tau is supposed to be a global quantity, probably the posterior median of the parameter that controls the global variance (given in the .cr.params file) might be a better thing to use. However, I never got a straight answer from anybody about whether this was a segment-level or global quantity---any idea?. slee 5:41 PM; As for using the sum of the CR variance and the MAF variance, you're right---we should be propagating error for the product of the two random variables. Not sure what I was thinking...probably just a brain fart. Not sure if it will make a difference for ABSOLUTE, but thanks for catching that!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5804#issuecomment-652411494:65,log,logic,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5804#issuecomment-652411494,1,['log'],['logic']
Testability,"Just for the record, the old somatic + germline pipelines comprise ~70k lines of Java code (including tests and utility classes). The new pipelines clock in at around ~22k lines of Java + python.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3903#issuecomment-348516041:102,test,tests,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3903#issuecomment-348516041,1,['test'],['tests']
Testability,"Just noting here that @gokalpcelik was kind enough to run some tests on this branch and noticed that I probably broke posterior sampling—it appears that I reverted to the non-online, memory intensive implementation that we ran into previously during development. Need to carve out some time to fix this issue and more generally polish things up, but I have other more pressing deadlines at the moment.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-2007599034:63,test,tests,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-2007599034,1,['test'],['tests']
Testability,"Just noting here that I saw a lot of intermittent 60-minute Travis timeouts for the gCNV case mode WDL tests in #7411. I'm pretty sure that at some point we were running cohort + case together, so not sure why case alone is now hitting the limit. So might be worth investigating and tightening up the tests/data. Also note @ldgauthier's concerns about using a fake dictionary in the simulated data in #6957.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4007#issuecomment-899474100:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4007#issuecomment-899474100,2,['test'],['tests']
Testability,"Just pushed some small changes based on our conversation. I think the last things to add now are 3 tests:; - Check a user exception is thrown if contig names in the ploidy regions don't match the bam sequence dictionary (e.g. `chr1` vs `1` naming); - Add a test that when ploidies given overlap, the highest one is actually used; - Add a test about the private constructor deep-copy Java magic to make sure that non-ploidy fields are actually in sync when the copy is made (and move that part of the code to the bottom of constructor). I also need to rebase to get the right htsjdk version, and other changes that might've been made to the code, which are hopefully easy to resolve...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8464#issuecomment-1830554344:99,test,tests,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8464#issuecomment-1830554344,3,['test'],"['test', 'tests']"
Testability,Just rebased this branch. Turns out we do need to merge it now in order to tie out against GATK 3.7. I'll merge once tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2314#issuecomment-286771713:117,test,tests,117,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2314#issuecomment-286771713,1,['test'],['tests']
Testability,"Just saw one of these in the log that I'm going to go investigate. The new error message is very helpful, thanks @kgururaj !",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3745#issuecomment-364159215:29,log,log,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3745#issuecomment-364159215,1,['log'],['log']
Testability,"Just some notes before I forget:. Using these test samples, I made some tweaks to the ploidy model that made it more robust to incorrect ploidy calls and added a simple modeling of mosaicism:. ```` ; # per-contig bias; bias_j = Gamma('bias_j',; alpha=100.0,; beta=100.0,; shape=(ploidy_workspace.num_contigs,)); norm_bias_j = bias_j / tt.mean(bias_j). # per-sample depth; depth_s = Uniform('depth_s',; lower=0.0,; upper=10000.0,; shape=(ploidy_workspace.num_samples,)); ; # per-sample probability of mosaicism; pi_mosaicism_s = Beta(name='pi_mosaicism_s',; alpha=1.0,; beta=50.0,; shape=(ploidy_workspace.num_samples,)). # per-sample-and-contig mosaicism factor; f_mosaicism_sj = Beta(name='f_mosaicism_sj',; alpha=10.0,; beta=1.0,; shape=(ploidy_workspace.num_samples, ploidy_workspace.num_contigs,)); norm_f_mosaicism_sj = f_mosaicism_sj / tt.max(f_mosaicism_sj, axis=1).dimshuffle(0, 'x'). # per-contig mapping error; eps_j = HalfNormal('eps_j', sd=0.01, shape=(ploidy_workspace.num_contigs,)). # negative-binomial means; mu_sjk = depth_s.dimshuffle(0, 'x', 'x') * t_j.dimshuffle('x', 0, 'x') * norm_bias_j.dimshuffle('x', 0, 'x') * \; (ploidy_workspace.int_ploidy_values_k.dimshuffle('x', 'x', 0) + eps_j.dimshuffle('x', 0, 'x')); mu_mosaic_sjk = norm_f_mosaicism_sj.dimshuffle(0, 1, 'x') * mu_sjk. # ""unexplained variance""; psi = Uniform(name='psi', upper=10.0). # convert ""unexplained variance"" to negative binomial over-dispersion; alpha = tt.inv((tt.exp(psi) - 1.0)). def _get_logp_sjk(_n_sj):; _logp_sjk = logsumexp([tt.log(1 - pi_mosaicism_s.dimshuffle(0, 'x', 'x')) + commons.negative_binomial_logp(mu_sjk, alpha.dimshuffle('x', 'x', 'x'), _n_sj.dimshuffle(0, 1, 'x')),; tt.log(pi_mosaicism_s.dimshuffle(0, 'x', 'x')) + commons.negative_binomial_logp(mu_mosaic_sjk, alpha.dimshuffle('x', 'x', 'x'), _n_sj.dimshuffle(0, 1, 'x'))],; axis=0)[0]; return _logp_sjk. DensityDist(name='n_sj_obs',; logp=lambda _n_sj: tt.sum(q_ploidy_sjk * _get_logp_sjk(_n_sj), axis=2),; observed=n_sj); ````. Brie",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4371#issuecomment-371334890:46,test,test,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4371#issuecomment-371334890,2,['test'],['test']
Testability,"Just tested this locally outside of the Docker. I do not see the WARN:; ```; WMCF9-CB5:shlee$ gatk40110 LearnReadOrientationModel -alt-table 13_tumor-alt.tsv -ref-hist 13_tumor-ref.metrics -alt-hist 13_tumor-alt-depth1.metrics -O 13_tumor-artifact-prior-table.tsv ; Using GATK jar /Applications/genomicstools/gatk/gatk-4.0.11.0/gatk-package-4.0.11.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /Applications/genomicstools/gatk/gatk-4.0.11.0/gatk-package-4.0.11.0-local.jar LearnReadOrientationModel -alt-table 13_tumor-alt.tsv -ref-hist 13_tumor-ref.metrics -alt-hist 13_tumor-alt-depth1.metrics -O 13_tumor-artifact-prior-table.tsv; 12:16:19.960 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Applications/genomicstools/gatk/gatk-4.0.11.0/gatk-package-4.0.11.0-local.jar!/com/intel/gkl/native/libgkl_compression.dylib; Nov 26, 2018 12:16:20 PM shaded.cloud_nio.com.google.auth.oauth2.DefaultCredentialsProvider warnAboutProblematicCredentials; WARNING: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a ""quota exceeded"" or ""API not enabled"" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/.; 12:16:20.176 INFO LearnReadOrientationModel - ------------------------------------------------------------; 12:16:20.177 INFO LearnReadOrientationModel - The Genome Analysis Toolkit (GATK) v4.0.11.0; 12:16:20.177 INFO LearnReadOrientationModel - For support and documentation go to https://software.broadinstitute.org/gatk/; 12:16:20.177 INFO LearnReadOrientationModel - Executing as shlee@WMCF9-CB5 on Mac OS X v10.13.6 x86_64; 12:16:20.177 INFO LearnReadOrientationModel - Java run",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5447#issuecomment-441721615:5,test,tested,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5447#issuecomment-441721615,1,['test'],['tested']
Testability,"Just to clarify @davidbenjamin @takutosato, the normal sample calling uses:. 1. HaplotypeCaller logic for _germline_ calling OR; 2. Mutect2 sensitive calling?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4522#issuecomment-373074373:96,log,logic,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4522#issuecomment-373074373,1,['log'],['logic']
Testability,"Just to provide some concrete logs as to exactly what is happening. I'm using systemtap on a NFS server to track exactly what is going on during these runs. For one second (the first column), for one run, for one file:. > 1583360232 192.168.6.75:58626 nfsd.proc4.write 290,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 546,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 817,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 918,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1020,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1194,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1235,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1499,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1669,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1808,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1838,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1879,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1909,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1939,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 1991,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2059,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2089,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2178,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2347,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2414,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2559,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75:58626 nfsd.proc4.write 2762,245760 /BaseQRankSum.tdb; > 1583360232 192.168.6.75",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6487#issuecomment-595367364:30,log,logs,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6487#issuecomment-595367364,1,['log'],['logs']
Testability,"Just trying to understand what the various issues are. . I opened a ticket to remove the GenomeLocParser #2125. GenomeLocParser is essentially a deprecated holdover from gatk3 that we haven't made the effort to completely remove yet. . Would it be useful if we packaged these small test files in the jar and had them automatically extracted when tests run? That would provide a basic set of example files that someone developing new tools could play with. . I think we mostly use BaseTest as a convenient way to find common files and a place to put common test functions like the `getTemp` family. Those are mostly statics that could be called from anywhere though. The only other stuff it really does is set up the the test spark context and set test logging verbosity. Moving the common files out of BaseTest might be a hard sell for people here, but we could extract a superclass that does the important set up and has the various functions without having the project specific files. We're a bit understaffed at the moment due to vacations, but I'll bring it up once people are back in the office.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-242845081:282,test,test,282,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-242845081,6,"['log', 'test']","['logging', 'test', 'tests']"
Testability,"Just updated the forum post with a solution. Basically, when running GenomicsDBImport on an uncompressed/unindexed vcf, the following exception was thrown - . ```; org.broadinstitute.hellbender.exceptions.UserException: Failed to create reader from file:///Users/nalini/gatk_test/ex001.mutect2-output.vcf; 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getReaderFromPath(GenomicsDBImport.java:988); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getHeaderFromPath(GenomicsDBImport.java:563); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.initializeHeaderAndSampleMappings(GenomicsDBImport.java:502); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.onStartup(GenomicsDBImport.java:439); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:138); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:192); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:211); 	at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:203); 	at org.broadinstitute.hellbender.Main.main(Main.java:289); Caused by: htsjdk.tribble.TribbleException: An index is required, but none found., for input source: file:///Users/nalini/gatk_test/ex001.mutect2-output.vcf; 	at htsjdk.tribble.TribbleIndexedFeatureReader.<init>(TribbleIndexedFeatureReader.java:135); 	at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:121); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getReaderFromPath(GenomicsDBImport.java:941); 	... 9 more; ```. After compressing/indexing [the test file](https://drive.google.com/file/d/1VtV81cvmDMVov-vzEobagsO1DOwvIiB9/view?usp=sharing) provided in the forum post, was able to successfully run GenomicsDBImport as well as SelectVariants.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7362#issuecomment-886943056:1798,test,test,1798,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7362#issuecomment-886943056,1,['test'],['test']
Testability,JvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `25.735% <0%> (-44.853%)` | `8% <0%> (-19%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `54.194% <0%> (-25.806%)` | `30% <0%> (-9%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9CYXNlUmVjYWxpYnJhdG9yU3BhcmtTaGFyZGVkLmphdmE=) | `0% <0%> (-22.807%)` | `0% <0%> (-2%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `61.538% <0%> (-15.385%)` | `9% <0%> (-2%)` | |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `78.947% <0%> (-10.526%)` | `6% <0%> (-1%)` | |; | [...institute/hellbender/exceptions/UserException.java](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9leGNlcHRpb25zL1VzZXJFeGNlcHRpb24uamF2YQ==) | `67.176% <0%> (-3.053%)` | `3% <0%> (ø)` | |; | ... and [9 more](https://codecov.io/gh/broadinstitute/gatk/pull/4213/diff?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4213#issuecomment-359306361:3391,test,test,3391,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4213#issuecomment-359306361,1,['test'],['test']
Testability,JvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `25.735% <0%> (-44.853%)` | `8% <0%> (-19%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `54.194% <0%> (-25.806%)` | `30% <0%> (-9%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9CYXNlUmVjYWxpYnJhdG9yU3BhcmtTaGFyZGVkLmphdmE=) | `0% <0%> (-22.807%)` | `0% <0%> (-2%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `61.538% <0%> (-15.385%)` | `9% <0%> (-2%)` | |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `78.947% <0%> (-10.526%)` | `6% <0%> (-1%)` | |; | [...institute/hellbender/exceptions/UserException.java](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9leGNlcHRpb25zL1VzZXJFeGNlcHRpb24uamF2YQ==) | `67.176% <0%> (-3.053%)` | `3% <0%> (ø)` | |; | ... and [8 more](https://codecov.io/gh/broadinstitute/gatk/pull/4214/diff?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4214#issuecomment-359307979:3383,test,test,3383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4214#issuecomment-359307979,1,['test'],['test']
Testability,JvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `25.735% <0%> (-44.853%)` | `8% <0%> (-19%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `54.194% <0%> (-25.806%)` | `30% <0%> (-9%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9CYXNlUmVjYWxpYnJhdG9yU3BhcmtTaGFyZGVkLmphdmE=) | `0% <0%> (-22.807%)` | `0% <0%> (-2%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `61.538% <0%> (-15.385%)` | `9% <0%> (-2%)` | |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `78.947% <0%> (-10.526%)` | `6% <0%> (-1%)` | |; | [...institute/hellbender/exceptions/UserException.java](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9leGNlcHRpb25zL1VzZXJFeGNlcHRpb24uamF2YQ==) | `67.176% <0%> (-3.053%)` | `3% <0%> (ø)` | |; | ... and [9 more](https://codecov.io/gh/broadinstitute/gatk/pull/4232/diff?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4232#issuecomment-359772526:3341,test,test,3341,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4232#issuecomment-359772526,1,['test'],['test']
Testability,JvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `25.735% <0%> (-44.853%)` | `8% <0%> (-19%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `54.194% <0%> (-25.806%)` | `30% <0%> (-9%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9CYXNlUmVjYWxpYnJhdG9yU3BhcmtTaGFyZGVkLmphdmE=) | `0% <0%> (-22.807%)` | `0% <0%> (-2%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `61.538% <0%> (-15.385%)` | `9% <0%> (-2%)` | |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `78.947% <0%> (-10.526%)` | `6% <0%> (-1%)` | |; | [...institute/hellbender/exceptions/UserException.java](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9leGNlcHRpb25zL1VzZXJFeGNlcHRpb24uamF2YQ==) | `67.176% <0%> (-3.053%)` | `3% <0%> (ø)` | |; | [...adinstitute/hellbender/engine/ReadsDataSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvUmVhZHNEYXRhU291cmNlLmphdmE=) | `89.394% <0%> (-3.03%)` | `61% <0%> (-2%)` | |; | ... and [7 more](https://codecov.io/gh/broadinstitute/gatk/pull/4217/diff?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4217#issuecomment-359382718:3045,test,test,3045,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4217#issuecomment-359382718,1,['test'],['test']
Testability,"K version in the ExcessHet documentation to 4.2.2.0, but we'll see if I need to revisit that.; - [x] Not quite sure about the `ReducibleAnnotation` business. Let me know how to make these changes, or else happy to punt and file an issue.; - [ ] Also not sure I've parsed the results of the Jenkins tests, at least in terms of comparing how many sites get hard filtered with/out the change. Where should I be looking at to see the baseline result for that step? Also looks like a lot of results for https://gotc-jenkins.dsp-techops.broadinstitute.org/job/warp-workflow-tests/11755/ were call-cached, is that to be expected? Haven't looked at these tests before, so maybe you can walk me through them at some point. But I guess we can be sure that the overall results don't change too much (at least for 50 samples), which is a good start.; - [x] Didn't quite get to making those plots of the change in decision boundary, will do that tomorrow or later this week. EDIT: Nevermind, took like 5 minutes to throw them together (albeit using the slow python implementation and some for loops...), see below.; - [x] Hmm, looks like my own PR #6885 might've introduced a few more exact match test failures...grr. Here are some plots for N = 50, 100, and 500 samples showing (in black) those counts that previously fell under the 3E-6 threshold with the mid-p correction but now pass without it. As you can see, not much to sweat from these ""theoretical"" plots, but good to convolve with the actual allele frequency spectrum and get an idea of how many sites occupy these black squares in practice (as well as start us down the road of reexamining the threshold itself):. ![image](https://user-images.githubusercontent.com/11076296/132413689-37f3dfeb-e3f5-4869-a803-fe27f3cd79bd.png); ![image](https://user-images.githubusercontent.com/11076296/132413649-d716ee7d-6763-4275-82de-e0e226dcb1de.png); ![image](https://user-images.githubusercontent.com/11076296/132413673-11f54f3f-975c-46ab-b874-ec37e461694f.png)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-914612907:1314,test,test,1314,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-914612907,1,['test'],['test']
Testability,KReadWriter.close(SAMFileGATKReadWriter.java:26); at org.broadinstitute.hellbender.tools.walkers.rnaseq.SplitNCigarReads.closeTool(SplitNCigarReads.java:193); at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:1064); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:140); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:[192](https://github.com/broadinstitute/gatk/actions/runs/5547450688/jobs/10131043668#step:12:192)); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:211); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:146); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:187); at org.broadinstitute.hellbender.CommandLineProgramTest.runCommandLine(CommandLineProgramTest.java:27); at org.broadinstitute.hellbender.testutils.CommandLineProgramTester.runCommandLine(CommandLineProgramTester.java:111); at org.broadinstitute.hellbender.tools.walkers.rnaseq.SplitNCigarReadsIntegrationTest.testLargeFileThatForcesSnappyUsage(SplitNCigarReadsIntegrationTest.java:85); Caused by:; htsjdk.samtools.util.RuntimeIOException: Write error; BinaryCodec in writemode; streamed file (filename not available); at htsjdk.samtools.util.BinaryCodec.writeBytes(BinaryCodec.java:222); at htsjdk.samtools.util.BlockCompressedOutputStream.writeGzipBlock(BlockCompressedOutputStream.java:444); at htsjdk.samtools.util.BlockCompressedOutputStream.deflateBlock(BlockCompressedOutputStream.java:408); at htsjdk.samtools.util.BlockCompressedOutputStream.write(BlockCompressedOutputStream.java:301); at htsjdk.samtools.util.BinaryCodec.writeBytes(BinaryCodec.java:220); at htsjdk.samtools.util.BinaryCodec.writeBytes(BinaryCodec.java:212); at htsjdk.samtools.BAMRecordCodec.encode(BAMRecordCodec.java:168); at htsjdk.samtools.BAMFileWriter.writeAl,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8404#issuecomment-1635002002:1740,test,testutils,1740,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8404#issuecomment-1635002002,1,['test'],['testutils']
Testability,"KSparkTool.java:541); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:31); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:139); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:191); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:210); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:163); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:149); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:190); at org.broadinstitute.hellbender.CommandLineProgramTest.runCommandLine(CommandLineProgramTest.java:27); at org.broadinstitute.hellbender.testutils.CommandLineProgramTester.runCommandLine(CommandLineProgramTester.java:107); at org.broadinstitute.hellbender.tools.HaplotypeCallerSparkIntegrationTest.testNonStrictVCFModeIsConsistentWithPastResults(HaplotypeCallerSparkIntegrationTest.java:109); Caused by:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 5.0 failed 1 times, most recent failure: Lost task 1.0 in stage 5.0 (TID 12, localhost, executor driver): java.util.ConcurrentModificationException; at java.util.ArrayList.sort(ArrayList.java:1464); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.readthreading.ReadThreadingAssembler.<init>(ReadThreadingAssembler.java:81); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerReadThreadingAssemblerArgumentCollection.makeReadThreadingAssembler(HaplotypeCallerReadThreadingAssemblerArgumentCollection.java:37); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.AssemblyBasedCallerArgumentCollection.createReadThreadingAssembler(AssemblyBasedCallerArgumentCollection.java:36); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerEngine.initialize(HaplotypeCallerEngine.java:",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6513#issuecomment-601702690:4217,test,testNonStrictVCFModeIsConsistentWithPastResults,4217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6513#issuecomment-601702690,1,['test'],['testNonStrictVCFModeIsConsistentWithPastResults']
Testability,"KTRACE\_ON\_USER\_EXCEPTION=true -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenomicsDBImport --genomicsdb-workspace-path /tmp/tmp.ceRdvv/GDB --intervals chr1:5149001-5201000 --tmp-dir /tmp/tmp.ceRdvv/GDB\_tmp --sample-name-map /tmp/tmp.ceRdvv/snmap --batch-size 100 --reader-threads 17. java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Djava.io.tmpdir=/tmp/tmp.ceRdvv -Xmx71680M -Xms71680M -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenotypeGVCFs --genomicsdb-use-vcf-codec -R /odinn/data/extdata/1000genomes/2019-06-21\_GRCh38/GRCh38\_full\_analysis\_set\_plus\_decoy\_hla.fa -V gendb:///tmp/tmp.ceRdvv/GDB --tmp-dir=/tmp/tmp.ceRdvv --interval-padding 1000 --only-output-calls-starting-in-intervals -L chr1:5161113-5163890 -O /tmp/tmp.ceRdvv/splitdir/reg\_5.padded.vcf.gz. **c) The entire error log if applicable.**. Running: ; ; java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Xmx1290240M -Xms1290240M -DGATK\_STACKTRACE\_ON\_USER\_EXCEPTION=true -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenomicsDBImport --genomicsdb-workspace-path /tmp/tmp.ceRdvv/GDB --intervals chr1:5149001-5201000 --tmp-dir /tmp/tmp.ceRdvv/GDB\_tmp --sample-name-map /tmp/tmp.ceRdvv/snmap --batch-size 100 --reader-threads 17 ; ; 20:05:36.112 INFO NativeLibraryLoader - Loading libgkl\_compression.so from jar:file:/nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar!/com/intel/gkl/native/libgkl\_compression.so ; ; Jul 27, 2020 8:05:40 PM shaded.cloud\_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine ; ; INFO: Failed to detect whether we are running on Google Compute Engine. ; ; 20:05:40.627 IN",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6742:2404,log,log,2404,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6742,1,['log'],['log']
Testability,K_11K.tiny.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting1.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.3.8-4-g7b0250253f.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg1.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg2.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg3.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg4.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg5.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:37598,test,test,37598,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"Keeping the dockstore as is for now because I may want to run this on a few shards from the 30k while it's still in review. This pr adds a fair amount of work to the bcftools task (ExtractAnAcAfFromVCF) and adds a significant number of columns to the schema: the sample count for all of the samples, as well as for each subpopulation. Note that AC_hemi will be added in a follow on pr; Note that additional validation tests will be added in a follow on pr",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7456:418,test,tests,418,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7456,1,['test'],['tests']
Testability,L21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9CYXNlUmVjYWxpYnJhdG9yU3BhcmtTaGFyZGVkLmphdmE=) | `0% <0%> (-23.729%)` | `0% <0%> (-2%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `55.263% <0%> (-19.079%)` | `30% <0%> (-8%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `70.37% <0%> (-11.111%)` | `10% <0%> (ø)` | |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `78.947% <0%> (-10.526%)` | `6% <0%> (-1%)` | |; | ... and [10 more](https://codecov.io/gh/broadinstitute/gatk/pull/3107?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3107#issuecomment-308136922:3604,test,test,3604,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3107#issuecomment-308136922,1,['test'],['test']
Testability,L21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9CYXNlUmVjYWxpYnJhdG9yU3BhcmtTaGFyZGVkLmphdmE=) | `0% <0%> (-23.729%)` | `0% <0%> (-2%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `55.263% <0%> (-19.079%)` | `30% <0%> (-8%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `70.37% <0%> (-11.111%)` | `10% <0%> (ø)` | |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `78.947% <0%> (-10.526%)` | `6% <0%> (-1%)` | |; | ... and [10 more](https://codecov.io/gh/broadinstitute/gatk/pull/3112?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-325405652:3595,test,test,3595,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-325405652,1,['test'],['test']
Testability,"Largely taken from Lee's sample code, see JIRA ticket for details. Spins up a Hail cluster and runs a script to extract from a VDS to VCF files on a per-chromosome basis. Includes some refactoring to move some of the workspace-sniffing that was part of bulk ingest into more generic utility code. In terms of cluster tracking:. - Cluster name is calculated in shell script and visible in the logs; - Cluster name is written to a file which is delocalized even if the workload script fails. . Unintended but useful example [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/a96667a7-e08c-43f4-abad-b55fbe7f0c06) where not only is the cluster name logged and written to an output file which is delocalized, but the cluster gets shut down anyway by cleanup code.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8525:392,log,logs,392,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8525,2,['log'],"['logged', 'logs']"
Testability,"Last week, spark 2.0.0 is formally released. However, when I tested gatk4 on spark2.0.0, I found they were incompatible. It seems that the interface isn't match. The error log looks like below. Exception in thread ""main"" java.lang.NoSuchMethodError: scala.collection.Seq.aggregate(Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;; at org.bdgenomics.adam.models.NonoverlappingRegions.mergeRegions(NonoverlappingRegions.scala:75); at org.bdgenomics.adam.models.NonoverlappingRegions.<init>(NonoverlappingRegions.scala:55); at org.bdgenomics.adam.models.NonoverlappingRegions$.apply(NonoverlappingRegions.scala:169); at org.bdgenomics.adam.util.TwoBitRecord$.apply(TwoBitFile.scala:193); at org.bdgenomics.adam.util.TwoBitFile$$anonfun$6.apply(TwoBitFile.scala:70); at org.bdgenomics.adam.util.TwoBitFile$$anonfun$6.apply(TwoBitFile.scala:70); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.immutable.HashMap$HashMap1.foreach(HashMap.scala:221); at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:428); at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:428); at scala.collection.TraversableLike$class.map(TraversableLike.scala:234); at scala.collection.AbstractTraversable.map(Traversable.scala:104); at org.bdgenomics.adam.util.TwoBitFile.<init>(TwoBitFile.scala:70); at org.broadinstitute.hellbender.engine.spark.datasources.ReferenceTwoBitSource.<init>(ReferenceTwoBitSource.java:43); at org.broadinstitute.hellbender.engine.datasources.ReferenceMultiSource.<init>(ReferenceMultiSource.java:41); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReference(GATKSparkTool.java:353); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.java:320); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2073:61,test,tested,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2073,2,"['log', 'test']","['log', 'tested']"
Testability,Lessons learned in VDS creation during Echo Scale Testing. Successful integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/9e6aa362-e25b-49d0-83cd-d64e926c6386).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8602:50,Test,Testing,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8602,1,['Test'],['Testing']
Testability,Let me know if you need me to rework the test data @magicDGS.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-463765960:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-463765960,1,['test'],['test']
Testability,Let's also add some tests for the HMM.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4043#issuecomment-355361719:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4043#issuecomment-355361719,1,['test'],['tests']
Testability,Let's be honest -- this is never going to happen. The goal is to move towards non-exact-match integration tests anyway.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3407#issuecomment-580901710:106,test,tests,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3407#issuecomment-580901710,1,['test'],['tests']
Testability,"Let's be rigorous and use two samples so that you're testing a case that could actually occur in the wild. It should be easy enough to add sample2 with PLs like [10,0,40,100,70,300]. Then can you add a comment about where the ""magic number"" in the assert statement comes from? Or maybe to be super duper rigorous you could compare the QUAL from that variant to the QUAL for sample3 and sample4 where 3 and 4 have the same PLs as 1 and 2, but without the spanning deletion.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4801#issuecomment-392147804:53,test,testing,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4801#issuecomment-392147804,2,"['assert', 'test']","['assert', 'testing']"
Testability,Let's consolidate them all into src/testUtils/java/org/broadinstitute/hellbender/testutils/VariantContextTestUtils.java,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5709:36,test,testUtils,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5709,2,['test'],"['testUtils', 'testutils']"
Testability,"Let's create a mock up of a possible future configuration setup using the Owner library (https://github.com/lviggiano/owner). For the mock up, I recommend we have two configuration files, one containing system properties and the other containing a few general engine settings. . We can select a few system properties from `gatk-launch` for inclusion in the system properties config file (eg., `samjdk.compression_level`, `samjdk.use_async_io_read_samtools`, etc.). . For the engine settings file, I recommend including `codecPackages` (a `List<String>` currently hardcoded in `FeatureManager.CODEC_PACKAGES`), `cloudPrefetchBuffer`/`cloudIndexPrefetchBuffer` (int values) from `GATKTool`, and `createOutputBamIndex` (boolean), also from `GATKTool`. As part of this, we'll have to prove that we can inject the system properties sufficiently early on that libraries such as htsjdk will pick them up.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3126:15,mock,mock,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3126,2,['mock'],['mock']
Testability,"Let's discuss more in person. It may be that the rounding is indeed a bug, but we'd want a regression test before we merge. For now, building a PoN using PCOV with noQC should be fine. (Note that QC is not the same as the filtering of targets/samples with too many zeros, etc., it specifically refers to the removal of samples with large events from the original PoN. But perhaps the ad hoc way this is done, along with the possible bug, is causing problems with the filtering step when creating the final PoN.) . Also, noQC is used in the WDL for a different reason---so that the small test BAMs can be used to build a PoN successfully. CreatePanelOfNormals belongs in the somatic workflow for now. You can think of it as a tool that produces a resource for denoising somatic samples. Eventually it will be replaced by gCNV, at which point we can discuss how the WDL should be organized. I can explain in more detail if you like.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3163#issuecomment-310879503:102,test,test,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3163#issuecomment-310879503,2,['test'],['test']
Testability,"Let's hear what others say, but I think I would strongly prefer to simply take over VariantEval in another repo if this was something you'd consider. I'd likely do much of what you propose anyway (certainly WRT testing); however, perhaps not the microscope we went through with the core GATK changes earlier. On plugins: I like what seems to be shaping up w/ Barclay. I carried over the Stratifier and Evaluator as plugins because it seems like it would make sense to allow tools to provide extensions (VariantEval, our tool, does). If I took this PR a step further, I would have migrated many arguments currently top-level on VariantEval into the plugins themselves (a good feature in Barclay). As an aside: I dont think VariantAnnotator is migrated yet, but we have many GATK3 plugins related to annotation, and hope that tool retains Annotator plugins when it get migrated. My impressions of barclay are probably a little out of date. I agree the main argument parsing framework is pretty robust. Specifically on plugins, it seems a little less so, or at least there are not many tools I visibly see exercising that part of the code. For example, there really should be a default implmentation or base class between Barclay's plugins and ReadFilter plugins. I'm guessing if more tools in GATK4 were using plugins this would have happened. I created something like this for VariantEval, and without a ton of work that could probably get generalized; however, doing so would throw a lot higher bar on me and as noted above I'm trying to take on less, not more at the moment. If we do take over VariantEval, I'm certainly happy to try to contribute code and experiences to improve the core, through more targeted PRs.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-407202501:211,test,testing,211,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-407202501,2,['test'],['testing']
Testability,Let's just measure the effect on memory usage with a single (WGS or WEX) bam. Can use something like `PrintReads` to do the test. Then we can make a decision based on the result.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2366#issuecomment-275440636:124,test,test,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2366#issuecomment-275440636,1,['test'],['test']
Testability,"Let's remove the option from the script, then, if it's causing a failure on our primary benchmarking sample.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4141#issuecomment-357355467:88,benchmark,benchmarking,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4141#issuecomment-357355467,1,['benchmark'],['benchmarking']
Testability,Let's test whether this fixes our longstanding auth issues on Spark before merging (https://github.com/broadinstitute/gatk/issues/3591) @jean-philippe-martin would you have time to test?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3855#issuecomment-345735118:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3855#issuecomment-345735118,2,['test'],['test']
Testability,"Like I said, I don't know enough to say if this approach is feasible, but sometimes it's possible to test an algorithm with a problem-generating function. This works well when it's easy to generate self-consistent solutions and test data consistent with a given solution. I was able to do this for some of the interval overlap functions on the python side of my code. Other methods were too complicated (for me to figure out anyway). Let's say you have an algorithm function f_algo that you want to test. You design a function test_data_factory that takes as input either a known solution, or a set of parameters from which it can easily generate a known solution (by a route that is logically distinct from the way f_algo works). Then f_tester generates and returns test_data. The flow looks like; ```; // get either random test solutions or some distinct set that tests particular edge cases; test_params = get_test_params();; test_solution = easy_solution_from_params(test_params);. test_data = test_data_factory(test_params, test_solution);; assert f_algo(test_data) == test_solution;; ```; In some sense you've already done that, but you've personally stepped in as test_data_factory(), and I'm wondering if it would be possible to automate that to get rid of all those numbers in the test code.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4677#issuecomment-384785429:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4677#issuecomment-384785429,8,"['assert', 'log', 'test']","['assert', 'logically', 'test', 'tests']"
Testability,"Likely an analogous problem to #1417. ```; ./gatk-launch MarkDuplicatesSpark -I file:///home/unix/louisb/flag_stat.bam -O file:///home/unix/louisb/testoutput.bam -- --sparkRunner SPARK --sparkMaster yarn-client; ```. results in:. ```; java.lang.IllegalArgumentException: Wrong FS: file:/home/unix/louisb/testoutput.bam, expected: hdfs://dataflow01.broadinstitute.org:8020; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:654); at org.apache.hadoop.hdfs.DistributedFileSystem.getPathName(DistributedFileSystem.java:193); at org.apache.hadoop.hdfs.DistributedFileSystem.access$000(DistributedFileSystem.java:105); at org.apache.hadoop.hdfs.DistributedFileSystem$12.doCall(DistributedFileSystem.java:645); at org.apache.hadoop.hdfs.DistributedFileSystem$12.doCall(DistributedFileSystem.java:641); at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81); at org.apache.hadoop.hdfs.DistributedFileSystem.delete(DistributedFileSystem.java:641); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.deleteHadoopFile(ReadsSparkSink.java:200); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.writeReadsSingle(ReadsSparkSink.java:191); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.writeReads(ReadsSparkSink.java:106); at org.broadinstitute.hellbender.tools.spark.transforms.markduplicates.MarkDuplicatesSpark.runTool(MarkDuplicatesSpark.java:94); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:257); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:98); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:146); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:165); at org.broadinstitute.h",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1451:147,test,testoutput,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1451,2,['test'],['testoutput']
Testability,Limit the number of parts we run the VAT pipeline on as a test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8780:58,test,test,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8780,1,['test'],['test']
Testability,"Limited manual eyeballing seem to suggest it's worth a try, and go large scale for more testing.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2072:88,test,testing,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2072,1,['test'],['testing']
Testability,"LineProgram.instanceMain(CommandLineProgram.java:211); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:203); at org.broadinstitute.hellbender.Main.main(Main.java:289); ```. #### Steps to reproduce. This is test script (test.sh) that is used.; ```; module load gatk; CRAM=$1; SAMPLE=$(basename $CRAM); SAMPLE=${SAMPLE/\.cram/}; mkdir -p gvcf.STR/$SAMPLE; mkdir -p gvcf.STR/$SAMPLE/tmp; gatk --java-options ""-Xmx16G"" ComposeSTRTableFile -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -O gvcf.STR/$SAMPLE/$SAMPLE.STR.table -I $CRAM; gatk --java-options ""-Xmx16G"" CalibrateDragstrModel -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa --str-table-path gvcf.STR/$SAMPLE/$SAMPLE.STR.table -O gvcf.STR/$SAMPLE/$SAMPLE.Dragstr.model -I $CRAM. ```; The script runs the ComposeSTRTableFile to produce the table that is then read by CalibrateDragstrModel. ; ```; ./test.sh /restricted/projectnb/casa/wgs.hg38/adni/cram/ADNI_002_S_0413.hg38.realign.bqsr.cram; Using GATK jar /share/pkg.7/gatk/4.2.0.0/install/bin/gatk-package-4.2.0.0-local.jar defined in environment variable GATK_LOCAL_JAR; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx16G -jar /share/pkg.7/gatk/4.2.0.0/install/bin/gatk-package-4.2.0.0-local.jar ComposeSTRTableFile -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -O gvcf.STR/ADNI_002_S_0413.hg38.realign.bqsr/ADNI_002_S_0413.hg38.realign.bqsr.STR.table -I /restricted/projectnb/casa/wgs.hg38/adni/cram/ADNI_002_S_0413.hg38.realign.bqsr.cram; 13:44:55.228 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/pkg.7/gatk/4.2.0.0/install/bin/gatk-package-4.2.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Apr 04, 2021 1:44:55 PM shaded.cloud_nio.com.googl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7182:3348,test,test,3348,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7182,1,['test'],['test']
Testability,Local WDL tests don't work with NIO (tasks with files declared as String),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5855:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5855,1,['test'],['tests']
Testability,"Locally tested and the exclude-filtered flag removes filtered rows; <img width=""1007"" alt=""Screen Shot 2021-05-25 at 7 09 22 PM"" src=""https://user-images.githubusercontent.com/6863459/119579588-b8e4b700-bd8c-11eb-858f-8a4c8bad152d.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7275:8,test,tested,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7275,1,['test'],['tested']
Testability,Locally testing does ok but when run in Travis you get an error consistently. The stack trace reads:. <pre>; org.broadinstitute.hellbender.tools.exome.allelefraction.AlleleFractionInitializerUnitTest.testInitialize FAILED; java.lang.AssertionError: expected [0.0] but found [-0.023368743794425884]; at org.testng.Assert.fail(Assert.java:94); at org.testng.Assert.failNotEquals(Assert.java:496); at org.testng.Assert.assertEquals(Assert.java:209); at org.testng.Assert.assertEquals(Assert.java:222); at org.broadinstitute.hellbender.tools.exome.allelefraction.AlleleFractionInitializerUnitTest.testInitialize(AlleleFractionInitializerUnitTest.java:41); </pre>,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1320:8,test,testing,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1320,18,"['Assert', 'assert', 'test']","['Assert', 'AssertionError', 'assertEquals', 'testInitialize', 'testing', 'testng']"
Testability,Logger always issues warning,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5692:0,Log,Logger,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5692,1,['Log'],['Logger']
Testability,Logging exceptions during deletion instead of throwing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6125:0,Log,Logging,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6125,1,['Log'],['Logging']
Testability,"Long story short, our accuracy on a horrible tumor with at least three contaminants is a bit better than ContEst's on normals with a single contaminant. . Note that as contamination gets really high our estimate starts to flatten out, which does not surprise me. I could put in logic to handle this case, but for now I'm content to be able to say that something is > 12%. I also think that restricting to rarer SNPs would improve accuracy, and at some point I'll test that idea.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3256#issuecomment-341518765:278,log,logic,278,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3256#issuecomment-341518765,2,"['log', 'test']","['logic', 'test']"
Testability,Look how much cleaner these tests are with the loader api. It would have saved me so much pain if we'd had it a month ago :/,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2106#issuecomment-241125956:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2106#issuecomment-241125956,1,['test'],['tests']
Testability,"Looking at the code in both GATK's `GenomicsDBImport` and the GenomicsDB library itself, I don't think the sample name map was ever intended as a mechanism to rename samples. It was just added as a way to avoid the up-front download of all the VCF headers. As evidence for this, we have a couple of asserts like this in the code:. ```; assert sampleName.equals(((VCFHeader) reader.getHeader()).getGenotypeSamples().get(0));; ```. However, using the map file to rename samples is a pretty natural thing for clients to want to do. At a minimum, we need to throw if a rename is attempted until sample renaming via the map file is officially supported and tested.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3814#issuecomment-343261932:299,assert,asserts,299,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3814#issuecomment-343261932,3,"['assert', 'test']","['assert', 'asserts', 'tested']"
Testability,"Looking at this again, plots in https://github.com/broadinstitute/gatk/issues/5764 might be useful. Probably OK to bump things up since the rest of inference will take up the bulk of runtime. Although I think one other consideration might be the WDL tests, since they run slow on Travis and already push the time limit. Perhaps set a lower value for those, if necessary? In any case, please double check all of this!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5754#issuecomment-923036252:250,test,tests,250,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5754#issuecomment-923036252,1,['test'],['tests']
Testability,"Looking at this example I would suspect that the problem is that all of the reads piled up on this site stop at position 14155455. We only see the PL=0,0,0 after position 14155446 in this GVCF. The GQ is determined by the GL calculation, the logic of which lives in `ReferenceConfidenceModel.doIndelRefConfCalc()`. Looking at that code it looks like it calculates the SNP GL and the Indel GL and chooses the most pessimistic outlook. Unfortunately every read at this site ends at 14155455, thus when we call out to `calcNReadsWithNoPlausibleIndelsReads()` we hit a snag since all of the reads in the sample have 9 bases left. If we check the documentation for that method we see the following line:; `Positions <= maxIndelSize from the end of the provided read/ref always return false`. This means that every read returns a value of false for indel informativeness since the result is too close to the end, thus we call into `getIndelPLs()` with a count of 0 informative reads, thus giving us the PL 0,0,0. . This seems like an inherent problem in Amplicon and other similar sequencing technology data.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6100#issuecomment-522732857:242,log,logic,242,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6100#issuecomment-522732857,1,['log'],['logic']
Testability,"Looking back at some Slack chatter with @mbabadi from September 2018, I was seeing some runs of GermlineCNVCaller that yielded slightly different results (mostly slight shifts in breakpoints). Not sure if this is still a problem (or if @vruano or @mwalker174 encountered this), but if so, we should check RNG seeds and initializations in the inference code. @mbabadi also raised the possibility of the choice of BLAS library introducing non-determinism. Results of DetermineGermlineContigPloidy were identical. Note also that PostprocessGermlineCNVCallsIntegrationTest checks for reproducibility on test files. See also #4375.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5730:599,test,test,599,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5730,1,['test'],['test']
Testability,Looks good - feel free to merge when tests are done.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6232#issuecomment-546514586:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6232#issuecomment-546514586,1,['test'],['tests']
Testability,Looks good -- this can be merged once tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7270#issuecomment-847188159:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7270#issuecomment-847188159,1,['test'],['tests']
Testability,Looks good to me except for one minor thing. Hopefully this does the trick! Thanks also for cutting down on the test runtime.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3140#issuecomment-309932124:112,test,test,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3140#issuecomment-309932124,1,['test'],['test']
Testability,"Looks great!. One quick note: I don't get the idea behind `Poisson` -- shouldn't we simply use negative binomials w/ modeled `mu_sj` and `alpha_sj`, evaluated at observed counts (`tt.arange(min_count, max_count + 1)`), and weighted with the number bins for each count (`_hist_sjm`)? i.e. if one observes an empirical distribution `P_obs(x)` rather than `x` draws, then the appropriate max likelihood objective function is `\sum_x P_obs(x) log P_model(x | \theta)`. Perhaps this is exactly what you've done and I don't get it. Another quick note: what I had in mind was _either_ modeling `mu_sj` at quantized ploidy states, _or_ let the ploidy state be unrestricted w/ a penalty via. a Bernoulli process (possibly w/ different per-contig penalties to account for e.g. higher rate of X/Y loss). We have enough samples in the cohort to select the quantized model (and those samples pin down the per-contig biases `b_j`). The samples that do not conform to quantized ploidy states can then choose whatever (variable) ploidy state they wish by paying a (hefty) price. We would also need to mask contigs that have variable ploidy calls from gCNV.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4371#issuecomment-376286536:439,log,log,439,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4371#issuecomment-376286536,2,['log'],['log']
Testability,Looks like a missing set of parentheses caused the logging output for HaplotypeCaller to become unusably flooded with garbage. @droazen we should really get this in before release.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7358:51,log,logging,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7358,1,['log'],['logging']
Testability,Looks like some VQSR tests that are not properly cleaning up after themselves.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4206#issuecomment-359011487:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4206#issuecomment-359011487,1,['test'],['tests']
Testability,Looks like some failures related to Spark tests and usage of the NIO library in Picard that we'll have to work through...,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8352#issuecomment-1581460929:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8352#issuecomment-1581460929,1,['test'],['tests']
Testability,Looks like tests are green with the latest commit. Now we just need a test that would have caught https://github.com/broadinstitute/gatk/issues/6179,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7700#issuecomment-1051136204:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7700#issuecomment-1051136204,2,['test'],"['test', 'tests']"
Testability,Looks like tests pass and this is ready to review.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2763#issuecomment-309138576:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2763#issuecomment-309138576,1,['test'],['tests']
Testability,Looks like the integration tests failed with an unrelated error -- I'll try re-running them.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7393#issuecomment-953190949:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7393#issuecomment-953190949,1,['test'],['tests']
Testability,Looks like the rebase has succeeded. I'm going to run the functional equivalence tests next.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1483249729:81,test,tests,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1483249729,1,['test'],['tests']
Testability,Looks like there was an R error in Carrot. Fortunately the actual meat of the Carrot test ran to completion (for the CHM) I have also checked that this matches for the exome and the NIST sample. I would say that these samples are exactly matching in terms of their VCFeval output and thus we can be confident that this branch did not break the standard pipeline path and we can call this 👍. ```; Type | Precision | Recall | F1_Score | TP_Eval | TP_Base | FP | FN | Stratifier | IGV_Session | UNK | Name | Truth_Set | Summary_Type | Comparison_Engine; -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --; SNP | 0.9706 | 0.9863 | 0.9784 | 3473278 | 3489284 | 105213 | 48308 | NA | gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/7012fa81-18fd-4c9c-8722-22c9d7fa642d/call-CHMSampleHeadToHead/BenchmarkComparison/ae3dcac7-7105-4847-ac07-f9f64a43c4c8/call-BenchmarkVCFControlSample/Benchmark/67f50e9a-e7a3-4b31-9d14-d700b46ddfa5/call-VcfEvalWriteXMLfile/shard-0/CONTROLSNAPSHOT2018HG002_CHM_GRCh38_SYNDIPv20180222_vcfeval.xml | 539662 | CONTROLSNAPSHOT2018HG002 | CHM_GRCh38_SYNDIPv20180222 | summary | VcfEval; INDEL | 0.8814 | 0.8636 | 0.8724 | 485076 | 465627 | 65264 | 73548 | NA | gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/7012fa81-18fd-4c9c-8722-22c9d7fa642d/call-CHMSampleHeadToHead/BenchmarkComparison/ae3dcac7-7105-4847-ac07-f9f64a43c4c8/call-BenchmarkVCFControlSample/Benchmark/67f50e9a-e7a3-4b31-9d14-d700b46ddfa5/call-VcfEvalWriteXMLfile/shard-0/CONTROLSNAPSHOT2018HG002_CHM_GRCh38_SYNDIPv20180222_vcfeval.xml | 429205 | CONTROLSNAPSHOT2018HG002 | CHM_GRCh38_SYNDIPv20180222 | summary | VcfEval; Type | Precision | Recall | F1_Score | TP_Eval | TP_Base | FP | FN | Stratifier | IGV_Session | UNK | Name | Truth_Set | Summary_Type | Comparison_Engine; SNP | 0.9743 | 0.99 | 0.9821 | 3384890 | 3391796 | 89358 | 34303 | HCR | gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/7012fa81-18fd-,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1850884297:85,test,test,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1850884297,5,"['Benchmark', 'test']","['Benchmark', 'BenchmarkComparison', 'BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated', 'test']"
Testability,Looks like there were some test failures @lbergelson ?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7149#issuecomment-801356977:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7149#issuecomment-801356977,1,['test'],['test']
Testability,"Looks like these were just deprecated, so they should be ok. :+1: when tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4210#issuecomment-359072893:71,test,tests,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4210#issuecomment-359072893,1,['test'],['tests']
Testability,"Looks like this page may have a hint on the code to use in the ""proliferation test"":. https://stackoverflow.com/questions/930289/how-can-i-find-all-the-methods-that-call-a-given-method-in-java",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3796#issuecomment-342223285:78,test,test,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3796#issuecomment-342223285,1,['test'],['test']
Testability,Lots of files are changed because I changed the key name for RAW_MQ to include `_DEPRECATED` and because I turned off the command line output in some of the test VCFs to save myself some pain later.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6276#issuecomment-557643712:157,test,test,157,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6276#issuecomment-557643712,1,['test'],['test']
Testability,"Lots of refactoring was done for the Segmenter classes in #6499. At least for segmentation, all use cases (CR-only, AF-only, CR+AF, single-sample, multi-sample) now go through `MultisampleMultidimensionalKernelSegmenter`. `AlleleFractionKernelSegmenter` and `CopyRatioKernelSegmenter` classes still exist, but both simply call the `MultisampleMultidimensionalKernelSegmenter` class; this was done so preexisting tests for those two classes could be reused. I'm fine with calling this done. We can always open a new issue in the unlikely event we refactor the modelling code.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5625#issuecomment-900609908:412,test,tests,412,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5625#issuecomment-900609908,2,['test'],['tests']
Testability,"Lots of the test input VCFs (and some expected test VCFs) are invalid: GQs that don't match their PLs (which should get fixed by the time I'm done with #3404 ), the wrong number of PLs for the alleles in the VC (src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/vcfexample.loseAlleleInSelection.vcf) and probably more issues too. It's hard to be confident our output VCFs are correct when the expected behavior is sometimes wrong. Ideally we should run GATK ValidateVariants and/or vcftools validate on all the test VCFs (input and expected) and ensure files are valid where weren't not testing format/parsing issues.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3407:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3407,5,['test'],"['test', 'testing']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa332776f-175a-4595-bdeb-ab62e7f89921%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F362a3e75-6a39-4bde-bb79-e6562dc66dd9%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fefb51584-614a-4702-bc80-17a6a388e888%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2Fea5e6517-663b-4cfb-b264-0dc933da9ae3%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fefb51584-614a-4702-bc80-17a6a388e888%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F086dd5e8-74c8-4603-b618-a70d77398545%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|90.94291388888888|; |NIST controlHCsystemhours|0.182125|; |NIST controlHCwallclockhours|63.56370277777778|; |NIST controlHCwallclockmax|3.701625|; |NIST controlMonitoringLogs|[View in the GCS Console](,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202:2843,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2843,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F2a8ce326-baa5-4052-bff9-bd684393ff6c%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa1db35b8-cc7b-4019-bdd0-9f423762542e%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F5c4f9069-86b3-4d8c-b765-38a67169e4b4%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F2a8ce326-baa5-4052-bff9-bd684393ff6c%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F688ca200-89b9-479b-b701-5fa0b0854778%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F59d8f8b1-1323-4e56-a1b1-0b1b2c8f2cc0%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F2a8ce326-baa5-4052-bff9-bd684393ff6c%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F688ca200-89b9-479b-b701-5fa0b0854778%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F1b8ccc58-1ead-4443-b6a8-64f767abfc70%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|90.94291388888888|; |NIST controlHCsystemhours|0.182125|; |NIST controlHCwallclockhours|63.56370277777778|; |NIST controlHCwallclockmax|3.701625|; |NIST controlMonitoringLogs|[View in the GCS Console](,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748:2832,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2832,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F43bcefb2-f38b-413d-9b65-06b489e64af1%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F258eacc8-3768-44a8-86dc-1b2b0516a553%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F6b8eb5cf-ee16-48e8-a24f-de149e2eded2%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F43bcefb2-f38b-413d-9b65-06b489e64af1%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Ffa676046-ddfe-4ce8-9193-87025fd9a49b%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F8c5c120e-b932-47b0-a592-a719021e6bf9%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F43bcefb2-f38b-413d-9b65-06b489e64af1%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Ffa676046-ddfe-4ce8-9193-87025fd9a49b%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Fb683956e-cbfb-4550-978b-cd6a28bf12a4%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|103.80716111111109|; |NIST controlHCsystemhours|0.20777777777777773|; |NIST controlHCwallclockhours|76.1228972222222|; |NIST controlHCwallclockmax|4.163775|; |NIST controlMonitoringLogs|[View in the GC,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8332#issuecomment-1574622123:2819,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2819,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8332#issuecomment-1574622123,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F81dbf637-d90c-4111-93b9-9cec426c5a39%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F3609bc35-c943-4006-8b6f-9d71e6c68ef5%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Fa2486748-6d71-463f-bf78-84627e64f2d1%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F81dbf637-d90c-4111-93b9-9cec426c5a39%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fa8851b03-1abb-4622-b481-5425ce01418b%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F7730c81c-23aa-4802-9fc0-34528b6158d4%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F81dbf637-d90c-4111-93b9-9cec426c5a39%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fa8851b03-1abb-4622-b481-5425ce01418b%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F7d946274-eb9e-4be8-b04f-c1b3399d4068%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|108.55041388888888|; |NIST controlHCsystemhours|0.2213388888888889|; |NIST controlHCwallclockhours|78.14672499999998|; |NIST controlHCwallclockmax|4.031741666666667|; |NIST controlMonitoringLogs|[View ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8485#issuecomment-1684837497:2821,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2821,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8485#issuecomment-1684837497,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F89508d5f-29f1-4534-9fe1-220a80de17c4%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa2a2515a-b32a-44a6-a6d1-9a6d0d2199bb%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F76484c8b-d024-45b4-b1e0-2ff2b9adf2c0%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F89508d5f-29f1-4534-9fe1-220a80de17c4%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F1269d993-e13f-4635-a12a-e65fdaa4ed16%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F492b823a-1e34-46cd-b842-5f042bb31ee8%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F89508d5f-29f1-4534-9fe1-220a80de17c4%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F1269d993-e13f-4635-a12a-e65fdaa4ed16%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F834b6562-65d7-4daf-857a-d9118a6456b7%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|90.94291388888888|; |NIST controlHCsystemhours|0.182125|; |NIST controlHCwallclockhours|63.56370277777778|; |NIST controlHCwallclockmax|3.701625|; |NIST controlMonitoringLogs|[View in the GCS Console](,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382:2830,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2830,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9bc521dc-3c4c-4274-972c-9d1e4be850d5%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F092bfb4f-d978-4964-a8ae-e5a7f7362f7c%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Fe167fc81-8ff7-44bd-b5bd-291161e3967e%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9bc521dc-3c4c-4274-972c-9d1e4be850d5%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F5bf5f11a-64cb-4b50-8d05-b61b7f4c803c%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2Fc64dbce6-4a90-42c0-a84b-59857afb98a5%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9bc521dc-3c4c-4274-972c-9d1e4be850d5%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F5bf5f11a-64cb-4b50-8d05-b61b7f4c803c%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Fd501a36a-a881-4e5c-9499-ef7dea22980f%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|90.94291388888888|; |NIST controlHCsystemhours|0.182125|; |NIST controlHCwallclockhours|63.56370277777778|; |NIST controlHCwallclockmax|3.701625|; |NIST controlMonitoringLogs|[View in the GCS Console](,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590:2831,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2831,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9c49383b-01a9-4bc0-90fa-cde7e1090a47%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fdeb85607-d693-4232-a4da-0fb88dd29cad%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Fa15fdeb6-16e8-48d7-82cb-168726f4dc18%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9c49383b-01a9-4bc0-90fa-cde7e1090a47%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F75ea4d64-414f-43aa-a8d6-9c34870b1491%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F0f001ca8-d7af-4d01-b9ef-d6ddbe35317d%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9c49383b-01a9-4bc0-90fa-cde7e1090a47%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F75ea4d64-414f-43aa-a8d6-9c34870b1491%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F540fbadc-ba57-4012-8ff1-76461ecb7bb3%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|99.85891111111113|; |NIST controlHCsystemhours|0.17817777777777768|; |NIST controlHCwallclockhours|70.22329166666665|; |NIST controlHCwallclockmax|3.8036305555555554|; |NIST controlMonitoringLogs|[View,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1549231169:2807,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2807,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1549231169,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Facc9e2ac-b10a-4d6a-b586-cd3e47f04e41%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F1731c546-7466-4adf-9790-3f99d07df05b%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F8e83736f-3023-4bee-9c42-36c836b75297%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Facc9e2ac-b10a-4d6a-b586-cd3e47f04e41%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fa98aa003-bddd-492a-8691-dfa50191e2c6%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2Fa332ee8c-3de3-4a6f-b1de-7b273c094e84%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Facc9e2ac-b10a-4d6a-b586-cd3e47f04e41%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fa98aa003-bddd-492a-8691-dfa50191e2c6%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F269b49fd-36aa-4381-a08a-a3f2a4586967%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|103.49216944444444|; |NIST controlHCsystemhours|0.21042500000000003|; |NIST controlHCwallclockhours|74.8884888888889|; |NIST controlHCwallclockmax|3.995058333333333|; |NIST controlMonitoringLogs|[View ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1550601099:2819,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2819,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1550601099,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fba9f32d5-7b46-462c-8d1f-5692eee05534%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fb7ddd5f2-fded-4076-b163-33ad637fb5bd%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Fc718736b-bf86-491f-9f9c-56c07cbd0c90%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fba9f32d5-7b46-462c-8d1f-5692eee05534%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F85b07a68-f04f-4396-80b4-f153b2d0020d%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2Fefb3b5ff-3860-46c3-8c6c-9141d1ff0e0a%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fba9f32d5-7b46-462c-8d1f-5692eee05534%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F85b07a68-f04f-4396-80b4-f153b2d0020d%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F272d076b-7300-4ea4-bbf7-d63f80fad94b%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|108.95665833333332|; |NIST controlHCsystemhours|0.21568055555555551|; |NIST controlHCwallclockhours|78.62844166666666|; |NIST controlHCwallclockmax|4.166558333333334|; |NIST controlMonitoringLogs|[View,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8467#issuecomment-1687811441:2813,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2813,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8467#issuecomment-1687811441,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fbeb77715-227e-4dbd-803f-4458c83607c8%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Ff1b0b4cf-1a3f-47b3-84fa-529f118419ce%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F4353eabb-b85f-4cce-a275-4dba68f9d644%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fbeb77715-227e-4dbd-803f-4458c83607c8%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fbec4eb1e-a99f-4e27-a91c-a56274c3824a%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F4d248a53-86e2-46f5-9d28-3364c82b9d0c%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fbeb77715-227e-4dbd-803f-4458c83607c8%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fbec4eb1e-a99f-4e27-a91c-a56274c3824a%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2Ffcd023fe-e278-475d-8fce-613b57518972%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|96.55857222222222|; |NIST controlHCsystemhours|0.1707444444444444|; |NIST controlHCwallclockhours|69.28645|; |NIST controlHCwallclockmax|3.8631972222222224|; |NIST controlMonitoringLogs|[View in the GC,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1546478988:2822,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2822,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1546478988,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff61c0caa-70a3-4ee5-8542-e78ba8364985%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F394f0e4c-4f60-420b-8477-3199ef269728%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F02bfdee5-dde8-4c1d-b628-b21e4512fd42%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff61c0caa-70a3-4ee5-8542-e78ba8364985%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fba4f3a3f-c40c-4037-837a-0bf9a85d0ece%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F61548750-761a-42ff-8d40-c80f94866dcd%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff61c0caa-70a3-4ee5-8542-e78ba8364985%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2Fba4f3a3f-c40c-4037-837a-0bf9a85d0ece%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F476aa516-7233-4df2-8fc5-83b3f2df9eb6%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|95.8154|; |NIST controlHCsystemhours|0.1727638888888889|; |NIST controlHCwallclockhours|69.03862222222223|; |NIST controlHCwallclockmax|3.457286111111111|; |NIST controlMonitoringLogs|[View in the GCS ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535665125:2821,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2821,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535665125,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff7eac327-c59c-43f7-a850-21bc3e0ccf52%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fcd28fe49-1672-4321-a836-47f76419c1c8%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F83a51739-dd4e-4f2d-b09a-3c78b132fbf1%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 controlindelF1Score|0.727|; |EXOME1 controlindelPrecision|0.632|; |EXOME1 controlsnpF1Score|0.9878|; |EXOME1 controlsnpPrecision|0.9815|; |EXOME1 controlsnpRecall|0.9941|; |EXOME1 controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff7eac327-c59c-43f7-a850-21bc3e0ccf52%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F3b586c16-feb0-4cdd-8850-8426205cced2%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F31dfb54a-9ecc-4af2-9fcd-ea9af745342e%2Fcall-CombineSummaries%2Fsummary.csv)|; |EXOME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff7eac327-c59c-43f7-a850-21bc3e0ccf52%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F3b586c16-feb0-4cdd-8850-8426205cced2%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F7c7e45ee-4fe9-48e6-b8ed-cd4372c9e726%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|90.94291388888888|; |NIST controlHCsystemhours|0.182125|; |NIST controlHCwallclockhours|63.56370277777778|; |NIST controlHCwallclockmax|3.701625|; |NIST controlMonitoringLogs|[View in the GCS Console](,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672:2831,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,2831,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,M src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeLikelihoodCalculator.java (2); > M src/main/java/org/broadinstitute/hellbender/utils/genotyper/ReadLikelihoods.java (6); > M src/main/java/org/broadinstitute/hellbender/utils/genotyper/SampleList.java (2); > M src/main/java/org/broadinstitute/hellbender/utils/pairhmm/LoglessPairHMM.java (1); > M src/main/java/org/broadinstitute/hellbender/utils/pairhmm/PairHMM.java (29); > D src/test/java/org/broadinstitute/hellbender/tools/spark/sv/AlignAssembledContigsSparkTest.java (50); > M src/test/java/org/broadinstitute/hellbender/tools/spark/sv/AlignmentRegionTest.java (45); > M src/test/java/org/broadinstitute/hellbender/tools/spark/sv/ContigAlignerTest.java (16); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/ContigsCollectionUnitTest.java (121); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/InversionReadLikelihoodCalculatorUnitTest.java (28); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/LocalAssemblyContigUnitTest.java (28); > M src/test/java/org/broadinstitute/hellbender/tools/spark/sv/RunSGAViaProcessBuilderOnSparkUnitTest.java (6); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/SVFastqUtilsUnitTest.java (186); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/SVJunctionUnitTest.java (204); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/SingleDiploidSampleBiallelicInversionGenotyperSparkUnitTest.java (177); > A src/test/java/org/broadinstitute/hellbender/tools/spark/sv/SingleDiploidSampleBiallelicSVGenotyperSparkUnitTest.java (307); > D src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/RunSGAViaProcessBuilderOnSpark/4.raw.pp.ec.filter.pass.merged.fa (84); > D src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/RunSGAViaProcessBuilderOnSpark/4.raw.pp.ec.filter.pass.merged.rmdup-contigs.fa (22); > D src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/RunSGAViaProc,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2189#issuecomment-250052886:3052,test,test,3052,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2189#issuecomment-250052886,1,['test'],['test']
Testability,"M2 WDL tests failed due to a transient 429 ""too many requests"" error -- re-running them.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8715#issuecomment-1984346355:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8715#issuecomment-1984346355,1,['test'],['tests']
Testability,M2 WDL tests had a transient failure on this branch -- re-running them.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3140#issuecomment-311466607:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3140#issuecomment-311466607,1,['test'],['tests']
Testability,M2 doesn't use very short stubs of clipped reads for genotyping,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5057:26,stub,stubs,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5057,1,['stub'],['stubs']
Testability,M2 getting thrown off by clipped read stubs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5060:38,stub,stubs,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5060,1,['stub'],['stubs']
Testability,"MASSIVE bug fixes and test updates. (Rebased 61 commits). - Fixed a bug when variants overlap the end of transcripts. - Updated logging in FuncotatorUtils::getAlignedRefAllele. - Fixed a bug in identifying splice sites for intronic regions. - Fixed a bug in FuncotatorUtils::isIndelBetweenCodons that caused issues; on reverse stranded variants. - Added in regression test data input files and expected files.; - Updated regression test sets to include only unique variants.; - Added in a 5' flank and a Start Codon insertion to regression test set. - Fixed a bug in FuncotatorUtils::isIndelBetweenCodons. - Finally fixed a bug with indels and start codons:; Now indels in start codons will not have protein renderings, nor will; they have codon change strings. This brings Funcotator closer to; Oncotator functionality (in Oncotator, start codon insertions/deletions; do not have protein change strings or codon change strings). - Fixed a bug in ordering transcripts by appris ranking. - Fixed a minor bug in how other transcripts are generated:.; With RNA/LINCRNA transcripts, the protein change would be null and was; append ed to the end of each `other transcript`. Now the null is no; longer appended. - Fixed a bug in insertions on the - strand:; All insertions on - strand had incorrectly rendered genome changes,; coding sequence changes, and protein changes.; This is due to how these fields are generated from the reference; sequence. - Fixed a bug (insertions on - strand):; Insertions on the - strand would have incorrect reference; sequences/alleles.; Now they are handled as a special case when computing the aligned; reference allele. - Fixed a bug in transcript selection for GencodeFuncotationFactory:; The LocusLevel / Curation Level was being incorrectly pulled from the; GENE features, rather than the TRANSCRIPT features that contain each; variant. As a result, the order in which representative transcripts; were chosen was wrong. The TRANSCRIPT feature is now being used to; det",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5302:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5302,5,"['log', 'test']","['logging', 'test']"
Testability,"ME1_controlLabel"": ""CONTROLSNAPSHOT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_controlMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_control_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_controlRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_control_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_controlVcf"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_control_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_controlVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_control_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_evalLabel"": ""TESTSNAPSHOT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.EXOME1_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_truthLabel"": ""NA12878_GRCh38_TWISTExome"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/GIAB_v3.3.2_NA12878_hg38.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.EXOME1_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/GIAB_v3.3.2_NA12878_hg38.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_confidenceInterval"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark_noinconsistent.bed"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_controlLabel"": ""CONTROLSNAPSHOT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_controlMonitoringExample"": ""test_outpu",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533286508:7069,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,7069,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533286508,76,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"MIN_DP: If I use BCF2Codec, the assertion function fails saying that MIN_DP values from GenomicsDB is 27, whereas the one found in combined GVCF is 27.0. The type of MIN_DP in the headers in memory is Integer and 27.0 doesn't appear anywhere in the combined GVCF provided. If I use VCFCodec, this problem goes away. I stopped looking here. ExcessHet: We did not have a combine operation defined for ExcessHet in GenomicsDB, hence it was ignored while generating the combined vcf. The assertion function failed as it saw the field missing. We have added VCF_FIELD_COMBINE_OPERATION_MEDIAN this now in GenomicsDB.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-293984438:32,assert,assertion,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-293984438,2,['assert'],['assertion']
Testability,Made change suggested by Ted Sharpe (write contigIDToName instead of contigNameToID). Will merge after tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3691#issuecomment-336897619:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3691#issuecomment-336897619,1,['test'],['tests']
Testability,Made sure that HaplotypeCaller handles stubs correctly -- this completes issue #5079,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5471:39,stub,stubs,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5471,1,['stub'],['stubs']
Testability,Main.java:149); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:190); 	at org.broadinstitute.hellbender.tools.walkers.vqsr.CNNVariantPipelineTest.testTrainingReadModel(CNNVariantPipelineTest.java:85); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestCla,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6307:3429,test,testng,3429,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6307,1,['test'],['testng']
Testability,"Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); Caused by: java.io.FileNotFoundException: /tmp/test%20a/data/calling/a.vcf.gz (No such file or directory); at java.io.RandomAccessFile.open0(Native Method); at java.io.RandomAccessFile.open(RandomAccessFile.java:316); at java.io.RandomAccessFile.<init>(RandomAccessFile.java:243); at htsjdk.samtools.seekablestream.SeekableFileStream.<init>(SeekableFileStream.java:47); at htsjdk.samtools.seekablestream.SeekableStreamFactory$DefaultSeekableStreamFactory.getStreamFor(SeekableStreamFactory.java:99); at htsjdk.tribble.readers.TabixReader.<init>(TabixReader.java:129); at htsjdk.tribble.TabixFeatureReader.<init>(TabixFeatureReader.java:80); at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:117); ... 9 more; ```. #### Steps to reproduce; Below few steps to reproduce the bug and the specificities mentioned above. ```bash; # Create test directory without whitespace; cd /tmp; mkdir -p test-a/data/calling/; cd test-a. # Upload appropriate VCFs in data/calling. # Run MergeVcfs; gatk MergeVcfs -I data/calling/a.vcf.gz -I data/calling/b.vcf.gz -O c.vcf.gz ## It runs as expected. # Introduce a whitespace in the directory name and move into the directory again; cd ..; mv test-a ""test a""; cd ""test a"". # Run MergeVcfs; gatk MergeVcfs -I data/calling/a.vcf.gz -I data/calling/b.vcf.gz -O c.vcf.gz ## It throws an error. # Introduce withespace in the VCFs; mv data/calling/a.vcf.gz -I data/calling/a\ 1.vcf.gz; mv data/calling/b.vcf.gz -I data/calling/b\ 1.vcf.gz. # Run MergeVcfs; gatk MergeVcfs -I data/calling/a\ 1.vcf.gz -I data/calling/b\ 1.vcf.gz -O c.vcf.gz ## It runs as expected. # If VCFs without whitespace in their names are moved into data or in the current working directory (""test a""), merging works as expected.; ```. #### Expected behavior; MergeVcfs should be able to handle whitespace when present anywhere in the file path. #### Actual behavior; It does not.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664:4748,test,test-a,4748,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664,4,['test'],"['test', 'test-a']"
Testability,Make Java's default logs respect our verbosity setting,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/807:20,log,logs,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/807,1,['log'],['logs']
Testability,Make PathSeq test BAMs pass ValidateSamFile,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3204:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3204,2,['test'],['test']
Testability,Make directory name unique for BucketUtilsTest#testDirSizeGCS to avoi…,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3547:47,test,testDirSizeGCS,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3547,1,['test'],['testDirSizeGCS']
Testability,Make it easier for test authors to make their tests toggle-able between different dataflow backends,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/561:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/561,2,['test'],"['test', 'tests']"
Testability,Make sure GenomicsDB tests test with both BCF and VCF,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2460:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2460,2,['test'],"['test', 'tests']"
Testability,"Make the logging frequency used by the ProgressLogger available as an input. If not used, sets the default value. Variants team is using a branch of gatk and have made this change there, so pulling this change into master to simplify future merges / branch updates.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8662:9,log,logging,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8662,1,['log'],['logging']
Testability,"Makes CreateVariantIngestFiles robust to partially or fully loaded samples. Commit 21828af8f5a925cc331dce6093c0d510042d7b64 is what I actually propose to merge, while commit de673204183a4c45059dc9ea4e05868e2ea6ae59 randomly injects failures covering all the known failure modes. I tested these changes using both commits and was able to verify that partially loaded samples were handled correctly on subsequent attempts to load the sample (unfortunately we can't actually prevent these partial loadings from happening in the first place because preemptions, among other possible reasons).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7843:281,test,tested,281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7843,1,['test'],['tested']
Testability,"Makes `CreateVariantIngestFiles` robust to partially or fully loaded samples. Commit a8dc5ea89653a7f94588aa040b49d0264d17f72d is what I actually propose to merge, while commit 118a44604343e8f77d53bcc6545b2360fefbe1cc randomly injects failures covering all the known failure modes. I tested these changes using both commits and was able to verify that partially loaded samples were handled correctly on subsequent attempts to load the sample (unfortunately we can't actually prevent these partial loadings from happening in the first place because preemptions, among other possible reasons).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7831:283,test,tested,283,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7831,1,['test'],['tested']
Testability,Making java.util.logging obey our verbosity setting; setting our logging level to WARN in tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/922:17,log,logging,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/922,3,"['log', 'test']","['logging', 'tests']"
Testability,"Making the CollectAllelicCounts tool a LocusWalker. . Some notes:. - had to create indices for bam files.; - had to convert a sam file to a bam file so that I could index it.; - Made test bam files have reads that pass wellformed read filter.; - deleted a test that would no longer throw an exception, since the reads all passed wellformed read filter.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3203:183,test,test,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3203,2,['test'],['test']
Testability,"MalformedReadFilter should be on by default but that requires fixing some tests. . from @droazen ""Also, there was some level of discontent in the past with the fact that MalformedReadFilter could not be disabled without modifying source code. We should at least provide something like a --disable_all_read_filters argument (assuming we're not going to bother for now with the ability to control read filters in a more fine-grained fashion from the command line).""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/180:74,test,tests,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/180,1,['test'],['tests']
Testability,"MannWhitneyU was re-written from scratch in 2016 in GATK3,; but these changes never got ported to GATK4. This new version; produces significantly different results from the version; currently in GATK4, resulting in VERY different values for the; RankSumTest annotations in HaplotypeCaller output. @meganshand informs me that the updated GATK3 version has been; validated in R, and has much better tests than the old version. This is a straightforward port of that version with minimal changes:. -Merged ""MWUnitTest"" and ""RankSumUnitTest"" from GATK3 into a single; test class MannWhitneyUUnitTest; -Ported MathUtils.binomialCoefficient() and wrote new test for it; -Updated RankSumTest class and tests as appropriate. I've confirmed that with this change, the RankSum annotations produced; by the GATK4 HaplotypeCaller closely match those produced by the GATK3; HaplotypeCaller. Resolves #2604",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2605:397,test,tests,397,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2605,4,['test'],"['test', 'tests']"
Testability,Many of the Picard tools we'd like to port have no existing unit tests. We should write them and then backport them to Picard. Let's keep track of them here:. picard.sam:; AddOrReplaceReadGroups; BamIndexStats; BuildBamIndex; CalculateReadGroupChecksum; CheckTerminatorBlock; DownsampleSam; EstimateLibraryComplexity?; FilterReads; FixMateInformation; ReorderSam; ReplaceSamHeader; RevertOriginalBaseQualitiesAndAddMateCigar; SortSam. TODO other packages,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/144:65,test,tests,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/144,1,['test'],['tests']
Testability,"Many of the pull requests are not using [`CommandLineProgramTest.runCommandLine()`](https://github.com/broadinstitute/hellbender/blob/c6b41e6da8c9ea3f03206a25ce4ad74312b154f0/src/test/java/org/broadinstitute/gatk/CommandLineProgramTest.java). I'm assuming this is because we have not settled on a way to `Assert` that outputs are similar after running a hellbender command line. This issue should resolve with a definition how far one should test before a pull request is accepted. After an arbitrary low level patch to the codebase, I believe the GATK [`MD5DB`](https://github.com/broadgsa/gatk/blob/3b67b448072e24c80779b2e1cbc9dcfcb5dce4cf/public/gatk-tools-public/src/test/java/org/broadinstitute/gatk/utils/MD5DB.java) and [`DiffEngine`](https://github.com/broadgsa/gatk/blob/3b67b448072e24c80779b2e1cbc9dcfcb5dce4cf/public/gatk-tools-public/src/main/java/org/broadinstitute/gatk/engine/walkers/diffengine/DiffEngine.java) are considered too hard to verify-and-update en masse. This limitation would also apply to external framework test utilities, such as TestNG's `FileAssert.assertLength()`. A 2009 discussion of file comparators is archived [here](http://stackoverflow.com/questions/466841/comparing-text-files-w-junit). Ultimately, I believe the biggest pain point with the `MD5DB` is that there does not exist a quick way to a) diagnose what has changed and b) to then update all hundreds of expected outputs. As in `DiffEngine`, we could define a way to regression test that only certain aspects of common file types aren't changing (exact number of reads in BAMs, or exact number of variants in BCF), or that values are falling within a certain range (number of quality scores all above 30 under 60), etc. As for updating results, instead of embedding the expected `MD5DB` outputs in a hundreds of java test files, one could also externalize _all_ of the expected outputs to another file (json, flat text, etc.) such that this singular sorted file for the entire test suite may be updated ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/69:179,test,test,179,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/69,4,"['Assert', 'test']","['Assert', 'test']"
Testability,Many test VCFs are invalid,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3407:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3407,1,['test'],['test']
Testability,"Many tools in our world require going from log-space to linear-space and back using log10 and exp. These are slow functions and are usually used on an array (typically of length 3) of doubles. It would be great to have a ; ```; log10OfArray(double[] array) ; ```; and; ```; expOfArray(double[] array, base); ```; functions to enable fast computation of logs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2577:43,log,log-space,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2577,2,['log'],"['log-space', 'logs']"
Testability,MarkDuplicates Spark output needs to tested against the version of picard they use in production to ensure that it produces identical output and is reasonably robust to pathological files. This requires that the following issues have been resolved:; #3705 ; #3706,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4675:37,test,tested,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4675,1,['test'],['tested']
Testability,"MarkDuplicatesSpark runs successfully, but the (sharded) BAM cannot be loaded using ReadsSparkSource (with your fix to getHeader). I don't think this is a problem with HadoopBam because I'm able to run the same input through SortBamSpark and the output can be read. The input is from JP's bucket; `gs://jpmartin/hellbender-test-inputs/CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam`; but copied to hdfs. I ran. ```; gcloud beta dataproc jobs submit spark --cluster high-mem-32-4 --properties spark.executor.memory=19g,spark.executor.instances=32,spark.executor.cores=3 --class org.broadinstitute.hellbender.Main --jar build/libs/gatk-all-4.pre-alpha-7-*-SNAPSHOT-spark.jar MarkDuplicatesSpark -I hdfs:///user/davidada/CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam -O hdfs:///user/davidada/dummy-duped-CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam --sparkMaster yarn-client. gcloud beta dataproc jobs submit spark --cluster high-mem-32-4 --properties spark.executor.memory=19g,spark.executor.instances=32,spark.executor.cores=3 --class org.broadinstitute.hellbender.Main --jar build/libs/gatk-all-4.pre-alpha-7-*-SNAPSHOT-spark.jar SortBamSpark -I hdfs:///user/davidada/dummy-duped-CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam --sparkMaster yarn-client -O hdfs:///user/davidada/tmp.bam; ```. But I expect that spark-submit should be the same.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1005:323,test,test-inputs,323,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1005,1,['test'],['test-inputs']
Testability,"MarkDuplicatesSparkIntegrationTest.testMDOrder() passes locally, but fails intermittently in travis",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1258:35,test,testMDOrder,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1258,1,['test'],['testMDOrder']
Testability,"MathUtils was using the log4j1 logger, fixed to use the log4j 2 logger",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3479:31,log,logger,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3479,2,['log'],['logger']
Testability,"Maybe late because it is already merged, but I think that the tests are misplaced now... shouldn't they live in `IOUtilsUnitTest`, @davidbenjamin?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2651#issuecomment-299127034:62,test,tests,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2651#issuecomment-299127034,1,['test'],['tests']
Testability,"Maybe the way is to check the returned value inside `PicardCommandLineProgramExecutor` and throw a `PicardCommandNonZeroExit` exception containing a field with the exit code, that can be handled in `Main` with a special function (as user exception, etc.). Tests for checking the exit code returned by `mainEntry` can be found in https://github.com/broadinstitute/gatk/pull/4283.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4329#issuecomment-362531334:256,Test,Tests,256,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4329#issuecomment-362531334,1,['Test'],['Tests']
Testability,"Mayby it is related to #6578 and #5316 ? However, I tested versrions: 4.1.7, 4.1.6 4.1.5, 4.1.4.1 and the problem persists together with spark 2.4.3 and spark 2.4.5.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6642#issuecomment-640064752:52,test,tested,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6642#issuecomment-640064752,1,['test'],['tested']
Testability,MeanQualityByCycleSpark integration test fails on ADAM files with setHeaderStrict,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1540:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1540,1,['test'],['test']
Testability,Memory(VariantContextTestUtils.java:67); 	at org.broadinstitute.hellbender.tools.funcotator.vcfOutput.VcfOutputRendererUnitTest.testExclusionListOverridesManualDefaultAnnotations(VcfOutputRendererUnitTest.java:40); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestCla,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:2680,test,testng,2680,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,1,['test'],['testng']
Testability,Merge away once tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6444#issuecomment-583562713:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6444#issuecomment-583562713,1,['test'],['tests']
Testability,Merge changes from master onto our version of gatk Dockerfile. Running integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/35dd363a-b140-47c7-ad69-7e5297a6ff10),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8801:83,test,test,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8801,1,['test'],['test']
Testability,Merge changes from the EchoCallset branch back into our main branch ('ah_var_store'). Most of these changes are VDS creation related. Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f5cb7a2d-b224-4b8e-8daf-2d22939a1d96),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8993:154,test,test,154,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8993,1,['test'],['test']
Testability,Merge once tests pass :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5102#issuecomment-412629096:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5102#issuecomment-412629096,1,['test'],['tests']
Testability,"Merge the two repos into a single code base. There are a number of goals, some somewhat contradictory:; * maintain history of both repos; * minimize repo size by removing large files that were accidentally committed to gatk-protected; * merge git-lfs files; * migrate issues from gatk-protected to gatk; * merge travis builds; * maintain reasonable test runtimes",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2768:349,test,test,349,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2768,1,['test'],['test']
Testability,Merge when tests pass @jamesemery,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7049#issuecomment-765549476:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7049#issuecomment-765549476,1,['test'],['tests']
Testability,Merge when tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2323#issuecomment-272508010:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2323#issuecomment-272508010,1,['test'],['tests']
Testability,MergeSamFilesIntegrationTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1231:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1231,1,['test'],['tests']
Testability,Merging now. I added an issue to track adding in more integration tests: #7523,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7513#issuecomment-951250845:66,test,tests,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7513#issuecomment-951250845,1,['test'],['tests']
Testability,"Merging this despite the unrelated ""No space left on device"" error in the M2 WDL tests, which is definitely unrelated to this change.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3140#issuecomment-311484682:81,test,tests,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3140#issuecomment-311484682,1,['test'],['tests']
Testability,"Merging this now to have usable VCF NIO support in master -- continuous tests to prove that the wrapper is applied will be added in a separate PR, but my ad-hoc tests on the latest version of this branch suggest it's working fine.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2393#issuecomment-277697090:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2393#issuecomment-277697090,4,['test'],['tests']
Testability,"Merging this one despite the ongoing failure in the cloud tests, which is understood and known to be unrelated.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8318#issuecomment-1551795859:58,test,tests,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8318#issuecomment-1551795859,1,['test'],['tests']
Testability,"MetadataCollection class](https://github.com/broadinstitute/gatk/blob/4e1741896bcd04d70493f94b082dd0d27023f14c/src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/metadata.py#L215); [gcnvkernel model_denoising_calling.py](https://github.com/broadinstitute/gatk/blob/4e1741896bcd04d70493f94b082dd0d27023f14c/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py); [gcnvkernel io_metadata.py write_sample_coverage_metadata function](https://github.com/broadinstitute/gatk/blob/4e1741896bcd04d70493f94b082dd0d27023f14c/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py#L16); [theano scan_op.py](https://github.com/Theano/Theano/blob/master/theano/scan_module/scan_op.py). ### Affected version(s); - [x] Latest public release version [version?]; - [ ] Latest master branch as of [date of test?]. ### Description ; I'm getting a strange error (see below) when running a nf-core module test. I am using test files, which are obviously smaller as for short testing times i.e. the provided bam file only provides mapped reads for a small section of the genome. #### Steps to reproduce; Run the following to create and interactive container and mount the required zip folder ([gatk_test.tar.gz](https://github.com/broadinstitute/gatk/files/10022295/gatk_test.tar.gz)):; ```docker run -it -v /path/to/gatk_test_dir:/mnt/gatk_test broadinstitute/gatk bash```; If you bash the `gatk_germlinecnvcaller.sh` within the provided zip folder in a gatk4 Docker container. #### Expected behavior; gatk GermlineCNVCaller should run as expected. #### Actual behavior; ```TypeError: ('The following error happened while compiling the node', forall_inplace,cpu,scan_fn}(Elemwise{Maximum}[(0, 0)].0, Subtensor{int64:int64:int8}.0, Subtensor{int64:int64:int8}.0, IncSubtensor{InplaceSet;:int64:}.0, Elemwise{mul,no_inplace}.0, Subtensor{int64::}.0, Elemwise{sub,no_inplace}.0), '\n', ""Inconsistency in the inner graph of scan 'scan_fn' : an input and a",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8097:1276,test,test,1276,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8097,2,['test'],"['test', 'testing']"
Testability,Method(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.gradle.internal.dispatch,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2897,test,testng,2897,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testng']
Testability,Method(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.gradle.internal.dispatch,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253:2918,test,testng,2918,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253,1,['test'],['testng']
Testability,"Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:497); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); ```. #### Steps to reproduce; These are the arguments I used (the input bam is on the file system):. ```; final String[] args = {; ""-I"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/Filtering/IGV/198489_vs_811158/sorted.mt.1.bam"",; ""-"" + M2ArgumentCollection.TUMOR_SAMPLE_SHORT_NAME, ""198489"",; ""-R"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/MitochondriaOnlyFastas/Homo_sapiens_assembly38.mt_only.fasta"",; ""-O"", outputVcf.getAbsolutePath(),; ""--m",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5036:4200,test,testng,4200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5036,1,['test'],['testng']
Testability,Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:1981,test,testng,1981,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,3,['test'],['testng']
Testability,Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6086#issuecomment-519578293:1618,test,testng,1618,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6086#issuecomment-519578293,1,['test'],['testng']
Testability,Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: com.intel.genomicsdb.GenomicsDBException: Could not load genomicsdb native library; 	at com.intel.genomicsdb.GenomicsDBImporter.<clinit>(GenomicsDBImporter.java:72); 	... 37 more; ```. if you dig into it more you get down to the following error:; ```; /private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib: dlopen(/private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dyl,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:2472,test,testng,2472,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['test'],['testng']
Testability,MethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccess,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2558,Test,TestRunner,2558,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['Test'],['TestRunner']
Testability,MethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccess,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253:2579,Test,TestRunner,2579,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253,1,['Test'],['TestRunner']
Testability,"Might be a dupe of https://github.com/broadinstitute/gatk/issues/4375 (note the date...). Continuing our discussion on Slack, we could add some tests on the simulated data that are suitably insensitive to numerical instability, but still check for whatever events may happen to be in the simulated data. I'm not sure if there's a record of the latter, as I would guess the data was generated with an external python script, but I suppose you could always just take what is currently output by the test as the expected result. There is some cost associated with adding, running, and maintaining such tests, and I'll leave it up to you and @mwalker174 to decide whether it's worth it. For the record, I think our intention was always that correctness would be covered at the pipeline level on suitably large data.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6893#issuecomment-709572384:144,test,tests,144,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6893#issuecomment-709572384,3,['test'],"['test', 'tests']"
Testability,Migrate picard.analysis + picard.metrics with tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/213:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/213,1,['test'],['tests']
Testability,Migrate picard.vcf with tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/214:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/214,1,['test'],['tests']
Testability,"Migrated from https://github.com/broadinstitute/gatk-protected/pull/962. Changes by @davidbenjamin; -changes to docs; -got rid of weights and concentration; -got rid of constant states to simplify before CRP pre-training; -smarter transition matrix; -switched to binomial AF likelihoods for segmentation; -got rid of attempt big change in memory length; -fixed outlier likelihood; Changes by @samuelklee; -ACNV with joint segmentation; -tweaked convergence criteria and removed extraneous MCMC fit; -sorted acc in AF segmentation; -NaN fixes in binomial likelihood; -fixed some tests and added EXPERIMENTAL tags; -disabled JointAFCRSegmenterUnitTest. This introduces a new command line (AllelicCNVHMM---@sooheelee, this command line is experimental and should not be used) that performs joint segmentation and then fits model parameters using MCMC. It performs relatively well on some samples (and was used to generate results for the AACR poster), but others result in oversegmentation and convergence issues. It's possible that this could be due to the naive copy-ratio model used. @davidbenjamin may want to do some additional tweaking, but I think we will also explore other iHMM variants concurrently.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3036:578,test,tests,578,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3036,1,['test'],['tests']
Testability,"Minimal GATK port of nvscorevariants from https://github.com/NVIDIA-Genomics-Research/nvscorevariants. The tool runs successfully in both 1D and 2D modes, and a strict integration test passes for the 1D model. However, this PR has a number of outstanding issues that need to be resolved before it can be merged and replace the legacy CNNScoreVariants tool:. - The conda environment in scripts/nvscorevariants_environment.yml needs to be incorporated into the main GATK conda environment. - The integration test for the 2D model does not currently pass, despite using a much higher epsilon than the 1D test. Some of the scores differ by significant amounts vs. the CNNScoreVariants 2D output. We need to investigate why this is. - There is currently no training tool to train a new model, like there is for the legacy CNN tool. @samuelklee and @mwalker174 , could you please comment on what it would take to incorporate the `scripts/nvscorevariants_environment.yml` conda environment into the main GATK conda environment, assuming we are free to remove/retire the CNN tool?. @lbergelson and @zamirai, please do a general code review when you get a chance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8004:180,test,test,180,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8004,3,['test'],['test']
Testability,Minor changes for updated VAT reference testing [VS-1054],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8670:40,test,testing,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8670,1,['test'],['testing']
Testability,Minor changes to variant comparator test utility for GenomicsDB tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2610:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2610,2,['test'],"['test', 'tests']"
Testability,"Minor fixes to address pr #2626 comments, and extract genomics db test utils again",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2631:66,test,test,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2631,1,['test'],['test']
Testability,Miscellaneous test fixes for CompareBaseQualities and CollectIinsertSizeMetrics.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1803:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1803,1,['test'],['test']
Testability,Missed putting tests back,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8428:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8428,1,['test'],['tests']
Testability,Mock up an example configuration setup using Owner,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3126:0,Mock,Mock,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3126,1,['Mock'],['Mock']
Testability,Mode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg1.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg2.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg3.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg4.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg5.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly18.10k_lines.dict; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly18.10k_lines.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream/vcfs/dream3-chr20.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream/vcfs/sample_1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream/vcfs/sample_2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/mut,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:38061,test,test,38061,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,ModelSegments can currently deal with single sample segmentation. This branch contains the backend class (and the corresponding unit tests) that is able to segment based on multiple data samples. The updated version of the front-end class ModelSegments will be addressed in a different branch.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5524:133,test,tests,133,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5524,1,['test'],['tests']
Testability,ModelSegments integration test failures on newer Java 11 releases,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8107:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8107,1,['test'],['test']
Testability,"Modified FeatureCache to track the number of cache hits/misses over the; lifetime of each FeatureDataSource. Upon close, output these statistics; to logger.debug(). Tracking this information introduces almost zero overhead, but should be; useful on an ongoing basis as we add new tools to GATK4 and profile them.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1109:149,log,logger,149,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1109,1,['log'],['logger']
Testability,Modified VariantRecalibrator to only use a deduped version of the annotations list provided by the user once the list has been deduped. Previously it was still sometimes using the list that could have duplicates. Fixes #8226 . Also fixed the logger warning that prints the duplicate annotations.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8227:242,log,logger,242,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8227,1,['log'],['logger']
Testability,Modified the CI test that compares with CombineGVCFs so that the interval(s) queried does/do not hit the issue discussed on Monday,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4645#issuecomment-389687052:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4645#issuecomment-389687052,1,['test'],['test']
Testability,"Modify CreateVariantIngestFiles to write missing ref intervals with the ZERO state, unless we are dropping that (ZERO) state and none other. Successful Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/0509cd35-50bc-431b-88c2-590e15cd3cc9)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8560:164,test,test,164,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8560,1,['test'],['test']
Testability,"Modify GvsCreateVATFromVDS to take as an optional input the `sites_only_vcf` - if provided, the code bypasses the logic to create it from VDS.; This PR also modifies IndexVcf and SelectVariants to use localization_optional for their inputs. Updated Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/760a8910-77a3-446e-b539-196663bbd90b); Rerun of GvsCreateVATFromVDS using a passed in sites_only VCF [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/9ca7d011-82f3-43a9-9161-1df0f7174fa9).; Rerun of GvsCreateVATFromVDS NOT using a passed in sites_only VCF [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/de8fae29-a904-40d1-849b-15ba84fa0a8f).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8851:114,log,logic,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8851,2,"['log', 'test']","['logic', 'test']"
Testability,Modify GvsExtractCallset so that you can change the value of 'output_gcs_dir' as an input and it won't cause the extract to be re-run (won't invalidate call caching). Passing run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/a5fd0daf-8816-42e4-ad15-3aa432e2ed80).; Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/3c874e74-4fdd-4cbb-af75-a44bb7e17ea1).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8960:331,test,test,331,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8960,1,['test'],['test']
Testability,Modify assertVariantContextsAreEqual() to allow comparison to be done without regard to allele ordering,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2599:7,assert,assertVariantContextsAreEqual,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2599,1,['assert'],['assertVariantContextsAreEqual']
Testability,More Spark CRAM writing tests plus misc changes.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1667:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1667,1,['test'],['tests']
Testability,"More concrete runtime numbers are forthcoming but the profiler shows the following. Note that these numbers are generated on this branch hanging off of master ca. November and does not include the other optimizations to this part of the code that have been made recently.; Before:; <img width=""1068"" alt=""screen shot 2019-01-25 at 2 59 53 pm"" src=""https://user-images.githubusercontent.com/16102845/51772199-6c541880-20b9-11e9-8823-7249e7f4d874.png"">; ; After: ; <img width=""1092"" alt=""screen shot 2019-01-25 at 3 00 05 pm"" src=""https://user-images.githubusercontent.com/16102845/51772174-57778500-20b9-11e9-9d74-9f93d76358a0.png"">. Beyond the tests that I have written explicitly to illuminate discrepancies, I have run HaplotypeCaller in GVCF mode on the input bams in large and explicitly checked for places where the refactored method mismatches from the previous code and it appears to be matching over a wide range of cases, there probably could be more. . Resolves #5488",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5607:644,test,tests,644,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5607,1,['test'],['tests']
Testability,More prep work for separating GVS code: remove references to GVS code from non-GVS code. Integration test currently running [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/2af93966-3c84-4aec-bc1e-82cb88478852).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8229:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8229,1,['test'],['test']
Testability,"Most of our integration tests use the non-UCSC convention. I would be shocked if that were the issue. If anyone reading this has the issue, feel free to re-open or post on the GATK forum.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4939#issuecomment-583804417:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4939#issuecomment-583804417,1,['test'],['tests']
Testability,"Most of the CRAM tests were added before we could write CRAM on Spark, so this fills out the CRAM write tests for the remaining Spark tools/pipelines (ApplyBQSRSpark, BQSRPipelineSpark and ReadsPipelineSpark). Also includes one totally opportunistic deletion of an unused zero-length fasta file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1667:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1667,2,['test'],['tests']
Testability,"Most of the arguments in RecalibrationArgumentCollection are in the form ""mismatches_context_size"". This probably needs to be updated but it will have the consequence of invalidating existing BaseRecalibrator report tables and require the arguments get changed in all of the report tables checked in as test files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3974:303,test,test,303,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3974,1,['test'],['test']
Testability,"Mostly Markdown with some code snippets. The next logical step to sussing out an Azure storage solution is probably WDLization / filter creation, but that is work for another day. TODO: Figure out how much this cost.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8293:50,log,logical,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8293,1,['log'],['logical']
Testability,Move AbstractMarkDuplicatesTester to test sources,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3762:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3762,1,['test'],['test']
Testability,Move CompareSAMs and various unit test improvements,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/171:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/171,1,['test'],['test']
Testability,Move Funcotator integration test expected outputs out of large,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5379:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5379,1,['test'],['test']
Testability,Move HDF5Utils out of copynumber package and expand unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7928:57,test,tests,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7928,1,['test'],['tests']
Testability,"Move MarkDuplicates/EstimateLibraryComplexity, tests, and resources:; - from `tools.picard.sam` to `tools.walkers.markduplicates` package; - rename both tools to have a “2” suffix; - for now, these are still `PicardCommandLinePrograms`; - remaining related [classes](https://github.com/broadinstitute/gatk/tree/master/src/main/java/org/broadinstitute/hellbender/utils/read/markduplicates) are not moved or renamed, though most have Picard analogs with the same simple name",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3482:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3482,1,['test'],['tests']
Testability,Move Picard command-line argument testings to a PicardCommandLineProgramTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1170:34,test,testings,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1170,1,['test'],['testings']
Testability,Move SparkTestUtils to utils/test so that gatk-protected can use it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1849:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1849,1,['test'],['test']
Testability,Move all logging to log4j.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/612:9,log,logging,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/612,1,['log'],['logging']
Testability,"Move contents of picard into picard.sam, to make way for other picard tools. Reorganize test files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/240:88,test,test,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/240,1,['test'],['test']
Testability,Move existing GATK4 arg parser + tests as-is to new repo,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2208:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2208,1,['test'],['tests']
Testability,"Move gatk to snapshot of jp_fix_file_walker branch in google-cloud-java, and craft test case to prove the fix works",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3118:83,test,test,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3118,1,['test'],['test']
Testability,Move genomicsDB tests into variantcalling test group,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4992:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4992,2,['test'],"['test', 'tests']"
Testability,Move tests for ReadWalker out of PrintReadsIntegrationTest and into ReadWalkerUnitTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2159:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2159,1,['test'],['tests']
Testability,Move the top level testSortingFile.txt to somewhere more appropriate,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/471:19,test,testSortingFile,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/471,1,['test'],['testSortingFile']
Testability,Move to using [GenomicsDB Release 1.5.0](https://github.com/GenomicsDB/GenomicsDB/releases/v1.5.0). ; Highlights in the release relevant to gatk are; - [readthedocs](https://genomicsdb.readthedocs.io/en/latest/) for GenomicsDB design/usage/functionality - GenomicsDB/GenomicsDB#265.; - GenomicsDB/GenomicsDB#284; - GenomicsDB/GenomicsDB#271; - Exclude spark from genomicsdb core jar GenomicsDB/GenomicsDB#281; - General improved performance/logging.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8358:441,log,logging,441,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8358,1,['log'],['logging']
Testability,Moved validation test data out of large files area.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5381:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5381,1,['test'],['test']
Testability,Moves RandomDNA class into test from main as it is only used for testing.; Added a random reference creation to RandomDNA.; Added isConcrete method to Nucleotide. Fixes issue #3562.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3563:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3563,2,['test'],"['test', 'testing']"
Testability,Moving and testing ingest scripts from variantstore,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6881:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6881,1,['test'],['testing']
Testability,Moving classes that tests depend on from the test folders into the src folders in the utils.test package. This way they will be available to projects that depend on hellbender. Fixes #525 . Updating to the newest testng release.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/527:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/527,4,['test'],"['test', 'testng', 'tests']"
Testability,"MultiVariantWalker implementation, with VariantRecalibrator and ApplyVQSR switched over to the new base class. GatherVCFs, MergeVCFs, SelectVariants, and possibly SortVCF are all candidates to be changed to MultiVariantWalkers, but are not included here. Also, this is a branch of the branch that contains the VQSR and ApplyVQSR tests so I could use those tests to verify the MultiVariantWalker. As result there are two commits here, but the tests are already included a separate PR.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2182:329,test,tests,329,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2182,3,['test'],['tests']
Testability,Must Investigate failing Spark Dataproc tests and re-enable them,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7172:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7172,1,['test'],['tests']
Testability,Must update `DataSourceUtils::assertPathFilePropertiesField` to allow for absolute paths / URI paths for the data sources supporting files.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5348#issuecomment-434452495:30,assert,assertPathFilePropertiesField,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5348#issuecomment-434452495,1,['assert'],['assertPathFilePropertiesField']
Testability,"Mutect adopted natural logarithms in #5858. In the update, it looks like one base 10 log was missed. This PR updates the missed log.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6884:23,log,logarithms,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6884,3,['log'],"['log', 'logarithms']"
Testability,Mutect2 (GATK 4.1.0.0) fails occasionally in smith waterman native library as below. stderr is attached. I can also provide core dump if necessary. [stderr.tar.gz](https://github.com/broadinstitute/gatk/files/2880800/stderr.tar.gz). ```; 07:30:59.335 INFO ProgressMeter - 17:78451657 627.7 1223980 1950.0; *** Error in `java': munmap_chunk(): invalid pointer: 0x00002ba8e50b7740 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x7ab54)[0x2ba8df926b54]; /gpfs/data/software/cromwell/log/cromwell-executions/Mutect2/2cebc7be-fe23-4787-9095-9b91227c6526/call-M2/shard-13/attempt-2/tmp.945f1f83/libgkl_smithwaterman5575294852416409537.so(_Z19runSWOnePairBT_avx2iiiiPhS_iiaPcPs+0x338)[0x2ba9aee21fa8]; /gpfs/data/software/cromwell/log/cromwell-executions/Mutect2/2cebc7be-fe23-4787-9095-9b91227c6526/call-M2/shard-13/attempt-2/tmp.945f1f83/libgkl_smithwaterman5575294852416409537.so(Java_com_intel_gkl_smithwaterman_IntelSmithWaterman_alignNative+0xd8)[0x2ba9aee21bf8]; [0x2ba8e8f6675a]; ======= Memory map: ========; 00400000-00401000 r-xp 00000000 08:03 5769910 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-1.b15.el7_2.x86_64/jre/bin/java; 00600000-00601000 r--p 00000000 08:03 5769910 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-1.b15.el7_2.x86_64/jre/bin/java; ...; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5690:487,log,log,487,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5690,2,['log'],['log']
Testability,"Mutect2 matches called variants against known variants retrieved from the germline resource VCF (if available) for the POPAF annotation. While comparing the called allele to the germline resource variants, Mutect2 only takes into account the sequence of the alternate allele(s) while ignoring the reference allele sequence. This can cause incorrect annotations at sites with multiple alternate alleles (e.g. CT -> C/CTT in the germline resource while M2 calls C -> CT). This PR is a proposed fix along with some unit tests that demonstrate the issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6999:517,test,tests,517,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6999,1,['test'],['tests']
Testability,Mutect2 uses natural logarithms internally,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5858:21,log,logarithms,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5858,1,['log'],['logarithms']
Testability,"My GenotypeGVCFs run for a single chromosome returned the following completion statement:; 18:54:40.516 INFO ProgressMeter - Traversal complete. Processed 606308 total variants in 75.2 minutes. However, there are only 46814 variant rows (excluding 52 header rows) in the corresponding vcf file. Does the above figure of 606308 correspond to a multiple of 'variants x number of samples'?. Also, there are only 16863 lines in my log file, does this mean that the 'Current Locus' column in the log file doesn't correspond to a single genomic location (bp) in the fasta file?. I am curious to know what is the relation between all these figures to fully understand what is happening while processing the gCVF files. Also, on the inbreeding coefficient warning issue, I understand from your @Neato-Nick feedback that the variants with these warnings may still be fine and can be retained. However, this still leaves me worrying that out of 384 samples the locus doesn't even have 10 samples for generating the required metrics. Such variants won't be of any use for downstream analyses anyway where any variants with more than 80% missing samples will be removed. Therefore, I wish to seek some more information about this 10 sample thing - does it have some other context or does it literally mean that there are only less than 10 samples carrying that variant?. Regards,; Sanjeev",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4544#issuecomment-409255344:427,log,log,427,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4544#issuecomment-409255344,4,['log'],['log']
Testability,"My first idea was to port it to ReadTools (that's why I asked to change it to the public code when GATK3 was divided into the non-free version and the plan was not to port indel-realignment). Nevertheless, someone showed interest into this and that's why I did this PRs; in addition, it is much better than the original authors (if still at Broad) can contribute to see if the port is correct. Anyway, I don't have any strong feeling about this, and I can always port the pipeline to ReadTools and maintain it there (actually, I had some ideas for other realignment methods and it will be interesting to compare with this). @cmnbroad - this was a long time ago, when even some of the standards (documentation and kebab-case arguments) were not even implemented. Regarding the tests, the last commit includes one using a BAM file in the repository, and the output was generated with GATK3 (if I remember correctly, although I can't remember the version). I think that the best way to go is to re-open a PR to have a cleaner history and proper standards. The idea will be:. 1. Copy of the GATK3 files (from the latest release); 2. Reformat (license and coding-style); 3. Port to the new framework.; 4. Convert documentation and arguments to the GATK4 format; 5. Add tests by running the latest GATK3 release on data in the repository and checking concordance. If a different dataset should be used for the tests, it will be nice if you can provide some. Otherwise, I will use data in the repository (b37_reference_20_21 and NA12878_20_21_WGS_bam)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-363745763:776,test,tests,776,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-363745763,3,['test'],['tests']
Testability,"My first question is does this reproduce with a different PairHMM implementation? It might be a precision problem, in which case the prior should do a good job. But we've also seen cases of the PairHMM giving significantly higher likelihoods for one alt over the reference (a difference of about 0.07 for the bottom gray read in the example below):; ![image](https://user-images.githubusercontent.com/6578548/40784632-34eb920e-64b4-11e8-9575-c26180808172.png); When @vruano dug into that one, the likelihoods were correct as evaluated by the PairHMM because we compare the likelihood sums over all alignments supporting each allele rather than the maximum likelihoods. I'll try to find the data to reproduce that test case.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4829#issuecomment-393528876:713,test,test,713,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4829#issuecomment-393528876,1,['test'],['test']
Testability,My initial test with this doesn't seem to show much of an effect. Do you have some example locations of places where we're getting these bad clusters of Main<->Alt contig read pairs?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2527#issuecomment-289458708:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2527#issuecomment-289458708,1,['test'],['test']
Testability,"My recollection is that this is a use case we never put any priority on so there's no test in the GATK suite for access to private files. There should be, of course. The feature is there and (at least locally) it worked when I tried it. NIO does not use the API_KEY, it uses default credentials. Those are environment variables that are set by the `gcloud` command or pre-set for you in the case of virtual machines on Google. There are two cases: local execution and Spark. . I just tested local execution and it worked fine for me:. ```; $ ./gatk-launch PrintReads -L Broad.human.exome.b37.small.interval_list -I gs://jpmartin-private/bench/WGS-G94982-NA12878.bam -O t_gcs.bam; ```. this command worked even though (unless I'm mistaken) neither the bucket nor the file are public. One challenge however is that the way to set default credentials has changed recently. Calling `gcloud auth login` used to be enough but now we have to call (IIRC) `gcloud auth application-default login`. For Spark, the default credentials are set as whoever owns the dataproc environment that's used to run the show. So it should be set so it has access to the buckets necessary. NIO has mechanisms for accessing buckets that belong to someone other than who is running the Spark job, but they are not hooked into GATK yet.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2394#issuecomment-277832658:86,test,test,86,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2394#issuecomment-277832658,4,"['log', 'test']","['login', 'test', 'tested']"
Testability,"My suspicion was wrong. We also include a safety check which cause us to correctly reject most accidental matches. If we detect 2 chromosomes with the same name but different lengths we fail even if we detect otherwise matching chromosomes. I've run all the dictionaries I could find in the gatk bundle against each and only b37 and b37_decoy are compatible with each other which is the desired behavior I believe. | | hg18 | hg19 | b37 | b37_decoy | hg38 |; | -- |------|-----|------|-----------|-------|; | hg18 | ✅ | | | | |; | hg19 | | ✅ | | | |; | b37 | | | ✅ | ✅ | |; | b37_decoy | | | ✅ | ✅ | |; | hg38 | | | | | ✅ |. ```; @DataProvider; public Iterator<Object[]> getComparisons(){; final ArrayList<Object[]> comparisons = new ArrayList<>();; final List<String> dicts = Arrays.asList(""Homo_sapiens_assembly18.dict"",; ""ucsc.hg19.dict"",; ""human_b36_both.dict"",; ""human_g1k_v37.dict"",; ""human_g1k_v37_decoy.dict"",; ""Homo_sapiens_assembly38.dict"");; for( String left : dicts) {; for (String right: dicts){; Path leftDict =Paths.get(""/Users/louisb/Downloads/dicts"", left);; Path rightDict = Paths.get(""/Users/louisb/Downloads/dicts"", right);. comparisons.add( new Object[] {leftDict, rightDict});; }; }; return comparisons.iterator();; }. @Test(dataProvider = ""getComparisons""); public void testSequenceDictionariesAgainstEachother(Path left, Path right){; String leftName = left.getFileName().toString();; String rightName = right.getFileName().toString();; SequenceDictionaryUtils.validateDictionaries(leftName,; SAMSequenceDictionaryExtractor.extractDictionary(left),; rightName,; SAMSequenceDictionaryExtractor.extractDictionary(right));; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3754#issuecomment-494924193:1242,Test,Test,1242,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3754#issuecomment-494924193,2,"['Test', 'test']","['Test', 'testSequenceDictionariesAgainstEachother']"
Testability,"My test run has successfully finished. Awesome, @TedBrookings !. Two suggestions that you could decide when to address them:; 1. This script requires a lot of user interaction (gcloud update, whether to create a cluster, whether to copy results, whether to delete cluster), I could imagine this being inconvenient for some, so we could have some upfront arguments specifying answers to these questions when the script is launched.; 2. The bucket to which the results are copied is not overridable by caller of script. A user might want to copy the results to a specific location.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3370#issuecomment-318925727:3,test,test,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3370#issuecomment-318925727,1,['test'],['test']
Testability,N0aXR1dGUvaGVsbGJlbmRlci90b29scy93YWxrZXJzL2Jxc3IvQXBwbHlCUVNSLmphdmE=) | `91.667% <100%> (ø)` | `6 <2> (+1)` | :arrow_up: |; | [...org/broadinstitute/hellbender/engine/GATKTool.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvR0FUS1Rvb2wuamF2YQ==) | `91.772% <80%> (-0.795%)` | `77 <3> (+3)` | |; | [...institute/hellbender/utils/gcs/GATKGCSOptions.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvR0FUS0dDU09wdGlvbnMuamF2YQ==) | `0% <0%> (-66.667%)` | `0% <0%> (ø)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-18.75%)` | `6% <0%> (ø)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlTXVsdGlTb3VyY2UuamF2YQ==) | `55.556% <0%> (-18.519%)` | `8% <0%> (-1%)` | |; | [...er/tools/spark/sv/FindBreakpointEvidenceSpark.java](https://codecov.io/gh/broadinstitute/gatk/pull/2085?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmc,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2085#issuecomment-290039637:2651,test,test,2651,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2085#issuecomment-290039637,2,['test'],['test']
Testability,"NFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/gencode_xrefseq_v90_38.tsv -> file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/gencode_xrefseq/hg38/gencode_xrefseq_v90_38.tsv; > 15:16:43.878 INFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/cosmic_tissue.tsv -> file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/cosmic_tissue/hg38/cosmic_tissue.tsv; > 15:16:43.926 INFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/gencode.v34.annotation.REORDERED.gtf -> file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/gencode/hg38/gencode.v34.annotation.REORDERED.gtf; > 15:16:43.926 INFO DataSourceUtils - Setting lookahead cache for data source: Gencode : 100000; > 15:16:43.937 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; > 15:16:43.938 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; > 15:16:43.939 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/gencode/hg38/gencode.v34.annotation.REORDERED.gtf; > 15:16:43.946 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; > 15:16:44.093 INFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/gencode.v3",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6708:13644,test,tested,13644,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6708,1,['test'],['tested']
Testability,NFO PostprocessGermlineCNVCalls - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Deflater: IntelDeflater; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Inflater: IntelInflater; 23:45:31.004 INFO PostprocessGermlineCNVCalls - GCS max retries/reopens: 20; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Requester pays: disabled; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Initializing engine; 23:46:06.321 INFO PostprocessGermlineCNVCalls - Done initializing engine; 23:46:07.433 INFO ProgressMeter - Starting traversal; 23:46:07.433 INFO ProgressMeter - Current Locus Elapsed Minutes Records Processed Records/Minute; 23:46:07.434 INFO ProgressMeter - unmapped 0.0 0 NaN; 23:46:07.434 INFO ProgressMeter - Traversal complete. Processed 0 total records in 0.0 minutes.; 23:46:07.434 INFO PostprocessGermlineCNVCalls - Generating intervals VCF file...; 23:46:07.460 INFO PostprocessGermlineCNVCalls - Writing intervals VCF file to /srv/scratch/testardqu/CNV_Hyperexome/intervals_joint/genotyped-intervals-SAMPLE_6.vcf.gz...; 23:46:07.460 INFO PostprocessGermlineCNVCalls - Analyzing shard 1 / 8...; 23:46:08.946 INFO PostprocessGermlineCNVCalls - Analyzing shard 2 / 8...; 23:46:09.725 INFO PostprocessGermlineCNVCalls - Analyzing shard 3 / 8...; 23:46:10.380 INFO PostprocessGermlineCNVCalls - Analyzing shard 4 / 8...; 23:46:11.132 INFO PostprocessGermlineCNVCalls - Analyzing shard 5 / 8...; 23:46:11.901 INFO PostprocessGermlineCNVCalls - Analyzing shard 6 / 8...; 23:46:12.730 INFO PostprocessGermlineCNVCalls - Analyzing shard 7 / 8...; 23:46:14.288 INFO PostprocessGermlineCNVCalls - Analyzing shard 8 / 8...; 23:46:15.617 INFO PostprocessGermlineCNVCalls - Generating segments...; 01:48:30.792 INFO PostprocessGermlineCNVCalls - Parsing Python output...; 01:48:30.875 INFO PostprocessGermlineCNVCalls - Writing segments VCF file to /srv/scratch/testardqu/CNV_Hyperexome/segments_joint/genotyped-segments-SAMPLE_6.vcf.gz...; 01:48:,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8183:9746,test,testardqu,9746,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8183,1,['test'],['testardqu']
Testability,"NIENT \ ; --nativePairHmmThreads 32 \; --createOutputVariantIndex true \; --output NA12892.raw.snps.indels.g.vcf_. **This execution time for GATK 4 Beta2 is: 51 Hours, 32 min**. Alternatively, I was running the same sample (NA12892) using GATK 3.7 using the following command: . _time -p java -XX:+UseParallelGC -XX:ParallelGCThreads=32 -Xmx128g \; -jar /gpfs/software/genomics/GATK/3.7/base/GenomeAnalysisTK.jar -T HaplotypeCaller \; -nct 8 -pairHMM VECTOR_LOGLESS_CACHING \ ; -R /gpfs/data_jrnas1/ref_data/Hsapiens/hs37d5/hs37d5.fa \; -I NA12892.realigned.recal.bam -\ ; -emitRefConfidence GVCF \; --variant_index_type LINEAR \; --variant_index_parameter 128000 \; --dbsnp /gpfs/data_jrnas1/ref_data/Hsapiens/GRCh37/variation/dbsnp_138.vcf.gz \; -o NA12892.raw.snps.indels.g.vcf _. **This execution time for GATK 3.7 is: 18 Hours, 12 min**. I don't know, how to use multithreads (e.g. -nct) for GATK 4 version to reduce the execution time on the single node. Because, we have 32 cores per node with 512GB memory available for benchmarking. To parallelize the GATK 4 workload, I used the Spark version also. . I used **GATK 4 Beta2 Spark job on the cluster of 32 nodes** (32 nodes x 32 cores, totaling 1024 cores). The execution time is almost same as GATK 4 Beta2 ( 50 Hours, 21 min). Please help me, how to reduce the execution time for GATK 4 Beta2 HaplotypeCaller? . Please see this below Spark logs:. + /gpfs/software/spark/spark-2.1.0-bin-hadoop2.7//bin/spark-submit --master spark://nsnode11:6311 --driver-java-options -Dsamjdk.use_async_io_read_samtools=false,-Dsamjdk.use_async_io_write_samtools=true,-Dsamjdk.use_async_io_write_tribble=false,-Dsamjdk.compression_level=1 --conf spark.io.compression.codec=snappy --conf spark.yarn.executor.memoryOverhead=6000 --conf spark.kryoserializer.buffer.max=512m --conf spark.driver.userClassPathFirst=true --conf spark.driver.maxResultSize=0 --conf spark.executor.cores=1024 --conf spark.reducer.maxSizeInFlight=100m --conf spark.shuffle.file.buffer",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3631:1588,benchmark,benchmarking,1588,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3631,1,['benchmark'],['benchmarking']
Testability,"NIO output support for SelectVariants. Tested like so:. ```; $ ./gatk SelectVariants \; --variant dbsnp_138.b37.excluding_sites_after_129.vcf \; --select-random-fraction 0.01 \; --output gs://mybucket/variants.vcf; $ gsutil ls -lh gs://mybucket/*.vcf; 23.38 MiB 2018-10-30T23:58:12Z gs://mybucket/variants.vcf; ```. Includes the required changes under the hood, plus test updates. This change also gives NIO support to **HaplotypeCaller**, so it can write its VCF to cloud storage. Also, fixes #2128.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5378:39,Test,Tested,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5378,2,"['Test', 'test']","['Tested', 'test']"
Testability,"NIO_VER	403_DENIED_PROJECT_ID; 99	685190392835; 98	685190392835; 97	685190392835; 96	539774316296; 95	685190392835; 94	685190392835; 93	539774316296; 92	685190392835; 91	539774316296; 90	539774316296; 89	PASS; 88	PASS; 87	PASS; 86	PASS; 85	PASS; ```; Googling both of the two mysterious project IDs, I landed onto tests by this Fiji project ([here](https://travis-ci.com/seomoz/fiji/jobs/43151327) and [here](https://travis-ci.com/seomoz/fiji/jobs/43513954)).; I parsed the test log and found the relevant part (for ID `685190392835`). ```; ""gce"":{. ""instance"":{; ""attributes"":{; ""startup-script"":""#!/usr/bin/env bash\necho poweroff | at now + 130 minutes\ncat > ~travis/.ssh/authorized_keys <<EOF\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdzVnIEg2ribEvhEvFjR9IFPAkIVtQwZhlgUAHu1BgjBugFRiqg3eaPMOeOuIZBvzwoyotHIVp3XvAfivGyCW4Ke7+2cqlcX1L8kcmoWLm2fdLGlLr/lZnAjQtexMC76uLtR8udqWA0e2sqrSJs4H/blOQmHWPrl/VSG7daoVptzqXihRmXN+/Huo7mTxAjTUEjk4IOBn7sv7G5qLrEPv78AJIZhWHdhUTGLvx+YpzQvX8pE53TMi9W4ovkZTCwhSO3WYyBOY7H1xjeYb9XWTeP563Du1b0JMpQgtFLQUVXio9NzXZE55ovvGDRSLds+VfPsv4G/Whhq76dEZ+wZO3\n\nEOF\n""; },; ""cpuPlatform"":""Intel Haswell"",; ""description"":""Travis CI python test VM"",; ""disks"":[{""deviceName"":""persistent-disk-0"",""index"":0,""mode"":""READ_WRITE"",""type"":""PERSISTENT""}],; ""hostname"":""testing-gce-ec8614d2-40a2-4138-801e-d42d811590a2.c.travis-ci-prod-2.internal"",; ""id"":8221730359445041428,; ""image"":"""",; ""licenses"":[{""id"":""1000010""}],; ""machineType"":""projects/685190392835/machineTypes/n1-standard-2"",; ""maintenanceEvent"":""NONE"",; ""networkInterfaces"":[{""accessConfigs"":[{""externalIp"":""104.198.203.242"",""type"":""ONE_TO_ONE_NAT""}],""forwardedIps"":[],""ip"":""10.128.0.163"",""network"":""projects/685190392835/networks/default""}],; ""scheduling"":{""automaticRestart"":""TRUE"",""onHostMaintenance"":""MIGRATE"",""preemptible"":""FALSE""},; ""serviceAccounts"":{; ""685190392835-compute@developer.gserviceaccount.com"":{; ""aliases"":[""default""],; ""email"":""685190392835-compute@developer.gserviceaccount.com"",; ""scopes"":[""https://www.go",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6042#issuecomment-513242018:1236,test,test,1236,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6042#issuecomment-513242018,2,['test'],"['test', 'testing-gce-']"
Testability,NIST controlindelF1Score|0.9902|; |NIST controlindelPrecision|0.9903|; |NIST controlsnpF1Score|0.9899|; |NIST controlsnpPrecision|0.9887|; |NIST controlsnpRecall|0.9911|; |NIST controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2Fed0dc9e1-2d64-47e4-82e0-811971957020%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F8c516721-e955-41d1-907e-fcee92f592d3%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST evalHCprocesshours|100.56416111111112|; |NIST evalHCsystemhours|0.19999166666666665|; |NIST evalHCwallclockhours|74.00048055555555|; |NIST evalHCwallclockmax|4.007605555555555|; |NIST evalMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2Fed0dc9e1-2d64-47e4-82e0-811971957020%2Fcall-EVALRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |NIST evalindelF1Score|0.9902|; |NIST evalindelPrecision|0.9903|; |NIST evalsnpF1Score|0.9899|; |NIST evalsnpPrecision|0.9887|; |NIST evalsnpRecall|0.9911|; |NIST evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2Fed0dc9e1-2d64-47e4-82e0-811971957020%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F427c5010-a177-42d8-81be-5a387beed653%2Fcall-CombineSummaries%2Fsummary.csv)|; |ROC_Plots_Reported|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-CreateHTMLReport%2FcacheCopy%2Freport.html)|. </details>.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202:5195,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,5195,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"NVCaller --run-mode COHORT -L /outputs/gatk_intervals.interval_list --interval-merging-rule OVERLAPPING_ONLY --annotated-intervals /outputs/gatk_intervals.interval_list.annotated.tsv --contig-ploidy-calls /outputs/COHORT_runDir/COHORT-calls --input /outputs/E07002_normal_alignment.bam.counts.hdf5 --input /outputs/E07002_tumor_alignment.bam.counts.hdf5 --output /outputs/COHORT_runDir --output-prefix COHORT; ```. We used data from `PRJNA399748` project to test. #### Expected behavior. - `test_gatkgermlinecnvcaller_genotyped-intervals-cohort_0.woTimestamp.vcf` (`##contig` cut from header and only first 5 `chr22` CNVs present). ```; ##fileformat=VCFv4.2; ##FORMAT=<ID=CN,Number=1,Type=Integer,Description=""Copy number maximum a posteriori value"">; ##FORMAT=<ID=CNLP,Number=.,Type=Integer,Description=""Copy number log posterior (in Phred-scale) rounded down"">; ##FORMAT=<ID=CNQ,Number=1,Type=Integer,Description=""Genotype call quality as the difference between the best and second best phred-scaled log posterior scores"">; ##FORMAT=<ID=GT,Number=1,Type=Integer,Description=""Genotype"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""End coordinate of the variant"">; ##contig=<ID=chr1,length=248956422,assembly=GRCh38.d1.vd1>; ...; ##contig=<ID=HPV-mSD2,length=7300,assembly=GRCh38.d1.vd1>; ##source=PostprocessGermlineCNVCalls; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	E07002_normal; chr1	10000	CNV_chr1_10000_10999	N	<DEL>,<DUP>	.	.	END=10999	GT:CN:CNLP:CNQ	1:0:0,80,90,100,108,116:80; chr1	11000	CNV_chr1_11000_11999	N	<DEL>,<DUP>	.	.	END=11999	GT:CN:CNLP:CNQ	1:0:0,81,86,89,92,95:81; chr1	12000	CNV_chr1_12000_12999	N	<DEL>,<DUP>	.	.	END=12999	GT:CN:CNLP:CNQ	1:0:0,93,107,119,129,137:93; chr1	13000	CNV_chr1_13000_13999	N	<DEL>,<DUP>	.	.	END=13999	GT:CN:CNLP:CNQ	1:0:0,89,95,99,102,104:89; chr1	14000	CNV_chr1_14000_14999	N	<DEL>,<DUP>	.	.	END=14999	GT:CN:CNLP:CNQ	1:0:0,86,91,93,96,97:86; chr1	15000	CNV_chr1_15000_15999	N	<DEL>,<DUP>	.	.	END=15999	GT:CN:CNLP:CNQ	1:0:0,82,88,92,97,101:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8619:2675,log,log,2675,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8619,2,['log'],['log']
Testability,NV_23-40-33/2-Output/8-GATK-Temp/cohort_denoising_calling.7177495255490777642.py --ploidy_calls_path=/gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/1-Contig-Ploidy/14.Contig_Ploidy_Dir/ploidy-calls --output_calls_path=/gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/2-Germline-CNV/14.Germline-CNV/CNV-calls --output_tracking_path=/gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/2-Germline-CNV/14.Germline-CNV/CNV-tracking --modeling_interval_list=/gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/intervals8729903857029540703.tsv --output_model_path=/gpfs/gsfs7/users/sangj2/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/2-Germline-CNV/14.Germline-CNV/CNV-model --enable_explicit_gc_bias_modeling=True --read_count_tsv_files /gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-07410307475890858352.tsv /gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-12290301678667639499.tsv /gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-21824691337189197401.tsv /gpfs/gsfs7/users/gatk_users1/0-Project/1-gCNV-Lung/z-bak/z-2019-10-28-1-Test-gCNV_23-40-33/2-Output/8-GATK-Temp/sample-31776045115104931009.tsv --psi_s_scale=1.000000e-04 --mapping_error_rate=1.000000e-02 --depth_correction_tau=1.000000e+04 --q_c_expectation_mode=hybrid --max_bias_factors=5 --psi_t_scale=1.000000e-03 --log_mean_bias_std=1.000000e-01 --init_ard_rel_unexplained_variance=1.000000e-01 --num_gc_bins=20 --gc_curve_sd=1.000000e+00 --active_class_padding_hybrid_mode=50000 --enable_bias_factors=True --disable_bias_factors_in_active_class=False --p_alt=1.000000e-06 --cnv_coheren,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6235#issuecomment-547440019:8751,Test,Test-,8751,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6235#issuecomment-547440019,1,['Test'],['Test-']
Testability,"N_STRINGENCY STRICT --COMPRESSION_LEVEL 2 --MAX_RECORDS_IN_RAM 500000 --CREATE_INDEX true --CREATE_MD5_FILE false --GA4GH_CLIENT_SECRETS client_secrets.json --help false --version false --showHidden false --USE_JDK_DEFLATER false --USE_JDK_INFLATER false; Jun 22, 2020 4:48:58 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; [Mon Jun 22 16:48:58 CDT 2020] Executing as xxxxxxx@yyyyyy on Linux 3.10.0-693.11.1.el7.x86_64 amd64; OpenJDK 64-Bit Server VM 1.8.0_152-release-1056-b12; Deflater: Intel; Inflater: Intel; Provider GCS is available; Picard version: Version:4.1.7.0; [Mon Jun 22 16:48:58 CDT 2020] picard.vcf.MergeVcfs done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=1211105280; To get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp; htsjdk.tribble.TribbleException$MalformedFeatureFile: Unable to create BasicFeatureReader using feature file , for input source: file:///data/infectious/schistosome/tmp/test%20a/data/calling/cerc_prod2.SM_V7_1.vcf.gz; at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:124); at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:81); at htsjdk.variant.vcf.VCFFileReader.<init>(VCFFileReader.java:148); at htsjdk.variant.vcf.VCFFileReader.<init>(VCFFileReader.java:98); at picard.vcf.MergeVcfs.doWork(MergeVcfs.java:174); at picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:305); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgramExecutor.instanceMain(PicardCommandLineProgramExecutor.java:25); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:163); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); Caused by: java.io.FileNotFoundException: /data/infectious/schistosome/tmp/test%20a/data/calling/cerc_prod2.SM_V7_1.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-647808241:2660,test,test,2660,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-647808241,1,['test'],['test']
Testability,Namely MultidimensionalKernelSegmenterUnitTest and ModelSegmentsIntegrationTest. Note that the Cromwell tests already essentially serve as integration tests and that the pipeline has already been through several preliminary evaluations without any issues.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3916:104,test,tests,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3916,2,['test'],['tests']
Testability,Need additional VQSR integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2290:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2290,1,['test'],['tests']
Testability,Need an ability to incorporate the outputs of cromwell runs into our WDL testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6013:73,test,testing,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6013,1,['test'],['testing']
Testability,Need script for running docker tests (easily) without manually copying code in .travis.yml,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3160:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3160,1,['test'],['tests']
Testability,"Need some guidance here. The CompareSAMs tool was not propagating the validation stringency. I have a fix for that, but that alone doesn't fix the compareBAMFiles test in BaseRecalibrationIntegrationTest.java, since that uses SamAssertionUtils.assertSamsEqual, which also doesn't propagate (or accept) a validation stringency. Changing SamAssertionUtils to use either SILENT or LENIENT does fix the integration test, and all the other tests pass, but it seems like a relaxing of the stringency, and I'm not sure it should be necessary to the BQSR test. If relaxing the stringency for BQSR test _IS_ the right path, one possibility is to add a new method to SamAssertionUtils that accepts a validation stringency argument.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/419#issuecomment-109796266:163,test,test,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/419#issuecomment-109796266,6,"['assert', 'test']","['assertSamsEqual', 'test', 'tests']"
Testability,Need to add in test data sources to the test resources for Funcotator.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3906:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3906,2,['test'],['test']
Testability,Need to add more test cases in Funcotator for indels to ensure that all corner cases are being met.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3841:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3841,1,['test'],['test']
Testability,Need to add tests that specifically test the HG38 flows. Should add in a set of representative unit tests that span the large normal data set. Check new contigs as well.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4317:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4317,3,['test'],"['test', 'tests']"
Testability,Need to create a auto or semi automated mechanism to test and evaluate elements incorported from DRAGEN to GATK. This is probably and ongoing task.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6267:53,test,test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6267,1,['test'],['test']
Testability,"Need to modify `htsjdk.samtools.util.Log` so it can log to file, not just stderr.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2751#issuecomment-315940111:37,Log,Log,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2751#issuecomment-315940111,2,"['Log', 'log']","['Log', 'log']"
Testability,Need to test the fix for this on a distributed file system.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4413#issuecomment-376259220:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4413#issuecomment-376259220,1,['test'],['test']
Testability,Need to write unit tests for testing with an invalid kingdom name and for testing with an invalid species name,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7578:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7578,3,['test'],"['testing', 'tests']"
Testability,"Needed two commits because I forgot to check the integration test the first go-round and I had changed parameter args. Sorry!; Github is complaining that there are conflicts, but since local git is fine, I'm assuming that just means I need to rebase before any merge and I should ignore that for now?. Back to you @cwhelan @davidbenjamin",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4769#issuecomment-396709375:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4769#issuecomment-396709375,1,['test'],['test']
Testability,Needs to be rebased after read logical names are re-introduced.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2067:31,log,logical,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2067,1,['log'],['logical']
Testability,Needs to be rebased onto latest master so that tests can pass in travis.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3165#issuecomment-311466218:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3165#issuecomment-311466218,3,['test'],['tests']
Testability,"New PR for these changes; including changes for @akiezun 's comment about making a copy of the test file and @droazen 's comment about naming the SamReaderFactory param ""customSamReaderFactory"".",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/585:95,test,test,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/585,1,['test'],['test']
Testability,New files in the repository after running the whole test suite with gradle,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4206:52,test,test,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4206,1,['test'],['test']
Testability,New logical name feature in TaggedInputFileArgument breaks hdfs urls that contain port numbers.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2000:4,log,logical,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2000,1,['log'],['logical']
Testability,New test for multi-input BOTH mode; Uniquify annotations to fix #2221,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6570:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6570,1,['test'],['test']
Testability,"New tool aiming to call all types of precise variants detectable by long read alignments (not fully functioning yet in the sense that not all types of variants are detected yet&mdash;to be handled by later PRs in this series).; This new tool splits the input long reads by scanning their alignment characteristics (number of alignments, if strand switch is involved, if mapped to the same chromosome, if have equally good alignment configurations based on the scoring tool, etc), and send them down different code path/logic units for variant type inference and VCF output.; This PR would only deal with simple INSDEL, for long reads having exactly 2 alignments (no other equally good alignment configuration) mapped to the same chromosome without strand switch or order switch (translocation or large tandem duplications), because we already have this type of variant covered in master. __UPDATE__; See updated roadmap in #2703. NEEDS TO WAIT UNTIL PART 1 IS IN.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3456:519,log,logic,519,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3456,1,['log'],['logic']
Testability,"New utility function looks good to me. I'm seeing ` java.nio.file.NoSuchFileException: /gatkCloneMountPoint/src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/mnp.input.g.vcf` in the Travis log. Looks like you actually put the file in .../tools/CombineGVCFs/ ?. Also there seems to have been something weird that happened to one of the Funcotator files, perhaps during a rebase?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424340413:112,test,test,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424340413,2,"['log', 'test']","['log', 'test']"
Testability,"New version looks good! My results show identical data in the first 8 columns (sites-only) of the VCF from master and from the latest gatk-3688 branch commit. The log says the new version ran in 39.61 minutes, which is much, much better than the 139.75 minutes for master. I give it a :+1: for meeting the requirements in this issue. I'm still getting very coarse logging, though:; ```; 14:52:36.401 INFO ProgressMeter - Current Locus Elapsed Minutes Variants Processed Variants/Minute; 15:32:05.185 INFO ProgressMeter - chr20:1269692 39.5 1000 25.3; GENOMICSDB_TIMER,GenomicsDB iterator next() timer,Wall-clock time(s),0.3190466489999985,Cpu time(s),0.3105320000000207; 15:32:06.573 INFO ProgressMeter - chr20:1308850 39.5 40156 1016.5; 15:32:06.573 INFO ProgressMeter - Traversal complete. Processed 40156 total variants in 39.5 minutes.; ```; @droazen and I talked about this and he has some ideas, but that can be another ticket.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3688#issuecomment-377613058:163,log,log,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3688#issuecomment-377613058,2,['log'],"['log', 'logging']"
Testability,"Next part of VQSR - the data manager and trainingSet manager + tests.; VariantDatum and VariantRecalibratorArgumentCollection are included here but only to make things compile, no to be reviewed (they are part of another branch). @droazen please review",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/345:63,test,tests,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/345,1,['test'],['tests']
Testability,Nightly Cron job failing because of excessive log output,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3710:46,log,log,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3710,1,['log'],['log']
Testability,"NioByteUnsafe.read(AbstractNioByteChannel.java:131); at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511); at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468); at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382); at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354); at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111); at java.lang.Thread.run(Thread.java:744); ```. And then warnings about lost tasks:. ```; 16/02/16 11:45:59 WARN TaskSetManager: Lost task 42.1 in stage 0.0 (TID 364, dataflow03.broadinstitute.org): java.io.IOException: Connection from /69.173.65.227:56014 closed; ```. Then errors like this:. ```; 16/02/16 11:47:37 ERROR ErrorMonitor: AssociationError [akka.tcp://sparkDriver@69.173.65.227:47043] -> [akka.tcp://sparkExecutor@dataflow05.broadinstitute.org:36695]: Error [Association failed with [akka.tcp://sparkExecutor@dataflow05.broadinstitute.org:36695]] [; ```. akka.remote.EndpointAssociationException: Association failed with [akka.tcp://sparkExecutor@dataflow05.broadinstitute.org:36695]; Caused by: akka.remote.transport.netty.NettyTransport$$anonfun$associate$1$$anon$2: Connection refused: dataflow05.broadinstitute.org/69.173.65.230:36695; ]; akka.event.Logging$Error$NoCause$. ```; 16/02/16 11:47:39 ERROR YarnScheduler: Lost executor 37 on dataflow02.broadinstitute.org: remote Rpc client disassociated; ```. This seems to be causing tasks to be re-queued and executed, which hurts performance. The command line I'm using is:. ```; gatk-launch FindBadGenomicKmersSpark --reference hdfs:///user/cwhelan/reference/Homo_sapiens_assembly19.2bit --output bad_kmers_v5_cluster.txt -- --sparkRunner SPARK --sparkMaster yarn-client --executor-memory 8g --driver-memory 8g --conf spark.broadcast.blockSize=1g; ```. Running against commit f2b3bae of branch https://github.com/broadinstitute/gatk/tree/cw_clusterize_sv_spark_tools",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1491:6054,Log,Logging,6054,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1491,1,['Log'],['Logging']
Testability,"No longer draft, but this PR requires an htsjdk update for the test to pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7066#issuecomment-775180228:63,test,test,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7066#issuecomment-775180228,1,['test'],['test']
Testability,"No need to change anything really, go ahead and merge once conflicts are addressed and tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5462#issuecomment-449686567:87,test,tests,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5462#issuecomment-449686567,1,['test'],['tests']
Testability,No prob - they were definitely needed. I've moved the large files (hopefully I changed the code paths correctly). Once tests pass I'll merge.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6477#issuecomment-595330718:119,test,tests,119,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6477#issuecomment-595330718,1,['test'],['tests']
Testability,No prob. It was reasonably straight-forward - just a little more work than I expected to bubble down the command-line parameter. Just addressed your comments. When it's done passing tests I'll merge it in.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6577#issuecomment-621380344:182,test,tests,182,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6577#issuecomment-621380344,1,['test'],['tests']
Testability,"No problem Chris. I'm going to assume we can run on CRAMs any tool that takes a BAM. I will be testing this and if I find otherwise, I'll let the team know.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334159313:95,test,testing,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334159313,1,['test'],['testing']
Testability,"No problem – I can see how this would be challenging to review – maybe it’s not even practical – if you decide it’s best just not to use it that’s OK - working on these issues has been a valuable learning experience for me. . I sent an archive with the new validations and the diffs between the old and new bams to akiezun. Although in many cases the files shared types of errors, I had to look at each file individually to take into account the particular errors in each file and how to fix them without (to the best of my knowledge) interfering with the purpose of the test. I did write a python script to use where necessary for converting multiple unpaired reads in a file to single reads, and I used bash scripts to call the picard tools to convert multiple files at a time from bam to sam for editing and then back again after they were modified. In some cases I had to modify the values in test output files to match the values produced by the test using the modified bams/sams, or just capture the new output files and use them to replace the old with the new. In two cases where file format errors appeared to be necessary but the filename did not indicate this, I renamed the files to make this clear. From: Louis Bergelson ; Sent: Thursday, August 20, 2015 2:13 PM; To: broadinstitute/hellbender ; Cc: nenewell ; Subject: Re: [hellbender] Issue 569 - bam and sam file cleanup. (#809). @nenewell Sorry this has been sitting. We've been trying to figure out how to review this one. Could you describe how you made the changes? Did you script it or go through by hand and modify them all?. —; Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/809#issuecomment-133123051:571,test,test,571,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/809#issuecomment-133123051,3,['test'],['test']
Testability,"No update, sorry. The PRs are pending of review, and the data is still not available for proper testing...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3104#issuecomment-361892345:96,test,testing,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3104#issuecomment-361892345,1,['test'],['testing']
Testability,No validation here. I was satisfied with the validation from the Palantir report and using this as a robustness test to show that GATK4 HC isn't going to fall over. I have a matched list of GVCFs here: /humgen/gsa-hpprojects/dev/gauthier/scratch/newQualHC/check.list @skwalker could you adapt your analysis to run with this list? I'll need to give you a different jar for the GenotypeGVCFs step on my GVCFs since the annotation format is outdated.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-380822981:112,test,test,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4614#issuecomment-380822981,1,['test'],['test']
Testability,No waivers! ;) . I updated the wiki with a note about the PHP functionality (anticipating the merge of your PR slightly) and describing the outputs a tad more. . @droazen Are we ok to merge this or holding off on everything until tests run again?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3165#issuecomment-311126776:230,test,tests,230,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3165#issuecomment-311126776,1,['test'],['tests']
Testability,"No worries. I'm happy to ada a test or two, just wanted to make sure I was on the right track first. Re: GenomcisDBImport - I'm sort of hoping that anyone advanced enough to be using GenomicsDB will understand/heed the warnings about not enabling MNPs during GVCF generation, since I'm assuming it's mostly Broad and other large-scale facilities using that?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-421371522:31,test,test,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-421371522,1,['test'],['test']
Testability,No. Can I use /humgen/gsa-hpprojects/GATK/gatk4/gatk4-latest/gatk-protected.jar to test it?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2221#issuecomment-255779037:83,test,test,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2221#issuecomment-255779037,1,['test'],['test']
Testability,"NoSuchFieldException e) {; throw new RuntimeException(""Couldn't reset FilesystemProviders"");; }; try {; final Path index = Paths.get(new URI(""gs://hellbender/test/build_reports/1626.1/tests/index.html""));; System.out.println(""Count:"" + Files.lines(index).count());; } catch (URISyntaxException | IOException e) {; throw new RuntimeException(""Couldn't read file"");; }; }; }. private void modifyProviders() throws IllegalAccessException, NoSuchFieldException {; final Field installedProviders = FileSystemProvider.class.getDeclaredField(""installedProviders"");; installedProviders.setAccessible(true);; installedProviders.set(null, loadInstalledProviders());; installedProviders.setAccessible(false);; }. //copied from FileSystemProvider, modified to use TestGCS.classLoader() instead of systemClassloader; private static List<FileSystemProvider> loadInstalledProviders() {; List<FileSystemProvider> list = new ArrayList<FileSystemProvider>();. ServiceLoader<FileSystemProvider> sl = ServiceLoader; .load(FileSystemProvider.class, TestGCS.class.getClassLoader());. // ServiceConfigurationError may be throw here; for (FileSystemProvider provider: sl) {; String scheme = provider.getScheme();. // add to list if the provider is not ""file"" and isn't a duplicate; if (!scheme.equalsIgnoreCase(""file"")) {; boolean found = false;; for (FileSystemProvider p: list) {; if (p.getScheme().equalsIgnoreCase(scheme)) {; found = true;; break;; }; }; if (!found) {; list.add(provider);; }; }; }; return list;; }; }; ```. We'd have to add an initial action to GATKSparkTool that would run `modifyProviders` once on each executor which may be a bit of a trick on it's own. . If we decided to do this it would make sense to make `modifyProviders` use the same synchronization conditions as the actual `FileSystemProvider` loading, in order to not have any race conditions, I wanted to get feedback on this approach before putting effort into doing it correctly though. @tomwhite @jean-philippe-martin What do you think?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2312:2369,Test,TestGCS,2369,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2312,1,['Test'],['TestGCS']
Testability,"Normally one provides passing workflow runs with a PR. For the integration run [that is here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ab86fb6d-c5d6-48b6-8322-923af691751c). There's also a ""real"" run taking place using this branch [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/db59d5b8-e2ac-4619-9563-aa5631bf053c). However for testing correctness of these changes with respect to the requester pays flag, my pet ""does not have serviceusage.services.use access to the Google Cloud project"". I therefore present instead a [run with my changes](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/9e712055-f466-4929-b6eb-5306f3cde1a0) that fails in exactly the same way as a [run without my changes](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/185506f5-9dc1-4c02-997d-6fe3f5695259).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8552:374,test,testing,374,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8552,1,['test'],['testing']
Testability,"Not completely sure, but this part of the log; ```; 17:16:20.921 INFO IntervalArgumentCollection - Processing 0 bp from intervals; ```; suggests that something is wrong with the bed file they are using (is it empty?) or perhaps the sequence dictionary. Looks like the tool thinks there are no intervals being imported (total size of intervals imported is 0)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7037#issuecomment-759828592:42,log,log,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7037#issuecomment-759828592,1,['log'],['log']
Testability,"Not quite ready to be production level, ; but I've polished it as I reviewed the concordance results given by this tool. Important limitation: this doesn't perform genotype concordance tests, and it's probably better to wait until @vruano 's genotyping module is stable. @cwhelan and @vruano tagging you two as the victim for reviewing.; Also please feel free to propose feature requests.; Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5117:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5117,1,['test'],['tests']
Testability,"Not ready for merge yet! Needs tests + some additional fixes for `AnalyzeCovariates`. The basic `BaseRecalibrator` -> `ApplyBQSR` pipeline with a custom covariate seems to be working, however. @takutosato please try this branch out with your new homopolymer covariate and let me know whether it works! Feel free to grab some time on my calendar next week for help working through any issues.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4688#issuecomment-383229944:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4688#issuecomment-383229944,1,['test'],['tests']
Testability,"Not really an issue, just wanted to document some surprising behavior. @tmelman has been reviving/reimplementing some ancient CNV/ModelSegments evaluations (dating as far back as 4.0.2.1!) and trying to understand whether observed differences---intentional or otherwise---are due to method changes I might have made, or if she might've introduced changes in her reimplementation of the evaluation code. I ran some checks on the stability of ModelSegments using an old set of inputs (normal/tumor allelic counts and denoised copy ratios for SM-74P4M WES). Behavior has remained largely stable since at least 4.1.0.0. Namely:. 1) We evaluated and signed off on a change that went into 4.1.0.0. See comments in https://github.com/broadinstitute/gatk/pull/5575.; 2) A slight numerical difference in the MCMC-sampled allele fractions was introduced by changes made to some MathUtils code for calculating logs/factorials/etc. between 4.1.0.0 and 4.1.1.0 in https://github.com/broadinstitute/gatk/pull/5814. Note that no CNV code was directly changed, it's just that we call out to that changed MathUtils code---namely, to calculate log10factorial. The overall result in my test was a very slight change to the number of segments found, from 516 to 522.; 3) No further numerical changes have been introduced through the current 4.2.4.1, so any additional code changes I made were indeed true refactors, at least from the perspective of this simple test. Phew!. I was indeed surprised to find that very slight differences in the log10factorial behavior (which result from changing the recursive calculation of cached values to a direct one, and appear in something like the 13th decimal place) led to non-negligible changes in the MCMC estimates of the allele fractions---and thus, changes in the number of segments. Although these are also relatively slight differences in terms of practical impact, they are perhaps much larger than one might guess, given their humble origins.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7649:899,log,logs,899,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7649,3,"['log', 'test']","['logs', 'test']"
Testability,"Not sure about the number of jobs per physical machine @jean-philippe-martin , I'd have to check with @Horneth who is running the tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3072#issuecomment-307499814:130,test,tests,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3072#issuecomment-307499814,1,['test'],['tests']
Testability,"Not sure if intermittent:; `Gradle suite > Gradle test > org.broadinstitute.hellbender.tools.walkers.GnarlyGenotyperIntegrationTest > testUsingGenomicsDB[4]([Ljava.io.File;@4f23de76, src/test/resources/org/broadinstitute/hellbender/tools/walkers/GnarlyGenotyper/twoSampleAS.vcf, src/test/resources/org/broadinstitute/hellbender/tools/walkers/GnarlyGenotyper/twoSampleASDB.vcf, [20:1-2147483647], [], /home/travis/build/broadinstitute/gatk/src/test/resources/large/human_g1k_v37.20.21.fasta) SKIPPED`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6657:50,test,test,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6657,5,['test'],"['test', 'testUsingGenomicsDB']"
Testability,"Not sure if this is a bug or something wrong with my bam files. Any help on solving/debugging would be welcomed. Running mutect2 returns >100,000 warnings of more than two reads with the same name found. The bams were processing following best practices. The header of the log file: . Mutect2 -R resources/hg38/genome/d ; 975 efault/genome.fa -L resources/hg38/a.interval_list -I recal/RBL3_diagnostic.bam -I recal/RBL3_germline.bam -I recal/RBL3_diagnostic.bam -I recal/RBL3_relapse1.bam -I recal/RBL ; 976 3_relapse2.bam -I recal/RBL3_PDX.bam -normal RBL3_germline_hg38 --germline-resource resources/hg38/gnomad/af-only-gnomad.hg38.vcf.gz --panel-of-normals resources/hg38/pon/1000 ; 977 g_pon.hg38.vcf.gz --f1r2-tar-gz results/RBL3/f1r2.tar.gz --read-filter NotSupplementaryAlignmentReadFilter --read-filter NotSecondaryAlignmentReadFilter --native-pair-hmm-thre ; 978 ads 20 -O results/RBL3/unfiltered.vcf ; 979 17:07:51.270 WARN GATKReadFilterPluginDescriptor - Redundant enabled filter (NotSecondaryAlignmentReadFilter) is enabled for this tool by default ; 980 17:07:51.313 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/rds/project/rds-cyiwgCzJok8/WES_snakemake/.snakemake/conda/773770bb2edb9f4c58fb17b5017e1f ; 981 be_/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so ; 982 17:07:51.633 INFO Mutect2 - ------------------------------------------------------------ ; 983 17:07:51.635 INFO Mutect2 - The Genome Analysis Toolkit (GATK) v4.5.0.0 ; 984 17:07:51.635 INFO Mutect2 - For support and documentation go to https://software.broadinstitute.org/gatk/ ; 985 17:07:51.635 INFO Mutect2 - Executing as cjs236@cpu-r-25 on Linux v4.18.0-553.16.1.el8_10.x86_64 amd64 ; 986 17:07:51.635 INFO Mutect2 - Java runtime: OpenJDK 64-Bit Server VM v17.0.11-internal+0-adhoc..src ; 987 17:07:51.635 INFO Mutect2 - Start Date/Time: August 28, 2024 at 5:07:51 PM BST ; 988 17:07:51.635 INFO Mutect2 - ----------------------------------",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8966:273,log,log,273,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8966,1,['log'],['log']
Testability,"Not sure if/how `GATKPathSpecifier` could cause this. @riederd Have you ever run this same command in a previous GATK version (ie., 4.1.6.0). It would be super helpful to know if 4.1.6.0 doesn't have this problem. Also, the only `GATKPathSpecifier` changes in 4.1.7.0 were for reference files. . I've long suspected that we have a file handle leak somewhere, since I encounter it when running tests locally, but have never been able to track it down.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6578#issuecomment-623454830:393,test,tests,393,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6578#issuecomment-623454830,1,['test'],['tests']
Testability,"Not sure this is ready for a complete review yet, but wanted to get feedback early (not a lot of testing here).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6274#issuecomment-556364217:97,test,testing,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6274#issuecomment-556364217,2,['test'],['testing']
Testability,"Not sure what's going on here, but thought I'd document. See https://storage.googleapis.com/hellbender-test-logs/build_reports/master_35408.2/tests/test/classes/org.broadinstitute.hellbender.tools.dragstr.CalibrateDragstrModelIntegrationTest.html#testDragstrModelInferenceFailingOverToDefaults[0](1,%20false)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7403:103,test,test-logs,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7403,4,['test'],"['test', 'test-logs', 'testDragstrModelInferenceFailingOverToDefaults', 'tests']"
Testability,"Not surprised that tests didn't change -- we only use the `PositionalDownsampler` inside a downsampling iterator for HC/M2, never a `ReservoirDownsampler` directly. I believe that the CNN tool is the first case where we wanted to use a `ReservoirDownsampler` directly inside an iterator, and ran into this bug.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5594#issuecomment-456980817:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5594#issuecomment-456980817,1,['test'],['tests']
Testability,Not yet - I didn't have the time to figure out how to do the test utility to create small pile of reads (because I think that there is already similar functionality in `ArtificialReadUtils`.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4682#issuecomment-415849096:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4682#issuecomment-415849096,1,['test'],['test']
Testability,NotEquals(Assert.java:512); 	at org.testng.Assert.assertTrue(Assert.java:41); 	at org.testng.Assert.assertTrue(Assert.java:51); 	at org.broadinstitute.hellbender.tools.walkers.gnarlyGenotyper.GnarlyGenotyperEngineUnitTest.testGenotypeCallForLotsOfAlts(GnarlyGenotyperEngineUnitTest.java:71); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.intern,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6086#issuecomment-519578293:1265,Test,TestMethodWorker,1265,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6086#issuecomment-519578293,1,['Test'],['TestMethodWorker']
Testability,"Note also that gCNV WDL tests are hanging because of bullet 3, since theano/PyMC3 is probably falling back on non-compiled implementations as well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-406380497:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-406380497,1,['test'],['tests']
Testability,Note that I re-enabled CRAM tests for this tool and included CRAM files for the new tests since the tool itself happily consumes CRAM files. If for some reason this is the wrong thing to do then we probably should disable the tests and change the tool to reject these.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/838:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/838,3,['test'],['tests']
Testability,"Note that gCNV WDL tests are now passing, but at ~1:05 come in at just under the Travis time limit of ~1:10. They also run twice as long as the other tests, so it would be good to trim even further.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-355025857:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-355025857,2,['test'],['tests']
Testability,Note that there is a disabled test in `DataprocIntegrationTest` that should be re-enabled once this is fixed. (The test was introduced in https://github.com/broadinstitute/gatk/pull/3767).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3840#issuecomment-345837301:30,test,test,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3840#issuecomment-345837301,2,['test'],['test']
Testability,Note that we can't merge #4061 until we make a decision about how to handle a missing osx64 python dependency. But we could easily cherry-pick the trimming of the tests.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4064#issuecomment-355666988:163,test,tests,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4064#issuecomment-355666988,1,['test'],['tests']
Testability,"Note that we could probably extract some code for reading and subsetting read counts for both DetermineGermlineContigPloidy and GermlineCNVCaller, see related issue #4004. There is also some duplication in the integration-test code, which is probably not worth cleaning up. @ldgauthier would you mind reviewing?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5307#issuecomment-430629093:222,test,test,222,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5307#issuecomment-430629093,1,['test'],['test']
Testability,Note to self: move the purging of the cache to the end of execution and test that leftover cache values are never present after invoking referenceConfidenceModel,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5911#issuecomment-489242346:72,test,test,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5911#issuecomment-489242346,1,['test'],['test']
Testability,Note: it looks like this doesn't fix the ConcurrentModificationException during serialization while running the unit tests on my Picard branch.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3581#issuecomment-329793309:117,test,tests,117,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3581#issuecomment-329793309,1,['test'],['tests']
Testability,"Note: the test failures seem to have a lot of docker ""toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading"" and are probably not due to these changes.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7219#issuecomment-824459892:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7219#issuecomment-824459892,1,['test'],['test']
Testability,"Note: these are not hooked up to the code anywhere, I have another branch where I am doing the work to plug these in. This also does not currently resolve the equivalent issue to https://github.com/broadinstitute/gatk/issues/3848 but it does add tests to both plugins enforcing what the correct behavior should be. . fixes #3624",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3851:246,test,tests,246,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3851,1,['test'],['tests']
Testability,"Notes from @kvg :. Manuscript on LdBG details: https://academic.oup.com/bioinformatics/article/34/15/2556/4938484. Reference implementation of the assembler in C: https://github.com/mcveanlab/mccortex; mcveanlab/mccortex. My Java library for accessing and manipulating LdBGs and associated formats: https://github.com/mcveanlab/CortexJDK. A useful starting point is the tests I've written to produce Figure 1 (the one with the pentagram cycle) from the manuscript. Without links: https://github.com/mcveanlab/CortexJDK/blob/4ba64ee268314729c871916dfc9ee7c9c422c5cb/public/java/tests/uk/ac/ox/well/cortexjdk/utils/traversal/TraversalEngineTest.java#L210. With links: https://github.com/mcveanlab/CortexJDK/blob/4ba64ee268314729c871916dfc9ee7c9c422c5cb/public/java/tests/uk/ac/ox/well/cortexjdk/utils/traversal/TraversalEngineTest.java#L229. (Oh and FYI, there's one place where my implementation of the read threading currently doesn't match the McCortex C reference implementation - the handling of sequencing errors and replacing the errorful kmers with kmers from the graph. It's an easy thing to add; I just hadn't gotten around to it because I didn't have the need to do that alignment myself given that all my graphs and links were constructed with McCortex anyway.)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5828#issuecomment-475750843:370,test,tests,370,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5828#issuecomment-475750843,3,['test'],['tests']
Testability,"Notes:. - Classes in hellbender/tools/picard/analysis/artifacts are removed and replaced with Picard versions (except Transition, which is not public in Picard).; - GATK version of GatherVcfs is retained, and the Picard version is masked out - is this what we want ?; - The non-Spark GATK metrics tools have been removed and replaced with the Picard versions. The test data is retained (but moved) since its used by the Spark metrics tool tests. Additional changes we'll want to make separately to minimize the complexity of this PR:; - Eliminate the download of picard.jar from the GATK WDL tests and update the WDL to run Picard tools through GATK.; - Unify and merge the Picard and GATK program groups. These are similar, but not identical, and the combined result has artificial/duplicate groups.; - Normalize the confusing mix of Alpha/Beta/Experimental tags and comments.; - Add unified doc and tab-completion tasks that include Picard.; - Remove and replace SamComparison and Transition classes with the Picard versions.; - Fix GATK CompareBaseQualities (its a PicardCommandLineProgram).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3620:364,test,test,364,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3620,3,['test'],"['test', 'tests']"
Testability,"Noticed some compile warnings in the Travis logs, looks like a funky apostrophe is to blame?. :compileJava/gatk/src/main/java/org/broadinstitute/hellbender/tools/walkers/ReferenceConfidenceVariantContextMerger.java:511: error: unmappable character for encoding ASCII; // if there???s more than 1 DEL allele then we need to use the best one; ^",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3748:44,log,logs,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3748,1,['log'],['logs']
Testability,Noticed these while working on another branch - the companion cram files for these are queryname sorted. Let see if tests pass.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6149:116,test,tests,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6149,1,['test'],['tests']
Testability,"Now if the user arguments provide the option `--disableAllReadFilters` and the `isDisableFilter` pass any of the default/user filters, it returns false. If some filter is required for the tool or a warning should be log, this does not allow to do it in the proper way. I propose to honor this option in the current implementation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2363:216,log,log,216,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2363,1,['log'],['log']
Testability,Now integration tested successfully [here](https://app.terra.bio/#workspaces/broad-firecloud-dsde/VS-415%20GVS%20Quickstart%20Default%20Extract%20Scatter/job_history/ff9d7466-79f1-4c96-a7b9-dd2354dc1c76).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7878#issuecomment-1147593213:16,test,tested,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7878#issuecomment-1147593213,1,['test'],['tested']
Testability,"Now looks at manifest file, not readme.; Now supports version decorators (e.g. `somatic`) after version numbers in manifest file.; Added in a unit test to check the version regex. Fixes #4582 ; Fixes #4692",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5149:147,test,test,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5149,1,['test'],['test']
Testability,"Now that BQSR supports multiple known sites files (as it did in the old GATK), we should add tests for the multi-file case (eg., known SNPs and known indels as separate inputs).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/231:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/231,1,['test'],['tests']
Testability,"Now that Disq runs tests on 'large' BAM and VCF files (https://github.com/disq-bio/disq/pull/103), we can remove the Beta label from some more of the Spark tools.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5991:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5991,1,['test'],['tests']
Testability,"Now that I think more about it, I'm surprised none of the GenotypeGVCFs tests changed. I guess they must all be too few samples. Mostly for my own reference, WARP tests are running here: https://gotc-jenkins.dsp-techops.broadinstitute.org/job/warp-workflow-tests/11738/",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-912001131:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-912001131,3,['test'],['tests']
Testability,"Now that I've spent a day surveying the landscape of p-values, I'm thinking what must've happened is that an undocumented mid-p-value correction was added to the one-tailed p-value we claim to calculate. This is probably a fine thing to calculate, but such a correction is not discussed in the annotation docs nor in the Wigginton paper cited there. Nor is this what is calculated by any of the other implementations out there, as far as I can tell. So we could keep the original calculation, while further clarifying what exactly we are calculating in the docs (and add references, if appropriate). In this case, we can just keep the cleanup and improved tests as a bonus. (As a further bonus, we won't lose our old friend 3.0103!). Or we could move to this calculation. In this case, I believe we would match the bcftools ExcHet p-value (although I still need to check this claim for correctness). I'm not sure if the original intent was to be more/less conservative in retaining sites during hard filtering prior to VQSR. But since the filtering threshold used in Best Practices seems very conservative, I would guess that we wanted to err on the side of not throwing out possible variants, even if they are pretty out of HWE. Which makes the choice of a mid p-value puzzling, since it's strictly smaller and will thus lead to more rejections (I think, if I've got everything the right way around!). Happy to go either direction. In the end, I have just reaffirmed my dislike for p-values, which I had hitherto thought to be saturated.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-893597356:656,test,tests,656,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-893597356,2,['test'],['tests']
Testability,"Now that MarkDuplicatesSpark matches Picard MarkDuplicates, we should add tests to ensure that it stays that way.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5610:74,test,tests,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5610,1,['test'],['tests']
Testability,"Now that htsjdk has support for indexed block-compressed FASTA, maybe the best approach is to add support also in GATK to allow this test resource to be smaller (and at the same time, check integration with other tools). @droazen - is there any plan to include support for bgzip FASTA in GATK soon? I can take that as a small project if you are interested, but I should plan it somehow to be sure about the rettirements in GATK to support them.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-413436528:133,test,test,133,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-413436528,1,['test'],['test']
Testability,"Now that sequence dictionary validation is in, we can re-enable this test,; which was previously failing with a java.lang.OutOfMemoryError due to lack; of upfront validation of the reads vs. reference sequence dictionaries.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/668:69,test,test,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/668,1,['test'],['test']
Testability,"Now that the `fasta.gz` support has been merged, this ticket is unblocked. As a first step, we need to select exactly which references go in. . HG38 is easy -- I'd suggest we just use the official copy in the Broad filesystem at `/seq/references/Homo_sapiens_assembly38/v0/Homo_sapiens_assembly38.fasta`, and make our compressed version from that. HG19 is more complicated, since we need to choose between several different variations (like ""b37""). The official copy in the Broad filesystem at `/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta` appears to actually be b37 going by the contig naming convention (""1"" vs. ""chr1""). It's worth noting that most of our existing tests are written against a subsetted version of b37 in large (`human_g1k_v37.20.21.fasta`). @jonn-smith and @SHuang-Broad please weigh in as to whether a b37 reference would be ok, or whether you require a different HG19 variant. I don't think we can afford to check in more than one.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-423568585:696,test,tests,696,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5111#issuecomment-423568585,1,['test'],['tests']
Testability,"Now that there's more rigorous sequence dictionary validation a bunch of dictionaries don't jive with the reference, especially files of the form src/test/resources/org/broadinstitute/hellbender/tools/copynumber/gcnv-postprocess/shard_0-calls/interval_list.tsv",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6957:150,test,test,150,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6957,1,['test'],['test']
Testability,"Now that we have good NIO support for reading BAMs from GCS via ReadWalkers, we should look at CRAM as well and evaluate what changes need to be made in htsjdk/GATK to allow NIO to work for CRAMs. It's a separate code path in `SAMReaderFactory`, so I suspect it will not work immediately (though I have not yet tested).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2409:311,test,tested,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2409,1,['test'],['tested']
Testability,"Now that we're using git lfs to manage our large test resources, we need to configure travis to install/init git lfs before running the test suite.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/840:49,test,test,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/840,2,['test'],['test']
Testability,"Now that we've added the complete B37 and HG38 references to our test data (https://github.com/broadinstitute/gatk/pull/5309), we should remove redundant snippets of these references to save space, and replace usages of the snippets with usages of the full-sized references.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5313:65,test,test,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5313,1,['test'],['test']
Testability,Now the validation test data sets are in the normal git file repository.; This allows them to be visually inspected for differences when they have; changed (during a code review). Fixes #5379,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5381:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5381,1,['test'],['test']
Testability,Now throws a UserException.MalformedFile if the resulting header has no; dictionary. Added testLoadFastaDictionaryWithFastaFile to test this case. resolves #2609,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2803:91,test,testLoadFastaDictionaryWithFastaFile,91,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2803,2,['test'],"['test', 'testLoadFastaDictionaryWithFastaFile']"
Testability,Now to begin the process of making the travis tests work on this branch....,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6764#issuecomment-679237798:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6764#issuecomment-679237798,1,['test'],['tests']
Testability,"Now, we many Dataflow tests have reads, variants, and reference bases on contig ""2"" as well as ""1"". I also added a useful utility DoFn: PrintCollection.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/747:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/747,1,['test'],['tests']
Testability,NzREJJbXBvcnQuamF2YQ==) | `70% <75.532%> (+2.71%)` | `27 <16> (+9)` | :arrow_up: |; | [...s/spark/ParallelCopyGCSDirectoryIntoHDFSSpark.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9QYXJhbGxlbENvcHlHQ1NEaXJlY3RvcnlJbnRvSERGU1NwYXJrLmphdmE=) | `0% <0%> (-80.612%)` | `0% <0%> (-19%)` | |; | [...institute/hellbender/utils/gcs/GATKGCSOptions.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvR0FUS0dDU09wdGlvbnMuamF2YQ==) | `0% <0%> (-66.667%)` | `0% <0%> (ø)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `53.247% <0%> (-18.831%)` | `28% <0%> (-7%)` | |; | [...ender/engine/datasources/ReferenceMultiSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/2634?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGV,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2634#issuecomment-298806429:2143,test,test,2143,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2634#issuecomment-298806429,1,['test'],['test']
Testability,"O /data/xieduo/Immun\_genomics/data/Łuksza\_2022\_Nature/bam/PAAD11N.recal\_data.test.table ; ; Using GATK jar /data/xieduo/WES\_pipe/pipeline/bin/gatk-4.2.6.1/gatk-package-4.2.6.1-local.jar ; ; Running: ; ;     java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Xmx30G -jar /data/xieduo/WES\_pipe/pipeline/bin/gatk-4.2.6.1/gatk-package-4.2.6.1-local.jar BaseRecalibrator -R /data/reference/gatk\_resource/Homo\_sapiens\_assembly38.fasta -I /data/xieduo/Immun\_genomics/data/Łuksza\_2022\_Nature/bam/PAAD11N.rmdup.bam --known-sites /data/xieduo/WES\_pipe/pipeline/gatk\_resource/dbsnp\_146.hg38.vcf.gz --known-sites /data/reference/gatk\_resource/1000G\_phase1.snps.high\_confidence.hg38.vcf.gz --known-sites /data/reference/gatk\_resource/Mills\_and\_1000G\_gold\_standard.indels.hg38.vcf.gz -O /data/xieduo/Immun\_genomics/data/Łuksza\_2022\_Nature/bam/PAAD11N.recal\_data.test.table ; ; 00:12:20.992 INFO  NativeLibraryLoader - Loading libgkl\_compression.so from jar:file:/data/xieduo/WES\_pipe/pipeline/bin/gatk-4.2.6.1/gatk-package-4.2.6.1-local.jar!/com/intel/gkl/native/libgkl\_compression.so ; ; 00:12:21.140 INFO  BaseRecalibrator - ------------------------------------------------------------ ; ; 00:12:21.141 INFO  BaseRecalibrator - The Genome Analysis Toolkit (GATK) v4.2.6.1 ; ; 00:12:21.141 INFO  BaseRecalibrator - For support and documentation go to [https://software.broadinstitute.org/gatk/](https://software.broadinstitute.org/gatk/) ; ; 00:12:21.141 INFO  BaseRecalibrator - Executing as xieduo@pbs-master on Linux v3.10.0-1160.41.1.el7.x86\_64 amd64 ; ; 00:12:21.141 INFO  BaseRecalibrator - Java runtime: Java HotSpot(TM) 64-Bit Server VM v18+36-2087 ; ; 00:12:21.142 INFO  BaseRecalibrator - Start Date/Time: August 21, 2022 at 12:12:20 AM CST ; ; 00:12:21.142 INFO  BaseRecalibrator - ------------------------------------------------------------ ; ; 00",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8005:15690,test,test,15690,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8005,1,['test'],['test']
Testability,O.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringZfromFORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilterWithSeparateNames.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask3.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMaskReversed.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testNoAction.vcf.idx; src/test/resources/org/broadinstitute/hellben,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:53761,test,test,53761,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"OK - PedigreeValidationType is now set in the constructor and is final. This does not separate the two intertwined codepaths around PedigreeFile vs. FounderIds, but that was a pre-existing problem. It doesnt doesnt change the pre-existing weirdness around the timing of setting pedigreeFile and/or founderIds within GATKAnnotationPluginDescriptor, where PedigreeAnnotation gets special treatment. I dont think this makes that situation any worse. if you still have concerns on this proposal, I actually think I could make our code work if you simply exposed a protected getPedigreeFile() method on PedigreeAnnotation. I can make the SampleDB instance in my code without needed to share code here. It seemed useful to expose some of that code to avoid duplication, but if it's going to over-complicate we can remove it. Also: that one test failure seems potentially unrelated (https://travis-ci.com/github/broadinstitute/gatk/jobs/510624560)? A compile issue with javadoc?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7277#issuecomment-853986169:834,test,test,834,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7277#issuecomment-853986169,2,['test'],['test']
Testability,"OK - added two tests for interval_list generation. One with a single interval, one with multiple non-adjacent intervals. Rebased to resolve conflict as well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519675775:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-519675775,1,['test'],['tests']
Testability,"OK @droazen @davidbenjamin I think this is ready for review. Note that:. 1) I did not restore the optimization introduced by @davidbenjamin in #5466. Happy to file an issue to restore it later by adding the appropriate parameter check, if we think it's important.; 2) I only added integration tests for HC and M2, since there is only a minimal test for FilterAlignmentArtifacts at this time. But I would think that these tests are enough to show that the exposure preserves behavior (unless I somehow got extremely unlucky with the test data and parameter values...); 3) Apologies to the reviewer for the somewhat complicated commit history, which resulted from introducing/removing the TSV stuff and was more trouble than it might be worth to reorder/resolve in the final rebase. I think it would be easiest for the reviewer to look at the 4 ""bubbled up..."" commits separately when reviewing the exposure of each parameter set, but then look at the overall commit when reviewing more superficial things or the tests.; 4) I'd appreciate it if the reviewer double checked that I did not switch anything up in parameter names, doc strings, default values, etc. when introducing the 12 explicit args in AssemblyBasedCallerArgumentCollection. Lots of copying and pasting there and would be easy to screw things up, as you might imagine! Pretty sure the tests bear out that this was done correctly, but you never know. Thanks!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6885#issuecomment-897081017:293,test,tests,293,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6885#issuecomment-897081017,6,['test'],"['test', 'tests']"
Testability,"OK I did some more testing, turns out I was wrong (the forum post was also misleading). ; The problems in the comparison here are not between the Input VCF and the dbSNP, but between the dbSNP and the Reference FASTA file. . I.e. I was using the dbSNP file where the order of chromosomes was like this; `1,2,3...` (downloaded from BROAD); But the Reference FASTA had the order of chromosomes like this; `1,10,11...` (downloaded from ENSEMBL). So yeah... if there's an option for the comparator not to look at the order of chromosomes, cool, and if not, then sorting the dbSNP according to the Reference FASTA is the way to go",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6855#issuecomment-712495203:19,test,testing,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6855#issuecomment-712495203,1,['test'],['testing']
Testability,OK here's a squashed and rebased version. Let's see how the tests go.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-467213589:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5378#issuecomment-467213589,1,['test'],['tests']
Testability,"OK it's up at [#2239](https://github.com/GoogleCloudPlatform/google-cloud-java/pull/2239), please have a look. I've updated the code to retry when reopens are indicated (since the two don't overlap I take back that line about it retrying 40 times). This means that it'll be close to the level of aggressive that you tested with.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3253#issuecomment-315479752:316,test,tested,316,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3253#issuecomment-315479752,1,['test'],['tested']
Testability,OK so [the script I wrote earlier](https://github.com/broadinstitute/gatk/blob/2bbc917d86942bdc0a72670cb3925ccd4d56e661/scripts/variantstore/repo/generate_git_filter_repo_command.sh) was really about figuring out which files in `ah_var_store` were candidates to be moved to a new `variantstore` repo and not explicitly about identifying cruft in our `ah_var_store` branch (though I did incidentally identify some cruft in the process of writing the script). However a couple of functions from this can be repurposed to find cruft:. ```; % comm -1 -2 <(files_deleted_from_master) <(files_added_on_ah_var_store) ; scripts/vcf_site_level_filtering_cromwell_tests/vcf_site_level_filtering_travis.json; src/test/resources/large/filteringJointVcf/test_10_samples.22.avg.vcf.gz; src/test/resources/large/filteringJointVcf/test_10_samples.22.avg.vcf.gz.tbi; src/test/resources/large/filteringJointVcf/test_10_samples.23.avg.vcf.gz; src/test/resources/large/filteringJointVcf/test_10_samples.23.avg.vcf.gz.tbi; src/test/resources/large/filteringJointVcf/test_10_samples.sites_only.vcf.gz; src/test/resources/large/filteringJointVcf/test_10_samples.sites_only.vcf.gz.tbi; %; ```. Which are the 6 files we already knew about plus a bonus JSON. I'll make a PR against `ah_var_store` to clean this out and hopefully prevent anyone else from having to think about these files again. 🙂,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8256#issuecomment-1480299299:702,test,test,702,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8256#issuecomment-1480299299,6,['test'],['test']
Testability,"OK, @meganshand pointed me to the original Wigginton R implementation at http://csg.sph.umich.edu/abecasis/Exact/snp_hwe.r and the Hail implementation at https://github.com/hail-is/hail/blob/main/hail/src/main/scala/is/hail/stats/LeveneHaldane.scala, further mentioning that these may have been used for checking test values. Both of these use the recurrence relation, rather than directly computing the likelihoods as the python implementation above does. Note that the documentation in ExcessHet indicates that a one-sided p-value is intended to be calculated according to Wigginton. However, the Wigginton R implementation calculates a two-sided p-value, although expressions for one-sided p-values are commented out. The latter also seem to contain typos, perhaps due to R indexing:; ```; phi <- min(1.0, sum(probs[obs_hets + 1: rare + 1]) / mysum); ```; should be; ```; phi <- min(1.0, sum(probs[(obs_hets + 1):(rare + 1)]) / mysum); ```; See implementations in other languages at http://csg.sph.umich.edu/abecasis/Exact/, one of which I would presume was used to calculate the expressions in Table 1 of the paper. Finally, the Hail implementation instead calculates a two-sided mid p-value (see e.g. https://www2.unil.ch/popgen/teaching/SISG14/Graffelman_Moreno_SAGMB_2013.pdf), which oftentimes turns out to be the complement of the quantity that is *actually* calculated by ExcessHet. Not sure if these p-value discrepancies were sources of confusion, but thought I'd document. Incidentally, this investigation also yielded some more typos in the Hail documentation, referenced above.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7392#issuecomment-892288823:313,test,test,313,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7392#issuecomment-892288823,1,['test'],['test']
Testability,"OK, I experimented a bit with removing the R install from the base image and adding the R dependencies to the conda environment in a branch and rebased on that. A few issues that I've run into or that came up in discussion with @jamesemery and @cmnbroad:. -I moved all tests that depend on R into the `python` test group (which should perhaps be renamed to `conda`). Note that some of these also fall into the `spark` test group---not sure if there is any special Spark setup done for that group, but we should make sure that they don't fail if they're not run with the conda environment. -@cmnbroad mentioned that some Picard tools that depend on R may break outside of the conda environment if the user does not have the R dependencies. -When we install R in the base image, we pull in a lot of basic dependencies (e.g., build-essential, various libraries and compilers, etc.) So when the R install is removed, it looks like many tests begin failing or hanging, perhaps because they are falling back on Java implementations (e.g., AVX PairHMM tests). We need to determine the dependencies for these tests and install them separately. Here is the list of packages that get pulled in by the R install: ```autoconf automake autotools-dev binutils bsdmainutils build-essential; bzip2-doc cdbs cpp cpp-5 debhelper dh-strip-nondeterminism dh-translations; dpkg-dev fakeroot g++ g++-5 gcc gcc-5 gettext gettext-base gfortran; gfortran-5 groff-base ifupdown intltool intltool-debian iproute2; isc-dhcp-client isc-dhcp-common libalgorithm-diff-perl; libalgorithm-diff-xs-perl libalgorithm-merge-perl libarchive-zip-perl; libasan2 libasprintf-dev libasprintf0v5 libatm1 libatomic1; libauthen-sasl-perl libblas-common libblas-dev libblas3 libbz2-dev; libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libcroco3 libcurl3; libdns-export162 libdpkg-perl libencode-locale-perl libfakeroot; libfile-basedir-perl libfile-desktopentry-perl libfile-fcntllock-perl; libfile-listing-perl libfile-mimeinfo-perl libfile-stripnon",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-406373954:269,test,tests,269,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-406373954,8,['test'],"['test', 'tests']"
Testability,"OK, I think I accidentally removed the `getopt` dependency in #3935. Not sure why tests didn't fail as expected. EDIT: I think this is because R dependencies are cached on Travis.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4209#issuecomment-359983165:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4209#issuecomment-359983165,1,['test'],['tests']
Testability,"OK, I think I figured out what was going on. In 9b194a6 I changed PreprocessIntervals to drop intervals with all Ns (if you remember, this was giving me NaNs in AnnotateIntervals, which gCNV didn't like). But I must not have rebuilt the somatic WGS PoNs and updated the copies in the large test resources. I could've sworn that I tested the somatic pipeline locally, but perhaps I forgot to update the jar at some point. Ideally, we should figure out some way to use the PoNs built by the panel WDL tests in the subsequent tests for the case/pair workflows.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-350179422:290,test,test,290,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-350179422,4,['test'],"['test', 'tested', 'tests']"
Testability,"OK, added an integration test to check that MKL is enabled. If we move the conda install of these packages into the base image, then we might need to perform these checks elsewhere, e.g., in the bash script for building the image. Gotta push the base image and update the main Dockerfile. I'll merge after the weekend unless there are any more comments. Again, @droazen please be sure to highlight that R plotting will now require the conda environment in the release notes!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-622500992:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-622500992,1,['test'],['test']
Testability,"OK, but would you mind using `rm -f` in future? Here is the build.log from 3.8-1, for reference: ; [build.log.txt](https://github.com/broadinstitute/gatk/files/1933394/build.log.txt)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4686#issuecomment-383197966:66,log,log,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4686#issuecomment-383197966,3,['log'],['log']
Testability,"OK, just a few more minor doc comments from me. Also the issue about preemptible_attempts above. Otherwise good to rebase and merge! I will take care of trimming tests and reorganizing the packaging in another PR as we discussed.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-355596918:162,test,tests,162,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-355596918,1,['test'],['tests']
Testability,"OK, relaxed the exact match to a delta of 1E-6 (chosen because doubles are formatted in somatic CNV outputs as `""%.6f""`) and tests pass on Travis (modulo an unrelated intermittent timeout failure). Note also that I was also able to reproduce locally by switching between Java 8 and 11. Had to add some quick test code for doing the comparisons; not actually sure if we have other utility methods to do so somewhere in the codebase. Another interesting note: I tried to clean up the offending use of log10factorial in AlleleFractionLikelihoods, but this introduced numerical differences at the ~1E-3 level. I think all of the round tripping between log and log10 actually adds up. Some digging revealed that this was introduced way back in gatk-protected in https://github.com/broadinstitute/gatk-protected/commit/aeec297e104db9f5196cb8f8e6691133302474bc#diff-34bd76cb2a416a212e25cbfb11298207265fb9cced775918aefcdb6b91ebc247. Despite the fact that we could easily replace the use of log10factorial with a private logGamma cache, at this point I think it makes more sense to freeze the current behavior. But if similar numerical changes are introduced to ModelSegments in the future, then it might make sense to clean this up at that point as well. Anyway, changed the title of the PR to reflect this update. Should be ready to go!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7652#issuecomment-1023793014:125,test,tests,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7652#issuecomment-1023793014,4,"['log', 'test']","['log', 'logGamma', 'test', 'tests']"
Testability,"OK, tests are finally passing. I think we are close to where a review is useful; however, i have three known questions:. 1) Do you have advise on dealing with raw -> generic lists/maps in StratificationManager and VariantEvalReportWriter? You'll see I put a placeholder cast() method in each that copies the collection as a placeholder. I didnt see a more elegant option. 2) From way back in this thread, there was discussion of making a proper DefaultPluginDescriptor. Currently I have a functional DefaultPluginDescriptor in the varianteval package, but this isnt fully fleshed out for general use. Would you be OK finishing this PR with that in place, after which I would be willing to do a separate PR to make that general purpose, or does this need to be done before this?. 3) What do you think about the total size of test files being added? One way to reduce some file sizes is to subset to only the sites relevant to the variant eval tests. In the case of more generic reference files this reduces size, but also lessens their potential utility for future tests that may share them. . Also, the stub from the GATK3 VariantEval3IntegrationTest is still there should you want to run it. It should pass every GATK3 test using GATK3 inputs, though it might take a little work to put all the GATK3 files in the same location (i received them as one data dump in one directory).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431583201:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431583201,6,"['stub', 'test']","['stub', 'test', 'tests']"
Testability,"OK, thanks @drifty914. Note that the file with num_intervals_per_scatter = 20 is a minimal test case that is run with our continuous integration tests. In real-world use, you want enough intervals in each shard to fit a denoising model---probably 5000 or more is safe. I am wondering if your issue is related to https://github.com/broadinstitute/gatk/issues/4782 and https://askubuntu.com/questions/162229/how-do-i-increase-the-open-files-limit-for-a-non-root-user. It may be that your user ulimit is not high enough for the theano compilation directory?. Let me try to put together a fix for that issue and see if it addresses yours as well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5714#issuecomment-467085960:91,test,test,91,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5714#issuecomment-467085960,2,['test'],"['test', 'tests']"
Testability,"OK, thanks @ldgauthier, I think I've addressed all the comments but one. A little TODO list for my benefit:. - [x] Updated the GATK version in the ExcessHet documentation to 4.2.2.0, but we'll see if I need to revisit that.; - [x] Not quite sure about the `ReducibleAnnotation` business. Let me know how to make these changes, or else happy to punt and file an issue.; - [ ] Also not sure I've parsed the results of the Jenkins tests, at least in terms of comparing how many sites get hard filtered with/out the change. Where should I be looking at to see the baseline result for that step? Also looks like a lot of results for https://gotc-jenkins.dsp-techops.broadinstitute.org/job/warp-workflow-tests/11755/ were call-cached, is that to be expected? Haven't looked at these tests before, so maybe you can walk me through them at some point. But I guess we can be sure that the overall results don't change too much (at least for 50 samples), which is a good start.; - [x] Didn't quite get to making those plots of the change in decision boundary, will do that tomorrow or later this week. EDIT: Nevermind, took like 5 minutes to throw them together (albeit using the slow python implementation and some for loops...), see below.; - [x] Hmm, looks like my own PR #6885 might've introduced a few more exact match test failures...grr. Here are some plots for N = 50, 100, and 500 samples showing (in black) those counts that previously fell under the 3E-6 threshold with the mid-p correction but now pass without it. As you can see, not much to sweat from these ""theoretical"" plots, but good to convolve with the actual allele frequency spectrum and get an idea of how many sites occupy these black squares in practice (as well as start us down the road of reexamining the threshold itself):. ![image](https://user-images.githubusercontent.com/11076296/132413689-37f3dfeb-e3f5-4869-a803-fe27f3cd79bd.png); ![image](https://user-images.githubusercontent.com/11076296/132413649-d716ee7d-6763-4275-82de-e",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-914612907:428,test,tests,428,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-914612907,3,['test'],['tests']
Testability,"OK, that's reasonable. I'll dig into the other test changes. I can answer a few:. - Regarding passing the VariantWalker: I agree that's not an improvement by itself, but I would argue it's not that much different than it was. My plan is to pass a VariantEvalContext object, which would obscure any need to have knowledge of the walker. In an attempt to keep this PR simpler, I didnt complete that work. I do expect to make a second PR in relatively short order, once we get this resolved. - With respect to testEvalTrackWithoutGenotypesWithSampleFields and the different reference: I think the issue is that the old version (master GATK branch) didnt validate as strictly. When switching to MultiVariantWalkerGroupedOnStart, the reference is required, and the tool will error if the contigs dont match. VariantEval on the master branch didnt really need the reference for anything, and was apparently more permissive if it didnt line up. It probably preferentially grabbed the dictionary from the VCF header. I will look into those other questions",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6973#issuecomment-744698072:47,test,test,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6973#issuecomment-744698072,4,['test'],"['test', 'testEvalTrackWithoutGenotypesWithSampleFields']"
Testability,"OK, the first test run I tried was with 1kb bins and *no additional normals*. Coverage takes about an hour to collect per BAM and ploidy inference takes about 10 minutes. A few things:. 1) Looks like we are concordant with the truth CN on X for all but 3/40 of the samples. The GQs for these discordant calls are low (~3, 23, and 25 compared with ~400 for most of the others). 2) However, we are striking out on over half of the samples on Y. We mostly call 1 copy when the truth calls 0. Mehrtash thinks this is because a) I didn't mask out any PARs or otherwise troublesome regions on Y and b) I didn't include any other normals. I'll try rerunning with a mask first, then with other normals, and then with both. Hopefully this should clear up with just the mask. 3) There are a few samples where we strike out because the truth calls 2 copies on Y and we call 1. Mehrtash pointed out that this is most likely because the prior table we put together assumes Y can have at most 1 copy. So hopefully these are trivially recovered once we relax this. 4) The GQs are weirdly high on 1, X, and Y compared to the rest of the autosomes. @ldgauthier any idea why this might be? If there's no reason, then something funny is going on within the tool. I haven't gotten a chance to plot any of the counts data yet, either, which may make things more obvious. I'll do this today.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4371#issuecomment-364234449:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4371#issuecomment-364234449,2,['test'],['test']
Testability,"OK, verified that numerical results in the gCNV WDL tests match 4.1.6.0. Not sure if @lucidtronix needs to run similar checks for the CNN. Other than needing to push a new base image after review, I think this branch is ready to go. However, as we discussed, we should highlight major changes (e.g., the need to run R plotting tools in the conda environment) in the release notes. @droazen can you assign a final reviewer?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-608460914:52,test,tests,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-608460914,1,['test'],['tests']
Testability,"OK. I found a potential solution. For this solution, we do not need to add or remove any dependencies. The only change is to the `log4j.properties` file (which configures log4j 1.x) to match the config specified in `log4j2.xml` (which configures log4j2). Now, GKL will use log4j 1.x to log, but the format will match the rest of GATK, which uses log4j2. This means that we have only one GKL for both GATK 3 and 4, at the expense of having to keep to config files, `log4j.properties` and `log4j2.xml`, in sync (which they probably should have been anyway, thought they weren't).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3416#issuecomment-320779413:286,log,log,286,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3416#issuecomment-320779413,1,['log'],['log']
Testability,"OK. I think that probably makes more sense. I don't think we should use Travis test data as FC example data in general, as I'd want the latter to be able to showcase the workflows more realistically.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4007#issuecomment-356713459:79,test,test,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4007#issuecomment-356713459,1,['test'],['test']
Testability,OME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9c49383b-01a9-4bc0-90fa-cde7e1090a47%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F75ea4d64-414f-43aa-a8d6-9c34870b1491%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F540fbadc-ba57-4012-8ff1-76461ecb7bb3%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|99.85891111111113|; |NIST controlHCsystemhours|0.17817777777777768|; |NIST controlHCwallclockhours|70.22329166666665|; |NIST controlHCwallclockmax|3.8036305555555554|; |NIST controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9c49383b-01a9-4bc0-90fa-cde7e1090a47%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2F75625b9d-e48b-4859-803e-58989e3ccf62%2Fcall-CONTROLRuntimeTask%2Fmonitoring.pdf)|; |NIST controlindelF1Score|0.9902|; |NIST controlindelPrecision|0.9903|; |NIST controlsnpF1Score|0.9899|; |NIST controlsnpPrecision|0.9887|; |NIST controlsnpRecall|0.9911|; |NIST controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9c49383b-01a9-4bc0-90fa-cde7e1090a47%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2F75625b9d-e48b-4859-803e-58989e3ccf62%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F21373bda-c620-4200-ad29-1e3886ea52ad%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST evalHCprocesshours|104.20126111111112|; |NIST evalHCsystemhours|0.20587777777777783|; |NIST evalHCwallclockhours|76.10080000000004|; |NIST evalHCwallclockmax|3.949438888888889|; |NIST evalMonitoringLogs|[View in the GCS Console](https://console.cloud.goo,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1549231169:4031,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,4031,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1549231169,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,OME1 evalindelF1Score|0.727|; |EXOME1 evalindelPrecision|0.632|; |EXOME1 evalsnpF1Score|0.9878|; |EXOME1 evalsnpPrecision|0.9815|; |EXOME1 evalsnpRecall|0.9941|; |EXOME1 evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fba9f32d5-7b46-462c-8d1f-5692eee05534%2Fcall-EXOME1SampleHeadToHead%2FBenchmarkComparison%2F85b07a68-f04f-4396-80b4-f153b2d0020d%2Fcall-BenchmarkVCFTestSample%2FBenchmark%2F272d076b-7300-4ea4-bbf7-d63f80fad94b%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST controlHCprocesshours|108.95665833333332|; |NIST controlHCsystemhours|0.21568055555555551|; |NIST controlHCwallclockhours|78.62844166666666|; |NIST controlHCwallclockmax|4.166558333333334|; |NIST controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fba9f32d5-7b46-462c-8d1f-5692eee05534%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2F043115ef-b68a-49a3-8272-8352b304c3aa%2Fcall-CONTROLRuntimeTask%2Fmonitoring.pdf)|; |NIST controlindelF1Score|0.9902|; |NIST controlindelPrecision|0.9903|; |NIST controlsnpF1Score|0.9899|; |NIST controlsnpPrecision|0.9887|; |NIST controlsnpRecall|0.9911|; |NIST controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Fba9f32d5-7b46-462c-8d1f-5692eee05534%2Fcall-NISTSampleHeadToHead%2FBenchmarkComparison%2F043115ef-b68a-49a3-8272-8352b304c3aa%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2Fb7031327-e5c1-4869-a5d9-98e5a8934db9%2Fcall-CombineSummaries%2Fsummary.csv)|; |NIST evalHCprocesshours|112.84528333333336|; |NIST evalHCsystemhours|0.8645277777777777|; |NIST evalHCwallclockhours|88.01737777777778|; |NIST evalHCwallclockmax|4.8386555555555555|; |NIST evalMonitoringLogs|[View in the GCS Console](https://console.cloud.goo,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8467#issuecomment-1687811441:4037,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,4037,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8467#issuecomment-1687811441,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OOLS : true; 16:11:10.076 INFO SVAnnotate - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 16:11:10.076 INFO SVAnnotate - Deflater: IntelDeflater; 16:11:10.077 INFO SVAnnotate - Inflater: IntelInflater; 16:11:10.077 INFO SVAnnotate - GCS max retries/reopens: 20; 16:11:10.077 INFO SVAnnotate - Requester pays: disabled; 16:11:10.077 INFO SVAnnotate - Initializing engine; 16:11:10.152 INFO FeatureManager - Using codec VCFCodec to read file file:///home/Division/user/2_Exome/snv_GWAS_data/disease_related_SV/test/test.vcf; 16:11:10.251 INFO SVAnnotate - Done initializing engine; 16:11:10.260 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 34) (given: 43): ##description: evidence-based annotation of the human genome (GRCh38), version 43 (Ensembl 109) Continuing, but errors may occur.; 16:11:10.260 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 34) (given: 43): ##description: evidence-based annotation of the human genome (GRCh38), version 43 (Ensembl 109) Continuing, but errors may occur.; 16:11:10.261 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///home/Division/user/2_Exome/snv_GWAS_data/disease_related_SV/gencode.v43.basic.modified_annotation.gtf; 16:11:10.261 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 34) (given: 43): ##description: evidence-based annotation of the human genome (GRCh38), version 43 (Ensembl 109) Continuing, but errors may occur.; 16:11:21.599 INFO ProgressMeter - Starting traversal; 16:11:21.600 INFO ProgressMeter - Current Locus Elapsed Minutes Variants Processed Variants/Minute; 16:11:21.632 INFO ProgressMeter - unmapped 0.0 53 99375.0; 16:11:21.632 INFO ProgressMeter - Traversal complete. Processed 53 total variants in 0.0 minutes.; 16:11:21.674 INFO SVAnnotate - Shutting down engine; [2023年7月5日 CST 下午4:11:21] org.broadinstitute.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8394#issuecomment-1621377138:3097,test,tested,3097,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8394#issuecomment-1621377138,1,['test'],['tested']
Testability,ORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringDPfromINFO.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringZfromFORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilterWithSeparateNames.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask3.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMaskReversed.vcf.idx; src/test/resources/org/broadin,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:53597,test,test,53597,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""050d2d6e-4",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202:15695,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15695,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""07271d7b-7",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382:14999,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,14999,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""1d570928-0",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1068654852:8775,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8775,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1068654852,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""410a88f6-6",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069765064:8776,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8776,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069765064,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""54997ade-4",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069766207:8776,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8776,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069766207,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""5e9a598e-1",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672:15011,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15011,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""5f0f8f34-c",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069378815:8776,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8776,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069378815,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""922f0be2-d",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1067506391:8763,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8763,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1067506391,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""9886a710-3",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590:15671,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15671,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""a8ee297d-9",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748:15011,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15011,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""d0d7d45a-3",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1068237327:8763,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8763,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1068237327,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""d38de90b-8",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1068678287:8775,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8775,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1068678287,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""d6f96a63-9",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069381494:8776,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,8776,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069381494,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": null,; ""eva",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533286508:9603,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,9603,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533286508,29,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"OT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.NIST_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcf"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_evalVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.NIST_output_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthLabel"": ""HG002_GRCh38_GIAB"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cro",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535220790:9629,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,9629,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535220790,34,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Offhand I don't have any rule of thumb for memory usage, unfortunately. One thing that can help to reduce memory pressure is to use the `--batch-size` parameter. Also, this doesn't help you now, but we're looking to enable a feature to reduce the memory usage by 5x or more. Works for local/posix files right now, but we need a little tinkering to make it work with Google cloud files. Regarding logging for GenomicsDBImport - that is expected. A lot of the heavy lifting is done by the native layer, so we need to do a bit more work to push updates back to the progress meter. It's on our to-do list....",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6688#issuecomment-656278175:396,log,logging,396,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6688#issuecomment-656278175,1,['log'],['logging']
Testability,Offline...Was given permission to merge if tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4872#issuecomment-397658942:43,test,tests,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4872#issuecomment-397658942,1,['test'],['tests']
Testability,"Oh nice, that seems to be the ticket. All reads are used when setting that parameter. May I ask what the logic behind performing the downsampling is? Isn't there a risk of removing valid alignments that contribute to low abundance variation events? This would maybe only really be a problem when you are analysing sequences from a population of cells/microbes, but maybe the reward is greater than the risk?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7873#issuecomment-1139111543:105,log,logic,105,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7873#issuecomment-1139111543,1,['log'],['logic']
Testability,"Oh, I hadn't noticed that there was a compilation warning causing the test to fail. ```; /gatk/src/test/java/org/broadinstitute/hellbender/MainTest.java:55: warning: [serial] serializable class ExitNotAllowedExcepion has no definition of serialVersionUID; private static final class ExitNotAllowedExcepion extends SecurityException {; ^; error: warnings found and -Werror specified; ```. Please fix that also :)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4283#issuecomment-361661772:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4283#issuecomment-361661772,2,['test'],['test']
Testability,"Oh, I see now. It was probably a bug back then?; Or maybe it was all we tested with ATGU so didn't want to support it for other cases without more testing (and then I got distracted). Way too long ago...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5727#issuecomment-470951687:72,test,tested,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5727#issuecomment-470951687,2,['test'],"['tested', 'testing']"
Testability,"Oh, good point. I'm not sure that there is any way we could set up a cloud test for that without buying an old mac putting it in a datacenter somewhere ourself.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2315#issuecomment-267141994:75,test,test,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2315#issuecomment-267141994,1,['test'],['test']
Testability,"Oh, it's a python problem. . ```; @Test(groups = {""python""}) // python environment is required to use h5diff; public void testRunSystemCommand() {; runSystemCommand(String.format(""h5diff %s/extract.AS.indel.pos.annot.hdf5 %s/extract.AS.indel.pos.annot.hdf5"",; EXPECTED_TEST_FILES_DIR, EXPECTED_TEST_FILES_DIR));; runSystemCommand(String.format(""diff %s/extract.AS.indel.pos.vcf %s/extract.AS.indel.pos.vcf"",; EXPECTED_TEST_FILES_DIR, EXPECTED_TEST_FILES_DIR));; }; ```. Of course it is.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8610#issuecomment-1848092278:35,Test,Test,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8610#issuecomment-1848092278,2,"['Test', 'test']","['Test', 'testRunSystemCommand']"
Testability,Ohh. This looks like what we have really wanted when we refactor the test suite to test spark and other tools using the same methods. This should bring restful nights to us all. Unfortunately it looks like most of the docker tests have failed with errors along the lines of this: ; ```; org.gradle.api.internal.tasks.testing.TestSuiteExecutionException: Could not complete execution for Gradle Test Executor 1.; 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93); 	at com.sun.proxy.$Proxy2.stop(Unknown Source); 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:377); 	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(Exec,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5787#issuecomment-472107858:69,test,test,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5787#issuecomment-472107858,7,"['Test', 'test']","['Test', 'TestSuiteExecutionException', 'test', 'testing', 'tests']"
Testability,"Ohhh, I need to lower the logger output level from the command line. I thought I remembered that there were two args for effective HC debugging and that's the second one. But the EventMap thing is still true.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4943#issuecomment-400065919:26,log,logger,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4943#issuecomment-400065919,1,['log'],['logger']
Testability,"Ok @jean-philippe-martin, I have an updated patch that seems to resolve the 503 errors! It's here: https://github.com/droazen/google-cloud-java/tree/dr_retry_CloudStorageReadChannel_fetchSize. Will you have time before you leave on vacation to open a PR against google-cloud-java? If not, let me know and we'll try to sort out our CLA issues and PR it ourselves. I didn't have time to write unit tests, unfortunately, though we're running it now with 1000 concurrent jobs each accessing 11,000 files and not seeing any errors.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3253#issuecomment-315447319:396,test,tests,396,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3253#issuecomment-315447319,1,['test'],['tests']
Testability,"Ok rebased on master, if tests pass do you think it's ready to merge?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4097#issuecomment-360579001:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4097#issuecomment-360579001,1,['test'],['tests']
Testability,Ok tests are passing.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6055#issuecomment-517020744:3,test,tests,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6055#issuecomment-517020744,1,['test'],['tests']
Testability,"Ok, I know @danxmoran also kicked off jobs trying those three options @droazen mentioned above, but I at least tried the first option and got this error message:. ```; Using GATK jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -Xms4000m -Dsamjdk.use_async_io_write_samtools=false -jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar BaseRecalibrator -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O CHIM.recal_data.csv -knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf -knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz -knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz -L chr5:1+; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.pDg1Ou; [July 24, 2017 5:46:04 PM UTC] BaseRecalibrator --useOriginalQualities true --knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf --knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz --output CHIM.recal_data.csv --intervals chr5:1+ --input gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --reference /cromwell_root/broad-references/hg38/",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317520824:568,log,log,568,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3316#issuecomment-317520824,1,['log'],['log']
Testability,"Ok, I think the main thing is to be able to explain/verify all of the tests where results changed:. - For the snpeff test, since the behavior on this branch seems more correct to me than master, I tried running the GATK4 test case inputs with GATK3, and it produces exactly the same results as this branch does. So I think that issue was introduced by the original GATK4 port, and is fixed in this branch.; - The rest of the tests with changed results don't seem to hit your breakpoint, though. So I think we need to figure out why they changed, and maybe also compare them with GATK3 (which can be a pain because the output format is slightly different).; - As you mentioned, you changed the reference for testEvalTrackWithoutGenotypesWithSampleFields, which seems to have only affected the number of loci processed. So I'm unclear why that change was necessary. If the test truly should have been failing without this change, will it still fail if the change is reverted ? If not, can we fix it, and either way there should be a negative test for that case. A few other general comments:. - I changed this PR to `draft` mode for now, which just better categorizes it for our internal workflow purposes. When its ready for a detailed code review we can remove the `draft` status.; - The `HashMap<FeatureInput<VariantContext>, HashMap<String, Collection<VariantContext>>>` can be wrapped in a class with just a couple of methods, so we don't have to manifest that long type all over the place.; - I know this PR still in an interim state, but passing the VariantWalker in as an argument to the comp methods doesn't seem like a step forward to me. If we can't solve that problem completely in this PR (which is fine, I'm all for trying to contain this), are those changes necessary ? Perhaps that part should just wait for the next round.; - Any new classes/methods should use `final` for variables and parameters wherever applicable, and public classes and methods should have javadoc.; - Finally, I'm",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6973#issuecomment-744689987:70,test,tests,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6973#issuecomment-744689987,7,['test'],"['test', 'testEvalTrackWithoutGenotypesWithSampleFields', 'tests']"
Testability,"Ok, all done. I had to rebase again too. Pushed, tests running.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4094#issuecomment-356120760:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4094#issuecomment-356120760,1,['test'],['tests']
Testability,"Ok, so I was able to run all the python tests using ~/.matplotlib/matplotlibrc. @mbabadi Wondering why you changed this to DO NOT MERGE. Do you have an alternative proposal ? Removing the libgcc-ng dependency doesn't solve the whole mac problem, but at least if we do remove it the workaround for the matplotlib part is easily conveyed. Also, @samuelklee @mbabadi, is there any visibility for end-users that they need to establish the conda env to run these tools (like in the doc summary, etc.). I'm guessing the failure mode for just running without the environment will be pretty cryptic.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4087#issuecomment-356111971:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4087#issuecomment-356111971,1,['test'],['tests']
Testability,"Ok, thanks for validating that. I'll make a PR for this change (the way those unit tests are written is a little sketchy so I may fix that at the same time). I forgot about the spark failures - can you post the log output for those failures as well ?. Also, to answer your original question, you should generally always be able to work directly from head of master and all tests should pass, though sometimes things like this can slip through. Also, to answer your original question",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-446964064:83,test,tests,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-446964064,3,"['log', 'test']","['log', 'tests']"
Testability,"Ok, this seems to solve it. I ran :; ```; $ git checkout cn_left_align ; $ ./gradlew clean; $ ./gradlew bundle; $ ./gradlew test; ...; Results: FAILURE (500060 tests, 500057 successes, 2 failures, 1 skipped). 500060 tests completed, 2 failed, 1 skipped; ```. And got all the tests to succeed (except the two spark related ones as before).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-446901562:124,test,test,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-446901562,4,['test'],"['test', 'tests']"
Testability,"Ok, we have a working test! It runs the plumbing NA12878 through the whole pipeline. @ldgauthier or @jsotobroad this is ready for review (the wdl is a direct copy with one change to add more memory to RevertSam because I tested it with PAPI v2 and it needed more memory than was specified). Thanks!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5566#issuecomment-454024917:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5566#issuecomment-454024917,2,['test'],"['test', 'tested']"
Testability,"Okay, there's the bug fix PR. @bklein345 the PR will close this ticket but please re-open if the error persists. Here's a jar to test: gs://broad-dsde-methods-davidben/gatk-builds/realignment_patch.jar",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6344#issuecomment-576877323:129,test,test,129,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6344#issuecomment-576877323,1,['test'],['test']
Testability,"On a whim I took the latest code from master and commented out the two lines in HaplotypeCallerEngine:257-258 that disable phsyical phasing if `emitReferenceConfidence()` is false, and tried running HC to generate a genotyped VCF with phase. At least on a simple test of a ~200bp locus with a pair of phased variants it appears to do the right thing and not cause any errors. I know testing calling in one small locus isn't exactly comprehensive, and I'm trying now to call a larger set of regions and compare the calls generated to expected phase. Does anyone recall why this restriction was in place? I'm hoping that perhaps it was needed at the time, but isn't now and was just left in place because nobody needed it removed? I see the lines in question were last touched by @droazen in April 2016, but even that commit seems to be a large scale moving around of code rather than a commit that addressed this specific issue. I'm going to open a PR to remove those lines - mostly so I can have the tests run up in CI, and see if anything breaks.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5727#issuecomment-470618640:263,test,test,263,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5727#issuecomment-470618640,6,['test'],"['test', 'testing', 'tests']"
Testability,"On branch `ll_CollectAllelicCountsSpark`, I have created a CLI called: `CollectAllelicCountsSpark` ... This tool will have the exact same functionality as `CollectAllelicCounts`, to the point where I can re-use the integration tests. However, the integration tests fail. When I dig deeper in `CollectAllelicCountsSpark`, I see that only 8 RDDs (correct amount: 11) are being passed to processAlignments... Consider the following code:. ```; @Override; protected void processAlignments(JavaRDD<LocusWalkerContext> rdd, JavaSparkContext ctx) {; final String sampleName = SampleNameUtils.readSampleName(getHeaderForReads());; final SampleMetadata sampleMetadata = new SimpleSampleMetadata(sampleName);; final Broadcast<SampleMetadata> sampleMetadataBroadcast = ctx.broadcast(sampleMetadata);. final AllelicCountCollector finalAllelicCountCollector =; rdd.mapPartitions(distributedCount(sampleMetadataBroadcast.getValue(), minimumBaseQuality)); .reduce((a1, a2) -> combineAllelicCountCollectors(a1, a2, sampleMetadataBroadcast.getValue()));; final List<LocusWalkerContext> tmp = rdd.collect();; ....snip....; ```. In this case `tmp` will have a size of 8. However, the integration test would indicate a size of 11 is correct, since 11 intervals are being passed in. Note that `emitEmptyLoci()` returns `true`, so 11 is the correct number as seen in `CollectAllelicCountsSparkIntegrationTest` . . Additionally, in (at least) one result, the counts are wrong. `CollectAllelicCounts` (non-spark) passes the integration test. I have tried a couple of tests to gather more information:. - Is `emitEmptyLoci()` causing an issue? ; Does not appear to be causing the issue. I say this because when set to `false`, I get (essentially) the same error.; - The code uses `mapPartition` and not `map`, does this cause the issue? Why are you doing this?; This does not cause the issue. I refactored the code to use `map` and got the exact same issue. I use `mapPartition` in order to instantiate only one instance of `A",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3823:227,test,tests,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3823,2,['test'],['tests']
Testability,On it. Not intending to make the kill switch until test coverage is up.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4260#issuecomment-360567998:51,test,test,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4260#issuecomment-360567998,1,['test'],['test']
Testability,"On my Mac, and on my Linux desktop machine at home, but not on Travis, I consistently fail to run unit tests. The precise location of the failure varies somewhat, but it's always in this vicinity:. ```Test: Test method testWritingToFileURL[0](~me/IdeaProjects/gatk/src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf, .vcf)(org.broadinstitute.hellbender.engine.spark.datasources.VariantsSparkSinkUnitTest) produced standard out/err: 14:49 DEBUG: [kryo] Write object reference 809: INFO```. The failing test makes my poor little machine's fan run like mad for a while, and then everything gets very quiet, but the test never returns.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2490:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2490,7,"['Test', 'test']","['Test', 'test', 'testWritingToFileURL', 'tests']"
Testability,"On our hadoop system, there is a long delay of about 30+ minutes before the tasks begin. See delay in log in job log between 13:24 and 13:59. Once the tasks start, it takes a few minutes. During the delay, the executors are not active and waiting for the tasks to start. Just surprised on how long getting the splits are taking.... This is the commandline...; gatk FlagStatSpark --input adni/cram/ADNI_002_S_0413.hg38.realign.bqsr.cram --reference file:///restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -- --spark-runner SPARK --spark-master yarn --executor-memory 48G --driver-memory 16g --driver-cores 2 --executor-cores 8 --num-executors 8. ```; 18/03/07 13:24:26 INFO storage.BlockManagerMasterEndpoint: Registering block manager scc-q14.scc.bu.edu:42456 with 25.4 GB RAM, BlockManagerId(2, scc-q14.scc.bu.edu, 42456, None); 18/03/07 13:24:27 INFO memory.MemoryStore: Block broadcast_0 stored as values in memory (estimated size 247.0 KB, free 8.4 GB); 18/03/07 13:24:28 INFO memory.MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 25.5 KB, free 8.4 GB); 18/03/07 13:24:28 INFO storage.BlockManagerInfo: Added broadcast_0_piece0 in memory on 10.48.225.55:32895 (size: 25.5 KB, free: 8.4 GB); 18/03/07 13:24:28 INFO spark.SparkContext: Created broadcast 0 from newAPIHadoopFile at ReadsSparkSource.java:112; 18/03/07 13:24:28 INFO hdfs.DFSClient: Created HDFS_DELEGATION_TOKEN token 7164 for farrell on ha-hdfs:scc; 18/03/07 13:24:28 INFO security.TokenCache: Got dt for hdfs://scc; Kind: HDFS_DELEGATION_TOKEN, Service: ha-hdfs:scc, Ident: (HDFS_DELEGATION_TOKEN token 7164 for farrell); 18/03/07 13:24:28 INFO input.FileInputFormat: Total input paths to process : 1; 18/03/07 13:59:26 INFO spark.SparkContext: Starting job: aggregate at FlagStatSpark.java:73; 18/03/07 13:59:26 INFO scheduler.DAGScheduler: Got job 0 (aggregate at FlagStatSpark.java:73) with 252 output partitions; 18/03/07 13:59:26 INFO scheduler.DAGScheduler: Final stag",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4506#issuecomment-371280304:102,log,log,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4506#issuecomment-371280304,2,['log'],['log']
Testability,"On the first question, we definitely appreciate how much work this will take. Often, porting the code is the easy part; developing new tests and test data can be a huge effort. I can try to find out if it would be possible for you to take the tool over - I know this kind of thing has come up before for other tools, but I'd have to ask around to find that out. @vdauwera do you have input on this ?. As for the plugins, currently in your branch `VariantStratification` and `VariantEvaluator` are modeled as Barclay command line plugin descriptors, and I was questioning whether thats necessary. Being a plugin is not necessarily required - `ReadFilter` and `Annotation` are both plugins, but they didn't have to be, and it takes quite a bit of work (again, mostly test development) to get a plugin right. Also, I'd consider the Barclay plugin framework to be pretty developed at this point, so I'd be curious to learn more about what issues you see. And yes, definitely don't check any of the large GATK3 test files into the repo, even temporarily. Take a look at [General guidelines for GATK4 developers](https://github.com/broadinstitute/gatk#dev_guidelines) if you haven't already. As you pointed out, new GATK4 tests that use smaller files would have to be developed. We'd want those to be included, and passing tests on the CI server, before we started reviewing the branch, so we know we're reviewing code that works and is covered by tests as much as possible. The second commit in my list above would have only your GATK3 java test files, etc (but not the big files, which you appear to have locally). The third commit would have your ported tool code, as well as the new test code, with the new tests enabled, as well as the smaller input files and expected results files. At the end we'd remove commit #2.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-407185633:135,test,tests,135,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-407185633,20,['test'],"['test', 'tests']"
Testability,"Once again I've managed to convince David R. to let me merge with some tech debt as follows:; - [ ] Add to GnarlyGenotyper an integration test like testRawAndFinalizedAlleleSpecificAnnotationsThoroughly() for GGVCFs; - [ ] Add a direct unit test for makeReducedAnnotationString() if you exposed it as package-accessible; - [ ] ~Break out finalized key definition, promote getKeyNames and getRawKeyNames to default methods in ReducibleAnnotation interface~; - [ ] One last `ann.getRawKeyNames().get(0)` in GnarlyGenotyperEngine",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6203:138,test,test,138,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6203,3,['test'],"['test', 'testRawAndFinalizedAlleleSpecificAnnotationsThoroughly']"
Testability,"Once https://github.com/broadinstitute/gatk/pull/2389 is merged, we need to make a simple PR against the tool to allow it to work with NIO, and add a GCS-based test case. This should be an easy change and < 1 day of work.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2608:160,test,test,160,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2608,1,['test'],['test']
Testability,"Once tests pass, feel free to merge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399546983:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399546983,1,['test'],['tests']
Testability,"Once the tests come through, since this only changes the doc portion, I will merge this.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4035#issuecomment-355874570:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4035#issuecomment-355874570,1,['test'],['tests']
Testability,"Once we do https://github.com/broadinstitute/gatk/issues/2817, we can disable the non-docker unit and integration tests in travis, saving a huge amount of time and resources. (We should keep the instance of the tests that run on the Oracle JDK, however).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3294:114,test,tests,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3294,2,['test'],['tests']
Testability,"Once we have built junction trees for linked de Bruijn graphs we can use them to find phased haplotypes that handle repeats / cycles. This essentially amounts to running the current Dijkstra's algorithm on junction trees (which are, after all, DAGs) instead of `SeqGraph`s. That is, the edge weights can remain log branching ratios. The complication is that while using the the ""oldest"" junction tree for edge weights we must also traverse younger junction trees in order to rely on them downstream. We may or may not want to work out a rule for when to use a younger junction tree with much higher coverage than an older one, or to combine multiple trees into a single vote.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5925:311,log,log,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5925,1,['log'],['log']
Testability,"One concern I have is the maintainability of the test (having been burned by this in other places myself). When we add a new output field, etc we need a very easy way to update/generate these results. At the very least some instructions would be helpful (and imagine someone to follow those as part of a PR)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7192#issuecomment-821234533:49,test,test,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7192#issuecomment-821234533,1,['test'],['test']
Testability,"One final thing: i'm happy to try to debug this, and was going to write a test case based on the existing GenomicsDB integration tests. However, when I try to run any integration test involving genomicsdb, I get an exception like the following. I am on windows, so perhaps this is the issue?. 09:03:37.460 FATAL GenomicsDBLibLoader - ; java.io.FileNotFoundException: File /tiledbgenomicsdb.dll was not found inside JAR.; 	at org.genomicsdb.GenomicsDBLibLoader.loadLibraryFromJar(GenomicsDBLibLoader.java:118) ~[genomicsdb-1.3.2.jar:?]; 	at org.genomicsdb.GenomicsDBLibLoader.loadLibrary(GenomicsDBLibLoader.java:55) [genomicsdb-1.3.2.jar:?]; 	at org.genomicsdb.GenomicsDBUtilsJni.<clinit>(GenomicsDBUtilsJni.java:30) [genomicsdb-1.3.2.jar:?]; 	at org.genomicsdb.GenomicsDBUtils.createTileDBWorkspace(GenomicsDBUtils.java:46) [genomicsdb-1.3.2.jar:?]; 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.overwriteCreateOrCheckWorkspace(GenomicsDBImport.java:1005) [classes/:?]; 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.onTraversalStart(GenomicsDBImport.java:661) [classes/:?]; 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:1056) [classes/:?]",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7005#issuecomment-749138102:74,test,test,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7005#issuecomment-749138102,3,['test'],"['test', 'tests']"
Testability,"One issue with running gCNV properly and successfully (and perhaps other GATK tools that work with different data types) is that different data types requires running GATK using wildly different choice of several tool arguments. For example -- running gCNV on WES and WGS requires very different choice of the following parameters:. interval-psi-scale (WES: 0.002, WGS: 0.0005); std-log-mean-bias (WES: 10.0, WGS: 1.0); cnv-coherence-length (WES: 100000, WGS: 5000); ... There are two conceivable solutions:. 1) Declaring all such arguments as _required_, removing default values, and effectively forcing the user to do research (documentation, forum, tutorials) and to set the arguments appropriately according to the use case. This solution is not ideal since it delegates the burden to the user. If we have good default values for WES and WGS, it makes sense to somehow include both in the tool. 2) Declaring all such arguments as optional, though, providing a mechanism to allow the user to _start_ with good default values, with the possibility of overriding them. For example, we can add one required argument to set the baseline:; ```; gatk GermlineCNVCaller \; --set-defaults-for-data-type WES; ...; ```; Under the hood, `--set-defaults-for-data-type WES` would set several optional parameters. Also, by running:. ```; gatk GermlineCNVCaller \; --set-defaults-for-data-type WGS; --std-log-mean-bias 1.0 \; --interval-psi-scale 0.0001 \; ...; ```; the user is asking to override `std-log-mean-bias` and `interval-psi-scale` from shipped default values for `WGS` data type. We can definitely provide such mechanisms in a tool-by-tool basis as needed, though, if many tools can benefit from such a mechanism, it makes sense to provide it in Barclay.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4719:383,log,log-mean-bias,383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4719,3,['log'],['log-mean-bias']
Testability,"One more question: I have everything passing locally. When tests run on travis, they fail with odd errors suggesting the VCF idx files are wrong. These were all created by IndexFactory.createDynamicIndex(), and work file for me. Have you ever seen a situation like that where indexes created on one machine doesnt transport? My machine is a windows laptop, if that's relevant.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431280748:59,test,tests,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-431280748,1,['test'],['tests']
Testability,"One more step towards using this new tool. Does:; * output a single VCF containing `<INS>`, `<DEL>`, `<DUP>`, `<INV>` calls (there will be more `<INV>` calls, but that cannot happen until someone takes a look at PR #4789 and check if the proposed algorithm makes sense); * since this new tool applies more permissive filters on MQ and alignment length of the assembly contigs' mappings, I've introduced some downstream filtering parameters allowing to filter VCF records based on annotations `MAPPING_QUALITIES` and `MAX_ALIGN_LENGTH`; the default value is chosen after some experimentation using the CHM PacBio as truth and the branch ; sh-sv-interlvatree-eval.; * cleans up VCF headers and related tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4996:700,test,tests,700,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4996,1,['test'],['tests']
Testability,"One of our tests (BaseRecalibratorDataflow, on cloud) started failing. It turns out that the culprit is a Dataflow limitation. This is what I got back from the DF team:. _I examined logs of this pipeline on the service and in this case, metadata.items[3] is the pipelineOptions item, whose biggest part is --filesToStage, built from the classpath: it seems you have too many .jar's in classpath, or the jars have too long (absolute) filenames.; It seems that you are using Gradle and all the absolute filenames point deep inside gradle cache directories.; So, as a work-around, you could consider asking Gradle to build a self-contained distribution of your application, put it in a less deep directory, and run that._. We may run into this problem for other tests as well, so it's good to know about the issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/580:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/580,3,"['log', 'test']","['logs', 'tests']"
Testability,"One of the example commands in CalculateGenotypePosteriors describes the usage of the `-supporting` argument and the `--num-reference-samples-if-no-call` argument at the same time:; ```; gatk --java-options ""-Xmx4g"" CalculateGenotypePosteriors \; -V input.vcf.gz \; -O output.vcf.gz \; -supporting 1000G.phase3.integrated.sites_only.no_MATCHED_REV.hg38.vcf.gz \; --num-reference-samples-if-no-call 2504; ```; Calculate the posterior genotypes of a callset, and impose that a variant *not seen* in the external panel is tantamount to being AC=0, AN=5008 within that panel. We don't have any tests that use both of these arguments at the same time, but it looks like the behavior in that case is wrong. PosteriorProbabilitiesUtils adds numRefSamplesFromMissingResources regardless of whether there was an overlapping variant in the panel or not, effectively diluting the AF of all the variants used as priors and making the number of reference alleles very inconsistent across variants.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4760:590,test,tests,590,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4760,1,['test'],['tests']
Testability,One of the issues:. [Utils] [ERROR] [Error] java.lang.IllegalArgumentException: Invalid interval. Contig:1 start:350001 end:300000; 	at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:730); 	at org.broadinstitute.hellbender.utils.SimpleInterval.validatePositions(SimpleInterval.java:61); 	at org.broadinstitute.hellbender.utils.SimpleInterval.&lt;init&gt;(SimpleInterval.java:37); 	at org.broadinstitute.hellbender.tools.copynumber.utils.annotatedinterval.AnnotatedIntervalUtilsUnitTest.provideMergeByAnnotation(AnnotatedIntervalUtilsUnitTest.java:215); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55); 	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45); 	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115); 	at org.testng.internal.Parameters.handleParameters(Parameters.java:509); 	at org.testng.internal.Invoker.handleParameters(Invoker.java:1308); 	at org.testng.internal.Invoker.createParameters(Invoker.java:1036); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1126); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5339#issuecomment-431874410:872,test,testng,872,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5339#issuecomment-431874410,2,['test'],['testng']
Testability,One of the non-cloud tests in BQSRSparkIntegrationTest tries to use the API key when its not required; as a result the test fails when the key isn't set even though it should pass. Introduced in the test refactoring that was part of https://github.com/broadinstitute/gatk/pull/1533.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1590:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1590,3,['test'],"['test', 'tests']"
Testability,"One of the variants is no longer emitted in vcf, potentially due to #5078. Somehow this was not caught by the remote test for #4895.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5091:117,test,test,117,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5091,1,['test'],['test']
Testability,One potential caveat I just noticed: it looks like the native libraries might introduce more multithreading which might not always be desired. In some test runs I'm seeing CPU usage spike very high (eg up to 3200% in `top`) even though I've specified `--spark-master local[8]`.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4746#issuecomment-387445952:151,test,test,151,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4746#issuecomment-387445952,1,['test'],['test']
Testability,One problem I've noticed is that the log is full of notices from tests we're skipping. The limit on Travis log length is new I think. Removing the mention of each individual skipped may help us have logs that fall below Travis' maximum.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292026670:37,log,log,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292026670,4,"['log', 'test']","['log', 'logs', 'tests']"
Testability,"One thing to address is that just use the --use-jdk-deflater/inflater options in the step where the error information was given, in my case, HaplotypeCaller, was not help. (In [Ref1], the author tried using --use-jdk-deflater/inflater options in GenomicsDBimport. Although the author said ""the error was solved"", actually it was not solved, because he/she mentioned that it was still ""end of the error log"")",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7582#issuecomment-991513869:402,log,log,402,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7582#issuecomment-991513869,1,['log'],['log']
Testability,"One thing to try is to configure cromwell to retain the log directory via a workflow option when we run the tests. Then at the end of the build we can copy them somewhere, either always, or via the travis after_failure entry in the build matrix. Then we'd be able to see exactly what failed in the travis environment.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4130#issuecomment-357059677:56,log,log,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4130#issuecomment-357059677,2,"['log', 'test']","['log', 'tests']"
Testability,"One unit test (`ReadsSparkSinkUnitTest.readsSinkTest[3]`) takes ~1/4 of our test time at around 4-5 minutes when running on travis. It only takes ~20s on my local machine, so I suspect it may be running out of memory on travis and spending all of it's time thrashing, garbage collecting, and spilling to disk. . We should either remove this tests or figure out how to fix it.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1342:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1342,3,['test'],"['test', 'tests']"
Testability,"One variable that we need to control for is OpenJDK vs. Oracle JDK. Apparently these errors happened with OpenJDK, which is known to be flakier in the networking department than Oracle JDK. We should test with Oracle's JDK and see if the errors persist.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2685#issuecomment-300313874:200,test,test,200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2685#issuecomment-300313874,1,['test'],['test']
Testability,Only if the tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6116#issuecomment-524427778:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6116#issuecomment-524427778,1,['test'],['tests']
Testability,Only run certain VAT tests on larger callsets [VS-823],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8685:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8685,1,['test'],['tests']
Testability,"Only the python one... On Fri, Jun 22, 2018 at 4:49 PM, Chris Norman <notifications@github.com>; wrote:. > @LeeTL1220 <https://github.com/LeeTL1220> Sorry - I didn't see the before; > it was restarted so I'm unsure which test failed. Looks like its nearly; > finished.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399577738>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ACDXk7mrwN0gSPmXwZ7rs21ET7LGdoKJks5t_VhVgaJpZM4UynET>; > .; >. -- ; Lee Lichtenstein; Broad Institute; 75 Ames Street, Room 8011A; Cambridge, MA 02142; 617 714 8632",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399580051:221,test,test,221,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399580051,1,['test'],['test']
Testability,"Oof, looks like there are now a bunch of broken integration tests that check ExcessHet for whatever reason. So let's definitely decide on whether we want to make the switch to mid p-values before I go through those. EDIT: Actually, what’s SOP here? Do I have to go through and recalculate ExcessHet for *every single VCF/GenomicsDB in the repo*?. If we stick with the one-sided p-values now calculated here, then I guess one bonus is we’ll no longer have ExcessHet Phred scores of 3.0103 (which result from that short circuit returning a p-value of 0.5) everywhere.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-892755997:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-892755997,1,['test'],['tests']
Testability,Oops -- good point. QUALapprox is not default. I've updated the docs with the appropriate argument to add. Still good @gbrandt6 ?. I will investigate the test failures. I'm 99% sure it's not related to my docs change....,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7231#issuecomment-828646984:154,test,test,154,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7231#issuecomment-828646984,1,['test'],['test']
Testability,"Oops, looks like they just updated the URL last week. Perhaps another reason why we should host these dependencies or have some simple contingencies for testing them other than manually building the base image.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3712:153,test,testing,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3712,1,['test'],['testing']
Testability,"Oops, pretty sure that I screwed up the rebase and that tests will fail. Will fix later tonight.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3913#issuecomment-351540529:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3913#issuecomment-351540529,1,['test'],['tests']
Testability,"Oops, sorry. The missing file exception was just my forgetting to add files before committing. I wasn't sure what the right thing to do was - I'm using the sam gVCF for three different tests. It's tiny, so I added it in three places, so that changing one wouldn't break the other two tests. Hopefully that was the right thing to do. I have no idea what happened with that Oncotator file, but I've reset it back to how it was in master, and also squashed my commits, and it seems to have fixed the problem.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424345659:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424345659,2,['test'],['tests']
Testability,"Oops. There is a warning already. I'd rather duplicate the arg and keep; the M2 one beta because I don't really trust anyone to read the logs.; Reasonable?. On Thu, Jun 6, 2019 at 2:20 PM droazen <notifications@github.com> wrote:. > @ldgauthier <https://github.com/ldgauthier> It looks like when you added; > GVCF mode to Mutect2, you may have marked this arg as beta even though it's; > shared with the HaplotypeCaller. Perhaps it would be easiest for M2 and HC; > to just have separate -ERC arg declarations? Or you could remove the beta; > label from the argument itself, and have M2 emit a logger message saying; > that GVCF mode is beta when running with -ERC GVCF.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/issues/5988?email_source=notifications&email_token=ABSGC5GSQS3L5TB6DJY6ON3PZFINTA5CNFSM4HVGSSA2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXDXBKA#issuecomment-499609768>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABSGC5HXE6VEXHFCNLN2M6TPZFINTANCNFSM4HVGSSAQ>; > .; >. -- ; Laura Doyle Gauthier, Ph.D.; Associate Director, Germline Methods; Data Sciences Platform; gauthier@broadinstitute.org; Broad Institute of MIT & Harvard; 320 Charles St.; Cambridge MA 0214",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5988#issuecomment-499960236:137,log,logs,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5988#issuecomment-499960236,2,['log'],"['logger', 'logs']"
Testability,"Optionally extract VCFs in bgzipped compression format. Integration test - [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/60357098-e6f2-4264-a322-c3088ce36152). [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/2c4dea90-367f-4875-939a-ce0b9ae296e7) is an example extract using bgzip; [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/7a8413da-499b-4f93-ba85-554937249bd4) is an example extract not using bgzip (so, just '.gz')",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8809:68,test,test,68,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8809,1,['test'],['test']
Testability,"Or, alternatively, keep the cluster-based tests in jenkins, but make the jenkins tests more visible on github.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2298#issuecomment-319404131:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2298#issuecomment-319404131,2,['test'],['tests']
Testability,OrElse(QueryExecution.scala:98); 	at org.apache.spark.sql.execution.QueryExecution$$anonfun$eagerlyExecuteCommands$1.applyOrElse(QueryExecution.scala:94); 	at org.apache.spark.sql.catalyst.trees.TreeNode.$anonfun$transformDownWithPruning$1(TreeNode.scala:512); 	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:104); 	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning(TreeNode.scala:512); 	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.org$apache$spark$sql$catalyst$plans$logical$AnalysisHelper$$super$transformDownWithPruning(LogicalPlan.scala:31); 	at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning(AnalysisHelper.scala:267); 	at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning$(AnalysisHelper.scala:263); 	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.transformDownWithPruning(LogicalPlan.scala:31); 	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.transformDownWithPruning(LogicalPlan.scala:31); 	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:488); 	at org.apache.spark.sql.execution.QueryExecution.eagerlyExecuteCommands(QueryExecution.scala:94); 	at org.apache.spark.sql.execution.QueryExecution.commandExecuted$lzycompute(QueryExecution.scala:81); 	at org.apache.spark.sql.execution.QueryExecution.commandExecuted(QueryExecution.scala:79); 	at org.apache.spark.sql.execution.QueryExecution.assertCommandExecuted(QueryExecution.scala:133); 	at org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:856); 	at org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:387); 	at org.apache.spark.sql.DataFrameWriter.saveInternal(DataFrameWriter.scala:360); 	at org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:239); 	at org.apache.spark.sql.DataFrameWriter.parquet(DataFrameWriter.scala:789); 	at StudentAws$.delayedEndpoint$StudentAws$1(StudentAws.scala:,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8587:6064,log,logical,6064,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8587,2,['log'],['logical']
Testability,OrFewer(BinaryCodec.java:421) ; ; at htsjdk.samtools.util.BinaryCodec.readBytes(BinaryCodec.java:394) ; ; at htsjdk.samtools.util.BinaryCodec.readBytes(BinaryCodec.java:380) ; ; at htsjdk.samtools.BAMRecordCodec.decode(BAMRecordCodec.java:282) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.getNextRecord(BAMFileReader.java:866) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIndexIterator.getNextRecord(BAMFileReader.java:1005) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.advance(BAMFileReader.java:840) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.next(BAMFileReader.java:834) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.next(BAMFileReader.java:802) ; ; at htsjdk.samtools.BAMFileReader$BAMQueryFilteringIterator.advance(BAMFileReader.java:1058) ; ; at htsjdk.samtools.BAMFileReader$BAMQueryFilteringIterator.next(BAMFileReader.java:1048) ; ; at htsjdk.samtools.BAMFileReader$BAMQueryFilteringIterator.next(BAMFileReader.java:1012) ; ; at htsjdk.samtools.SamReader$AssertingIterator.next(SamReader.java:591) ; ; at htsjdk.samtools.SamReader$AssertingIterator.next(SamReader.java:570) ; ; at org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator.loadNextRecord(SamReaderQueryingIterator.java:119) ; ; at org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator.next(SamReaderQueryingIterator.java:156) ; ; at org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator.next(SamReaderQueryingIterator.java:29) ; ; at org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator.next(SAMRecordToReadIterator.java:27) ; ; at org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator.next(SAMRecordToReadIterator.java:13) ; ; at org.broadinstitute.hellbender.utils.iterators.ReadTransformingIterator.next(ReadTransformingIterator.java:42) ; ; at org.broadinstitute.hellbender.utils.iterators.ReadTransformingIterator.next(ReadTransformingIterator.java:14) ; ; at org.broadinstitute.hellbender.utils.iterators,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7582:10097,Assert,AssertingIterator,10097,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7582,1,['Assert'],['AssertingIterator']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""050d2d6e-4a50-4145-a9da-8a39731ebdd2"",; ""eval_cromwell_job_id"": ""0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8"",; ""created_at"": ""2023-05-04T15:40:52.834692"",; ""created_by"": null,; ""finished_at"": ""2023-05-04T17:03:53.525"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8/call-CHMSampleHeadToHead/BenchmarkComparison/a332776f-175a-4595-bdeb-ab62e7f899",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202:16350,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16350,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""07271d7b-729d-4db9-862d-5f992a60a598"",; ""eval_cromwell_job_id"": ""89508d5f-29f1-4534-9fe1-220a80de17c4"",; ""created_at"": ""2022-07-22T17:23:11.546971"",; ""created_by"": null,; ""finished_at"": ""2022-07-23T02:09:23.327"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/89508d5f-29f1-4534-9fe1-220a80de17c4/call-CHMSampleHeadToHead/BenchmarkComparison/a2a2515a-b32a-44a6-a6d1-9a6d0d2199",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382:15654,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15654,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""410a88f6-62ca-4745-89fd-df6e30aac65b"",; ""eval_cromwell_job_id"": ""bf86d5b6-04bd-4344-b4fc-8a1df66bb5d9"",; ""created_at"": ""2022-03-16T19:53:45.833854"",; ""created_by"": null,; ""finished_at"": ""2022-03-17T00:11:38.702"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/bf86d5b6-04bd-4344-b4fc-8a1df66bb5d9/call-CHMSampleHeadToHead/BenchmarkComparison/79d1a2a4-6b5e-424a-8528-9059bda6db",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069765064:9431,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,9431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069765064,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""54997ade-421d-439f-acc9-abf50b3f9cb5"",; ""eval_cromwell_job_id"": ""6ea2705f-a3fa-41fc-8d17-a2c55d875eab"",; ""created_at"": ""2022-03-16T19:52:46.276978"",; ""created_by"": null,; ""finished_at"": ""2022-03-17T00:13:17.198"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/6ea2705f-a3fa-41fc-8d17-a2c55d875eab/call-CHMSampleHeadToHead/BenchmarkComparison/1fb97a8b-caee-4184-8e36-be21e6c435",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069766207:9431,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,9431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069766207,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""5e9a598e-1e80-4622-b153-78e97491a478"",; ""eval_cromwell_job_id"": ""f7eac327-c59c-43f7-a850-21bc3e0ccf52"",; ""created_at"": ""2022-07-12T17:28:58.385152"",; ""created_by"": null,; ""finished_at"": ""2022-07-13T02:47:47.016"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/f7eac327-c59c-43f7-a850-21bc3e0ccf52/call-CHMSampleHeadToHead/BenchmarkComparison/cd28fe49-1672-4321-a836-47f76419c1",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672:15666,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15666,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""5f0f8f34-cdc7-46ff-a59d-2368edcdf007"",; ""eval_cromwell_job_id"": ""e6f57e40-2025-46fd-9aa0-d591a3799007"",; ""created_at"": ""2022-03-16T14:20:46.087600"",; ""created_by"": null,; ""finished_at"": ""2022-03-16T17:21:08.639"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/e6f57e40-2025-46fd-9aa0-d591a3799007/call-CHMSampleHeadToHead/BenchmarkComparison/f65a7960-7b66-4a5d-a346-bd188a1b38",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069378815:9431,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,9431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1069378815,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""9886a710-334a-41eb-a495-6968d322730a"",; ""eval_cromwell_job_id"": ""9bc521dc-3c4c-4274-972c-9d1e4be850d5"",; ""created_at"": ""2023-05-03T15:51:41.295461"",; ""created_by"": null,; ""finished_at"": ""2023-05-04T01:24:02.606"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/9bc521dc-3c4c-4274-972c-9d1e4be850d5/call-CHMSampleHeadToHead/BenchmarkComparison/092bfb4f-d978-4964-a8ae-e5a7f7362f",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590:16326,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16326,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""a8ee297d-9fd6-433f-ac22-14488a09b832"",; ""eval_cromwell_job_id"": ""2a8ce326-baa5-4052-bff9-bd684393ff6c"",; ""created_at"": ""2022-07-25T15:10:00.795227"",; ""created_by"": null,; ""finished_at"": ""2022-07-26T00:11:26.646"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/2a8ce326-baa5-4052-bff9-bd684393ff6c/call-CHMSampleHeadToHead/BenchmarkComparison/a1db35b8-cc7b-4019-bdd0-9f42376254",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748:15666,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,15666,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": null,; ""test_cromwell_job_id"": ""d6f96a63-9657-4ff6-9934-fe1ab3cea617"",; ""eval_cromwell_job_id"": ""e372bd14-cd1f-4563-8d8a-abf6b6ca7883"",; ""created_at"": ""2022-03-16T14:19:54.192086"",; ""created_by"": null,; ""finished_at"": ""2022-03-16T17:26:08.529"",; ""results"": {; ""CHM controlHCprocesshours"": ""75.88741944444445"",; ""CHM controlHCsystemhours"": ""0.1663777777777778"",; ""CHM controlHCwallclockhours"": ""52.24009722222222"",; ""CHM controlHCwallclockmax"": ""2.852152777777778"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/e372bd14-cd1f-4563-8d8a-abf6b6ca7883/call-CHMSampleHeadToHead/BenchmarkComparison/7ff0db7c-0871-4cda-95f3-fa75436cbb",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069381494:9431,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,9431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7723#issuecomment-1069381494,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""167cbd3e-0835-47b5-8325-a853bd98ec9a"",; ""eval_cromwell_job_id"": ""43bcefb2-f38b-413d-9b65-06b489e64af1"",; ""created_at"": ""2023-06-02T17:26:47.097005"",; ""created_by"": null,; ""finished_at"": ""2023-06-03T03:48:32.144"",; ""results"": {; ""CHM controlHCprocesshours"": ""86.02092777777776"",; ""CHM controlHCsystemhours"": ""0.19513888888888892"",; ""CHM controlHCwallclockhours"": ""62.28637777777777"",; ""CHM controlHCwallclockmax"": ""3.304836111111111"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/43bcefb2-f38b-413d-9b65-06b489e64af1/call-CHMSampleHeadToHead/BenchmarkComparison/258eacc",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8332#issuecomment-1574622123:16285,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16285,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8332#issuecomment-1574622123,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""36c1f67a-93a8-45b4-857a-ae22db7ac9e7"",; ""eval_cromwell_job_id"": ""81dbf637-d90c-4111-93b9-9cec426c5a39"",; ""created_at"": ""2023-08-18T19:32:11.841274"",; ""created_by"": null,; ""finished_at"": ""2023-08-19T05:42:56.447"",; ""results"": {; ""CHM controlHCprocesshours"": ""89.85896666666667"",; ""CHM controlHCsystemhours"": ""0.20056666666666664"",; ""CHM controlHCwallclockhours"": ""63.561513888888875"",; ""CHM controlHCwallclockmax"": ""3.142697222222222"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/81dbf637-d90c-4111-93b9-9cec426c5a39/call-CHMSampleHeadToHead/BenchmarkComparison/3609bc",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8485#issuecomment-1684837497:16296,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16296,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8485#issuecomment-1684837497,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""78cbc728-aca2-47d0-9a7a-554dba9f19f5"",; ""eval_cromwell_job_id"": ""f61c0caa-70a3-4ee5-8542-e78ba8364985"",; ""created_at"": ""2023-05-04T18:26:42.379437"",; ""created_by"": null,; ""finished_at"": ""2023-05-05T03:56:11.686"",; ""results"": {; ""CHM controlHCprocesshours"": ""81.1621222222222"",; ""CHM controlHCsystemhours"": ""0.16283611111111113"",; ""CHM controlHCwallclockhours"": ""57.139766666666674"",; ""CHM controlHCwallclockmax"": ""3.1312416666666665"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/f61c0caa-70a3-4ee5-8542-e78ba8364985/call-CHMSampleHeadToHead/BenchmarkComparison/394f0e",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535665125:16326,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16326,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535665125,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""7b1f3c2d-059a-4391-92d7-b2f88045d8d5"",; ""eval_cromwell_job_id"": ""ba9f32d5-7b46-462c-8d1f-5692eee05534"",; ""created_at"": ""2023-08-21T22:38:12.285936"",; ""created_by"": null,; ""finished_at"": ""2023-08-22T09:23:01.973"",; ""results"": {; ""CHM controlHCprocesshours"": ""90.613975"",; ""CHM controlHCsystemhours"": ""0.19898611111111109"",; ""CHM controlHCwallclockhours"": ""63.943677777777786"",; ""CHM controlHCwallclockmax"": ""3.1089944444444444"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/ba9f32d5-7b46-462c-8d1f-5692eee05534/call-CHMSampleHeadToHead/BenchmarkComparison/b7ddd5f2-fded",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8467#issuecomment-1687811441:16289,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16289,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8467#issuecomment-1687811441,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""b7d06271-38b7-47d2-9d7c-af5543460de9"",; ""eval_cromwell_job_id"": ""beb77715-227e-4dbd-803f-4458c83607c8"",; ""created_at"": ""2023-05-12T15:09:42.984289"",; ""created_by"": null,; ""finished_at"": ""2023-05-13T01:07:11.594"",; ""results"": {; ""CHM controlHCprocesshours"": ""79.42513333333335"",; ""CHM controlHCsystemhours"": ""0.15543611111111108"",; ""CHM controlHCwallclockhours"": ""56.046666666666674"",; ""CHM controlHCwallclockmax"": ""3.0881333333333334"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/beb77715-227e-4dbd-803f-4458c83607c8/call-CHMSampleHeadToHead/BenchmarkComparison/f1b0b",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1546478988:16320,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16320,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1546478988,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""b9fadac2-4e94-424f-a397-004684d1e51e"",; ""eval_cromwell_job_id"": ""acc9e2ac-b10a-4d6a-b586-cd3e47f04e41"",; ""created_at"": ""2023-05-16T17:15:43.799702"",; ""created_by"": null,; ""finished_at"": ""2023-05-17T02:34:53.616"",; ""results"": {; ""CHM controlHCprocesshours"": ""84.8981027777778"",; ""CHM controlHCsystemhours"": ""0.19177500000000003"",; ""CHM controlHCwallclockhours"": ""60.16600277777776"",; ""CHM controlHCwallclockmax"": ""3.0439777777777777"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/acc9e2ac-b10a-4d6a-b586-cd3e47f04e41/call-CHMSampleHeadToHead/BenchmarkComparison/1731c54",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1550601099:16293,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16293,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1550601099,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Orchestrated.NIST_truthVcf"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz"",; ""BenchmarkVCFsHeadToHeadOrchestrated.NIST_truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark.broad-header.vcf.gz.tbi"",; ""BenchmarkVCFsHeadToHeadOrchestrated.hapMap"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.haplotype_database.txt"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refDict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""BenchmarkVCFsHeadToHeadOrchestrated.refIndex"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""BenchmarkVCFsHeadToHeadOrchestrated.reference"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""BenchmarkVCFsHeadToHeadOrchestrated.referenceVersion"": ""HG38"",; ""BenchmarkVCFsHeadToHeadOrchestrated.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HCR_hg38.bed"",; ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/LCR_Hg38.interval_list""; ],; ""BenchmarkVCFsHeadToHeadOrchestrated.stratLabels"": [; ""HCR"",; ""LCR""; ]; },; ""eval_options"": {; ""read_from_cache"": false; },; ""test_cromwell_job_id"": ""c18d0f5f-52c9-4e60-92ed-e4b33c6553c7"",; ""eval_cromwell_job_id"": ""9c49383b-01a9-4bc0-90fa-cde7e1090a47"",; ""created_at"": ""2023-05-15T22:38:43.733338"",; ""created_by"": null,; ""finished_at"": ""2023-05-16T08:30:08.614"",; ""results"": {; ""CHM controlHCprocesshours"": ""78.81892777777776"",; ""CHM controlHCsystemhours"": ""0.15627777777777782"",; ""CHM controlHCwallclockhours"": ""55.94185833333335"",; ""CHM controlHCwallclockmax"": ""3.053286111111111"",; ""CHM controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/9c49383b-01a9-4bc0-90fa-cde7e1090a47/call-CHMSampleHeadToHead/BenchmarkComparison/deb8560",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1549231169:16325,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,16325,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1549231169,1,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,"Original behavior during development relied on Spark mllib's computeSVD to return something sensible even if a PoN was built with only one sample; typically this would yield a singular value of 0 and an eigenvector of NaNs (although it can also result in miscellaneous exceptions, depending on how many zeros are contained in the single-row matrix on which we perform SVD). At one point, I added a check that at least one non-negligible singular value was returned (even when building a PoN with multiple samples). This spoiled the ability to build single-sample PoNs (which is useful if you only have a matched pair). I've added more explicit logic about how single-sample PoNs are built. Now we explicitly set both the singular value and eigenvector to zero. Closes #4174.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4191:644,log,logic,644,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4191,1,['log'],['logic']
Testability,"Original report by @samuelklee (see https://github.com/broadinstitute/barclay/issues/189):; > I noticed that Javadoc @value tags are not being rendered correctly in e.g. https://gatk.broadinstitute.org/hc/en-us/articles/9570326304155-ScoreVariantAnnotations-BETA-. I used these tags to specify the variables corresponding to argument names (e.g., StandardArgumentDefinitions#INTERVALS_LONG_NAME instead of intervals , USE_ALLELE_SPECIFIC_ANNOTATIONS_LONG_NAME instead of use-allele-specific-annotations, etc.), and while they show up correctly when rendering the Javadoc within IntelliJ, it seems the same is not true on the GATK website. Is there an easy fix in the code for generating these docs, or should I just avoid using this tag?. My original response:. > I tested this using the new Java 17 doclets in the hope that it would just work, but the result is the same. However, the new Java language model classes make it easy to interpolate these, so I’ll fix this in the barclay Java 17 branch. However, in looking more closely, it's not as easy to fix as I first thought, and the problem is a little deeper than I first realized. Although it's easy to detect these using the new Java 17 apis, it's more difficult to retrieve the actual values. And even then, because the gatkdoc process only consumes a subset of the classes consumed by the javadoc process (it only sees `@DocumentedFeature`s), it's quite easy to reference something in the javadoc comment that can be resolved by javdoc, but not by gatkdoc. But it appears that even the javadoc process isn't rendering these tags correctly. Here is the raw javadoc comment:; ```; * Input VCF file. Site-level annotations will be extracted from the contained variants (or alleles,; * if the {@value USE_ALLELE_SPECIFIC_ANNOTATIONS_LONG_NAME} argument is specified).; ```; The rendering in javadoc (the argument name is missing entirely, but it should be interpolated):; <img width=""780"" alt=""Screen Shot 2023-01-05 at 12 17 43 PM"" src=""https://",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8146:766,test,tested,766,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8146,1,['test'],['tested']
Testability,"Original ticket by @jmthibault79 . CombineGVCFs with --convertToBasePairResolution doesn't fully cover the intervals given. I'm trying to create very small files (for NAVS testing) from GVCFs. An input file has these reference blocks. Let's call them Blocks 1,2,3:. ```; 1 10189399 . A <NON_REF> . . END=10189558 GT:DP:GQ:MIN_DP:PL 0/0:94:99:46:0,96,1440; 1 10190507 . A <NON_REF> . . END=10190923 GT:DP:GQ:MIN_DP:PL 0/0:214:99:45:0,105,1575; 1 10192376 . C <NON_REF> . . END=10192406 GT:DP:GQ:MIN_DP:PL 0/0:14:42:8:0,21,297; ```. This command line with an interval entirely contained in Block 2 produces nothing:. ```; java -jar <GATK> \; -T CombineGVCFs \; -L 1:10,190,850-10,190,889 \; --convertToBasePairResolution \; -V <infile> -o <outfile>; ```. Expanding the interval to overlap portions of Block 1 and Block 3 produces results for Block 2 and the portion of Block 3 which corresponds to my intervals. It appears that only reference blocks which begin in the supplied intervals are processed. ---. > @jmthibault79:; > This may be a more general problem with processing GVCFs, and it may also relate to the CombineGVCFs bug @valentinruanorubio is working on.; > ; > @vruano:; > I suspect that this is rather something to do with the VCF RodBinding processing code not using the END info field to determine whether a record overlaps a position. I guess it relies on the POS value and the length of the REF string to do that. That should be fixed in the (VCF) ROD traversal code. Perhaps we could have a GVCF specific code if it does help.; > Also if it were possible to explicitly get the previous record that does not overlap the position programmatically, that would be enough to address this issue. However the other solution above would be cleaner.; > ; > @eitanbanks:; > To fix this problem the getEnd() method of VariantContext would need to check for the presence of the ""END"" annotation in the INFO field. However, I'm not sure the INFO field is always decoded at this point (and doing s",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/265:172,test,testing,172,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/265,1,['test'],['testing']
Testability,"Originally, we just had the normal be optional. You also had automated tests in the WDL Travis. . In FC, for tumor only, you would probably want a separate method configuration that ran on sample entity type. I'm open to other suggestions, but I can't think of another way. This could in theory be used for germline calling, too.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3983#issuecomment-362811723:71,test,tests,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3983#issuecomment-362811723,1,['test'],['tests']
Testability,"Os:. - [x] Rebuild and push the base Docker. EDIT: Mostly covered by #8610, but this also includes an addition of `libblas-dev`.; - [x] Update expected results for integration tests, perhaps add any that might be missing. EDIT: These were generated on WSL Ubuntu 20.04.2, we'll see if things pass on 22.04. Note that changing the ARD priors does change the *names* of the expected files, since the transform is appended to the corresponding variable name. DetermineGermlineContigPloidy and PostprocessGermlineCNVCalls are missing exact-match tests and should probably have some, but I'll leave that to someone else.; - [x] Update other python integration tests.; - [x] Clean up some of the changes to the priors.; - [x] Clean up some TODO comments that I left to track code changes that might result in changed numerics. I'll try to go through and convert these to PR comments in an initial review pass.; - [x] Test over multiple shards on WGS and WES. Probably some scientific tests on ~100 samples in both cohort and case mode would do the trick. We should also double check runtime/memory performance (I noted ~1.5x speedups, but didn't measure carefully; I also want to make sure the changes to posterior sampling didn't introduce any memory issues). @mwalker174 will ping you when a Docker is ready! Might be good to loop in Isaac and/or Jack as well.; - [x] Perhaps add back the fix for 2-interval shards in https://github.com/broadinstitute/gatk/pull/8180, which I removed since the required functionality wasn't immediately available in Pytensor. Not sure if this actually broke things though---need to check. (However, I don't actually think this is a very important use case to support...); - [x] Delete/deprecate/etc. CNN tools/tests as appropriate. Note that this has to be done concurrently, since we remove Tensorflow. @droazen perhaps I can take a first stab at this in a subsequent commit to this PR once more of the gCNV dust settles and/or has undergone a preliminary review? EDIT: ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-1847549285:2769,test,tests,2769,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-1847549285,1,['test'],['tests']
Testability,"Other transcript field is not sorted, so it can cause issues with automatic testing",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5927:76,test,testing,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5927,1,['test'],['testing']
Testability,Otherwise is good to go and once test pass you can merge.; Back to @davidbenjamin.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2098#issuecomment-241533087:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2098#issuecomment-241533087,1,['test'],['test']
Testability,Our Jenkins tests are reporting a major performance regression in ApplyBQSR. We should figure out what's going on.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4618:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4618,1,['test'],['tests']
Testability,"Our R dependency is primarily for producing plots. It could be possible to create plots using javascript instead. Javascript plots have several potential advantages but also several major downsides. The biggest and most obvious drawback is that we don't have any code to produce them yet, and they are likely harder to generate and experiment with than R scripts. . The advantage would be that we could avoid requiring an R installation to run hellbender scripts, we could potentially also include interactive plotting or other neat tricks to make the plots more useful. I see 2 possible routes to replacing Rscripts with javascript. The first would be for tools that require graphs to perform some html generation and produce html reports with embedded javascript. The user could then open these in their browser and view the plots ( much like how our test suite report and jacoco is done). . A different option would be to use javascript plotting libraries directly within the jvm to generate SVG. Java 8 has a new javascript engine which is supposed to be reasonably fast and offers access to java objects from within it. Unfortunately it doesn't offer a full DOM like a browser does, so most existing javascript libraries will fall over. It seems like it would take a lot of hacking to get something like d3 to run directly on the jvm. (someone has done something of the kind here: http://jazdw.net/content/server-side-svg-generation-using-d3js) . Other options would be to use the javafx web panes to display a browser directly, or to plot directly on a canvas. Either of these options seem like they would be painful and awful.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/248:853,test,test,853,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/248,1,['test'],['test']
Testability,Our [spark tests on jenkins](https://gatk-jenkins.broadinstitute.org/view/Performance/) are failing with:; ```; Runtime.totalMemory()=554696704; ***********************************************************************. A USER ERROR has occurred: Failed to read bam header from gs://broad-gatk-test-jenkins/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam; Caused by:null. ***********************************************************************; org.broadinstitute.hellbender.exceptions.UserException: Failed to read bam header from gs://broad-gatk-test-jenkins/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam; Caused by:null; 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:189); 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getParallelReads(ReadsSparkSource.java:93); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.getUnfilteredReads(GATKSparkTool.java:238); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.getReads(GATKSparkTool.java:212); 	at org.broadinstitute.hellbender.tools.spark.transforms.markduplicates.MarkDuplicatesSpark.runTool(MarkDuplicatesSpark.java:68); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:353); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:111); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:169); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:188); 	at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:121); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:142); 	at org.broadinstitute.hellbender.Main.main(Main.java:218); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.Na,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2449:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2449,3,['test'],"['test-jenkins', 'tests']"
Testability,Our current logging level argument (VERBOSITY) is only hooked up to the legacy Picard logger. We need to hook this up to log4j as well. Related to:; https://github.com/broadinstitute/hellbender/issues/146 (standardize on log4j across GATK + Picard); https://github.com/broadinstitute/hellbender/issues/216 (fix log4j error that happens on every run),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/243:12,log,logging,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/243,2,['log'],"['logger', 'logging']"
Testability,"Our gradle script does a bunch of testing and packaging, so while build might work I think we had problems with getting all of tests to run correctly and the javadoc built right or something like that... We definitely recommend you use the wrapper. Is there a reason that the wrapper won't work for you?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5483#issuecomment-444199543:34,test,testing,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5483#issuecomment-444199543,2,['test'],"['testing', 'tests']"
Testability,"Our jenkins nightly tests are failing, but they're reporting success. This shouldn't be happening. . Some of the failures are due to #3067, but the spark failures look like something else is causing them. Notice the very short runtimes because nothing is actually happening.; <img width=""958"" alt=""screen shot 2017-06-09 at 2 04 31 pm"" src=""https://user-images.githubusercontent.com/4700332/26988271-a61ab3fc-4d1c-11e7-9110-9941888b66ce.png"">. This ticket is to fix the fact that the tests report success even when they fail, not to fix the tests themselves.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3077:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3077,3,['test'],['tests']
Testability,Our jenkins worker nodes are dead with out of disk space errors. We need to either clean stuff off of them or give them more space. . We should determine what's eating their disk space as well so we can prevent this in the future. We may need to do some clean up after some of our tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2180:281,test,tests,281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2180,1,['test'],['tests']
Testability,"Our launch script gatk-launch now uses a bunch of system properties for things like compression, async reading, deflater. Our testing infrastructure must use the same settings. for @lbergelson",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1630:126,test,testing,126,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1630,1,['test'],['testing']
Testability,Our travis builds are getting killed intermittently with out-of-memory errors -- it's unclear whether it's the test suite JVM or the JVM with gradle that is getting killed. This is happening more and more often...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1113:111,test,test,111,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1113,1,['test'],['test']
Testability,Our variant comparison in our test utils is bad,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5572:30,test,test,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5572,1,['test'],['test']
Testability,Output log messages during engine operations that may be time-consuming.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/360:7,log,log,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/360,1,['log'],['log']
Testability,"Overall this looks good to me. I've added a few comments inline. Note that I haven't reviewed for style particularly, or consistency with the existing codebase. > 5) There are unit tests for all code except for the skeleton itself. This could be as simple as a Spark variant of `ReadsPreprocessingPipelineIntegrationTest`.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/850#issuecomment-134164842:181,test,tests,181,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/850#issuecomment-134164842,1,['test'],['tests']
Testability,"Overall, this looks fine, just a few minor comments. Two broader questions/issues:; - Does the test data exercise all of the code paths and edge cases?; - In general, putting the majority of testing in integration tests instead of unit tests is bad pattern. It have several bad consequences (1) it becomes less clear which cases are being tested (2) it's slower than just running unit tests and (3) it makes it unhelpful to (perhaps someday) move to a testing framework that only runs tests relevant to the code directly affected (because all integration tests must be run).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1013#issuecomment-149599490:95,test,test,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1013#issuecomment-149599490,9,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,Overhaul tests on SV assembly-based non-complex breakpoint and type inference code,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4835:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4835,1,['test'],['tests']
Testability,Oversight leaving some hardcoded debug in with the tests...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6089:51,test,tests,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6089,1,['test'],['tests']
Testability,"Overview: see [this presentation](https://docs.google.com/presentation/d/1jPKYcaMcpT_e1l8L6D3wn7wBvC-yKt4GVrgeeTRBrss/edit#slide=id.g7f3200a976_0_97). ![image](https://user-images.githubusercontent.com/1423491/136983924-338faca1-30f0-4f1e-92c7-b34f091050ca.png). WDL; * updated WDLs to support parameterized loading of PET and/or RANGES; * enhanced inline schemas in WDL to JSON to allow for declaring required fields. Common; * updated AvroFileReader to use GATKPath instead of String for file, allows us to read from gs:// directly; * changed ""mode"" from EXOMES/GENOMES/ARRAYS (unused) to PET/RANGES; * promoted GQStateEnum to top-level class (it was inside PetTsvCreator but used across the codebase); * added numerical GQ value to GQStateEnum; * max deletion size is 1000bp . Import; * added flags to enable writing of PET and/or VET; * code to create RefRanges with pluggable writer and TSV/Avro implementations; ; Extract; * add parameter to parameterize inferred GQ value; * support to read VET/Ranges data from Avro files (to support testing); * Entire implementation of ranges support; * Note there is a maximum supported DELETION size. Upstream deletions larger than this will not generate downstream spanning indels. Testing; * added new integration test for ranges extract; * added various unit tests; * (IN PROCESS) scientific tieout against 1k; * scale testing up to 90k once we've move to v2 reblocking. How to perform scientific tieout; 1. Run the ""GvsIngest"" pipeline with load_ref_ranges = true, this will load both the PET and REF_RANGES tables; 2. Run Create Alt Allele, Training, etc as normal; 3. Extract a callset twice -- once with mode = 'PET' (the default) and once with mode = 'RANGES'; 4. Compare the resulting VCFs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7498:1042,test,testing,1042,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7498,5,"['Test', 'test']","['Testing', 'test', 'testing', 'tests']"
Testability,PCollection<Read> -> BAM file. With tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/545:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/545,1,['test'],['tests']
Testability,PG is on by default and I have a test to prove it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1722:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1722,1,['test'],['test']
Testability,"PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068169 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068170 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068171 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068172 . G *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068173 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068174 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068175 . T <NON_REF> . . . GT:DP:GQ:MIN_DP:PL ./.:20:17:20:0,17,729; ```. When the original GVCF is imported into GenomicsDB and then extracted:. ```; ./gatk GenomicsDBImport -R src/test/resources/large/human_g1k_v37.20.21.fasta -L 20 -V src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk4.g.vcf -genomicsdb-workspace-path spanDelWorkspace; ./gatk SelectVariants -V gendb://spanDelWorkspace -R src/test/resources/large/human_g1k_v37.20.21.fasta -O test.g.vcf -L 20; ```. It contains the following records in this region:. ```; 20 10068158 . GTGTATATATATA G,<NON_REF> . . BaseQRankSum=-6.520e-01;ClippingRankSum=0.00;DP=29;ExcessHet=3.01;MQRankSum=0.328;RAW_MQ=93364.00;ReadPosRankSum=-2.530e-0; 1 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068159 . T *,<NON_REF> . . DP=29 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068160 . GTATATATATATGTA G,*,<NON_REF> . . DP=28;ExcessHet=3.01;RAW_MQ=87005.00 GT:AD:DP:GQ:PL:SB ./.:0,2,4,0:6:53:735,162,131,102,0,53,507,174,108,472:0,0,; 2,4; 20 10068161 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068162 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068163 . T *,<NON_REF> . . DP=28 GT:AD",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4963#issuecomment-403519172:3330,test,testGVCFMode,3330,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4963#issuecomment-403519172,1,['test'],['testGVCFMode']
Testability,"PR #1068 had the unintended side effect of removing the method responsible for; stripping out SAMFileHeaders on Spark. This commit restores that method, and adds; a unit test to verify that all reads emitted by ReadSparkSource are headerless.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1110:170,test,test,170,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1110,1,['test'],['test']
Testability,PR #3897 added a parser for this and similar data sources. The data Source itself was added as part of the test suite in PR #3908.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3786#issuecomment-348606785:107,test,test,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3786#issuecomment-348606785,2,['test'],['test']
Testability,"PR is ready to be merged. The 2 GCS tests in GenomicsDBImportIntegrationTest.java are commented out, but they have been tested with the HELLBENDER test project and GOOGLE_APPLICATION_CREDENTIALS in the nalini_new_genomicsdb_jar branch and will be uncommented as soon as a new GenomicsDB jar is released.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5197#issuecomment-429598743:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5197#issuecomment-429598743,3,['test'],"['test', 'tested', 'tests']"
Testability,PR updated after a rebase from a nearly a year old master. @ldgauthier @kachulis please review first (3rd last commit) . @davidbenjamin please review second (2nd last commit) on AlleleLikelihoods changes... these two commit are a bit entangled and would be a bit of work to split it in two PRs. I found a couple of bugs that does not seem to manifest themselves in practice and have splitted marginalization and evidence filtering in two steps. Filtering can use any given criterion (lambda) not necessarelly interval overlap. The last commit gathers changes in test files for the first (main) commit. Most of the differences in vcf are due to updated DPs annotations and some minor changes in PLs.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6055#issuecomment-558828882:562,test,test,562,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6055#issuecomment-558828882,1,['test'],['test']
Testability,"PSHOT"",; ""VariantCallingCarrotOrchestrated.haplotype_scatter_count"": 50,; ""VariantCallingCarrotOrchestrated.monitoring_script"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/cromwell_monitoring_script.sh"",; ""VariantCallingCarrotOrchestrated.ref_dict"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.dict"",; ""VariantCallingCarrotOrchestrated.ref_fasta"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta"",; ""VariantCallingCarrotOrchestrated.ref_fasta_index"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta.fai"",; ""VariantCallingCarrotOrchestrated.use_gatk3_haplotype_caller"": true; },; ""test_options"": null,; ""eval_input"": {; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_confidenceInterval"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/chm.full.m38.interval_list"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_controlLabel"": ""CONTROLSNAPSHOT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_controlMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.CHM_control_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_controlRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.CHM_control_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_controlVcf"": ""test_output:VariantCallingCarrotOrchestrated.CHM_control_vcf"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_controlVcfIndex"": ""test_output:VariantCallingCarrotOrchestrated.CHM_control_vcf_index"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_evalLabel"": ""TESTSNAPSHOT2018HG002"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_evalMonitoringExample"": ""test_output:VariantCallingCarrotOrchestrated.CHM_representative_benchmarking"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_evalRuntimeSummaries"": ""test_output:VariantCallingCarrotOrchestrated.CHM_output_runtimes"",; ""BenchmarkVCFsHeadToHeadOrchestrated.CHM_evalVcf"": ""test_output:VariantCallingCarrotOrc",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1067505110:3577,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,3577,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1067505110,4,['Benchmark'],['BenchmarkVCFsHeadToHeadOrchestrated']
Testability,PairHMM tests are excessive / consume too much test suite runtime,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/630:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/630,2,['test'],"['test', 'tests']"
Testability,PairHMM tests consume about 30% of the test suite runtime. This is probably because they are combinatorial in nature. We should see if we can reduce this intelligently without compromising safety.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/630:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/630,2,['test'],"['test', 'tests']"
Testability,Parameterize the logging frequency for ProgressLogger.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8662:17,log,logging,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8662,1,['log'],['logging']
Testability,"Paraphrasing an email from Chunyang Bao:. > In the Dockerfile Line 18, the source code is “RUN ln -s /testdata src/test/resources”. And, I just want to know whether it should be “RUN ln -s src/test/resources /testdata”. Does it make sense? If I change this link, I can get more results from the test script (/root/run_unit_tests.sh). Will double check this when I get a chance, but perhaps it will be immediately obvious to @lbergelson.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3730:102,test,testdata,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3730,5,['test'],"['test', 'testdata']"
Testability,"Part of road map laid out in #4111 . ## Consolidate logic, update variant representation (PR#4663) . ### consolidate logic in the following classes. - [x] `AssemblyContigAlignmentSignatureClassifier` now gone, its inner enum class `RawTypes` is moved to `AssemblyContigWithFineTunedAlignments.AlignmentSignatureBasicTypes` and reduced into fewer cases (`Suspicious`, `Simple` and `Complex`). - [x] static method `BreakpointsInference.inferFromSimpleChimera()` now moved to state query method `ChimericAlignment.inferType()`. - [x] `AssemblyContigWithFineTunedAlignments.hasIncompletePictureFromTwoAlignments()` merged with `ChimericAlignment.hasIncompletePicture()`. ### update how variants are represented. - [x] change `SVLEN` for `CPX` variants to the difference between _[alt haplotype sequence length]_ and _[affected reference region length]_, which is following the technical definition of `SVLEN` in VCF spec. - [x] change `RPL` output to one of these (note that test coverage is expected); - [x] ins/del, when del/ins bases are < 50 and annotate; when type is determined as ins, the POS will be 1 base before the micro-deleted range and END will be end of the micro-deleted range, where the REF allele will be the corresponding reference bases.; - [x] ins and del when both are >= 50, and link by `EVENT`. - [x] change `SVTYPE=DUP` to`SVYTPE=INS` when the duplicated region is shorter than 50 bp (tests). Note that this will lead to `INS` records with `DUP_REPEAT_UNIT_REF_SPAN` and `DUP_SEQ_CIGARS` (when available). In addition, we are currently treating duplication expansion as insertion. ; The VCF spec doesn't force `DUP` records as such.; If we decide to allow `POS` and `END` to designate the beginning and end of the duplicated reference region, we need to make at least the following change:. - [ ] shift the left breakpoint to the right by 1 base compared to the current implementation, and ; - [ ] `downstreamBreakpointRefPos = complication.getDupSeqRepeatUnitRefSpan().getEnd();`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4663:52,log,logic,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4663,2,['log'],['logic']
Testability,Passed integration test here: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/be46efc1-38b9-48a8-953a-42b06581266a,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8529#issuecomment-1798828249:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8529#issuecomment-1798828249,1,['test'],['test']
Testability,"Passing Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ad05b4d1-7aed-4482-8b5c-ced7b87d2d37).; Verified that GQ0 dropped in 'hail_lite' run and not in 'hail_vcf' run; (queries of count by state from ref ranges table):. **Hail Lite (Hail path, drop state 0):; state count**; 2 2495387; 3 4773472  ; 4 5959290. **Lite VCF (VCF path, drop_state 40):; state count**; 0 2764630; 2 2495387; 3 4773472. Spun up a notebook and ran the vds_validation.py script on the VDS generated by 'hail_lite'. And it passed:. > 2023-10-04 19:08:01.278 Hail: WARN: cols(): Resulting column table is sorted by 'col_key'.; > To preserve matrix table column order, first unkey columns with 'key_cols_by()'; > checking that:; > * no reference blocks have GQ=0; > * all ref blocks have END after start; > * all ref blocks are max 1000 bases long; > running densify on 200kb region (0 + 1) / 1]; > took 10.9s to densify 0 rows after interval query; > Hail VDS validation successful======================================(1 + 0) / 1]",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8538:20,Test,Test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8538,1,['Test'],['Test']
Testability,Passing Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/70870e97-4e58-4a55-8424-f78b0e26ac28).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8393#issuecomment-1613031872:20,Test,Test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8393#issuecomment-1613031872,1,['Test'],['Test']
Testability,Passing Integration test (using built-in dockers) [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/d2063e26-a22e-412e-ad91-aa2b14fbb7ec).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8566:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8566,1,['test'],['test']
Testability,Passing Lite Run [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/89e89bba-9647-4451-a6fc-934a7b72ed1e); Passing Classic Run [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/9810bedb-dc9b-4a65-97e2-69497fbba516); Passing Integration Test [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/ea45667c-5c45-48a6-b654-2a7c8da362d7).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8269#issuecomment-1516398664:319,Test,Test,319,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8269#issuecomment-1516398664,1,['Test'],['Test']
Testability,"Passing in the properties file did work (with the --gatk-config-file option). However, of the four tools I tested (MarkDuplicates, BaseRecalibrator, ApplyBQSR, and HaplotypeCaller) all of the tools accepted the --gatk-config-file option except for MarkDuplicates, which complains that it is not a recognized option. Perhaps this should be turned into a separate issue?. Thanks",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4435#issuecomment-368036324:107,test,tested,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4435#issuecomment-368036324,1,['test'],['tested']
Testability,Passing integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/9a1e766a-0735-49c0-86ee-ab55a57787ac),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8268#issuecomment-1509736338:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8268#issuecomment-1509736338,1,['test'],['test']
Testability,Passing integration test here: https://job-manager.dsde-prod.broadinstitute.org/jobs/2b9f4dc6-d058-4803-a583-5ab76fbd71e8,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7919#issuecomment-1170209017:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7919#issuecomment-1170209017,1,['test'],['test']
Testability,Passing integration tests (all chrs) [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/be35d4ae-7fd5-48ae-b7e1-a7c74eddd4ab); and chr20/x/y [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f3222e37-13a4-43fc-a341-cd7cdafed777),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8948:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8948,1,['test'],['tests']
Testability,Passing job [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/e604eef1-b6d1-4255-9814-70622966077b); Look at the logs for AssertIdenticalOutputs and you'll see that it's actually comparing the VCFs in this PR.; Previously passing run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/ea45667c-5c45-48a6-b654-2a7c8da362d7),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8316#issuecomment-1545929782:155,log,logs,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8316#issuecomment-1545929782,2,"['Assert', 'log']","['AssertIdenticalOutputs', 'logs']"
Testability,"Passing run of GvsCreateVATFromVDS [here](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/GVS%20AoU%20WGS%2010K%20Callset/job_history/7bb1410b-123c-4150-8a6b-f3d36234527a); Passing run of GvsCallsetStatistics [here](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/GVS%20AoU%20WGS%2010K%20Callset/job_history/ecc67d79-ecbf-41c6-bbee-52be83327d64); (both are on the AoU 10K - so need your PMI-OPS account to see). Integration test ran [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/b1f35d64-4406-4fef-a3af-e86703f36148) - had one failure, but it was in the cost tracking, so probably not a concern for this PR",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8519#issuecomment-1721658082:436,test,test,436,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8519#issuecomment-1721658082,1,['test'],['test']
Testability,Passing run where generated from a VDS [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/12712c01-46c5-4968-b687-0360ac09f8e6); Passing run where used an existing sites-only VCF [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/e01f9bf2-2224-4be3-b09e-bf6289126621); Integration Test run [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/62087a48-696d-4ce9-aff8-243110c3dce0),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8977:363,Test,Test,363,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8977,1,['Test'],['Test']
Testability,Passing workflow here: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Exome%20Data%2049k/job_history/38d22351-33cd-4c2c-abf9-feccda71d40a. Mostly passing integration test here: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/4a7e6628-6c19-442d-90b8-202da267d8bb; (the failure was a bq time out.),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8374:167,test,test,167,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8374,1,['test'],['test']
Testability,"PathSeqFilterSpark and PathSeqPipelineSpark clear all the sequences from the input header file, as the Bwa step only accepts unaligned reads. However, the header sequences were being cleared before the reads were loaded, causing WellformedReadFilter to remove any mapped reads (by failing to find the corresponding sequence name in the header). This PR fixes this bug by creating a deep copy of the header. It also refactors this code, which is used in both the Filter and Pipeline tools, into a utility function `checkAndClearHeaderSequences()` in PSUtils. Tests have also been added/updated accordingly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3453:558,Test,Tests,558,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3453,1,['Test'],['Tests']
Testability,"Per discussions with @fleharty, we are looking to significantly revamp the automated somatic CNV evaluations in preparation for benchmarking the TH prototype. The existing evaluations use a few unsupported/experimental tools and idiosyncratic/redundant classes (e.g., the `src/main/java/org/broadinstitute/hellbender/tools/copynumber/utils/annotatedinterval` class this issue concerns), the functionality of which we can hopefully move to python-based validation code. . The aforementioned code was purposefully decoupled from supported CNV code, but since then it has been incorporated into `Funcotator` tools and `ValidateBasicSomaticShortMutations`, at least. @jonn-smith @davidbenjamin can we discuss a plan for cleaning this code up? Would it be easy to use an existing TSV/XSV class to handle the functionality needed for these tools?. @jonn-smith perhaps we should also discuss the plan for future `FuncotateSegments` development/integration with @fleharty.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3884#issuecomment-526226506:128,benchmark,benchmarking,128,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3884#issuecomment-526226506,1,['benchmark'],['benchmarking']
Testability,"Perhaps @tedsharpe would have some thoughts---seems related to hist work on KS tests?. EDIT: Made a curiously appropriate typo, keepin' it.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4713#issuecomment-385053920:79,test,tests,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4713#issuecomment-385053920,1,['test'],['tests']
Testability,Picard added a test that runs all the data providers and makes sure they don't error out and cause skipped tests. Maybe we should add a similar test. see https://github.com/broadinstitute/picard/pull/931,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3619:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3619,3,['test'],"['test', 'tests']"
Testability,"Picard had its Optical duplicate finding code refactored recently, additionally it has been noticed as part of #4656 that we are currently not properly accounting for the read groups when we stratify reads in MarkDuplicatesSpark which will likely cause problems for bams with more than one read group. Additionally better test coverage for multiple read groups should be added to ensure we are handling them sanely.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4700:322,test,test,322,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4700,1,['test'],['test']
Testability,PileupElementUnitTest no longer skipping a test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1977:43,test,test,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1977,1,['test'],['test']
Testability,PileupElementUnitTest.testBadOffsetWithinBounds was being skipped because the data provider name was wrong.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1977:22,test,testBadOffsetWithinBounds,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1977,1,['test'],['testBadOffsetWithinBounds']
Testability,Piping picard tools in GATK fails because of logging to STDOUT,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4135:45,log,logging,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4135,1,['log'],['logging']
Testability,Placed a call to forceJVMLocaleToUSEnglish in Main.runCommandLineProgram so that integration tests can take advantage of this. Fixes #2557,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3064:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3064,1,['test'],['tests']
Testability,"Please find attached samtools stats file. sample1.markdup.sorted.stats is before BQSR and ApplyBQSR; sample1.stats is after BQSR and ApplyBQSR. As you can see, ; before ApplyBQSR (NA12878-P.markdup.sorted.stats.txt), the raw total sequences is 119998832; After ApplyBQSR (NA12878-P.stats.txt), the raw total sequences is 120169477. gatk_applyBQSR_error.log is the log file of the applyBQSR step. Do you have any ideas?. [gatk_applyBQSR_error.log](https://github.com/broadinstitute/gatk/files/12745229/gatk_applyBQSR_error.log); [NA12878-P.markdup.sorted.stats.txt](https://github.com/broadinstitute/gatk/files/12745230/NA12878-P.markdup.sorted.stats.txt); [NA12878-P.stats.txt](https://github.com/broadinstitute/gatk/files/12745236/NA12878-P.stats.txt)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8535:353,log,log,353,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8535,4,['log'],['log']
Testability,"Please find the stack trace below. Hopefully helpful. Using GATK jar /omics/chatchawit/gatk3/gatk-package-4.0.4.0-34-g2cc7abd-SNAPSHOT-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /omics/chatchawit/gatk3/gatk-package-4.0.4.0-34-g2cc7abd-SNAPSHOT-local.jar Funcotator -R /omics/chatchawit/bundle/hsa38.fasta -V /omics/chatchawit/sm/out/test.vcf -O /omics/chatchawit/sm/anno/test.vcf --output-file-format VCF --data-sources-path /omics/chatchawit/bundle/dsrc/ --ref-version hg38; 23:24:49.725 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/omics/chatchawit/gatk3/gatk-package-4.0.4.0-34-g2cc7abd-SNAPSHOT-local.jar!/com/intel/gkl/native/libgkl_compression.so; 23:24:49.934 INFO Funcotator - ------------------------------------------------------------; 23:24:49.934 INFO Funcotator - The Genome Analysis Toolkit (GATK) v4.0.4.0-34-g2cc7abd-SNAPSHOT-0.0.3; 23:24:49.934 INFO Funcotator - For support and documentation go to https://software.broadinstitute.org/gatk/; 23:24:49.935 INFO Funcotator - Executing as chatchawit@omics on Linux v3.13.0-133-generic amd64; 23:24:49.935 INFO Funcotator - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_161-b12; 23:24:49.935 INFO Funcotator - Start Date/Time: May 23, 2018 11:24:49 PM ICT; 23:24:49.935 INFO Funcotator - ------------------------------------------------------------; 23:24:49.935 INFO Funcotator - ------------------------------------------------------------; 23:24:49.936 INFO Funcotator - HTSJDK Version: 2.15.0; 23:24:49.936 INFO Funcotator - Picard Version: 2.18.2; 23:24:49.936 INFO Funcotator - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 23:24:49.936 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 23:24:49.936 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 23:24:49.936 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_W",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4712#issuecomment-391421032:476,test,test,476,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4712#issuecomment-391421032,2,['test'],['test']
Testability,Please ignore this. It will not be merged. Need to test Jenkins hook.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2005:51,test,test,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2005,1,['test'],['test']
Testability,Please make this option hidden if it's only being kept for testing purposes (and document clearly that that is the case). Users should not have access to options that are not expected to have value.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2231#issuecomment-316842338:59,test,testing,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2231#issuecomment-316842338,2,['test'],['testing']
Testability,"Point taken on the squash, though I deliberately separated the copy of GATK3 integration tests using GATK3 data, since this would not get merged. It seems to make sense to keep that separate still?. i'll update examples, etc. i am honestly not that familiar updates to argument conventions for GATK4 - i'll give this a look but if you have more specifics that would help.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-433417437:89,test,tests,89,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-433417437,1,['test'],['tests']
Testability,Policy.java:54); 	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); 	at java.lang.Thread.run(Thread.java:748); Caused by: org.testng.TestNGException:An error occurred while instantiating class org.broadinstitute.hellbender.engine.spark.ReadsPreprocessingPipelineSparkTestData. Check to make sure it can be instantiated; 	at org.testng.internal.InstanceCreator.createInstanceUsingObjectFactory(InstanceCreator.java:134); 	at org.testng.internal.InstanceCreator.createInstance(InstanceCreator.java:79); 	at org.testng.internal.ClassImpl.getDefaultInstance(ClassImpl.java:110); 	at org.testng.internal.ClassImpl.getInstances(ClassImpl.java:195); 	at org.testng.TestClass.getInstances(TestClass.java:102); 	at org.testng.TestClass.initTestClassesAndInstances(TestClass.java:82); 	at org.testng.TestClass.init(TestClass.java:74); 	at org.testng.TestClass.<init>(TestClass.java:39); 	at org.testng.TestRunner.initMethods(TestRunner.java:466); 	at org.testng.TestRunner.init(TestRunner.java:345); 	at org.testng.TestRunner.init(TestRunner.java:298); 	at org.testng.TestRunner.<init>(TestRunner.java:183); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:603); 	at org.testng.SuiteRunner.init(SuiteRunner.java:196); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:127); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1231); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1210); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1058); 	at org.testng.TestNG.runSuites(TestNG.java:997); 	at org.testng.TestNG.run(TestNG.java:965); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProc,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5787#issuecomment-472107858:3002,test,testng,3002,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5787#issuecomment-472107858,1,['test'],['testng']
Testability,Port GATKDocs system + tests from GATK3 to new arg parser project,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2209:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2209,1,['test'],['tests']
Testability,"Port VQSR tests, slimming down as necessary to achieve reasonable runtime",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2063:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2063,1,['test'],['tests']
Testability,Port of the GATK3 Version of CombineGVCFs and its associated integration tests. . Fixes #16,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3718:73,test,tests,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3718,1,['test'],['tests']
Testability,"Port the needed pieces of the old ROD system over to the new framework. The basic interface should be a map from logical names to lazy queries over the current interval for each source of variants. Unlike ReadsDataSource, VariantsDataSource should not merge variants from different sources into a single stream. Initial implementation may only need to support VCF/BCF, with support for arbitrary codecs added later.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/93:113,log,logical,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/93,1,['log'],['logical']
Testability,"Port the remainder of tools in picard.sam, excluding ViewSam (redundant with PrintReads) and SplitSamByLibrary (see https://github.com/broadinstitute/hellbender/issues/140). . Note that new unit tests will have to be written for some of these tools (see https://github.com/broadinstitute/hellbender/issues/144).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/156:195,test,tests,195,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/156,1,['test'],['tests']
Testability,Ported OverclippedReadFilter and associated tests from GATK3,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1923:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1923,1,['test'],['tests']
Testability,"Ported `CallableLoci` from GATK3 as an experimental tool. I have not included tests, but have verified on a test file that the statistics and regions are basically identical to the GATK3 results.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9031:78,test,tests,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9031,2,['test'],"['test', 'tests']"
Testability,Porting Pileup (https://github.com/broadinstitute/gatk/issues/1581) and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1836:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1836,1,['test'],['tests']
Testability,"Porting the GVCFWriter and tests. the first commit includes the original gatk classes modulo some import statements and package names; the next commit is my changes on top of it. closes #736. <!-- Reviewable:start -->. [<img src=""https://reviewable.io/review_button.png"" height=40 alt=""Review on Reviewable""/>](https://reviewable.io/reviews/broadinstitute/gatk/859). <!-- Reviewable:end -->",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/859:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/859,1,['test'],['tests']
Testability,"Positive test demonstrates that the last row, which has nothing to be merged with, gets dropped when minimum interval length is 101 since its length is 100. (That's why the final row in merged.rd.txt is omitted in this commit.); I believe all your comments have been addressed.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7926#issuecomment-1175338758:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7926#issuecomment-1175338758,1,['test'],['test']
Testability,Post Java 17 build/CI/log cleanup issues,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8087:22,log,log,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8087,1,['log'],['log']
Testability,Pre-req to testing on Java 11,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6145:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6145,1,['test'],['testing']
Testability,"Prevent a git lfs error that was caused by accidentally checking storing a .gitattributes file; in gitlfs. When checkout out the repository for the first time or moving from an old commit to a newish one, there's been an error report from git lfs. This was caused by accidentally checking a .gitattributes file into git-lfs which then is read as part of the git lfs checkout process, but since the file is tracked by lfs at the point of checkout it is an lfs stub and throws an error. The problem was introduced here: #6694. See below to reproduce:; ```; git checkout 9951f77c6; git checkout f548ccd708009ddcdfead6525edd23a68d73027b; https://git-lfs.github.com/spec/v1 is not a valid attribute name: src/test/resources/large/mitochondria_references/.gitattributes:1; sha256:cb156adb10b491dd3ba88c2b491bfb021b3c94fc956d36310c67492504fcdc58 is not a valid attribute name: src/test/resources/large/mitochondria_references/.gitattributes:2; Updating files: 100% (363/363), done.; Note: switching to 'f548ccd708009ddcdfead6525edd23a68d73027b'.; ```. This fixes the problem going forward by removing the file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7594:459,stub,stub,459,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7594,3,"['stub', 'test']","['stub', 'test']"
Testability,"Previously we had an issue where our travis builds would use the wrong; commit for the docker builds in the travis pull-request builds but not for the push; builds. This caused the tests from master to run and usually pass. However,; since we are mounting the test data from the correct commit into the; docker, this would result in confusing mismatches where old tests would; try to run on new test data. Fixing the problem by using the $TRAVIS_COMMIT environment variable; instead of the TRAVIS_BRANCH. fixes #3216",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3217:181,test,tests,181,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3217,4,['test'],"['test', 'tests']"
Testability,"Previously, the only integration tests involving assembly region traversal were in gatk-protected,; which led to breakage. Resolves #2172",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2179:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2179,1,['test'],['tests']
Testability,Primarily the large integration tests check for the non-locatable; funcotation factories producing data. Regenerated the expected output from large tests. Fixes #5773,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5774:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5774,2,['test'],['tests']
Testability,"PrintVariantsSpark crashes on dataproc with serialization issues. . Ex:. ```; Running:; gcloud dataproc jobs submit spark --cluster gatk-test-8875b999-b609-4a3f-86ea-973b929fe662 --properties spark.driver.userClassPathFirst=true,spark.io.compression.codec=lzf,spark.driver.maxResultSize=0,spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.kryoserializer.buffer.max=512m,spark.yarn.executor.memoryOverhead=600 --jar gs://hellbender-test-logs/test/staging/lb_staging/gatk-package-4.beta.6-37-g0a135f8-SNAPSHOT-spark_7002d0551e84ddef0d74adf95dfee104.jar -- PrintVariantsSpark --V gs://hellbender/test/resources/large/gvcfs/gatk3.7_30_ga4f720357.24_sample.21.expected.vcf --output gs://hellbender-test-logs/test/staging/lb_staging/756f43e6-4663-49ce-8a8c-bf717b07a8c7.vcf --sparkMaster yarn; Job [dfac787d-19aa-4296-8078-c033cd9f440d] submitted.; Waiting for job output...; 19:43:09.678 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 19:43:09.837 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/tmp/dfac787d-19aa-4296-8078-c033cd9f440d/gatk-package-4.beta.6-37-g0a135f8-SNAPSHOT-spark_7002d0551e84ddef0d74adf95dfee104.jar!/com/intel/gkl/native/libgkl_compression.so; [November 15, 2017 7:43:09 PM UTC] PrintVariantsSpark --output gs://hellbender-test-logs/test/staging/lb_staging/756f43e6-4663-49ce-8a8c-bf717b07a8c7.vcf --variant gs://hellbender/test/resources/large/gvcfs/gatk3.7_30_ga4f720357.24_sample.21.expected.vcf --spar",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3840:137,test,test-,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3840,4,['test'],"['test', 'test-', 'test-logs']"
Testability,"Probably best to have a baked-in `gatk.properties`, and an `override.properties` that is looked for in known locations (eg., a package on the classpath, as well as the current working directory). The override logic could be captured in a method that can be overridden by downstream projects with more complex needs.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2368#issuecomment-275505505:209,log,logic,209,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2368#issuecomment-275505505,1,['log'],['logic']
Testability,"Problem was ocurring in the presence of insertions and deletions. fixes #6139. 1. Changed ReadClipper unit tests:; - The tests in many cases assumed that the unclipped alignment locations do not change when the read is clipped. This is not true: for example if start for cigar; 1M1I3M is 100, the unclipped start for 2H3M is 99. All assertUnclipped calls were; removed; - Alignment now check that the read length remains to be consistent with the CIGAR, that the aligned bases span are consistent with the CIGAR and that the number of clipped bases from the read is consistent with the requested clipping; 2. Hard clipping in ClippingOps was buggy, thus we introduced new tests for it.; 3. Text was refactored for readability; 4. Clipping in ClippingOps did not treat insertions and deletions in the clipped parts of the CIGAR correctly. This was fixed; 5. Alignment re-calculation after clipping did not work correctly if the initial CIGAR contained insertions and deletions; 6. Hard clipping applied to the hard clipped read did not behave correctly",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6280:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6280,4,"['assert', 'test']","['assertUnclipped', 'tests']"
Testability,"Profiling is easier when the stages have names and output logging information. Keeping my branch as close as possible to 'master' means merges are easier, both ways.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/753:58,log,logging,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/753,1,['log'],['logging']
Testability,"Profiling using JBuilder remotely on gsa5 (with a large load from other programs) seem to show that close to or over 50% of the CPU effort is dedicated to filter ""bad"" reads. <img width=""1006"" alt=""screen shot 2018-09-27 at 2 37 59 pm"" src=""https://user-images.githubusercontent.com/791104/46167159-09fe1f00-c263-11e8-8ea0-02621146659b.png"">. To reproduce you may run (or better make your copy and run on a different profiling port and folder):; ```; cd /dsde/working/valentin/crc-profiling; sh run.sh; ```; ```; #run.sh contents:; java -agentpath:./bin/linux-x64/libjprofilerti.so=port=5006,nowait -jar ./gatk-local.jar \ ; CollectReadCounts \ ; -I /dsde/working/CHM/33remap/msb2.m38.bam \; -R /seq/references/Homo_sapiens_assembly38/v0/Homo_sapiens_assembly38.fasta \; -O /tmp/test.tsv -L hg38.interval_list -imr OVERLAPPING_ONLY; ```. The sample was chosen kinda at random , is a CHM pseudo diploid sample but you could use an alternative. Please change profiling port and output file. On the profiling machine (presumably your laptop or desktop) you need to install JProfiler (Broad owns a license for that).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5233:779,test,test,779,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5233,1,['test'],['test']
Testability,"Program.runTool(CommandLineProgram.java:138); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:192); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:211); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:203); at org.broadinstitute.hellbender.Main.main(Main.java:289); ```; #### Steps to reproduce; `gatk HaplotypeCaller -L chr22 -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -I cram/HG00096.final.cram -O test.g.vcf.gz`. The cram is HG0096.final.cram found here:. https://www.internationalgenome.org/data-portal/data-collection/30x-grch38. #### Expected behavior; When I run an earlier version v4.1.7.0, it runs without an error.... ```; gatk HaplotypeCaller -L chr22 -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -I cram/HG00096.final.cram -O test.g.vcf.gz; Using GATK jar /share/pkg.7/gatk/4.1.7.0/install/bin/gatk-package-4.1.7.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /share/pkg.7/gatk/4.1.7.0/install/bin/gatk-package-4.1.7.0-local.jar HaplotypeCaller -L chr22 -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -I cram/HG00096.final.cram -O test.g.vcf.gz; 14:40:45.497 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/pkg.7/gatk/4.1.7.0/install/bin/gatk-package-4.1.7.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Feb 10, 2021 2:40:45 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 14:40:45.786 INFO HaplotypeCaller - ------------------------------------------------------------; 14:40:45.787 INFO Haplotyp",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7076:5431,test,test,5431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7076,1,['test'],['test']
Testability,"Provided Travis tests pass, does this still have your :+1: @jamesemery ? The ReblockGVCF tool had a less elegant MQ solution so now I'm having it output both versions so that we don't need to re-reprocess the gnomAD v3 GVCFs.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4969#issuecomment-427444343:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4969#issuecomment-427444343,1,['test'],['tests']
Testability,Pulled the HaplotypeCallerIntegration tests into a common interface between spark and non-spark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5451:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5451,1,['test'],['tests']
Testability,Push failed running the WDL test... I think it was just a hiccup. Re-running.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3257#issuecomment-314885776:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3257#issuecomment-314885776,1,['test'],['test']
Testability,Pushed a commit that fixes the BigQueryUtilsUnitTest failure by upgrading several of our other Google dependencies. This may cause failures in other parts of our test suite -- we shall see.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7700#issuecomment-1051087548:162,test,test,162,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7700#issuecomment-1051087548,1,['test'],['test']
Testability,"Pushed needed updates to test data here, will merge once tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2163#issuecomment-246826685:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2163#issuecomment-246826685,2,['test'],"['test', 'tests']"
Testability,Pushing MLLib down to public to make it easier for people to use with GATK4. Took SVD along for the ride (to test that it works).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1846:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1846,1,['test'],['test']
Testability,Put Spark tests in a 'spark' group so they don't conflict with Spark Dataflow,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/879:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/879,1,['test'],['tests']
Testability,Put expected outputs for benchmark data online and include it in the benchmark documents,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2109:25,benchmark,benchmark,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2109,2,['benchmark'],['benchmark']
Testability,Put expected outputs for benchmark data online somewhere,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1913:25,benchmark,benchmark,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1913,1,['benchmark'],['benchmark']
Testability,"Putting this out for early review as I slowly continue to test the changes. 'Hide whitespace' highly recommended when viewing the diffs due to PEP8-fueled horizontal whitespace fixes in a couple of Python scripts. <img width=""873"" alt=""Screen Shot 2022-08-30 at 8 31 37 AM"" src=""https://user-images.githubusercontent.com/10790523/187438182-d1e0fc8e-88bd-44b8-a286-37efb8aa9933.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8006:58,test,test,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8006,1,['test'],['test']
Testability,Python tools do not show log messages unless --verbosity DEBUG,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4629:25,log,log,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4629,1,['log'],['log']
Testability,"QandDP,Number=2,Type=Integer,Description=""Raw data (sum of squared MQ and total depth) for improved RMS Mapping Quality calculation. Incompatible with deprecated RAW_MQ for; mulation."">; ##INFO=<ID=ReadPosRankSum,Number=1,Type=Float,Description=""Z-score from Wilcoxon rank sum test of Alt vs. Ref read position bias"">. ###and this is the tag for gatk 4.2; ##fileformat=VCFv4.2; ##ALT=<ID=NON_REF,Description=""Represents any possible alternative allele at this location"">; ##FORMAT=<ID=AD,Number=R,Type=Integer,Description=""Allelic depths for the ref and alt alleles in the order listed"">; ##FORMAT=<ID=DP,Number=1,Type=Integer,Description=""Read depth"">; ##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=""Genotype quality"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; ##FORMAT=<ID=MIN_DP,Number=1,Type=Integer,Description=""Minimum DP observed within the GVCF block"">; ##FORMAT=<ID=PGT,Number=1,Type=String,Description=""Physical phasing haplotype information, describing how the alternate alleles are phased in relation to one another"">; ##FORMAT=<ID=PID,Number=1,Type=String,Description=""Physical phasing ID information, where each unique ID within a given sample (but not across samples) connects records within a phasing gr; oup"">; ##FORMAT=<ID=PL,Number=G,Type=Integer,Description=""The phred-scaled genotype likelihoods rounded to the closest integer"">; ##FORMAT=<ID=SB,Number=4,Type=Integer,Description=""Per-sample component statistics which comprise the Fisher's Exact Test to detect strand bias"">; ##INFO=<ID=BaseQRankSum,Number=1,Type=Float,Description=""Z-score from Wilcoxon rank sum test of Alt Vs. Ref base qualities"">; ##INFO=<ID=ClippingRankSum,Number=1,Type=Float,Description=""Z-score From Wilcoxon rank sum test of Alt vs. Ref number of hard clipped bases"">; ##INFO=<ID=DP,Number=1,Type=Integer,Description=""Combined depth across samples"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""Stop position of the interval"">; ##INFO=<ID=ExcessHet,Number=1,Type=Float,Des",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8574#issuecomment-1793390789:16355,Test,Test,16355,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8574#issuecomment-1793390789,2,"['Test', 'test']","['Test', 'test']"
Testability,QualityScoreDistribution on Spark + tests for it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/997:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/997,1,['test'],['tests']
Testability,Question: could it be possible to change the logging to sfl4j?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2176:45,log,logging,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2176,1,['log'],['logging']
Testability,Quickstart based integration test [VS-357],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7812:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7812,1,['test'],['test']
Testability,"R addresses two phasing bugs, https://github.com/broadinstitute/gatk/issues/6463 and https://github.com/broadinstitute/gatk/issues/6845. https://github.com/broadinstitute/gatk/issues/6463 identified a bug in the phasing algorithm which caused the wrong phase information to be output for scenarios where the first variant in a phase set is homozygous variant and it is followed by het variants in opposite phase. Without this change the het variants were incorrectly placed on the same phase strand because the phase set was tied to the hom var variant, and the algorithm assumed that each het variant could be put in the same phase strand as it because it was on all haplotypes. I've modified the algorithm to keep track, for variants that occur on all haplotypes, of which of the haplotypes have already been used for phasing an upstream ""comp"" variant so that further downstream variants can be checked against the remaining set. https://github.com/broadinstitute/gatk/issues/6845 showed an example of phase sets being disrupted by the presence of an alternate haplotype that supported an additional, uncalled, variant in the region. In this case there was an alternate haplotype supported by two reads that supported a SNP downstream of two pairs of SNPs in alternate phase. The presence of an additional haplotype causes the phasing algorithm to break the phase sets in the region. I've modified the algorithm to only use haplotypes that support the alternate alleles present in called variants in phasing by modifying the number that we pass as `AssemblyBasedCallerUtils.constructPhaseSetMapping()`'s `totalAvailableHaplotypes` parameter. In my opinion this ; fix produces output that is still correct and is much easier to understand (since it only depends on sites that are visible in the output VCF), but if anyone objects to this change please let me know. . Non-test code changes for this PR are in two different commits to try to make it easier to understand the scope of the two changes.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7019:1879,test,test,1879,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7019,1,['test'],['test']
Testability,R0FUS1JlYWRBZGFwdGVyLmphdmE=) | `89.423% <66.667%> (-0.333%)` | `126 <0> (+1)` | |; | [...s/spark/ParallelCopyGCSDirectoryIntoHDFSSpark.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9QYXJhbGxlbENvcHlHQ1NEaXJlY3RvcnlJbnRvSERGU1NwYXJrLmphdmE=) | `0% <0%> (-80.612%)` | `0% <0%> (-19%)` | |; | [...institute/hellbender/utils/gcs/GATKGCSOptions.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvR0FUS0dDU09wdGlvbnMuamF2YQ==) | `0% <0%> (-66.667%)` | `0% <0%> (ø)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `41.216% <0%> (-32.432%)` | `26% <0%> (-8%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/3223?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGV,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3223#issuecomment-313637587:2152,test,test,2152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3223#issuecomment-313637587,1,['test'],['test']
Testability,README: R setup for running tests may need OS X update,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5389:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5389,1,['test'],['tests']
Testability,REORDERED.gtf; 14:24:34.591 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/gencode.v34.pc_transcripts.fa -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/gencode/hg38/gencode.v34.pc_transcripts.fa; 14:24:34.599 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/acmg59_test_cleaned.txt -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/acmg_rec/hg38/acmg59_test_cleaned.txt; 14:24:34.608 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/clinvar_20180429_hg38.vcf -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/clinvar/hg38/clinvar_20180429_hg38.vcf; 14:24:34.614 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/lmm_known/hg38/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf; 14:24:34.617 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6926:5984,test,test,5984,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6926,1,['test'],['test']
Testability,"ROR The class ""org.apache.log4j.Appender"" was loaded by; log4j:ERROR [sun.misc.Launcher$AppClassLoader@6d21714c] whereas object of type; log4j:ERROR ""org.apache.log4j.ConsoleAppender"" was loaded by [org.apache.spark.util.ChildFirstURLClassLoader@6ee12bac].; log4j:ERROR Could not instantiate appender named ""console"".; log4j:ERROR A ""org.apache.log4j.ConsoleAppender"" object is not assignable to a ""org.apache.log4j.Appender"" variable.; log4j:ERROR The class ""org.apache.log4j.Appender"" was loaded by; log4j:ERROR [sun.misc.Launcher$AppClassLoader@6d21714c] whereas object of type; log4j:ERROR ""org.apache.log4j.ConsoleAppender"" was loaded by [org.apache.spark.util.ChildFirstURLClassLoader@6ee12bac].; log4j:ERROR Could not instantiate appender named ""console"".; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; log4j:WARN No appenders could be found for logger (org.apache.spark.SparkContext).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 09:14:26.202 INFO PrintReadsSpark - Shutting down engine; [June 8, 2017 9:14:26 AM CST] org.broadinstitute.hellbender.tools.spark.pipelines.PrintReadsSpark done. Elapsed time: 0.21 minutes.; Runtime.totalMemory()=494927872; ***********************************************************************. A USER ERROR has occurred: Couldn't write file /user/yaron/output.bam because writing failed with exception /user/yaron/output.bam.parts/_SUCCESS: Unable to find _SUCCESS file. ***********************************************************************; org.broadinstitute.hellbender.exceptions.UserException$CouldNotCreateOutputFile: Couldn't write file /user/yaron/output.bam because writing failed with exception /user/yaron/output.bam.parts/_SUCCESS: Unable to find _SUCCESS file; at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.writeReads(GATKSparkTool.java:255); at org.broadinstitute.hellbender.tools.spark.pipelines.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3066:3974,log,logging,3974,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3066,1,['log'],['logging']
Testability,"ROT test run finished</summary> <pre lang=""json""> ; {; ""run_id"": ""e296eb66-95b2-428a-a31e-3118047b197d"",; ""test_id"": ""15973a95-055a-4540-9590-ce40f34411f5"",; ""name"": ""GATK HaplotypeCaller vs Nightly Test_run_2022-02-23 19:59:31.084286796 UTC"",; ""status"": ""testfailed"",; ""test_input"": {; ""VariantCallingCarrot.agg_preemptible_tries"": 3,; ""VariantCallingCarrot.base_file_name"": ""NA24385"",; ""VariantCallingCarrot.break_bands_at_multiples_of"": 100000,; ""VariantCallingCarrot.calling_interval_list"": ""gs://emeryj-testing/CarrotData/wgs_calling_regions.hg38.interval_list"",; ""VariantCallingCarrot.contamination"": 0.0383312,; ""VariantCallingCarrot.final_vcf_base_name"": ""NA24385"",; ""VariantCallingCarrot.gatk_docker"": ""image_build:gatk|ce0a811376d45c6ea62b40e78abffcd37c0317b4"",; ""VariantCallingCarrot.haplotype_scatter_count"": 50,; ""VariantCallingCarrot.input_bam"": ""gs://emeryj-testing/CarrotData/NA24385_NA24385_O1D1_SM-G947H_v1_NS.bam"",; ""VariantCallingCarrot.input_bam_index"": ""gs://emeryj-testing/CarrotData/NA24385_NA24385_O1D1_SM-G947H_v1_NS.bai"",; ""VariantCallingCarrot.ref_dict"": ""gs://emeryj-testing/CarrotData/Homo_sapiens_assembly38.dict"",; ""VariantCallingCarrot.ref_fasta"": ""gs://emeryj-testing/CarrotData/Homo_sapiens_assembly38.fasta"",; ""VariantCallingCarrot.ref_fasta_index"": ""gs://emeryj-testing/CarrotData/Homo_sapiens_assembly38.fasta.fai"",; ""VariantCallingCarrot.use_gatk3_haplotype_caller"": true; },; ""eval_input"": {; ""BenchmarkComparison.confidenceInterval"": ""gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/HG002_GRCh38_GIAB_1_22_v4.2.1_benchmark_noinconsistent.bed"",; ""BenchmarkComparison.controlLabel"": ""CONTROLSNAPSHOT2018HG002"",; ""BenchmarkComparison.controlVcf"": ""test_output:VariantCalling.control_vcf"",; ""BenchmarkComparison.controlVcfIndex"": ""test_output:VariantCalling.control_vcf_index"",; ""BenchmarkComparison.evalLabel"": ""TESTSNAPSHOT2018HG002"",; ""BenchmarkComparison.evalVcf"": ""test_output:VariantCalling.output_vcf"",; ""BenchmarkComparison.evalVcfIndex"": ""te",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1049165952:1009,test,testing,1009,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7651#issuecomment-1049165952,1,['test'],['testing']
Testability,"RROR; 01:40:14.522 WARN NativeLibraryLoader - Unable to load libgkl_pairhmm_fpga.so from native/libgkl_pairhmm_fpga.so (/tmp/libgkl_pairhmm_fpga17703278887667828152.so: libgkl_pairhmm_shacc.so: cannot open shared object file: No such file or directory); #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007fe1a5cd00f2, pid=6969, tid=6997; #; # JRE version: OpenJDK Runtime Environment (11.0.2+9) (build 11.0.2+9); # Java VM: OpenJDK 64-Bit Server VM (11.0.2+9, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # V [libjvm.so+0x8fd0f2] jni_GetByteArrayElements+0x72; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P"" (or dumping to /home/travis/build/broadinstitute/gatk/core.6969); #; # An error report file with more information is saved as:; # /home/travis/build/broadinstitute/gatk/hs_err_pid6969.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #; Starting process 'Gradle Test Executor 2'. Working directory: /home/travis/build/broadinstitute/gatk Command: /usr/local/lib/jvm/openjdk11/bin/java -Dgatk.spark.debug -Dorg.gradle.native=false -Dsamjdk.compression_level=2 -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -javaagent:build/tmp/expandedArchives/org.jacoco.agent-0.8.4.jar_982888894296538c98d7324f3ca78d8f/jacocoagent.jar=destfile=build/jacoco/test.exec,append=true,inclnolocationclasses=false,dumponexit=true,output=file,jmx=false @/tmp/gradle-worker-classpath15215090933788021522txt -Xms500M -Xmx3500M -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -ea worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Test Executor 2'; Successfully started process 'Gradle Test Executor 2'. Gradle Test Executor 2 started executing tests. > Task :test; ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607332088:1673,log,log,1673,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-607332088,1,['log'],['log']
Testability,R_SAMTOOLS : false; 23:24:49.936 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 23:24:49.936 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 23:24:49.937 INFO Funcotator - Deflater: IntelDeflater; 23:24:49.937 INFO Funcotator - Inflater: IntelInflater; 23:24:49.937 INFO Funcotator - GCS max retries/reopens: 20; 23:24:49.937 INFO Funcotator - Using google-cloud-java patch 6d11bef1c81f885c26b2b56c8616b7a705171e4f from https://github.com/droazen/google-cloud-java/tree/dr_all_nio_fixes; 23:24:49.937 WARN Funcotator - . !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. Warning: Funcotator is a BETA tool and is not yet ready for use in production. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. 23:24:49.937 INFO Funcotator - Initializing engine; 23:24:51.025 INFO FeatureManager - Using codec VCFCodec to read file file:///omics/chatchawit/sm/out/test.vcf; 23:24:51.169 INFO Funcotator - Done initializing engine; log4j:WARN No appenders could be found for logger (org.broadinstitute.hellbender.tools.funcotator.dataSources.DataSourceUtils).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 23:24:51.204 INFO FeatureManager - Using codec VCFCodec to read file file:///omics/chatchawit/bundle/dsrc/dbsnp/hg38/hg38_All_20170710.vcf.gz; 23:24:51.451 INFO FeatureManager - Using codec XsvLocatableTableCodec to read file file:///omics/chatchawit/bundle/dsrc/oreganno/hg38/oreganno.tsv; 23:24:51.535 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///omics/chatchawit/bundle/dsrc/gencode/hg38/gencode.v27.chr_patch_hapl_scaff.annotation.REORDERED.gtf; WARNING	2018-05-23 23:24:53	AsciiLineReader	Creating an indexable source for an AsciiFeatureCodec using a stream that is neither a PositionalBufferedStream nor a BlockCompressedInputStream; 23:25:09.380 INFO ProgressMeter - Starting traversal; 23:25:09.381 ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4712#issuecomment-391421032:2873,log,logger,2873,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4712#issuecomment-391421032,1,['log'],['logger']
Testability,"Ran some comparisons between funcotator and oncotator using the following data sources against a set of ~70 variants (see attached):; - achilles; - cancer_gene_census; - clinvar; - cosmic; - cosmic_fusion; - cosmic_tissue; - dna_repair_genes; - familial; - gencode; - gencode_xhgnc (Only Funcotator had this data source); - gencode_xrefseq; - hgnc; - oreganno; - simple_uniprot. While the details of the results were not compared between the two tools (unit tests are designed to do this comparison), the tools runtimes were captured (using the BSD `time` utility) over 10 iterations of annotating this data set (VCF->VCF). Full results set is attached, but the long and short of it is that depending on which timing you count by (real/user/system/user+system) **Funcotator is faster than Oncotator by anywhere from 8% to 57% and has not had any performance tuning.**. I have attached the timing measurements, as well as a gzip containing the inputs and the script I used to collect the timing information:. [benchmarking_funcotator_oncotator.tar.gz](https://github.com/broadinstitute/gatk/files/1601085/benchmarking_funcotator_oncotator.tar.gz); [BENCHMARK_funcotator_oncotator.xlsx](https://github.com/broadinstitute/gatk/files/1601079/BENCHMARK_funcotator_oncotator.xlsx)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3857#issuecomment-355068642:458,test,tests,458,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3857#issuecomment-355068642,1,['test'],['tests']
Testability,"Ran tests with JOIN query vs. IN query and performance/bytes scanned appeared identical. Going with IN query because it's more readable (to me, at least).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7762#issuecomment-1092333101:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7762#issuecomment-1092333101,1,['test'],['tests']
Testability,"Ran this jar on the MSSNG call set and compared one of the output VCFs with that generated using the original (default) jar - differences found were as expected:. ```; wm944-c33:gatk ggrant$ diff mssng_6_new_updated_header.vcf mssng_6_original.vcf ; 1a2; > ##FILTER=<ID=EXCESS_ALLELES,Description=""Site has an excess of alternate alleles based on the input threshold (default is 6)"">; 3a5; > ##FILTER=<ID=NAY,Description=""Considered a NAY in the Yay, Nay, Grey table"">; 17a20,21; > ##INFO=<ID=END,Number=1,Type=Integer,Description=""Stop position of the interval"">; > ##INFO=<ID=ExcessHet,Number=1,Type=Float,Description=""Phred-scaled p-value for exact test of excess heterozygosity"">; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7786#issuecomment-1100185472:652,test,test,652,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7786#issuecomment-1100185472,1,['test'],['test']
Testability,"Randomly noticed this test that was disabled long ago. Between https://github.com/samtools/htsjdk/pull/704 and https://github.com/samtools/htsjdk/pull/906, it now works.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3507:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3507,1,['test'],['test']
Testability,"Rationale for engine changes:; This tool opens a large number of feature files (TSVs, not VariantContexts) and iterates over them simultaneously. No querying, just a single pass through each.; Issue 1: When a feature file lives in the cloud, it takes unacceptably long (several seconds, typically) to initialize it. A few seconds doesn't seem like a long time, but when there are large numbers of feature files to open, it adds up. This is caused by a large number of codecs (mostly the vcf-processing codecs) opening and reading the first few bytes of the file in the canDecode method. To avoid this I've reversed the order in which we test each codec, checking first if it produces the correct subtype of Feature, and only then calling canDecode. If you don't know what specific subtype you need, you can just ask for any Feature by passing Feature.class. It's much faster that way.; Issue 2: Each open feature source soaks up a huge amount of memory. That's because text-based feature reading is optimized for VCFs, which can have enormously long lines. So huge buffers are allocated. The problem is compounded for cloud-based feature files for which we allocate a large cloud prefetch buffer. (Though that feature can be turned off, which helps a little.) But the biggest memory hog is the TabixReader, which always reads in the index, regardless of whether it's used or not. Tabix indices are very large. To avoid this, I've created a smaller, simpler FeatureReader subclass called a TextFeatureReader that loads the index only when necessary. The revisions allow the new tool to run using an order of magnitude less memory. Faster, too.; Issue 3: The code in FeatureDataSource that creates a FeatureReader is brittle, and tests for various subclasses. To allow use of the new TextFeatureReader, I added a FeatureReaderFactory interface that allows one to ask the codec for an appropriate FeatureReader.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8031#issuecomment-1284340770:637,test,test,637,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8031#issuecomment-1284340770,4,['test'],"['test', 'tests']"
Testability,"Rationale: certain evaluators use a pedigree. This PR is a minor change that lets VariantEvalArgCollection supply the PedigreeValidationType. It defaults to the current behavior, which is to always use STRICT. It includes an integration test to cover this feature.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7240:237,test,test,237,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7240,1,['test'],['test']
Testability,Rc test vat sizes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7658:3,test,test,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7658,1,['test'],['test']
Testability,Rc vs 1365 hatcher testing parquet,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8845:19,test,testing,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8845,1,['test'],['testing']
Testability,Re-assigning to @jonn-smith and @jamesemery to have a second look at this old PR as part of their HaplotypeCaller testing work this quarter.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3680#issuecomment-453579439:114,test,testing,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3680#issuecomment-453579439,1,['test'],['testing']
Testability,Re-enable BED test in IndexFeatureFile.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3507:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3507,1,['test'],['test']
Testability,Re-enable BaseRecalibratorDataflowIntegrationTest.testBQSRFailWithIncompatibleReference once sequence dictionary validation is in,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/625:50,test,testBQSRFailWithIncompatibleReference,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/625,1,['test'],['testBQSRFailWithIncompatibleReference']
Testability,Re-enable IndexFeatureFile and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3060:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3060,1,['test'],['tests']
Testability,Re-enable IndexFeatureFile test for uncompressed BCF.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6716:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6716,1,['test'],['test']
Testability,Re-enable disabled tests in RequesterPaysIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7763:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7763,1,['test'],['tests']
Testability,Re-enable htsget tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6668:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6668,1,['test'],['tests']
Testability,Re-enable htsget tests once the server problems are fixed,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6640:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6640,1,['test'],['tests']
Testability,Re-enable htsjdk-dependent CRAM tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1255:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1255,1,['test'],['tests']
Testability,Re-enable openPrivateFileWithExplicitCredentials test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2879:49,test,test,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2879,1,['test'],['test']
Testability,"Re-enable tests for htsget now that the reference server is back to a stable version. * Some tests were disabled due to issues with the htsget reference server, now that it's back to running an older stable version; the tests which work on that version are re-enabled. * Partial fix for #6640 another commit will be needed when the server is upgraded to support fields/tags. The field test had to be disabled because it doesn't seem like the current server version supports the parameter correctly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6668:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6668,4,['test'],"['test', 'tests']"
Testability,Re-enable the disabled tests in RequesterPaysIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7810:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7810,1,['test'],['tests']
Testability,Re-enable this test once the sequence dictionary work in https://github.com/broadinstitute/hellbender/tree/ek_seqdict_101 is merged. Requires trivial changes to dataflow BQSR.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/625:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/625,1,['test'],['test']
Testability,"Re-factored common tasks and battled travis again. A cloud test failed in the pr build, but I think it is fleeting, we didn't touch that code. @ldgauthier back to you.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4774#issuecomment-418509152:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4774#issuecomment-418509152,1,['test'],['test']
Testability,"Re-opening this one, since the ""craft test case"" part of this ticket has not yet been done -- we've just moved to an updated snapshot.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3118#issuecomment-316801259:38,test,test,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3118#issuecomment-316801259,1,['test'],['test']
Testability,"Re-tested with the latest version, the bug remained: ; Affected version(s); 4.4.0.0",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8416#issuecomment-1642293489:3,test,tested,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8416#issuecomment-1642293489,1,['test'],['tested']
Testability,Read Orientation Model test case where the variant is no longer emitted in the vcf,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5091:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5091,1,['test'],['test']
Testability,"Read count logging for PathSeq Filter, Score, and Pipeline tools",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3611:11,log,logging,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3611,1,['log'],['logging']
Testability,"Read counts at different stages of the PathSeq pipeline are now logged using `MetricsFile`. The filter metrics contains the number of reads remaining and number of reads filtered at each step (after filtering pre-aligned reads, low quality/complexity reads, host reads, and duplicates). The score metrics give number of pathogen-mapped and unmapped reads. These metrics are now validated in the PathSeq integration tests, which have also been refactored to use DataProviders instead of separate functions.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3611:64,log,logged,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3611,2,"['log', 'test']","['logged', 'tests']"
Testability,Read likelihood calculation engine and some test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/786:44,test,test,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/786,1,['test'],['test']
Testability,ReadFilter plugin tests does not live in the same package than the plugin itself,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2532:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2532,1,['test'],['tests']
Testability,ReadThreadingAssemblerUnitTest contains identical tests with different names,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1081:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1081,1,['test'],['tests']
Testability,"ReadWalker: initial walker interface with support for iteration over reads with optional reference; contextual information. ```; PrintReadsWithReference is provided as an example ReadWalker; ```. ReadsDataSource: full support for iteration and queries over multiple SAM/BAM files, optionally; bounded by intervals. ReferenceDataSource: support for targeted queries by interval (full iteration over the reference not; yet supported). Comprehensive unit tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/112:452,test,tests,452,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/112,1,['test'],['tests']
Testability,"Reading from GenomicsDB fails when a some records containing spanning deletion alleles are imported into a workspace. Not all records seem to cause this to fail; I haven't been able to figure out what specific properties of the records cause the error. Here's the contents (minus header) of a VCF file that causes the error:. ```; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NA12878; 20	10097436	.	CTTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTT	C,<NON_REF>	1054.73	.	BaseQRankSum=1.820;ClippingRankSum=0.000;DP=89;ExcessHet=3.0103;MLEAC=1,0;MLEAF=0.500,0.00;MQRankSum=-6.464;RAW_MQ=262143.00;ReadPosRankSum=-3.231	GT:AD:DP:GQ:PL:SB	0/1:57,32,0:89:99:1092,0,2241,1263,2338,3601:23,34,11,21; 20	10097437	.	TTTTC	*,T,<NON_REF>	2089.73	.	DP=76;ExcessHet=3.0103;MLEAC=1,1,0;MLEAF=0.500,0.500,0.00;RAW_MQ=217330.00	GT:AD:DP:GQ:PL:SB	1/2:0,32,23,0:55:99:2127,940,1799,1195,0,1125,2201,1453,1262,2642:0,0,16,39; ```. Steps to reproduce:. ```; ./gatk GenomicsDBImport -R src/test/resources/large/human_g1k_v37.20.21.fasta -L 20 -V test_gdb_import.vcf.gz -genomicsdb-workspace-path spanDelWorkspace; ./gatk SelectVariants -V gendb://spanDelWorkspace -R src/test/resources/large/human_g1k_v37.20.21.fasta -O test.vcf -L 20; ```. Error:. ```; java.lang.IllegalArgumentException: Duplicate allele added to VariantContext: T; at htsjdk.variant.variantcontext.VariantContext.makeAlleles(VariantContext.java:1490); at htsjdk.variant.variantcontext.VariantContext.<init>(VariantContext.java:380); at htsjdk.variant.variantcontext.VariantContextBuilder.make(VariantContextBuilder.java:494); at htsjdk.variant.variantcontext.VariantContextBuilder.make(VariantContextBuilder.java:488); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:132); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:58); at com.intel.genomicsdb.GenomicsDBFeatureReader$GenomicsDBFeatureIterator.next(GenomicsDBFeatureReader.java:357); at com.intel.genomicsdb.GenomicsDBFeatureReader$GenomicsDBFeatureIterator.next(GenomicsDBFeatureReader.java",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4716:959,test,test,959,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4716,1,['test'],['test']
Testability,"ReadsDataSource uses the headers for individual bams when instantiating the individual iterators for each bam, but uses the merged header everywhere else when multiple bams are present. We need to verify that there are no issues/bugs related to contig indices changing in the merged header. There shouldn't be, since we use contig names everywhere except `SamReaderQueryingIterator` (where you definitely want the contig index to match the index from the bam file in question), but it doesn't hurt to spend a little time (no more than 1-2 days) double-checking and testing the case of reading multiple bams where the contig indices in the final merged header differ from the indices in the original files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1674:565,test,testing,565,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1674,1,['test'],['testing']
Testability,ReadsPipelineSpark Jenkins test fails,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5545:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5545,1,['test'],['test']
Testability,ReadsPipelineSpark expanded and benchmarked: from BWA -> HaplotypeCaller,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1646:32,benchmark,benchmarked,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1646,1,['benchmark'],['benchmarked']
Testability,ReadsPipelineSpark needs an integration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1162:40,test,test,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1162,1,['test'],['test']
Testability,ReadsPipelineSpark: null point exception during MannWhitney permutation test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4265:72,test,test,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4265,1,['test'],['test']
Testability,"ReadsSparkSource uses SAMHeaderReader.readSAMHeaderFrom to get the header from the input file, but it returns a bogus header object when called on an ADAM file (its actually htsjdk which is happily returning the header). Subsequent setHeaderStrict calls fail when using this header. The testADAM method should be re-enabled when there is a resolution for this.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1540:287,test,testADAM,287,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1540,1,['test'],['testADAM']
Testability,"Ready for second pass review, @lbergelson. Now the implementation is much more simple than the previous one, and I added unit tests for the codec.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1862#issuecomment-224670233:126,test,tests,126,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1862#issuecomment-224670233,1,['test'],['tests']
Testability,"Really we need some tests for gs:// files in ReadsSparkSinkUnitTest - e.g. a GCS version of testWritingToFileURL. This needs knowledge of how to configure the Hadoop GCS connector (outside dataproc), which I lack. Perhaps someone else knows how to do this?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2306#issuecomment-270615942:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2306#issuecomment-270615942,2,['test'],"['testWritingToFileURL', 'tests']"
Testability,"Reasoning:; - task will not recreate/overwrite table if it exists; - task does not take long, so unnecessary runs are not costly in time or $; - when not volatile, Beta users need to run with call-caching off if they re-run the pipeline. run where tables already existed: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/64782949-33dd-41ef-b3f7-5e88cc5a5dcc. integration run: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/9e79ef7f-9e64-46c7-8749-83909a5d423f (it failed the end tests, but the tables were created/populated as expected)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8765:544,test,tests,544,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8765,1,['test'],['tests']
Testability,Reassigning to @jamesemery to add the needed tests.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3982#issuecomment-358031009:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3982#issuecomment-358031009,1,['test'],['tests']
Testability,"Rebase/squash and addressed all comments. `CLOUD=mandatory` is not going to pass, but the no-cloud test will. Back to you @droazen. Thanks a lot for reviewing @droazen and @fleharty.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2154#issuecomment-256897676:99,test,test,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2154#issuecomment-256897676,1,['test'],['test']
Testability,Rebased - waiting for test passing and hopefully you can hit merge @droazen!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4469#issuecomment-415833242:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4469#issuecomment-415833242,1,['test'],['test']
Testability,Rebased -- should still pass tests.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2657#issuecomment-319729405:29,test,tests,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2657#issuecomment-319729405,1,['test'],['tests']
Testability,"Rebased and squashed on top of sl_wgs_acnv_headers_docs. Here is the log of squashed commits, for reference:. ````; commit 3eda4b18888f38249be39f99901d8453a4de50d6; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Thu Dec 28 14:56:27 2017 -0500. updated command lines for WDL tests for C29. commit 7ce1369943cce4ae9cfb5e96455d18d3960e9b77; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Thu Dec 28 13:30:21 2017 -0500. use C29 and decrease gcnv_max_training_epochs. commit 68772cba486b44ebc8cf8bfc2b600c1e8a406c61; Author: Mehrtash Babadi <mehrtash@broadinstitute.org>; Date: Sun Dec 17 19:20:05 2017 +0330. documentation update of GermlineCNVCaller and DetermineGermlineContigPloidy. commit c032281f8c43a80e4ec8cb96eb66397ad2acf9b7; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Fri Dec 15 18:14:35 2017 -0500. Fixed imr kebab case in WDL, moved argument classes, removed GenomeLocParser, fixed up gCNV WDL readme. commit be84a804f6ab6fbb815995db9c116d1db950ab8b; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Tue Dec 12 13:55:08 2017 -0500. removed extra comma in gCNV Case WDL test JSON. commit cb379b866d425f12f5525ecb28ad0b636a528d44; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Tue Dec 12 12:58:59 2017 -0500. added missing cpu parameters to gCNV Case WDL tasks. commit eed85f6c70f4a7f15e0765b5f15a1bf8541c151e; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Tue Dec 12 11:26:31 2017 -0500. disabled some gCNV WDL tests. commit 6d8ca07fef41518b5b157fb9a214d4536c617156; Author: Samuel Lee <lee.samuel.k@gmail.com>; Date: Tue Dec 12 10:54:54 2017 -0500. fixed DenoiseReadCountsIntegrationTest files. commit adfbef12f2ab90f93b49a4f786979549648e1f22; Author: Mehrtash Babadi <mehrtash@broadinstitute.org>; Date: Mon Dec 11 02:22:56 2017 -0500. removed CNV evaluation code from this branch. commit 18c8d31f39a1964474c5d7b12ee8cbfafc4ac9e2; Author: Mehrtash Babadi <mehrtash@broadinstitute.org>; Date: Sun Dec 10 00:19:58 2017 -0500. GS VCF parser outputs dict for samples ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-354805598:69,log,log,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-354805598,4,"['log', 'test']","['log', 'tests']"
Testability,"Rebased and tweaked a few package versions, some of which are slightly different than those currently in the base (as is the version of R). Looks like `build-essential` is all you need in the base image for tests to not fallback on slow implementations, but we might want to double check that native dependencies are correct. Not really sure how urgent this is, and I have to admit I've lost track of the remaining ways R can break our builds. The possibility of a bad Travis cache (which I think was a common issue in the past) is now prevented by #6454, right?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-598996311:207,test,tests,207,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-598996311,1,['test'],['tests']
Testability,Rebased and updated -- will merge once tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3911#issuecomment-356119436:39,test,tests,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3911#issuecomment-356119436,1,['test'],['tests']
Testability,"Rebased on current master, and added a second commit to reflect the new test results that are presumably related to https://github.com/broadinstitute/gatk/pull/7394. I assume that the original issue (overwriting the expected results) masked the fact that these test results changed when the tests were run for https://github.com/broadinstitute/gatk/pull/7394.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7563#issuecomment-975866635:72,test,test,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7563#issuecomment-975866635,3,['test'],"['test', 'tests']"
Testability,Rebased this to do some testing with current master.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4902#issuecomment-439202268:24,test,testing,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4902#issuecomment-439202268,1,['test'],['testing']
Testability,Rebasing to re-run all tests as a final check before I merge.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7585#issuecomment-1108954026:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7585#issuecomment-1108954026,1,['test'],['tests']
Testability,"Rebasing, squashing and if all goes well with test merging.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6055#issuecomment-562724386:46,test,test,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6055#issuecomment-562724386,1,['test'],['test']
Testability,"Recently ran into an issue where spark.yarn.executor.memoryOverhead is not being set. . Running Cromwell v29 on DataProc (image version 1.1) with the following launch command in my WDL:; ````; set -eu; export GATK_GCS_STAGING=${jarCacheBucket}; ${gatk} \; PathSeqPipelineSpark \; ...; -- \; --spark-runner GCS \; --cluster ${clusterName} \; --driver-memory 8G \; --executor-memory 32G \; --num-executors 1 \; --executor-cores 30 \; --conf spark.yarn.executor.memoryOverhead=132000; ````; I get the following error:; ```; org.apache.spark.SparkException: Job aborted due to stage failure: Task 25 in stage 37.0 failed 4 times, most recent failure: Lost task 25.3 in stage 37.0 (TID 19238, mw-pathseq-w-3.c.broad-dsde-methods.internal): ExecutorLostFailure (executor 11 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 48.9 GB of 34 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; ```; In my Cromwell log I see the parameter is there:; ```; ...; Replacing spark-submit style args with dataproc style args. --cluster mw-pathseq --driver-memory 8G --executor-memory 32G --num-executors 1 --executor-cores 30 --; conf spark.yarn.executor.memoryOverhead=132000 -> --cluster mw-pathseq --properties spark.driver.userC; lassPathFirst=true,spark.io.compression.codec=lzf,spark.driver.maxResultSize=0,spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.kryoserializer.buffer.max=512m,spark.yarn.executor.memoryOverhead=600,spark.driver.memory=8G,spark.executor.memory=32G,spark.executor.instances=1,spark.execut",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4273:987,log,log,987,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4273,1,['log'],['log']
Testability,Reduce test suite runtime,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/969:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/969,1,['test'],['test']
Testability,Reduce the logging a bit.; Probably should make a PR directly into gatk master so that when we next merge gatk master changes we'll get this goodness?. Integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f8c38f97-7945-414f-9432-13b2f12138bb) (note failed one of the subtests for a random docker pull error); Example CreateFilterSet run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/b2e7eb86-e494-4891-885b-5a96cb1056b3),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8650:11,log,logging,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8650,1,['log'],['logging']
Testability,Reenable CRAM tests in GatherBamFilesIntegrationTest and SortSamIntegrationTests when htsjdk issue #365 fix is available,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1141:14,test,tests,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1141,1,['test'],['tests']
Testability,"RefAPISource support for multiple pages, with corresponding test code.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/869:60,test,test,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/869,1,['test'],['test']
Testability,"Refactor python code from extract dir into a scripts directory. Passing Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f85602d0-6dc5-49d6-82d1-eb58e9966021); Passing VAT Creation work [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/ddc7fcf9-5fb7-44e2-8117-721389d4f858), [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/0d705f21-3362-4890-b925-5bed2646fe4d), and [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/15cfe125-e700-44c8-b9d0-c3e98d7db4c0)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9017:84,Test,Test,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9017,1,['Test'],['Test']
Testability,Refactor the test suite on Github Actions to run faster,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7798:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7798,1,['test'],['test']
Testability,Refactored JointVcfFiltering WDL and expanded tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8074:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8074,1,['test'],['tests']
Testability,ReferenceConfidenceModel and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1442:29,test,tests,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1442,1,['test'],['tests']
Testability,"Regarding GenomicsDbImport with intervals, here is a quick test. Again, the thing I'm trying to evaluate is whether it matters how I chunk the genome for GenomicsDBImport->GenotypeGVCFs. Downstream of this, I would pass the workspace to GenotypeGVCFs, with --only-output-calls-starting-in-intervals. The concern is whether we have variants spanning the intervals of two jobs, and whether separating the jobs would impact calls. In this example, GenotypeGVCFs would run over 1:1050-1150. For example, if we had a multi-NT variant that spanned 1148-1052, we'd want that called correctly no matter what intervals were used for the jobs. I tried using running GenomicsDBImport with -L over a small region, or I ran SelectVariants on the gVCF first (which behaves a little differently), and then used that subset gVCF as input to GenomicsDBImport, where GenomicsDBImport is given the entire contig as the interval. The resulting workspaces will be slightly different, with the latter containing information over a wider region (GenomicsDBIport truncates start/end of the input records to just the target interval). . So if either of these workspaces is passed to GenotypeGVCFs, using --only-output-calls-starting-in-intervals and -L 1:1050-1150:. I think any upstream padding doesnt matter. If you have a multi-nucleotide polymorphism that starts upstream of 1050 but spans 1050, this job wouldnt be responsible for calling that. The prior job, which has an interval set upstream of this one should call it. I think GenomicsDbImport's behavior is fine here. If you have a multi-NT variant that starts within 1050-1150, but extends outside (i.e. deletion or insertion starting at 1148), this could be a problem. The GenomicsDB workspace created with the interval 1:1050-1150 lacks the information to score that, right? The workspace created using the more permissive SelectVariants->GenomicsDBImport contains that downstream information and presumably would make the same call as if GenotypeGVCFs was given ",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7968#issuecomment-1221558244:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7968#issuecomment-1221558244,2,['test'],['test']
Testability,"Regarding the non-Docker integration tests failing earlier today, I think this was because the R packages were added to the Travis cache in #3101. @cmnbroad cleared the cache to see if we could reproduce a compiler error introduced in #3934 on Travis (for the record, we could reproduce it on my local Ubuntu machine and gsa5, but not on Travis). This removed the cached getopt dependency, which then caused tests to fail. See #4246.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4209#issuecomment-359999441:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4209#issuecomment-359999441,4,['test'],['tests']
Testability,Regenerate invalid CRAM test files,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6018:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6018,1,['test'],['test']
Testability,"Regression test for #3163. A unit test was added in #3164, but we should add an integration test as well.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3181:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3181,3,['test'],['test']
Testability,Related issue <https://github.com/broadinstitute/gatk/issues/3669> from testing CRAM usage.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334825090:72,test,testing,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334825090,1,['test'],['testing']
Testability,Related to #3413. We have improvements for BAM compression in GKL and need an assortment of various types of BAM files to test the performance and compression ratio.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4249:122,test,test,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4249,1,['test'],['test']
Testability,"Related to VS-1395. On the PR to EchoCallset, Bec had a couple of minor suggestions. I folded them into that PR and am now adding them here to `ah_var_store`. Passing test run without a backslash on output_path [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/f02829f5-d546-4f54-85e6-e7ea6be5829e).; Passing test run with a backslash on output_path [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/3003841c-0e62-4ef6-bb37-6eeb038da9af).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8881:167,test,test,167,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8881,2,['test'],['test']
Testability,Remains to write the extra tests,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332044006:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2558#issuecomment-332044006,1,['test'],['tests']
Testability,Remove StreamingPythonExecutor testStderrOutput unit test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5097:31,test,testStderrOutput,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5097,2,['test'],"['test', 'testStderrOutput']"
Testability,Remove StrictBooleanConverter and test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2448:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2448,1,['test'],['test']
Testability,Remove all code paths in engine (and tests) that use an explicit Google API key,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2402:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2402,1,['test'],['tests']
Testability,"Remove all static dependencies of code outside the dataflow packages; on code inside the dataflow packages. With these changes, the codebase compiles when you delete the; engine.dataflow, tools.dataflow, and utils.dataflow packages from; both main and test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/982:252,test,test,252,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/982,1,['test'],['test']
Testability,Remove an excessively long-running test case in ReadsSparkSink,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1343:35,test,test,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1343,1,['test'],['test']
Testability,Remove exclusions from GenomicsDBImportIntegrationTest assertions,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2638:55,assert,assertions,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2638,1,['assert'],['assertions']
Testability,Remove redundant references from test data now that we have full-sized references,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5313:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5313,1,['test'],['test']
Testability,Remove test resources from the docker image,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3414:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3414,1,['test'],['test']
Testability,Remove travis R install and only run R tests on the Docker.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6454:39,test,tests,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6454,1,['test'],['tests']
Testability,"Remove unnecessary codecs, clean up and write tests for codecs we want to keep, and move all codecs to htsjdk",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/229:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/229,1,['test'],['tests']
Testability,Remove unnecessary data sources from tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5350:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5350,1,['test'],['tests']
Testability,"Remove unused VQSR ""aggregate"" arg that has no tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6809:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6809,1,['test'],['tests']
Testability,Remove/repair bogus CRAM test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1368:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1368,1,['test'],['test']
Testability,Removed GATK3.5 VCFs from HC integration test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7634:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7634,1,['test'],['test']
Testability,Removed incorrect logger from DepthOfCoverage.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6622:18,log,logger,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6622,1,['log'],['logger']
Testability,"Removed the `splitContextByReadGroup()`, simplified methods and testing exception thrown by `splitBySample()`. Back to you for review again, @akiezun.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1774#issuecomment-219648141:64,test,testing,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1774#issuecomment-219648141,1,['test'],['testing']
Testability,Removed undocumented mid-p correction to p-values in exact test of Hardy-Weinberg equilibrium and updated corresponding tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394,4,['test'],"['test', 'tests']"
Testability,Removing hard-coded shard sizes from the Dataflow tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/757:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/757,1,['test'],['tests']
Testability,Removing the spark dataflow runner build and the cloud_todo_build from travis. Left in the logic for dealing with the cloud_todo in case we have similar problems in the future. I can strip it out of if th,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1021:91,log,logic,91,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1021,1,['log'],['logic']
Testability,Rename FASTA test files?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3904:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3904,1,['test'],['test']
Testability,"Rename IOUtils.canRead() to IOUtils.canReadFile(), and move tests from UtilsUnitTest to IOUtilsUnitTest",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2672:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2672,1,['test'],['tests']
Testability,Rename test file so it doesn't masquerade as a Picard interval list.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5879:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5879,1,['test'],['test']
Testability,Renamed existing test for validating generated WDLs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7829:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7829,1,['test'],['test']
Testability,Repackage ReadFilter plugin tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3525:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3525,1,['test'],['tests']
Testability,Repair the CRAM detector/diagnostics test output to reflect the CRAM file name change that was introduced by updating the large CRAM files to v3.0.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8971:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8971,1,['test'],['test']
Testability,Replace StreamingProcessController println with a logger info message.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4697:50,log,logger,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4697,1,['log'],['logger']
Testability,Replace literal arguments with variables in several integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4416:64,test,tests,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4416,1,['test'],['tests']
Testability,ReplaceSamHeader needs CRAM tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1205:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1205,1,['test'],['tests']
Testability,"Replicates most of the functionality of the old ROD system in ~5% of the; code. The incomprehensible tangle of nested iterators, bindings, views, states,; tracks, trackers, builders etc., etc., is gone, replaced by about 4 core classes:; FeatureContext, FeatureDataSource, FeatureInput, and FeatureManager. FeatureContext: This is tool-facing interface (replaces RefMetaDataTracker).; Allows particular sources of Features to be queried. FeatureDataSource: Handles the low-level details of querying a source of Features.; Uses a caching scheme optimized for the use case of queries over; intervals with gradually increasing start/stop positions. FeatureInput: This is used to declare Feature arguments in tools (replaces RodBinding).; The engine discovers all FeatureInput arguments declared in the tool's class; hierarchy, and initializes data sources for each one that was specified; on the command line. FeatureManager: Manages the pool of data sources, as well as codec and file format; discovery and type checking. -ReadWalker interface has changed: apply() now takes a FeatureContext argument; (will be null if there are no sources of Features). -Included an example tool PrintReadsWithVariants to demonstrate use of the new; ReadWalker interface. -Since Feature files must be indexed in order to query them, I have provided a; tool IndexFeatureFile that can index any Feature-containing file. -Made required changes to the argument-parsing system. Feature argument discovery; is as de-coupled as possible from the main arg parser. -Made required changes to BQSR, and eliminated the temporary HACKRefMetaDataTracker. -Comprehensive tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/224:1638,test,tests,1638,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/224,1,['test'],['tests']
Testability,"Report; ### Affected tool(s) or class(es); HaplotypeCaller --max-reads-per-alignment-start. ### Affected version(s); - [x] Latest public release version [4.1.2.0]; - [ ] Latest master branch as of [date of test?]. ### Description; We used GATK4 to detect a fairly large duplication (60bp) in a control sample. We did sequenced two replicates for this sample, one having significantly more coverage than the other.With default GATK4 parameter the duplication was only detected in the sample with the lowest coverage. After inspection of GATK4 parameter we found that it was the downsampling throught the --max-reads-per-alignment-start that was in cause.Indeed, all the reads that contains the duplications are softcliped (see IGV capture below) because the insertion/duplication event is too bigged to be correctly aligned by BWA. This causes all reads containing the duplication to have the same start position in the BAM file. Then, the downsampling based on start position must drastically reduce the signal and the variant is skipped. This explains why the variant was missed at high coverage level and not in the replicates with lower signal.We think that the downsampling should take Softclips into account to be more reliable, but maybe you have a better idea.Also we did some performance evaluation and GATK4 runned faster with the downsampling desactivated. Is it normal ?; ![duplication](https://user-images.githubusercontent.com/53903734/62783152-17f41180-babc-11e9-9ddb-bed3c3042d97.png). #### Steps to reproduce; Run GATK4 with default parameters on the BAM containing the duplication (we can provide a toy). Disable --max-reads-per-alignment-start by switching the value to 0 to enable the identification of the duplication. #### Expected behavior; The duplication should have been found because the downsampling on start position does not take into accout the reads softclips. #### Actual behavior; The duplication is missed at high coverage depth",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6088:206,test,test,206,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6088,1,['test'],['test']
Testability,"Repost of #7815 to test the ""after_n_builds"" functionality",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7817:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7817,1,['test'],['test']
Testability,Request: package the testing framework into a module,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2533:21,test,testing,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2533,1,['test'],['testing']
Testability,Requires enumeration of test cases and implementing each of them.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/403:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/403,1,['test'],['test']
Testability,"Requires https://github.com/samtools/htsjdk/pull/724. I tested on a cluster, loading features (VCF) from HDFS, by running:. ```bash; ./gatk-launch PileupSpark \; --input hdfs:///user/$USER/bam/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam \; --output hdfs:///user/$USER/out/pileup \; --reference hdfs:///user/$USER/fasta/human_g1k_v37.20.21.fasta \; -L 20:10000092-10000112 \; -metadata hdfs:///user/$USER/vcf/dbsnp_138.b37.20.21.vcf \; -- \; --sparkRunner SPARK \; --sparkSubmitCommand spark2-submit \; --sparkMaster yarn-client \; --driver-memory 3G \; --num-executors 1 \; --executor-cores 1 \; --executor-memory 3G; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2344#issuecomment-273178186:56,test,tested,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2344#issuecomment-273178186,1,['test'],['tested']
Testability,Resolved by this commit: https://github.com/broadinstitute/gatk/commit/c063348274cce3da724a06d789cd1b8edcd9f893; See gs://hellbender-test-logs/ for the new source of test logs.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3578#issuecomment-330225659:133,test,test-logs,133,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3578#issuecomment-330225659,3,"['log', 'test']","['logs', 'test', 'test-logs']"
Testability,Resolved conflicts. Once tests are green I'll squash & merge (or you can do it if I forget).,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2565#issuecomment-301139969:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2565#issuecomment-301139969,1,['test'],['tests']
Testability,Resolved the issue of adding gs:// to the beginning and / to the end of the environment variable GATK_GCS_STAGING. Tested it locally.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5452:115,Test,Tested,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5452,1,['Test'],['Tested']
Testability,"Resolves issue #1370 by exposing the setting for Spark logging level with a separate CLI argument (`--spark-verbosity`). Also stifles overly-verbose executor INFO-level logging by setting the default to WARN. This was much cleaner to implement than just applying the existing `--verbosity` to the Spark context for a few reasons. First, Spark's `INFO` level is far too verbose, but most GATK tools provide useful INFO messages. This gives the user the ability to tune them separately. Also, Spark offers more levels through log4j, and mapping from htsjdk logging levels with a bunch of `if` statements didn't seem ideal. Verbose logging only seems to be a problem with when running `/gatk/gatk` inside the GATK docker (eg PathSeq log files easily in 100's of MB). Strangely, however, I found there was no verbose logging if I cloned GATK inside the docker and rebuilt from source with `gradlew buildAll`. Since I can't pinpoint the cause, I haven't included tests for this, but I don't expect test coverage to drop. Note that Spark generates some INFO logging when the context is initialized. After that, the logging level is corrected.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5825:55,log,logging,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5825,10,"['log', 'test']","['log', 'logging', 'test', 'tests']"
Testability,"Responded to most of the comments, but still need to implement proper gatk style vcf writing from java. Also I copied @mbabadi's python package setup, but I havent been able to upload to pypi with setup_vqsr_cnn.py so for the time being I also have a setup.py inside the vqsr_cnn package which works with pypi, but hardcodes the version. I'm sure there is a better way. Some python tests failed but it seems to be a maven jar issue...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4097#issuecomment-358429904:382,test,tests,382,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4097#issuecomment-358429904,1,['test'],['tests']
Testability,"Responded to most of the review, but still need to add a proper integration test and fix up the pipeline test.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4800#issuecomment-393337753:76,test,test,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4800#issuecomment-393337753,2,['test'],['test']
Testability,"Responded to review comments. Since we now have a mix of ""obsolete"", ""approved"", and ""placeholder"" program groups that are easily confused (some obsolete groups look similar to new approved groups, i.e., ReadProgramGroup which is obsolete, and ReadsDataGroup, which is approved, but a placeholder for Picard. So I added a comment to each PG class marking it as obsolete, or as a placeholder. For the new, approved groups, I just added a comment containing the summary text. I also fixed an existing problem where we QCProgramGroup was used for some actual tools, and some tools that were jut for testing. I updated the test tools to point to the TestProgramGroup, and obsoleted QCProgramGroup (like all of the obsolete groups, there are still tools referencing it). The sooner we merge this the better.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3924#issuecomment-350274620:596,test,testing,596,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3924#issuecomment-350274620,3,"['Test', 'test']","['TestProgramGroup', 'test', 'testing']"
Testability,Restart test jvm every few test classes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6093:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6093,2,['test'],['test']
Testability,Restarting tests...,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5998#issuecomment-503991161:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5998#issuecomment-503991161,1,['test'],['tests']
Testability,Restore 3 Gnarly tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8892:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8892,1,['test'],['tests']
Testability,Restore gnarly tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8893:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8893,1,['test'],['tests']
Testability,Restore reshape R dependency and add test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5022:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5022,1,['test'],['test']
Testability,"Results from a Travis run using a branch that throws whenever a FeatureCache miss occurs, and the query interval is on the same contig as was the current cached interval, but with a start locus *before* the current cached interval start. This indicates that features that have already been ejected from the cache are being re-queried, and the corresponding tool might benefit from a smarter ejection strategy. Some of these could be artifacts of the tests. Failures (see https://travis-ci.com/broadinstitute/gatk/builds/108966841):. FuncotatorIntegrationTest.exhaustiveArgumentTest; FuncotatorIntegrationTest.testFuncotatorWithoutValidatingResults; FuncotatorIntegrationTest.testVcfDatasourceAccountsForAltAlleles; FuncotatorIntegrationTest.testVcfMafConcordance; XGBoostEvidenceFilterUnitTest.testFilter; HaplotypeCallerIntegrationTest.testGenotypeGivenAllelesMode; Mutect2IntegrationTest.testContaminationFilter; Mutect2IntegrationTest.testDreamTumorNormal; Mutect2IntegrationTest.testGivenAllelesMode; Mutect2IntegrationTest.testGivenAllelesZeroCoverage; Mutect2IntegrationTest.testMissingAF; Mutect2IntegrationTest.testPon; Mutect2IntegrationTest.testTumorOnly. Also, these probably don't count, but:; FeatureDataSourceUnitTest.testCacheHitDetection; FeatureDataSourceUnitTest.testSingleDataSourceMultipleQueries. The HC stack was:. `org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerIntegrationTest.testGenotypeGivenAllelesMode [31mFAILED[39m; org.broadinstitute.hellbender.exceptions.GATKException: Locatable cache miss while attempting to retrieve a previous interval from the locatable cache. New interval: 20:9999980-10000254 Previous: 20:10000555-10001000; at org.broadinstitute.hellbender.engine.FeatureCache.cacheHit(FeatureCache.java:164); at org.broadinstitute.hellbender.engine.FeatureDataSource.queryAndPrefetch(FeatureDataSource.java:497); at org.broadinstitute.hellbender.engine.FeatureManager.getFeatures(FeatureManager.java:340); at org.broadinstitute.he",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5895:450,test,tests,450,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5895,8,['test'],"['testContaminationFilter', 'testDreamTumorNormal', 'testFilter', 'testFuncotatorWithoutValidatingResults', 'testGenotypeGivenAllelesMode', 'testVcfDatasourceAccountsForAltAlleles', 'testVcfMafConcordance', 'tests']"
Testability,Results** | |; | --- | --- |; |CHM controlHCprocesshours|75.88741944444445|; |CHM controlHCsystemhours|0.1663777777777778|; |CHM controlHCwallclockhours|52.24009722222222|; |CHM controlHCwallclockmax|2.852152777777778|; |CHM controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa332776f-175a-4595-bdeb-ab62e7f89921%2Fcall-CONTROLRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |CHM controlindelF1Score|0.8724|; |CHM controlindelPrecision|0.8814|; |CHM controlsnpF1Score|0.9784|; |CHM controlsnpPrecision|0.9706|; |CHM controlsnpRecall|0.9863|; |CHM controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa332776f-175a-4595-bdeb-ab62e7f89921%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F06cbfab4-17a7-4415-9118-d0ebbe156bfd%2Fcall-CombineSummaries%2Fsummary.csv)|; |CHM evalHCprocesshours|84.26158888888888|; |CHM evalHCsystemhours|0.19243055555555555|; |CHM evalHCwallclockhours|60.242008333333345|; |CHM evalHCwallclockmax|3.176513888888889|; |CHM evalMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa332776f-175a-4595-bdeb-ab62e7f89921%2Fcall-EVALRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |CHM evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cro,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202:1122,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,1122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,Results** | |; | --- | --- |; |CHM controlHCprocesshours|75.88741944444445|; |CHM controlHCsystemhours|0.1663777777777778|; |CHM controlHCwallclockhours|52.24009722222222|; |CHM controlHCwallclockmax|2.852152777777778|; |CHM controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F2a8ce326-baa5-4052-bff9-bd684393ff6c%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa1db35b8-cc7b-4019-bdd0-9f423762542e%2Fcall-CONTROLRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |CHM controlindelF1Score|0.8724|; |CHM controlindelPrecision|0.8814|; |CHM controlsnpF1Score|0.9784|; |CHM controlsnpPrecision|0.9706|; |CHM controlsnpRecall|0.9863|; |CHM controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F2a8ce326-baa5-4052-bff9-bd684393ff6c%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa1db35b8-cc7b-4019-bdd0-9f423762542e%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F7195c554-534f-43ef-80c2-77bdafa1827f%2Fcall-CombineSummaries%2Fsummary.csv)|; |CHM evalHCprocesshours|78.10181666666668|; |CHM evalHCsystemhours|0.16157500000000005|; |CHM evalHCwallclockhours|55.006172222222226|; |CHM evalHCwallclockmax|2.8554194444444443|; |CHM evalMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F2a8ce326-baa5-4052-bff9-bd684393ff6c%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa1db35b8-cc7b-4019-bdd0-9f423762542e%2Fcall-EVALRuntimeTask%2Fmonitoring.pdf)|; |CHM evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/Bench,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748:1122,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,1122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1194801748,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,Results** | |; | --- | --- |; |CHM controlHCprocesshours|75.88741944444445|; |CHM controlHCsystemhours|0.1663777777777778|; |CHM controlHCwallclockhours|52.24009722222222|; |CHM controlHCwallclockmax|2.852152777777778|; |CHM controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F89508d5f-29f1-4534-9fe1-220a80de17c4%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa2a2515a-b32a-44a6-a6d1-9a6d0d2199bb%2Fcall-CONTROLRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |CHM controlindelF1Score|0.8724|; |CHM controlindelPrecision|0.8814|; |CHM controlsnpF1Score|0.9784|; |CHM controlsnpPrecision|0.9706|; |CHM controlsnpRecall|0.9863|; |CHM controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F89508d5f-29f1-4534-9fe1-220a80de17c4%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa2a2515a-b32a-44a6-a6d1-9a6d0d2199bb%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F2c4ad666-e885-4e23-bd5c-d54ca521ffbf%2Fcall-CombineSummaries%2Fsummary.csv)|; |CHM evalHCprocesshours|78.99195555555558|; |CHM evalHCsystemhours|0.16168333333333337|; |CHM evalHCwallclockhours|55.43875833333334|; |CHM evalHCwallclockmax|2.913311111111111|; |CHM evalMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F89508d5f-29f1-4534-9fe1-220a80de17c4%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fa2a2515a-b32a-44a6-a6d1-9a6d0d2199bb%2Fcall-EVALRuntimeTask%2Fmonitoring.pdf)|; |CHM evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/Benchma,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382:1122,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,1122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1193038382,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,Results** | |; | --- | --- |; |CHM controlHCprocesshours|75.88741944444445|; |CHM controlHCsystemhours|0.1663777777777778|; |CHM controlHCwallclockhours|52.24009722222222|; |CHM controlHCwallclockmax|2.852152777777778|; |CHM controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9bc521dc-3c4c-4274-972c-9d1e4be850d5%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F092bfb4f-d978-4964-a8ae-e5a7f7362f7c%2Fcall-CONTROLRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |CHM controlindelF1Score|0.8724|; |CHM controlindelPrecision|0.8814|; |CHM controlsnpF1Score|0.9784|; |CHM controlsnpPrecision|0.9706|; |CHM controlsnpRecall|0.9863|; |CHM controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9bc521dc-3c4c-4274-972c-9d1e4be850d5%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F092bfb4f-d978-4964-a8ae-e5a7f7362f7c%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2F6ab078fb-b668-452c-bbaa-8fb1fd8e25ba%2Fcall-CombineSummaries%2Fsummary.csv)|; |CHM evalHCprocesshours|84.26158888888888|; |CHM evalHCsystemhours|0.19243055555555555|; |CHM evalHCwallclockhours|60.242008333333345|; |CHM evalHCwallclockmax|3.176513888888889|; |CHM evalMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2F9bc521dc-3c4c-4274-972c-9d1e4be850d5%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2F092bfb4f-d978-4964-a8ae-e5a7f7362f7c%2Fcall-EVALRuntimeTask%2Fmonitoring.pdf)|; |CHM evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/Benchm,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590:1122,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,1122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1533946590,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,Results** | |; | --- | --- |; |CHM controlHCprocesshours|75.88741944444445|; |CHM controlHCsystemhours|0.1663777777777778|; |CHM controlHCwallclockhours|52.24009722222222|; |CHM controlHCwallclockmax|2.852152777777778|; |CHM controlMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff7eac327-c59c-43f7-a850-21bc3e0ccf52%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fcd28fe49-1672-4321-a836-47f76419c1c8%2Fcall-CONTROLRuntimeTask%2FcacheCopy%2Fmonitoring.pdf)|; |CHM controlindelF1Score|0.8724|; |CHM controlindelPrecision|0.8814|; |CHM controlsnpF1Score|0.9784|; |CHM controlsnpPrecision|0.9706|; |CHM controlsnpRecall|0.9863|; |CHM controlsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff7eac327-c59c-43f7-a850-21bc3e0ccf52%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fcd28fe49-1672-4321-a836-47f76419c1c8%2Fcall-BenchmarkVCFControlSample%2FBenchmark%2Fd5df8455-36cf-4ecb-8dc2-ec35b974c0b7%2Fcall-CombineSummaries%2Fsummary.csv)|; |CHM evalHCprocesshours|78.23616944444446|; |CHM evalHCsystemhours|0.16188333333333332|; |CHM evalHCwallclockhours|55.167422222222214|; |CHM evalHCwallclockmax|2.887522222222222|; |CHM evalMonitoringLogs|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated%2Ff7eac327-c59c-43f7-a850-21bc3e0ccf52%2Fcall-CHMSampleHeadToHead%2FBenchmarkComparison%2Fcd28fe49-1672-4321-a836-47f76419c1c8%2Fcall-EVALRuntimeTask%2Fmonitoring.pdf)|; |CHM evalindelF1Score|0.8724|; |CHM evalindelPrecision|0.8814|; |CHM evalsnpF1Score|0.9784|; |CHM evalsnpPrecision|0.9706|; |CHM evalsnpRecall|0.9863|; |CHM evalsummary|[View in the GCS Console](https://console.cloud.google.com/storage/browser/_details/dsde-methods-carrot-prod-cromwell/Benchm,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672:1122,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,1122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7876#issuecomment-1182703672,2,['Benchmark'],"['BenchmarkVCFControlSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,Retain all source IDs on VariantContext merge + test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8752:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8752,2,['test'],['test']
Testability,"Revamping the existing somatic validation pipeline needs to be done before development of the TH prototype can continue. - [ ] Identify test bed of TCGA samples from various tumor types. We can mix tumor-normal samples (as I've done at the counts/allelic-counts level in preliminary evaluations of the TH prototype) to expand the effective number of samples.; - [ ] Determine minimal version of current CGA ABSOLUTE pipeline (to be used as a baseline for comparison).; - [ ] Generate and manually curate ABSOLUTE results and narrow samples down to those with relatively robust solutions.; - [ ] Construct ModelSegments/M2 -> ABSOLUTE pipeline (will at least require minor development/tuning of ModelSegments output -> ABSOLUTE input conversion script, may also require germline tagging, see related #5804) and evaluate.; - [ ] Construct ModelSegments/M2 -> TH pipeline and evaluate.; - [ ] Remove unsupported code/tools. See https://github.com/broadinstitute/gatk/pull/5450#issuecomment-461431199 for a summary. We should make sure that any users that would be affected by this are notified and prepare accordingly.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4122#issuecomment-526272699:136,test,test,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4122#issuecomment-526272699,1,['test'],['test']
Testability,Revert some phasing changes that were unnecessary for AoU and broke our integration tests. [Integration run](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ba93baa2-9971-4c90-8ce3-635702a81eb6),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8590:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8590,1,['test'],['tests']
Testability,RevertBaseQualityScoresIntegrationTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1232:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1232,1,['test'],['tests']
Testability,RevertSam needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1223:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1223,1,['test'],['tests']
Testability,"Reverts the reversion in #5225, this time addressing the lexicographical ordering issue in #5217 at the WDL level by simply renaming gCNV output at the command line. If desired, we can eventually change gCNV itself to output filenames that are robust against lexicographic ordering, but this is low priority in my opinion. @vruano this is what we discussed last week. Tests pass on Travis, and I'm pretty sure this fix should work OK, but I have not done an actual run with enough samples to see the fix in action. Can I assign you to review once I get a chance to do this?. EDIT: Also went ahead and rolled an older PR #5304 into this one so I can test both at the same time. Closes #4724.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5490:368,Test,Tests,368,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5490,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Review complete @kgururaj @kdatta -- I've included instructions for adding GCS support to the tool (and how to add tests for the GCS support), in addition to the issues we discussed at our meeting today. After addressing these comments, can you please squash this branch into a single commit? As previously mentioned, this is easier if you just rebase onto the commit you're already on top of (ie., the commit before your initial commit, in this case bf993d8c6f6925ce6bdb67f50c0e33c6e5bc3336):. ```; git rebase -i bf993d8c6f6925ce6bdb67f50c0e33c6e5bc3336; ```. Then when the ""pick and squash"" screen comes up in your editor, select ""pick"" for the first commit, and ""s"" for all the others to squash into a single commit, followed by `git push -f` to push the squashed version of the branch to your fork. After https://github.com/broadinstitute/gatk/pull/2610 is merged, we'll ask you to rebase onto the latest master, at which point (hopefully!) tests will start to pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-295933676:115,test,tests,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-295933676,2,['test'],['tests']
Testability,Review done. Please change the commit/pull-request description so that it explains what has been changed; pointing to the issue is good but one should be able to see what has been done just from doing a 'git log' on it.; Back to @SHuang-Broad.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2512#issuecomment-288596448:208,log,log,208,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2512#issuecomment-288596448,1,['log'],['log']
Testability,"Reworks classes used by `JointGermlineCNVSegmentationIntegration` for SV clustering and defragmentation. The design of `SVClusterEngine` has been overhauled to enable the implementation of `CNVDefragmenter` and `BinnedCNVDefragmenter` subclasses. Logic for producing representative records from a collection of clustered SVs has been separated into an `SVCollapser` class, which provides enhanced functionality for handling genotypes for SVs more generally. A number of bugs, particularly with max-clique clustering, have been fixed, as well as a parameter swap bug in `JointGermlineCNVSegmentationIntegration`. This is the first of a series of PRs for an experimental Java-based implementation of some modules in `gatk-sv` pipeline, including SV vcf merging, clustering, evidence aggregation, and genotyping.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7243:247,Log,Logic,247,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7243,1,['Log'],['Logic']
Testability,Rewrote all code involving logarithms to use natural log instead of log-10.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/803:27,log,logarithms,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/803,3,['log'],"['log', 'log-', 'logarithms']"
Testability,RiL0dlbm9taWNzREJJbXBvcnQuamF2YQ==) | `73.039% <60%> (-0.461%)` | `48 <0> (ø)` | |; | [...s/spark/ParallelCopyGCSDirectoryIntoHDFSSpark.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9QYXJhbGxlbENvcHlHQ1NEaXJlY3RvcnlJbnRvSERGU1NwYXJrLmphdmE=) | `0% <0%> (-80.612%)` | `0% <0%> (-19%)` | |; | [...institute/hellbender/utils/gcs/GATKGCSOptions.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvR0FUS0dDU09wdGlvbnMuamF2YQ==) | `0% <0%> (-66.667%)` | `0% <0%> (ø)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `41.216% <0%> (-30.405%)` | `26% <0%> (-8%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/2733?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGV,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2733#issuecomment-306082551:2123,test,test,2123,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2733#issuecomment-306082551,1,['test'],['test']
Testability,"Right now our docker image is much larger than it needs to be. This is at least in part because it contains our entire git clone as well as the packaged jars. This is not necessary and could potentially come with it shrinking our docker image substantially. . This change would involve a major refactoring of how we execute our tests through gralde inside the docker image, as removing the test dependencies will mean we probably have to externally mount the git clone from the docker image in order to pull in the proper dependencies.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3930:328,test,tests,328,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3930,2,['test'],"['test', 'tests']"
Testability,"Right now the alignments are filtered in various places in SV discovery stage. ; Having a single logic unit for doing this makes; * debugging and modular development, ; * complex SV discovery/interpretation, and ; * future improvements (e.g. not filtering but downgrading certain alignments and use an optimization approach). easier",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3221:97,log,logic,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3221,1,['log'],['logic']
Testability,"Right now the docker image is too large. It appears that the if the build_docker.sh script its set to run the tests, then it is uploading the test resources into the docker and removing them, resulting in multiple layers which uses unneeded space. We need to remove the resources files from the docker.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3414:110,test,tests,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3414,2,['test'],"['test', 'tests']"
Testability,"Right now we publish test utils as part of the gatk artifact. Since these are part of our main compilation unit it means we have several test libraries as compile dependencies instead of as test compile dependencies. . If we separate our test utils into a separate group we can avoid having downstream tools gain various test dependencies if they don't want them. (i.e. TestNG, MiniDFSCluster).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1481:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1481,6,"['Test', 'test']","['TestNG', 'test']"
Testability,"Right now, we only have a local test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/686:32,test,test,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/686,1,['test'],['test']
Testability,"Right now, we're only testing local files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/666:22,test,testing,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/666,1,['test'],['testing']
Testability,"Right now, when we create a bucket-based test, we upload files into `gs://hellbender/test/resources/`, which Travis uses for `HELLBENDER_TEST_INPUTS` (the environment variable used by dataflow tests). These files are currently unversioned, which is bad -- we need to come up with a better way of managing our dataflow test inputs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/739:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/739,4,['test'],"['test', 'tests']"
Testability,"Right, so I'd seen that explainer of interval_list but wasn't sure how to go about generating an interval_list to test what I'm generating. Specifically, I did a small test using some of the test resource gvcfs and generated a genomicsdb workspace - something like this:. ```; ./gatk GenomicsDBImport -V ./src/test/resources/large/gvcfs/HG00096.g.vcf.gz -V ./src/test/resources/large/gvcfs/HG00268.g.vcf.gz -V ./src/test/resources/large/gvcfs/NA19625.g.vcf.gz --genomicsdb-workspace-path test -L chr20; ```; And then generated the interval_list for those, like this:; ```; ./gatk GenomicsDBImport --genomicsdb-update-workspace-path test --output-interval-list-to-file test.interval_list; ```; In this case, `test.interval_list` looks like this:; ```; @HD VN:1.6; @SQ SN:chr20 LN:64444167; @SQ SN:chr21 LN:46709983; chr20 1 64444167 + .; ```; Is that right? I was trying to figure out what tool output/workflow I could compare this to to make sure it was correct. I tried looking at [this link](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.0.0.0/picard_util_IntervalListTools.php) to try and see if there was some way to use that. But doing that didn't really seem to be the same thing....",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-518817072:114,test,test,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-518817072,10,['test'],['test']
Testability,"Rightnow doing the manual docker build locally would fail. One needs to copy the line in `.travis.yml`. ```; sudo bash build_docker.sh -e ${HASH} -s -u -d $PWD/temp_staging/;; sudo docker run -v $(pwd)/src/test/resources:/testdata --rm -e ""TEST_VERBOSITY=minimal"" -e ""TEST_TYPE=${TEST_TYPE}"" -t broadinstitute/gatk:${HASH} bash /root/run_unit_tests.sh;; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3160:206,test,test,206,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3160,2,['test'],"['test', 'testdata']"
Testability,Rlci91dGlscy9uaW8vU2Vla2FibGVCeXRlQ2hhbm5lbFByZWZldGNoZXIuamF2YQ==) | `78.313% <0%> (+1.205%)` | `27% <0%> (+2%)` | :arrow_up: |; | [...adinstitute/hellbender/engine/ReadsDataSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvUmVhZHNEYXRhU291cmNlLmphdmE=) | `90.909% <0%> (+1.515%)` | `63% <0%> (+2%)` | :arrow_up: |; | [...institute/hellbender/engine/FeatureDataSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvRmVhdHVyZURhdGFTb3VyY2UuamF2YQ==) | `74.803% <0%> (+1.575%)` | `40% <0%> (+2%)` | :arrow_up: |; | [...der/engine/spark/datasources/ReadsSparkSource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvZGF0YXNvdXJjZXMvUmVhZHNTcGFya1NvdXJjZS5qYXZh) | `69.474% <0%> (+3.158%)` | `28% <0%> (ø)` | :arrow_down: |; | [...institute/hellbender/exceptions/UserException.java](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9leGNlcHRpb25zL1VzZXJFeGNlcHRpb24uamF2YQ==) | `68.033% <0%> (+3.279%)` | `3% <0%> (ø)` | :arrow_down: |; | [...broadinstitute/hellbender/utils/test/BaseTest.java](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L0Jhc2VUZXN0LmphdmE=) | `83.704% <0%> (+5.185%)` | `36% <0%> (+5%)` | :arrow_up: |; | [...titute/hellbender/utils/test/MiniClusterUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L01pbmlDbHVzdGVyVXRpbHMuamF2YQ==) | `89.474% <0%> (+10.526%)` | `7% <0%> (+1%)` | :arrow_up: |; | ... and [8 more](https://codecov.io/gh/broadinstitute/gatk/pull/3546?src=pr&el=tree-more) | |,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3546#issuecomment-327496420:3349,test,test,3349,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3546#issuecomment-327496420,2,['test'],['test']
Testability,"Rough prototype for @LeeTL1220 to test. If it satisfies your use case, we can polish this branch up, add some tests, and merge.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2374:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2374,2,['test'],"['test', 'tests']"
Testability,"Run ""cloud"" and ""bucket"" test groups on travis",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/552:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/552,1,['test'],['test']
Testability,Run NIO benchmarks on single-core instances,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2424:8,benchmark,benchmarks,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2424,1,['benchmark'],['benchmarks']
Testability,Run gatk-protected test suite on every push to gatk/master,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1758:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1758,1,['test'],['test']
Testability,Run in quickstart: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/588a50be-9e03-4e34-8f12-a61a26262763; Run on delta: https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/GVS%20AoU%20WGS%20Delta%20Callset%20v2/job_history/135f5cc3-4948-426b-a90c-8ced5ec9f1e6 (failed on the test that was added after Delta because the typo in the nfe column names),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8685:317,test,test,317,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8685,1,['test'],['test']
Testability,Run spark tests on HDFS via jenkins,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1402:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1402,1,['test'],['tests']
Testability,Run the GATK tests using the refactored rans code in htsjdk.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8730:13,test,tests,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8730,1,['test'],['tests']
Testability,"Run validation tests continuously in jenkins: ReadsPipelineSpark, BQSR etc",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1401:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1401,1,['test'],['tests']
Testability,"Running GATK4 BwaSpark encounter the following fatal error message:; `[M::mem_sam_pe] Paired reads have different names: ""206B4ABXX100825:7:66:2632:21260"", ""206B4ABXX100825:7:66:2632:31752""`. Script: ; `$GATK_LAUNCH BwaSpark -I $unsorted_bam_hdfs -O $sorted_bam_hdfs -t 10 --disableSequenceDictionaryValidation true -R $ref_hdfs -K 10000000 -- --sparkRunner SPARK --sparkMaster yarn --num-executors 1 --executor-cores 10 --executor-memory 40g`. $unsorted_bam_hdfs is a file generated by FastqToBam, and copied to HDFS. ; spark 2.0 is used. . The original Fastq files are perfectly fine, and we have been using it for all our tests using previous versions, including 3.6. I also manually checked the generated name-sorted BAM file generated by FastToBam, and the neighboring lines are perfectly paired as well. . What I suspect is that chunk is cut inside a pair, and thus not just this one, all subsequent lines are all error'ed out. To confirm this, I ran the job with different -K and -bps options, and the error will occur at different locations.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2296:625,test,tests,625,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2296,1,['test'],['tests']
Testability,Running a single test through Gradle with `test.single` not working,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6853:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6853,2,['test'],['test']
Testability,"Running into a similar issue when launching [cnv_somatic_pair_workflow 1.3](https://dockstore.org/workflows/github.com/gatk-workflows/gatk4-somatic-cnvs/cnv_somatic_pair_workflow:1.3.0?tab=info) with [gatk docker 4.1](us.gcr.io/broad-gatk/gatk:4.1.0.0) on Terra. Any suggestions?. ```; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 22:50:56.367 INFO DenoiseReadCounts - Reading read-counts file (/cromwell_root/fc-88ae2d4c-8e67-478a-893c-65db97d40c80/9a75a2c6-0c0b-4903-80e6-0082435645c1/CNVSomaticPairWorkflow/ca25a6aa-92b6-4a41-b41a-740cf40b2143/call-CollectCountsTumor/S027-1A-deduped.counts.hdf5)...; ```; Also failing to delocalize files at the DenoiseReadCounts step:. ```; Task CNVSomaticPairWorkflow.DenoiseReadCountsTumor:NA:1 failed. Job exit code 1. ; Check gs://fc-88ae2d4c-8e67-478a-893c-65db97d40c80/65a36270-4934-4791-a57f-2c70c2f42c0e/CNVSomaticPairWorkflow/9c8d57c3-abf7-4805-b612-04d61e8c7727/call-DenoiseReadCountsTumor/stderr for more information. PAPI error code 5. ; 10: Failed to delocalize files: failed to copy the following files: ""/mnt/local-disk/S027-1A-deduped.denoisedCR.tsv -> gs://fc-88ae2d4c-8e67-478a-893c-65db97d40c80/65a36270-4934-4791-a57f-2c70c2f42c0e/CNVSomaticPairWorkflow/9c8d57c3-abf7-4805-b612-04d61e8c7727/call-DenoiseReadCountsTumor/S027-1A-deduped.denoisedCR.tsv (cp failed: gsutil -q -m cp -L /var/log/google-genomics/out.log /mnt/local-disk/S027-1A-deduped.denoisedCR.tsv gs://fc-88ae2d4c-8e67-478a-893c-65db97d40c80/65a36270-4934-4791-a57f-2c70c2f42c0e/CNVSomaticPairWorkflow/9c8d57c3-abf7-4805-b612-04d61e8c7727/call-DenoiseReadCountsTumor/S027-1A-deduped.denoisedCR.tsv, command failed: CommandException: No URLs matched: /mnt/local-disk/S027-1A-deduped.denoisedCR.tsv\nCommandException: 1 file/object could not be transferred.\n); ; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3763#issuecomment-491391261:329,log,logger,329,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3763#issuecomment-491391261,4,['log'],"['log', 'logger', 'logging']"
Testability,"Running on GCS (cluster created by dataproc), the GATK spark tools run much faster on HDFS than on files stored on GS. HDFS 1.15 minutes. ```; /gatk-launch CountReadsSpark -I /user/akiezun/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam --apiKey <myAPIKEY> -- --sparkRunner GCS --cluster dataproc-cluster-3 --executor-cores 3 --executor-memory 25G --conf spark.yarn.executor.memoryOverhead=2500; ```. GCS 7.50 minutes. ```; ./gatk-launch CountReadsSpark -I gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam --apiKey <myAPIKEY> -- --sparkRunner GCS --cluster dataproc-cluster-3 --executor-cores 3 --executor-memory 25G --conf spark.yarn.executor.memoryOverhead=2500; ```. @lbergelson @jean-philippe-martin is this a known thing? If this expected",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1755:472,test,test,472,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1755,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Running something like this on the outputs of the score tool from a validation shard could help determine the threshold. (This was done hastily, so excuse any errors!). Below I show the results of running with a test VCF of 50 1000G WES samples. Note that ""training"" and ""truth"" are used in the VQSR meanings, and that we derive positive labels for the validation set from their union; but one could imagine variations on this. ```; import h5py; import numpy as np; import matplotlib.pyplot as plt. annot_file = 'test.all-unlabeled.annot.hdf5'; scores_file = 'test.all-unlabeled.scores.hdf5'. with h5py.File(annot_file, 'r') as f:; is_training_n = f['/labels/training'][()].astype(bool); is_truth_n = f['/labels/truth'][()].astype(bool); ; with h5py.File(scores_file, 'r') as f:; score_n = f['/data/scores'][()]. score_sort_order_n = score_n.argsort(); sorted_score_n = score_n[score_sort_order_n]; is_positive_n = is_training_n | is_truth_n. p_n = is_positive_n[score_sort_order_n]; m_n = ~p_n. tp_n = np.cumsum(p_n[::-1])[::-1]; fn_n = np.cumsum(p_n); mp_n = np.cumsum(m_n[::-1])[::-1]. recall_n = tp_n / (tp_n + fn_n); LL_score_n = recall_n**2 / (mp_n / sum(m_n)). argmax_idx = np.argmax(LL_score_n); LL_score_max = LL_score_n[argmax_idx]; LL_score_argmax = sorted_score_n[argmax_idx]; recall_at_LL_score_argmax = recall_n[argmax_idx]. plt.plot(sorted_score_n, LL_score_n, label=f'LL score, max = {LL_score_max:.2f}, argmax = {LL_score_argmax:.2f}'); plt.plot(sorted_score_n, recall_n, label=f'recall, at LL score argmax = {recall_at_LL_score_argmax:.2f}'); plt.axvline(LL_score_argmax, c='grey'); plt.xlabel('score'); plt.legend(); plt.show(); ```. ![image](https://user-images.githubusercontent.com/11076296/158000937-79dcfc26-45c6-400f-9101-37a96087492e.png). Would be interesting to also plot e.g. F1 vs. score, where F1 is determined on a orthogonal set of positive/negative gold-standard labels (e.g., GIAB), to see how close the LL score determined on the ""training/truth"" labels gets us.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7711#issuecomment-1065794594:212,test,test,212,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7711#issuecomment-1065794594,3,['test'],['test']
Testability,Running the scientific tests in WARP when updating GATK from 4.5.0.0 -> 4.6.0.0 caught a difference in ReblockGVCFs when a no call site with GQ=0 was derived from a low quality call where the PLs with a value of 0 were in an allele that was subset (e.g. `<NON_REF>`). I believe this new behavior is a feature because it now correctly outputs a ref block with GQ=0. This test provides an example of one of these cases to ensure that the behavior stays the same in the future.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8928:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8928,2,['test'],"['test', 'tests']"
Testability,Running without an output file causes an NPR. Needs a null check. ```; ./gatk-launch CountReadsSpark -I src/test/resources/org/broadinstitute/hellbender/tools/count_reads_sorted.bam; ```. ```; java.lang.NullPointerException; at org.broadinstitute.hellbender.utils.gcs.BucketUtils.isCloudStorageUrl(BucketUtils.java:44); at org.broadinstitute.hellbender.utils.gcs.BucketUtils.createFile(BucketUtils.java:105); at org.broadinstitute.hellbender.tools.spark.pipelines.CountReadsSpark.runTool(CountReadsSpark.java:37); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:310); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:98); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:146); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:165); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:66); at org.broadinstitute.hellbender.Main.main(Main.java:81); ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1523:108,test,test,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1523,1,['test'],['test']
Testability,Runs with @danking 's changes to import_gvs.py included:; - creation of Avro files https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/5a16077c-1981-4cc7-85f6-8462c4a9a99a; - creation of VDS using those files: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/dd699836-c9e1-4a4b-a39f-201871686bb4; - quickstart integration test run: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/0691d981-cbf3-4150-8128-58f2ce81895c,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8673#issuecomment-1930637107:399,test,test,399,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8673#issuecomment-1930637107,1,['test'],['test']
Testability,S.b37.ch20.1m-1m20k.NA12878.quantizing_levels_6.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.HiSeq.1mb.1RG.2k_lines.alternate.recalibrated.DIQ.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.HiSeq.1mb.1RG.2k_lines.bqsr.qq-1.alternate.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.HiSeq.1mb.1RG.2k_lines.bqsr.qq6.alternate.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.MultiSite.reads.pipeline.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.MultiSite.reads.pipeline.cram.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate_allaligned.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate.recalibrated.DIQ.sharded.bam/part-r-00001.bam; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/human_b36_both.chr1_1k.dict; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/human_b36_both.chr1_1k.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.chr17_69k_70k.dictFix.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.oq.read_consumes_zero_ref_bases.chr20.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/na.bam; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/na.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/originalQuals.1kg.chr1.1-1K.1RG.dictFix.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/overlappingRead.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/solid.ba,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:21502,test,test,21502,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"SAMInputFormat.createRecordReader(AnySAMInputFormat.java:190); > 	at org.apache.spark.rdd.NewHadoopRDD$$anon$1.liftedTree1$1(NewHadoopRDD.scala:178); > 	at org.apache.spark.rdd.NewHadoopRDD$$anon$1.<init>(NewHadoopRDD.scala:177); > 	at org.apache.spark.rdd.NewHadoopRDD.compute(NewHadoopRDD.scala:134); > 	at org.apache.spark.rdd.NewHadoopRDD.compute(NewHadoopRDD.scala:69); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:88); > 	at org.apache.spark.scheduler.Task.run(Task.scala:100); > 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:317); > 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); > 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); > 	at java.lang.Thread.run(Thread.java:748). As standalone solution, I have to set paths thourgh hdfs which is tricky:; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --sparkRunner SPARK --sparkMaster yarn --javaOptions -Dmapr.library.flatclass. Could it be possible for gatk spark tools to manage maprfs ?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3936:6104,test,testing,6104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3936,1,['test'],['testing']
Testability,"SAMTOOLS : true; 23:01:57.344 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 23:01:57.344 INFO Funcotator - Deflater: IntelDeflater; 23:01:57.344 INFO Funcotator - Inflater: IntelInflater; 23:01:57.345 INFO Funcotator - GCS max retries/reopens: 20; 23:01:57.345 INFO Funcotator - Using google-cloud-java patch 6d11bef1c81f885c26b2b56c8616b7a705171e4f from https://github.com/droazen/google-cloud-java/tree/dr_all_nio_fixes; 23:01:57.345 INFO Funcotator - Initializing engine; 23:01:58.372 INFO FeatureManager - Using codec VCFCodec to read file file:///omics/chatchawit/sm/out/sample21.vcf; 23:01:58.541 INFO Funcotator - Done initializing engine; log4j:WARN No appenders could be found for logger (org.broadinstitute.hellbender.tools.funcotator.Funcotator).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 23:01:58.560 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///omics/chatchawit/bundle/test/gencode/hg38/gencode.v27.chr_patch_hapl_scaff.annotation.REORDERED.gtf; 23:02:05.335 INFO ProgressMeter - Starting traversal; 23:02:05.337 INFO ProgressMeter - Current Locus Elapsed Minutes Variants Processed Variants/Minute; 23:02:06.530 INFO Funcotator - Shutting down engine; [April 27, 2018 11:02:06 PM ICT] org.broadinstitute.hellbender.tools.funcotator.Funcotator done. Elapsed time: 0.16 minutes.; Runtime.totalMemory()=3420979200; java.lang.IllegalArgumentException: Invalid interval. Contig:ENST00000342066.7|ENSG00000187634.11|OTTHUMG00000040719.10|OTTHUMT00000276866.2|SAMD11-202|SAMD11|2551|protein_coding| start:0 end:0; at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:687); at org.broadinstitute.hellbender.utils.SimpleInterval.validatePositions(SimpleInterval.java:61); at org.broadinstitute.hellbender.utils.SimpleInterval.<init>(SimpleInterval.java:37); at org.broadinstitute.hellbender.tools.funcotator.dataSources.gencod",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4712#issuecomment-385021157:6535,test,test,6535,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4712#issuecomment-385021157,1,['test'],['test']
Testability,"SION_LEVEL : 2; 15:09:27.689 INFO DetermineGermlineContigPloidy - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 15:09:27.689 INFO DetermineGermlineContigPloidy - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 15:09:27.689 INFO DetermineGermlineContigPloidy - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 15:09:27.690 INFO DetermineGermlineContigPloidy - Deflater: IntelDeflater; 15:09:27.690 INFO DetermineGermlineContigPloidy - Inflater: IntelInflater; 15:09:27.690 INFO DetermineGermlineContigPloidy - GCS max retries/reopens: 20; 15:09:27.690 INFO DetermineGermlineContigPloidy - Requester pays: disabled; 15:09:27.690 INFO DetermineGermlineContigPloidy - Initializing engine; 15:09:37.241 INFO DetermineGermlineContigPloidy - Done initializing engine; 15:09:37.253 INFO DetermineGermlineContigPloidy - No contig-ploidy model was provided, running in cohort mode...; 15:09:37.253 INFO DetermineGermlineContigPloidy - Intervals specified...; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 15:09:38.533 INFO FeatureManager - Using codec IntervalListCodec to read file file:///home/n.liorni/snakemake_cnv_gatk/results/cnv/targets.preprocessed.interval_list; 15:09:38.659 INFO IntervalArgumentCollection - Processing 548086 bp from intervals; 15:09:38.697 INFO DetermineGermlineContigPloidy - Validating and aggregating coverage per contig from input read-count files...; 15:09:38.711 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-0848_S4.hdf5 (1 / 4); 15:09:38.734 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-0872_S2.hdf5 (2 / 4); 15:09:38.745 INFO DetermineGermlineContigPloidy - Aggregating read-count file results/cnv/hdf5/MGM20-1121_S4.hdf5 (3 / 4); 15:09:38.757 INFO DetermineGermlineContigPloid",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7444#issuecomment-945753905:3834,log,logger,3834,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7444#issuecomment-945753905,1,['log'],['logger']
Testability,"ST controlMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8/call-NISTSampleHeadToHead/BenchmarkComparison/ed0dc9e1-2d64-47e4-82e0-811971957020/call-CONTROLRuntimeTask/cacheCopy/monitoring.pdf"",; ""NIST controlindelF1Score"": ""0.9902"",; ""NIST controlindelPrecision"": ""0.9903"",; ""NIST controlsnpF1Score"": ""0.9899"",; ""NIST controlsnpPrecision"": ""0.9887"",; ""NIST controlsnpRecall"": ""0.9911"",; ""NIST controlsummary"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8/call-NISTSampleHeadToHead/BenchmarkComparison/ed0dc9e1-2d64-47e4-82e0-811971957020/call-BenchmarkVCFControlSample/Benchmark/8c516721-e955-41d1-907e-fcee92f592d3/call-CombineSummaries/summary.csv"",; ""NIST evalHCprocesshours"": ""100.56416111111112"",; ""NIST evalHCsystemhours"": ""0.19999166666666665"",; ""NIST evalHCwallclockhours"": ""74.00048055555555"",; ""NIST evalHCwallclockmax"": ""4.007605555555555"",; ""NIST evalMonitoringLogs"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8/call-NISTSampleHeadToHead/BenchmarkComparison/ed0dc9e1-2d64-47e4-82e0-811971957020/call-EVALRuntimeTask/cacheCopy/monitoring.pdf"",; ""NIST evalindelF1Score"": ""0.9902"",; ""NIST evalindelPrecision"": ""0.9903"",; ""NIST evalsnpF1Score"": ""0.9899"",; ""NIST evalsnpPrecision"": ""0.9887"",; ""NIST evalsnpRecall"": ""0.9911"",; ""NIST evalsummary"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8/call-NISTSampleHeadToHead/BenchmarkComparison/ed0dc9e1-2d64-47e4-82e0-811971957020/call-BenchmarkVCFTestSample/Benchmark/427c5010-a177-42d8-81be-5a387beed653/call-CombineSummaries/summary.csv"",; ""ROC_Plots_Reported"": ""gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/0e5c32ab-65e6-451f-a04e-6a3f5e7fe5c8/call-CreateHTMLReport/cacheCopy/report.html""; },; ""errors"": null; } ; </pre> </details>",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202:21209,Benchmark,BenchmarkVCFsHeadToHeadOrchestrated,21209,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1535104202,7,['Benchmark'],"['Benchmark', 'BenchmarkComparison', 'BenchmarkVCFTestSample', 'BenchmarkVCFsHeadToHeadOrchestrated']"
Testability,STA.fasta.fai; src/test/resources/fastaWithoutDict.fasta.fai; src/test/resources/fastaWithoutFai.dict; src/test/resources/hg19micro.dict; src/test/resources/hg19micro.fasta.fai; src/test/resources/hg19mini.dict; src/test/resources/hg19mini.fasta.fai; src/test/resources/Homo_sapiens_assembly19_chr1_1M.dict; src/test/resources/Homo_sapiens_assembly19_chr1_1M.fasta.fai; src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf.idx; src/test/resources/HSA19.dbsnp135.chr1_1M.exome_intervals.modified.vcf.idx; src/test/resources/human_g1k_v37.chr17_1Mb.dict; src/test/resources/human_g1k_v37.chr17_1Mb.fasta.fai; src/test/resources/iupacFASTA.dict; src/test/resources/iupacFASTA.fasta.fai; src/test/resources/joint_calling.chr1_1M.1kg_samples.10samples.noINFO.vcf.idx; src/test/resources/large/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.idx; src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/bias_covariates_ARD_coefficients.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_matrix.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_norm2.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_mean_log_bias.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_unexplained_variance.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/bias_covariates_ARD_coefficients_history.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/copy_ratio_max_likelihood_estimate_matrix.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/copy_ratio_precision_matrix.tsv; src/test/resources/large/cnv_germline_workflows_,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:1663,test,test,1663,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,SV test and utils cleanup,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5116:3,test,test,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5116,1,['test'],['test']
Testability,"SVIntervals are comparable, and provide the same total order as coordinate-sorted BAMs. They can encode any contiguous stretch of bases on the reference, or strand-sensitively on its reverse complement. They can encode 0-length intervals (i.e., locations) to indicate things like the precise, unambiguous location of an insert between two reference bases. They're super light-weight, and cache friendly (no references), and they can be compared and tested for equality quickly and locally. They know how to serialize themselves with Kryo. They have a much more complete set of operations to calculate overlaps and underlaps, total order, etc. How will we implement isUpstreamOf using SimpleIntervals, when SimpleIntervals has no concept of contig order?; I think we'd have a heck of a job retrofitting our code to use SimpleIntervals, and a lot of testing to do to prove that the performance loss isn't significant. I'm sorry we struck out in an incompatible direction, but SimpleInterval just didn't seem up to the job at the time we started the SV project.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5154#issuecomment-418520720:449,test,tested,449,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5154#issuecomment-418520720,2,['test'],"['tested', 'testing']"
Testability,SZWFkTGVuZ3RoUmVhZEZpbHRlci5qYXZh) | `100% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: |; | [...s/spark/ParallelCopyGCSDirectoryIntoHDFSSpark.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci90b29scy9zcGFyay9QYXJhbGxlbENvcHlHQ1NEaXJlY3RvcnlJbnRvSERGU1NwYXJrLmphdmE=) | `0% <0%> (-80.612%)` | `0% <0%> (-19%)` | |; | [...institute/hellbender/utils/gcs/GATKGCSOptions.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvR0FUS0dDU09wdGlvbnMuamF2YQ==) | `0% <0%> (-66.667%)` | `0% <0%> (ø)` | |; | [...lbender/engine/datasources/ReferenceAPISource.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvZGF0YXNvdXJjZXMvUmVmZXJlbmNlQVBJU291cmNlLmphdmE=) | `22.013% <0%> (-62.264%)` | `8% <0%> (-26%)` | |; | [...oadinstitute/hellbender/utils/test/XorWrapper.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy90ZXN0L1hvcldyYXBwZXIuamF2YQ==) | `13.043% <0%> (-60.87%)` | `2% <0%> (-6%)` | |; | [...oadinstitute/hellbender/utils/gcs/BucketUtils.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci91dGlscy9nY3MvQnVja2V0VXRpbHMuamF2YQ==) | `41.216% <0%> (-30.405%)` | `26% <0%> (-8%)` | |; | [...llbender/engine/spark/SparkCommandLineProgram.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGVsbGJlbmRlci9lbmdpbmUvc3BhcmsvU3BhcmtDb21tYW5kTGluZVByb2dyYW0uamF2YQ==) | `68.75% <0%> (-25%)` | `6% <0%> (-1%)` | |; | [...nder/tools/spark/BaseRecalibratorSparkSharded.java](https://codecov.io/gh/broadinstitute/gatk/pull/3051?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvYnJvYWRpbnN0aXR1dGUvaGV,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3051#issuecomment-306760437:2422,test,test,2422,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3051#issuecomment-306760437,1,['test'],['test']
Testability,"S_QualByDepth.java:143). at org.broadinstitute.hellbender.tools.walkers.gnarlyGenotyper.GnarlyGenotyperEngine.finalizeGenotype(GnarlyGenotyperEngine.java:121). ... 26 more; ```. ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.tools.walkers.GenotypeGVCFsIntegrationTest > testEntireVariantContext[21](/gatkCloneMountPoint/src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12878.AS.chr20snippet.g.vcf, src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/AS_Annotations.keepRawCombined.expected.vcf, [-A, ClippingRankSumTest, -G, AS_StandardAnnotation, -G, StandardAnnotation, -keep-combined], /gatkCloneMountPoint/src/test/resources/large/human_g1k_v37.20.21.fasta) [31mFAILED[39m[0K. java.lang.AssertionError: AS_QUAL present in one but not in the other expected [null] but found [-2950][0K. at org.testng.Assert.fail(Assert.java:93). at org.testng.Assert.failNotSame(Assert.java:508). at org.testng.Assert.assertNull(Assert.java:444). at org.broadinstitute.hellbender.testutils.VariantContextTestUtils.assertAttributesEquals(VariantContextTestUtils.java:354). at org.broadinstitute.hellbender.testutils.VariantContextTestUtils.assertVariantContextsAreEqual(VariantContextTestUtils.java:427). at org.broadinstitute.hellbender.testutils.VariantContextTestUtils.assertVariantContextsAreEqualAlleleOrderIndependent(VariantContextTestUtils.java:549). at org.broadinstitute.hellbender.tools.walkers.GenotypeGVCFsIntegrationTest.lambda$assertVariantContextsMatch$1(GenotypeGVCFsIntegrationTest.java:297). at org.broadinstitute.hellbender.tools.walkers.GenotypeGVCFsIntegrationTest.assertForEachElementInLists(GenotypeGVCFsIntegrationTest.java:68). at org.broadinstitute.hellbender.tools.walkers.GenotypeGVCFsIntegrationTest.runGenotypeGVCFSAndAssertSomething(GenotypeGVCFsIntegrationTest.java:355). at org.broadinstitute.hellbender.tools.walkers.GenotypeGVCFsIntegrationTest.runGenotypeGVCFSAndAssertSomething(GenotypeGVCF",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6079#issuecomment-539518973:4447,assert,assertNull,4447,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6079#issuecomment-539518973,2,"['Assert', 'assert']","['Assert', 'assertNull']"
Testability,Safely parallelize the gatk and gatk-protected test suites,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1769:47,test,test,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1769,1,['test'],['test']
Testability,SamAssertionUtils.assertSamsEqual should return a more useful message,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/375:18,assert,assertSamsEqual,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/375,1,['assert'],['assertSamsEqual']
Testability,"SamAssertionUtils.samsEqualStringent tries to short-circuit file validation by first doing an md5 compare. Most of the time when we run the test suite (in the current tests 171 out of 193), the short-circuiting fails we do the more expensive read by read test. All of these have one or more that fail md5 check (some are probably crams, which IIRC places the file name in the cram header):. MarkDuplicatesIntegrationTest; AddOrReplaceReadGroupsIntegrationTest; ApplyBQSRIntegrationTest; ApplyBQSRSparkIntegrationTest; BQSRPipelineSparkIntegrationTest; BwaSparkIntegrationTest; GatherBamFilesIntegrationTest; HaplotypeBAMWriterUnitTest; PrintReadsIntegrationTest; ReadsPipelineSparkIntegrationTest; SamAssertionUtilsUnitTest; SamFormatConverterIntegrationTest; SortReadFileSparkIntegrationTest; SortSamIntegrationTest; SplitNCigarReadsIntegrationTest; ClipReadsIntegrationTest",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2395:140,test,test,140,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2395,3,['test'],"['test', 'tests']"
Testability,SamToFastq needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1224:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1224,1,['test'],['tests']
Testability,Same integration test fails with IntegrationTestSpec but passes with manual runCommandLine()/assertSamsEqual() calls,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1164:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1164,2,"['assert', 'test']","['assertSamsEqual', 'test']"
Testability,"Same issue:. ```; error: external filter 'git-lfs filter-process' failed; fatal: src/test/resources/large/cnv/create-pon-control-target-coord-only.pcov: smudge filter lfs failed; warning: Clone succeeded, but checkout failed.; You can inspect what was checked out with 'git status'; and retry the checkout with 'git checkout -f HEAD'; The command ""eval git clone --depth=9999999 https://github.com/broadinstitute/gatk.git broadinstitute/gatk "" failed. Retrying, 2 of 3.; fatal: destination path 'broadinstitute/gatk' already exists and is not an empty directory.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3159#issuecomment-310768892:85,test,test,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3159#issuecomment-310768892,1,['test'],['test']
Testability,"Same question as Louis, which OS (or Docker image) are you running on?. Just FYI, we now have a repo and Travis setup to test out the jars for issues. The tests for this jar passed the last time - I have restarted the build (Ubuntu and MacOSX). https://travis-ci.org/kgururaj/TestGenomicsDBJar/builds/325659272",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4124#issuecomment-356983592:121,test,test,121,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4124#issuecomment-356983592,3,"['Test', 'test']","['TestGenomicsDBJar', 'test', 'tests']"
Testability,"Sans some tests I possibly missed fixing, I think I have responded to all of the comments and cut back on a number of the short argument names. I have also made an attempt to fix the wdls but I have not meticulously tested that they now necessarily work. @droazen",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3891#issuecomment-351841181:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3891#issuecomment-351841181,2,['test'],"['tested', 'tests']"
Testability,"ScoreVariantAnnotations:. Scores variant calls in a VCF file based on site-level annotations using a previously trained model. TODOs:. - [x] Integration tests. Exact-match tests for (non-exhaustive) configurations given by the Cartesian product of the following options:; * Java Bayesian Gaussian Mixture Model (BGMM) backend vs. python sklearn IsolationForest backend; (BGMM tests to be added once PR for the backend goes in.); * non-allele-specific vs. allele-specific; * SNP-only vs. SNP+INDEL (for both of these options, we use trained models that contain both SNP and INDEL scorers as input) ; - [x] Tool-level docs. Minor TODOs:. - [x] Parameter-level docs.; - [x] Parameter/mode validation.; - [x] Double check or add behavior for handling previously filtered input, clearing present filters, etc. Future work:. - [ ] The `score_samples` method of the sklearn IsolationForest is single-threaded. See (possibly stalled) PR at https://github.com/scikit-learn/scikit-learn/pull/14001 and some workarounds using e.g. `multiprocessing` ibid.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7724#issuecomment-1067948563:153,test,tests,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7724#issuecomment-1067948563,6,['test'],['tests']
Testability,"See ""smart tests"" here: https://github.com/broadinstitute/warp/pull/639 Should finish in maybe an hour and a half? Then I'll look at the VerifyNA12878 results.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1061857880:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1061857880,1,['test'],['tests']
Testability,"See #2488 for context. In short, the internal pathways for authentication changed, breaking some tests. We're pushing forward anyways but need to remember to re-enable the code & tests once we can (should be the next release).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2496:97,test,tests,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2496,2,['test'],['tests']
Testability,"See Issue #7622 for more details. In addition to unit tests, here is how I validated:. ```; ##; # Split the WGS list; ##; rm -rf test_split. ./gatk --java-options ""-Xmx4g $DEBUG"" \; WeightedSplitIntervals \; --scatter-count 100 \; --weight-bed-file gvs_vet_weights_1kb.bed \; -R gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta \; --dont-mix-contigs true \; -L wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list \; --output test_split. ##; # merge all the intervals lists back into one; ##; IL=""""; for f in test_split/*-scattered.interval_list; do; IL=""${IL} -I $f ""; done; ./gatk IntervalListTools --ACTION UNION $IL -O test_split/merged.interval_list. #; # compare it to the original; ##; ./gatk CompareIntervalLists \; -R gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta \; -L wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list \; -L2 test_split/merged.interval_list. ##; # A visual check to see that the ordering is the same, and that the only splits; # are across file boundaries; ##; cat test_split/*-scattered.interval_list | grep -v ""@"" | cut -f1-3 > test_split/combined.txt; cat wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list | grep -v ""@"" | cut -f1-3 > test_split/orig.txt; diff -y test_split/orig.txt test_split/combined.txt; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7643:54,test,tests,54,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7643,1,['test'],['tests']
Testability,See [Issue 5277 - Migrate to org.genomicsdb fork](https://github.com/broadinstitute/gatk/issues/5277). . The first genomicsdb 1.0.0.beta jar consists of only a refactoring of all the packages to org.genomicsdb. Note that this pass should have no performance implications compared to the last [Intel release](https://mvnrepository.com/artifact/com.intel/genomicsdb/0.10.2-proto-3.0.0-beta-1+90dad1af8ce0e4d) as there is no change other than refactoring. Issues [5568-buffer resizing excessive logging](https://github.com/broadinstitute/gatk/issues/5568) and [5342-file synching error](https://github.com/broadinstitute/gatk/issues/5342) will both be addressed in the next release.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5587:492,log,logging,492,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5587,1,['log'],['logging']
Testability,"See below:. 1) Are the failures in the same set of nodes?. This job was split into 200 intervals and would have run across a lot of different nodes. One specific interval set is causing issues. That interval/job has failed 3 times, on different nodes with a similar error. 2) Have all the ""nodes"" in the cluster been updated to running gatk v4.1.8.0. they all use the exact same JAR when they execute, which is 4.1.8.0. . 3) Is it possible to attach a file named __array_schema.tdb from one of the arrays causing the segfault?. I renamed it '.txt' to keep github happy, but here is that file. It is from contig QNVO02001146.1, which is the last contig it logged progress from before the error: ; [__array_schema.tdb.txt](https://github.com/broadinstitute/gatk/files/5441668/__array_schema.tdb.txt)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6910#issuecomment-716835521:655,log,logged,655,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6910#issuecomment-716835521,1,['log'],['logged']
Testability,See https://gatk-jenkins.broadinstitute.org/job/gatk-perf-test-spark-readpipeline-exome/,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3573#issuecomment-332574260:58,test,test-spark-readpipeline-exome,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3573#issuecomment-332574260,1,['test'],['test-spark-readpipeline-exome']
Testability,See https://gatkforums.broadinstitute.org/gatk/discussion/12078/gatk-4-4-docker-image-missing-dependancies. Looks like I inadvertently removed this in the great purge of #3935. We should add a test to AnalyzeCovariates to cover plotting as well.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5022:193,test,test,193,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5022,1,['test'],['test']
Testability,"See https://github.com/broadinstitute/gatk/actions/runs/3567534442/jobs/5995349354 for one example. . We originally saw these failures on the branch to move GATK to Java 17, but recently have started seeing the same failures on current PRs when running the tests on Java 11. It looks like this started happening when the CI env recently started resolving to Java 11.0.16.1., where these tests appear to always (?) fail, whereas previously the CI env was resolving to Java 11.0.11+9, where they pass. Although I haven't compared the results for all of the failed cases, I think the failure modes and bad values are the same on both Java 11 and Java 17. We've temporarily pinned the CI environment to use 11.0.11+9 (see https://github.com/broadinstitute/gatk/pull/8102) until we can get this resolved. I'd suspect the easiest way to reproduce the failures is to try running the tests using either Java 17 or Java 11.0.16.1.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8107:257,test,tests,257,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8107,3,['test'],['tests']
Testability,See https://github.com/tomwhite/disq-benchmarks,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5275#issuecomment-464759148:37,benchmark,benchmarks,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5275#issuecomment-464759148,1,['benchmark'],['benchmarks']
Testability,"See pull #812 . > Apply the actual BaseRecalibratorTransform here, and delete the stub. If the ; > ReadsPreprocessingPipelineIntegrationTest fails as a result, temporarily disable the test, ; > create a ticket to fix it, and assign it to me. @droazen",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/829:82,stub,stub,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/829,2,"['stub', 'test']","['stub', 'test']"
Testability,"See some issues---mostly stemming from the HDF5 library and the BLAS library optionally used by MLlib SVD at e.g. https://gatkforums.broadinstitute.org/gatk/discussion/23591/createreadcountpanelofnormals-in-gatk4-1-doesnt-output-valid-hdf5-files#latest; https://gatkforums.broadinstitute.org/gatk/discussion/12537/get-error-when-using-createreadcountpanelofnormals-in-calling-somatic-copy-number-variation; https://gatkforums.broadinstitute.org/gatk/discussion/11461/gatk-4-0-1-2-no-non-zero-singular-values-were-found-in-creating-a-panel-of-normals-for-somatic-cnv/p1. Would also be nice to to turn down the verbosity of Spark logging, which emits a ridiculous amount of messages for a simple SVD. I think this is a relatively ancient issue (https://github.com/broadinstitute/gatk/issues/1370), not sure if it's been resolved for other Spark tools since.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5771:628,log,logging,628,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5771,1,['log'],['logging']
Testability,"See some of my findings about numerical differences across 8/11/17 and possible causes in this old Slack thread: https://broadinstitute.slack.com/archives/C1HH1V5EC/p1657634295565369 We’re starting to get into some relatively hairy issues there, IMO!. But just in case it wasn’t clear: 1) None of these numerical differences should be scientifically concerning in the end, and 2) I think we still have numerical reproducibility within each fixed Java version (although if we happen to see any evidence to the contrary, please point to them here). So I don’t think we have too much to worry about once the test infrastructure settles.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8111#issuecomment-1331407680:605,test,test,605,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8111#issuecomment-1331407680,2,['test'],['test']
Testability,See the log: https://people.freebsd.org/~pi/logs/gatk-4.1.2.0.43.log. The downstream bug report: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=239901,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6097:8,log,log,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6097,3,['log'],"['log', 'logs']"
Testability,Seeing a test failure due to errors with the service account access token. Possibly related to updating the NIO dependency. We've seen this multiple times today. ; ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.nio.GcsNioIntegrationTest.openPublicFile FAILED; com.google.cloud.storage.StorageException: Error getting access token for service account: ; at com.google.cloud.storage.spi.DefaultStorageRpc.translate(DefaultStorageRpc.java:203); at com.google.cloud.storage.spi.DefaultStorageRpc.get(DefaultStorageRpc.java:349); at com.google.cloud.storage.StorageImpl$5.call(StorageImpl.java:186); at com.google.cloud.storage.StorageImpl$5.call(StorageImpl.java:183); at com.google.cloud.RetryHelper.doRetry(RetryHelper.java:179); at com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:244); at com.google.cloud.storage.StorageImpl.get(StorageImpl.java:183); at com.google.cloud.storage.StorageImpl.get(StorageImpl.java:197); at com.google.cloud.storage.contrib.nio.CloudStorageReadChannel.fetchSize(CloudStorageReadChannel.java:194); at com.google.cloud.storage.contrib.nio.CloudStorageReadChannel.<init>(CloudStorageReadChannel.java:72); at com.google.cloud.storage.contrib.nio.CloudStorageReadChannel.create(CloudStorageReadChannel.java:62); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.newReadChannel(CloudStorageFileSystemProvider.java:268); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.newByteChannel(CloudStorageFileSystemProvider.java:229); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.newInputStream(CloudStorageFileSystemProvider.java:348); at java.nio.file.Files.newInputStream(Files.java:152); at org.broadinstitute.hellbender.utils.nio.GcsNioIntegrationTest.openPublicFile(GcsNioIntegra,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2514:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2514,2,['test'],['test']
Testability,Seeing some test failures unfortunately due to the following error:. ```; java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.fs.FileSystem; at org.apache.hadoop.fs.Path.getFileSystem(Path.java:365); ```,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7203#issuecomment-819800585:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7203#issuecomment-819800585,1,['test'],['test']
Testability,Seeking assistance on the build errors -- I don't quite have the bandwidth to decode the logs to figure out what is failing.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7611#issuecomment-998217567:89,log,logs,89,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7611#issuecomment-998217567,1,['log'],['logs']
Testability,Seems like it's working for failing tests both docker and normal now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8718#issuecomment-1981992515:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8718#issuecomment-1981992515,1,['test'],['tests']
Testability,"Seems like there are some commented overrides and method stubs, but there are also some remaining unimplemented methods. See https://github.com/broadinstitute/gatk/pull/7394#discussion_r701351063.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7564:57,stub,stubs,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7564,1,['stub'],['stubs']
Testability,"Seems like there weren't any exact-match tests to update after the latest release, so this should be ready pending your approval, @ldgauthier!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-969089252:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-969089252,1,['test'],['tests']
Testability,"Selected tools will be migrated from picard, with tests. This issue will serve a placeholder for any discussion as to which tools etc. For now, the working assumption is that all public tools will migrate (some exceptions may be tools in picard.illumina which may be too specialized) The package name will remain picard, at least for now. When migrating, put the specific commit name here for reference.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/63:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/63,1,['test'],['tests']
Testability,Seq.WGS.b37.ch20.4379150-4379157.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.10m-10m100.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.10m-10m100.cram.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b36.excluding_sites_after_129.chr1_1k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.20.10m-10m100.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.21.10m-10m100.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.excluding_sites_after_129.ch20.1m-1m1k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.md.bqsr.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.postRecalibrated.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.recalibrated.DIQ.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.2inputs.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.indels_context_size_4.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.low_quality_tail_5.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.mismatches_context_size_4.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.quantizing_levels_6.recal.txt; src/test/resources/org/broadinstitute/hellben,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:19604,test,test,19604,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Set the system property 'dataflowRunner' to the simple classname of the; runner you wish to use. E.g. gradle test -Dtest.single=CountBasesDataflowUnitTest -DdataflowRunner=SparkPipelineRunner,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/546:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/546,1,['test'],['test']
Testability,Set up continuous tests for the conda environment on MacOS in Travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6813:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6813,1,['test'],['tests']
Testability,"Setting a default batch size of 5 since that seemed to work out well in the two Stroke Anderson runs, overridable at the workflow level. Also cleaned up some logging and wrapping exceptions before throwing to avoid confusing stack traces when scanning through logs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7860:158,log,logging,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7860,2,['log'],"['logging', 'logs']"
Testability,Setup Jenkins job to run gatk and picard tests off of every htsjdk master build,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1705:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1705,1,['test'],['tests']
Testability,"Several GQ0 cleanup changes:; Set GGVCFs --all-sites GQ0 hom-refs to no-calls; Set regular GGVCFs GQ0 hom-refs to no-calls (any DP, PL) for better AF/AN annotations; Remove PLs in ""no data"" case where DP=0 for more accurate QUAL score. Users can expect ANs to be reduced where GQ0 hom-refs previously occurred. QUALs may be decreased where PL=[0,0,0] because those genotypes are no longer included in QUAL calculations. QD will change where QUAL changes. InbreedingCoeff and ExcessHet will change because GQ0 hom-refs don't count anymore. None of these changes significantly impacted NA12878 accuracy in exome and WGS tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8741:618,test,tests,618,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8741,1,['test'],['tests']
Testability,"Several changes:. - Fix https://github.com/broadinstitute/gatk/issues/4741, where newer versions of conda appear to treat relative references in the environment yml as being relative to the yml file instead of relative to the cwd (based on observation).; - Add a second conda yml file (`gatkcondaenv.intel.yml`) for environments that use Intel hardware acceleration and Intel Tensorflow package (based on https://github.com/broadinstitute/gatk/pull/4735).; - Add a gradle task (`condaEnvironmentDefinition`) to generate the conda yml files from a single template to ensure that all the environment definitions remain in sync. This task also generates the Python package archive.; - Add a gradle task (`localDevCondaEnv`) to create or update a local (non-Intel) conda environment. This is a shortcut for use during development when you're iteratively changing/testing Python code and want to update the conda env.; - Opportunistically removed the prefix verb ""create"" from the name of the `createPythonPackageArchive` task, which is now called `pythonPackageArchive`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4749:859,test,testing,859,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4749,1,['test'],['testing']
Testability,Share more code between walker and Spark integration tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5723:53,test,tests,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5723,1,['test'],['tests']
Testability,Shorten over-long test file names,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4736:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4736,1,['test'],['test']
Testability,"Should also mention the version of GATK3 that the palantir evaluation should be done with, and provide a link to both a gatk-protected jar and docker image to be used for testing.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2575#issuecomment-291992537:171,test,testing,171,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2575#issuecomment-291992537,1,['test'],['testing']
Testability,Should include a CRAM file test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1133:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1133,1,['test'],['test']
Testability,Should probably be started only after the tests in https://github.com/broadinstitute/hellbender/issues/695 are in place.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/696:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/696,1,['test'],['tests']
Testability,"Should we add this to the gradle build? Unit test require R and various R libraries to be installed, but this isn't mentioned in the documentation or performed by the build script. . I suggest we ; 1. tag all tests that require R in some way so that they can be disabled a system that doesn't have R; 2. add documentation to the readme explaining you need R and a number of r libraries; 3. either document that you must run install_R_packages.R or have gradle do it",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/222:45,test,test,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/222,2,['test'],"['test', 'tests']"
Testability,"Should we mention that when calls are being made (non-GVCF workflow) there is an option for a new QUAL model?. I restarted the one failed travis test. It had failed with; ```; The command ""sudo Rscript scripts/install_R_packages.R"" failed and exited with 1 during .; Your build has been stopped.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3045#issuecomment-307525890:145,test,test,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3045#issuecomment-307525890,1,['test'],['test']
Testability,"Similar issues to last time. Do we have a test case yet that simulates AoU's usage?. In addition to this, the workflow seems to function on an older version of GVS, as long as I make the following modifications:. - Add columns `sample_info.withdrawn`, `sample_info.is_control`; - Backfill true/false accordingly to these columns (backfilling withdrawn seems unnecessary)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7874:42,test,test,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7874,1,['test'],['test']
Testability,"Simple code changes that improve performance of BaseRecalibrator by ~20%. . NOTE: this is not related to removing indels. That will come later and is expected to improve performance further. According to my tests, we now beat GATK3 on the infamous first 10Mb of chr1 in CEUTrio.HiSeq.WGS.b37.NA12878.bam. @droazen can you review? some of those changes are similar to those in #1099",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1114:207,test,tests,207,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1114,1,['test'],['tests']
Testability,"Simple fix to remove trailing slash in GCS_SAVE_PATH to avoid double slashes in GCS_RESULTS_DIR. Without this, if the `manage_sv_pipeline.sh` is launched with `-s gs://custom/path/to/save/` having the trailing slash, log file and cmd line info will be saved to a strange place.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4873:217,log,log,217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4873,1,['log'],['log']
Testability,"SimpleInterval has a constructor that parses an interval String, but without access to a SequenceDictionary its not possible to correctly interpret intervals with contig names such as those used in hg38. It looks like the only non-test consumer of this method is TableCodec. For example:. - `HLA-A*01:01:01:01` is interpreted as `HLA-A*01:01:01:1-1`, but `HLA-A*01:01:01` doesn't exist; - `HLA-A*01:01:01:02N` its interpreted as position `02N` on contig `HLA-A*01:01:01`, which fails to parse, and the contig doesn't exist. GATK command line intervals resolve these by consulting the sequence dictionary. For hg38 at least, there can be no ambiguity and there is always only one correct interpretation. Its possible to construct a legal sequence dictionary that has ambiguities though.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4597:231,test,test,231,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4597,1,['test'],['test']
Testability,Simplified cigar and clipping code; added tests and fixed a few bugs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6403:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6403,1,['test'],['tests']
Testability,Simplifies BQSR covariates - use only 4 standard ones. Remove magic indexing. Add tests. Addresses #258 . @droazen please review,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/413:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/413,1,['test'],['tests']
Testability,"Since I have your attention on the matter, let me test what this looks like.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-351084572:50,test,test,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-351084572,1,['test'],['test']
Testability,"Since I was able to use another fix (shared in #6651), I will not continue working on this PR for now. I have some deadlines unfortunately. . FYI, I haven't had time to finish testing this.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7936#issuecomment-1183123033:176,test,testing,176,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7936#issuecomment-1183123033,1,['test'],['testing']
Testability,Since it's currently difficult to find the links in the travis logs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6234:63,log,logs,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6234,1,['log'],['logs']
Testability,"Since the Picard changes in #3620, SamAssertionUtils has been failing silently. See e.g. the Standard error tab for https://storage.googleapis.com/hellbender-test-logs/build_reports/13120.7/tests/test/classes/org.broadinstitute.hellbender.tools.spark.pipelines.ReadsPipelineSparkIntegrationTest.html:. ```; USAGE: SortSam [arguments]; ...; input is not a recognized option; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3664:158,test,test-logs,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3664,3,['test'],"['test', 'test-logs', 'tests']"
Testability,"Since we are going to change many of those argument names (camel-back to kebab-case) I think we should take this opportunity to use constants to specify argument names in the code and use them in our test code so further changes in argument names don't break tests. . Take as an example [CombineReadCounts](https://github.com/broadinstitute/gatk/blob/3ec7399a54ccf89d2b323b2be71b8b7e4931174c/src/main/java/org/broadinstitute/hellbender/tools/exome/CombineReadCounts.java). Extract enclosed below. It might be also beneficial to add public constant for the default values. ```java; public final class CombineReadCounts extends CommandLineProgram {. public static final String READ_COUNT_FILES_SHORT_NAME = StandardArgumentDefinitions.INPUT_SHORT_NAME;; public static final String READ_COUNT_FILES_FULL_NAME = StandardArgumentDefinitions.INPUT_LONG_NAME;; public static final String READ_COUNT_FILE_LIST_SHORT_NAME = ""inputList"";; public static final String READ_COUNT_FILE_LIST_FULL_NAME = READ_COUNT_FILE_LIST_SHORT_NAME;; public static final String MAX_GROUP_SIZE_SHORT_NAME = ""MOF"";; public static final String MAX_GROUP_SIZE_FULL_NAME = ""maxOpenFiles"";; public static final int DEFAULT_MAX_GROUP_SIZE = 100;. @Argument(; doc = ""Coverage files to combine, they must contain all the targets in the input file ("" +; TargetArgumentCollection.TARGET_FILE_LONG_NAME + "") and in the same order"",; shortName = READ_COUNT_FILE_LIST_SHORT_NAME,; fullName = READ_COUNT_FILE_LIST_FULL_NAME,; optional = true; ); protected File coverageFileList;. @Argument(; doc = READ_COUNT_FILES_DOCUMENTATION,; shortName = READ_COUNT_FILES_SHORT_NAME,; fullName = READ_COUNT_FILES_FULL_NAME,; optional = true; ); protected List<File> coverageFiles = new ArrayList<>();. @Argument(; doc = ""Maximum number of files to combine simultaneously."",; shortName = MAX_GROUP_SIZE_SHORT_NAME,; fullName = MAX_GROUP_SIZE_FULL_NAME,; optional = false; ); protected int maxMergeSize = DEFAULT_MAX_GROUP_SIZE;. @ArgumentCollection; protect",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-346175904:200,test,test,200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3853#issuecomment-346175904,2,['test'],"['test', 'tests']"
Testability,"Since we might need to run the GvsPrepareRangesCallset.wdl in the future just to help to get the callset stats, add an optional input to not create the __REF_DATA and __SAMPLES tables, since those won't be needed. Test runs: ; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/1ee2bc37-abd4-4185-a17d-e1f6b47a6914) `skip_ref_ranges_tables ` set to `true`:; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/2849dfd1-fe41-4757-83f3-fc0f5451eaef) `skip_ref_ranges_tables ` set to `false`; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/5e8c5c4d-6ae5-4117-a5ea-89a05d379cfd) `skip_ref_ranges_tables ` not set (default is false); - [GvsCallsetStatistics run](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/3e14b26f-125b-4742-b7a2-17cab2ac7f6f); ... after changes ... ; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/3560a8a6-71ef-46b4-be64-fd35ea5303c6) `only_output_vet_tables` set to `true`; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/ac3a2126-c3f1-4241-aad5-55ece4178a56) `only_output_vet_tables` set to `false`; - [GvsCreateCohortFromSampleNames](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/35379d1b-b54a-4f5e-990a-9650c92d1ead) run (failed because of other issue)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8079:214,Test,Test,214,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8079,1,['Test'],['Test']
Testability,"Since we never actually look to see if something IS an optical duplicate and only care about the total number, we could just output a single annotation on one read in the best read pair with the number of optical duplicates found for that set of reads. It would make the code simpler but maybe not make as much sense logically?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/749#issuecomment-126755071:317,log,logically,317,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/749#issuecomment-126755071,1,['log'],['logically']
Testability,"Since we're using Mutect2 for mitochondrial calling, we want some reference confidence representation for joint calling. I did my best, but further refactoring suggestions appreciated. Tests to follow. @davidbenjamin can you take a look at the LODs in the integration test results? I'm not entirely surprised that at the same depth, the variant LOD is higher than the reference LOD. I'm not sure that the NON_REF LOD at variant sites is coming out right though. Is there an effective negative LOD asymptote?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5312:185,Test,Tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5312,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Sizes were tested, and vm's were made smaller!!!!!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7658:11,test,tested,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7658,1,['test'],['tested']
Testability,Skipping does look like it would be consistent with what's going to happen downstream anyways. Do you have some data I can use for testing?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6962#issuecomment-730665918:131,test,testing,131,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6962#issuecomment-730665918,1,['test'],['testing']
Testability,"Small PR containing fixes for various issues:; - Move CompareSAMs to picard package (fixes https://github.com/broadinstitute/hellbender/issues/139); - Move most of `CompareSAMs.doWork()` into a separate public method, to be used by external unit tests; - Use HTSJDK's SamFileValidator in assorted unit tests, rather than ValidateSamFile (which is just a CLP wrapper); - Insert `--VERBOSITY ERROR` into CommandLineProgramTest, which suppresses most logging output for CLPs that use HTSJDK-based logging (fixes https://github.com/broadinstitute/hellbender/issues/134)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/171:246,test,tests,246,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/171,4,"['log', 'test']","['logging', 'tests']"
Testability,"Small test that demonstrates numerical error bug, and fix.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/878:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/878,1,['test'],['test']
Testability,"So I just updated one of the newer tests, and now all of the tests for HaplotypeCaller seem to be passing locally. The previous commits updating the copy code were preserved when Louis reverted, so there were basically no changes I had to make to get this ""working."" That does leave us with one question now:. When looking into this a little with James and Louis earlier, we realized that the code for setting up the ActiveRegionGenotyper uses a weird partial copy of the standard CLI args method that has existed in the code for whoever knows how long. Conceptually this seems like a bad idea, but changing it now would possibly cause some older tests to fail, if they were based on this faulty method reasoning. Should we try to merge the PR as it is now, with all tests passing, and hopefully consistency with previous behavior, or try to update the logic around this genotyper as well at the same time? It's possible we can try to address the latter point as well at some point in the future when we try to get Louis's refactor code actually working. Maybe there could be some quarter goal around a HaplotypeCaller code revamp sometime inspired by some of these ideas?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1847916216:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1847916216,5,"['log', 'test']","['logic', 'tests']"
Testability,"So I've encountered users that supply VariantRecalibrator with multiple inputs (which I didn't know it could do), and I have a branch with a new test for that, but I've never seen anyone use the `--aggregate` argument. That argument has weird behavior in that, since those are not ""driving variants"", sites that appear in that file that do not appear in the input aren't used. @droazen what do I have to do to get a +1 do remove that arg?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2290#issuecomment-590450551:145,test,test,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2290#issuecomment-590450551,1,['test'],['test']
Testability,"So a couple of questions:; * Should an external developer always install the R dependencies before running `./gradlew clean test`?; * If the R dependencies are needed for testing and the rest of the code, may be worthy to install them if not present in the gradle script or should be specified that the dependencies are missing... Is there an easy way to do that?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3740#issuecomment-338997058:124,test,test,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3740#issuecomment-338997058,2,['test'],"['test', 'testing']"
Testability,"So most of the jobs are still failing with: `The job exceeded the maximum log length, and has been terminated.` @cmnbroad @droazen What log is travis referring to? In the Travis `Job log` tab I only see < 3000 lines and other tests routinely output way more than that and pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5291#issuecomment-431840225:74,log,log,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5291#issuecomment-431840225,4,"['log', 'test']","['log', 'tests']"
Testability,So the issue was that the manifest syntax for --add-opens that I was using was incorrect - its amazing that all the other tests pass that way - but I can now see how that happens. I have a fix and the test passes now. I just need to clean everything up. Thanks for looking @samuelklee.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1421101428:122,test,tests,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1421101428,2,['test'],"['test', 'tests']"
Testability,So we typically override the config files on the command line. We'll have to make sure we wire the log4j 1.x logger to respect our command line overrides if it doesn't already. You can check that by testing if you can control the log output with the --verbosity command. If not we'll have to update `LoggingUtils.setLoggingLevel()`,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3416#issuecomment-320787794:109,log,logger,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3416#issuecomment-320787794,4,"['Log', 'log', 'test']","['LoggingUtils', 'log', 'logger', 'testing']"
Testability,So... the reservoir downsampler seems to be sensitive to the state of the random number generator. Since several tests depend on the same expected output file I keep having failures. I'm resetting the seed for each test now to see if that will work.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5622#issuecomment-458770303:113,test,tests,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5622#issuecomment-458770303,2,['test'],"['test', 'tests']"
Testability,"Solves #2698.; Three commits, dealing with different problems.; A test failed because of the repackaging but was solved by regenerating the expected file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2701:66,test,test,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2701,1,['test'],['test']
Testability,"Some are camel case already, some are python-style underscored arguments, and none are in the new standard format of #2596. Note that this requires carefully changing our wdls!!! @LeeTL1220 and @vdauwera this is easy enough to do, but any considerations on timing relative to releases or other logistical thoughts?. I notice that this inconsistency is shared with HaplotypeCaller. . .",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3325:294,log,logistical,294,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3325,1,['log'],['logistical']
Testability,"Some code cleanup, some existing class extension, some new utility classes. All made to prepare for complex sv detection. This is the beginning. Related changes are put into the same commit for easier review. Test coverage is expected to drop slightly, but will be take care of in later commits.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3427:209,Test,Test,209,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3427,1,['Test'],['Test']
Testability,"Some comments/questions for the review:; - I'll add a separate ticket to rewrite the integration tests, all of which pass and most of which are disabled since they require access to large files on the broad file system. In the meantime I need to add a couple of small tests to get the coverage back up, and would like to get the CR process started.; - I ported a bunch of support files but need feedback on whether they're in the right location.; - Somewhere I saw something that said GATK no longer supports .ped files ? If not, what should the replacement be in the tests require pedigree input?; - Is it a requirement to support Ploidy > 2 ? The current GATK tool, and thus the HB tool, do not; - I did not port the WalkerTestSpec.disableShadowVCF? Is that needed in Hellbender ?; - Are there other headers I should be applying to the output variant file ?. Command Line Arguments:; - I didn't port the GATK command line argument ""-no_cmd_line_in_header"". Should I ? And if not, should the command line args automatically be propagated to the output vcf file ? I didn't see GATK do this anywhere.; - There was one test that used --variant:dbsnp on the command line but I couldn't find the code that processed that in GATK, not sure what the means on the command line.; - I replaced ""-U LENIENT_VCF_PROCESSING"" with ""--lenient"" (testFileWithoutInfoLineInHeaderWithOverride needs this to pass).; - I replaced ""-L"" with --interval since HB seems to use -L for ""lane"" ?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/792#issuecomment-128798027:97,test,tests,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/792#issuecomment-128798027,5,['test'],"['test', 'testFileWithoutInfoLineInHeaderWithOverride', 'tests']"
Testability,"Some hard-coded parameters that are tuned based on eye-balling inversion test cases.; Also removed some duplicated code.; @cwhelan , would you please take a look? Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1938:73,test,test,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1938,1,['test'],['test']
Testability,Some issues with the ga4gh htsget reference server have come up while the current htsget integration branch has been in development. A a server update is causing the previously passing tests to begin to fail. We need to re-enable them once the server is back on stable footing.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6640:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6640,1,['test'],['tests']
Testability,"Some notes on individual commits:. Updated CallCopyRatioSegments and PreprocessIntervals; reorganized copynumber packages.; -For motivation of changes in CallCopyRatioSegments, see #3825.; -I added the ability to turn off binning in PreprocessIntervals by specifying bin_length = 0.; -I removed the separation between coverage and allelic packages to make the package structure a bit simpler.; -@MartonKN should review, since he wrote PreprocessIntervals and is updating the caller. Added segmentation classes and tests for ModelSegments CNV pipeline.; -I added implementations of copy-ratio, allele-fraction, and ""multidimensional"" (joint) segmentation. All implementations are pretty boilerplate; they simply partition by contig and then call out to KernelSegmenter. Note that there is some logic in multidimensional segmentation that only uses the first het in each copy-ratio interval and if any are available, and imputes the alt-allele fraction to 0.5 if not.; -Makes sense for @mbabadi to review this, since he reviewed the KernelSegmenter PR. Added modeling classes and tests for ModelSegments CNV pipeline.; -Most of this code is copied from the old MCMC code. However, I've done some overall code cleanup and refactoring, especially to remove some overextraction of methods in the allele-fraction likelihoods (see #2860). I also added downsampling and scaling of likelihoods to cut down on runtime. Tests have been simplified and rewritten to use simulated data.; -@LeeTL1220 do you think you could take a look?. Added ModelSegments CLI.; -Mostly control flow to handle optional inputs and validation, but there is some ugly and not well documented code that essentially does the GetHetCoverage step. We'll refactor later, I filed #3915.; -@asmirnov239 can review. This is lower priority than the gCNV VCF writing. Deleted gCNV WDL and Cromwell tests.; -Trivial to review. Added WDL and Cromwell tests for ModelSegments CNV pipeline.; -This includes the cost optimizations from @meganshand a",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3913:514,test,tests,514,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3913,2,"['log', 'test']","['logic', 'tests']"
Testability,Some of our dependencies make logging calls to the Java default logger that don't respect our current log level. We should hook up `LoggingUtils.setLoggingLevel` to the java default logging system so that we can control it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/807:30,log,logging,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/807,5,"['Log', 'log']","['LoggingUtils', 'log', 'logger', 'logging']"
Testability,"Some offline discussions have led us to the conclusion that this is best handled by tools upstream. Adapters should not be simply soft-clipped, so it shouldn't be the responsibility of M2 or HC to include logic to remove adapters.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6346#issuecomment-575334816:205,log,logic,205,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6346#issuecomment-575334816,2,['log'],['logic']
Testability,"Some print messages like this:; ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.smithwaterman.SmithWatermanIntelAlignerUnitTest > testSubstringMatchLong[0](359, 7M, SOFTCLIP) STANDARD_ERROR; 03:09:09.419 WARN NativeLibraryLoader - Unable to load libgkl_utils.so from native/libgkl_utils.so (/tmp/libgkl_utils7398935100372553580.so: Shared object ""libm.so.6"" not found, required by ""libgkl_utils7398935100372553580.so""); Test: Test method testSubstringMatchLong[0](359, 7M, SOFTCLIP)(org.broadinstitute.hellbender.utils.smithwaterman.SmithWatermanIntelAlignerUnitTest) produced standard out/err: 03:09:09.419 WARN IntelSmithWaterman - Intel GKL Utils not loaded; ```. libgkl_utils.so is installed in /usr/local/lib/libgkl_utils.so, which is under the standard prefix location /usr/local where all packages are installed. OS: FreeBSD 14.1",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8939:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8939,5,"['Test', 'test']","['Test', 'test', 'testSubstringMatchLong']"
Testability,"Some recent work by the Green Team as well as some evaluations we have done on our own tools have illuminated that the HaplotypeCaller has a non-deterministic output for some sites (a handful of sites across a typical 30x bam). Typically the differences manifest themselves as minor differences in the annotations at a few sites, for example the qual score and annotations might jitter from run to run like the following two variants: ; `9	103454626	.	A	T	54.60	.	AC=1;AF=0.500;AN=2;BaseQRankSum=0.431;DP=4;ExcessHet=3.0103;FS=0.000;MLEAC=1;MLEAF=0.500;MQ=26.85;MQRankSum=1.383;QD=13.65;ReadPosRankSum=0.000;SOR=2.303	GT:AD:DP:GQ:PL	0/1:2,2:4:62:62,0,78`; `9	103454626	.	A	T	52.60	.	AC=1;AF=0.500;AN=2;BaseQRankSum=0.431;DP=4;ExcessHet=3.0103;FS=0.000;MLEAC=1;MLEAF=0.500;MQ=26.85;MQRankSum=1.383;QD=13.15;ReadPosRankSum=0.000;SOR=2.303	GT:AD:DP:GQ:PL	0/1:2,2:4:60:60,0,78`; We should track down what is causing this error and shore up our score. I have found a test case that apparently reproduces the non-determinism. It seems to be somehow related to running the input data through the Google Connector. That is, the results appear to be reproducibly deterministic (at least over ~25 trials) when the input bam is local, whereas it starts to jitter when run from a `gs://` URL.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6105:962,test,test,962,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6105,1,['test'],['test']
Testability,Some refactoring of where the main WDLs live. Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/009b92ea-9b51-4ebe-8ddd-924c53f28a55).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8970:66,test,test,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8970,1,['test'],['test']
Testability,"Some tests are failing in my local computer due to a missing R package Concretely, test classes with this problem are:. * `AllelicCNVIntegrationTest`; * `PerformSegmentationIntegrationTest`; * `SNPSegmenterUnitTest`; * `PlotACNVResultsIntegrationTest`; * `PlotSegmentedCopyRatioIntegrationTest`; * `HMMUnitTest`; * `SegmenterUnitTest`. Is there any way to skip/ignore this tests when running locally and dependencies are not found, or to pull the R libraries while running `./gradlew clean test`?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3740:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3740,4,['test'],"['test', 'tests']"
Testability,"Somehow our code coverage has dropped by 20% since the changes to shrink the docker image. I'm not sure if the issue is that we're not running a chunk of our tests or if we're not reporting coverage for some of them, but either way there is a problem.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5001:158,test,tests,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5001,1,['test'],['tests']
Testability,"Something similar happens with BED files, and it is a known issue in HTSJDK: https://github.com/samtools/htsjdk/issues/393. I also implemented a failing test with BED file in a [PR](https://github.com/samtools/htsjdk/pull/820), but I don't dare to touch the tabix indexing code because I'm not familiar with the specifications.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2801#issuecomment-305794482:153,test,test,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2801#issuecomment-305794482,1,['test'],['test']
Testability,"Sometimes NON_REF gets a zero and sometimes it's empty. This seems isolated to a much older version of ReblockGVCF, but that was what we were running for production pipeline tests. @droazen I'd like this to go into this week's release",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6442:174,test,tests,174,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6442,1,['test'],['tests']
Testability,"Somewhere between #835 and now, BaseRecalibrator stopped working. When I try to run testBQSRBucket, I get the error below. This test is currently enabled so regression tests should have caught this. ```; java.lang.RuntimeException: java.lang.RuntimeException: java.lang.NoSuchMethodError: com.google.common.base.Stopwatch.createStarted()Lcom/google/common/base/Stopwatch;; at org.broadinstitute.hellbender.tools.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:131); at org.broadinstitute.hellbender.tools.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:104); at org.broadinstitute.hellbender.tools.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:86); at org.broadinstitute.hellbender.tools.dataflow.pipelines.BaseRecalibratorDataflowIntegrationTest.testBQSRBucket(BaseRecalibratorDataflowIntegrationTest.java:176); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.t",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:84,test,testBQSRBucket,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,4,['test'],"['test', 'testBQSRBucket', 'tests']"
Testability,"Sorry @cmnbroad, I misunderstood your comment before - what I've got is that it is ok to have beta/experimental for this, but it's obviosly not what you said, so my fault for not reading carefully. In that case, I would like to have a proposal for how to proceed here:. * I will implement the port for the tools in two independent PRs - just direct translation into the new framework, documentation and kebab-case argument style.; * The port for `RealignerTargetCreator` will be similar to this one; * The port for `IndelRealigner` would not have support for n-way output, although it will be fully functional in other ways. The n-way option can be ported in the future as an extra feature if necessary (maybe the communications team can weight in, and tell if it is really a needed feature); * For the first test, which will be removed before merging, I will use the data from the tutorial. This will be the validation for the port before test data valid for the repository is provided; * For the final tests, I will draft the class with the tests from GAKT3 without the data and disabled, waiting for @sooheelee for meaningful tests (or other people from your team). The main idea is to have two PRs with the port validated with the tutorial data, and add other tests similar to the GATK3's ones for extra validation and/or covering missing codepaths using @sooheelee or ported GATK3 data. Does it makes sense, @cmnbroad and @sooheelee?. @sooheelee - I think that the 1000G data can be a good validation if chromosomes 20/21 have realigned reads without a pair mapping on other chromosomes. In that case, some of that reads can be extracted and reset to the state previous to realignment to validate the new tool.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371728774:809,test,test,809,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371728774,6,['test'],"['test', 'tests']"
Testability,"Sorry @droazen, the previous commit had an error in the tests. I'm rebasing/squashing to make a clear PR and when all check pass (except CLOUD), you can review if you have time. Thank you very much.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1708#issuecomment-246346004:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1708#issuecomment-246346004,1,['test'],['tests']
Testability,"Sorry @ldgauthier, I forgot to test that, I'll do it now. Props for using the word svelte. @droazen-- we have gatk4 installed and updated via bioconda, so I'm not super sure exactly which versions had this problem, just that the current version. If it would help I could roll back `gatk4` to `4.0.12.0` and see if the issue was there as well.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5650#issuecomment-462474405:31,test,test,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5650#issuecomment-462474405,1,['test'],['test']
Testability,"Sorry @magicDGS -- since this is failing tests and needs a rebase/review, and we're extremely pressed for time this morning, this is going to have to wait until the next point release. But don't worry, I think I can safely say that we plan to do point releases frequently -- I'd expect the first one within a couple of weeks.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3998#issuecomment-356314345:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3998#issuecomment-356314345,1,['test'],['tests']
Testability,"Sorry @mlathara -- I made a branch from your fork last week, but I got caught up in other things. I'm very excited about this new feature thought! I was almost done setting up a large scale test and hopefully I can finish that up next week.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-499521801:190,test,test,190,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5970#issuecomment-499521801,1,['test'],['test']
Testability,"Sorry I misled you. Old GATK3 habits die hard. Even though htsjdk is always perfect, I'd like a tiny test for MNP input. Also, I have no idea what will happen when MNPs go into GenomicsDBImport. The best we may be able to do there is parse the GATKCommandLine for HaplotypeCaller in the header during initializeHeaderAndSampleMappings().",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-421357303:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-421357303,1,['test'],['test']
Testability,Sorry I missed the test case. I updated the header of the test case so the pull request passes the integration tests. Thanks!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3472#issuecomment-324430072:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3472#issuecomment-324430072,3,['test'],"['test', 'tests']"
Testability,"Sorry for all the interested people, but I had lately some deadlines unrelated with software development that took most of my time. Now I will have time to come back to other projects, and I would implement the port and tests with @sooheelee data this/next week. I hope that it works for you.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3104#issuecomment-401857759:220,test,tests,220,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3104#issuecomment-401857759,1,['test'],['tests']
Testability,"Sorry for generating a big one:. I've tried to put the relevant commits together. . 10cdeba is the biggest, but mostly refactoring the breakpoint and complication logic into 2 classes: `BreakpointsInference` and `BreakpointComplications`, which now both have class hierarchies. After that cleanup, in the following commits I've put all the efforts for inferring the alt haplotype sequence into the class `BreakpointsInference`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4305:163,log,logic,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4305,1,['log'],['logic']
Testability,"Sorry for the delay @bbimber -- the release is currently being held up by an issue with the Google Cloud requester pays support that is affecting large numbers of GATK users (https://github.com/broadinstitute/gatk/issues/7716). There is an open PR to fix this (https://github.com/broadinstitute/gatk/pull/7730), but tests are not yet passing. . While you wait for the release to come out, you could use the latest nightly docker image (https://hub.docker.com/r/broadinstitute/gatk-nightly/) or build GATK from source to confirm that your NPE is indeed fixed as we believe it to be.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7687#issuecomment-1076598767:316,test,tests,316,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7687#issuecomment-1076598767,1,['test'],['tests']
Testability,"Sorry for the delay here, @droazen - I had some technical problems with my hardware and did not have time to work on this. Back to you with implemented tests!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4469#issuecomment-392004286:152,test,tests,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4469#issuecomment-392004286,1,['test'],['tests']
Testability,"Sorry for the delay, when running the tests individually I get : ; ```; ./gradlew test --tests org.broadinstitute.hellbender.tools.examples.ExampleAssemblyRegionWalkerSparkIntegrationTest; ...; Results: SUCCESS (2 tests, 2 successes, 0 failures, 0 skipped). BUILD SUCCESSFUL; ```; It works when the tests are launched individually, like the other tests.; So it seem like there is a similar problem for these tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-448972714:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511#issuecomment-448972714,7,['test'],"['test', 'tests']"
Testability,Sorry for the late answer @sooheelee and thanks for looking into this. I guess that the tests for the two tools that are in the GATK3 code are the ones that we should reproduce (maybe the large scale will be too large):. * https://github.com/broadgsa/gatk/blob/0b73e380436aaa5a41fb3aab97ab651207669f47/public/gatk-tools-public/src/test/java/org/broadinstitute/gatk/tools/walkers/indels/RealignerTargetCreatorLargeScaleTest.java; * https://github.com/broadgsa/gatk/blob/0b73e380436aaa5a41fb3aab97ab651207669f47/public/gatk-tools-public/src/test/java/org/broadinstitute/gatk/tools/walkers/indels/RealignerTargetCreatorIntegrationTest.java; * https://github.com/broadgsa/gatk/blob/0b73e380436aaa5a41fb3aab97ab651207669f47/public/gatk-tools-public/src/test/java/org/broadinstitute/gatk/tools/walkers/indels/IndelRealignerLargeScaleTest.java; * https://github.com/broadgsa/gatk/blob/7f75fa449605851bc84d1da4e77a7cfed489ea33/public/gatk-tools-public/src/test/java/org/broadinstitute/gatk/tools/walkers/indels/IndelRealignerIntegrationTest.java,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371500428:88,test,tests,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371500428,5,['test'],"['test', 'tests']"
Testability,"Sorry for the late response - I'm only now getting a chance to look at this. I do want to clarify the exact issue you are raising here, do you expect `--force-output-intervals` to write out sites even when there is no evidence in the gvcf? I'm asking because in the issue describing this (https://github.com/broadinstitute/gatk/issues/7005) you had mentioned something about how GenomicsDBFeatureReader required a reference and wasn't sure if you were implying GenomicsDB would get that info from the reference. My understanding of `--force-output-intervals` is that it would cause the resulting output to have homref info if there is evidence in the gvcfs (maybe @droazen can clarify/confirm). As such, the fact that you are getting `N` as the REF would suggest that there is no call made for that particular site. In fact, you can see this in the test case you have here. While it doesn't reproduce the issue, if you examine the output vcf file generated by the test:; - Output contains `N` for `20:10-20` but that is expected because the input gvcf says as much for the first 9999901 bases; ```; 20 1 . N <NON_REF> . . END=9999901 GT:DP:GQ:MIN_DP:PL 0/0:0:0:0:0,0,0; ```; - If you instead change `--force-output-intervals` to `20:9999902-9999910` you will notice that the output file now contains those sites with the right bases and corresponding homref calls:; ```; 20 9999902 . T . . . DP=1 GT:DP:RGQ 0/0:1:3; 20 9999903 . G . . . DP=3 GT:DP:RGQ 0/0:3:9; 20 9999904 . T . . . DP=3 GT:DP:RGQ 0/0:3:9; 20 9999905 . T . . . DP=6 GT:DP:RGQ 0/0:6:18; 20 9999906 . A . . . DP=6 GT:DP:RGQ 0/0:6:18; 20 9999907 . A . . . DP=7 GT:DP:RGQ 0/0:7:21; 20 9999908 . A . . . DP=7 GT:DP:RGQ 0/0:7:21; 20 9999909 . A . . . DP=9 GT:DP:RGQ 0/0:9:27; 20 9999910 . T . . . DP=11 GT:DP:RGQ 0/0:11:33; ```. Since you replied saying the test isn't reproducing the case you expect, maybe you already know all this - but just wanted to clarify that is the case. Having said all that, if you're still seeing a case where RE",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7018#issuecomment-755517894:849,test,test,849,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7018#issuecomment-755517894,2,['test'],['test']
Testability,"Sorry to be a pain... I'm still getting this problem with 4.0.2.1, which according to the tag [description](https://github.com/broadinstitute/gatk/releases/tag/4.0.2.1) should have this issue fixed. ```; Using GATK jar /home/db291g/applications/gatk/gatk-4.0.2.1/gatk-package-4.0.2.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -jar /home/db291g/applications/gatk/gatk-4.0.2.1/gatk-package-4.0.2.1-local.jar FilterMutectCalls --variant gatk4/WW00274.vep.vcf.gz --output test.vcf.gz; 10:00:20.977 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/db291g/applications/gatk/gatk-4.0.2.1/gatk-package-4.0.2.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; 10:00:21.082 INFO FilterMutectCalls - ------------------------------------------------------------; 10:00:21.083 INFO FilterMutectCalls - The Genome Analysis Toolkit (GATK) v4.0.2.1; 10:00:21.083 INFO FilterMutectCalls - For support and documentation go to https://software.broadinstitute.org/gatk/; 10:00:21.083 INFO FilterMutectCalls - Executing as db291g@login01 on Linux v2.6.32-431.23.3.el6.x86_64 amd64; 10:00:21.083 INFO FilterMutectCalls - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_121-b13; 10:00:21.083 INFO FilterMutectCalls - Start Date/Time: March 7, 2018 10:00:20 AM GMT; 10:00:21.083 INFO FilterMutectCalls - ------------------------------------------------------------; 10:00:21.083 INFO FilterMutectCalls - ------------------------------------------------------------; 10:00:21.084 INFO FilterMutectCalls - HTSJDK Version: 2.14.3; 10:00:21.084 INFO FilterMutectCalls - Picard Version: 2.17.2; 10:00:21.084 INFO FilterMutectCalls - HTSJDK Defaults.COMPRESSION_LEVEL : 1; 10:00:21.084 INFO FilterMutectCalls - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 10:00:21.084 INFO FilterMutectCalls - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOL",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4363#issuecomment-371088787:607,test,test,607,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4363#issuecomment-371088787,1,['test'],['test']
Testability,"Sorry to outdate the comments. This code will be ready to go, I believe, when we have either moved the up-to-date back end code that calls indels into CallVariantsFromAlignedContigsSAMSpark, or we have moved SAM input parsing into CallVariantsFromAlignedContigsSpark.; I have now tested it successfully on NA12878 on our cluster.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2444#issuecomment-285752376:280,test,tested,280,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2444#issuecomment-285752376,1,['test'],['tested']
Testability,"Sorry, I completely missed this one in the last weeks. I was waiting for your answer (and @sooheelee's):. 1. I need the test data for the public repository if we would like to reproduce the complete test suite that GATK3 has (see my comment above, https://github.com/broadinstitute/gatk/pull/3112#issuecomment-364866520); 1. The tutorial data might be a possibility for the `IndelRealignment` test suite, but it requires the full reference genome (which is huge and not possible to include in the repository, see https://github.com/broadinstitute/gatk/issues/3104#issuecomment-325612165 for more information). @sooheelee might have an idea about the data and if it can be limited to the reference already on the repository (if I am correct, 20 and 21).; 1. This just came out now when I was looking at my port branches, both this and some backup for others part of the code. If the tool is going to be experimental, I would like to know if it is ok to do not have fully featured tools and fill in some issues in the meantime. For example, in this PR the part of the code uncovered by tests is the `known` indels: the main idea is to comment out the code and throw an exception if the argument is specified, saying that it is not supported yet. In the case of `IndelRealignment`, I would like to leave out in the first iteration for the tool the `NWaySAMFileWriter`, to speed up development and add the support for split output later. Once I know this I will close the PR and sent another one with the `RealignmentTargetCreator`. On the other hand, the `IndelRealigner` tool will take a bit longer, because I haven't look at it for the longest time. Thanks for looking into this @cmnbroad!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371208290:120,test,test,120,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371208290,4,['test'],"['test', 'tests']"
Testability,"Sorry, I didn't add the correct test. This one is closer to the edge case of when you have a large table that is still less than or equal to a total of 400. Back to you @davidbenjamin. Thanks!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2307#issuecomment-266833144:32,test,test,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2307#issuecomment-266833144,1,['test'],['test']
Testability,"Sorry, I guess I didn't see your edit pointing out that line of code. I've indeed looked at that test and more---there's a lot of similar duct tape and inconsistent resetting of the RNG throughout the entire test suite. But since I think we can reasonably assume that there's enough duct tape to make things deterministic overall, I don't think it's worth cleaning up the duct tape just to get neater, but equally deterministic behavior. (Or perhaps can you point to instances of persisting non-determinism, e.g. random failures in Travis?). In any case, I think it makes more sense to focus effort on making cleaner tests for the new tools, rather than make an 11th hour effort to revamp these existing tests. Do you agree?. See e.g. https://github.com/broadinstitute/gatk/issues/6112 for some related discussion. Also added a note mentioning that the original GATK3 expected results have been updated, although now looking back at the commit history, I'm not sure if that was already true.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1063002941:97,test,test,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1063002941,4,['test'],"['test', 'tests']"
Testability,"Sorry, I overlooked the tests failing with `IndexFeatureFile`. Now the checking of a correct index name is made before the creation of the index itself (early failure) and some tests with a block-gzipped extension were failing. I think that now they are solved, @droazen.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2247#issuecomment-258360353:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2247#issuecomment-258360353,2,['test'],['tests']
Testability,"Sorry, but this bug still isn't fixed as of v4.2.6.1. Reproduce as follows:. ```; --read-filter MateDistantReadFilter; --mate-too-distant-length 1500; ```. Instead of a run-time exception (as in v4.2.5.0), HaplotypeCaller simply produces no variant calls at all. Expected behavior would be to exclude paired-end mappings whose TLEN exceeds the parameterized value. Perhaps there is an implementation bug, unrelated to the original problem, that contains faulty logic for doing this. Thanks...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7701#issuecomment-1102943692:461,log,logic,461,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7701#issuecomment-1102943692,2,['log'],['logic']
Testability,"Sorry, it's difficult for me to spot git notifications in my email. . > Maybe @bshifaw can chime in? Are the featured workspaces covered by tests elsewhere? What is the current SOP for taking workflows from this repo, turning them into featured workspaces, and populating their configurations?. Example JSONs with input test data are usually introduced in the gatk-workflows git repos and carried over to the featured workspaces. That isn't to say they are not welcomed from the gatk repo. > @bshifaw related to what Sam was saying - we also have a few standard resources needed to run the workflows that we would like to share with users. What is the standard procedure for doing so? Ideally they would be bundled with featured workspaces, but also accessible from outside of Terra. Workflow resources files that are not already in [broad-references](https://console.cloud.google.com/storage/browser/broad-references) would be saved in the [gatk-best-practices](https://console.cloud.google.com/storage/browser/gatk-best-practices) bucket. In the past i've separated the resources files per workflow directory (e.g. pathseq, cnn-hg38) but you can organize them a different way if the resources files would be shared by other workflows (e.g. somatic-hg38, somatic-b37).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6017#issuecomment-507703719:140,test,tests,140,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6017#issuecomment-507703719,2,['test'],"['test', 'tests']"
Testability,SortBamSpark does not have a SORT_ORDER parameter. once this is fixed - renable tests in SortBamSparkIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1260:80,test,tests,80,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1260,1,['test'],['tests']
Testability,SortSam ShardedInput tests failing.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5881:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5881,1,['test'],['tests']
Testability,"Sounds good to me. On Fri, Apr 14, 2017 at 1:12 PM, tedsharpe <notifications@github.com> wrote:. > Decreases runtime from 55 mins to 47. Produces about the same number of; > variant calls, though some of them are a bit different.; > I've rebased, squashed, and will merge when Travis and local testing have; > completed unless someone objects.; >; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/2593#issuecomment-294193825>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AArTZYkxEIH_svUdoefBP8zwAsgEYtasks5rv6kQgaJpZM4M5Jfg>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2593#issuecomment-294194039:294,test,testing,294,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2593#issuecomment-294194039,1,['test'],['testing']
Testability,"Sounds good. I'll rebase on master and wait for tests to finish, then merge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4063#issuecomment-356003861:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4063#issuecomment-356003861,1,['test'],['tests']
Testability,"Sounds good. I've created the required issues and fixed a small issue that resulted from a package name change. . It passes tests, so merging.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3952#issuecomment-351798068:124,test,tests,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3952#issuecomment-351798068,1,['test'],['tests']
Testability,"Sounds like a good step forward to me. Before we can merge this though, we still need to get it to build and pass tests on Travis, and see what the impact is on the size of the docker image, in case we have an issue with that.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5291#issuecomment-429982889:114,test,tests,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5291#issuecomment-429982889,1,['test'],['tests']
Testability,"Spark - INS: 1394; 18/01/12 20:38:16 WARN org.apache.spark.scheduler.TaskSetManager: Stage 17 contains a task of very large size (2518 KB). The maximum recommended task size is 100 KB.; 18/01/12 20:38:22 WARN org.apache.spark.scheduler.TaskSetManager: Stage 18 contains a task of very large size (2307 KB). The maximum recommended task size is 100 KB.; 20:38:27.207 INFO StructuralVariationDiscoveryPipelineSpark - Processing 501267 raw alignments from 426041 contigs.; 18/01/12 20:38:27 WARN org.apache.spark.scheduler.TaskSetManager: Stage 20 contains a task of very large size (2518 KB). The maximum recommended task size is 100 KB.; 20:38:35.835 INFO StructuralVariationDiscoveryPipelineSpark - Primitive filtering based purely on MQ left 339065 contigs.; 20:38:37.378 INFO StructuralVariationDiscoveryPipelineSpark - 17574 contigs with chimeric alignments potentially giving SV signals.; 18/01/12 20:38:37 WARN org.apache.spark.scheduler.TaskSetManager: Lost task 284.0 in stage 25.0 (TID 43189, cw-test-w-6.c.broad-dsde-methods.internal, executor 7): java.lang.IllegalArgumentException: two input alignments' overlap on read consumes completely one of them.	1_1097_chrUn_JTFH01000492v1_decoy:501-1597_+_1097M6H_60_1_1092_O	483_612_chr17:26962677-26962806_-_482S130M491S_60_-1_281_S; 	at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:681); 	at org.broadinstitute.hellbender.tools.spark.sv.discovery.prototype.ContigAlignmentsModifier.removeOverlap(ContigAlignmentsModifier.java:36); 	at org.broadinstitute.hellbender.tools.spark.sv.discovery.prototype.AssemblyContigAlignmentSignatureClassifier.lambda$processContigsWithTwoAlignments$e28aa838$1(AssemblyContigAlignmentSignatureClassifier.java:114); 	at org.apache.spark.api.java.JavaPairRDD$$anonfun$toScalaFunction$1.apply(JavaPairRDD.scala:1040); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$13.hasNext(Iterator.scala:462); 	at scala.collection.Iterator$$anon$13.hasNe",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4141:2974,test,test-w-,2974,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4141,1,['test'],['test-w-']
Testability,Spark large scale validation: allow tests to be run in push-button fashion using a script or similar,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/695:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/695,1,['test'],['tests']
Testability,Spark logging doesn't respect verbosity argument,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1370:6,log,logging,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1370,1,['log'],['logging']
Testability,Spark logging should be controlled by our verbosity argument. Currently it doesn't seem to be.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1370:6,log,logging,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1370,1,['log'],['logging']
Testability,Spark nightly tests failing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2183:14,test,tests,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2183,1,['test'],['tests']
Testability,"Spark tests in Jenkins are failing nightly. They've been failing since August 29th. This command:. ```; gcloud auth activate-service-account gatktestjenkins@broad-gatk-test.iam.gserviceaccount.com --key-file /scratch/testservice.json --project broad-gatk-test; ./gatk-launch MarkDuplicatesSpark \; --shardedOutput true \; -O /scratch/tmp.md.bam \; --numReducers 0 \; --apiKey $APIKEY \; -I $bamIn \; -- \; --sparkRunner GCS \; --driver-memory 8G \; --cluster $CLUSTERNAME \; --executor-cores 3 \; --executor-memory 25G \; --conf spark.yarn.executor.memoryOverhead=2500""; ```. Fails with:. ```; Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/spark/Logging; at java.lang.ClassLoader.defineClass1(Native Method); at java.lang.ClassLoader.defineClass(ClassLoader.java:763); at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); at java.net.URLClassLoader.defineClass(URLClassLoader.java:467); at java.net.URLClassLoader.access$100(URLClassLoader.java:73); at java.net.URLClassLoader$1.run(URLClassLoader.java:368); at java.net.URLClassLoader$1.run(URLClassLoader.java:362); at java.security.AccessController.doPrivileged(Native Method); at java.net.URLClassLoader.findClass(URLClassLoader.java:361); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at org.apache.spark.util.ChildFirstURLClassLoader.loadClass(MutableURLClassLoader.scala:52); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at org.bdgenomics.adam.serialization.ADAMKryoRegistrator.registerClasses(ADAMKryoRegistrator.scala:85); at org.broadinstitute.hellbender.engine.spark.GATKRegistrator.registerClasses(GATKRegistrator.java:74); at org.apache.spark.serializer.KryoSerializer$$anonfun$newKryo$6.apply(KryoSerializer.scala:125); at org.apache.spark.serializer.KryoSerializer$$anonfun$newKryo$6.apply(KryoSerializer.scala:125); at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33); at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.sc",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2183:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2183,5,"['Log', 'test']","['Logging', 'test', 'tests', 'testservice']"
Testability,"Spark tests on gatk-jenkins are currently failing:. Command:. ```; ./gatk-launch MarkDuplicatesSpark \; --shardedOutput true \; -O /scratch/tmp.md.bam \; --numReducers 0 \; --apiKey $APIKEY \; -I $bamIn \; -- \; --sparkRunner GCS \; --driver-memory 8G \; --cluster $CLUSTERNAME \; --executor-cores 3 \; --executor-memory 25G \; --conf spark.yarn.executor.memoryOverhead=2500""; Error:. 16/11/29 16:21:01 ERROR org.apache.spark.SparkContext: Error initializing SparkContext.; org.apache.spark.SparkException: Could not parse Master URL: 'yarn'; 	at org.apache.spark.SparkContext$.org$apache$spark$SparkContext$$createTaskScheduler(SparkContext.scala:2735); 	at org.apache.spark.SparkContext.<init>(SparkContext.scala:522); 	at org.apache.spark.api.java.JavaSparkContext.<init>(JavaSparkContext.scala:59); 	at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.createSparkContext(SparkContextFactory.java:150); 	at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.getSparkContext(SparkContextFactory.java:82); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:36); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:109); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:167); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:186); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:95); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:102); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:115); 	at org.broadinstitute.hellbender.Main.main(Main.java:157); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(M",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2289:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2289,1,['test'],['tests']
Testability,"Spark tools should be just as easy to run as walkers. Users shouldn't have to write a shell script to invoke spark-submit or gcloud, build a special jar and upload it somewhere, log in to a particular machine, etc. Ideally we want something as simple as: `./hellbender ToolName [toolOptions] [sparkOptions]`, and the engine should figure out whether to invoke spark-submit or gcloud and invoke it on the user's behalf. Options include:; -Invoke spark-submit/gcloud programmatically within hellbender (possibly using a simple `Runtime.getRuntime().exec()` approach). -Write a shell script that can run any hellbender command and auto-delegate to spark-submit / gcloud as necessary.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/961:178,log,log,178,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/961,1,['log'],['log']
Testability,"SparkSharder: add test with long reads (eg., 10,000 bases), and ensure it doesn't crash and a user-friendly message is thrown",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2253:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2253,2,['test'],['test']
Testability,SparkSubmit.scala:210); 	at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:124); 	at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala); Caused by: java.io.IOException: Error reading null at position 0; 	at com.google.cloud.genomics.dataflow.readers.bam.SeekableGCSStream.openStream(SeekableGCSStream.java:126); 	at com.google.cloud.genomics.dataflow.readers.bam.SeekableGCSStream.seek(SeekableGCSStream.java:103); 	at com.google.cloud.genomics.dataflow.readers.bam.SeekableGCSStream.<init>(SeekableGCSStream.java:59); 	at com.google.cloud.genomics.dataflow.readers.bam.BAMIO.openBAMFile(BAMIO.java:67); 	at com.google.cloud.genomics.dataflow.readers.bam.BAMIO.openBAM(BAMIO.java:51); 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:178); 	... 20 more; Caused by: com.google.api.client.googleapis.json.GoogleJsonResponseException: 401 Unauthorized; Anonymous users does not have storage.objects.get access to object mw-pathseq-test/hs37d5cs.reads.sorted.bam.; 	at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:146); 	at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113); 	at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40); 	at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321); 	at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056); 	at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419); 	at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352); 	at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeMedia(,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2394#issuecomment-277823929:9863,test,test,9863,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2394#issuecomment-277823929,1,['test'],['test']
Testability,"SparkTestUtils contains a useful method that tests whether a class is; serializable/deserializable in Kryo. This method is needed by the; gatk-protected test suite, but is not currently packaged in the gatk-public; jar. Moving to utils/test so that it will be packaged.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1849:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1849,3,['test'],"['test', 'tests']"
Testability,"Spin up a public jenkins server for long-running validation tests (and other tests that can't or shouldn't run in travis), or switch from travis to a more flexible CI provider",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1400:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1400,2,['test'],['tests']
Testability,Split integration tests into two roughly equal targets,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2818:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2818,1,['test'],['tests']
Testability,"Split into commits to make things easier to review. The first commit, which is from sl_wgs_acnv_headers_docs, can be ignored and should be removed after that branch is merged. This should be ready for review, but the tests may fail if they run too long; we can trim them more after review.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-354812006:217,test,tests,217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3925#issuecomment-354812006,1,['test'],['tests']
Testability,"Split more travis integration tests into the ""variant calling"" job",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4990:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4990,1,['test'],['tests']
Testability,Split travis integration tests into two jobs to reduce test runtime,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4983:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4983,2,['test'],"['test', 'tests']"
Testability,Split unit tests into two roughly equal targets,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2819:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2819,1,['test'],['tests']
Testability,"SplitNCigarReads is failing due to incompatibilities between htsjdk's version of snappy and Spark's version. Temporary solution is to add system property 'disable.snappy' to force htsjdk to fallback to pure java. Longer term solution likely involves patches to htsjdk and possibly snappy itself. ```; ./gatk-launch SplitNCigarReads -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -O out.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta. Running:; /Users/louisb/Workspace/gatk/build/install/gatk/bin/gatk SplitNCigarReads -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -O out.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta; 15:31:00.516 INFO IntelGKLUtils - Trying to load Intel GKL library from:; jar:file:/Users/louisb/Workspace/gatk/build/install/gatk/lib/gkl-0.1.2.jar!/com/intel/gkl/native/libIntelGKL.dylib; 15:31:00.552 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; [July 20, 2016 3:31:00 PM EDT] org.broadinstitute.hellbender.tools.walkers.rnaseq.SplitNCigarReads --output out.bam --input src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam --reference src/test/resources/large/human_g1k_v37.20.21.fasta --refactor_NDN_cigar_string false --maxReadsInMemory 150000 --maxMismatchesInOverhang 1 --maxBasesInOverhang 40 --doNotFixOverhangs false --disable_all_read_filters false --interval_set_rule UNION --interval_padding 0 --readValidationStringency SILENT --secondsBetweenProgressUpdates 10.0 --disableSequenceDictionaryValidation false --createOutputBamIndex true --createOutputBamMD5 false --addOutputSAMProgramRecord true --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false; [July 20, 2016 3:31:00 PM EDT] Executing as louisb@wm1b0-8ab on Mac OS X 10.10.5 x86_64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_91-b14; Version: Version:4.alpha.1-217-g3ff51ed-SNAPSHOT; 15:31:00.557 INFO SplitNCigarReads - Defaults.BUFFER_SIZE : 131072; 15:31:00.557 INFO SplitNCigarReads - ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2026:339,test,test,339,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2026,4,['test'],['test']
Testability,SplitNCigarReadsIntegrationTest and SplitNCigarReadsUnitTest are bizzarely similar. something weird is going on. the 'integration test' is not really an intergration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1209:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1209,2,['test'],['test']
Testability,Splitting out gatk-testUtils as a separate artifact,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5112:19,test,testUtils,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5112,1,['test'],['testUtils']
Testability,"Squashing and rebasing, will merge as soon as test pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7154#issuecomment-815428668:46,test,test,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7154#issuecomment-815428668,1,['test'],['test']
Testability,"Stacktrace is below. It looks like the default port (8020) is not being picked up.; ```; org.apache.spark.SparkException: Job aborted due to stage failure: Task 8 in stage 5.0 failed 4 times, most recent failure: Lost task 8.3 in stage 5.0 (TID 82, tw-cluster-2-w-4.c.broad-gatk-collab.internal): java.lang.IllegalArgumentEx; ception: Wrong FS: hdfs://tw-cluster-2-m:-1/user/tom/small_spark_eval/dbsnp_138.b37.20.21.vcf, expected: hdfs://tw-cluster-2-m; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:648); at org.apache.hadoop.hdfs.DistributedFileSystem.getPathName(DistributedFileSystem.java:194); at org.apache.hadoop.hdfs.DistributedFileSystem.access$000(DistributedFileSystem.java:106); at org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1305); at org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1301); at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81); at org.apache.hadoop.hdfs.DistributedFileSystem.getFileStatus(DistributedFileSystem.java:1301); at org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426); at hdfs.jsr203.HadoopFileSystem.checkAccess(HadoopFileSystem.java:937); at hdfs.jsr203.HadoopFileSystemProvider.checkAccess(HadoopFileSystemProvider.java:75); at java.nio.file.Files.exists(Files.java:2385); at org.broadinstitute.hellbender.utils.io.IOUtils.assertFileIsReadable(IOUtils.java:551); at org.broadinstitute.hellbender.engine.FeatureDataSource.getFeatureReader(FeatureDataSource.java:292); at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:244); at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:218); at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:202); at org.broadinstitute.hellbender.engine.spark.KnownSitesCache.loadFromFeatureDataSource(KnownSitesCache.java:43); ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3468:1396,assert,assertFileIsReadable,1396,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3468,1,['assert'],['assertFileIsReadable']
Testability,Standardize test data location and naming,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/445:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/445,1,['test'],['test']
Testability,Standardize test results directory between normal/docker tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8718:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8718,2,['test'],"['test', 'tests']"
Testability,"StateSegments.makeCalls(GenotypeCopyNumberTriStateSegments.java:104); at org.broadinstitute.hellbender.tools.exome.germlinehmm.CopyNumberTriStateSegmentCaller.doWork(CopyNumberTriStateSegmentCaller.java:121); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:108); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:166); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:185). ```. You can see all input files here:; /dsde/working/asmirnov/evaluations/Germline_CNV/TCGA/xhmm/debugging. The best fix would probably be to provide a warning to the user about inconsistency between target lists, and then subset input targets to match the those found in read count collection.; You can do that in the makeCalls() method of the GenotypeCopyNumberTriStateSegments tool here:. ```; @Override; protected void makeCalls(final CopyNumberTriStateHiddenMarkovModel model, final TargetCollection<Target> targets, final ReadCountCollection inputCounts) {; logger.info(""Composing list of segment intervals to genotype ..."");; final List<GenotypingSegment> segments = composeGenotypingSegments(segmentsFile, targets);; logger.info(String.format(""A total of %d segments to genotype found"", segments.size()));; final List<ForwardBackwardAlgorithm.Result<Double, Target, CopyNumberTriState>> fbResults = runFWBWAlgorithm(model, inputCounts);; for (final GenotypingSegment segment : segments) {; final VariantContext variant = composeVariantContext(segment, inputCounts.columnNames(), fbResults);; outputWriter.add(variant);; }; }; ```. @vruano Could you please look into this?. ---. @vruano commented on [Wed Oct 05 2016](https://github.com/broadinstitute/gatk-protected/issues/727#issuecomment-251744663). Ok, I will take care of this. For now just to mention that the workaround is to provide a tool with a target file that matches the targets in the input count file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2898:3508,log,logger,3508,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2898,2,['log'],['logger']
Testability,Still got to test my Rc vs 923 add validation branch on the integration test now that it's fixed!,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8592:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8592,2,['test'],['test']
Testability,"Still not sure why the tests failed randomly! all XHMM-related tests use their own RNG with fixed seeds and there are no RNG calls in any parallel streams. Therefore, the randomly generated test data must be identical and fully deterministic across all runs. However, it did not appear to be the case! some test runs triggered a bug in HMMPostProcessor (see below) and some runs didn't. I removed a few unnecessary RNGs and the issue is not reproducible anymore. In particular, both XHMMModel and XHMMEmissionProbabilityCalculator had their own RNG but then again, if the tests are run in a deterministic order, it shouldn't matter. The good news is the bug in HMMPostProcessor is fixed; the bad news is, I still don't know why the tests were not deterministic. I bet the failing issue is (magically!) fixed as a result of pulling out the RNG from XHMMModel and XHMMEmissionProbabilityCalculator. If it occurs again, I'll investigate more. - fixed a bug in HMMPostProcessor that required all samples to be queried in the given list of genotyping segments every time (origin of the failing tests: sometimes the randomly generated genotyping segments contained fewer samples than all samples available for genotyping); - got rid of the unnecessary RNG in XHMMModel to make it stateless (sampling requires an external RNG); - also made XHMMEmissionProbabilityCalculator stateless (sampling requires an external RNG); - truncated the target list used in XHMM integration tests (cuts down the test time by a factor of 10)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3140:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3140,9,['test'],"['test', 'tests']"
Testability,Stop tests from producing adam.log,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1123:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1123,2,"['log', 'test']","['log', 'tests']"
Testability,Stop tests from running when only variant store scripts are touched,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8250:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8250,1,['test'],['tests']
Testability,"Stream.range(0, sizes[idx]); .mapToDouble(i -> 100 * FastMath.abs(rng.nextDouble())).toArray();. final long t0 = System.nanoTime();; apacheLog(vals);; final long t1 = System.nanoTime();; ndLog(vals);; final long t2 = System.nanoTime();; ndJustCreate(vals);; final long t3 = System.nanoTime();. currentApacheStats.addValue((t1 - t0) / 1000000.0);; currentNd4jStats.addValue((t2 - t1) / 1000000.0);; currentNd4jCreationStats.addValue((t3 - t2) / 1000000.0);; }; }. for (int idx = 0; idx < sizes.length; idx++) {; System.out.println(String.format(""N = %d, ApacheFastMath = %f +/- %f ms, Nd4jLog = %f +/- %f ms, Nd4jOverhead = %f +/- %f ms"",; sizes[idx],; apacheStats.get(idx).getMean(), apacheStats.get(idx).getStandardDeviation(),; nd4jStats.get(idx).getMean(), nd4jStats.get(idx).getStandardDeviation(),; nd4jCreationStats.get(idx).getMean(), nd4jCreationStats.get(idx).getStandardDeviation()));; }. }. private double[] apacheLog(final double[] vals) {; return Arrays.stream(vals).parallel().map(FastMath::log).toArray();; }. private double[] ndLog(final double[] vals) {; return Transforms.log(Nd4j.create(vals), false).data().asDouble();; }. private double[] ndJustCreate(final double[] vals) {; return Nd4j.create(vals).data().asDouble();; }; ```. Nd4j is on maven (add `compile 'org.nd4j:nd4j-native-platform:0.5.0'` to the gradle build script). Here's another run [nd4j:0.5.0, 2.8 GHz Core i7]:; ```N = 1, ApacheFastMath = 0.021837 +/- 0.164358 ms, Nd4jLog = 0.029076 +/- 0.083403 ms, Nd4jOverhead = 0.012227 +/- 0.011450 ms; N = 10, ApacheFastMath = 0.230046 +/- 1.897271 ms, Nd4jLog = 0.042676 +/- 0.020724 ms, Nd4jOverhead = 0.016770 +/- 0.009369 ms; N = 100, ApacheFastMath = 0.052309 +/- 0.065039 ms, Nd4jLog = 0.037651 +/- 0.011225 ms, Nd4jOverhead = 0.017572 +/- 0.006995 ms; N = 1000, ApacheFastMath = 0.165869 +/- 1.852535 ms, Nd4jLog = 0.067076 +/- 0.017515 ms, Nd4jOverhead = 0.027893 +/- 0.009753 ms; N = 10000, ApacheFastMath = 0.164083 +/- 0.393109 ms, Nd4jLog = 0.331356 +/- 0.08910",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2577#issuecomment-292667861:2045,log,log,2045,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2577#issuecomment-292667861,1,['log'],['log']
Testability,StreamingProcessControllerUnitTest.testSerialCommands (intermittent?) test failure on Travis.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4014:35,test,testSerialCommands,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4014,2,['test'],"['test', 'testSerialCommands']"
Testability,StreamingPythonExecutor testStderrOutput unit test fails intermittently on Travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5065:24,test,testStderrOutput,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5065,2,['test'],"['test', 'testStderrOutput']"
Testability,StrictVCFModeIsConsistentWithPastResults(HaplotypeCallerSparkIntegrationTest.java:110); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6633#issuecomment-639136429:4495,Test,TestMethodWorker,4495,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6633#issuecomment-639136429,1,['Test'],['TestMethodWorker']
Testability,"String.format(""[%d]"", foo);; } else {; numSparkCores = ""[*]"";; }; DEFAULT_SPARK_MASTER = ""local"" + numSparkCores;; }. ```. Error messages:. ```; java.lang.NullPointerException at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.getSparkContext(SparkContextFactory.java:77); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:36); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:102); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:155); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:174); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:67); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:74); at org.broadinstitute.hellbender.CommandLineProgramTest.runCommandLine(CommandLineProgramTest.java:65); at org.broadinstitute.hellbender.utils.test.testers.SamFileTester.runTest(SamFileTester.java:263); at org.broadinstitute.hellbender.utils.test.testers.AbstractMarkDuplicatesCommandLineProgramTest.testBulkFragmentsNoDuplicates(AbstractMarkDuplicatesCommandLineProgramTest.java:460); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.pri",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1768:2193,test,testers,2193,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1768,1,['test'],['testers']
Testability,StructuralVariationDiscoveryPipelineSpark is generating too much logging info,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4531:65,log,logging,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4531,1,['log'],['logging']
Testability,"Subsampling seems to be the way to go, see #2858. For the record, I did try to implement caching, but this results in excessive cache checking. In general, I think a better solution is to structure code so that expensive global quantities are not unnecessarily recomputed locally. At some point, this sort of undesirable recomputation snuck in during a refactoring of the allele-fraction likelihood code, probably when we tried to make the method for computing site likelihoods pull double duty based on the presence or absence of an allelic PoN. With an allelic PoN, we need to compute a log gamma at each site based on the site-specific bias hyperparameters; without a PoN, we only need to do this once for all sites, since the bias hyperparameters are now global, but the code naively recomputes it.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2860#issuecomment-335621709:589,log,log,589,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2860#issuecomment-335621709,1,['log'],['log']
Testability,Successful Integration Test Run [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/9ab365ff-743b-4d97-9c2a-6a09cf8728f4) - But note that the Exome Integration test failed for slight (and expected) difference in table sizes. I have updated the truth in gs://gvs-internal-quickstart/integration/2023-07-25-quicker/exome_weighted/table_sizes_expected.csv,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8531#issuecomment-1739742037:23,Test,Test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8531#issuecomment-1739742037,2,"['Test', 'test']","['Test', 'test']"
Testability,Successful Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/d43ca844-632b-4737-962e-56369ac91e53),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8696:23,Test,Test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8696,1,['Test'],['Test']
Testability,Successful Joint Calling workflow (Exome) [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Exome%20Beta%20Test%20ggrant/job_history/0ff13881-727f-4fdf-bde7-904559eac58f).; Successful Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/5a35adca-9f75-467c-8441-53f922ab8a7d).; A more recent integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/e0a281c5-c412-4d27-a08d-cbd169f74a1c) (two failures on slight cost differences),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8515#issuecomment-1710547302:201,Test,Test,201,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8515#issuecomment-1710547302,2,"['Test', 'test']","['Test', 'test']"
Testability,"Successful QuickstartIntegration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/afb31873-890e-4660-a4aa-a560a02c5f82). Test runs (all successful on the 3K, run in AoU workspace):; [GvsCreateFilterSet](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/75bca2bd-61fa-4343-a8a7-061b9526a651) (VQSR Lite); [GvsCreateFilterSet](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/f78db8b8-e373-4fbb-af0b-be5186895edd) (VQSR Classic); [GvsExtractCallset](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/766bbeb6-04a6-425f-99d3-f7c0bc388d82) (VQSR Lite); [GVSExtractCallset](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/4e3624ed-d86f-4dc5-ac5f-8a753f4a3b3b) (VQSR Classic); [GvsCalculatePrecisionAndSensitiivity](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/62b29835-d012-42ee-bf3a-bb3e535b29a6) (VQSR Lite); [GVsCalculatePrecisionAndSensitivity](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/dba9be28-c550-45eb-9a2f-b92191f9ceed) (VQSR Classic); [GvsExtractAvroFilesForHail](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/239da02e-f9de-465b-891d-9ea282646c89) (VQSR Lite); [GvsExtractAvroFilesForHail](https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/NHGRI_AnVIL_3K_AoU_Development/job_history/702718fc-d6ad-41b7-bd71-1e6f2acd2b84) (VQSR Lite)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8336#issuecomment-1559577475:168,Test,Test,168,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8336#issuecomment-1559577475,1,['Test'],['Test']
Testability,Successful integration test [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/2065c1e2-c7f3-47b8-8f20-306ba24ad09f),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8345#issuecomment-1568210916:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8345#issuecomment-1568210916,1,['test'],['test']
Testability,Successful test run here: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/379e28fa-7326-43e0-834a-6f8b846ef76f,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8216:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8216,1,['test'],['test']
Testability,"Summary of VQSR Changes; 	- ONLY populate AS_RAW_MQRankSum or AS_RAW_ReadPosRankSum for ref-alt genotypes (0/1, 0/2) not 1/1/,1/2,2,2; 	- AS_RAW_MQ for Non AS... Assign full MQ to alternate allele (don't distribute); 	- Compute SUM(AD) for future use; 	- provide command line option to force the AS-Approximate path even when AS annotations are available (for benchmarking/comparisons)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7718:360,benchmark,benchmarking,360,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7718,1,['benchmark'],['benchmarking']
Testability,Support for log-level TRACE.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6378:12,log,log-level,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6378,1,['log'],['log-level']
Testability,"Suppose the reference haplotype is; TAAGC. . . . TAAGG. . . . and an alt haplotype (SNV at the last G shown) is; TAAGC. . . TAAG**C**. . . Suppose further that we have a read ending in the first TAAGC that has been hard-clipped (to fit the assembly region) to just a 5-base TAAGC stub. Pair-HMM is fully Bayesian and computes the total likelihood of *all* possible alignments of a read to each haplotype. This gives the alt haplotype a factor of 2 advantage because TAAGC matches it in two locations, so there are two perfectly matching alignments instead of one. In log 10 space this is log_10(2) = 0.301, which is greater than our 0.2 threshold for a likelihood to be considered informative. Therefore, by clipping the read and losing the information of its first 96 bases, we end up considering it informative for the wrong haplotype. This can lead to false positives. It *also* causes false negatives because sometimes a read stub from the normal sample get misaligned to the alt haplotype, triggering the normal artifact filter. It also causes problems in our bamout-based MC3 validation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5060:280,stub,stub,280,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5060,3,"['log', 'stub']","['log', 'stub']"
Testability,"Supposing I wanted to re-run HaplotypeCaller from the CRAM, is that a tool that's been tested with CRAM?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334823449:87,test,tested,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3154#issuecomment-334823449,1,['test'],['tested']
Testability,Suppress the `cp: target '/gatk/srcdir' is not a directory` error message that appears in all of the travis logs by creating the target srcdir first in run_unit_tests.sh.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5878:108,log,logs,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5878,1,['log'],['logs']
Testability,"Sure, but then where would the WDL point? If the purpose for this PR was to make the WDL default to an available version of the file, that's done but it's pointing to that file on GCS. Maybe I'm missing something, but it seems like we can't test this with Travis and have the default location point to the actual GCS bucket holding the transcript list...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5872#issuecomment-482416039:241,test,test,241,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5872#issuecomment-482416039,1,['test'],['test']
Testability,Surgical changes to the VariantContextTestUtils to allow the GenomicsDB importer to tests to compare variants coming from a BCF stream with variants coming from a VCF stream.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2610:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2610,1,['test'],['tests']
Testability,Switch to OneShotLogger for logging this message,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3828:28,log,logging,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3828,1,['log'],['logging']
Testability,Switch to logging a warning instead of an exception for intervals in query that were not part of GenomicsDBImport,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8987:10,log,logging,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8987,1,['log'],['logging']
Testability,"Switch to using async IO by default. It's an out-of-the-box win for almost everybody because almost everyone has more than 1 CPU. Difference is write speed is at least 20%. . Also added a line to the output that indicates what IO we're using (a'la deflater). On single processors it is slower than syncIO, so you can turn it off by running like this:. ```; JAVA_OPTS=""-Dsamjdk.use_async_io=false"" ./gatk-launch PrintReads .....; ```. @lbergelson can you review and test?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1588:465,test,test,465,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1588,1,['test'],['test']
Testability,Switched to version in https://github.com/droazen/google-cloud-java/tree/dr_better_nio_retries to test JP's modifications to my original patch.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3295#issuecomment-316210736:98,test,test,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3295#issuecomment-316210736,1,['test'],['test']
Testability,Switching over remaining usages of TestPipeline,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/564:35,Test,TestPipeline,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/564,1,['Test'],['TestPipeline']
Testability,"System specs - (RedHat, Java 1.8.0_144); Clean git clone. ```; gradlew --stacktrace; Creating GATK Python package archive...; :createPythonPackageArchive UP-TO-DATE; :compileJava UP-TO-DATE; :processResources UP-TO-DATE; :classes UP-TO-DATE; :gatkTabComplete; error: error reading /vsc-hard-mounts/leuven-user/304/vsc30484/.gradle/caches/modules-2/files-2.1/org.spire-math/spire_2.11/0.11.0/998b1c1d841baf4fc5d1b119ea55f165f6684ef5/spire_2.11-0.11.0.jar; error in opening zip file; 1 error; :gatkTabComplete FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':gatkTabComplete'.; > Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/vsc-hard-mounts/leuven-data/304/vsc30484/git/gatk/build/tmp/gatkTabComplete/javadoc.options'. * Try:; Run with --info or --debug option to get more log output. * Exception is:; org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':gatkTabComplete'.; at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69); at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46); at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35); at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64); at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58); at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52); at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52); at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53); at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.exec",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4155:864,log,log,864,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4155,1,['log'],['log']
Testability,"System.out.println(String.format(""N = %d, ApacheFastMath = %f +/- %f ms, Nd4jLog = %f +/- %f ms, Nd4jOverhead = %f +/- %f ms"",; sizes[idx],; apacheStats.get(idx).getMean(), apacheStats.get(idx).getStandardDeviation(),; nd4jStats.get(idx).getMean(), nd4jStats.get(idx).getStandardDeviation(),; nd4jCreationStats.get(idx).getMean(), nd4jCreationStats.get(idx).getStandardDeviation()));; }. }. private double[] apacheLog(final double[] vals) {; return Arrays.stream(vals).parallel().map(FastMath::log).toArray();; }. private double[] ndLog(final double[] vals) {; return Transforms.log(Nd4j.create(vals), false).data().asDouble();; }. private double[] ndJustCreate(final double[] vals) {; return Nd4j.create(vals).data().asDouble();; }; ```. Nd4j is on maven (add `compile 'org.nd4j:nd4j-native-platform:0.5.0'` to the gradle build script). Here's another run [nd4j:0.5.0, 2.8 GHz Core i7]:; ```N = 1, ApacheFastMath = 0.021837 +/- 0.164358 ms, Nd4jLog = 0.029076 +/- 0.083403 ms, Nd4jOverhead = 0.012227 +/- 0.011450 ms; N = 10, ApacheFastMath = 0.230046 +/- 1.897271 ms, Nd4jLog = 0.042676 +/- 0.020724 ms, Nd4jOverhead = 0.016770 +/- 0.009369 ms; N = 100, ApacheFastMath = 0.052309 +/- 0.065039 ms, Nd4jLog = 0.037651 +/- 0.011225 ms, Nd4jOverhead = 0.017572 +/- 0.006995 ms; N = 1000, ApacheFastMath = 0.165869 +/- 1.852535 ms, Nd4jLog = 0.067076 +/- 0.017515 ms, Nd4jOverhead = 0.027893 +/- 0.009753 ms; N = 10000, ApacheFastMath = 0.164083 +/- 0.393109 ms, Nd4jLog = 0.331356 +/- 0.089105 ms, Nd4jOverhead = 0.152498 +/- 0.054611 ms; N = 100000, ApacheFastMath = 0.828509 +/- 0.259002 ms, Nd4jLog = 1.863066 +/- 0.348823 ms, Nd4jOverhead = 1.359101 +/- 0.336344 ms; N = 10000000, ApacheFastMath = 65.555431 +/- 15.020319 ms, Nd4jLog = 144.962199 +/- 15.107102 ms, Nd4jOverhead = 116.420955 +/- 11.090896 ms; ```. For Nd4j and N = 10_000_000, the _actual_ log computation time is only ~ 30 ms (3 ns per log), though, there's a giant JNI overhead of ~ 116 ms (12 ns per log, 4x the execution time!).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2577#issuecomment-292667861:3409,log,log,3409,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2577#issuecomment-292667861,3,['log'],['log']
Testability,"TBH I'm not sure what went wrong with the previous image, I just re-baked a new one with the current version of gcloud-sdk and that seems to be working (or at least gsutil does not immediately explode). Test run here https://job-manager.dsde-prod.broadinstitute.org/jobs/016779a9-62d0-4195-9598-5f0eee559d99",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8289:203,Test,Test,203,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8289,1,['Test'],['Test']
Testability,"TEST - DO NOT MERGE: Revert ""Fix BucketUtils#dirSize on GCS. #3437 (#3539)""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3546:0,TEST,TEST,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3546,1,['TEST'],['TEST']
Testability,TE_Q0S.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-normal.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-tumor.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/collectfragmentcounts/collect-fragment-counts-NA12878.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.dict; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.cram.crai; src/test/resources/org/broadinsti,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:25656,test,test,25656,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,TKException: Timeout waiting for background stream write to complete; 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterService.waitForPreviousBatchCompletion(AsynchronousStreamWriterService.java:96); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.dispatchABatch(AsynchronousStreamWriterServiceUnitTest.java:79); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.testAsyncWriteInBatches(AsynchronousStreamWriterServiceUnitTest.java:35); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.grad,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4024:1095,test,testng,1095,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4024,1,['test'],['testng']
Testability,TODO:; Builder method; Still want to fully test the compressed location method (do we? do we care about this for Azure?!??!); Still want to fully test the header creation. to run this locally:; java -jar ../build/libs/gatk.jar \; CreateVariantIngestFiles \; -V HG00405.haplotypeCalls.er.raw.vcf.gz.rb.g.vcf.gz \; -L wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list \; -IG FORTY \; --force-loading-from-non-allele-specific false \; --ignore-above-gq-threshold false \; --project-id gvs-internal \; --dataset-name hatcher_import_test \; --enable-reference-ranges true \; --enable-vet true \; --enable-vcf-headers true \; --output-type PARQUET \; -SN SM-N58BO \; -SNM sample_map.csv \; --ref-version 38 \; --skip-loading-vqsr-fields false,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8845:43,test,test,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8845,2,['test'],['test']
Testability,T_10_CT_15_X_CCCCC_XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-normal.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-tumor.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/collectfragmentcounts/collect-fragment-counts-NA12878.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.dict; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.dict; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.fasta.fai;,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:25773,test,test,25773,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"T_increase_smoothing_4030_1.modelBegin.af.param; 09:45:23.660 INFO MultidimensionalModeller - Initial number of segments before smoothing: 638; 09:45:23.660 INFO MultidimensionalModeller - Smoothing iteration: 1; 09:45:23.660 INFO MultidimensionalModeller - Number of segments before smoothing iteration: 638; 09:45:23.662 INFO MultidimensionalModeller - Number of segments after smoothing iteration: 398; 09:45:23.663 INFO MultidimensionalModeller - Fitting copy-ratio model...; 09:45:24.508 INFO GibbsSampler - Starting MCMC sampling.; 09:45:26.962 INFO GibbsSampler - 25 of 100 samples generated.; 09:45:29.471 INFO GibbsSampler - 50 of 100 samples generated.; 09:45:31.911 INFO GibbsSampler - 75 of 100 samples generated.; 09:45:34.335 INFO GibbsSampler - 100 of 100 samples generated.; 09:45:34.335 INFO GibbsSampler - MCMC sampling complete.; 09:45:34.335 INFO MultidimensionalModeller - Fitting allele-fraction model...; 09:45:34.359 INFO AlleleFractionInitializer - Initializing allele-fraction model, iterating until log likelihood converges to within 0.500000...; 09:45:34.724 INFO AlleleFractionInitializer - Iteration 1, model log likelihood = -599072.084975...; 09:45:34.724 INFO AlleleFractionInitializer - AlleleFractionGlobalParameters{meanBias=1.150935, biasVariance=0.041480, outlierProbability=0.032502}; 09:45:35.017 INFO AlleleFractionInitializer - Iteration 2, model log likelihood = -599060.773672...; 09:45:35.018 INFO AlleleFractionInitializer - AlleleFractionGlobalParameters{meanBias=1.153086, biasVariance=0.035405, outlierProbability=0.036256}; 09:45:35.337 INFO AlleleFractionInitializer - Iteration 3, model log likelihood = -599057.851664...; 09:45:35.337 INFO AlleleFractionInitializer - AlleleFractionGlobalParameters{meanBias=1.147247, biasVariance=0.033414, outlierProbability=0.038948}; 09:45:35.631 INFO AlleleFractionInitializer - Iteration 4, model log likelihood = -599057.518701...; 09:45:35.631 INFO AlleleFractionInitializer - AlleleFractionGlobalParameter",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4683#issuecomment-382805732:4754,log,log,4754,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4683#issuecomment-382805732,1,['log'],['log']
Testability,TableFeature javadoc and more tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3175:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3175,1,['test'],['tests']
Testability,TableFeature needs javadoc and more tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/453:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/453,1,['test'],['tests']
Testability,"Technically, the Hadoop upgrade is not required for this, since we're temporarily reverting back to a Java 11 version that doesn't trigger the version parsing issues that surface with older Haddop/Jetty versions, but we may as well keep it, since we'll need it once we fix the ModelSegments tests and switch back to using current Java 11 versions.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8102#issuecomment-1330749145:291,test,tests,291,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8102#issuecomment-1330749145,1,['test'],['tests']
Testability,Temporarily disable HtsgetReader tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6804:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6804,1,['test'],['tests']
Testability,Temporarily disable IndexFeatureFile and tests to avoid creation of bad indices.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3057:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3057,1,['test'],['tests']
Testability,Temporary branch for CARROT test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7039:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7039,1,['test'],['test']
Testability,Terrific! I'll merge once the bucket migration error gets resolved and that last failing test passes.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1551542600:89,test,test,89,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351#issuecomment-1551542600,1,['test'],['test']
Testability,Test --missingValuesInExpressionsShouldEvaluateAsFailing in VariantFiltration,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2323:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2323,1,['Test'],['Test']
Testability,Test BQSR with multiple known sites files,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/231:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/231,1,['Test'],['Test']
Testability,Test DetermineGermlineContigPloidy on known aneuploidy samples,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4371:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4371,1,['Test'],['Test']
Testability,Test GATK4 with the existing S3 NIO plugin and get basic S3 read support working,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3708:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3708,1,['Test'],['Test']
Testability,Test HaplotypeCaller memory usage on pathological samples,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4272:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4272,1,['Test'],['Test']
Testability,Test JEXL behavior for missing FORMAT value,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2570:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2570,1,['Test'],['Test']
Testability,Test Microbe's variant recapture using pile-up regenotyping in Malaria data.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7321:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7321,1,['Test'],['Test']
Testability,Test NuMT filtering thresholds,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6569:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6569,1,['Test'],['Test']
Testability,Test Ticket GitZen,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6380:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6380,1,['Test'],['Test']
Testability,Test Type | JDK | Job ID | Logs |; | --------- |---- | ------ | ---- |; | unit | openjdk11 | [33966.13](https://travis-ci.com/broadinstitute/gatk/jobs/501303134) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.13/tests/test/index.html) |; | unit | openjdk8 | [33966.3](https://travis-ci.com/broadinstitute/gatk/jobs/501303124) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.3/tests/test/index.html) |; | unit | openjdk11 | [33966.13](https://travis-ci.com/broadinstitute/gatk/jobs/501303134) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.13/tests/test/index.html) |; | unit | openjdk8 | [33966.3](https://travis-ci.com/broadinstitute/gatk/jobs/501303124) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.3/tests/test/index.html) |; | unit | openjdk11 | [33966.13](https://travis-ci.com/broadinstitute/gatk/jobs/501303134) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.13/tests/test/index.html) |; | unit | openjdk8 | [33966.3](https://travis-ci.com/broadinstitute/gatk/jobs/501303124) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.3/tests/test/index.html) |; | unit | openjdk11 | [33966.13](https://travis-ci.com/broadinstitute/gatk/jobs/501303134) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.13/tests/test/index.html) |; | unit | openjdk8 | [33966.3](https://travis-ci.com/broadinstitute/gatk/jobs/501303124) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.3/tests/test/index.html) |; | unit | openjdk8 | [33966.3](https://travis-ci.com/broadinstitute/gatk/jobs/501303124) | [logs](https://storage.googleapis.com/hellbender-test-logs/build_reports/ah_var_store_33966.3/tests/test/index.html) |; | unit | openjdk8 | [33966.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7221#issuecomment-827314679:1155,log,logs,1155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7221#issuecomment-827314679,1,['log'],['logs']
Testability,Test aren't running for fork pull requests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/810:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/810,1,['Test'],['Test']
Testability,Test coverage on the Hadoop-BAM project is currently an abysmal 26% (https://github.com/HadoopGenomics/Hadoop-BAM/issues/51). Let's contribute some tests to both bring this number up and build our own expertise in that codebase.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1440:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1440,2,"['Test', 'test']","['Test', 'tests']"
Testability,Test coverage seem ok.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2285#issuecomment-264357109:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2285#issuecomment-264357109,1,['Test'],['Test']
Testability,Test crams that have a .crai index (as opposed to a .bai index),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/921:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/921,1,['Test'],['Test']
Testability,Test crams that have a .crai index (as opposed to a .bai index) #921,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/988:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/988,1,['Test'],['Test']
Testability,Test data to illustrate bug in GenotypeGVCFs.removeNonRefAlleles(),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6406:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6406,1,['Test'],['Test']
Testability,Test extraction run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/afe543d0-d974-4865-a79c-fe433690c055),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8828:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8828,1,['Test'],['Test']
Testability,Test failure is false alarm? @cmnbroad,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399568778:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4931#issuecomment-399568778,1,['Test'],['Test']
Testability,Test failure is unrelated.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6628:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6628,1,['Test'],['Test']
Testability,Test filtering in gradle stopped working,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1802:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1802,1,['Test'],['Test']
Testability,Test for presence of ack result message and simplify ProcessControllerAckResult API,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7816:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7816,1,['Test'],['Test']
Testability,Test infrastructure for framework users,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2033:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2033,1,['Test'],['Test']
Testability,Test input and golden outputs for GenomicsDB Importer test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2462:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2462,2,"['Test', 'test']","['Test', 'test']"
Testability,Test keep failing despite restart. Help? @lbergelson?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4035#issuecomment-356012188:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4035#issuecomment-356012188,1,['Test'],['Test']
Testability,"Test out the preview version of the GKL, containing the new native PDHMM. The jar was build using Java 1.8 and contains AVX optimized binaries for Linux hosts and not optimized binaries for Mac (Intel CPUs). Example code showing how to call into the PDHMM is here: ; https://github.com/Intel-HLS/GKL/blob/master/src/test/java/com/intel/gkl/pdhmm/IntelPDHMMUnitTest.java",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8712:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8712,2,"['Test', 'test']","['Test', 'test']"
Testability,Test out the preview version of the next GKL (DO NOT MERGE),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8712:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8712,1,['Test'],['Test']
Testability,"Test pass, @fleharty want to merge?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7303#issuecomment-861100773:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7303#issuecomment-861100773,1,['Test'],['Test']
Testability,Test read/transform/write with lots of workers,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/280:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/280,1,['Test'],['Test']
Testability,Test reading sharded BAM files,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/935:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/935,2,['Test'],['Test']
Testability,Test report URL is not accurate for testOnPackagedReleaseJar.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5029:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5029,2,"['Test', 'test']","['Test', 'testOnPackagedReleaseJar']"
Testability,Test response,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6353#issuecomment-571729085:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6353#issuecomment-571729085,1,['Test'],['Test']
Testability,Test run here: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/81030f0d-af0e-4f75-8350-0dfeabb5e4a3,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8640:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8640,1,['Test'],['Test']
Testability,Test run here: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/7f2307e7-684d-45d7-a4e7-852a666ec440,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8011:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8011,1,['Test'],['Test']
Testability,Test run with `load_data_scatter_width` set: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/f10f47ab-8b5b-428a-b418-c9dc9f9c3a58; Test run with `load_data_scatter_width` not set: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/5bf5fe73-10d6-4df2-a5df-3f793c25ebde; integration run: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/84f14232-dc62-4ce5-8031-7840f7f2aedc,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8985:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8985,2,['Test'],['Test']
Testability,"Test run: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/60e18b74-9d4d-45d1-b62e-34d2afce2d3b (it is expected — I believe — that ClinvarSignificance, SpotCheckForAAChangeAndExonNumberConsistency, and CheckForNullColumns would fail on a 10-sample VAT).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8669:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8669,1,['Test'],['Test']
Testability,Test runs after PR feedback-based changes:. - Sample run with interval of 5k lines: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/8ac48d8a-f2ca-4cef-bc10-271d3503d607; - Sample run with interval of 10k lines (it determined that this was too many intervals and just ran for all): https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/b6189b51-fa16-46c2-953c-4571045eae34,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8666#issuecomment-1917906310:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8666#issuecomment-1917906310,1,['Test'],['Test']
Testability,Test runs to (1) show no loss of functionality and (2) addition of new functionality:. - Baseline (`ah_var_store`) run with only chr20: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/a4216ae6-2ae3-40da-a149-cd13d2874cf0.; - Baseline (`ah_var_store`) run with all chromosomes: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/c061273c-6426-49b2-9b2d-036f201cb4cd.; - Branch run with only chr20: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/e0b5297d-fae8-4406-81f7-fa488fd7c835.; - Branch run with all chromosomes: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/fbc106a1-fdd5-4a26-97e6-e23bdf6a2096.; - Branch run with chr1 - chr22 (no sex chromosomes): https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/4c1e82bc-533f-41ef-8fb3-05d8d359a0a6. - Branch run with only chr20 after cleanup: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/064f8014-ae72-4a38-8230-676b8a096179,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8365:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8365,1,['Test'],['Test']
Testability,Test spark tools with cram,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/966:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/966,1,['Test'],['Test']
Testability,Test suite failing locally in non-AVX machines,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3732:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3732,1,['Test'],['Test']
Testability,Test that providing a pre-created splitting index speeds up hadoop bam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1568:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1568,1,['Test'],['Test']
Testability,Test that sharded files written with `ReadsSparkSink` can be read back with `ReadsSparkSource`.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/935:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/935,1,['Test'],['Test']
Testability,Test the scripts running on Dataproc 1.3. See https://github.com/broadinstitute/gatk/pull/5125#issuecomment-417345290 for background.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5152:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5152,1,['Test'],['Test']
Testability,Test to validate that CRAM MD5 slice calculation matches samtools.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3430:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3430,1,['Test'],['Test']
Testability,Test to verify fix for https://github.com/broadinstitute/gatk/issues/3669 now that the htsjdk fix (https://github.com/samtools/htsjdk/pull/1125) is in.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4916:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4916,1,['Test'],['Test']
Testability,Test to verify that picard interval lists are handled properly by GATK tools. Validates the fix for https://github.com/broadinstitute/gatk/issues/3555.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3827:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3827,1,['Test'],['Test']
Testability,Test will fail until htsjdk is updated. Fixes https://github.com/broadinstitute/gatk/issues/6475.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7066:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7066,1,['Test'],['Test']
Testability,Test with HLA / alternate contigs.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4317#issuecomment-424426872:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4317#issuecomment-424426872,1,['Test'],['Test']
Testability,Test(IntegrationTestSpec.java:108); at org.broadinstitute.hellbender.tools.walkers.filters.VariantFiltrationIntegrationTest.testClusteredSnps(VariantFiltrationIntegrationTest.java:36); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:133); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:83); at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1638:1867,Test,TestRunner,1867,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1638,1,['Test'],['TestRunner']
Testability,TestCRAM.QT_10.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.CT_15_1115.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.CT_15_1115.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.CT_15.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.CT_15.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_0.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_0.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CR_SOFTCLIP_BASES.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CR_SOFTCLIP_BASES.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CR_WRITE_NS.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CR_WRITE_NS.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CR_WRITE_Q0S.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CR_WRITE_Q0S.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10.tmp; src/test/reso,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:24059,test,test,24059,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94); 	at com.sun.proxy.$Proxy,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:3637,Test,TestNGTestClassProcessor,3637,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,2,['Test'],['TestNGTestClassProcessor']
Testability,TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94); 	at com.sun.proxy.$Proxy,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6633#issuecomment-639136429:5328,Test,TestNGTestClassProcessor,5328,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6633#issuecomment-639136429,1,['Test'],['TestNGTestClassProcessor']
Testability,TestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93); ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:2413,test,testing,2413,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,3,['test'],['testing']
Testability,TestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93); ,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6086#issuecomment-519578293:2050,test,testing,2050,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6086#issuecomment-519578293,1,['test'],['testing']
Testability,TestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2969,Test,TestNG,2969,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['Test'],['TestNG']
Testability,TestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253:2990,Test,TestNG,2990,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6652#issuecomment-672024253,1,['Test'],['TestNG']
Testability,TestMethods(Invoker.java:1131); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:773); 	at org.testng.TestRunner.run(TestRunner.java:623); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); 	at org.testng.SuiteRunner.run(SuiteRunner.java:259); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); 	at org.testng.TestNG.run(TestNG.java:1018); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93); 	at com.sun.proxy.$Proxy2.stop(Unknown Source); 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWo,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:5388,test,testing,5388,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,1,['test'],['testing']
Testability,"TestNG 7.0.0 is out of beta now, so this should be OK to go in @jamesemery.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5787#issuecomment-527065605:0,Test,TestNG,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5787#issuecomment-527065605,1,['Test'],['TestNG']
Testability,TestUtils.java:67); 	at org.broadinstitute.hellbender.tools.funcotator.vcfOutput.VcfOutputRendererUnitTest.testExclusionListOverridesManualDefaultAnnotations(VcfOutputRendererUnitTest.java:40); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:2696,Test,TestMethodWorker,2696,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,1,['Test'],['TestMethodWorker']
Testability,"TestWrapper.enableDRDQ"": ""true"",; ""TestWrapper.enableFRD"": ""true"",; ""TestWrapper.evalLabel"": ""GATK"",; ""TestWrapper.gatk_docker_override"": ""image_build:gatk|b42606886deb0d0e1cc05a9ac3c2673f75309c67"",; ""TestWrapper.hapMap"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.haplotype_database.txt"",; ""TestWrapper.input_bam"": ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Concordance/CHMI_CHMI3_WGS1_downsampled.bam"",; ""TestWrapper.input_bam_index"": ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Concordance/CHMI_CHMI3_WGS1_downsampled.bam.bai"",; ""TestWrapper.make_bamout"": ""true"",; ""TestWrapper.make_gvcf"": ""false"",; ""TestWrapper.preemptible"": ""0"",; ""TestWrapper.refDict"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.dict"",; ""TestWrapper.refIndex"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta.fai"",; ""TestWrapper.ref_dict"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.dict"",; ""TestWrapper.ref_fasta"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta"",; ""TestWrapper.ref_fasta_index"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta.fai"",; ""TestWrapper.reference"": ""gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta"",; ""TestWrapper.referenceVersion"": ""hg38"",; ""TestWrapper.scattered_calling_intervals_list"": ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Concordance/wgs_scattered_calling_intervals.txt"",; ""TestWrapper.stratIntervals"": [; ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Concordance/LCR_Hg38.interval_list"",; ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Concordance/HCR_hg38.bed""; ],; ""TestWrapper.stratLabels"": [; ""LCR"",; ""HCR""; ],; ""TestWrapper.truthLabel"": ""chm"",; ""TestWrapper.truthVcf"": ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Concordance/chm.full.m38.vcf.gz"",; ""TestWrapper.truthVcfIndex"": ""gs://dsp-methods-carrot-data/test_data/Dragen_GATK_Co",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6986#issuecomment-738147120:1773,Test,TestWrapper,1773,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6986#issuecomment-738147120,2,['Test'],['TestWrapper']
Testability,"Tested and working, taking out of Draft status.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8812#issuecomment-2096988856:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8812#issuecomment-2096988856,1,['Test'],['Tested']
Testability,Tested it again on FC.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5742#issuecomment-472492089:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5742#issuecomment-472492089,1,['Test'],['Tested']
Testability,Tested that piping seems to work by running `$ ./gatk SortSam -I file.bam -O /dev/stdout -SO coordinate | ./gatk SetNmMdAndUqTags -I /dev/stdin -O testSorted.bam --CREATE_INDEX true -R reference.fasta`. Fixes https://github.com/broadinstitute/gatk/issues/4135; Fixes https://github.com/broadinstitute/gatk/issues/4133,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4167:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4167,2,"['Test', 'test']","['Tested', 'testSorted']"
Testability,Tested to be working. Thanks!; Please merge when you are ready.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3370#issuecomment-319705622:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3370#issuecomment-319705622,1,['Test'],['Tested']
Testability,"Tested using gatk-4.beta.6-151-g1ec409c-SNAPSHOT locally and with dataproc. Observed bug while testing commands for documentation updates in https://github.com/broadinstitute/gatk/pull/4068. . CollectInsertSizeMetricsSpark requires the `--histogramPlotFile` (`-H`, file to write insert size Histogram chart to) and current example commands add the `.pdf` extension to these files. The tool errors without this being specified but then doesn't write the file. In CollectBaseDistributionByCycleSpark, `--chart` (`-C`, A file (with .pdf extension) to write the chart to) is optional. When specified, the tool appears to ignore this option and does not write the file. . Metrics files defined by `-O` are written.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4085:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4085,2,"['Test', 'test']","['Tested', 'testing']"
Testability,Tested with 10K intervals and 100 WES samples,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-404596841:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4997#issuecomment-404596841,1,['Test'],['Tested']
Testability,Tested with Cromwell 30.2,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4870:0,Test,Tested,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4870,1,['Test'],['Tested']
Testability,Testing Git-Zen,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6353:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6353,1,['Test'],['Testing']
Testability,"Testing branch `ck_3487_port_LeftAlignAndTrimVariants`, which ports LeftAlignAndTrimVariants from GATK3 to GATK4. ### stdout; ```; WMCF9-CB5:shlee$ ./gatk LeftAlignAndTrimVariants -R ~/Documents/ref/hg38/Homo_sapiens_assembly38.fasta -V ~/Downloads/zeta_snippet_shlee/zeta_snippet.vcf.gz -O zeta_snippet_leftalign.vcf.gz; Using GATK wrapper script /Users/shlee/Documents/branches/hellbender/build/install/gatk/bin/gatk; Running:; /Users/shlee/Documents/branches/hellbender/build/install/gatk/bin/gatk LeftAlignAndTrimVariants -R /Users/shlee/Documents/ref/hg38/Homo_sapiens_assembly38.fasta -V /Users/shlee/Downloads/zeta_snippet_shlee/zeta_snippet.vcf.gz -O zeta_snippet_leftalign.vcf.gz; 16:34:35.251 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/shlee/Documents/branches/hellbender/build/install/gatk/lib/gkl-0.8.5.jar!/com/intel/gkl/native/libgkl_compression.dylib; Sep 05, 2018 4:34:35 PM shaded.cloud_nio.com.google.auth.oauth2.DefaultCredentialsProvider warnAboutProblematicCredentials; WARNING: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a ""quota exceeded"" or ""API not enabled"" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/.; 16:34:35.413 INFO LeftAlignAndTrimVariants - ------------------------------------------------------------; 16:34:35.414 INFO LeftAlignAndTrimVariants - The Genome Analysis Toolkit (GATK) v4.0.8.1-24-gb43bc27-SNAPSHOT; 16:34:35.414 INFO LeftAlignAndTrimVariants - For support and documentation go to https://software.broadinstitute.org/gatk/; 16:34:35.414 INFO LeftAlignAndTrimVariants - Executing as shlee@WMCF9-CB5 on Mac OS X v10.13.6 x86_64; 16:34:35.414 INFO LeftAlignAndTrimVariants - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_111-b14; 16:34:35.414 IN",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3487#issuecomment-418875494:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3487#issuecomment-418875494,1,['Test'],['Testing']
Testability,Testing how nasty a merge is.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8248#issuecomment-1474442393:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8248#issuecomment-1474442393,1,['Test'],['Testing']
Testability,Testing that this is excluded from tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8252:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8252,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"Testing the tool behavior when given an incomplete PED file. PED; <img width=""847"" alt=""screenshot 2019-01-22 16 42 07"" src=""https://user-images.githubusercontent.com/11543866/51567234-b42e3200-1e64-11e9-942c-2934980dc04a.png"">. Command; ```; gatk CalculateGenotypePosteriors \; -V precomputed/trioGGVCF.vcf.gz \; -ped duo.ped \; --skip-population-priors \; -O sandbox/duoCGP.vcf.gz; ```. Results; <img width=""842"" alt=""screenshot 2019-01-22 16 44 01"" src=""https://user-images.githubusercontent.com/11543866/51567337-ef306580-1e64-11e9-8ca6-051ccb3fa18d.png"">. The line of interest reads:; ```; 16:27:00.401 INFO CalculateGenotypePosteriors - No PED file passed or no *non-skipped* trios found in PED file. Skipping family priors.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5409#issuecomment-456575220:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5409#issuecomment-456575220,2,"['Test', 'sandbox']","['Testing', 'sandbox']"
Testability,Testing theories. DO NOT MERGE,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3182:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3182,1,['Test'],['Testing']
Testability,"Testing updated branch with improved messaging.; ```; WMCF9-CB5:shlee$ ./gatk LeftAlignAndTrimVariants -R ~/Documents/ref/hg38/Homo_sapiens_assembly38.fasta -V ~/Downloads/zeta_snippet_shlee/zeta_snippet.vcf.gz -O zeta_snippet_leftalign_96branch.vcf.gz; Using GATK wrapper script /Users/shlee/Documents/branches/hellbender/build/install/gatk/bin/gatk; Running:; /Users/shlee/Documents/branches/hellbender/build/install/gatk/bin/gatk LeftAlignAndTrimVariants -R /Users/shlee/Documents/ref/hg38/Homo_sapiens_assembly38.fasta -V /Users/shlee/Downloads/zeta_snippet_shlee/zeta_snippet.vcf.gz -O zeta_snippet_leftalign_96branch.vcf.gz; 12:55:31.964 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/shlee/Documents/branches/hellbender/build/install/gatk/lib/gkl-0.8.5.jar!/com/intel/gkl/native/libgkl_compression.dylib; Sep 06, 2018 12:55:32 PM shaded.cloud_nio.com.google.auth.oauth2.DefaultCredentialsProvider warnAboutProblematicCredentials; WARNING: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a ""quota exceeded"" or ""API not enabled"" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/.; 12:55:32.083 INFO LeftAlignAndTrimVariants - ------------------------------------------------------------; 12:55:32.083 INFO LeftAlignAndTrimVariants - The Genome Analysis Toolkit (GATK) v4.0.8.1-25-g0c6f06f-SNAPSHOT; 12:55:32.083 INFO LeftAlignAndTrimVariants - For support and documentation go to https://software.broadinstitute.org/gatk/; 12:55:32.083 INFO LeftAlignAndTrimVariants - Executing as shlee@WMCF9-CB5 on Mac OS X v10.13.6 x86_64; 12:55:32.083 INFO LeftAlignAndTrimVariants - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_111-b14; 12:55:32.083 INFO LeftAlignAndTrimVariants - Start Date/Time: September 6",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3487#issuecomment-419190326:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3487#issuecomment-419190326,1,['Test'],['Testing']
Testability,Testing variantstore tests from fork (DO NOT MERGE),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6899:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6899,2,"['Test', 'test']","['Testing', 'tests']"
Testability,Testing with the branch gives the expected WARN.; ```; 10:36:48.710 WARN CalculateGenotypePosteriors - No PED file passed or no *non-skipped* trios found in PED file. Skipping family priors.; ```. The WARN is in the middle of the INFO fields and not separate at the bottom of the stdout:; ![screenshot 2019-01-24 10 37 19](https://user-images.githubusercontent.com/11543866/51689144-10f42e80-1fc4-11e9-8813-e809a9fb8e63.png),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5601#issuecomment-457241853:0,Test,Testing,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5601#issuecomment-457241853,1,['Test'],['Testing']
Testability,"Tests all passing, now.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7142#issuecomment-882086774:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7142#issuecomment-882086774,1,['Test'],['Tests']
Testability,Tests and changes for CRAM support.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1084:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1084,1,['Test'],['Tests']
Testability,Tests and fix for https://github.com/broadinstitute/gatk/issues/1674.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2205:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2205,1,['Test'],['Tests']
Testability,Tests appear to be passing. Will rebase on master to remove commits from #4280 and merge so we don't delay the release.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4288#issuecomment-361345078:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4288#issuecomment-361345078,1,['Test'],['Tests']
Testability,"Tests are ""failing"" with the ""code is too big"" error on the CNN testTrainingReadModel. I had to update my conda yml template to use a newer Tensorflow @cmnbroad found -- should I add that here too?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6330:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6330,2,"['Test', 'test']","['Tests', 'testTrainingReadModel']"
Testability,Tests are failing. Should I still review?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4360#issuecomment-363621429:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4360#issuecomment-363621429,1,['Test'],['Tests']
Testability,"Tests are not passing because I'm now using NIO in the WDL. I'll need to fix that, but the WDL itself should be ready for review. . The changes:; - Updates the pipeline for the new Mutect2 Filtering scheme and pulls filtering after the liftover and recombining of the VCF. ; - Makes the subsetting of the WGS bam fast by using PrintReads over just chrM instead of traversing the whole bam for NuMT mates.; - Moves polymorphic NuMTs based on autosomal coverage to a filter (it was an annotation before); - Adds option to hard filter by VAF",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5847:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5847,1,['Test'],['Tests']
Testability,"Tests are passing now, back to you @cwhelan.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7026#issuecomment-767854003:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7026#issuecomment-767854003,1,['Test'],['Tests']
Testability,Tests are passing using a snapshot generated while debugging https://github.com/broadinstitute/picard/pull/1904. Folks can review and give feedback. Perhaps we shouldn't merge though unless referencing a library SNAPSHOT is ok or picard 3.0.1 is released.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8439#issuecomment-1655703824:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8439#issuecomment-1655703824,1,['Test'],['Tests']
Testability,Tests are run.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5112#issuecomment-413657197:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5112#issuecomment-413657197,1,['Test'],['Tests']
Testability,"Tests are still failing, but other than that I'm on board.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424378444:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424378444,1,['Test'],['Tests']
Testability,Tests are writing `.dot` files to the hellbender root directory and not cleaning them up. I'm guessing it's the haplotype assembly tests. ex `fred.dot`,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/762:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/762,2,"['Test', 'test']","['Tests', 'tests']"
Testability,Tests developed for https://github.com/broadinstitute/gatk/issues/1321.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1574:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1574,1,['Test'],['Tests']
Testability,Tests fail to find libgkl libraries in /usr/local/lib,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8939:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8939,1,['Test'],['Tests']
Testability,Tests fail with BWA SIGABRT when git lfs files are missing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2802:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2802,1,['Test'],['Tests']
Testability,Tests failed for seemingly unrelated reasons -- I've restarted them. Feel free to merge once they pass @tedsharpe,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6295#issuecomment-565626866:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6295#issuecomment-565626866,1,['Test'],['Tests']
Testability,Tests failed on travis?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2391#issuecomment-277393001:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2391#issuecomment-277393001,1,['Test'],['Tests']
Testability,Tests failing locally due to missing R package,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3740:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3740,1,['Test'],['Tests']
Testability,Tests for CollectBaseDistributionByCycle,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/636:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/636,1,['Test'],['Tests']
Testability,Tests now running with the Picard 3.1.0 release,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8439#issuecomment-1656037136:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8439#issuecomment-1656037136,1,['Test'],['Tests']
Testability,Tests pass with #6007.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5990#issuecomment-504985317:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5990#issuecomment-504985317,1,['Test'],['Tests']
Testability,Tests pass! (after rebasing to remove the offending ReadsPipeline Spark test),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5741#issuecomment-470277845:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5741#issuecomment-470277845,2,"['Test', 'test']","['Tests', 'test']"
Testability,Tests passed -- merging!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5099#issuecomment-412516013:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5099#issuecomment-412516013,1,['Test'],['Tests']
Testability,"Tests passed, PR is reviewed and merged into htsjdk.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3448#issuecomment-322901996:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3448#issuecomment-322901996,1,['Test'],['Tests']
Testability,Tests ported from picard: https://github.com/broadinstitute/picard/pull/1195. Fixes #4707,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5011:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5011,1,['Test'],['Tests']
Testability,Tests seem to have passed now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2783#issuecomment-306612011:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2783#issuecomment-306612011,1,['Test'],['Tests']
Testability,"Tests should print per-test status, otherwise it is difficult to see what tests fail or are skipped",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8937:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8937,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,Tests that need to access data in a GCS bucket (but not run an actual pipeline); need a PipelineOptions object containing our API key. This new method makes; it for them.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/742:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/742,1,['Test'],['Tests']
Testability,Tests to prove that we can access and query bams in GCS from ReadWalkers,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2407:0,Test,Tests,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2407,1,['Test'],['Tests']
Testability,"Tests with `TEST_DOCKER = true` failed, I'm not entirely clear why. Here's a bit of the log:. > Building 85% > :test > Resolving dependencies ':jacocoAgent'aven.org/maven2/org/jacoco/org.jacoco.agent/0.7.7.201606060606/org.jacoco.agent-0.7.7.201606060606.jar; > Building 85% > :test > 207 KB/233 KB downloaded> Building 85% > :test > 0 tests completed> Resolving dependencies ':testRuntime':test FAILED",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3159#issuecomment-314208367:88,log,log,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3159#issuecomment-314208367,15,"['Test', 'log', 'test']","['Tests', 'log', 'test', 'testRuntime', 'tests']"
Testability,"Thank you @SHuang-Broad. The error was gone after I copied bwaindeximage file to lustre file system, which can be accessed by all worker nodes.; The new problem is: the program started but didn't give any informative message/progress (see log below). It was stopped (Ctl-C) after 16 hours. The sequence data is regular human exome, which could be mapped in 1-2 hours in our traditional pipeline. ```; ../gatk/gatk-launch BwaAndMarkDuplicatesPipelineSpark ; -I hdfs://ln16/user/myname/NA12878/wes/NA12878-NGv3-LAB1360-A.unaligned.bam ; -O hdfs://ln16/user/myname/gatk4test/BwaAndMarkDuplicatesPipelineSpark_out.bam ; -R hdfs://ln16/user/myname/genomes/Hsapiens/GRCh37/seq/GRCh37.2bit ; --bwamemIndexImage /TEST/hadoop/myname/GRCh37.fa.img ; --disableSequenceDictionaryValidation ; -- --sparkRunner SPARK ; --sparkMaster spark://ln16:7077 ; --conf spark.cores.max=720 ; --executor-cores 20 ; --executor-memory 50g ; --conf spark.driver.memory=50g; Using GATK jar /home/myname/gatk4/gatk/build/libs/gatk-package-4.alpha.2-1125-g27b5190-SNAPSHOT-spark.jar; Running:; /opt/spark-2.1.0-bin-hadoop2.7/bin/spark-submit --master spark://ln16:7077 --conf spark.driver.userClassPathFirst=true --conf spark.io.compression.codec=lzf --conf spark.driver.maxResultSize=0 --conf spark.executor.extraJavaOption; s=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.di$able=true --conf spark.kryoserializer.buffer.max=512m --conf spark.yarn.executor.memoryOverhead=600 --conf spark.cores.max=720 --executor-cores 20 --executor-memory 50g --conf spark.driver.memory=50g /home/myname/gatk4/gatk$build/libs/gatk",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3186#issuecomment-312229998:239,log,log,239,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3186#issuecomment-312229998,2,"['TEST', 'log']","['TEST', 'log']"
Testability,"Thank you @mehrzads for your contribution. It would appear that this optimization is aimed to incorporate the knowledge that we could never possibly visit a given vertex more than K times in the first K best paths. Since the graphs are prone to exponential expansion of paths this seems like an important safeguard against this exponential expansion of the graph. . Looking at the code and the algorithm behavior it is intending to copy I see that there is a degenerate case in the current code that can cause the results to be order dependent. My belief is that this code can fall over by virtue of the fact that we refuse to make new incoming edges to a given vertex if there are already too many incoming edges for that vertex. Unfortunately this heuristic doesn't strike me as being valid, because those incoming edges can have any weight, including very high weights because they are bad paths through the graph that we created at a previous step. . I think a more correct optimization would be to limit the number of edges we create LEAVING a given vertex. The logic for this is that while we may not necessarily see all of the incoming edges in the correct weight order we will necessarily see all of the leaving edges in the correct order because those paths are pulled off of the priority queue in the correct order. Thus we can safely ignore any additional paths we see leaving a given edge because by construction as they would necessarily have at least one path that is cheaper than all of the paths leaving the current node.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5907#issuecomment-494105417:1067,log,logic,1067,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5907#issuecomment-494105417,1,['log'],['logic']
Testability,"Thank you @mwalker174 for the suggestions. I ended up writing for loops to test which configurations work. Driver memory: 2-50g; executor memory: 2-50g; executor cores: 1-20; bamPartitionSize: 1-64m. Some combinations failed in minutes, some failed in hours, and some finished without errors. Bellow are three of which work for a ~33X WGS data:; ```; ../gatk-4.beta.1/gatk-launch BwaAndMarkDuplicatesPipelineSpark ; --bamPartitionSize 4000000 ; -I hdfs://bigdata/user/myname/gatk4test/wgs.sub4.unaligned.bam ; -O hdfs://bigdata/user/myname/gatk4test/wgs.sub4.BwaAndMarkDuplicatesPipelineSpark_out.bam ; -R hdfs://bigdata/user/myname/genomes/Hsapiens/GRCh37/seq/GRCh37.2bit ; --bwamemIndexImage /hadoop/myname/GRCh37.fa.img ; --disableSequenceDictionaryValidation ; -- --sparkRunner SPARK ; --sparkMaster spark://ln16:7077 ; --conf spark.cores.max=600 ; --executor-cores 20 ; --executor-memory 10g ; --conf spark.driver.memory=50g. ../gatk-4.beta.1/gatk-launch BwaAndMarkDuplicatesPipelineSpark ; --bamPartitionSize 4000000 ; -I hdfs://bigdata/user/myname/gatk4test/wgs.sub4.unaligned.bam ; -O hdfs://bigdata/user/myname/gatk4test/wgs.sub4.BwaAndMarkDuplicatesPipelineSpark_out.bam ; -R hdfs://bigdata/user/myname/genomes/Hsapiens/GRCh37/seq/GRCh37.2bit ; --bwamemIndexImage /hadoop/myname/GRCh37.fa.img ; --disableSequenceDictionaryValidation ; -- --sparkRunner SPARK ; --sparkMaster spark://ln16:7077 ; --conf spark.cores.max=600 ; --executor-cores 5 ; --executor-memory 50g ; --conf spark.driver.memory=50g. ../gatk-4.beta.1/gatk-launch BwaAndMarkDuplicatesPipelineSpark ; --bamPartitionSize 64000000 ; -I hdfs://bigdata/user/myname/gatk4test/wgs.sub4.unaligned.bam ; -O hdfs://bigdata/user/myname/gatk4test/wgs.sub4.BwaAndMarkDuplicatesPipelineSpark_out.bam ; -R hdfs://bigdata/user/myname/genomes/Hsapiens/GRCh37/seq/GRCh37.2bit ; --bwamemIndexImage /hadoop/myname/GRCh37.fa.img ; --disableSequenceDictionaryValidation ; -- --sparkRunner SPARK ; --sparkMaster spark://ln16:7077 ; --conf spark.core",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3186#issuecomment-313981314:75,test,test,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3186#issuecomment-313981314,1,['test'],['test']
Testability,"Thank you @vruano for your diligent review. I've implemented logger classes to encapsulate the metrics classes. Unfortunately the metrics classes must remain public in order to write output using `MetricsUtils.saveMetrics()`, but at least the tools aren't using them directly. There are two logging class groups - one for Filter and one Score. For Filter, there is an interface `PSFilterLogger` that is implemented by a file-logging class `PSFilterFileLogger` and a dummy class `PSFilterEmptyLogger` that does nothing. There are analogous classes for Score, but there is no Empty logger because it's not actually necessary. This adds a lot of new classes (maybe you can think of a better way) but usage has been greatly simplified. As we discussed in person, I don't think there is a faster way to count the reads in Spark. If you wanted to count the reads as they pass through, you would have to use some kind of atomic type that would be slow. Also it may be impossible to account for cases when tasks fail and restart. @lbergelson @droazen In this PR, I wanted to use htsjdk's MetricsFile and MetricBase classes for writing metrics to a file. I notice that these classes are mostly used for picard-related things. Is this the preferred way to do things? They do force you to expose public variables and also use an upper-case naming convention. On the other hand, they are somewhat convenient.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3611#issuecomment-334308160:61,log,logger,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3611#issuecomment-334308160,8,['log'],"['logger', 'logging']"
Testability,Thank you @vruano. I've addressed your comments to implement AutoCloseable in the loggers and use try-with-resources. I also moved the hg19mini BWA image file to the base resources directory.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3611#issuecomment-344761211:82,log,loggers,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3611#issuecomment-344761211,1,['log'],['loggers']
Testability,Thank you at @ldgauthier for volunteering to review and for all of the feedback. The Travis checks are still in progress but the only code change is with the logger type.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5601#issuecomment-456978262:158,log,logger,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5601#issuecomment-456978262,2,['log'],['logger']
Testability,Thank you for letting us know. Let me know if you want me to run a test on my case.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-651875218:67,test,test,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664#issuecomment-651875218,1,['test'],['test']
Testability,"Thank you for replying!; I have parallelized the GATK4 Mutect2 using thread pools in Java. I tested the parallelized GATK4 Mutect2 using a WGS data with control. The result came out that, about 0.6% variants were different from the original results. I found that the difference was caused by the random number generator in ReservoirDownsampler. The order of the input intervals after parallelism were different from the original, so the random numbers generated for each position with redundant reads were possibly different. Is there any solutions for this problem?; Thank you very much!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4325#issuecomment-382586592:93,test,tested,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4325#issuecomment-382586592,1,['test'],['tested']
Testability,"Thank you for the kind explanation, *@davidbenjamin*. I understand your; rationale. BTW, in my test with a PoN of ~100 sample, this set of changes; makes significant performance improvement regardless of the value of; --genotypePonSites. Could you advise how many samples you used to create; the PoN you test? Thanks!. On Tue, Aug 8, 2017 at 9:28 PM, David Benjamin <notifications@github.com>; wrote:. > *@davidbenjamin* commented on this pull request.; > ------------------------------; >; > In src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/; > Mutect2Engine.java; > <https://github.com/broadinstitute/gatk/pull/3304#discussion_r132078537>:; >; > > }; >; > - if (hasNormal() && normalContext != null && countNonRef(refBase, normalContext) > normalContext.getBasePileup().size() * MTAC.minNormalVariantFraction) {; > + if (!MTAC.genotypePonSites && !featureContext.getValues(MTAC.pon, new SimpleInterval(context.getContig(), (int) context.getPosition(), (int) context.getPosition())).isEmpty()) {; >; > I deliberately made --genotypePonSites false by default because running; > local assembly and realignment of PoN sites is very expensive, especially; > so because PoN sites are frequently in regions that yield very messy; > assembly graphs, hence many haplotypes. It's true that explicit results can; > be useful, and we frequently want them in the course of development, but a; > tenet of the GATK is to make the tools work as well as possible with; > default settings.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/3304#discussion_r132078537>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABD6FgXbu1QybkQOkGpGBtjNQINUx13rks5sWRk3gaJpZM4OcvPO>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3304#issuecomment-321154425:95,test,test,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3304#issuecomment-321154425,2,['test'],['test']
Testability,Thank you for the much-improved stdout messaging @kachulis. I tested it out and noted the changes again in the issue ticket. 👍🏽,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5144#issuecomment-419220822:62,test,tested,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5144#issuecomment-419220822,1,['test'],['tested']
Testability,"Thank you for your links :). I hoped you will be able to add the change in the next GATK version :). If I can run this tool with singularity, I will be able to test a ton of different parameter !",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4782#issuecomment-390312412:160,test,test,160,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4782#issuecomment-390312412,1,['test'],['test']
Testability,"Thank you for your review, @vruano ! I addressed each of your comments. In the process, I discovered a bug in an integration test that needed fixing, which is added as another commit.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3537#issuecomment-329907772:125,test,test,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3537#issuecomment-329907772,1,['test'],['test']
Testability,"Thank you!. On Mon, Oct 22, 2018 at 10:33 AM meganshand <notifications@github.com>; wrote:. > @SusieX <https://github.com/SusieX>; >; > Marking duplicates: I do recommend removing duplicates (we run; > MarkDuplicates from Picard).; >; > BQSR: The pipeline we're developing is for Whole Genome data, so our bams; > have gone through BQSR in the whole genome pipeline. We're using those; > recalibrated base qualities. I haven't tested running BQSR only on the; > mitochondria so I don't know how well that would work.; >; > If you do need to run BQSR only on the mitochondria I'd start by using the; > phylotree sites as --known-sites, but you'd need to have those sites in; > vcf format. Again, I haven't tested this so I don't know how well it will; > perform.; >; > If you end up using BQSR I think you're pipeline (BAM -> remove dup -> BQ; > recalibrate -> Mutect2 call -> FilterMutectCalls) is correct. Good luck!; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/5193#issuecomment-431852996>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AQ4DHh9X94wZ-4488FohFKnkv1SCe6c2ks5undccgaJpZM4WqV76>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5193#issuecomment-431899805:427,test,tested,427,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5193#issuecomment-431899805,2,['test'],['tested']
Testability,"Thanks @LeeTL1220, I also added another commit to make some minor comment tweaks. Will merge after tests pass!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4364#issuecomment-363806476:99,test,tests,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4364#issuecomment-363806476,1,['test'],['tests']
Testability,"Thanks @TedBrookings !. I did a creation and self-termination test run (without actually running the analysis to save time), and it worked as expected. Also implemented the suggested changes:; 1. documentation in help; 2. upfront def instead of in the creation block",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3579#issuecomment-329802505:62,test,test,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3579#issuecomment-329802505,1,['test'],['test']
Testability,"Thanks @asmirnov239, will merge once tests pass unless you have further objections!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5408#issuecomment-445248455:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5408#issuecomment-445248455,1,['test'],['tests']
Testability,"Thanks @asmirnov239. Addressed comments and rebased. @LeeTL1220 needs to make some changes on top of this branch, so please take a quick look. Will merge once tests pass unless you catch anything major.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3914#issuecomment-352082566:159,test,tests,159,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3914#issuecomment-352082566,1,['test'],['tests']
Testability,"Thanks @bbimber, I have the file downloaded, please go ahead and remove it. I have reproduced the seg fault - it is because of one faulty fragment - `WGS_Sept_1117.gdb/QNVO02001147.1$1$28016/__58eb4600-9c95-425e-a585-4bb23b486577140340709598976_1596797671601`. Not sure why, but it seems to be missing a number of files(e.g. `__coords.tdb`) causing the fault. Things work fine if you move the fragment out of the array. . For what its worth, all the samples from the callset.json seem to be represented in the rest of the fragments. So you might be fine with downstream processing with `__58eb4600-9c95-425e-a585-4bb23b486577140340709598976_1596797671601` removed for now. . For our debugging, . 1. Was the GenomicsDBImport run in an update mode at all after an initial import?; 2. Do you have any logs from `gatk GenomicsDBImport` for the `QNVO02001147.1$1$28016` array? ; 3. Was anything reported in the Lustre logs?; 4. I have attached the samples found in the callset.json for the `QNVO02001147.1$1$28016` array, can you confirm these were the expected samples? Are there any missing?. [samples.txt](https://github.com/broadinstitute/gatk/files/5460536/samples.txt)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6910#issuecomment-718941513:798,log,logs,798,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6910#issuecomment-718941513,2,['log'],['logs']
Testability,"Thanks @bbimber. Just tested with the files you shared and the book keeping file uncompresses and loads fine. So, no problem on that count. As you have noticed, consolidation is very resource-intensive in GenomicsDBImport. When fragments are not consolidated on-disk during import, they get consolidated in-memory during queries. In this case, it is possible that with 79 fragments and with 10MB(hardcoded currently) being used per fragment per attribute just for consolidation, with memory fragmentation and other internal buffers, we may have run out of memory. Possible solutions -; 1. Can you run with something less that 178 with java heap options `-Xmx178g -Xms178g`, so the native process gets a little more?; 2. There is no way to perform consolidate only from gatk currently. You could try importing another set with the `--consolidate` and possibly the `--bypass-feature-reader` option.; 3. I am working on a fix for consolidation for Cloud Storage mainly, it may perform a little better generally and can point to a gatk branch when created if you are interested. @mlathara, any other ideas?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7674#issuecomment-1042407322:22,test,tested,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7674#issuecomment-1042407322,1,['test'],['tested']
Testability,"Thanks @cmnbroad, I can take a look starting Friday. In the meantime, could you highlight any possible differences between the Docker vs. non-Docker Java / native environments, if any come to mind?. As for the WDL test, I would be very surprised if it was a memory issue---I think those tests build a panel with 2 samples over fewer than 100 intervals. Doing PCA on a 2 x 100 matrix shouldn't require 7GB...!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1402776817:214,test,test,214,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1402776817,2,['test'],"['test', 'tests']"
Testability,"Thanks @davidbenjamin for the feedback and sorry for the slow response. We have been working on improving PairHMM by adding AVX-512 (#3615) and FPGA (#2725) implementations. . We are also adding AVX2 (#3701) and AVX-512 (future PR) Smith-Waterman, which will improve the performance of Mutect2. We have the data above and will provide benchmarking results of your Mutect2 command with these improvements.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2562#issuecomment-338732871:335,benchmark,benchmarking,335,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2562#issuecomment-338732871,2,['benchmark'],['benchmarking']
Testability,"Thanks @davidbenjamin. Tests are failing but I think that they are wrong...Here's the deal. In the tests we have SelectVariants (with --trimAlleles) of a two-sample VCF to NA12891. It includes these two records:. ```; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NA12891	NA12892; 20	9999900	.	G	<NON_REF>	.	.	.	GT:DP:GQ:MIN_DP:PL	./.:0:0:0:0,0,0	./.:2:6:2:0,6,69; 20	9999996	.	A	ACT,<NON_REF>	.	.	BaseQRankSum=-7.585e+00;DP=154;MQ=60.17;MQRankSum=-7.653e+00;ReadPosRankSum=-6.232e+00	GT:AD:GQ:PL:SAC:SB	./.:0,73,0:99:3396,231,0,3396,231,3396:0,0,30,43,0,0:0,0,30,43	./.:39,40,0:99:1562,0,1880,1680,2000,3680:21,18,17,23,0,0:21,18,17,23; ```. The ""expected results"" have the respective two lines:; ```; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NA12891; 20	9999900	.	G	.	.	.	AN=0;DP=0	GT:DP:MIN_DP	./.:0:0; 20	9999996	.	A	.	.	.	AN=0;BaseQRankSum=-7.585e+00;DP=154;MQ=60.17;MQRankSum=-7.653e+00;ReadPosRankSum=-6.232e+00	GT:AD:PL:SAC:SB	./.:0:0:0,0:0,0,30,43; ```. So somehow, the first line has a non-informative PL omitted from the result, ; while the second line has the non-informative PL included (PL=[0]) in the result. My instinct is that PL=[0] should not appear in the VCF as it is completely uninformative: The length must be 1 since there's only one allele, and a PL or length 1 must be [0]. Do you agree? In that case I can change the expected results and move forward.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3680#issuecomment-335491192:23,Test,Tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3680#issuecomment-335491192,2,"['Test', 'test']","['Tests', 'tests']"
Testability,Thanks @davidbernick. When the tests are working again I'll create a new job for this issue.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3573#issuecomment-331917095:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3573#issuecomment-331917095,1,['test'],['tests']
Testability,Thanks @droazen! What data are you using to test the 2D model? And can we have access to your verification method?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8004#issuecomment-1230344708:44,test,test,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8004#issuecomment-1230344708,1,['test'],['test']
Testability,"Thanks @droazen, I suspected that was the case from looking at the history. Though it's not clear to me from @eitanbanks' commit why he would disable it for non-ERC modes. FWIW my PR looks to have only failed where the HC tests are comparing against existing files, and the existing files don't have phasing (whereas newly generated test files do). I'm going through and double-checking that that is the case, and will hopefully amend that PR shortly.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5727#issuecomment-470680198:222,test,tests,222,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5727#issuecomment-470680198,4,['test'],"['test', 'tests']"
Testability,Thanks @erniebrau! Looking forward to test the next release of GKL.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3532#issuecomment-330808237:38,test,test,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3532#issuecomment-330808237,1,['test'],['test']
Testability,Thanks @gspowley! I test the current master and it's working perfectly!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2315#issuecomment-286369319:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2315#issuecomment-286369319,1,['test'],['test']
Testability,"Thanks @ilyasoifer ! Was the test bam you added aligned with minimap2? If not, we should make sure to add at least one simple HaplotypeCaller regression test that takes an actual minimap2-aligned input.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8337#issuecomment-1558029097:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8337#issuecomment-1558029097,4,['test'],['test']
Testability,Thanks @jamesemery - that's the complication of this big PR. I hope that the tests pass after my last commit and that we can get this in before another PR gets in. Thanks a lot for reviewing!,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3475#issuecomment-341155668:77,test,tests,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3475#issuecomment-341155668,1,['test'],['tests']
Testability,"Thanks @jamesemery. I have run a few benchmarks with the old and new code for comparison. The raw data looks like this: . ```; dataset,executors,code,time; exome,10,old,24.10; exome,10,new,13.28; exome,20,old,17.03; exome,20,new,8.51; genome,20,old,94.23; genome,20,new,54.85; ```. Here is a bar graph comparing the exome data:. ![gatk-5127-exome](https://user-images.githubusercontent.com/85085/45165020-c7a96b00-b1eb-11e8-8bfb-4565dd0385a0.png). and the genome data:. ![gatk-5127-genome](https://user-images.githubusercontent.com/85085/45165026-cd06b580-b1eb-11e8-815b-afac12444d4e.png)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5127#issuecomment-419120974:37,benchmark,benchmarks,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5127#issuecomment-419120974,1,['benchmark'],['benchmarks']
Testability,Thanks @jean-philippe-martin! I've addressed your other feedback points and submitted a new pull request against the main repo (so that tests are run): https://github.com/broadinstitute/hellbender/pull/827. I'm closing this one now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/804#issuecomment-131862850:136,test,tests,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/804#issuecomment-131862850,1,['test'],['tests']
Testability,"Thanks @jonn-smith, I really appreciate your work in supporting hg38. In case its helpful, I gave your files a go was met with a pretty abrupt error and exit. ... testing on 4.0.2.1. ```; 02:48:07.582 INFO Funcotator - Initializing engine; 02:48:07.988 INFO FeatureManager - Using codec VCFCodec to read file file:///cluster/jasonw/Work/pd.vcf; 02:48:08.012 INFO Funcotator - Done initializing engine; 02:48:08.047 INFO Funcotator - Shutting down engine; [March 22, 2018 2:48:08 AM UTC] org.broadinstitute.hellbender.tools.funcotator.Funcotator done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=1948254208; java.lang.NullPointerException; 	at org.broadinstitute.hellbender.tools.funcotator.Funcotator.closeTool(Funcotator.java:330); 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:897); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:135); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:180); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:199); 	at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:159); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:202); 	at org.broadinstitute.hellbender.Main.main(Main.java:288); ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4521#issuecomment-375162106:163,test,testing,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4521#issuecomment-375162106,1,['test'],['testing']
Testability,"Thanks @kdatta. The branch builds now, but there are a couple of problems that cause several tests to fail, including some existing tests that used to pass. You can see the results [here](https://travis-ci.org/broadinstitute/gatk/jobs/221534229). - The main issue is that GenomicsDB fails to load. This causes the importer tests to fail, as well as the existing GenomicsDB integration tests. (Note that the importer tests fail with a null pointer exception, but that problem is secondary and only happens when the db fails to load, which is the root problem.) We can fix the NPE in code review, for now the main issue is fix the core problem of why genomics db fails to load. - The changes in OptionalVariantInputArgumentCollection and RequiredVariantInputArgumentCollection are causing argument name collisions in other tools, which is why ExampleIntervalWalkerIntegrationTest tests are failing in this branch. The simplest fix in the short term is to just revert the changes you made to those two classes, and remove the new VariantInputArgumentCollection class. These aren't being used by the importer tool anyway. It should be pretty easy to reproduce load issue, it happens on my laptop and and travis, but let me know if you need help or have questions about any of this.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-294148791:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-294148791,12,['test'],['tests']
Testability,"Thanks @lbergelson! I agree that it might be good to break into more layers—could be worth talking to SV team and seeing what lessons they learned in putting together their hierarchy of images. Also, note that I pushed the install of miniconda into the base, but I did not push down the setup of the GATK conda environment itself (which takes the bulk of the time during the main-image build, as it requires lots of downloading). I think I commented elsewhere that a good strategy might be to set up the conda environment with the non-GATK python dependencies in the base, and then update the environment via a pip install of the GATK python packages in the main image. This would let us make python code changes without having to rebuild the base, but might require a bit of scripting to create a final yml for non-Docker users. I also agree that it would be nice to cut down the Travis time, might be worth taking a look at other strategies to do that—could save everyone a lot of time!. Will try to add the test you suggested sometime tomorrow.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-621487662:1010,test,test,1010,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5026#issuecomment-621487662,2,['test'],['test']
Testability,"Thanks @lbergelson! Tests passed for CLOUD=false, so back to you for merge.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2226#issuecomment-255939517:20,Test,Tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2226#issuecomment-255939517,1,['Test'],['Tests']
Testability,"Thanks @ldgauthier , I picked the header and data from files used in the GATK tests:; https://github.com/broadinstitute/gatk/blob/master/src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/NA12878.AS.chr20snippet.g.vcf. https://github.com/broadinstitute/gatk/blob/master/src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/testAlleleSpecificAnnotations.vcf. However, a different file in the GATK repo specifies AS_RAW_MQ as a String:; https://github.com/broadinstitute/gatk/blob/master/src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk4.alleleSpecific.g.vcf. Currently, GenomicsDB can handle both cases (with a slight hack in the internal code), but wanted to check if I'm missing anything.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355643907:78,test,tests,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4047#issuecomment-355643907,6,['test'],"['test', 'testAlleleSpecificAnnotations', 'testGVCFMode', 'tests']"
Testability,Thanks @ldgauthier . :+1: when tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6262#issuecomment-558319334:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6262#issuecomment-558319334,1,['test'],['tests']
Testability,"Thanks @ldgauthier, that's definitely thought provoking. Perhaps you are right that for het-non-ref (i.e. 1/2 and similar) genotypes we should consider skipping the strand bias test. I had been assuming, incorrectly, that in a single sample case with a `1/2` genotype that the test would be based on the called alleles, not ref vs. alt. Just thinking out loud about this, I wonder if computing SOR on the `1/2` alleles would catch a small number of incorrect genotypes? I've been doing something analogous with allele balance filtering - whereby I compute a per-sample allele balance and directionality. If the genotype is imbalanced towards ref, I filter the variant. If the genotype is imbalanced towards a different allele I ""correct"" the genotype to be homozygous for that allele. In testing on reference samples from GIAB and PlatGen we are seeing that correct a handful of genotypes where the sample is really hom-alt, but called het due to a high error rate. . I'll read up on how the allele-specific strand bias works because I've never looked at that before. But I wonder if it's possible from the available annotations to get a SOR-like value for each allele that is that allele _vs_ all other alleles?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5698#issuecomment-466538825:177,test,test,177,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5698#issuecomment-466538825,3,['test'],"['test', 'testing']"
Testability,"Thanks @ldgauthier. @gbrandt6 I’d appreciate it if you want to take a look, but I might ask if you can do it by Friday afternoon—I’m out after then through all of next week. Would like to merge before I head out to avoid any more rebasing and/or updating of exact-match tests. Happy to look at any changes to the docs you might make in a subsequent PR, though!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-972003949:270,test,tests,270,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-972003949,1,['test'],['tests']
Testability,"Thanks @ldgauthier. I've gone ahead and added a utility method to GATKVariantContextUtils, and tests for that, and used that in CombineGVCFs and GenomicsDBImport. Those tests pass for me now. Fingers crossed the travis build(s) pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424124566:95,test,tests,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5182#issuecomment-424124566,2,['test'],['tests']
Testability,"Thanks @mbabadi and @mwalker174! Rebased, will merge after tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4502#issuecomment-378678755:59,test,tests,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4502#issuecomment-378678755,1,['test'],['tests']
Testability,"Thanks @mwalker174 , we did a little digging and may have found a sample swap in the sample set being processed, but the swap is not the sample identified in the error log. I've got a couple more runs going now, hopefully I'll have more information soon.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8834#issuecomment-2116153640:168,log,log,168,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8834#issuecomment-2116153640,1,['log'],['log']
Testability,"Thanks @mwalker174! That setup_gcnvkernel.py file is just for manual installations (users or devs can rename it to setup.py and install the package using pip, for example---I think there's some documentation on this in the readme in the python folder.). So it's not checked by any build tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6245#issuecomment-551241621:287,test,tests,287,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6245#issuecomment-551241621,1,['test'],['tests']
Testability,"Thanks @mwalker174, will merge once tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7046#issuecomment-764825834:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7046#issuecomment-764825834,1,['test'],['tests']
Testability,"Thanks @nalinigans ! Since https://github.com/broadinstitute/gatk/pull/8741 was just merged with some additional changes from @ldgauthier, could you please rebase onto the latest master branch and let tests run? I'm concerned there might be discrepancies in the test outputs between what's in this branch and what was merged in that PR that we might have to reconcile.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8759#issuecomment-2048062754:201,test,tests,201,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8759#issuecomment-2048062754,2,['test'],"['test', 'tests']"
Testability,"Thanks @samuelklee , I will incorporate your conda update into this branch, now that we've dealt with the test failures!. I patched the VETS test code to include the h5diff (and diff) output in the exception messages when one of these commands fails, and switched to the existing `BaseTest` methods for running the process and capturing the output. You can see what the output looks like (when we remove the epsilon tolerance) here:. https://storage.googleapis.com/hellbender-test-logs/build_reports/8610/merge_7165443572.3/tests/testOnPackagedReleaseJar/classes/org.broadinstitute.hellbender.tools.walkers.vqsr.scalable.ScoreVariantAnnotationsIntegrationTest.html. https://storage.googleapis.com/hellbender-test-logs/build_reports/8610/merge_7165443572.3/tests/testOnPackagedReleaseJar/classes/org.broadinstitute.hellbender.tools.walkers.vqsr.scalable.TrainVariantAnnotationsModelIntegrationTest.html. As you suspected/hoped, all the differences were tiny. When you have a chance, could you please review these changes to the VETS tests and let me know if you spot any issues?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8610#issuecomment-1850563977:106,test,test,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8610#issuecomment-1850563977,9,['test'],"['test', 'test-logs', 'testOnPackagedReleaseJar', 'tests']"
Testability,"Thanks @samuelklee for the Saturday night reply -- you rock! I will try running the tests with an epsilon and see if that does the trick. If it does, I might make another attempt at the new conda version to get the fast solver, since the current one is definitely annoyingly slow.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8610#issuecomment-1849085539:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8610#issuecomment-1849085539,1,['test'],['tests']
Testability,"Thanks @samuelklee! I don't think 5 is strictly necessary, since we should be able to use VariantFiltration with a hard filter of a VQSLOD threshold right? Or are you saying that ScoreVariantAnnotations is the tool that needs to convert between LL/sensitivity and VQSLOD cutoff? . I'm happy to work on the WDL, do most of the tools on this branch have integration tests? That's where I'll start grabbing commands.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7711#issuecomment-1069187834:364,test,tests,364,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7711#issuecomment-1069187834,1,['test'],['tests']
Testability,"Thanks @samuelklee, I was able to get the pipeline to finish last night using the 5000 interval setting as long as I used a single thread to handle the larger memory footprint. I might be able to increase this slightly after some tuning tests. Likely the threads/memory issue is why my earlier attempts to use 5000 intervals with many more samples failed.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5714#issuecomment-468672358:237,test,tests,237,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5714#issuecomment-468672358,1,['test'],['tests']
Testability,"Thanks @sooheelee. The code is definitely not correctly reconciling the accumulated variants/blocks that are remaining when traversal ends. I have a fix that resolves it, at least for this case, but this needs some more analysis and I'm going to have to write some additional tests to be sure that its correct.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4572#issuecomment-376892039:276,test,tests,276,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4572#issuecomment-376892039,1,['test'],['tests']
Testability,"Thanks @sooheelee. There are two large-ish reference files in the repo, both of which contain contigs for both 20 and 21: Homo_sapiens_assembly38.20.21.fasta and human_g1k_v37.20.21.fasta. So the tests would need to work against one of those.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371497870:196,test,tests,196,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371497870,1,['test'],['tests']
Testability,"Thanks Chris!; Yes, you are right! I tested the index with **SelectVariants** on different intervals, and they are all retrievable with ease and no errors! Now the indexing step can be confirmed right and the problem must be something else.; Thank you so much again for this advice.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5917#issuecomment-490171138:37,test,tested,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5917#issuecomment-490171138,1,['test'],['tested']
Testability,Thanks Megan. I asked them for a test case and will report in a different thread if I find something that could be improved/fixed.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2116#issuecomment-411893209:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2116#issuecomment-411893209,1,['test'],['test']
Testability,"Thanks a lot @lbergelson! The tests passed for CLOUD=false, but not for mandatory.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2204#issuecomment-255856685:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2204#issuecomment-255856685,1,['test'],['tests']
Testability,"Thanks a lot for looking into this @sooheelee - I understand the pain of making the small data for the tests, so I really appreciate your work there. I have almost prepare a PR for the new port of `RealignerTargetCreator` that will have TODOs for the test data prepared by you, and with some tests using files already in the repository (for the target-creator, I guess that the validation for getting the regions to realign would be enough, because thanks to that tests I realized of a small bug due to not including all the loci in the `LocusWalker`). On the other hand, I will still fight for the `--nWayOut` not blocking the inclusion of `IndelRealigner` in the first place. My reasons are the following:; ; 1. Looking a bit into the code of GATK3, there is a lot of complication to get the reader ID for each read. It will require to modify the `GATKRead` interface, the data source for reads, or find an *ad hoc* solution on `IndelRealignment` to set the procedence of the read. This requires going into the engine-level code, which in my experience is difficult to port from GATK3 and also slow on the reviewing/acceptance process.; 1. My idea for developing a new writer of general use as the n-way output (which can be used in other tools as well) is to factor out some code from `SplitReads` to have a custom `GATKReadWriter` for arbitrary splitting. i'm already using a similar solution on `ReadTools`, so backporting the code to GATK might be a solution. Nevertheless, this still requires that the `GATKRead` has somehow the identity store at the object level, which requires to address point 1.; 1. The use case of the tumor-normal pair can be resolved by an extra processing step (split by read group). I understand that it is quite convenient to add this argument, but I would suggest that until it can be develop.; 1. Last, bu quite important for me as a developer, I don't have time to spend looking at that engine-level features required to include that argument. I would definitely u",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-373376231:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-373376231,4,['test'],"['test', 'tests']"
Testability,"Thanks a lot, @ddrichel. Given that the current Mutect2 release is still broken on both tumor-normal and tumor-only WES data, and downgrade is not possible on production systems due to the log4j vulnerability: is there any path forward for users that care for both accuracy and security, @davidbenjamin and @droazen ?. I fear waiting for Mutect3 isn't an option since even when it is finished there won't be independent benchmarks available for it for quite a while. Also, I suspect (as any other software product) the new version will have bugs, too, until it has matured in production. Therefore I'd suggest that identifying, understanding and fixing the bug in the current Mutect2 release would be the wisest path forward - do you agree?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7921#issuecomment-1534464682:420,benchmark,benchmarks,420,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7921#issuecomment-1534464682,1,['benchmark'],['benchmarks']
Testability,"Thanks a lot. I am trying to run `mutect2` in **tumour-only** mode for which I need a panel of normal (PON). I have tried **somatic-hg38_1000g_pon.hg38.vcf.vcf** which gives . `./gatk Mutect2 -R resources_broad_hg38_v0_Homo_sapiens_assembly38.fasta -I /data/Continuum/WES/testAlignmentBROADGenome/results/NG-27280_CLTSS_LTS_001A_lib506241_7636_2_MarkedDup_PicMD.bam -O 3.mt2.vcf -tumor NG-27280_CLTSS_LTS_001A_lib506241_7636_2_MarkedDup_PicMD.targeted_sequencing.sample_name --af-of-alleles-not-in-resource 2.5e-06 --germline-resource af-only-gnomad.hg38.vcf.gz -pon somatic-hg38_1000g_pon.hg38.vcf.vcf`. A USER ERROR has occurred: Cannot read file:///data/somatic-hg38_1000g_pon.hg38.vcf.vcf because no suitable codecs found. I know **gatk4_mutect2_4136_pon.vcf.gz** locates here for which I should register in GDC but because I am a postdoctoral researcher, I can not register. [1]: https://gdc.cancer.gov/about-data/gdc-data-processing/gdc-reference-files. Could you please help me to run mutect2 in tumour-only mode using another publicly available PON?. Thanks for any help",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8477:272,test,testAlignmentBROADGenome,272,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8477,1,['test'],['testAlignmentBROADGenome']
Testability,"Thanks all, addressed comments and rebased. Will merge after tests pass unless there are any objections.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3913#issuecomment-351533885:61,test,tests,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3913#issuecomment-351533885,1,['test'],['tests']
Testability,"Thanks also for this detailed report, @Stikus! The differences look small to me (mostly in the quals, which are the result of more numerically sensitive calculations), with the discrepant calls primarily being of low quality. Since the gCNV python code depends on native C/C++ code (via numpy, theano, etc.), these sorts of floating-point numerical differences might not be unexpected if there are changes in the underlying system packages or hardware. Unfortunately, we can only guarantee numerical reproducibility to this high degree within our Docker testing environment. Note also the upcoming #8561, which will also introduce changes on this level.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8619#issuecomment-1851935613:554,test,testing,554,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8619#issuecomment-1851935613,1,['test'],['testing']
Testability,Thanks for adding this! I'm guessing you're still building the Docker image? Otherwise good to merge when tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4289#issuecomment-361324203:106,test,tests,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4289#issuecomment-361324203,1,['test'],['tests']
Testability,"Thanks for adding this! Incidentally, I noticed a few messages are still emitted by com.github.fommil.jni.JniLoader (which uses a different logger) in CreateReadCountPanelOfNormals when native libraries are loaded by MLlib, but probably more trouble than it's worth to clean those up. Couple of minor comments, looks fine to me but maybe engine team should chime in.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5825#issuecomment-475703103:140,log,logger,140,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5825#issuecomment-475703103,1,['log'],['logger']
Testability,"Thanks for adding this! Let me discuss further with @mwalker174 to understand the need and typical use cases (e.g., combining fixed-grid bins) to make sure we don't run into any gotchas downstream. I'll try to review by EOD, but in the meantime, you might want to address a few issues I see at first glance:. 1) Correct the name of the tool (PreprocessIntervals) in the commit message and description.; 2) Add descriptions of the new parameters to the tool Javadoc.; 3) Amend the corresponding WDL task and expose the new parameters in all relevant germline and somatic WDLs.; 4) We should be sure to update the relevant documentation for all germline and somatic WDLs, which emphasizes how PreprocessIntervals should be run differently for WES and WGS, if we plan on changing the default behavior of the tool in the future.; 5) Tests are failing due to a compilation warning about a redundant cast to int.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5701#issuecomment-465978387:829,Test,Tests,829,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5701#issuecomment-465978387,1,['Test'],['Tests']
Testability,"Thanks for all the comments! I've made fixes for the minor ones. I'd like to address the secondary and supplemental reads improvement separately (https://github.com/broadinstitute/gatk/issues/2418), so that it doesn't block progress on testing the intervals optimization. I hope this PR can go in once we have a Hadoop-BAM release (which I'll do soon). (Regarding the ""keep paired reads together"" code - as I've explained in a comment, it's pragmatic to have this code in GATK.)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2350#issuecomment-281688390:236,test,testing,236,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2350#issuecomment-281688390,1,['test'],['testing']
Testability,"Thanks for all the feedback Adam. I got a bunch of the metrics code written; today and hopefully once I have that I can actually test this code and port; the other tests. I will merge that PR into this one and fix these changes; and get back to you. On Thu, Jul 16, 2015 at 9:04 PM, Adam Kiezun notifications@github.com; wrote:. > Assigned #631 https://github.com/broadinstitute/hellbender/pull/631 to; > @tovanadler https://github.com/tovanadler.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/hellbender/pull/631#event-358132720.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/631#issuecomment-122149505:129,test,test,129,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/631#issuecomment-122149505,2,['test'],"['test', 'tests']"
Testability,"Thanks for bringing this up! I actually think that I prefer option 1, although not ideal (since, as you say, it places more burden on the user). The whole point of having generically parameterized models is that we can apply them to many data types. To single out a few with hardcoded sets of defaults seems like a slippery slope to me. (Of course, we should definitely provide defaults for typical data types in *documentation*.) And in the end, I think it is beneficial for users that wish to tweak knobs to do some work to understand what those knobs actually do (even if just at a basic level). The other downside of option 2 is that it might not be immediately obvious from the command line what parameters are being used. For example, if a user chooses a set of defaults but then overrides some of them, we should make it so they don't have to go digging through the logs to see what parameters are actually used in the end. Nor should they have to go back and check what the defaults were for whatever version of the jar they were using at the time. Option 2 might also make it easier to inadvertently override parameters, etc. via command-line typos or copy-and-paste errors---it's much more straightforward to require and check that every parameter is specified once and fallback to a default if not, as we do now. Not to say that we couldn't get around any of these issues in Barclay, but I think it'll require some thought and careful design. Would be interested to hear Engine team's opinions. Finally, one point that I think will become more relevant as our tools and pipelines become more flexible and parameterized: I think we should start thinking of ""Best Practices Recommendations"" less as ""here is the best set of parameters to use with your data"" and more as ""here is *how to find* the best set of parameters to use with your data (for a given truth set, sensitivity requirement, etc.)"". After all, if we are putting together pipelines to do hyperparameter optimization, there is n",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4719#issuecomment-385584289:873,log,logs,873,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4719#issuecomment-385584289,1,['log'],['logs']
Testability,Thanks for checking in on this. 4.0 still has the same segfault issue with the real samples and this test case. The test case just needs a little light editing to swap over to your new command line parameters but otherwise should reproduce the issue. Let me know if I can provide anything else that would be helpful and thanks again for looking at it.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3736#issuecomment-358074076:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3736#issuecomment-358074076,2,['test'],['test']
Testability,"Thanks for comments about the documentation @LeeTL1220 - I fixed them (I hope) trying to explain the logic behind the element tracker. In principle a developer shouldn't care about when to use them, because they should come from a `LocusIteratorByState` or from inside a previous tracker. In addition, the implementation should be (most of the cases) hidden from the API user, which should use `ReadPileup`. The idea of the trackers come from GATK3, so this is a custom port with some design differences. The basic idea is to cache some operations that may be time consuming for large pileups (sorting, split by sample, extract a single sample). I actually haven't test the performance in a proper way, just running some tools in development with the branch and it feels like is faster - in my case I use all the features that are cache: split by sample, retrieving several times single-samples and also calling `fixOverlaps()` (which uses using sorted pileups). I think that because the `LocusIteratorByState` is already splitting by sample, that can improve even more performance, because it will come directly in the state where it can be used by-sample in an efficient way. And maybe, if the tool does not require to split by sample at all, we can add an option to disable that behavior while creating the tracker. Looking forward for your comments and ideas about this...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2321#issuecomment-332144484:101,log,logic,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2321#issuecomment-332144484,2,"['log', 'test']","['logic', 'test']"
Testability,"Thanks for fixing the message! I couldn't track down the original `output.vcf` that caused the issue, and this is ancient enough that I can't even recall the context. However, because the site `1262288` only appears in our repo in the simulated gCNV test data, I suspect that this VCF was generated at some point during development of VCF output for PostprocessGermlineCNVCalls. Not sure in what way that VCF might have been invalid (I'm pretty sure the VCFs produced by that tool now are valid), but I can try to reproduce when I get a chance and will reopen if necessary.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6076#issuecomment-517813352:250,test,test,250,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6076#issuecomment-517813352,1,['test'],['test']
Testability,"Thanks for helping with the updates, @MartonKN! Looks like you have some failing integration tests, though. Perhaps go through and fix those up before @sooheelee takes a look? Don't forget you can run integration tests locally for those tools you've updated. It might also be worth rebasing on the most recent version of master and re-pushing your branch to make sure no other argument updates slipped in that might conflict with yours.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3989#issuecomment-352525285:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3989#issuecomment-352525285,2,['test'],['tests']
Testability,"Thanks for looking into it! I guess Cromwell also essentially sets `HOME`, which is probably why we don't typically run into this. Do we have any non-Cromwell Docker tests that could catch a regression?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4782#issuecomment-468016036:166,test,tests,166,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4782#issuecomment-468016036,1,['test'],['tests']
Testability,"Thanks for looking into this @cmnbroad !. * Does this issue only affect tabix indices, or all indices? . * Does it only affect `IndexFeatureFile`, or other GATK4 tools as well? . * Will an htsjdk patch be required?. * You say that the offsets are correct when indexing on the fly -- does this mean that a tabix index produced by `ApplyVQSR` on an hg38 `.vcf.gz` on-the-fly will be correct? Can you comment on https://github.com/broadinstitute/gatk/issues/2821 to confirm?. If this is the case, can you craft an integration test proving that `ApplyVQSR` creates a correct tabix index for an hg38 `.vcf.gz`? We should also probably disable tabix index creation in `IndexFeatureFile` temporarily until we can patch htsjdk.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2801#issuecomment-306768554:523,test,test,523,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2801#issuecomment-306768554,1,['test'],['test']
Testability,"Thanks for looking into this @haileypfox, as I submitted this bug report in Feb 2019 using GATK 4.1.0.0 I have since used a workaround (add an additional compression step after outputting uncompressed, eg. https://github.com/fpbarthel/GLASS/blob/333d5d01477e49bb2cf87be459d4161d4cde4483/snakemake/mutect2-post.smk#L188-L206). Did you use 4.1.0.0 to test this? Perhaps this was since fixed?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5683#issuecomment-887905446:349,test,test,349,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5683#issuecomment-887905446,1,['test'],['test']
Testability,"Thanks for opening this issue. I hope that this performance issue can be fixed in HTSJDK soon, but I agree a warning would be useful in the intervening time. . To clarify, I believe this applies to any tool that loads a VCF but does not need to parse genotypes - not just SelectVariants. For instance, I saw a 5-10x slowdown in SVAnnotate with unsorted sample IDs for a VCF with ~2500 samples. . Another note: GATK did not reorder the sample IDs in the output VCF during my tests of SVAnnotate, but did reorder IDs during SelectVariants.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7732#issuecomment-1074303682:474,test,tests,474,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7732#issuecomment-1074303682,1,['test'],['tests']
Testability,"Thanks for reviewing @davidbenjamin!. @ldgauthier, this change causes `HaplotypeCallerIntegrationTest.testHaploidNoCall()` to fail—what is going on at this test locus? It looks _very_ messy in IGV...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6696#issuecomment-657236208:102,test,testHaploidNoCall,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6696#issuecomment-657236208,2,['test'],"['test', 'testHaploidNoCall']"
Testability,"Thanks for running the tests. I was hopeful that that would fix it but it; sounds something else is going on that needs investigation. On Thu, Mar 2, 2023, 3:51 PM danieljrichard ***@***.***>; wrote:. > Hi again,; > I tried installing java8 and switching to this version prior to running; > gatk. It runs and looks to be running the right Java, but spits out roughly; > the same error:; >; > Thoughts?; >; > /cold/drichard/gatk/./gatk --java-options ""-Xmx25g"" SplitNCigarReads; > -R /cold/drichard/VARIANTS/Homo_sapiens.GRCh38.dna.primary_assembly.fa -I; > subset_TINY_rehead.bam; > --tmp-dir /thing -O thing.bam; > Using GATK jar; > /cold/drichard/gatk/build/libs/gatk-package-4.3.0.0-44-g227bbca-SNAPSHOT-local.jar; > Running:; > java -Dsamjdk.use_async_io_read_samtools=false; > -Dsamjdk.use_async_io_write_samtools=true; > -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2; > -Xmx25g -jar; > /cold/drichard/gatk/build/libs/gatk-package-4.3.0.0-44-g227bbca-SNAPSHOT-local.jar; > SplitNCigarReads -R; > /cold/drichard/VARIANTS/Homo_sapiens.GRCh38.dna.primary_assembly.fa -I; > subset_TINY_rehead.bam --tmp-dir /thing -O thing.bam; > 15:34:59.974 INFO NativeLibraryLoader - Loading libgkl_compression.so from; > jar:file:/cold/drichard/gatk/build/libs/gatk-package-4.3.0.0-44-g227bbca-SNAPSHOT-local.jar!/com/intel/gkl/native/libgkl_compression.so; > 15:35:00.220 INFO SplitNCigarReads -; > ------------------------------------------------------------; > 15:35:00.226 INFO SplitNCigarReads - The Genome Analysis Toolkit (GATK); > v4.3.0.0-44-g227bbca-SNAPSHOT; > 15:35:00.226 INFO SplitNCigarReads - For support and documentation go to; > https://software.broadinstitute.org/gatk/; > 15:35:00.226 INFO SplitNCigarReads - Executing as ***@***.*** on; > Linux v5.19.0-32-generic amd64; > 15:35:00.226 INFO SplitNCigarReads - Java runtime: OpenJDK 64-Bit Server; > VM v1.8.0_362-8u362-ga-0ubuntu1~22.04-b09; > 15:35:00.226 INFO SplitNCigarReads - Start Date/Time: March 2, 2023; > 3",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8232#issuecomment-1452528344:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8232#issuecomment-1452528344,1,['test'],['tests']
Testability,Thanks for the beautifully svelte test data @roryk ! I'll take a look this week. Did the workaround I suggested fix your issue?,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5650#issuecomment-462463555:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5650#issuecomment-462463555,1,['test'],['test']
Testability,"Thanks for the clarification @magicDGS. What I have are 1000 Genomes Project BAMs, which were preprocessed by the 1000 Genomes Project. The BAMs are aligned to GRCh38 and have undergone indel realignment (GATK3), so they represent a state of preprocessing against which we can validate the new indel realignment. If some representation of indels in such a BAM is sufficient as a truthset, then I can make this VCF. These samples, being from the 1000 Genomes Project, are well-analyzed and their indels will be represented in dbSNP and gnomAD resources. Of course, the test data will have been re-mapped with BWA and be without any trace of indel realignment. We should probably get someone familiar with the test suite to weigh in on the scope of the validation.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371519632:568,test,test,568,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3112#issuecomment-371519632,2,['test'],['test']
Testability,"Thanks for the comments @tedsharpe , some good code cleanup here. I've addressed your comments and will merge after tests pass. I agree about the shuffle -- I'd originally implemented this without it but then found some places where high-depth intervals were getting clipped at the boundaries of depth window partitions due to overlapping counts. In practice it doesn't seem to take a discernible amount of runtime, at least on our development clusters.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4438#issuecomment-368979818:116,test,tests,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4438#issuecomment-368979818,1,['test'],['tests']
Testability,"Thanks for the ideas -- I found a few more details out this morning. I was trying to use a service account, rather than my personal account, using `gcloud auth activate-service-account`. This works for gcloud and gsutil commands, but doesn't seem to work with ADC very well evidently. Once I changed and used my personal account via `gcloud auth application-default login` GATK4 no longer gave that error. Then I found out that the file I gave you (which I picked because it's NA12878, but not where I originally found the problem) was not indexed. So I went back to using the original file which has `foo.vcf.gz` as well as `foo.vcf.gz.tbi`. GATK SelectVariants ran successfully. Finally, I spun up a GCE-vm which is running with the service account I want, installed Java and GATK4 and was able to run the command successfully. So it seems like the problem would be ""how do I run using a service account from a non-GCE VM"". If there's an answer to that, that would be great.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2415#issuecomment-281694639:366,log,login,366,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2415#issuecomment-281694639,1,['log'],['login']
Testability,"Thanks for the information.; For info, I asked because I'm currently benchmarking SGE cluster vs Spark usage.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4448#issuecomment-368054603:69,benchmark,benchmarking,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4448#issuecomment-368054603,1,['benchmark'],['benchmarking']
Testability,"Thanks for the inquiry, @matthdsm! This has indeed been a bit on the back burner since winter break, so perhaps it's time for a kick start. @mwalker174 (or anyone else interested in running scientific tests), a Docker image is available at: us.gcr.io/broad-dsde-methods/broad-gatk-snapshots/gatk-remote-builds@sha256:59310a7e8d635d4c09a6b6e09d188070628a42f7110805eeb26ca044aa1f71a5. Note that I haven't tested this image yet, so please let me know if you encounter any issues. @droazen can you provide a roadmap for the CNN filtering tools? These should be deprecated or otherwise managed before this PR is merged. I am not sure who the major stakeholders are here, but any users out there should feel free to chime in. I will try to do a quick self-review and some minor cleanup in the meantime. My expectation is that the timescale for this to get merged will be on the order of a few weeks to months. But it would be great if we can get it in sooner!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-1939607894:201,test,tests,201,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-1939607894,2,['test'],"['tested', 'tests']"
Testability,Thanks for the latest review comments @droazen. I've addressed them all. I'll merge this once the tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2190#issuecomment-258180353:98,test,tests,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2190#issuecomment-258180353,1,['test'],['tests']
Testability,"Thanks for the lightning-quick review! And good thought to add tests---probably just adding them to the current suite of exact-match tests would hopefully suffice, since we rely on existing/library methods (which presumably already have correctness tests) to do the matching. I'll add it to the straggler issues :laughing: . And yes, I don't think the matching here is as sophisticated as that done by VCFEval, but it's probably good enough for the purposes of identifying training variants. I am actually curious how often the start-position strategy gets us into trouble (e.g., we hit an artifact at a multiallelic site, or annotations at multiallelic sites are somehow distributed differently even if all alleles are real, etc.)",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8049#issuecomment-1275064000:63,test,tests---probably,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8049#issuecomment-1275064000,3,['test'],"['tests', 'tests---probably']"
Testability,"Thanks for the pointer @droazen - I missed that recent PR. That does indeed seem to fix it. With the latest from master I get (info removed for readability):. ```; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT test-sample; chr13 32953865 . T <NON_REF> . . END=32953884 GT:DP:GQ:MIN_DP:PL 0/0:204:99:196:0,120,1800; chr13 32953885 . AGTT A,<NON_REF> 3110.60 . . GT:AD:DP:GQ:PGT:PID:PL:PS:SB 0|1:108,82,0:190:99:0|1:32953885_AGTT_A:3118,0,4288,3443,4535,7978:32953885:; chr13 32953888 . T TAA,<NON_REF> 3110.60 . . GT:AD:DP:GQ:PGT:PID:PL:PS:SB 0|1:108,82,0:190:99:0|1:32953885_AGTT_A:3118,0,4288,3443,4535,7978:32953885:61,47,42,40; chr13 32953889 . A <NON_REF> . . END=32953905 GT:DP:GQ:MIN_DP:PL 0/0:211:99:205:0,120,1800; ```. It does seem a little odd that the insertion is emitted as T>TAA when the anchoring T is removed in the phased deletion, but it is being called and that's great.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6817#issuecomment-692325779:210,test,test-sample,210,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6817#issuecomment-692325779,1,['test'],['test-sample']
Testability,"Thanks for the quick review, @fleharty! I'm happy to wait on @ldgauthier's final approval before merging---I think she mentioned something about maybe testing for possible effects once she could build a Docker. @ldgauthier let me know if I need to do anything on my end!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-905867212:151,test,testing,151,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-905867212,1,['test'],['testing']
Testability,"Thanks for the quick review, @ldgauthier!. I don't think my fix will address any non-determinism in the integration tests. I'm inclined to just do better with the new tools---there does seem to be enough duct tape in the integration tests regarding re/setting the RNG so that the exact-match tests consistently pass. As for learning how to run the WARP tests, I think that would indeed be pretty useful---for anyone that might have to update code for VQSR or the new tools in the future! Can we teach everyone to fish? Isn't this what CARROT is for?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1061830649:116,test,tests,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709#issuecomment-1061830649,8,['test'],['tests']
Testability,"Thanks for the response, @droazen! Technically, yes, that would be satisfactory & accurate... and if that's easiest, I'm fine with that. . From a user perspective though, it might be beneficial to report the first occurrence of this error, as that's most likely where I would go back to do future testing & troubleshooting. That being said, all of the overlapping intervals are already outputted to stderr, so all the information is retained regardless, and I could just look through the logs to find that first problematic interval. As an aside, I find it a bit weird that the overlapping interval message shows up as a _warning_ even when using the `-no-overlaps` option (I would assume it would be an error, not a warning). In my experience, most errors cause the program to quit immediately. So, perhaps instead, if this warning were an _error_ when using the `-no-overlaps` option, the program would stop after the first occurrence of this error... and then the error message would be accurate. Maybe that was the original intent of this code. But, again, if that requires much more testing & changes, when a quick rewording would also suffice, there's no need. If it's simply a rewording, I'm happy to make a pull request. Let me know what you think.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8103#issuecomment-1329747570:297,test,testing,297,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8103#issuecomment-1329747570,6,"['log', 'test']","['logs', 'testing']"
Testability,Thanks for the review @droazen. I've addressed all your feedback in the latest commit. I'll merge once the tests pass.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1432#issuecomment-175651593:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1432#issuecomment-175651593,1,['test'],['tests']
Testability,Thanks for the review @lbergelson. I've addressed all your comments. (Note the tests will still fail until there's a new Hadoop-BAM release.),MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3369#issuecomment-322515672:79,test,tests,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3369#issuecomment-322515672,1,['test'],['tests']
Testability,Thanks for the review @ldgauthier! Mutect should be up to date (or at least as up to date as we've ever run on our truth sets). I'm going to rebase and hope that tests will pass 🤞,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6074#issuecomment-518238515:162,test,tests,162,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6074#issuecomment-518238515,1,['test'],['tests']
Testability,"Thanks for the review @meganshand, and sorry for the delayed response. I addressed one of your comments and punted/semi-punted on the others. Tests should also be passing after a rebase. Unless you have strong objections, I'll go ahead and merge---want to get this in before the break!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8074#issuecomment-1351459429:142,Test,Tests,142,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8074#issuecomment-1351459429,1,['Test'],['Tests']
Testability,"Thanks for the review and running those tests, @ldgauthier! Will restore the aforementioned GnarlyGenotyperIntegrationTests and update a few other exact matches in the rebase this afternoon. You also asked above if there was a theoretical reason to change the threshold. Since it seems the original was relatively arbitrary (at least from what I've been told, happy to be corrected), I think we can leave it. The new annotation is strictly larger, so we will then be slightly more conservative about keeping sites if we leave the threshold fixed. You can think of this as a slight change in the decision boundary in genotype-count space---perhaps I can add some plots to this thread this afternoon to demonstrate. In practice, what we care about is whether: 1) many sites flicker across the change in boundary after hard filtering, and/or 2) these sites result in discrepancies post-VQSR. I think the tests you ran suggest that we don't need to worry much about the second issue, and I can take a closer look later to check about the first (which will depend simply on the number of samples and the allele frequency spectrum). We can also take a basic look at how things might change with e.g. more samples using the aforementioned plots.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-914471272:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394#issuecomment-914471272,4,['test'],['tests']
Testability,"Thanks for the review, @fleharty! I addressed the comments (Travis not passing because of the CLOUD tests). Regarding the downgrade of quality, I think that it should be 0.8 to keep it as in samtools because it is already noted in the javadoc what we are doing. If someone wants to use a different approach should use other method (like `FragmentUtils.adjustQualsOfOverlappingPairedFragments`) and/or their own implementation. Another way to keep it consistent with samtools but give to the client some freedom, a `double` could be added (checking will be required for the range). Back to you @fleharty. And thanks again for have a look to this!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2154#issuecomment-253170324:100,test,tests,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2154#issuecomment-253170324,1,['test'],['tests']
Testability,"Thanks for the review, @fleharty!. Thanks for highlighting the AVX business, which I didn't consider carefully. This was just copied from the other HC integration tests, and was in turn copied to the M2 tests---but I now realize that the style of the M2 tests is a little different in that an implementation isn't specified. But I think in both cases, we'll try to call an AVX implementation (since the M2 tests will default to `FASTEST_AVAILABLE`) and that Travis should be OK with it, at least?. @droazen can correct me if I'm wrong and let me know if he'd like further review on this branch. Otherwise I'll try to address comments and get this in before I head out on vacation next week.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6885#issuecomment-906679400:163,test,tests,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6885#issuecomment-906679400,4,['test'],"['tests', 'tests---but']"
Testability,"Thanks for the suggestion @fnothaft. Unfortunately, switching to Scala 2.11 didn't help as I still get a compile error due to the logging change in Spark 2:. ```; /Users/tom/workspace/gatk/src/main/java/org/broadinstitute/hellbender/utils/read/GATKReadToBDGAlignmentRecordConverter.java:38: error: cannot access Logging; return converter.convert(gatkRead.convertToSAMRecord(header), dict, readGroups);; ```. I get that with `org.bdgenomics.adam:adam-core_2.11:0.19.0` too.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2073#issuecomment-241995596:130,log,logging,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2073#issuecomment-241995596,2,"['Log', 'log']","['Logging', 'logging']"
Testability,"Thanks for the test case! From what I've seen in the past this issue happens with indels, so this makes sense to me.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6289#issuecomment-783640221:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6289#issuecomment-783640221,1,['test'],['test']
Testability,Thanks for the test data @vladsaveliev ! I already had a fix for this in a branch. We can probably get it merged in time for the up coming release.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7483#issuecomment-946045992:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7483#issuecomment-946045992,1,['test'],['test']
Testability,Thanks for these fixes! Looks like the tests have passed and Lee has one suggestion.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4009#issuecomment-355056484:39,test,tests,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4009#issuecomment-355056484,1,['test'],['tests']
Testability,"Thanks for your feedback, @cmnbroad. In my case, I think that `IntegrationTestSpec` is a good way of avoid complicated code to test tool results, but it is true that it have some problems (one that I had was the usage for testing programs where the outputs are determined by a prefix in the command line, but with different suffixes). I think, from the API user point of view, that a class like `IntegrationTestSpec` to facilitate program output testing (including user exceptions) will be nice for developing purposes. Nevertheless, this is just a convenience that I asked for here, but I can try to solve the issues with the `BaseTest` instead. By the way, I would love to have this interface in GATK at least for now, because several of my tools rely on the `IntegrationTestSpecs` for development...",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-243124889:127,test,test,127,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2122#issuecomment-243124889,6,['test'],"['test', 'testing']"
Testability,"Thanks for your help ! I was not using the `new-qual` argument. Here are the different command I used: . ``` ; gatk-launch GenotypeGVCFs --java-options -Xmx23g -ploidy 1 -R $ref --annotations-to-exclude InbreedingCoeff -V gendb://gendb -O all_samples.vcf &> log; ```. You don't think using CombineGVCFs or GenomicDBImport will make any change then ? I will try now using `new-qual`. How long would your GenotypeGVCFs typically run with your 50 human genomes ? Mine ran for 25h for 50 samples and a genome of 5Mbp. Edit : wow ok apparently the new-qual did the trick, my 50 samples genome of 5Mbp then ran in 2 minutes instead of 25h. Pretty weird. Thanks a lot !",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4467#issuecomment-370464854:258,log,log,258,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4467#issuecomment-370464854,1,['log'],['log']
Testability,"Thanks for your work on this @samuelklee! Testing on both wes and wgs would be ideal. For wgs we can use the gatk-sv reference panel, which is our standard (I can help with this once a docker is ready). For wes, 1kgp would work although it's definitely showing its age. Are the integration test differences large?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-1804698174:42,Test,Testing,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8561#issuecomment-1804698174,2,"['Test', 'test']","['Testing', 'test']"
Testability,"Thanks guys. Good to know there's not some major historical reason, and likely expediency at the time. @ldgauthier I'll give it a test in multi-sample mode and report back.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5772#issuecomment-470953375:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5772#issuecomment-470953375,1,['test'],['test']
Testability,"Thanks to a suggestion of mwalker174, I solved the issue. I had to specify, for each input and output file, the full path from the root. All the HPC nodes share the same hdfs, so it worked. What leaves me a bit perplexed, is that the task took 5 minutes to run on a 16 cores nodes, and exactly the same to run on a master-worker setup with 5 workers and 16 cores each (the log cofirms that the tasks were distributed to the workers IP addreses). Is this something expected? Shall I maybe try with alarger input to see the difference in performances? Thank you!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4699#issuecomment-384352326:373,log,log,373,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4699#issuecomment-384352326,1,['log'],['log']
Testability,"Thanks very much for your analysis. Job 4 does create a lot of garbage, but that appears to be inevitable whenever you are dealing with a PairRDD: You have to use a Tuple2 to represent key and value rather than using a more memory-conservative custom data object. You end up with a gazillion tiny objects that survive only during the shuffle. Too bad they didn't base PairRDD on an interface like Map.Entry. Also too bad that you cannot force a shuffle on a (plain old, non-Pair) RDD. Why not just treat it as a key-only structure and allow repartitioning? I mention this not merely to whine, but also in the faint hope that you've developed some helpful workarounds. I don't think we have enough memory to persist the reads, but we can revisit that later. Job 5 *is* doing a lot of computation. It's turning each read into kmers and testing each of those kmers to see if they exist in a large hash table. I don't think there's much opportunity for further optimization -- I knew this would be a bottleneck and tried my best to make the code efficient. The skew in task size is definitely a problem, and I'll be looking for opportunities to address that issue. Thanks again.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2458#issuecomment-292230002:834,test,testing,834,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2458#issuecomment-292230002,1,['test'],['testing']
Testability,"Thanks! Fixed up some inadvertent missed changes. Will squash and merge once tests pass, if @davidbenjamin gives the go ahead!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3590#issuecomment-332307777:77,test,tests,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3590#issuecomment-332307777,1,['test'],['tests']
Testability,"Thanks!. Okay I will make sure to do that in the future. Thanks for the help!. On Tue, Aug 14, 2018 at 11:30 AM, Louis Bergelson <notifications@github.com>; wrote:. > @kvinter1 <https://github.com/kvinter1> In future, it's a good idea to; > wait for tests to pass before merging, otherwise you risk the potential; > penalty of having to buy the team beer if test fail once it's in master.; > Doc changes are pretty low risk, but you never know.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/5104#issuecomment-412913465>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AoMkWKCRyhFXvfzSUI7C26_4qRZPivIoks5uQu0NgaJpZM4V8n05>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5104#issuecomment-412917430:250,test,tests,250,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5104#issuecomment-412917430,2,['test'],"['test', 'tests']"
Testability,"Thanks, @LeeTL1220! Made some minor updates, will merge when tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3820#issuecomment-347597529:61,test,tests,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3820#issuecomment-347597529,1,['test'],['tests']
Testability,"Thanks, @droazen! @asmirnov239 has been looking at PyMC3 updates for gCNV, which will help unlock the conda environment. I understand he has a working branch, but needs to do more testing—perhaps he can comment further?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8004#issuecomment-1228848779:180,test,testing,180,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8004#issuecomment-1228848779,1,['test'],['testing']
Testability,"Thanks, @droazen. While I understand the effects of the funding landscape on academic resources, it seems to me this is a full capitulation of the GATK developer team given a serious bug, especially in light of the fact that the team seems to have enough resources to continue working on Mutect3. Mutect2 has been one of the best performing variant callers of the last years and is a major reason for the Broad's good reputation in the oncology bioinformatics field. GATK and Mutect2 are used by hundreds of institutions in clinical practice, affecting thousands of real patients' lives. Almost all of these institutions are likely to use clinical WES assays due to cost reasons and will thus have been directly affected by this issue _for the last three years_. Also, almost all of these institutions will never learn of this bug since they likely trusted in the developers to have proper functional regression tests in place. If this is indeed the best the Broad can do as an institution, then I will take your offer of providing a build of Mutect2 4.1.8.1 with the log4j vulnerability patched out - thank you. The one thing that I am asking for in addition (for the sake of the overall oncology bioinformatics community), however, is that you conduct a best effort to notify organizations (universities, hospitals, and biotechs/pharmaceuticals that you know are using Mutect2) and best-practise workflow owners (Nextflow, Snakemake, WDL, CWL etc. that include Mutect2) of the forced downgrade. Also, I think it makes sense to include a very prominent warning into the Mutect2 READMEs and GATK best practice documentations and guides. I know that this is work, too, but with success comes responsibility, and I can just hope that providing proper warnings uses less developer bandwidth than applying binary search to find out which of these [10 commits between 4.1.8.1 and 4.1.9.0 that are touching variant filtering (see below)](https://github.com/broadinstitute/gatk/compare/4.1.8.1...4.1.9.0) bro",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7921#issuecomment-1535909226:912,test,tests,912,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7921#issuecomment-1535909226,2,['test'],['tests']
Testability,"Thanks, @gokalpcelik ! I tested the workaround and indeed when used with a gvcf file rather than GenomicsDB the memory consumption remains reasonable. I only tried GATK 4.6 but it is probably the same with the other versions that have the issue.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8989#issuecomment-2434583196:25,test,tested,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8989#issuecomment-2434583196,1,['test'],['tested']
Testability,"Thanks, @lbergelson. I was also thinkinhg that this code is mostly deprecated, but I wanted to ported as is for the first pass review. I just need to support the new mpileup version (unique sample, because if not it is more difficult), because the consensus one is deprecated. I will update the codec and add some tests for it. In addition, ~~I was thinking to create a list of `PileupElement` inside the feature to make easier to compare the internal pileup, but with ""reads"" of one base-pair.~~ Update to this: `PileupElement`is difficult to generate without including `GATKRead` simple implementation, and I think that it is not worthy. On the other hand, I will improve the walker itself. I will tell you when I finished with the changes.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1862#issuecomment-224419331:314,test,tests,314,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1862#issuecomment-224419331,1,['test'],['tests']
Testability,"Thanks, @vruano, but I think you'll have to give me access to the FC workspace and bucket. I've opened a branch sl_revert_glob that I think will fix the issue. I'll test it out on FC and let you know how it goes.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5217#issuecomment-424415630:165,test,test,165,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5217#issuecomment-424415630,1,['test'],['test']
Testability,"Thanks, David. Still one Travis that failed. I'll rebase and squash, and make sure the tests pass.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6295#issuecomment-566143830:87,test,tests,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6295#issuecomment-566143830,1,['test'],['tests']
Testability,"Thanks, we have access now. I'm pretty sure that sl_revert_glob will fix the error. I've rebased my dev branch sl_filter (which includes the filtering steps Jack mentioned in the BSV meeting today) onto sl_revert and am testing cohort mode on FC now. I'll try to test scattered-case mode as well later today if that succeeds. As @asmirnov239 pointed out to me, this revert leaves #4397 unresolved, so we should go back and clean up at some point. However, our priority now is to get a stable v1 of the SFARI evaluation on FC.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5217#issuecomment-424436535:220,test,testing,220,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5217#issuecomment-424436535,2,['test'],"['test', 'testing']"
Testability,"Thanks, we have reproduced the issue with your files. Did you see any errors logged during the GenomicsDBImport phase? What OS are you running on? Will you be able to help by re-running GenomicsDBImport with a debug version of the libtiledbgenomicsdb.so and `./gatk --java-options ""-Dgenomicsdb.library.path=/path/to/libtiledbgenomicsdb.so"" GenomicsDBImport`? If so, will build and share a debug version with you. As a workaround for now, can you split the intervals to GenomicsDBImport - see https://gatk.broadinstitute.org/hc/en-us/articles/360035531852-Intervals-and-interval-lists? Splitting the chromosome into 2 or 3 roughly equal regions may help.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7012#issuecomment-758304480:77,log,logged,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7012#issuecomment-758304480,1,['log'],['logged']
Testability,"Thanx for feedback. I obviously don’t know much if anything about the underlying logic but; have had enough experience to look in unusual places. Have a good weekend. RDB. On Fri, Nov 1, 2019 at 4:24 PM JP Martin <notifications@github.com> wrote:. > @rdbremel <https://github.com/rdbremel> for ""mystery 1"" see issue #5447; > <https://github.com/broadinstitute/gatk/issues/5447>. This should be an; > innocuous warning that it can't initialize the Google Cloud Storage code; > and shouldn't cause a failure unless you try to access paths that start; > with ""gs://"". Going through the Cloud initialization steps described in the; > README should remove the warning (though again, this isn't required if you; > don't need to read files from the cloud).; >; > Mystery 2: For what it's worth, ""GC overhead limit exceeded"" indicates; > that the VM was spending too much time in GC. Running low on memory is a; > possible cause but generating too many small objects or being stuck in an; > infinite loop of allocation/deallocation are others. In the past these have; > been caused by inputs that were malformed in some way. This isn't the place; > for this discussion though, please file a separate issue since it's a; > separate bug.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/issues/6182?email_source=notifications&email_token=ANCR2VHWQ6XDSUQ6KEGISFDQRSM7TA5CNFSM4I2MRFQKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEC4GNZY#issuecomment-548955879>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ANCR2VEC5ARUEQRTEDGJ3TDQRSM7TANCNFSM4I2MRFQA>; > .; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6182#issuecomment-548989454:81,log,logic,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6182#issuecomment-548989454,2,['log'],['logic']
Testability,"That is not normal @jean-philippe-martin -- eg., a recent passing build of the unit tests on master (https://travis-ci.org/broadinstitute/gatk/builds/219053956) has just 5 out of 419980 tests skipped:. ```; Results: SUCCESS (419980 tests, 419975 successes, 0 failures, 5 skipped); ```. The ~9000+ skips you're seeing are almost certainly due to the intermittent git lfs quota issues -- we've contacted travis (and github) support about this. If you keep re-running the tests they should pass eventually.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292031171:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292031171,4,['test'],['tests']
Testability,"That method is used in tests, isn't it? . I'd be ok with commenting it out for now for the sake of getting this merged, provided that you open a ticket to uncomment the method and re-enable the relevant tests once the package rename is available.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2488#issuecomment-287906266:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2488#issuecomment-287906266,2,['test'],['tests']
Testability,"That should be now ready to review, @cmnbroad! I rebased to the latest master and now this should pass the tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2195#issuecomment-281644683:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2195#issuecomment-281644683,1,['test'],['tests']
Testability,That was a long winded way of saying I think we should just get rid of this test.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5097#issuecomment-413576167:76,test,test,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5097#issuecomment-413576167,1,['test'],['test']
Testability,"That would not be a valid test, since it wouldn't be testing the way the code actually handles invalid intervals. All we want to know is that we throw when we encounter an invalid interval. Did I mention that this very simple change is urgently needed by many branches?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/526#issuecomment-104401315:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/526#issuecomment-104401315,2,['test'],"['test', 'testing']"
Testability,"That's a good sign. However the code above only checks the providers at the client. It'd be interesting to also check what happens at the workers. I wrote ExampleNioCheckFS for this purpose earlier, you can use it. It's only in a test branch of mine (since it's just test code) but it's pretty short. Looks like this:. ````java; /**; * Example of how to use Spark on Google Cloud Storage directly, without using the GCS Hadoop Connector.; */; @CommandLineProgramProperties(; summary = ""Example of how to use Spark on Google Cloud Storage directly, without using the GCS Hadoop Connector"",; oneLineSummary = ""Example of how to use Spark on Google Cloud Storage directly, without using the GCS Hadoop Connector"",; programGroup = ReadProgramGroup.class; ); public class ExampleNioCheckFS extends SparkCommandLineProgram {; private static final long serialVersionUID = 1L;. @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = ""Output file (if not provided, defaults to STDOUT)"", common = false, optional = true); private File OUTPUT_FILE = null;. @Argument(fullName = ""inputPath"", shortName = ""P"", doc = ""Input path (eg. gs://foo/bar.bam)"", optional = false); private String path = null;. // Typically set to number of executors times number of cores per executor.; @Argument(fullName = ""parts"", doc = ""number of partitions"", optional = false); private int parts = 3;. private void countReads(JavaSparkContext ctx) {; PrintStream outputStream;. try {; outputStream = OUTPUT_FILE != null ? new PrintStream(OUTPUT_FILE) : System.out;; }; catch ( FileNotFoundException e ) {; throw new UserException.CouldNotReadInputFile(OUTPUT_FILE, e);; }. NioBam input = new NioBam(path, path + "".bai"");; List<String> ret = input.getReads(ctx, parts).mapPartitions(ExampleNioCheckFS::getFS).collect();; outputStream.println(""**** Results **** : "" + String.join("", "", ret));; }. private static Iterator<String> getFS(Iterator<SAMRecord> rs) {",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2312#issuecomment-267424466:230,test,test,230,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2312#issuecomment-267424466,2,['test'],['test']
Testability,That's correct. I ran into a character encoding issue with a test file at one point. This will make the errors a little more explanatory.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5124#issuecomment-414813822:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5124#issuecomment-414813822,1,['test'],['test']
Testability,That's fine -- just make sure it launches with : ; Build after other projects are built - to gatk-perf test. That's the one that sets up the environment and builds latests dockers. So that needs to happen first then all the other tests downstream after. A clone should capture that but just double check.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3573#issuecomment-329283305:103,test,test,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3573#issuecomment-329283305,2,['test'],"['test', 'tests']"
Testability,"That's very strange @cmnbroad -- in the test I did in front of you yesterday, I added only the exclusion above and it worked fine for me. Are you building with `gradle` or `gradlew`?. Recommend we add whatever exclusions are necessary in a separate, simple PR, independent from the GenomicsDB PR.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2578#issuecomment-292619716:40,test,test,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2578#issuecomment-292619716,2,['test'],['test']
Testability,"Thats a good idea. I don't know what our release plan is. I think we might; do one more minor release on java 8 for someone internal and then give a; bit of time before a java 17 release to let things shake out a bit. There; are a bunch of things we punted until it was merged that we want to get; done related to the update. I will put out a snapshot tonight or tomorrow; for you to test against. I wouldn't anticipate many major problems; updating although there might be some wrangling module exports which is; awfully confusing. The bulk of our issues had to do with fixing the; documentation generation and dealing with spark both of which hopefully; will just work for you. On Thu, Mar 2, 2023, 3:56 PM bbimber ***@***.***> wrote:. > @lbergelson <https://github.com/lbergelson> or @cmnbroad; > <https://github.com/cmnbroad>: would you mind kicking off a build on; > this, so I can see how DISCVR-seq builds against it? Are you planning a; > GATK release any time soon?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1452531115>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABD3RLCRVXIM5Y3O2RC6IKTW2ECP3ANCNFSM6AAAAAAQV3ZLXM>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1452540395:384,test,test,384,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8035#issuecomment-1452540395,1,['test'],['test']
Testability,"The ""WDL test"" CI failures are not related to the changes in this PR, please see this [sanity check PR](https://github.com/broadinstitute/gatk/pull/8369) which is also currently aflame.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8362#issuecomment-1599633824:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8362#issuecomment-1599633824,1,['test'],['test']
Testability,"The -contamination argument was not hooked up properly in the HaplotypeCaller.; This patch fixes the tool argument, and adds tests on artificially contaminated; data to demonstrate that the feature works as intended. Resolves #4312",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4455:125,test,tests,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4455,1,['test'],['tests']
Testability,"The 250k-ish ones are probably ok in large. For any of them, especially the MB+ ones, anything you can reasonably subset (or use a different vcf) without sacrificing the utility of the tests would be good though.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-430772183:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5043#issuecomment-430772183,1,['test'],['tests']
Testability,"The AlleleFrequencyCalculatorUnitTest failure is due to the fact that Genomics DB is pulling in a newer version of testNG (we were using 6.9.6, but now were getting 6.10):. ```; :dependencyInsight; org.testng:testng:6.10 (conflict resolution); \--- com.intel:genomicsdb:0.5.0-proto-3.0.0-beta-1; \--- compile. org.testng:testng:6.9.6 -> 6.10; \--- compile; ```; and 6.10 seems to have a bug in how it handles arrays in lists, which is causing the failure. So we need to add a force resolution statement for testNG in build.gradle:. `force 'org.testng:testng:6.9.6'`. We need to make sure we don't confer this issue on gatk-protected, but thats a [separate issue](https://github.com/broadinstitute/gatk-protected/issues/982).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-296195599:115,test,testNG,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2389#issuecomment-296195599,8,['test'],"['testNG', 'testng']"
Testability,"The CNNPipelineIntegration tests for CNNVariantWriteTensors, CNNVariantTrain and FilterVariantTranches executes tool code, but does no expected results validation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4537:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4537,1,['test'],['tests']
Testability,The CRAM tests in GatherBamFilesIntegrationTest are commented out because they fail without a fix to https://github.com/samtools/htsjdk/issues/365 (the presorted false flag is being ignored so htsjdk expects the reads to already be sorted). The fix is in https://github.com/samtools/htsjdk/pull/368. The GatherBamFilesIntegrationTest tests are not yet merged into master; they currently live in PR #1084.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1141:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1141,2,['test'],['tests']
Testability,"The Carrot run failed due to PAPI error code 9, by the way, not for any reason specific to this branch:. ```; ""executionStatus"": ""Failed"",; ""message"": ""Task BenchmarkComparison.EVALRuntimeTask:NA:4 failed. Job exit code 1. Check gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/2aab3ed0-746b-451e-a7db-1c22fbb1bb29/call-CHMSampleHeadToHead/BenchmarkComparison/82289acc-83e7-49c8-acd0-9b2277166e10/call-EVALRuntimeTask/attempt-4/stderr for more information. PAPI error code 9. Please check the log file for more details: gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/2aab3ed0-746b-451e-a7db-1c22fbb1bb29/call-CHMSampleHeadToHead/BenchmarkComparison/82289acc-83e7-49c8-acd0-9b2277166e10/call-EVALRuntimeTask/attempt-4/EVALRuntimeTask.log."",; ""message"": ""Workflow failed""; ""status"": ""Failed"",; ""message"": ""Task BenchmarkComparison.EVALRuntimeTask:NA:4 failed. Job exit code 1. Check gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/2aab3ed0-746b-451e-a7db-1c22fbb1bb29/call-CHMSampleHeadToHead/BenchmarkComparison/82289acc-83e7-49c8-acd0-9b2277166e10/call-EVALRuntimeTask/attempt-4/stderr for more information. PAPI error code 9. Please check the log file for more details: gs://dsde-methods-carrot-prod-cromwell/BenchmarkVCFsHeadToHeadOrchestrated/2aab3ed0-746b-451e-a7db-1c22fbb1bb29/call-CHMSampleHeadToHead/BenchmarkComparison/82289acc-83e7-49c8-acd0-9b2277166e10/call-EVALRuntimeTask/attempt-4/EVALRuntimeTask.log."",; ""message"": ""Workflow failed""; ""message"": ""Workflow failed""; ```. Looks like the underlying cause is an R parsing issue:. ```; Error in parse(text = text) : <text>:1:1: unexpected '*'; 1: *; ^; Calls: ldply ... llply -> structure -> lapply -> FUN -> eval -> parse; ```. @jamesemery Have you seen that error before in the Carrot HC tests?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8862#issuecomment-2153282072:157,Benchmark,BenchmarkComparison,157,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8862#issuecomment-2153282072,15,"['Benchmark', 'log', 'test']","['BenchmarkComparison', 'BenchmarkVCFsHeadToHeadOrchestrated', 'log', 'tests']"
Testability,"The Carrot tests are failing due to issues with R dependencies unrelated to this PR. Since it might take a day to fix, we are debating whether we're comfortable merging this without seeing the full-scale Carrot HaplotypeCaller test results.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1850830178:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8609#issuecomment-1850830178,2,['test'],"['test', 'tests']"
Testability,"The CollectInsertSizeMetrics test cram file used to be zero-length, and was recently regenerated (most likely with Picard since it has BAM contents) but either way its STILL not a CRAM file. Also removed a stray junit dependency that crept in to CompareBaseQualities.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1803:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1803,1,['test'],['test']
Testability,"The Docker tests will fail in the dev branch unless the image is updated, which I'd rather do off of master. Since you agree that this is trivial, I'm going to go ahead and merge!",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3693#issuecomment-336854819:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3693#issuecomment-336854819,1,['test'],['tests']
Testability,"The ELBO values reported in the log file are supposed to be a smoothed version of the raw ELBO across sliding window average. However, in practice, If you look at these smoothed values rather than the tracked tar file one, one would get a distort impression of how the ELBO converges. They consistently underestimate the raw value which suggests that this is indeed a bug. The example below is kind of mild ... I have seem far worse smoothing with bigger depressed parabolas. (as the one seen between iteration = 1000-1500). The black line is the raw ELBO and the blue lines is the ""smoothed"" ELBO reported in the log. ![elbosmooth](https://user-images.githubusercontent.com/791104/47748444-38578b80-dc61-11e8-8e7e-1ee21e2d22e7.png). **The biggest worry here is whether the bug in calculating that average ""smoothed"" ELBO means that the stats used for convergence (i.e. sigma and SNR) are also miscalculated.** In that is the case, It would probably result in postponing convergence thus it might have gone unnoticed as it would not have a negative effect in the results (unless there is some overfitting as a consequence).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5376:32,log,log,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5376,2,['log'],['log']
Testability,The Funcotator WDL needs to be integrated into the WDL for M2 and plugged into the automated testing.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4088:93,test,testing,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4088,1,['test'],['testing']
Testability,The Funcotator flanks feature introduced in https://github.com/broadinstitute/gatk/pull/5403 still needs test cases for:. * multiple genes overlapping a variant; * all transcripts mode,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5417:105,test,test,105,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5417,1,['test'],['test']
Testability,The GATK3 v3.5-0-g36282e4 commandlines and numbers:. running on gsa5 (has AVX). GVCF mode on 32GB of ram. ```; time java -jar /humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar -T HaplotypeCaller -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta -ERC GVCF --out a.gatk3.g.vcf; ...; real 3m48.076s; user 8m45.049s; ```. GVCF mode on 10GB of ram. ```; time java -Xmx10g -Xms10g -jar /humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar -T HaplotypeCaller -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta -ERC GVCF --out a.gatk3.g.vcf; ...; real 3m39.496s; user 10m16.387s; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1800:213,test,test,213,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1800,4,['test'],['test']
Testability,The GATK3 v3.5-0-g36282e4 commandlines and numbers:. running on gsa5 (has AVX). VCF mode on 32GB of ram. ```; time java -jar /humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar -T HaplotypeCaller -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta --out a.gatk3.vcf; ...; real 1m52.247s; user 2m32.789s; ```. Note:The VCF mode is not what production is running so it's lower priority than GVCF,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1799:212,test,test,212,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1799,2,['test'],['test']
Testability,"The GCS ReadUtils tests are failing intermittently on the Barclay upgrade branch, probably due to filename collision when tests are running in parallel on Travis because the tests don't use unique temporary filenames.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3810:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3810,3,['test'],['tests']
Testability,"The HaplotypeCaller has slightly different behavior between VCF and GVCF output in some cases, which means that the variants at the edges of the active region may not be called in both. This is due to the following line:; https://github.com/broadinstitute/gatk/blob/89ea9e01225db5c9bbe262c888a0abb74509f94c/src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyRegionTrimmer.java#L318. The behavior for VCF mode should be made to conform to GVCF mode by defining `callableRegion = originalRegion.trim(callableSpan, extendedSpan);`. Super easy fix, but will break a bunch of tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5676:602,test,tests,602,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5676,1,['test'],['tests']
Testability,The HaplotypeCallerSpark tests are not very sensitive. Major changes to the algorithm may not fail any of the tests. We should more and more tests and more sensitive tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4302:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4302,4,['test'],['tests']
Testability,"The Hardy-Weinberg equilibrium (HWE) theorem characterizes the distributions of genotype frequencies in populations that are not evolving. Let’s recall it in its simplest form. [Hardy-Weinberg] Let ( A ) and ( a ) be alleles at a single locus in a non-evolving population with random mating. Let ( p ) and ( q ) be their respective frequencies in that population. ( p ) and ( q ) will remain constant in average from generation to generation. The expected frequencies of the genotypes, ( AA ), ( Aa ) and ( aa ), will also remain constant and are respectively ( p^2 ), ( 2pq ), and (q^2 ). Description:. Use Wigginton’s exact test because it adequately controls type I errors in large and small samples. Calculated by:. Pedstats and vcftools use efficient implementations from Wigginton et al.; use code by Wigginton as your starting point (need to translate to java i think). Remark:. Deviations from HWE can indicate inbreeding, admixture, or population stratification. In order to avoid the latter, HWE tests should be run for each ethnicity/population separately. Typically a variant is filtered out if, for any of the ethnicities, the P-value is lower than (10^\textrm{-6}). HWE tests can also identify loci with systematic genotyping errors, which makes HWE useful for QC.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/538:626,test,test,626,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/538,3,['test'],"['test', 'tests']"
Testability,"The Mutect2 WDL in the repo has a near copy of the funcotator WDL. In the interests of consolidation for easier testing and so on, Mutect2 should call Funcotator as an imported task or subworkflow. Right now the Mutect2 version is in WDL 1.0 while the funcotator version is draft-3. Also, Mutect2 is tested in Travis and in a Terra featured workspace, while the Funcotator version doesn't appear to be tested currently.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6579:112,test,testing,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6579,3,['test'],"['tested', 'testing']"
Testability,The PR is undergoing Travis tests.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3156#issuecomment-310684230:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3156#issuecomment-310684230,1,['test'],['tests']
Testability,"The ParaStor file system suffers from low CPU operating efficiency and extremely slow read and write speeds. If I test it on my own mobile hard drive, it's normal. The file format of my mobile hard disk is EXT4",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8546:114,test,test,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8546,1,['test'],['test']
Testability,The Python scripts called by the PythonScriptExecutor will require python dependencies which can be managed within a conda environment. Is there a way to load the appropriate conda environment from GATK so that users and unit tests can run the PythonScriptExecutor without worrying about wrangling python libraries. @samuelklee @mbabadi @cmnbroad Any ideas?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3692:226,test,tests,226,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3692,1,['test'],['tests']
Testability,The README suggests that. >You can use test.single when you just want to run a specific test class:; >`./gradlew test -Dtest.single=SomeSpecificTestClass`. But when I run `./gradlew test -Dtest.single=HaplotypeCallerIntegrationTest` or `./gradlew test -Dtest.single=org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerIntegrationTest` gradle runs the entire integration test suite. Running `./gradlew test --tests *HaplotypeCallerIntegrationTest` does produce the desired result of running just `HaplotypeCallerIntegrationTest`,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6853:39,test,test,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6853,8,['test'],"['test', 'tests']"
Testability,"The SAMRecord class currently allows the header to be set to null (either at construction time or via `setHeader()`), but may blow up or allow itself to enter an inconsistent state when it lacks a header (eg., the reference name and reference index can get out of sync). We should patch this class (and subclasses such as `BAMRecord`) in https://github.com/samtools/htsjdk/ to behave sensibly in all cases when a header is not present (eg., use a special missing value for reference index when the reference index cannot be looked up), and add unit tests to prove that headerless `SAMRecords` function correctly. This is important for dataflow and spark, where we want to serialize `SAMRecords` without paying the cost of serializing a header for each record.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/903:549,test,tests,549,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/903,1,['test'],['tests']
Testability,The SV discovery pipeline threw a bunch of errors seemingly related to this:; https://issues.apache.org/jira/browse/SPARK-21133. A sample error from my log:; 17/07/17 14:33:17 ERROR org.apache.spark.util.Utils: Exception encountered; java.lang.NullPointerException; 	at org.apache.spark.scheduler.HighlyCompressedMapStatus$$anonfun$writeExternal$2.apply$mcV$sp(MapStatus.scala:171); 	at org.apache.spark.scheduler.HighlyCompressedMapStatus$$anonfun$writeExternal$2.apply(MapStatus.scala:167); 	at org.apache.spark.scheduler.HighlyCompressedMapStatus$$anonfun$writeExternal$2.apply(MapStatus.scala:167); 	at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1303); 	at org.apache.spark.scheduler.HighlyCompressedMapStatus.writeExternal(MapStatus.scala:167); 	at java.io.ObjectOutputStream.writeExternalData(ObjectOutputStream.java:1459); 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1430); 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178); 	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1378); 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174); 	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348); 	at org.apache.spark.MapOutputTracker$$anonfun$serializeMapStatuses$1.apply$mcV$sp(MapOutputTracker.scala:617); 	at org.apache.spark.MapOutputTracker$$anonfun$serializeMapStatuses$1.apply(MapOutputTracker.scala:616); 	at org.apache.spark.MapOutputTracker$$anonfun$serializeMapStatuses$1.apply(MapOutputTracker.scala:616); 	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1337); 	at org.apache.spark.MapOutputTracker$.serializeMapStatuses(MapOutputTracker.scala:619); 	at org.apache.spark.MapOutputTrackerMaster.getSerializedMapOutputStatuses(MapOutputTracker.scala:562); 	at org.apache.spark.MapOutputTrackerMaster$MessageLoop.run(MapOutputTracker.scala:351); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); 	at java.util.conc,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3290#issuecomment-315846491:152,log,log,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3290#issuecomment-315846491,1,['log'],['log']
Testability,"The SVConcordance tool is currently too inefficient in terms of memory usage, requiring several 100's of GB of heap space on ~100K samples. This PR aims to reduce memory usage in two ways:. 1. Truth VCF records are stripped of all genotype fields except `GT` and `CN`, which are necessary and sufficient for concordance computations.; 2. A new option `--do-not-sort` is introduced to skip output record sorting. A major source of heap usage is the output buffer in the `ClosestSVFinder` class, which ensures records are emitted in coordinate-sorted order. This buffer quickly fills, however, when there is at least one record being actively clustered that spans a large interval because the buffer cannot be flushed until a variant beyond the maximal clusterable coordinate of that large variant is encountered. This option will allow users to substantially reduce max heap usage on larger call sets (a single SVRecord can consume ~100MB with 100K samples). Includes an integration test to cover the `--do-not-sort` functionality.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8623:982,test,test,982,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8623,1,['test'],['test']
Testability,"The Spark Dataflow tests started failing after the Spark code merge. The problem is that Spark Dataflow uses a shared SparkContext, while the new Spark codes uses a context per test, and there is an odd interaction where calling `stop()` on a context sets its static SparkEnv to null, which then causes the Spark Dataflow shared context to fail. This fix puts all of the new Spark tests into a `spark` group, so they don't run together. A longer term fix is to have a single shared Spark Context for both Spark and Spark Dataflow. (See discussion here: https://issues.apache.org/jira/browse/SPARK-2243) This will require some changes to Spark Dataflow. I also removed the Travis `DATAFLOW_RUNNER=SparkPipelineRunner CLOUD=mandatory` combination, which we talked about removing before since it's not a very meaningful combination.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/879:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/879,3,['test'],"['test', 'tests']"
Testability,"The Spark version of testExampleAssemblyRegionWalker fails reliably when I run all of the tests locally through Gradle. When I run the test by itself, either through Gradle or through IntelliJ, it always passes. . Most of the time when it fails, the test finishes, but the output doesn't match the expected output. The test appears to assume a single output part file; however when it fails there are many part files (about 70), and you get the (second) stack below. There may be a deeper problem when there are multiple partitions though, since sometimes the test fails mid-run with a ConcurrentModificationException:. org.apache.spark.SparkException: Job aborted due to stage failure: Task 16 in stage 1251.0 failed 1 times, most recent failure: Lost task 16.0 in stage 1251.0 (TID 2169, localhost): java.util.ConcurrentModificationException; 	at java.util.ArrayDeque$DeqIterator.next(ArrayDeque.java:643); 	at org.broadinstitute.hellbender.engine.FeatureCache.getCachedFeaturesUpToStopPosition(FeatureCache.java:216); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.queryAndPrefetch(FeatureDataSource.java:393); 	at org.broadinstitute.hellbender.engine.FeatureManager.getFeatures(FeatureManager.java:264); 	at org.broadinstitute.hellbender.engine.FeatureContext.getValues(FeatureContext.java:163); 	at org.broadinstitute.hellbender.engine.FeatureContext.getValues(FeatureContext.java:115); 	at org.broadinstitute.hellbender.tools.examples.ExampleAssemblyRegionWalkerSpark.lambda$assemblyFunction$213c9289$1(ExampleAssemblyRegionWalkerSpark.java:95); 	at org.apache.spark.api.java.JavaPairRDD$$anonfun$toScalaFunction$1.apply(JavaPairRDD.scala:1028); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at org.apache.spark.rdd.PairRDDFunctions$$anonfun$saveAsHadoopDataset$1$$anonfun$13$$anonfun$apply$7.apply$mcV$sp(PairRDDFunctions.scala:1204); 	at org.apache.spark.rdd.PairRDDFunctions$$anonfun$saveAsHadoo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:21,test,testExampleAssemblyRegionWalker,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,6,['test'],"['test', 'testExampleAssemblyRegionWalker', 'tests']"
Testability,The SplitReads integration tests will fail once we upgrade htsjdk without this.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1241:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1241,1,['test'],['tests']
Testability,"The StreamingPythonExecutor unit test `testStderrOutput` fails intermittently on Travis. We should try flushing stderr to eliminate the race condition, or else just remove the test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5065:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5065,3,['test'],"['test', 'testStderrOutput']"
Testability,The TableFeature class has almost no documentation and barely any tests. those two are completely unused and untested.; getAllValues; getValuesTo(int columnPosition) . Both doc and testing needs to improve for this class.; Came up in review of #449,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/453:66,test,tests,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/453,2,['test'],"['testing', 'tests']"
Testability,"The Talkowski lab version of this is in R and requires some packages that don't seem to be available anymore as well as the python tool svtk, also developed in their lab. It also localizes all the files with a separate Java program they developed. Their implementation is here (most critically gCNV_Pipeline.Rmd and gCNV_helper.jar): https://github.com/theisaacwong/talkowski/tree/master/gCNV It appears to be under active development. My simplified implementation is at https://app.terra.bio/#workspaces/broad-firecloud-dsde-methods/gCNV-CMG-test/notebooks/launch/perform_clustering.ipynb but it's still under development with some help from Brian in TAG.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5632#issuecomment-926857837:543,test,test,543,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5632#issuecomment-926857837,2,['test'],['test']
Testability,"The Travis error is:. The log length has exceeded the limit of 4 MB (this usually means that the test suite is; raising the same exception over and over). The job has been terminated."". Looks like we'll have to make our tests less chatty.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292004572:26,log,log,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2506#issuecomment-292004572,3,"['log', 'test']","['log', 'test', 'tests']"
Testability,"The Travis tests are failing because the FIFOFILE that I created in the expected output dir for the tar.gz extraction tests does not seem to exist in git lfs. @droazen @lbergelson Do either of you know if this is a limitation or if there is some way to fix it? I can make a system call to extract the files for the expected results, but that's gross.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5150#issuecomment-419589879:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5150#issuecomment-419589879,2,['test'],['tests']
Testability,The TwoBit API can't handle queries beyond the ends of contigs (we get; an assertion failure). This changes ReferenceTwoBitSource to truncate query; intervals at contig ends as necessary. Resolves #1214,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1236:75,assert,assertion,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1236,1,['assert'],['assertion']
Testability,The Utils.concat() methods need unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7916:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7916,1,['test'],['tests']
Testability,"The VCF input I used is dbsnp_138.b37.excluding_sites_after_129.vcf, at 2.3 GB.; It takes 0.47min to copy over. The local computation itself is only a few seconds:; 0.04min on the 4-cpu machine,; 0.05min on the 1-cpu machine,; 0.07min on the 1-cpu machine when ASYNC is on. Running with NIO takes:; 0.21min on the 4-cpu machine,; 0.59min on the 1-cpu machine,. A lot of the IO is done by the network card or operating system, so while we're prefetching on that thread, other threads can make progress. Not all of it, of course, so we pay a little bit of a cost as we have to switch between threads. The best scenario is one where there is both a lot of IO and a lot of computation, so we win most by overlapping them. The VCF case here is borderline because there is so little computation. The fact that we can make progress during IO is confirmed by the ""whole file"" case, where doing the reading and computation in parallel is faster than doing the copy first, then compute - even on a single-core VM. You're asking about `use_async_io_write_tribble`. I didn't set it explicitly and my logs show it was turned off in every experiment:; `INFO SelectVariants - Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false`. I can certainly run more experiments if you'd like; let's start a private discussion for that.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2424#issuecomment-284084416:1088,log,logs,1088,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2424#issuecomment-284084416,1,['log'],['logs']
Testability,The WDL GvsAoUReblockGVCF contains logic specific to AoU and as such does not belong in gatk (or warp). It is being added to the broadinstitute/hops-aou-drc repo. Jira ticket: https://broadworkbench.atlassian.net/browse/DFE-761; PR in hops-aou-drc: https://github.com/broadinstitute/hops-aou-drc/pull/148,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8300:35,log,logic,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8300,1,['log'],['logic']
Testability,"The WDL auto-gen code includes code to generate a JSON input file with synthesized test data for every WDL, but the test generation code is not mutex-argument aware (the WDLs work fine on such tools; its just that we can't test such a tool using the autogenerated tests data). When this is fixed, the hard-coded work-around for the mutex arg present in all Spark tools ((`output-shard-tmp-dir`) in `GATKWDLWorkUnitHandler.testValueAsJSON` can be removed.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6805:83,test,test,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6805,5,['test'],"['test', 'testValueAsJSON', 'tests']"
Testability,"The `ExtractCohortLiteFilterRecordUnitTest` appears to be blowing up b/c it's looking for a ""calibration_sensitivity"" field in the `src/test/resources/org/broadinstitute/hellbender/tools/gvs/extract/ExtractCohortLiteFilterRecord/test_input.avro` file that's not there. Unexpectedly (for VQSR Lite) there is a ""vqslod"" field. ```; $ avro-tools getschema ~/gitrepos/gatk/src/test/resources/org/broadinstitute/hellbender/tools/gvs/extract/ExtractCohortLiteFilterRecord/test_input.avro ; 23/04/11 16:22:10 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; {; ""type"" : ""record"",; ""name"" : ""Root"",; ""fields"" : [ {; ""name"" : ""location"",; ""type"" : [ ""null"", ""long"" ]; }, {; ""name"" : ""alt"",; ""type"" : [ ""null"", ""string"" ]; }, {; ""name"" : ""ref"",; ""type"" : [ ""null"", ""string"" ]; }, {; ""name"" : ""vqslod"",; ""type"" : [ ""null"", ""double"" ]; }, {; ""name"" : ""yng_status"",; ""type"" : [ ""null"", ""string"" ]; } ]; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8284#issuecomment-1504046383:136,test,test,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8284#issuecomment-1504046383,2,['test'],['test']
Testability,"The `HaplotypeCaller` logic for determining whether a read is flow-based is as follows:. ```; public static boolean isFlow(final GATKRead rec) {; return rec.hasAttribute(FlowBasedRead.FLOW_MATRIX_TAG_NAME); || rec.hasAttribute(FlowBasedRead.FLOW_MATRiX_OLD_TAG_KR); || rec.hasAttribute(FlowBasedRead.FLOW_MATRiX_OLD_TAG_TI);; }; ```. So the reads need to have either a ""tp"" (FLOW_MATRIX_TAG_NAME), ""kr"" (FLOW_MATRiX_OLD_TAG_KR), or ""ti"" (FLOW_MATRiX_OLD_TAG_TI) attribute in order to be considered flow-based.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8112#issuecomment-1331258138:22,log,logic,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8112#issuecomment-1331258138,1,['log'],['logic']
Testability,"The `PS` tag should be type `Integer`, not `String` according to the spec, but no error is reported (for me). ```bash; bcftools view https://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release/NA12878_HG001/latest/GRCh38/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_PGandRTGphasetransfer.vcf.gz chr1:4001310-4001310 > test.vcf; ```. Related: https://github.com/genome-in-a-bottle/giab_latest_release/issues/15",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6762:351,test,test,351,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6762,1,['test'],['test']
Testability,"The `Protein Change` strings that `Funcotator` produces need to be reviewed for consistency and correctness across MAF and VCF. The reported positions should be the first position of a protein anomaly/change, but for some indels this is not the case (they are off by 1). . In all current cases (commented out and labeled), this is a non-issue because they are positions where the amino acid is repeated, so a deletion of one or the other is equivalent, however strictly speaking the positions are wrong. This should result in a new set of unit tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3842:544,test,tests,544,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3842,1,['test'],['tests']
Testability,The `ReadsDataSourcePool` class and the `CalibrateDragstrModel` tool both don't have tests... @ldgauthier can you test if this branch fixes your cram inputs?. Fixes #7060,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7063:85,test,tests,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7063,2,['test'],"['test', 'tests']"
Testability,The `ReferenceBases` annotation fails with an NPE if there is no reference available. It should fail with a helpful UserException instead. ```; java.lang.NullPointerException; 	at org.broadinstitute.hellbender.tools.walkers.annotator.ReferenceBases.annotate(ReferenceBases.java:33); 	at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngine.annotateContext(VariantAnnotatorEngine.java:161); 	at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngineUnitTest.testAllAnnotations(VariantAnnotatorEngineUnitTest.java:225); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestN,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2799:503,test,testAllAnnotations,503,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2799,3,['test'],"['testAllAnnotations', 'testng']"
Testability,"The `gatktool` Python code installs a system exception handler to catch unhandled Python exceptions, and sends a negative ack to the `StreamingProcessController` when it sees one. The controller then grabs the stdout/stderr contents; writes it to the log/journal file; and throws a java exception. However, there is a shutdown race condition where occasionally the GATK process will get the negative ack and terminate before the Python exception chain is finished processing, and the exception message never appears in the journal. We've seen this happen when the CNN Python inference code runs out of memory. It would be better to have the exception handler write the exception string directly to the ack FIFO, with a message length included, so the controller can deterministically retrieve the message for inclusion in the java exception without having to rely on std in/out.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5100:251,log,log,251,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5100,1,['log'],['log']
Testability,The `transcriptPosition` annotation is being computed incorrectly in the `GencodeFuncotationFactory`. This erroneous logic must be replaced with logic that is correct for the definition of the field as found here:. https://wiki.nci.nih.gov/display/TCGA/Mutation+Annotation+Format+(MAF)+Specification,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4420:117,log,logic,117,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4420,2,['log'],['logic']
Testability,The acceptance criteria are to replicate the gatk3 functionality and tests. depends on #293 . there's code for some of it at googlegenomics/genomics-pipeline. @jean-philippe-martin can you describe the status of that code?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/424:69,test,tests,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/424,1,['test'],['tests']
Testability,The addition of sequence dictionary validation functionality breaks two tests in ValidateVariantsIntegrationTest. These tests are testBadID and testBadID2_OKif_notInDBSNP.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/659:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/659,3,['test'],"['testBadID', 'tests']"
Testability,"The advantage of using SLF4J is that it is a general facade, so it makes simpler to change for one logging system to other if the bound is implemented. For the most common logging systems (log4j, jul, JLC, etc.), there are this implementation and even no-op logging. One of the nice things from slf4j is that it allows to use the logging format set by the software to every library dependency, controlling the verbosity of other libraries too. . After having a look to the gradle dependencies, it seems that ADAM and Spark use slf4j. This will allow better integration with the two libraries: now the `slf4-jdk` is completely removed, and I don't know if this will blow up at some point if some of the ADAM/Spark classes try to load them. In addition, it will make GATK4 more general. Regarding features, I'm not using more that what log4j is providing, but I'm quite familiar with logback and I have a bias to use it if possible, but the GATK framework as it is implemented now ""force"" to use log4j. But anyway, I'm happy also with using log4j and I was only suggesting this for make GATK4 more general (and to come back in my work to logback, but that is just personal taste). @lbergelson, feel free to close the issue.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2176#issuecomment-259211054:99,log,logging,99,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2176#issuecomment-259211054,12,['log'],"['logback', 'logging']"
Testability,"The annotation `StrandArtifact` explodes with an NPE if tumor lod isn't found. It should probably just not annotate if it's prerequisites aren't found. Alternatively, it could throw a helpful UserException. This was discovered by `VariantAnnotatorEngineUnitTest.testAllAnnotations`; ```; java.lang.NullPointerException; 	at org.broadinstitute.hellbender.utils.MathUtils.maxElementIndex(MathUtils.java:723); 	at org.broadinstitute.hellbender.tools.walkers.annotator.StrandArtifact.annotate(StrandArtifact.java:68); 	at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngine.annotateGenotypes(VariantAnnotatorEngine.java:188); 	at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngine.annotateContext(VariantAnnotatorEngine.java:155); 	at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngineUnitTest.testAllAnnotations(VariantAnnotatorEngineUnitTest.java:224); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.r",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:262,test,testAllAnnotations,262,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,2,['test'],['testAllAnnotations']
Testability,"The array schema is fine. What is puzzling is this line `Problematic frame:; \# C [libtiledbgenomicsdb3086049122144672414.so+0x3e3a19] ArraySchema::tile_num(void const*) const+0x79; ` in the error. This particular function should not be invoked for sparse arrays and the array schema has this array correctly marked sparse. Would it be possible to include the full core dump, for instance `/home/groups/MgapGenomicsDb/@files/sequenceOutputPipeline/SequenceOutput_2020-10-06_16-46-33/Job734/hs_err_pid36873.log`? . Can you also try invoking GenomicsDBImport just for this problematic interval in a separate workspace and run SelectVariants/GenotypeGVFs to verify that the error produces?",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6910#issuecomment-717013426:506,log,log,506,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6910#issuecomment-717013426,1,['log'],['log']
Testability,"The broad artifactory moved to https://broadinstitute.jfrog.io/broadinstitute/. There is a redirect in place which as been working for downloads, but uploads are failing with `401 Unauthorized`. It seems like updating the url fixes the problem. As a second issue, our builds try to upload archives for every integration test build, which worked when we only had 1 integration test build, but now that we have multiples we are uploading duplicates which isn't good. We should fix that, probably by adding either a new environment variable to the travis build, or a final build stage to perform the upload.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3068:320,test,test,320,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3068,2,['test'],['test']
Testability,The broken test seems to be accidental removed the import for `@Advanced`. Hopefully they will pass now.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7105#issuecomment-952103311:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7105#issuecomment-952103311,1,['test'],['test']
Testability,"The build.gradle code below builds the native shared library for AVX PairHMM using gcc and copies the .so file to the desired location. The jar task will archive the .so file in the GATK jar file. ``` gradle; apply plugin: 'cpp'; model {; components {; VectorLoglessPairHMM(NativeLibrarySpec) {; binaries.withType(SharedLibraryBinarySpec) { binary ->; cppCompiler.args ""-I"", ""${System.properties['java.home']}/../include""; cppCompiler.args ""-I"", ""${System.properties['java.home']}/../include/linux""; cppCompiler.args ""-mavx""; linker.args ""-static-libgcc"". task copySharedLib(type: Copy) {; from binary.tasks; into ""build/classes/main/org/broadinstitute/hellbender/utils/pairhmm""; }; jar.dependsOn copySharedLib; }; // skip static library build; binaries.withType(StaticLibraryBinarySpec) { binary ->; buildable = false; }; }; }; }; ```. The gradle gcc plugin expects to find the C++ source code in the default location shown below. We can use a different directory structure, if desired. ```; src/; |-- main; |-- test; `-- VectorLoglessPairHMM; |-- cpp; `-- headers; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1492:1013,test,test,1013,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1492,1,['test'],['test']
Testability,The change looks good once the tests run - for some (other) reason all of the travis builds are failing at the moment.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2262#issuecomment-260471892:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2262#issuecomment-260471892,1,['test'],['tests']
Testability,"The cloud tests are timing out after 10 minutes without emitting any output. It seems like `ApplyBQSRDataflowIntegrationTest.testPR_Cloud` is responsible. It looks like something is crashing in dataflow but the runner is never stopped so it keeps waiting indefinitely (or at least 10 minutes..) See the dataflow log [here](https://console.developers.google.com/project/broad-dsde-dev/dataflow/job/2015-07-24_12_44_26-17415749601435236766). . Executing locally also seems to hang forever, with messages like . ```; Error: (b65a2091061bf0f9): Workflow failed. Causes: (71540087aac21e37): Unable to create VMs. Causes: (71540087aac21994): Error:; Test: Test method testPR_Cloud[0](ApplyBQSR(args=''))(org.broadinstitute.hellbender.tools.walkers.bqsr.ApplyBQSRDataflowIntegrationTest) produced standard out/err: Message: Value for field 'resource.metadata.items[1].value' is too large; ```. Seems like this is possibly a dataflow bug. If the workflow fails in some way the client should be released.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/750:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/750,4,"['Test', 'log', 'test']","['Test', 'log', 'tests']"
Testability,"The code is dependent on the nd4j dtype system property being set to ""double"" by gradle. Otherwise the tests (and the tool itself) fail when run from intellij or from the command line. The nd4j unit tests have the same issue. Its easy enough to set the dtype programmatically, though I'm not sure where the best place to do that is.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3552:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3552,2,['test'],['tests']
Testability,"The command I used is `gatk --java-options ""-Xms8g -Xmx8g"" Mutect2 -R ${ref} -I ${bam} -L ${interval} --max-mnp-distance 0 -O ${vcf} --native-pair-hmm-threads 1 >>${logdir}/${index}.oe 2>&1`. The interval file contains one interval and there are 3200 in total across the human reference genome are being processed by a driver script using Open MPI. ```; $ tail -n 1 000?-scattered.interval_list; ==> 0000-scattered.interval_list <==; chr1 10001 990401 + .; ==> 0001-scattered.interval_list <==; chr1 990402 1970802 + .; ==> 0002-scattered.interval_list <==; chr1 1970803 2951203 + .; ==> 0003-scattered.interval_list <==; chr1 2951204 3931604 + .; ==> 0004-scattered.interval_list <==; chr1 3931605 4912005 + .; ==> 0005-scattered.interval_list <==; chr1 4912006 5892406 + .; ==> 0006-scattered.interval_list <==; chr1 5892407 6872807 + .; ==> 0007-scattered.interval_list <==; chr1 6872808 7853208 + .; ==> 0008-scattered.interval_list <==; chr1 7853209 8833609 + .; ==> 0009-scattered.interval_list <==; chr1 8833610 9814010 + .; ```. The H.P.C. administrator and I don't know what you mean by _thread names_. > I'm not sure what you mean by ""name"" of the threads. From a system perspective, threads don't have names distinct from the process as a whole. I guess it's possible that whatever code you're running attaches an internal name to the thread, but that's purely in the domain of your program – it's not something I can see at a system level.; > ; > To be clear, I'm talking about actual runnable tasks at a system level, i.e. multiple ""lightweight processes"" sharing the same address space – i.e. POSIX threads. How your application (or any runtime framework that you build upon, e.g. Java) is launching and distributing work across these, I don't know – again, that's the domain of your application.; > ; > All I can say is that multiple of these threads were active and causing a significant number of contexts switches between then. Since you're binding your processes to a single core, i",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7156#issuecomment-803684782:165,log,logdir,165,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7156#issuecomment-803684782,2,['log'],['logdir']
Testability,"The command line I use is as /opt/reseq_softwares/gatk-4.1.8.0/gatk GenomicsDBImport --java-options ""-Xmx100g -Xms100g -DGATK_STACKTRACE_ON_USER_EXCEPTION=true"" -R /mnt/nvme1/reference/Gallus_gallus/Ensembl_g6a/new_20220624/Gallus_gallus.GRCg6a.dna.toplevel.fa --sample-name-map samplelist -L chr33.bed --genomicsdb-workspace-path chr33.db.The output log file is as follows，Using GATK jar /mnt/nvme1/opt/reseq_softwares/gatk-4.1.8.0/gatk-package-4.1.8.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx100g -Xms100g -DGATK_STACKTRACE_ON_USER_EXCEPTION=true -jar /mnt/nvme1/opt/reseq_softwares/gatk-4.1.8.0/gatk-package-4.1.8.0-local.jar GenomicsDBImport -R /mnt/nvme1/reference/Gallus_gallus/Ensembl_g6a/Gallus_gallus.GRCg6a.dna.toplevel.fa --sample-name-map samplelist -L chr33.bed --genomicsdb-workspace-path chr33.db; 11:19:39.692 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/mnt/nvme1/opt/reseq_softwares/gatk-4.1.8.0/gatk-package-4.1.8.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Jul 04, 2022 11:19:40 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 11:19:40.099 INFO GenomicsDBImport - ------------------------------------------------------------; 11:19:40.099 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.1.8.0; 11:19:40.100 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 11:19:40.100 INFO GenomicsDBImport - Executing as maosong@nygpu on Linux v3.10.0-1160.45.1.el7.x86_64 amd64; 11:19:40.100 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_312-b07; 11:19:40.100 INFO GenomicsDBImport - Start Date/Time: 2022年7月4日 上午11时19分39秒; 11:19:40.100 INFO GenomicsDBImport - ----------------------------------------",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7952#issuecomment-1196217460:351,log,log,351,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7952#issuecomment-1196217460,1,['log'],['log']
Testability,The concise message is:. ```; cb2@cb2-VirtualBox:~/gatk$ ./gradlew bundle; > Configure project :; Executing: git lfs pull --include src/main/resources/large. > Task :condaStandardEnvironmentDefinition; Created standard Conda environment yml file: gatkcondaenv.yml. > Task :pythonPackageArchive; Created GATK Python package archive in /home/cb2/gatk/build/gatkPythonPackageArchive.zip. > Task :gatkDoc FAILED; Unable to find the 'javadoc' executable. Tried the java home: /usr/lib/jvm/java-11-openjdk-amd64 and the PATH. We will assume the executable can be ran in the current working folder. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':gatkDoc'.; > Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/home/cb2/gatk/build/tmp/gatkDoc/javadoc.options'. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org; ```. And stacktrace flag output looks like:. ```; `cb2@cb2-VirtualBox:~/gatk$ ./gradlew bundle --stacktrace; > Task :gatkDoc FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':gatkDoc'.; > Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/home/cb2/gatk/build/tmp/gatkDoc/javadoc.options'. * Try:; Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Exception is:; org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':gatkDoc'.; at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.accept(ExecuteActionsTaskExecuter.java:166); at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.accept(ExecuteActionsTaskExecuter.java:163); at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:191); at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(Execu,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4155#issuecomment-566796716:941,log,log,941,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4155#issuecomment-566796716,1,['log'],['log']
Testability,"The conditional logic (wgs vs exome, T/N vs T-only) should not be based on the presence or absence of file inputs. This should instead be done using an explicit switch, eg a “mode” argument. Otherwise people are going to run into all sorts of trouble.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3657:16,log,logic,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3657,1,['log'],['logic']
Testability,"The coverage issues were, I believe, due to failing tests.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7861#issuecomment-1148044416:52,test,tests,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7861#issuecomment-1148044416,1,['test'],['tests']
Testability,"The current `IsUsingCompressedReferences`; It does not pass project id that hosted dataset. ; When the project_id is missing in a BigQuery SQL query, the bq command will use the --project_id flag specified in the command as the default project for resolving dataset and table references.; Add additional parameter to allow passing dest project. . In our case; Error we saw in GCP console:; ```; Access Denied: Table terra-vpc-sc-dev-7ee328ad:1kg_wgs_2022q1.INFORMATION_SCHEMA.COLUMNS: User does not have permission to query table terra-vpc-sc-dev-7ee328ad:1kg_wgs_2022q1.INFORMATION_SCHEMA.COLUMNS, or perhaps it does not exist.; ```. `terra-vpc-sc-dev-7ee328ad:1kg_wgs_2022q1.INFORMATION_SCHEMA.COLUMNS` is wrong - `terra-vpc-sc-dev-7ee328ad` is the user workspace; It should be `fc-aou-cdr-synth-test-2.1kg_wgs_2022q1` - `fc-aou-cdr-synth-test-2` is the project that contains CDR data.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9023:798,test,test-,798,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9023,2,['test'],['test-']
Testability,"The current implementation does not check whether `histo.get(testStatU)` returns a valid pointer or not. If runtime optimization is used (such as the case in J9 JIT), JVM may remove that bin if there is nothing in it. The outcome is a `NullPointer` error at runtime for some corner cases. Adding a pointer check can solve the problem.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5190:61,test,testStatU,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5190,1,['test'],['testStatU']
Testability,"The current implementation of VETS borrowed VQSR's logic for classifying variants into SNPs and indels, for which separate models are trained. We retained this logic to make comparisons with VQSR as straightforward as possible. In this logic, which originates from htsjdk, an alternate allele with len(REF) = len(ALT) is counted as a MNP and classified as a SNP. However, we are now applying VETS to long-read genotyping of SVs, where inversions satisfy the same criterion but are then awkwardly classified as SNPs. We should add a toggle to allow classification of MNPs as indels, probably retaining the old behavior as default to not cause any changes for e.g. GVS. Tagging @koncheto-broad and @fabio-cunial for their visibility.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8733:51,log,logic,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8733,3,['log'],['logic']
Testability,The current method of polling the travis build status for master is prone to race condition issues. Since there is really no systematic reason we don't want to run all the tests with every nightly build we should use new travis features to upload the tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3396:172,test,tests,172,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3396,2,['test'],['tests']
Testability,"The current port of the `HaplotypeCaller` in `dr_runnable_haplotypecaller` has several ""fuzzy"" integration tests, in addition to traditional ""exact match"" integration tests, that test that we're above a certain % of concordance with a known good set (currently, GATK 3 output) using selected parts of the records (eg., alleles, genotypes, start/end positions). We should try to expand this strategy to include fuzzy testing for other parts of the output as well, such as annotations, with the ultimate goal of moving away from exact-match testing for the `HaplotypeCaller`. Will need to be done in consultation with methods people, particularly @ldgauthier",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1732:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1732,5,['test'],"['test', 'testing', 'tests']"
Testability,"The current test report suggests that if we split off the tests in the `exome` package into a separate target, we would be close to a balanced 2-way split. Possibly the right way to do this is to have two new values for `TEST_TYPE` in `build.gradle`: `cnvIntegration` and `nonCNVIntegration`. Specifying just `integration` would run all the integration tests, as before. Specifying `cnvIntegration` would run everything in the `exome`, `copynumber`, and `coveragemodel` packages. Specifying `nonCNVIntegration` would run everything outside of those packages.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2818:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2818,3,['test'],"['test', 'tests']"
Testability,"The docker image only uses OpenJDK. However, the way travis is configured, the docker tests will be run once for OpenJDK and once for OracleJDK, but that distinction has no meaning, since the native JVM on the travis VM is irrelevant to what is happening in the docker image.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2748:86,test,tests,86,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2748,1,['test'],['tests']
Testability,"The docs claim that the HWE in htsjdk is a two-sided test, so this is actually what we want for arrays.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6848:53,test,test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6848,1,['test'],['test']
Testability,"The documentation date is currently displayed incorrectly, and nonsensically, and sometimes from the future, in the generated doc. See the bottom of the page at https://software.broadinstitute.org/gatk/documentation/tooldocs/4.0.12.0/#, for example. Before:; `GATK version 4.0.11.0-92-gf9a2e5c-SNAPSHOT built at 09-10-2019 06:10:16`; After:; `GATK version 4.0.11.0-92-gf9a2e5c-SNAPSHOT built at Wed, 9 Jan 2019 18:13:38 -0500`. @bhanugandham Can you test this when you get a chance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5567:450,test,test,450,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5567,1,['test'],['test']
Testability,"The earlier version of BaseQualityClipReadTransformer clipped bases by just removing them from the bases and base qualities arrays, but did not adjust the cigar, coordinate, etc. (thanks to @SHuang-Broad for catching this in #3354). This commit fixes this behavior by invoking the ReadClipper class and adds cigar checking to the unit test. It also makes some minor style changes to the transformer and test code.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3388:335,test,test,335,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3388,2,['test'],['test']
Testability,"The entire test suite aborts if HELLBENDER_TEST_INPUTS isn't set because an exception is thrown when loading the VariantWalkerGCSSupportIntegrationTest class. With this change, the tests will still fail, but the rest of the test suite will run. Depending on what the intent for these tests is, another possibility would be to add a dependsOn method with a hard dependency so the tests would be skipped in the case of no env variable.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2404:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2404,5,['test'],"['test', 'tests']"
Testability,The error `Cannot use index file with textual SAM file` was reported by `AssemblyRegionUnitTest.testCreateFromReadShard`when trying to read what was likely a corrupted large file bam on travis. This error does not accurately reflect the problem and is likely caused by a chain of fallbacks in htsjdk. It's possible that the switch from file -> path has changed the sequence of fallbacks causing this error to appear.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2551:96,test,testCreateFromReadShard,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2551,1,['test'],['testCreateFromReadShard']
Testability,"The error message about allele sorting is unhelpful -- it's from an integration test check for exact match of output vcf against an expected vcf and the ""sort order"" error really just means there are fewer alleles in the output than expected. Since this change is what we want, the solution is just to overwrite the expected VCF. I checked all the discordant files and found nothing wrong, so this is okay. I also looked at all the output after the change `!outputNonVariants` --> `true` that I suggested, and it is definitely more correct.",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6406#issuecomment-582252469:80,test,test,80,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6406#issuecomment-582252469,1,['test'],['test']
Testability,"The existing Spark interface for metrics collectors is described [here](https://github.com/broadinstitute/gatk/blob/fc66240a1a382ad803b7f83ead612f65957a644e/src/main/java/org/broadinstitute/hellbender/tools/spark/pipelines/metrics/MetricsCollectorSpark.java). [Here](https://github.com/broadinstitute/gatk/blob/414cedf60d2041636f772658a6d04f470affb0f4/src/main/java/org/broadinstitute/hellbender/tools/spark/pipelines/metrics/QualityYieldMetricsCollectorSpark.java) is one implementation of that interface, which in turn just delegates to the actual ""tool"" logic component that is reused for all variations of the tool (Spark, standalone, CollectMultiple, etc).",MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2217#issuecomment-254217599:557,log,logic,557,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2217#issuecomment-254217599,1,['log'],['logic']
Testability,The failing test is not related as this just updates some documentation and scripts.,MatchSource.ISSUE_COMMENT,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3790#issuecomment-341686323:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3790#issuecomment-341686323,1,['test'],['test']
