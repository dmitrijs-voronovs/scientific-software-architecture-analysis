quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"			 <; 												 <; Filatov & Thiel correlation									 <; M. Filatov and W. Thiel, Int. J. Quantum Chem. 62, 603 (1997)				 <; M. Filatov and W. Thiel, Mol. Phys. 91, 847 (1997)						 <; GGA = TRUE									 <; Meta = FALSE									 <; LRC = FALSE									 <; Alpha = 1.000000E+00									 <; Omega = 0.000000E+00									 <. => Molecular Quadrature <=										 => Molecular Quadrature <=. Radial Scheme = TREUTLER								 Radial Scheme = TREUTLER; Pruning Scheme = NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap matrix is 1.1340153394E-01.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Core (One-Electron) Hamiltonian.								 SCF Guess: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6384,Toler,Tolerance,6384,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Toler'],['Tolerance']
Availability,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3677,error,error,3677,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['error'],['error']
Availability," 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2417,echo,echo,2417,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['echo'],['echo']
Availability," ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMV@psi@@YAXDHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr，该符号在函数 ""void __cdecl psi::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double *,int)"" (?C_DSYR2@psi@@YAXDHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2k，该符号在函数 ""void __cdecl psi::C_DSYR2K(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYR2K@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrk，该符号在函数 ""void __cdecl psi::C_DSYRK(char,char,int,int,double,double *,int,double,double *,int)"" (?C_DSYRK@psi@@YAXDDHHNPEANHN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbmv，该符号在函数 ""void __cdecl psi::C_DTBMV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBMV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbsv，该符号在函数 ""void __cdecl psi::C_DTBSV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBSV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpmv，该符号在函数 ""void __cdecl psi::C_DTPMV(char,char,char,int,double *",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:12900,error,error,12900,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests); tdscf = 352.79 sec*proc (2 tests); tutorial = 24.08 sec*proc (4 tests); uhf = 3.31 sec*proc (1 test); x2c = 24.82 sec*proc (4 tests). Total Test time (real) = 7214.27 sec. The following tests FAILED:; 192 - dft-vv10 (Failed); 197 - dft-dens-cut (Failed); 210 - fsapt-terms (Failed); 213 - fsapt-ext-abc (Failed); 214 - fsapt-ext-abc2 (Failed); 215 - fsapt-ext-abc-au (Failed); 452 - dft-smoke (Failed); 525 - fsaptd-terms (Failed); 527 - dftd4-r2scan (Failed); Errors while running CTest; Output from these tests are in: /gpfs/alpine2/scratch/jslj23/chm205/psi4/build/Testing/Temporary/LastTest.log; Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:20013,Error,Errors,20013,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,"['Error', 'failure']","['Errors', 'failure']"
Availability," (?C_DPTCON@psi@@YAHHPEAN0N00@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpteqr，该符号在函数 ""int __cdecl psi::C_DPTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DPTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptrfs，该符号在函数 ""int __cdecl psi::C_DPTRFS(int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *)"" (?C_DPTRFS@psi@@YAHHHPEAN0000H0H000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsv，该符号在函数 ""int __cdecl psi::C_DPTSV(int,int,double *,double *,double *,int)"" (?C_DPTSV@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsvx，该符号在函数 ""int __cdecl psi::C_DPTSVX(char,int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,double *)"" (?C_DPTSVX@psi@@YAHDHHPEAN0000H0H0000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrf，该符号在函数 ""int __cdecl psi::C_DPTTRF(int,double *,double *)"" (?C_DPTTRF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrs，该符号在函数 ""int __cdecl psi::C_DPTTRS(int,int,double *,double *,double *,int)"" (?C_DPTTRS@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbev，该符号在函数 ""int __cdecl psi::C_DSBEV(char,char,int,int,double *,int,double *,double *,int,double *)"" (?C_DSBEV@psi@@YAHDDHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevd，该符号在函数 ""int __cdecl psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:37869,error,error,37869,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3028,mainten,maintenance,3028,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['mainten'],['maintenance']
Availability," *,double *,double *,double *)"" (?C_DPTSVX@psi@@YAHDHHPEAN0000H0H0000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrf，该符号在函数 ""int __cdecl psi::C_DPTTRF(int,double *,double *)"" (?C_DPTTRF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrs，该符号在函数 ""int __cdecl psi::C_DPTTRS(int,int,double *,double *,double *,int)"" (?C_DPTTRS@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbev，该符号在函数 ""int __cdecl psi::C_DSBEV(char,char,int,int,double *,int,double *,double *,int,double *)"" (?C_DSBEV@psi@@YAHDDHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevd，该符号在函数 ""int __cdecl psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,doubl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:38632,error,error,38632,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *)"" (?C_DSYSVX@psi@@YAHDDHHPEANH0HPEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrd，该符号在函数 ""int __cdecl psi::C_DSYTRD(char,int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@YAHDHPEANH0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrf，该符号在函数 ""int __cdecl psi::C_DSYTRF(char,int,double *,int,int *,double *,int)"" (?C_DSYTRF@psi@@YAHDHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytri，该符号在函数 ""int __cdecl psi::C_DSYTRI(char,int,double *,int,int *,double *)"" (?C_DSYTRI@psi@@YAHDHPEANHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrs，该符号在函数 ""int __cdecl psi::C_DSYTRS(char,int,int,double *,int,int *,double *,int)"" (?C_DSYTRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbcon，该符号在函数 ""int __cdecl psi::C_DTBCON(char,char,char,int,int,double *,int,double *,double *,int *)"" (?C_DTBCON@psi@@YAHDDDHHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbrfs，该符号在函数 ""int __cdecl psi::C_DTBRFS(char,char,char,int,int,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTBRFS@psi@@YAHDDDHHHPEANH0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbtrs，该符号在函数 ""int __cdecl psi::C_DTBTRS(char,char,char,int,int,int,double *,int,double *,int)"" (?C_DTBTRS@psi@@YAHDDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgevc，该符号在函数 ""int __cdecl ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:48805,error,error,48805,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/au",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:3115,ROBUST,ROBUST,3115,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['ROBUST'],['ROBUST']
Availability," -20767.22191508719698 1.03359e+00 7.27536e-04 DIIS/ADIIS; @DF-RKS iter 35: -20767.30054954416119 -7.86345e-02 7.44286e-04 DIIS/ADIIS; @DF-RKS iter 36: -20768.48520793548960 -1.18466e+00 3.90872e-04 DIIS/ADIIS; @DF-RKS iter 37: -20760.76716258910164 7.71805e+00 1.04468e-03 DIIS/ADIIS; @DF-RKS iter 38: -20768.55429866314080 -7.78714e+00 4.52478e-04 DIIS/ADIIS; @DF-RKS iter 39: -20768.68773671058443 -1.33438e-01 3.57019e-04 DIIS/ADIIS; @DF-RKS iter 40: -20768.48564212785277 2.02095e-01 4.58988e-04 DIIS/ADIIS; @DF-RKS iter 41: -20768.13969658983478 3.45946e-01 5.78947e-04 DIIS/ADIIS; @DF-RKS iter 42: -20762.40168626864761 5.73801e+00 9.73915e-04 DIIS/ADIIS; @DF-RKS iter 43: -20766.25151067776460 -3.84982e+00 7.95995e-04 DIIS/ADIIS; @DF-RKS iter 44: -20765.44779441227365 8.03716e-01 9.14875e-04 DIIS/ADIIS; @DF-RKS iter 45: -20765.88519158808413 -4.37397e-01 8.46012e-04 DIIS/ADIIS; @DF-RKS iter 46: -20765.45932088459085 4.25871e-01 9.17563e-04 DIIS/ADIIS; @DF-RKS iter 47: -20766.50827718868823 -1.04896e+00 1.04726e-03 DIIS/ADIIS; @DF-RKS iter 48: -20768.31847177083182 -1.81019e+00 5.14600e-04 DIIS/ADIIS; @DF-RKS iter 49: -20768.02143037749192 2.97041e-01 5.84422e-04 DIIS/ADIIS; @DF-RKS iter 50: -20761.83031277303962 6.19112e+00 8.91825e-04 DIIS/ADIIS; @DF-RKS iter 51: -20768.07299881569270 -6.24269e+00 6.34851e-04 DIIS/ADIIS; @DF-RKS iter 52: -20768.59364478812495 -5.20646e-01 4.92054e-04 DIIS/ADIIS; @DF-RKS iter 53: -20768.58960690460299 4.03788e-03 4.84011e-04 DIIS/ADIIS; @DF-RKS iter 54: -20768.33116902869369 2.58438e-01 4.15860e-04 DIIS/ADIIS; @DF-RKS iter 55: -20768.33156887947553 -3.99851e-04 4.95197e-04 DIIS/ADIIS; @DF-RKS iter 56: -20762.57387532185021 5.75769e+00 9.89335e-04 DIIS/ADIIS; @DF-RKS iter 57: -20766.27465992301950 -3.70078e+00 8.06840e-04 DIIS/ADIIS. Psi4 stopped on: Tuesday, 30 August 2022 05:31PM; Psi4 wall time for execution: 5:34:28.48. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:25140,error,error,25140,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['error'],['error']
Availability," -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14475,error,error,14475,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sok",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1778,error,error,1778,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['error'],['error']
Availability," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:3094,failure,failure,3094,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['failure'],['failure']
Availability," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:2047,error,error,2047,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,1,['error'],['error']
Availability," 2817; Number of Cartesian functions: 3173; Spherical Harmonics?: true; Max angular momentum: 3. ==> DFT Potential <==. => LibXC <=. Version 5.2.3; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-D3BJ <= . wB97M-V with D3(BJ) instead of VV10 dispersion . A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018; N. Mardirossian, M. Head-Gordon, J. Chem. Phys. 144, 214110, 2016. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:11548,Toler,Tolerance,11548,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Toler'],['Tolerance']
Availability," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20783,avail,available,20783,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability," @RKS iter 89: -128.84997768340841 -3.17755e-11 2.03835e-06 DIIS; @RKS iter 90: -128.84997768340452 3.89377e-12 2.83140e-06 DIIS; @RKS iter 91: -128.84997768341313 -8.61178e-12 4.42947e-06 DIIS; @RKS iter 92: -128.84997768341492 -1.79057e-12 3.69111e-06 DIIS; @RKS iter 93: -128.84997768340847 6.45173e-12 1.00965e-05 DIIS; @RKS iter 94: -128.84997768341520 -6.73595e-12 5.17369e-06 DIIS; @RKS iter 95: -128.84997768341461 5.96856e-13 4.11707e-06 DIIS; @RKS iter 96: -128.84997768340847 6.13909e-12 4.30105e-06 DIIS; @RKS iter 97: -128.84997768341833 -9.86233e-12 2.90666e-06 DIIS; @RKS iter 98: -128.84997768339980 1.85310e-11 5.70420e-06 DIIS; @RKS iter 99: -128.84997768338903 1.07718e-11 2.47201e-06 DIIS; @RKS iter 100: -128.84997768342927 -4.02451e-11 7.70997e-06 DIIS. ==> Post-Iterations <==. Failed to converge.; Iterations did not converge.; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Psi4 stopped on: Wednesday, 13 June 2018 11:12AM; Psi4 wall time for execution: 0:00:23.39. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:23495,Error,Error,23495,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,3,"['Error', 'error']","['Error', 'error']"
Availability," Basis Set: DEF2-SVP; Blend: DEF2-SVP; Number of shells: 30; Number of basis functions: 60; Number of Cartesian functions: 60; Spherical Harmonics?: false; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: SVWN <=. Slater exchange; Vosko, Wilk & Nusair (VWN5_RPA); P. A. M. Dirac, Math. Proc. Cambridge Philos. Soc. 26, 376 (1930) (10.1017/S0305004100016108); F. Bloch, Z. Phys. 57, 545 (1929) (10.1007/BF01340281); S. H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys. 58, 1200 (1980) (10.1139/p80-159). Deriv = 1; GGA = FALSE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_VWN_RPA. => LibXC Density Thresholds <==. XC_LDA_C_VWN_RPA: 1.00E-15; XC_LDA_X: 1.00E-15. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 88; Spherical Points = 434; Total Points = 292072; Total Blocks = 2181; Max Points = 256; Max Functions = 60; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: DEF2-UNIVERSAL-JFIT; Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry C line 170 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs; atoms 3-8 entry H line 17 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs. ==> Integral Setup <==. DFHelper Memory: AOs need 0.007 GiB; user supplied 83.698 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:5431,Toler,Tolerance,5431,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Toler'],['Tolerance']
Availability," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1739,Error,Error,1739,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,4,"['Error', 'down', 'error']","['Error', 'down', 'error']"
Availability," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:4047,error,errors,4047,https://psicode.org,https://github.com/psi4/psi4/issues/1041,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability," EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1696426865911/work/build/stage/share/psi4'; ``` . To decode this output a little, the failure results from qcarchive trying to get the version of psi4. The specific qcarchive code is here: https://github.com/MolSSI/QCFractal/blob/32a29a86d6673b0ea1a743b02d3af314c2fd164c/qcfractalcompute/qcfractalcompute/run_scripts/qcengine_list.py#L12. The code to query the version in qcarchive is newer than issue #3084, which is why it probably was not caught at the time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:2166,failure,failure,2166,https://psicode.org,https://github.com/psi4/psi4/issues/3126,1,['failure'],['failure']
Availability," Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_VWN_RPA. => LibXC Density Thresholds <==. XC_LDA_C_VWN_RPA: 1.00E-15; XC_LDA_X: 1.00E-15. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 88; Spherical Points = 434; Total Points = 292072; Total Blocks = 2181; Max Points = 256; Max Functions = 60; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: DEF2-UNIVERSAL-JFIT; Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry C line 170 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs; atoms 3-8 entry H line 17 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs. ==> Integral Setup <==. DFHelper Memory: AOs need 0.007 GiB; user supplied 83.698 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:6008,Mask,Mask,6008,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Mask'],['Mask']
Availability," H 1.240 -2.147 0.000; C 2.798 0.000 0.000; C 4.020 0.000 0.000; C 5.422 0.000 0.000; C 8.214 0.000 0.000; C 7.516 1.209 0.000; C 6.120 1.209 0.000; C 6.120 -1.209 0.000; C 7.516 -1.209 0.000; H 8.058 2.147 0.000; H 5.578 2.147 0.000; H 9.297 0.000 0.000; H 5.578 -2.147 0.000; H 8.058 -2.147 0.000. symmetry c1; units angstrom; }. set globals {; reference rhf; basis cc-pvdz ; #freeze_core true; scf_type out_of_core; dipmom true; num_roots 4; }. set scf d_convergence 10; set detci e_convergence 8. thisenergy = energy('fci'). ---. I am getting this erorr and i am not able to correct this. any one can help me ? . PSIO_ERROR: unit = 41, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 58, in <module>; File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; psi4.transqt2(); RuntimeError: PSIO Error; file: /home/psi4.0b5/src/lib/libpsio/error.cc; ## line: 116. Output File. ```; -----------------------------------------------------------------------; PSI4: An Open-Source Ab Initio Electronic Structure Package; PSI 4.0.0-beta5 Driver. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Process ID: 4249; PSI4DATADIR: /usr/local/psi4/share/psi. Using LocalCommunicator (Number of processes = 1). Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # Finding of 30 higher roots(i.e excited states) and then finding ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:1588,Error,Error,1588,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Error'],['Error']
Availability," I click the link to; www.psicode.org (top hit), www.psicode.org/labs.php (2nd hit), or; github.com/psi4/psi4 (3rd hit). It is really weird that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server respon",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1049,error,errors,1049,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['error'],['errors']
Availability," I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1667,error,error,1667,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['error'],['error']
Availability," In function `boost::mpi::detail::packed_archive_recv(int, int, int, boost::mpi::packed_iarchive&, MPI_Status&)':; point_to_point.cpp:(.text+0x2c1): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x318): undefined reference to `MPI_Recv'; point_to_point.cpp:(.text+0x40a): undefined reference to `MPI_Free_mem'; point_to_point.cpp:(.text+0x4a7): undefined reference to `MPI_Alloc_mem'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::wait()':; request.cpp:(.text+0x82): undefined reference to `MPI_Waitall'; request.cpp:(.text+0xd4): undefined reference to `MPI_Wait'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::test()':; request.cpp:(.text+0x201): undefined reference to `MPI_Testall'; request.cpp:(.text+0x283): undefined reference to `MPI_Test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(request.o): In function `boost::mpi::request::cancel()':; request.cpp:(.text+0x38e): undefined reference to `MPI_Cancel'; request.cpp:(.text+0x3a9): undefined reference to `MPI_Cancel'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(exception.o): In function `boost::mpi::exception::exception(char const*, int)':; exception.cpp:(.text+0xaf): undefined reference to `MPI_Error_string'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```. It looks to me like a problem with my external Boost installation. Can you confirm this? I just wanted to make sure there wasn't some linking flag I'm missing before contacting the Boost developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411:36361,error,error,36361,https://psicode.org,https://github.com/psi4/psi4/issues/411,4,"['Error', 'error']","['Error', 'error']"
Availability," MPITask<SharedFrag> Task_t;; ^~~~~~~; psi::MPITask; /Users/francesco/Source/psi4/src/lib/libparallel2/TaskJobGuts/../MPITask.h:50:7: note: 'psi::MPITask' declared here; class MPITask{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:183:17: error: use of undeclared identifier 'SharedFrag'; typedef MPITask<SharedFrag> Task_t;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:184:76: error: unknown type name 'SharedFrags'; static std::vector<Task_t> MakeTasks(const int Start, const int Stop,const SharedFrags& Frags_){; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:186:4: error: unknown type name 'FragItr'; FragItr MonoI,MonoEnd;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:188:7: error: use of undeclared identifier 'MonoEnd'; MonoEnd=Frags_->end(i);; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:189:43: error: use of undeclared identifier 'MonoEnd'; did you mean 'MonoI'?; for (MonoI=Frags_->begin(i); MonoI!=MonoEnd; ++MonoI); ^~~~~~~; MonoI; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:186:12: note: 'MonoI' declared here; FragItr MonoI,MonoEnd;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:238:6: error: use of undeclared identifier 'LibFragDriver'; did you mean; 'psi::LibFrag::LibFragDriver'?; void LibFragDriver::RunCalc(const std::string& MethodName,int Start, int Stop) {; ^~~~~~~~~~~~~; psi::LibFrag::LibFragDriver; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.h:34:7: note: 'psi::LibFrag::LibFragDriver' declared here; class LibFragDriver{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:240:30: error: no matching function for call to 'MakeTasks'; std::vector<Task_t> Tasks=MakeTasks(Start,Stop,Frags_);; ^~~~~~~~~; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:184:28: note: candidate function not viable: no known conversion from; 'boost::shared_ptr<LibMolecule::FragmentedSystem>' to 'const int' f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/206:1876,error,error,1876,https://psicode.org,https://github.com/psi4/psi4/issues/206,1,['error'],['error']
Availability," Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970:1364,Ping,Pings,1364,https://psicode.org,https://github.com/psi4/psi4/pull/1970,1,['Ping'],['Pings']
Availability," Psi4 and allow Psi4 users to directly run the ADC calculations supported inside adcc. The opposite direction (i.e. using Psi4 SCF results in adcc) is already implemented and working, see the [adcc manual](https://adc-connect.org/calculations.html#general-adc-n-calculations), so this should mainly be an effort of connecting the strings together on the Psi4 side. Currently I am still very much in the planning phase of this PR, thankful for any early pointers or feedback to get me moving in a sensible direction. Since this is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:1110,error,error,1110,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['error'],['error']
Availability," Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2267,down,downloaded,2267,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['down'],['downloaded']
Availability," SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:2043,avail,available,2043,https://psicode.org,https://github.com/psi4/psi4/pull/2314,1,['avail'],['available']
Availability," SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_option_list(); print(""\nAvailable Options:""); print(options). # Check specific option; print(""\nIs 'tdscf_type' available?"", 'tdscf_type' in options). And here's the result I got when I ran the script:; (psi4_env) -bash-4.2# python3 CF_PEC_Project.py. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/; Available Methods:; []. Available Options:; ['ABCD', 'ACTIVE', 'ACTIVE_NAT_ORBS', 'ADD_AUXILIARY_BONDS', 'AIO_CPHF', 'AIO_DF_INTS', 'ALGORITHM', 'ANALYZE', 'AO_BASIS', 'AUXILIARY_BOND_FACTOR', 'AVG_STATES', 'AVG_WEIGHTS', 'A_RAS3_MAX', 'BASIS', 'BASIS_GUESS', 'BASIS_RELATIVISTIC', 'BCCD_MAXITER', 'BENCH', 'BENDAZZOLI', 'BORDER', 'BORDER_N_REDIST', 'BORDER_REDIST_ORDER', 'BORDER_REDIST_POL', 'BORDER_RMIN', 'BORDER_RMIN_UNIT', 'BORDER_TYPE', 'BRUECKNER_MAXITER', 'BRUECKNER_ORBS_R_CONVERGENCE', 'B_RAS3_MAX', 'CACHELEVEL', 'CACHETY",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:5715,Avail,Available,5715,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Avail'],['Available']
Availability," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1729,avail,availablity,1729,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['avail'],['availablity']
Availability," [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ^; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libqt/qt.h:47:7: note: forward declaration of 'psi::Options'; class Options;; ^; 2 errors generated. ```. I'm doing this on my intel mac: `2.6 GHz 6-Core Intel Core i7`; using clang++ ; ```; (base) gwood@EXS-001355 build % /usr/local/opt/llvm/bin/clang++ -v; Homebrew clang version 15.0.7; Target: x86_64-apple-darwin22.4.0; Thread model: posix; InstalledDir: /usr/local/opt/llvm/bin`; ```. The only issue prior to this was to install libxc and point to it, which i did with 6.2.2; I downloaded the source from git and am using master:. ```; git clone git@github.com:psi4/psi4.git; (base) gwood@EXS-001355 src % git branch; * master; ```; my cmake version is:. ```; (base) gwood@EXS-001355 src % cmake --version; cmake version 3.23.3. CMake suite maintained and supported by Kitware (kitware.com/cmake).; ```; blas and lapack is pi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:1950,error,error,1950,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['error'],['error']
Availability," ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current status of the conda installation:; <details>. ```bash; je714@guanine:~$ conda list; # packages in environment at /home/je714/psi4cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:5553,Error,Error,5553,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['Error'],['Error']
Availability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4858,checkpoint,checkpoint,4858,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['checkpoint'],['checkpoint']
Availability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19659,error,error,19659,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:638,Fault,Fault,638,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['Fault'],['Fault']
Availability," a single list of functionals, which improves code readability and removes the XC functional special case (see below). ## User API & Changelog headlines; - [ ] Changes the Python API surface for the Superfunctional class: A complete list of functionals in a superfunctional can be accessed with `functionals()`. `add_x_functional(fnctl)` and `add_c_functional(fnctl)` were removed in favor of `add_functional(fnctl)`. Also removes `is_libxc_func()` since there is now no distinction. ## Dev notes & details; - [ ] The base `Functional` class now has a `kind()` field. When implemented in the `LibXCFunctional`, this allows one to get the kind of functional from LibXC -- Now, LibXC is treated as the single source of truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functional",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:1157,error,error,1157,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['error'],['error']
Availability," actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1158,error,error,1158,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['error'],['error']
Availability," and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #2737 For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to set qc_module=mrcc|adcc|chemps2 ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. @maxscheurer prefers not requiring (2). In this PR, I just switched MRCC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:13157,fault,faults,13157,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['fault'],['faults']
Availability," at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle on a name? Others are ""geometry"" and ""set_options"". ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:1647,avail,avail,1647,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['avail'],['avail']
Availability, bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:5292,error,error,5292,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability," build from source, and your tags aren't synced with upstream, the Psi4 version will be undefined. QCEngine balks at that and urges you to pull tags. But this only pops up for cbs/findif/nbody jobs, which can be confusing. This PR promotes to tag complaint to upon `import psi4` for uniformity.; - [x] ""OliP"" [reported a bug at the forum](http://forum.psicode.org/t/problems-with-cbs-and-version-1-6/2494) where an input like the below returned `‘<’ not supported between instances of ‘dict’ and ‘dict’ `. This came about because I was comparing well-behaved dertype per method tuples like; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (1, {}), (1, {}), (1, {})]; ```. rather than the real-life cases one gets with ROHF. Sorting on only the dertype fixes the bug.; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (0, {1: ""\nPsiException: select_mp2_gradient: Method 'mp2' with MP2_TYPE 'DF', FREEZE_CORE 'True', and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""})]; ```. ```; molecule N {; 0 4; N 0.00 0.00 0.00; }. set {; scf_type direct; reference rohf; r_convergence 6; d_convergence 7; e_convergence 8; freeze_core true; }. e_cbs = energy(‘cbs’,; scf_basis=‘aug-cc-pV[TQ5]Z’,; corl_wfn=‘mp2’,; corl_basis=‘aug-cc-pV[TQ]Z’,; delta_wfn=‘ccsd(t)’,; delta_basis=‘aug-cc-pV[DT]Z’); ```. - [x] @hokru reported that `energy('SCF/def2-SVP',bsse_type=['cp','nocp'],dft_functional=my_functional)` got broken with the distributed driver. That's patched up for string `dft_functional` at least.; - [x] I noticed that a change I made to `_qcvars_transitions` to help version reported would make `variables(include_deprecated_keys=True)` fail. that's fixed. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of ful",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2590:1141,avail,available,1141,https://psicode.org,https://github.com/psi4/psi4/pull/2590,3,['avail'],['available']
Availability," by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1065,error,error,1065,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['error'],['error']
Availability," calculation crashes, with the following output at the end of the log file (I have attached the full log file to the issue.):; ```; Wfn Parameters:; --------------------; Wavefunction = CCSD_T; Number of irreps = 1; Number of MOs = 275; Number of active MOs = 275; AO-Basis = NONE; Semicanonical = false; Reference = RHF; Print Level = 1. IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 275 0 9 0 266 0; Transforming integrals...; IWL integrals will be deleted.; (OO|OO)...; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Constructing frozen core operators; Row and column block dimensions of A; (n = 1): 275 ; (n = 1): 275 ; Row and column block dimensions of B; (n = 1): 276 ; (n = 1): 275 ; Row and column block dimensions of C; (n = 1): 275 ; (n = 1): 275 ; Asym: 0, Bsym: 0, Csym: 0; Mismatch in index Ha = 0; ```. Additionally, the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timings/debug/psi4test/psi4_ccsdt.py"", line 28, in <module>; e = psi4.energy(model, molecule=mol); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 989, in select_ccsd_t_ return func(name, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2898, in run_ccenergy core.cctransort(ref_wfn); RuntimeError: ; Fatal Error: Matrix::gemm error: Number of rows and columns do not match.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/libmints/matrix.cc on line: 1389The most recent 5 function calls were:. psi::Matrix::gemm(bool, bool, double, psi::Matrix const*, psi::Mat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:1882,error,error,1882,https://psicode.org,https://github.com/psi4/psi4/issues/2916,1,['error'],['error']
Availability," compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all' failed; make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt; Makefile:138: recip",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536:1257,error,error,1257,https://psicode.org,https://github.com/psi4/psi4/issues/536,1,['error'],['error']
Availability," conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1022,down,download,1022,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['down'],['download']
Availability," const&) in; > libboost_python-1_57.a(object_protocol.o); > ""_PyErr_Fetch"", referenced from:; > psi::HandleError() in libfrag.a(LibFragDriver.cc.o); > ""_PyErr_Format"", referenced from:; > boost::python::pytype_check(_typeobject_, _object_) in; > libboost_python-1_57.a(from_python.o); > boost::python::objects::(anonymous; > namespace)::callable_check(_object_) in libboost_python-1_57.a(class.o); > ; > boost::python::objects::function::add_to_namespace(boost::python::api::object; > const&, char const_, boost::python::api::object const&, char const_) in; > libboost_python-1_57.a(function.o); > boost::python::converter::registration::get_class_object() const in; > libboost_python-1_57.a(registry.o); > ""_PyErr_NewException"", referenced from:; > boost::python::objects::function::argument_error(_object_,; > _object_) const in libboost_python-1_57.a(function.o); > ""_PyErr_NoMemory"", referenced from:; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ""_PyErr_Occurred"", referenced from:; > boost::python::len(boost::python::api::object const&) in python.cc.o; > boost::python::len(boost::python::api::object const&) in; > libparallel2.a(LibParallelHelper.cc.o); > boost::python::len(boost::python::api::object const&) in; > libmints.a(matrix.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_hessian_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_1_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_freq_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_freq_1.cc.o); > ...; > ""_PyErr_Print"", referenced from:; > psi::Python::run(__sFILE*) in python.cc.o; > psi::Dispersion::compute_energy(boost::shared_ptrpsi::Molecule); > in libdisp.a(dispersion.cc.o); > psi::Dispersion::compute_gradient(boost::shared_ptrpsi::Molecule); > in libdisp.a(dispersion.cc.o); > psi::SuperFunctional::build(std::__1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131150834:8689,error,errors,8689,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834,2,['error'],['errors']
Availability," designed at the moment for coupled JK build algorithms. Separate J and K algorithms, then, are either hard-locked to each other (as in DFJCOSK) or bolted onto the side of already-existing JK classes (as in LinK with DirectJK). Such a layout leaves no flexibility in combining separate J and K algorithms, a problem which will only get worse as new separate J and K algorithms like CFMM are added. Additionally, the scattering of separate J and K build algorithms throughout the JK class in Psi4 in an non-standardized fashion is unfortunate from a code design perspective. The goal of the CompositeJK project is, ultimately, to create a new JK class (_CompositeJK_) that offers a proper framework for combining separate J and K algorithms for use in JK construction. Such a class will provide a home for any new separate J and K algorithm that gets added to Psi4 in the future (such as the in-progress CFMM). Additionally, the CompositeJK class will be designed in such as a way to enable arbitrary combinations of any available separate J and K build algorithm through a single JK subclass. This arbitrary mixing and matching is planned to be accesible in a user-friendly way. DFJLinK is the first step to this process. DFJLinK, itself, is a new JK subclass that combines the integral-direct density fitted J build algorithm from DFJCOSK with the LinK algorithm previously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:1604,avail,available,1604,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['avail'],['available']
Availability," dgbrfs，该符号在函数 ""int __cdecl psi::C_DGBRFS(char,int,int,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGBRFS@psi@@YAHDHHHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsv，该符号在函数 ""int __cdecl psi::C_DGBSV(int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBSV@psi@@YAHHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsvx，该符号在函数 ""int __cdecl psi::C_DGBSVX(char,char,int,int,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGBSVX@psi@@YAHDDHHHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrf，该符号在函数 ""int __cdecl psi::C_DGBTRF(int,int,int,int,double *,int,int *)"" (?C_DGBTRF@psi@@YAHHHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrs，该符号在函数 ""int __cdecl psi::C_DGBTRS(char,int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBTRS@psi@@YAHDHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebak，该符号在函数 ""int __cdecl psi::C_DGEBAK(char,char,int,int,int,double *,int,double *,int)"" (?C_DGEBAK@psi@@YAHDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebal，该符号在函数 ""int __cdecl psi::C_DGEBAL(char,int,double *,int,int *,int *,double *)"" (?C_DGEBAL@psi@@YAHDHPEANHPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,do",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:17289,error,error,17289,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link against the random lib stashed on GH, and the build can be far more self-contained. hooray!; - [x] linux azure (two bottom lanes with new enough py for np v2): np v2 needs qcel v0.28 _and_ it needs pb11 >=2.12 to compile against or you'll get ""atoms too close"". pb11 had been constrained to <2.12 (see below), so that was lifted. bumped qcng to 0.30 for internal builds, too.; - [x] docs: a PR snuck adding a citation to the bibliography w/o citing it, so the strict check failed. commented out for now; - [x] docs: once pb11 no longer restrained to <2.12 (see above), the ""FixedSize"" issue appears (see nitpick-exceptions), and the exceptions formerly emitted as `List` needed `list` counterparts added.; - [x] win azure: headers in np v2 are at `numpy/_core/include` not `numpy/core/include`. We were setting the latter explicitly for this lane, so removed that. Also added `${Python_NumPy_VERSION}` printing for feedback.; - [x] linux eco: dftd4-python now available for py312 (except on windows), so added that back to the package testing.; - [x] cmake: squashed a few warnings by setting policies. it looks like find_package(Boost) for L2 is still needing FindBoost rather than BoostConfig, so that one needs to be OLD for now.; - [x] conda: threading tests weren't running at the conda recipe b/c the trial job hit the block we put in on MemDF in Disk mode. Increased the memory in test_threading so it could run.; - [x] gha: bumped all the actions to the latest version to get rid of node deprecation warnings. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:2958,avail,available,2958,https://psicode.org,https://github.com/psi4/psi4/pull/3186,1,['avail'],['available']
Availability," dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47211,error,error,47211,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGS@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggesx，该符号在函数 ""int __cdecl psi::C_DGGESX(char,char,char,char,int,double *,int,double *,int,int *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGGESX@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPEAH10000000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : err",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:23642,error,error,23642,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://github.com/evaleev/libint does not seem to have `find_package(Eigen3 MODULE)` line and `FindEigen3.cmake` file. A workaround is to `export EIGEN3_ROOT=/path/to/eigen3/include`, or patch; ```diff; --- a/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt; +++ b/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt; @@ -114,3 +114,3 @@; ; -find_package(Eigen3 MODULE); +find_package(Eigen3); ; ```; and remove `FindEigen3.cmake`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:1986,error,error,1986,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['error'],['error']
Availability," following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:1768,error,errors,1768,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,4,['error'],['errors']
Availability," for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:4394,avail,available,4394,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1674,error,error,1674,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,6,['error'],['error']
Availability," heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3011,avail,available,3011,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['avail'],['available']
Availability," here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:1003,error,error,1003,https://psicode.org,https://github.com/psi4/psi4/pull/2997,7,['error'],"['error', 'errors']"
Availability," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2452,error,error,2452,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['error'],['error']
Availability," in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt` Davidson solver used by `adc/prepare_tensors.cc`; - [x] Mark the return value of the `libqt` Davidson solver as `[[nodiscard]]` to force callers to check how many of the requested roots actually converged. ### Unrelated fixes; - [x] Fix a memory leak in the ROHF stability check. **(merged: #2671)**. ###",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3443,down,down,3443,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['down'],['down']
Availability," ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole34/Documents/Codes/psi4/psi4/src/psi4/libmints/matrix.cc !; ! on line: 1715 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::diagonalize(psi::Matrix&, psi::Vector&, psi::diagonalize_order) !; ! !; !----------------------------------------------------------------------------------!; ```. Various things can be switched, with equally varying effects:; * Switching the COSX_PRUNING_SCHEME from ROBUST to TREUTLER fixes these calculations.; * Switching from 146 spherical points to either 110 or 170 fixes these calculations.; * Switching from 50 radial points to either 55 or 45 does _not_ fix these calculations.; * Switching from water to benzene does _not_ fix these calculations. Finally, from my observation, the problem seems to be localized specifically to COSX. Consider the following input:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type direct; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; dft_spherical_points 146; dft_radial_points 50; dft_vv10_spherical_points 146; dft_vv10_radial_points 50; dft_pruning_scheme robust; mbis_spherical_points 146; mbis_radial_points 50; mbis_pruning_scheme robust; }. energy, wfn = energy('b3lyp-nl', return_wfn=True); oeprop(wfn, ""MBIS_CHARGES"", ""MBIS_VOLUME_RATIOS""); ``",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:2547,ROBUST,ROBUST,2547,https://psicode.org,https://github.com/psi4/psi4/issues/2890,1,['ROBUST'],['ROBUST']
Availability," items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1244,avail,available,1244,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['avail'],['available']
Availability," jfit sets; ```; b=( def2*jfit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-sv_p_-jfit.gbs vs def2-qzvp-jfit.gbs: 101; def2-sv_p_-jfit.gbs vs def2-qzvpp-jfit.gbs: 54; def2-svp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-svp-jfit.gbs vs def2-qzvpp-jfit.gbs: 0; def2-svp-jfit.gbs vs def2-sv_p_-jfit.gbs: 54; def2-tzvp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-tzvp-jfit.gbs vs def2-qzvpp-jfit.gbs: 0; def2-tzvp-jfit.gbs vs def2-sv_p_-jfit.gbs: 54; def2-tzvp-jfit.gbs vs def2-svp-jfit.gbs: 0; def2-tzvpp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-tzvpp-jfit.gbs vs def2-qzvpp-jfit.gbs: 0; def2-tzvpp-jfit.gbs vs def2-sv_p_-jfit.gbs: 54; def2-tzvpp-jfit.gbs vs def2-svp-jfit.gbs: 0; def2-tzvpp-jfit.gbs vs def2-tzvp-jfit.gbs: 0; ```; and the jkfit sets as well; ```; b=( def2*jkfit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-jkfit.gbs: 0; ```. According to @bennybp the sets should be all the same, see https://github.com/MolSSI-BSE/basis_set_exchange/issues/103. ## Todos; Notable points (developer or user-interest) that this PR has or ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:1201,echo,echo,1201,https://psicode.org,https://github.com/psi4/psi4/pull/1804,1,['echo'],['echo']
Availability," last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this err",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:2483,Error,Error,2483,https://psicode.org,https://github.com/psi4/psi4/issues/1995,1,['Error'],['Error']
Availability," little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > --------------------------------------------------------; > CLASS FOCC OCC AOCC AVIR VIR FVIR; > ALPHA 0 1 1 45 45 0; > BETA 0 0 0 46 46 0; > --------------------------------------------------------; >; >; > Traceback (most recent call last):; > File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/home/username/miniconda/lib//pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:1479,error,error,1479,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['error'],['error']
Availability," manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.533",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:2335,error,error,2335,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['error'],['error']
Availability," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1730,error,error,1730,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393,1,['error'],['error']
Availability," not compatible with the production psi4-1.3.2+ecbda83 version(Tested under Win10 WSL Ubuntu1804). ```; Traceback (most recent call last):; File ""/root/miniconda3/envs/psi/bin/psi4"", line 177, in <module>; import psi4; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F0370F460DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F03763F2890 Unknown Unknown Unknown; ld-2.27.so 00007F0376616A31 Unknown Unknown Unknown; libc-2.27.so 00007F03761472DF _dl_catch_excepti Unknown Unknown; libc-2.27.so 00007F037614736F _dl_catch_error Unknown Unknown; libdl-2.27.so 00007F0375DD1735 Unknown Unknown Unknown; libdl-2.27.so 00007F0375DD10B3 dlclose Unknown Unknown; core.cpython-36m- 00007F0371E280E7 Unknown Unknown Unknown; core.cpython-36m- 00007F037202C9B2 Unknown Unknown Unknown; core.cpython-36m- 00007F03720539F6 Unknown Unknown Unknown; core.cpython-36m- 00007F0371AFD0D6 Unknown Unknown Unknown; python3.6 00007F03769C4B36 PyCFunction_Call Unknown Unknown; python3.6 00007F03769C1A5E PyObject_Call Unknown Unknown; python3.6 00007F0376AC1834 Unknown Unknown Unknown; python3.6 00007F0376ABF37F Py_FinalizeEx Unknown Unknown; python3.6 00007F0376AC957E Py_Main Unknown Unknown; python3.6 00007F037699",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1775:1056,fault,fault,1056,https://psicode.org,https://github.com/psi4/psi4/issues/1775,1,['fault'],['fault']
Availability," on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13164,error,error,13164,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and the clang-cl details that something would conflict with c-f's locked-down build tooling. Of course we get away with this now because libint2 gets pulled along with psi from `-c psi4`. I've read some of those threads that it took to get OpenMM GPU code working at production grade on c-f, and I judge that a bigger hurdle than libint2. But libint2 is formidable nonetheless. Glad to talk further, though I don't think I have blocks of time to actually work on this this year. Thanks for using psi4 enough to want cleaner environments!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:2940,down,down,2940,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['down'],['down']
Availability," options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1252,Error,Error,1252,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Error'],['Error']
Availability," pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:2694,ROBUST,ROBUST,2694,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['ROBUST'],['ROBUST']
Availability," psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:39353,error,error,39353,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108:1726,error,error,1726,https://psicode.org,https://github.com/psi4/psi4/pull/1108,1,['error'],['error']
Availability," separate sections so that we're not suggesting psi4rc is the best way to set your scratch (pretty much, PSI_SCRATCH envvar is). Use `make sphinxmini` if you need to test the docs build.; - [x] In docs, show example csh/bash in the PSI_SCRATCH envvar section. Can probably steal some text/code from conda.rst.; - [x] In docs, show an example of a threaded pbs job file. Here's one to work from. See @loriab about any parts that are obscure. ```; #!/bin/tcsh; ## this file auto-generated by submit4 ...; #PBS -j oe ; #PBS -l walltime=80:00:00:00; #PBS -l pmem=2120mb; #PBS -N SSI-084TYR-095LEU-1-dimer; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/loriab/psi4.$PBS_JOBID. cat $PBS_NODEFILE; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end; unsetenv PSI4DATADIR; unsetenv PSIDATADIR; if ! ( $?PYTHONPATH ) setenv PYTHONPATH """"; setenv PYTHONPATH /theoryfs2/ds/cdsgroup/psi4aux:$PYTHONPATH; setenv PSI_SCRATCH $myscratch; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/scripts/bin:${PATH}; setenv PATH /theoryfs2/ds/loriab/chem/psi4_trials/c4/c4v2/cfour_v2.00beta/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/psi4-compile/mrcc:${PATH}; setenv PSIDATADIR /theoryfs2/ds/cdsgroup/psi4-install/psi3930/share/psi4; source /theoryfs2/common/software/intel2016/bin/compilervars.csh intel64; /theoryfs2/ds/cdsgroup/scripts/bin/runpsi.py -i SSI-084TYR-095LEU-1-dimer.in -o SSI-084TYR-095LEU-1-dimer.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```; - [x] On wiki, create FAQ on https://github.com/psi4/psi4/wiki/8_FAQ_Contents about how do i set scratch, how do i use psi4 in a pbs queue, etc. Questions go in the 8_FAQ_Contents page, answers can link back to the sphinx docs themselves, then index the qu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/109:1110,echo,echo,1110,https://psicode.org,https://github.com/psi4/psi4/issues/109,1,['echo'],['echo']
Availability," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1566,fault,fault,1566,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476,1,['fault'],['fault']
Availability," test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:5684,avail,available,5684,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['avail'],['available']
Availability," test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H']",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12280,error,error,12280,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability," the documentation and on forum threads, but these are too confusing and not working. This is my failed attempt (borrowed from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html and http://forum.psicode.org/t/building-with-high-am/936/20):. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341:1212,error,error,1212,https://psicode.org,https://github.com/psi4/psi4/issues/1341,1,['error'],['error']
Availability," the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:3961,recover,recovered,3961,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['recover'],['recovered']
Availability," to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out why the difference was around 35 uH for decane. Furthermore, since the no. of grid points coming out of pyscf and psi4 were different even for the same number of radial and angular grid points, I even tried to use the same grids as psi4 in pyscf but still got the same result. Here is the script I used; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1743,error,error,1743,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['error'],['error']
Availability," use of undeclared identifier 'PMan'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:259:38: error: use of undeclared identifier 'PMan'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:259:55: error: use of undeclared identifier 'PMan'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:281:34: error: use of undeclared identifier 'PMan'; std::vector<double> TempEgys2=PMan.Synch(TempEngy, NEgys);; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:284:48: error: member reference base type 'int' is not a structure or union; const LibMolecule::SerialNumber& SN=TaskI->GetLabel()->GetSN();; ~~~~~^ ~~~~~~~~; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:290:6: error: use of undeclared identifier 'LibFragDriver'; did you mean; 'psi::LibFrag::LibFragDriver'?; void LibFragDriver::RunNMers(int Start,const std::string& MethodName) {; ^~~~~~~~~~~~~; psi::LibFrag::LibFragDriver; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.h:34:7: note: 'psi::LibFrag::LibFragDriver' declared here; class LibFragDriver{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:294:6: error: use of undeclared identifier 'LibFragDriver'; did you mean; 'psi::LibFrag::LibFragDriver'?; void LibFragDriver::RunMonomers(const std::string& MethodName){; ^~~~~~~~~~~~~; psi::LibFrag::LibFragDriver; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.h:34:7: note: 'psi::LibFrag::LibFragDriver' declared here; class LibFragDriver{; ^; fatal error: too many errors emitted, stopping now [-ferror-limit=]; 18 warnings and 20 errors generated.; make[2]: *** [src/lib/libfrag/CMakeFiles/frag.dir/LibFragDriver.cc.o] Error 1; make[1]: *** [src/lib/libfrag/CMakeFiles/frag.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/206:4442,error,error,4442,https://psicode.org,https://github.com/psi4/psi4/issues/206,8,"['Error', 'error']","['Error', 'error', 'errors']"
Availability," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4340,error,error,4340,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability," what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contribute to the code. In particular, we are willing to...""_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:1566,mainten,maintenance,1566,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,2,['mainten'],['maintenance']
Availability," with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBR",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:3534,error,error,3534,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['error'],['error']
Availability," working version:; ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```. ## Psithon vs. QCSchema. Another aside -- your input is written as a python script containing a single job and dropping the key results to json. This could also run through QCSchema with json input and json output, either API like",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:4128,robust,robust,4128,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['robust'],['robust']
Availability," {; guess sad; scf_type df; basis DZVP # works for def2-svp; e_convergence 8; d_convergence 8; }; e, wfn = energy('scf', return_wfn=True); oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). ```; The error message reads:; ```; Traceback (most recent call last):; File ""/home/anaconda3/envs/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsupported by MBIS !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on !; ! line: 1871 !; ! The most recent 5 function calls were: !; ! psi::OEProp::compute_mbis_multipoles(bool) !; ! psi::OEProp::co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:1208,Error,Error,1208,https://psicode.org,https://github.com/psi4/psi4/issues/2728,2,['Error'],['Error']
Availability," | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://github.com/psi4/psi4/files/9200766/Orca-214-monB.txt); [Orca-214-dimerAB.txt](https://github.com/psi4/psi4/files/9200767/Orca-214-dimerAB.txt). [hexamine-compare.pdf](https://github.com/psi4/psi4/files/9200777/hexamine-compare.pdf); Image of hexamine: ; ![hexamine](https://user-images.githubusercontent.com/87093097/181296669-eceb1742-e404-4c29-ada4-c090b1d63875.png). Thank you!; Caroline",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1548,robust,robust,1548,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['robust'],['robust']
Availability," | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:2836,down,download,2836,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability," 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ""int __cdecl psi::C_DORGHR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGHR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorglq，该符号在函数 ""int __cdecl psi::C_DORGLQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGLQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgql，该符号在函数 ""int __cdecl psi::C_DORGQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:28796,error,error,28796,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability," 无法解析的外部符号 dtbmv，该符号在函数 ""void __cdecl psi::C_DTBMV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBMV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbsv，该符号在函数 ""void __cdecl psi::C_DTBSV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBSV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpmv，该符号在函数 ""void __cdecl psi::C_DTPMV(char,char,char,int,double *,double *,int)"" (?C_DTPMV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpsv，该符号在函数 ""void __cdecl psi::C_DTPSV(char,char,char,int,double *,double *,int)"" (?C_DTPSV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmm，该符号在函数 ""void __cdecl psi::C_DTRMM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRMM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmv，该符号在函数 ""void __cdecl psi::C_DTRMV(char,char,char,int,double *,int,double *,int)"" (?C_DTRMV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsm，该符号在函数 ""void __cdecl psi::C_DTRSM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRSM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsv，该符号在函数 ""void __cdecl psi::C_DTRSV(char,char,char,int,double *,int,double *,int)"" (?C_DTRSV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsdc，该符号在函数 ""int __cdecl psi::C_DBDSDC(char,char,int,double *,double *,double *,int,double *,int,double *,int *,double *,int *)"" (?C_DBDSDC@psi@@YAHDDHPEAN00H0H0PEAH01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsqr，该符号在函数 ""int __cdecl psi::C_DBDSQR(char,int,int,int,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DBDSQR@psi@@YAHDHHHHPEAN00H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddisna，该",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:14450,error,error,14450,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:20912,error,error,20912,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26258,error,error,26258,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrf，该符号在函数 ""int __cdecl psi::C_DPOTRF(char,int,double *,int)"" (?C_DPOTRF@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotri，该符号在函数 ""int __cdecl psi::C_DPOTRI(char,int,double *,int)"" (?C_DPOTRI@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrs，该符号在函数 ""int __cdecl psi::C_DPOTRS(char,int,int,double *,int,double *,int)"" (?C_DPOTRS@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppcon，该符号在函数 ""int __cdecl psi::C_DPPCON(char,int,double *,double,double *,double *,int *)"" (?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpprfs，该符号在函数 ""int __cdecl psi::C_DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsv，该符号在函数 ""int __cdecl psi::C_DPPSV(char,int,int,double *,double *,int)"" (?C_DPPSV",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:34940,error,error,34940,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,""", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:7470,Error,Error,7470,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,4,"['Error', 'error']","['Error', 'error']"
Availability,"""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3490,Error,Error,3490,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Error'],['Error']
Availability,"""Error writing to file"" PSi0_error 12",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:1,Error,Error,1,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['Error'],['Error']
Availability,"""TOLERANCE"" is used in most ofter cutoff-type keywords, so I kept to that. ; Not the biggest fan of it either, but consistency among the keywords is useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-610517532:1,TOLER,TOLERANCE,1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-610517532,1,['TOLER'],['TOLERANCE']
Availability,"""This means the reference state is not stable."" In other words, the SCF solver landed on an excited state, but our algorithm is designed to work only on local minima. You'll need to land on the minimum, either by changing convergence settings such as initial guess or instability analysis. Without knowing more details about your system, I don't know which to recommend. Is the language of ""This means the reference state is not stable."" new to you? If it is, we may need to make the error message more explicit... This is an old issue, but I'd like to keep the issue list trimmer than it currently is. If there's no response from you in a week or so, I'll close this, but feel free to reopen afterwards if the issue isn't settled. Inadvertent excited states are bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748:484,error,error,484,https://psicode.org,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748,1,['error'],['error']
Availability,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,4,"['ERROR', 'error']","['ERROR', 'ERRORS', 'error', 'errors']"
Availability,"# Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4551,error,error,4551,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,3,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"# Known bugs; - PCM-ROHF is broken. See #999; # Library updates; - PCMSolver is updated to its latest version (1.2.1) This new release of PCMSolver is a maintenance release and no new features were added to Psi4 through this upgrade. However, more tests were added for PCM used in conjunction with ERI algorithms other than PK. A test was also added for geometry optimizations with PCM run using finite differences. See the [library's changelog](https://github.com/PCMSolver/pcmsolver/blob/release/1.2/CHANGELOG.md) for more information on what changed in the library itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386064898:153,mainten,maintenance,153,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386064898,1,['mainten'],['maintenance']
Availability,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:458,redundant,redundant,458,https://psicode.org,https://github.com/psi4/psi4/issues/1375,1,['redundant'],['redundant']
Availability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8cb0765`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1315/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1315 +/- ##; =========================================; Coverage ? 70.32% ; =========================================; Files ? 1508 ; Lines ? 326837 ; Branches ? 0 ; =========================================; Hits ? 229863 ; Misses ? 96974 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=footer). Last update [8cb0765...ed8cf13](https://codecov.io/gh/psi4/psi4/pull/1315?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1315#issuecomment-433574980:222,error,error-reference,222,https://psicode.org,https://github.com/psi4/psi4/pull/1315#issuecomment-433574980,2,['error'],['error-reference']
Availability,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:222,error,error-reference,222,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321,2,['error'],['error-reference']
Availability,"# assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; The most recent 1 function calls were:. ```. EDIT: to run this input, note that I used the following options to generate my wavefunction object:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:2494,Error,Error,2494,https://psicode.org,https://github.com/psi4/psi4/issues/1871,2,['Error'],['Error']
Availability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The current PR has two objectives. First, condense the MP2 amplitude functions, MP2 energy functions, and MP2 1RDM functions into one function each. Although several methods needed these functions with minimal changes, there were two or three functions created for each of those three. Dealing with how he handled spin-scaling forced me to take a second objective: to clean OCC's handling of spin-scaling variables. OCC previously allowed the user to overwrite the definitions of opposite-spin scaling and spin-component-scaling schemes and used far too many variables. The current scheme still allows users to make their own definitions, but those are now sent to custom variables. In addition, many keywords have been eliminated. OCC's handling of spin-scaling now differs from DFOCC's, but I am not fool enough to take on that module. Obligatory ping of @susilehtola and @hokru, who expressed opinions about this on Slack, and @loriab, who expressed many opinions about this on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] We have shed another 800+ lines of code.; - [x] Major refactor of spin-scaling in OCC. All keywords for manual handling of spin scaling in OCC are removed. Please use `os_scale` and `ss_scale` for custom scaling. Select the spin scaling method that goes to the current energy by the method string you pass to the energy call.; ~~- [ ] Update documentation accordingly.~~ Deferred to Lori PR. ## Checklist; - [x] Quick tests, occ related tests, manual diff checks, and `test_mp2.py` all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:1119,ping,ping,1119,https://psicode.org,https://github.com/psi4/psi4/pull/1789,1,['ping'],['ping']
Availability,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:529,error,error,529,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['error'],['error']
Availability,"## Description. All manner of sowreap cleanup and upgrade; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] make Hessian by both E & G return same non-mass-weighted matrix, relabel output, fixing #225 ; - [x] preserve `.1` files for optimization for cbs calcs, so no more multiple first cycles, fixing #303 ; - [x] sowreap testing machinery fixed up: catches more errors, works for optimizations, pep8-ified. @amjames, you may want to take a look at 31162be; - [x] new capability to do frequencies in sow/reap by finite difference of gradients, fixing psi4/psi4private#80; - [x] in order to do previous, needed format_molecule to preserve orientation, which zmat doesn't do naturally, so added `forcexyz=True` kwarg to optionally write in Carts (including no_com/no_reorient). conveniently, this fixes http://forum.psicode.org/t/embarrassingly-parallel-frequency-calculation-misbehaving/111 also.; - [x] general cleanup of db, opt, freq by E sow/reap procedures after wavefunction_pass, especially return statements and forcing return_wfn True, fixing #291 ; ## Questions; - [x] @psi-rking should probably take a look at 380a93c; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/318:404,error,errors,404,https://psicode.org,https://github.com/psi4/psi4/pull/318,1,['error'],['errors']
Availability,## Description. Allows BCCD with ROHF starting orbitals.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Added BCCD and BCCD_T to the list of ROHF semicanonicalize cases in `src/bin/cc*`.; - [x] Added a BCCD ROHF test case; - [x] Added a BCCD_MAXITER keyword instead of using an arbitrary value; - [x] Removed redundant `proc.py:run_bccdt`; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/295:352,redundant,redundant,352,https://psicode.org,https://github.com/psi4/psi4/pull/295,1,['redundant'],['redundant']
Availability,"## Description. Code used in the roa driver has been re-organized into a module `findif_response_utils`. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - ROA driver functions the same as it does currently.; - New drivers (in the works) will use this module rather than c+p functions from roa.py . _RE comments by @dgasmith_; - [x] Change naming scheme in tensor_helpers.py to clarify return types are not proper matrix/tensor objects; - [x] Change Exceptions raised to `PsiException` so that error information is printed to screen and the output files ; ## Questions; - [x] @lothian thoughts on the `registered_props` dict? It isn't very flexible, but I don't know if this kind of driver _needs_ to be flexible. The hard-coded `registerd_props` dict has been removed in favor of a solution that allows each driver to choose the arguments to the `property()` function in each sub-dir. The module doesn't need to know anything except what the calling driver tells it :).; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395:530,error,error,530,https://psicode.org,https://github.com/psi4/psi4/pull/395,1,['error'],['error']
Availability,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/467:129,avail,available,129,https://psicode.org,https://github.com/psi4/psi4/pull/467,1,['avail'],['available']
Availability,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [x] Ready to go. Looks ready to me, though there may well be further reST changes after viewing the docs build. @robparrish may want to look it over. We'll close the other PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470:129,avail,available,129,https://psicode.org,https://github.com/psi4/psi4/pull/470,1,['avail'],['available']
Availability,"## Description. Finally, some modernization of the PK JK object. I coded everything trying to maximize code reuse and using polymorphism where it would be good, but if you have any suggestions on the code organization please let me know.; Traditionally, PK denotes the integral supermatrices stored on disk. Here I use it more generally for the class of algorithm storing integrals somewhere instead of recomputing them.; ## Caution:. Some older commits contain additional attempts at algorithms that were deleted since (for being inefficient). You may want to review the most recent commits only.; ## Todos. Notable points that this PR has accomplished:; - [x] In-core PK algorithm when enough memory is available; - [x] ""Reorder"" PK algorithm: the PK supermatrices are directly written on file without any intermediates by reordering the integral computation (thanks to @dgasmith for discussion), good for large to medium memory; - [x] ""Yoshimine"" PK algorithm: pre-sorts integrals on disk, similar to more traditional algorithm. Best for low memory, otherwise quite slow.; - [x] Automatic selection of the algorithm depending on available memory; - [x] wK long-range integrals are also handled; - [x] Non-symmetric density matrices are handled ; ## Questions; - [x] I'd like this pull request to stay unmerged for a few days so everyone who wants to have a look at it has some time to do so. (@andysim, @jturney ?); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387:705,avail,available,705,https://psicode.org,https://github.com/psi4/psi4/pull/387,2,['avail'],['available']
Availability,"## Description. Finally, the first of @bozkaya's new methods. These are the canonical (non-orbital-optimized, non-FNO) CC methods with UHF reference by density-fitting and Cholesky decomposition. Gradients available for the most popular methods. This is PR No. 5 in the mega-dfocc-remp series. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] new methods!; - [x] uhf df ccd E & G; - [x] uhf df ccsd E & G ; - [x] uhf df ccsd(t) E & G (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf df a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:206,avail,available,206,https://psicode.org,https://github.com/psi4/psi4/pull/2739,1,['avail'],['available']
Availability,"## Description. Fixed dftd3 calls when `LD_LIBRARY_PATH` empty. Activate new -d3 damping.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] The env passed into subprocess must be strictly a dict of strings. This was violated when PATH or LD_LIBRARY_PATH was empty, yielding a `TypeError: execve() arg 3 contains a non-string value` error. Fixed this.; - [x] Re-enable the `d3m` and `d3mbj` extensions. Adjust test case (unrelated DFT error still failing on psinet) and docs to match. Filled in `[Smith:2016:2197]` reference.; ## Questions; - [x] Do we want conda dftd3 automatically installed alongside binary? On one hand then ensures ppl can use dftd3. On the other, ppl may be surprised if their hand-cmopiled version of dftd3 isn't the one used anymore. **Ans** sounds like installation alongside is ok, so long as hand-compiled still preferentially chooseable; - [x] If adding dftd3 to the install list, want to add the one built purely from Grimme's code or the one with the `-d3m` and `-d3m(bj)` capabilities, as applied through a patch? **Ans** distribute `dftd3m`; ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383:372,error,error,372,https://psicode.org,https://github.com/psi4/psi4/pull/383,2,['error'],['error']
Availability,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:479,toler,tolerance,479,https://psicode.org,https://github.com/psi4/psi4/pull/432,2,"['redundant', 'toler']","['redundant', 'tolerance']"
Availability,"## Description. Fixes special case of traceback printing where only lineno available is from `exec(content)`, which is useless. This fixes #1920 . We don't get Jonathon's nice `-->` offending line printing, but at least we don't get a new error. I've tried it on `print(""asdf"")` and some more common mistakes. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-py39/objdir39/stage/bin/psi4"", line 337, in <module>; exec(content). File ""<string>"", line 26; print ""asdf""; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""asdf"")?. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------!; ! !; ! Missing parentheses in call to 'print'. Did you mean print(""asdf"")? !; ! !; !----------------------------------------------------------------------!; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2083:75,avail,available,75,https://psicode.org,https://github.com/psi4/psi4/pull/2083,2,"['avail', 'error']","['available', 'error']"
Availability,"## Description. If a DFT functional gives `NaN` when we attempt to numerically integrate it, throw the functional under the bus immediately instead of leaving my ADIIS code to take the blame, i.e., give a better error message. Closes #2609. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611:212,error,error,212,https://psicode.org,https://github.com/psi4/psi4/pull/2611,1,['error'],['error']
Availability,"## Description. Increases compatibility with external analysis tools, by providing Gaussian formatted checkpoint file (FCHK) output. Also adds built-in distributed multipole analysis via Stone's GDMA package.; ## Todos; - [x] Add FCHK writer to libmints.; - [x] Incorporate GDMA 2, for distributed multipole analysis.; - [x] Add GDMA options, to prevent user from having to provide a separate input file.; - [x] Put GDMA results in the variables map.; - [x] Add GDMA test case.; - [x] Document FCHK writer and GDMA.; ## Questions; - [x] Although GDMA is released under GPL2, I want to try to contact Anthony Stone to get explicit permission to release his code as a subdirectory of Psi4. I don't think there are any legal problems with including an FCHK writer; I simply followed the [format description](http://www.gaussian.com/g_tech/g_ur/f_formchk.htm) and checked it against some of the GDMA examples. Anybody disagree?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323:102,checkpoint,checkpoint,102,https://psicode.org,https://github.com/psi4/psi4/pull/323,1,['checkpoint'],['checkpoint']
Availability,## Description. Make docs look nice again; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] clean up a lot of warnings/errors generated by sphinx-build; - [x] regenerate `_static`; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/343:159,error,errors,159,https://psicode.org,https://github.com/psi4/psi4/pull/343,1,['error'],['errors']
Availability,## Description. Makes all components of the dHF computation in FISAPT available as Psi Variables.; ## Todos; - [x] Export detailed components of FISAPT dHF as Psi variables; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480:70,avail,available,70,https://psicode.org,https://github.com/psi4/psi4/pull/480,1,['avail'],['available']
Availability,"## Description. Reduces the minimum overlap between atoms to fix issue #195. Reductions to this tolerance in the future would likely have to be for ghost atoms only. A downside to this is linear depends will pop up much more often when two atoms are this close together, especially in highly symmetric molecules.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/283:96,toler,tolerance,96,https://psicode.org,https://github.com/psi4/psi4/pull/283,2,"['down', 'toler']","['downside', 'tolerance']"
Availability,"## Description. Refreshed all output.ref's in the tests folder. An interesting discovery is that some DFT methods (wB97X, and wB97) inhibit the Psi4 output printing. We need to fix this before this PR goes through, but I wanted to start in on checking some of the changes.; ## Todos; - [x] Several DFT functionals no longer print their output correctly. While the program still runs the input script (can be verified with python print), Psi4 printing has stopped. This needs to be fixed. ; - [x] Update dft1, dft1-alt, and dft2 test case output.ref's after the above change.; ## Spot check outputs. I don't think its possible to compare every single output, but I would like to borrow the following people to spot check a few outputs. We run quite a few tests, but they certainly are not comprehensive. This could potentially show holes in our testing strategy (like the above issue). . Probably the easiest way to do this is go to the ""Files changed"" tab at the top and use a browser search to find a file your interested in. This does require you to know the name of the file in question. Alternatively, you can download my branch and run a `git diff -w -b HEAD~4 filename`. The `-b -w` options are to help cleanup the diff a bit.; - [x] CC @lothian ; - [x] OCC/DFOCC @bozkaya ; - [x] Psithon/DFTD3/PyWrap/etc @loriab ; - [x] FNO-CC @edeprince3 ; - [x] Opt @psi-rking ; - [x] CI (myself); - [x] SCF/DFT @jturney @robparrish ; - [x] DCFT @andysim ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315:1114,down,download,1114,https://psicode.org,https://github.com/psi4/psi4/pull/315,1,['down'],['download']
Availability,## Description. Running `vmd_cube.py` would produce an error due to the use of deprecated `.iteritems` instead of `.items`. ## User API & Changelog headlines; - [x] Fix Python3 compatibility in vmd_cube.py. ## Dev notes & details; - Replace `iteritems` with `items`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3097:55,error,error,55,https://psicode.org,https://github.com/psi4/psi4/pull/3097,1,['error'],['error']
Availability,"## Description. SCF Gradients are now symmetrized by swiping some code from Andy's Deriv module and placing it in `scfgrad`. Generally we wouldn't want to duplicate code, but there isn't a great way to avoid this at the moment. Discussion in issue #298 for reasoning behind this simple solution.; ## Todos; - [x] SCF Gradient is now symmetrized.; - [x] Fixed the `opt7` convergence tolerance issue the failing cases now does an additional 6 iterations.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/301:382,toler,tolerance,382,https://psicode.org,https://github.com/psi4/psi4/pull/301,1,['toler'],['tolerance']
Availability,"## Description. Several tweaks to prepare for the 1.0 release.; ## Todos; - [x] Throws a error if NumPy is not install and prints documentation for installation, closes #407.; - [x] Tweaks CI convergence and will throw PsiException if CI/MCSCF does not converge, closes #394.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/412:89,error,error,89,https://psicode.org,https://github.com/psi4/psi4/pull/412,1,['error'],['error']
Availability,"## Description. The MOLDEN file written by psi4, which can be used by our external programs, is HUGE when a reasonably-sized molecule is calculated using a large basis set. Since for many post-processing purposes the virtual orbitals are unnecessary, it would be interesting to have an option to drop writing most virtual MOs to the file, dramatically cutting down its size. This PR implements the molden_novirtual option to SCF. If true (it is false by default to preserve the original behavior), only the occupied orbitals are written to the molden file in a closed-shell molecule. In an open-shell system, 2*max(nocca,noccb) orbitals are written.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/454:360,down,down,360,https://psicode.org,https://github.com/psi4/psi4/pull/454,1,['down'],['down']
Availability,"## Description. The MOLDEN file written by psi4, which can be used by our external programs, is HUGE when a reasonably-sized molecule is calculated using a large basis set. Since for many post-processing purposes the virtual orbitals are unnecessary, it would be interesting to have an option to drop writing most virtual MOs to the file, dramatically cutting down its size. This PR implements the molden_novirtual option to SCF. If true (it is false by default to preserve the original behavior), only the occupied orbitals are written to the molden file in a closed-shell molecule. In an open-shell system, 2*max(nocca,noccb) orbitals are written.; ## Questions; - [x] @dgasmith, input file seems unresponsive to `set MOLDEN_WRITE true`. Instead have to keep Wfn and call `molden(Wfn)`. Does that sound right for the new scheme? Otherwise, can just have `molden()` called at end of `energy()` if kw is on. The PR's molden writing was in `src/bin/scf` which is now gone. Is the driver `molden()` the replacement location or did I miss it? Currently set up to be sensitive to `MOLDEN_WITH_VIRTUAL` but whatever's decided about `MOLDEN_WRTIE`, should probably go the same way.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/472:360,down,down,360,https://psicode.org,https://github.com/psi4/psi4/pull/472,1,['down'],['down']
Availability,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/440:271,degraded,degraded,271,https://psicode.org,https://github.com/psi4/psi4/pull/440,2,"['avail', 'degraded']","['available', 'degraded']"
Availability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:83,avail,available,83,https://psicode.org,https://github.com/psi4/psi4/pull/1253,1,['avail'],['available']
Availability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:83,avail,available,83,https://psicode.org,https://github.com/psi4/psi4/pull/1243,1,['avail'],['available']
Availability,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/479:311,avail,available,311,https://psicode.org,https://github.com/psi4/psi4/pull/479,1,['avail'],['available']
Availability,"## Description. The overall goal was to revamp the SCF guess inside Psi to give a bit better convergence and reduce the number of times a user needs to intervene in guess selection. To this end we have improved the speed of SAD, and tweaked default guesses away from CORE. The other half of improving SCF convergence is improving the solver which is delegated to a later date.; ## Todos; - [x] Changed SAD to use DF (default) or a Direct JK object. Reduced computational time of SAD by 50-2000x (yes, really).; - [x] SAD guess is now default for RHF, all RHF test cases pass.; - [x] GWH is now the default for ROHF/UHF, cc11 fails and was switched back to CORE.; - [x] Added fractional occupations via electron smearing across a given row. Preliminary tests show that for something like the HF molecule this works really well, but less so for Benzene. However, for UHF test cases this seems to help things dramatically. Turned off by default.; - [x] Closes #156. Now takes ~3 seconds instead of several hours.; - [x] Add Weigend J fit as a fail over fitting basis sets. While this is only J fit, this appears sufficient for SAD and contains auxiliary basis for atoms through Xenon.; - [x] Add secondary failover to Direct if DF is too angular momentum heavy for compiled `libint`.; ## Questions; - [x] We are not sold on GWH as the default for ROHF and UHF, the general consensus is that it works better than CORE on the average. Feedback is most welcome.; - [x] There may have been stability issues with SAD in the past. Can anyone recall what these were and provide an example?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400:1203,failover,failover,1203,https://psicode.org,https://github.com/psi4/psi4/pull/400,1,['failover'],['failover']
Availability,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453:390,avail,available,390,https://psicode.org,https://github.com/psi4/psi4/pull/453,2,['avail'],['available']
Availability,## Description. There was a compiler error when GTFock was called in libscf_solver. I fixed this error and I also enabled GTFock to work with symmetry. ; ## Todos; - [x] PSI4 compilers with HAVE_JK_FACTORY flag enabled; - [x] GTFock works with symmetry. ; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/287:37,error,error,37,https://psicode.org,https://github.com/psi4/psi4/pull/287,2,['error'],['error']
Availability,"## Description. There was an error in df-mp3 grad. I was comment out the wrong line. Now, it is fixed and DF-MP3 grad works!; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Feature1; ## Questions; - [ ] Question1; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/429:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/pull/429,1,['error'],['error']
Availability,"## Description. This PR does two things:. 1. Adds a new compile-time option, `FORCE_PEDANTIC`, that adds the `-pedantic-errors` flag to the compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:120,error,errors,120,https://psicode.org,https://github.com/psi4/psi4/pull/3145,3,"['error', 'failure']","['errors', 'failure']"
Availability,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:417,error,errors,417,https://psicode.org,https://github.com/psi4/psi4/pull/609,1,['error'],['errors']
Availability,"## Description. This PR is a reboot of https://github.com/psi4/psi4/pull/2695. That PR hasn't been kept up-to-date with the many changes to JK since, so I decided to reimplement it from scratch. The motivation and ideas are the same, however, so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:29,reboot,reboot,29,https://psicode.org,https://github.com/psi4/psi4/pull/3098,2,"['avail', 'reboot']","['available', 'reboot']"
Availability,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:765,error,error,765,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['error'],['error']
Availability,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:653,avail,availability,653,https://psicode.org,https://github.com/psi4/psi4/pull/306,2,['avail'],"['availability', 'available']"
Availability,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:389,redundant,redundant,389,https://psicode.org,https://github.com/psi4/psi4/pull/2619,2,"['ping', 'redundant']","['ping', 'redundant']"
Availability,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533:305,Down,Download,305,https://psicode.org,https://github.com/psi4/psi4/pull/533,2,['Down'],['Download']
Availability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:416,ping,pings,416,https://psicode.org,https://github.com/psi4/psi4/pull/2628,1,['ping'],['pings']
Availability,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261:602,error,error,602,https://psicode.org,https://github.com/psi4/psi4/pull/1261,1,['error'],['error']
Availability,"## Description; - Adds the popular `return_energy` field so that downstream programs can always easily obtain this quantity instead of trying to parse the level of theory and keyword.; - Now correctly updates the geometry of the output result if a molecule orientation is changed by Psi4.; - Psi4 may reorder atoms for non-contiguous fragments, schema input now throws if this is the case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1011:65,down,downstream,65,https://psicode.org,https://github.com/psi4/psi4/pull/1011,1,['down'],['downstream']
Availability,"## Description; - [x] Package build on Windows was getting the error below. From https://numpy.org/doc/stable/user/basics.types.html, I think this'll fix it. (Also probing whether an Azure error in another PR is repeatable.). ```; Tests failed for psi4-1.8a1.dev6+758d3af-py38_0.tar.bz2 - moving package to C:\tools\miniconda3\conda-bld\broken; WARNING:conda_build.build:Tests failed for psi4-1.8a1.dev6+758d3af-py38_0.tar.bz2 - moving package to C:\tools\miniconda3\conda-bld\broken; E File ""%PREFIX%\lib\site-packages\psi4\driver\qcdb\bfs.py"", line 80, in BFS. E radii = _get_covalent_radii(elem). E File ""%PREFIX%\lib\site-packages\psi4\driver\qcdb\bfs.py"", line 155, in _get_covalent_radii. E covrad = np.fromiter((covalent_radii_lookup[caps[at]] for at in range(nat)), dtype=np.float, count=nat). E File ""%PREFIX%\lib\site-packages\numpy\__init__.py"", line 284, in __getattr__. E raise AttributeError(""module {!r} has no attribute "". E . E AttributeError: module 'numpy' has no attribute 'float'. E . E Printing out the relevant lines from the Psithon --> Python processed input file:. E [10, 33], . E [11, 34, 35], . E [17], . E [18]] . E qmol = qcdb.Molecule.from_string(iceIh, dtype='xyz'). E --> frag, arrs, bmols, bmol = qmol.BFS(seed_atoms=[[3,16], [21]], return_arrays=True, return_molecule=True, return_molecules=True). E compare_integers(frag == ref_fragmentation, 1, 'Q: BFS from qcdb.Molecule') . E compare_arrays(qmol.geometry(np_out=True)[[1, 14, 19]], arrs[0][3], 4, 'Q: geom back from BFS') . E compare_integers(15, bmol.nfragments(), 'Q: nfrag') . E compare_values(qmol.nuclear_repulsion_energy(), bmol.nuclear_repulsion_energy(), 4, 'Q: nre') . E compare_arrays(qmol.geometry(np_out=True)[[2, 13, 20]], bmols[4].geometry(np_out=True), 4, 'Q: frag geom back from BFS') ; ```; - [x] The docs-pr build has been failing on several PRs due to the docs.yaml env not solving. It solves locally for me on conda, but apparently not on the mamba setup we have in the GHA. I've switched tha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2845:63,error,error,63,https://psicode.org,https://github.com/psi4/psi4/pull/2845,2,['error'],['error']
Availability,"## Description; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. This should be merged close to #1804 . This one only hits def2 orbital and RI, while that one hits JFIT and JKFIT, so I think the only conflict should be in the NOTES file. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1806:191,error,errors,191,https://psicode.org,https://github.com/psi4/psi4/pull/1806,1,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] #2775 I guess wasn't up-to-date with master so the combination of it and some intervening changes broke the build. ~Hopefully this fixes it, and the weird L2 error I'm getting locally is nothing.~ An explicit destructor was needed, too. Thanks to https://stackoverflow.com/a/34073221 for guidance.; - [x] Analogous to #2845 for the master docs build should fix that; - [x] A couple old copyrights. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2855:478,error,error,478,https://psicode.org,https://github.com/psi4/psi4/pull/2855,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Some setups were using a BLAS that doesn't support the extension AXPBY, so #2887 caused runtime can't-find-symbol errors. Most notably, this occurred for Mac users linking to Accelerate. This bypasses the trouble by rerouting to dscal+daxpy; - [x] clarifies who's getting scaled in the export docs.; - Note that the CI error was due to ongoing changes in QCArchive `next` branch. I've pinned the dep back a release so that psi4's interface to it can be fixed later. ## Questions; - [ ] Can someone confirm this works with the Accelerate setup? Below is a quick test.; ```; import psi4; import numpy as np. vecX = np.array([1., 1., 1.]); pvecX = psi4.core.Vector.from_array(vecX); print(pvecX.np) # 1. vecY = np.array([5., 5., 5.]); pvecY = psi4.core.Vector.from_array(vecY); print(pvecY.np) # 5. pvecX2 = pvecX.clone(); pvecX2.axpy(2.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 1.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 3.0, pvecY); print(pvecX2.np) # 13; ```. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895:434,error,errors,434,https://psicode.org,https://github.com/psi4/psi4/pull/2895,2,['error'],"['error', 'errors']"
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] cmake to 3.19 in preparation for einsums; - [x] Einsums 0.5 to fix CI; - [x] bump mem to fix error in fsapt1 test. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3162:413,error,error,413,https://psicode.org,https://github.com/psi4/psi4/pull/3162,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Collect enough extra docstrings and tweak enough references to functions so that all the links in the docs resolve.; - [x] Ended up needing mild to moderate docs renovation through whole QCA stack; - [x] Now can turn on Sphinx warnings-to-errors and nitpicky so that docs remain healthy; - [x] Added new doc extension dependency, https://github.com/mansenfranzen/autodoc_pydantic, so that Pydantic models (as introduced in #2575) now get superior, rather than inferior, autodoc compared to classes.; - [x] Add in a few more `__all__`s to driver files. ## Checklist; - ~Tests added for any new features~; - [x] Full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2597:426,error,errors,426,https://psicode.org,https://github.com/psi4/psi4/pull/2597,1,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2113:418,avail,available,418,https://psicode.org,https://github.com/psi4/psi4/pull/2113,1,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Nowadays, ctest (quick) followed by pytest (quick) runs a lot of duplicate tests (unless the latter uses ""quick and api""). Let's not do that. This switches Azure to ctest(smoke) followed by pytest (quick).; - before: ; - W: 1h30m; - L: 41-57m; - after:; - W: 1h5m; - L: 34-38m; - In working on dfocc, I found some stdsuite updates that hadn't been ported from qcng to psi4 and some general improvements.; - [x] better check expected vs intended modules. (can catch if the default compute module for a method+circs changes.); - [x] `test_*_default` in stdsuite changed meaning slightly. now PASSED means get final method answer correctly and XFAIL means known NYI. formerly, inputs that got the final method answer correctly but were not able to supply some submethod (like same-spin mp2 for ccsd) also got the XFAIL result.; - [x] have a mini ref file so can add reference data w/o waiting for a new qcengine release; - [x] regex and human-directed error messages to simplify and consolidate NYI methods testing. ## Checklist; - [x] Tests added for any new features; - [x] full stdsuite runs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2632:1136,error,error,1136,https://psicode.org,https://github.com/psi4/psi4/pull/2632,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cast in DFTensor memory estimation so that one can perform a fno-df-cc on 6 heavy atoms with aqz in 31 GiB of memory, not 17179869183.261 GiB . (How did this bug live this long?) Improve printing to match DFHelper; - [x] start converting existing mem printing to GiB from mega. afaict, the fnocc values were already mebibytes, though labeled MB; - change in printing for identical calc below:. ```; < The DF Tensor (Qso) construction requires 31.261 GiB of memory. ; ---; > DFTensor Memory: Qso construction needs 31.261 GiB; user supplied 35.390 GiB. ; ```; ```; < Total memory available: 38146.97 mb; < CCSD memory requirements: 35113.77 mb; < 3-index integrals: 10081.38 mb; < CCSD intermediates: 25032.39 mb; < (T) algorithm: 9055.34 mb (low-memory); ---; > Total memory available: 37.253 [GiB]; > CCSD memory requirements: 34.291 [GiB]; > 3-index integrals: 9.845 [GiB]; > CCSD intermediates: 24.446 [GiB]; > (T) algorithm: 8.843 [GiB] (low-memory); ```. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2673:766,avail,available,766,https://psicode.org,https://github.com/psi4/psi4/pull/2673,2,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:1026,down,down,1026,https://psicode.org,https://github.com/psi4/psi4/pull/2142,1,['down'],['down']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Allow psi4 to be used with pydantic v1 or v2. ## Dev notes & details; - [x] still using pydantic v1 API but now tolerant of a v1 or v2 pydantic environment. qcel v0.26 and qcng v0.27 have recieved the same treatment. This is that part that's worthy of backport. It's already available on the c-f 1.8.1 build number `_2` conda packages, having been applied by patch.; - [x] bump qcel and qcng versions. for local build cases, switch from `python setup.py` to `pip install` from src. the latter is preferred as setup.py gets phased out, and, in any case, was necessary for qcel, which has transitioned from a setuptools to poetry build backend. this only handles the module, so if a module comes with an executable (e.g., `bin/qcengine` from qcng, that doesn't end up in the right place. ; - [x] fix docs GHA by constraining pb11 to 2.10 for the docs build spec. https://github.com/pybind/pybind11/pull/4679 seems to be the culprit. It's a good and standards-conforming change, but other tooling and/or typing stores on the internet to which sphinx refers all need time to adapt.; - [x] generalize a few cmake config dir locations for addons.; - [x] remove youtube links to F/I SAPT tutorials that have been taken private.; - [x] some build docs I had lying around. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:233,toler,tolerant,233,https://psicode.org,https://github.com/psi4/psi4/pull/3019,2,"['avail', 'toler']","['available', 'tolerant']"
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix bug where final findif and nbody quantities are computed and probe-able but not printed or logged.; - [x] update CI for c-f based; - [x] add docs warnings about out-of-dateness for build; - [x] work around windows console not liking strikethrough; - [x] psi4.addons() isn't the definitive word on ecosys availability -- testing.using is -- but it's simpler. This updates the Grimme addons to detect the favored distributions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2959:795,avail,availability,795,https://psicode.org,https://github.com/psi4/psi4/pull/2959,1,['avail'],['availability']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Allow the use of upstream master for Libint2. The L2 build that v1.8 required also still works. ## Dev notes & details; - [x] Very recent L2 upstream master (after [10ca429217977bc2baac78fdaf3ac8d4f8aa05d9](https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9) on 24 Nov) has everything Psi4 needs to run, namely Windows compatibility and runtime solid harmonic order (sho) switching. 🎉 ; - [x] However, for *this* L2 changeover, there's no particular reason to demand users switch from the L2 (loriab branch) you've been using since 8 May & v1.8. The runtime internals are all the same.; - [x] So the goal of this PR is to make Psi4 compatible with both L2 branches: May 2023 loriab and Nov 2023 upstream. The differences are:; - [x] there's a different components scheme, so max_am_eri=5 energy is represented as `eri_c4_5_d0` for May but `None` (if not patched) or `eri_hhhh_d0` (patched) for Nov. This PR makes sure psi4 can process both schemes for outfile printout and to redirect to findif if Hessian ints aren't available.; - [x] `find_package(Libint2 COMPONENTS eri_... cxx_ho ss.)` on May properly checks components but for Nov it's not picky. Only thing to do is be aware.; - [x] Note that upstream master has Jonathon's erfc nuclear fix, so a time is coming soon when your May 2023 L2 branches will have to be retired. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3047:1302,avail,available,1302,https://psicode.org,https://github.com/psi4/psi4/pull/3047,1,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] I think CI is hitting a brownout to deprecate the non-redundant mambaforge, so completing the switch. I've done it at other repos; - [x] windows nightly builds are in great demand, I don't have much more to delete to create space for them, and I'm tired of build always looking like it's failing at master. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3233:307,redundant,redundant,307,https://psicode.org,https://github.com/psi4/psi4/pull/3233,1,['redundant'],['redundant']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] While not recommended to use a `/` character in your molecule labels, if you do, at least now it won't segfault if density fitting is involved. Thanks to @bennybp for the bug report. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Error can be triggered with below. Shows up in `DFHelper::put_tensor()`. ```; import psi4. mymol = psi4.Molecule.from_arrays(geom=[0, 0, 0, 2, 0, 0], elem=[""h"", ""h""], name=""h2/mol""). # segfaults if any DF (that is, following line commented). runs if DF suppressed (following line active); #psi4.set_options({""scf_type"": ""pk"", ""df_basis_guess"": ""false""}). ene = psi4.energy(""b3lyp/cc-pvtz"", molecule=mymol); print(ene); ```. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984:676,Error,Error,676,https://psicode.org,https://github.com/psi4/psi4/pull/2984,1,['Error'],['Error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] fix for BrianQC in #3185 as suggested by @wszs. ## CI Fixes; - [x] mac eco: with cmake v3.30.0, FindPython got seemingly unrelated updates, and now it `Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS NumPy)` as tested with longstanding np v1. I suspect an interaction with pb11 (hasn't greenlit 3.30 yet). so codedeps is restraining cmake to <=3.29; - [x] win eco, Part 1: so after the GHA win image issue (`Unexpected compiler version, expected Clang`) got fixed, we started seeing `error: capturing a structured binding is not yet supported in OpenMP`. That seems to be https://github.com/llvm/llvm-project/pull/80216 where a syntax warning in clang v18 collides with a MSVC header that L2 includes. That warning was shifted in clang v19 to only fire within OMP loops rather than generically, but v19 isn't released and the fix hasn't ported back to v18, so the only sol'n is to use v17, which we're now requesting from conda. Note that the Azure Win is asking for v17 directly from Chocolatey, so that's why it was ok.; - [x] win eco, Part 2: so we have clang v17 from conda and can get past libmints, then we hit `error: use of undeclared identifier 'omp_set_max_active_levels'` in sapt.cc . This is the only use of this in the code, and the error probably has to do with limited omp support by windows. Fortunately, it seems that passing the path to the `intel-openmp`-provided `omp.h` which is in the weird dir `${PREFIX}\opt\compiler\include` rather than letting it find the clang-provided omp.h did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link aga",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:747,error,error,747,https://psicode.org,https://github.com/psi4/psi4/pull/3186,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. GXX 7.5 from conda is throwing bizarre assembly-level errors during libmints compile like `open CFI”` and `Error: .size expression for does not evaluate to a constant`. This compiler is working fine locally and the conda env hasn't changed since it was working fine on GHA. Searching suggests things like running of of memory for compile or binutils patches. conda has moved from 7.5 to 11.2 pinning, so that's probably a good next step. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2644:134,error,errors,134,https://psicode.org,https://github.com/psi4/psi4/pull/2644,2,"['Error', 'error']","['Error', 'errors']"
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465:413,toler,tolerance,413,https://psicode.org,https://github.com/psi4/psi4/pull/2465,4,"['error', 'toler']","['error', 'tolerance']"
Availability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - [x] Fix issue in syntax highlighting for psithon code snippets - there are bits that are invalid python and we don't want highlighted as errors.; - [x] Add tabbing between Psithon and PsiAPI code snippets in the tutorial on input files.; ; ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123:219,error,errors,219,https://psicode.org,https://github.com/psi4/psi4/pull/3123,1,['error'],['errors']
Availability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2428:156,error,error-codes,156,https://psicode.org,https://github.com/psi4/psi4/pull/2428,8,['error'],['error-codes']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A lot of error exits in `libdpd` are implemented with `exit(1)` or equivalent. This makes debugging harder, and results in less informative error messages when a test fails in the CI environment. This PR modernizes all `exit(1)` error exits in `libdpd` into `throw PSIEXCEPTION`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now prints more detailed error messages if an error happens in its DPD module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `exit(1)` and `exit(PSI_RETURN_FAILURE)` calls in `libdpd` have been replaced with a `throw PSIEXCEPTION`. ## Checklist; - [x] No new features; - [x] CI tests are failing only due to libint being in flux. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117:89,error,error,89,https://psicode.org,https://github.com/psi4/psi4/pull/3117,5,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A preliminary implementation of new functionalities in intramolecular SAPT proposed by Du Luu and Konrad Patkowski in [https://doi.org/10.1021/acs.jpca.2c06465](https://doi.org/10.1021/acs.jpca.2c06465). The code is coauthored by @dluu12. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - The new available options for `FISAPT_LINK_ASSIGNMENT` are `SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2`. The `SIAO1` variant is the recommended one that solves some serious issues of the default `FISAPT_LINK_ASSIGNMENT=C` variant and, after some more testing, will hopefully take over as the production ISAPT scheme.; - A couple minor options for the new variant (orthogonalization of link orbitals, making cube files) have been added and documented in the manual.; - After quite a bit of effort, FISAPT (that is, the F-SAPT partitioning of ISAPT) seems to be working fine.; - A suitable fragment in the manual and two tests (isapt-siao1 and fisapt-siao1) have been added. ## Questions; - The code does what it is supposed to, but certainly needs extensive general cleanup.; - Not tested with external potentials.; - Presently, there are two functions that produce different cube files: `FISAPT::raw_plot()` and `FISAPT::do_cubes()`. They have different capabilities but should probably be merged into one. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899:563,avail,available,563,https://psicode.org,https://github.com/psi4/psi4/pull/2899,1,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A small addition needed for an F12 code to work Python-side. Adds the ability to call; ```; ao_f12g12(exp_coeff, Basis1, Basis2, Basis3, Basis4); ao_double_commutator(exp_coeff, Basis1, Basis2, Basis3, Basis4); ```; with an arbitrary combination of 4 bases (some combinations require `SCREENING == 'NONE'` - see #2973). The other kinds of F12 integrals, e.g. `ao_f12()`, already have this functionality and just the two above types were missing. ## Dev notes & details; This minor PR should be completely orthogonal to the recent PRs from @EricaCMitchell. All of these PRs will be needed for the upcoming F12 codes. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run] `ctest -L quick` passes with no errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2987:833,error,errors,833,https://psicode.org,https://github.com/psi4/psi4/pull/2987,1,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Addressing Issue #2226, changing the gemm() method in Matrix.cc. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calculates row and column totals from rowspi_ and colspi_; - [x] Throws a Psi exception error if the dimensions don't match up. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729:651,error,error,651,https://psicode.org,https://github.com/psi4/psi4/pull/2729,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:405,avail,available,405,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As discussed in #2997 and #3117, no debugging information is produced in many places in Psi4. I believe this is because of improper calls to `exit()`, which is a remnant of the C history of Psi. #3117 replaces the calls to `exit()` with `throw`s in libdpd. This PR replaces the calls in the rest of Psi4. Sorry for the verbose changes; I ran clang-format on the files since my editor's indentation doesn't match that in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Obsoleted calls to `exit()` have been replaced by exceptions, which should better guarantee the passing of error messages to the end user. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Spurious calls to `exit()` have been removed in favor of exceptions, which should better guarantee error messages getting through to the user. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3118:786,error,error,786,https://psicode.org,https://github.com/psi4/psi4/pull/3118,2,['error'],['error']
Availability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2712. Please do not use C-style casting for complicated types. ## Release Notes Delta; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **Bugfix:** Seeding an SCF gradient with a ref_wfn that isn't SCF now raises an error rather than a segfault. ## Checklist; - [x] `grad` and `hess` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2714:352,error,error,352,https://psicode.org,https://github.com/psi4/psi4/pull/2714,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:115,error,error,115,https://psicode.org,https://github.com/psi4/psi4/pull/3168,5,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes the buffer overflow error described in #3214 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3215:106,error,error,106,https://psicode.org,https://github.com/psi4/psi4/pull/3215,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:145,error,error,145,https://psicode.org,https://github.com/psi4/psi4/pull/2997,6,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2422:201,error,errors,201,https://psicode.org,https://github.com/psi4/psi4/pull/2422,3,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It is done. The beast lays slain.; This PR replaces the last calls of the `sq_rsp` function in the `dfoccwave::Tensor2d::diagonalize` overloads with the new DSYEV wrappers, and removes the function and its file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Merge `dfoccwave::Tensor2d::diagonalize` overloads to minimize code dupliaction; - [x] Add machine-readable docstrings in the header file; - [x] `dfoccwave::Tensor2d::diagonalize` overloads now throw on non-square matrices or diagonalizer failure; - [x] Replace calls of `sq_rsp` with `DSYEV_ascending` and `DSYEV_descending`; - [x] Delete `sq_rsp` function and file. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2928:587,toler,toler,587,https://psicode.org,https://github.com/psi4/psi4/pull/2928,2,"['failure', 'toler']","['failure', 'toler']"
Availability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389:108,error,error,108,https://psicode.org,https://github.com/psi4/psi4/pull/2389,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Much like PR #2804, this PR is mostly about eliminating `sprintf`-related compiler warnings and modernizing C-style string handling to C++, this time in libmints' `BasisSet::print_detail_cfour`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernized `BasisSet::print_detail_cfour()`, highlights:; - [x] No longer uses `sprintf` and a fixed-size char array; - [x] Variables are made `const` wherever reasonable; - [x] Use of `std::find` on doubles is replaced by new functions (`none_of_equal` and `fpeq`) that implement a fuzzy compare with a default tolerance of 1E-14. Probably no behaviour change in practice (unless someone has basis fns which differ in exponent by >0 but <1E-14), but it is usually not recommended to use == on FP types, which is what `std::find` does.; - [x] The `slater.chemie.uni-mainz.de` URL has succumbed to link rot. Replaced with one that points to the latest version that is being preserved by the Internet Archive, both in the C++ and Python implementations.; - [x] Ran clang-format on `basisset.cc` and `basisset.h`. ## Questions; - [x] The new functions `none_of_equal` and `fpeq` are just living in `basisset.cc` and `basisset.h` right now. Would some other file be a better place to put them?. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] I do not have CFOUR, so I cannot really test if this breaks something. It should not, but the `std::find` change _is_ behaviour-altering, albeit only in a corner case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937:827,toler,tolerance,827,https://psicode.org,https://github.com/psi4/psi4/pull/2937,1,['toler'],['tolerance']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; My main goal is to provide an option for users to run FSAPT directly through the psiapi and not to have to create extra files and post-process the psi4 outputs. This is largely done by adding an fsapt analysis function to `./psi4/driver/driver.py`. I extended `fsapt.py` by moving its history to `psi4/driver/procrouting/sapt/fsapt.py` to enable users to either run the analysis directly after a `psi4.energy('fisapt0')` calculation through psi variables or through an `AtomicResults` as is demonstrated in `tests/pytests/test_fisapt.py`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Addition of `./psi4/driver/driver.py:fsapt_analysis()` to call fsapt analysis through the psi4 module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] FSAPT is now available directly through psi4 instead of post-processing output files; - [ ] FISAPT results can be stored in `AtomicResults` permitting the storage of results in a QCArchive database. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3222:1148,avail,available,1148,https://psicode.org,https://github.com/psi4/psi4/pull/3222,1,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; On the Fedora build system, `python` is not available which causes tests to fail.; This patch fixes this issue for good. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3216:124,avail,available,124,https://psicode.org,https://github.com/psi4/psi4/pull/3216,1,['avail'],['available']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 has wrappers for seven LAPACK functions which have been marked as deprecated by the LAPACK devs for a long time. These functions have also been marked as deprecated within Psi4. Luckily they are not marked as `PSI_API`, nor are they used by Psi4. This PR removes them. Note that the default git diff algorithm is getting confused by the repetitive text in `lapack_intfc.cc` and incorrectly indicates that some lines were added. The correct diff can be obtained with `--diff-algorithm=minimal` :; ```; $ git diff --stat --diff-algorithm=minimal master remove_deprecated_lapack; psi4/src/export_blas_lapack.cc | 7 -; psi4/src/psi4/libmints/psimath.cc | 50 --; psi4/src/psi4/libmints/psimath.h | 27 -; psi4/src/psi4/libqt/CMakeLists.txt | 19 -; psi4/src/psi4/libqt/lapack_intfc.cc | 1021 -----------------------------; psi4/src/psi4/libqt/lapack_intfc_mangle.h | 35 -; psi4/src/psi4/libqt/qt.h | 25 -; 7 files changed, 1184 deletions(-); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires the LAPACK library to provide `DGGSVD3` and `DGGSVP3`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fortran, C and C++ style wrappers for `DGEGS`, `DGEGV,` `DGELSX,` `DGEQPF,` `DGGSVD,` `DGGSVP` and `DTZRQF` are removed.; - [x] CMake checks for the availability of `DGGSVD3` and `DGGSVP3` are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2823:1660,avail,availability,1660,https://psicode.org,https://github.com/psi4/psi4/pull/2823,1,['avail'],['availability']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:577,Down,Downstream,577,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['Down'],['Downstream']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicod",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:406,error,errors,406,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:299,error,error,299,https://psicode.org,https://github.com/psi4/psi4/pull/2785,5,"['down', 'error', 'failure']","['downloaded', 'error', 'failure']"
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:1232,toler,toler,1232,https://psicode.org,https://github.com/psi4/psi4/pull/2798,2,['toler'],['toler']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR aims to improve the Dimension object in various ways, by adding machine-readable (for eg. VSCode) docstrings, adding const to arguments, replacing `int` with `size_t` to match `std::vector::operator[](std::size_t)` and cautiously deprecating member functions that deal with pointers. Not only are pointers more error-prone, they are currently involved in some strange interaction between `Dimension` and `Matrix` objects, resulting in awkward roundabout initialization/construction that I hope to untangle before Psi4 1.11? (1.11, or maybe 1.12?).; Please let me know if you feel the three deprecations in this PR would be too disruptive or otherwise undesirable, this PR is very much a ""request for comments"". ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] API change: The custom assignment operator for `Dimension` objects (`Dimension& operator=(const int*)`) is being deprecated. Unless someone speaks up, 1.10 may be the last release to have it.; - [x] API change: Cast-to-pointer operators for `Dimension` objects (`operator int*()` and `operator const int*() const`) are being deprecated. Unless someone speaks up, 1.10 may be the last release to have them.; - [x] Minor API change: Several constructors and member functions of `Dimension` are now using `size_t` instead of `int` for indexing:; −`Dimension::Dimension(int, const std::string&)` is now `Dimension::Dimension(size_t, const std::string&)`; −`void Dimension::init(int, const std::string&)` is now `void Dimension::init(size_t, const std::string&)`; −`int Dimension::n() const` is now `size_t Dimension::n() const`; −`int& Dimension::operator[](int)` is now `int& Dimension::operator[](size_t)`; −`const int& Dimension::operator[](int) const` is now `const int& Dimension::operator[](size_t) const`; −`const int& Dimensi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953:399,error,error-prone,399,https://psicode.org,https://github.com/psi4/psi4/pull/2953,1,['error'],['error-prone']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:167,error,error,167,https://psicode.org,https://github.com/psi4/psi4/pull/2756,11,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR fixes #3147 . Basically the psithon way of defining molecules converted _initial_cartesian on parsing.; When adding an external potential this was used as; molecule.set_geometry(clone_molecule._initial_cartesian).; set_geometry applies the conversion again. The two python ways I found, which set initial_cartesian did not do the conversion leading to incorrect geometries, when using external_potential and molecules defined as unit=angstrom. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes #3147: Parsing molecules with angstrom units and using external_potential from python was broken. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes #3147: Parsing molecules from psithon and python left mol._initial_cartesian in a different unit. This aligns the units. Downstream this had the effect of breaking using molecules with angstrom units with an external_potential from python. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148:1176,Down,Downstream,1176,https://psicode.org,https://github.com/psi4/psi4/pull/3148,1,['Down'],['Downstream']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR fixes a bug that @swarthout and I ran into while running psi4 on AWS. . A non-negligible fraction of our psi4 calculations that run through qcschema (e.g. many body, cbs) result in the following non-deterministic error:; ```; Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/psi4/driver/schema_wrapper.py"", line 459, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/opt/conda/lib/python3.10/site-packages/psi4/driver/schema_wrapper.py"", line 721, in run_json_qcschema; json_data[""native_files""] = {fl: flpath.read_text() for fl, flpath in files.items() if flpath.exists()}; File ""/opt/conda/lib/python3.10/site-packages/psi4/driver/schema_wrapper.py"", line 721, in <dictcomp>; json_data[""native_files""] = {fl: flpath.read_text() for fl, flpath in files.items() if flpath.exists()}; File ""/opt/conda/lib/python3.10/pathlib.py"", line 1135, in read_text; return f.read(); File ""/opt/conda/lib/python3.10/codecs.py"", line 322, in decode; (result, consumed) = self._buffer_decode(data, self.errors, final); UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe1 in position 47: invalid continuation byte; ```; This error tells us that psi4 is unable to read its own `timer.dat` file. . Upon further examination of these problematic `timer.dat` files, we noticed that the ""host"" field appears to be corrupted. Here is one such corrupted header of a `timer.dat` file, represented w/ a latin-1 encoding (since it can't be read w/ the standard utf-8 encoding):; ```; Host: ip-172-31-XX-XXX.us-east-2.compute.interá^X. Timers On : Sat Sep 2 14:14:18 2023; Timers Off: Sat Sep 2 14:14:18 2023. Wall Time: 0.52 seconds. Time (seconds); Module User System Wall Calls. --------------------------------------------------------------------------------------; ```; In all of these problematic timer.dat files, the host name is truncated ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:301,error,error,301,https://psicode.org,https://github.com/psi4/psi4/pull/3043,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2225:611,down,down,611,https://psicode.org,https://github.com/psi4/psi4/pull/2225,1,['down'],['down']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the `rsp` diagonalizer which was deprecated in #2798, and its supporting functions `tqli` and `tred2`, which are not used anywhere else.; These can be preserved in psi4attic after this PR is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is removed. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2838:594,toler,toler,594,https://psicode.org,https://github.com/psi4/psi4/pull/2838,1,['toler'],['toler']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-sub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2413:913,error,errors,913,https://psicode.org,https://github.com/psi4/psi4/pull/2413,1,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. I have no idea how the integrals work in Psi4. I followed [a Psi4Numpy example](https://github.com/psi4/psi4numpy/blob/master/Moller-Plesset/DF-MP2_NAF.py) @loriab hinted me at. The appears to compile; the only problem being the final assembly, i.e. the sum over the 3-center integrals. If anyone can tell me what I should be doing, help would be appreciated... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Implement scheme and get something that matches ERKALE; - [ ] Use optimal storage. ## Questions; - [ ] Is the basis build call correct? Should I also add a new basis role somewhere?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3036:288,error,error,288,https://psicode.org,https://github.com/psi4/psi4/pull/3036,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:288,error,error,288,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['error'],['error']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is picked out of #2413 as independent. Depending on the version of l2, this'll either issue warnings (psi4 l2 fork where `INT_NCART` is still macro) or errors (l2 master where `INT_NCART` now inline fn) when building psi4. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429:237,error,errors,237,https://psicode.org,https://github.com/psi4/psi4/pull/2429,1,['error'],['errors']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is something I was working on in the spring to find docs problems earlier (currently we'll maybe notice if they break in master) and to remove docs building responsibilities from PR submitters. It looks to still be in working order. The main contentions are likely to be how to phrase the auto-posts so that PR submitters aren't freaked out and inspired to jumble their git histories beyond repair. Below is a screenshot of what it posts to a PR. I can already see things I'd change. Opening this PR to start discussion on how the auto-post should read. <img width=""939"" alt=""Screen Shot 2021-11-23 at 2 49 00 PM"" src=""https://user-images.githubusercontent.com/2314730/143094958-32829f3e-feea-49f3-9601-cc87093276c0.png"">. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364:476,repair,repair,476,https://psicode.org,https://github.com/psi4/psi4/pull/2364,1,['repair'],['repair']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the continuation of my previous MOInfo PR #3112, with the following general themes:. - Adding new docstrings and making existing ones machine readable for VS Code (and probably also Doxygen); - Rebalancing the class hierarchy by sinking things that get reused to the base class, and hoisting things up in the inheritance chain that only get used in one derived class; - Reducing visible and mutable state, as well as the contact surface of the classes. This is achieved by making data and functions as private as possible, providing access to data through getters returning `const&` when necessary, and making a few data members `const`. Having `const` members in classes is sometimes considered to be bad form, but AFAIK all of the downsides are already incurred on account of `MOInfoBase` having reference members. The git history on this branch is admittedly a bit messy, I changed my mind about a couple of things. LMK if that is a problem.; The next PR in this series will get to what I originally wanted to achieve and remove uses of the ugly ""cast Dimension object to pointer"" operators (see #2953) from `libmoinfo.`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No API changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:821,down,downsides,821,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['down'],['downsides']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; While testing PR https://github.com/psi4/psi4/pull/2756, I have discovered a regression introduced by an earlier PR (#2700) of mine.; Before `throw`ing, `psio_error()` tries to write some data to the scratch files. But if `psio_error()` is called due to a write error, and the scratch disk is completely full, then this write will also fail, leading to `psio_error()` getting called again, and an infinite recursion ensues. The source of the regression is that `psio_tocwrite()` ends up calling `wt_toclen()`, which has been enhanced in #2700 to use `psio_error()` if it fails.; This PR resolves the issue by not trying to write anything to scratch if `psio_error()` is called due to a write failure. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? This regression was new enough that no release suffered from it. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Do not call `psio_tocwrite()` in `psio_error()` if `errval == PSIO_ERROR_WRITE`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2773:342,error,error,342,https://psicode.org,https://github.com/psi4/psi4/pull/2773,2,"['error', 'failure']","['error', 'failure']"
Availability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Yearly maintenance -- update copyright. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2394:87,mainten,maintenance,87,https://psicode.org,https://github.com/psi4/psi4/pull/2394,1,['mainten'],['maintenance']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:312,reliab,reliable,312,https://psicode.org,https://github.com/psi4/psi4/pull/2929,1,['reliab'],['reliable']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:629,failure,failure,629,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['failure'],['failure']
Availability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:173,down,downloading,173,https://psicode.org,https://github.com/psi4/psi4/pull/3041,1,['down'],['downloading']
Availability,"## Description; @andysim added the `dcft` module to Psi in 2010, as its pilot implementation. As the method was developed, @ssh2 decided that it was best to drop the `f` and name it `dct`. The abbreviation `dcft` hasn't been used in papers since 2012, and DCT papers since last year have just called the method density cumulant theory, cutting out the `f` entirely. This PR brings Psi up-to-the-present and calls the method `dct` everywhere. Now that we know what the method _is called_, this PR fixes a bug reported on the forums, where the method's density fitting basis set wasn't picked up by the input parser. This was the motivation for this massive PR, and it took one whole line of code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replaces `dcft` and `DCFT` with `dct` and `DCT`, throughout all C- and Py- side code; - [x] Added UpgradeHelper errors for users who try `energy('dcft')` and some such; - [x] Added PsiException errors for users who try a dcft option block; - [x] Added PsiException errors for users who try a dcft option; - [x] Updates the tests; - [x] Updates the samples; - [x] Updates the documentation (abbreviations kept when they are part of a paper title); - [x] Removed debug options which the code didn't even use anymore; - [x] Adds the one line of code needed to fix the instigating bug. ## Checklist; - [x] Every `ctest` test calling DCT is run and passes (14 dedicated DCT tests plus four additional tests); - [x] I've confirmed that you encounter the various errors when expected; - [x] I've manually checked the documentation. The only thing not working is the link to the `dct` folder, which won't exist until _after_ the PR is accepted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719:906,error,errors,906,https://psicode.org,https://github.com/psi4/psi4/pull/1719,4,['error'],['errors']
Availability,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:275,error,error,275,https://psicode.org,https://github.com/psi4/psi4/pull/1772,2,"['down', 'error']","['down', 'error']"
Availability,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903:73,error,errors,73,https://psicode.org,https://github.com/psi4/psi4/pull/903,2,['error'],"['error', 'errors']"
Availability,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:138,down,down,138,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['down'],['down']
Availability,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/703:182,down,download,182,https://psicode.org,https://github.com/psi4/psi4/pull/703,1,['down'],['download']
Availability,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:74,avail,available,74,https://psicode.org,https://github.com/psi4/psi4/pull/1892,1,['avail'],['available']
Availability,"## Description; Added and tested the following functionals. For the last two, unfortunately no bench value is provided.; ```; Functional: libxc : rob qchem; Comparison SOGGA11: -76.3720792686 : nan 3.84e-05 ; Comparison SOGGA11-X: -76.3569745367 : nan 1.10e-05 ; Comparison M06-L: -76.3766432198 : nan 1.95e-06 ; Comparison MN12-L: -76.3109178757 : nan 3.84e-05 ; Comparison MN15-L: -76.3001901669 : nan 5.49e-06 ; Comparison MN15: -76.3017521834 : nan nan ; Comparison PBE0-DH: -76.1613318950 : nan nan ; ```. Added worker functions for SCAN family of functionals, however without XC_MGGA_C_SCAN (which is available in LibXC 3.0.1) they won't work - commented out. See http://forum.psicode.org/t/libxc-density-functionals/589/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/904:607,avail,available,607,https://psicode.org,https://github.com/psi4/psi4/pull/904,1,['avail'],['available']
Availability,"## Description; Added core BrianQC functionality; - psi4 can now be compiled with the USING_BrianQC switch; - when compiled with BrianQC, several operations can be computed on the available GPUs through the BrianQC module, including Fock building and diagonalization. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893:180,avail,available,180,https://psicode.org,https://github.com/psi4/psi4/pull/1893,1,['avail'],['available']
Availability,## Description; Added missing existence check for each symmetry sub matrix in the advanced Matrix::gemm. (The first Matrix::gemm in matrix.cc). . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Function no longer triggers segmentation fault for empty submatrix. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/935:302,fault,fault,302,https://psicode.org,https://github.com/psi4/psi4/pull/935,1,['fault'],['fault']
Availability,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681:564,avail,available,564,https://psicode.org,https://github.com/psi4/psi4/pull/681,3,['avail'],['available']
Availability,## Description; Adds NumPy to the psi4-dev environment as it is 1) required to build gau2grid and 2) required to run Psi4. We also need to install deep-diff here as well which is only available on pip/conda-forge. Should this be: `conda create -n p4dev python=x.x psi4-dev numpy deep-diff -c psi4 -c conda-forge`; ; ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/970:184,avail,available,184,https://psicode.org,https://github.com/psi4/psi4/pull/970,1,['avail'],['available']
Availability,"## Description; Adds a few functionals (SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L).; ~Enables `dft_bench_i*` tests for SCAN, SCAN0, revPBE, SOGGA, SOGGA11, MN12-SX, MGGA_MS2h, MN12-L, BMK, N12, MGGA_MVS, PKZB, MN15-L, PBE50, MGGA_MVSh, SOGGA11-X, M06-L, N12-SX, PBEOP, MPW1LYP and GAM.~; Enables all reference values in `dft_bench_i*` tests, now sorted alphabetically. Functionals not present in Psi4 are automatically ~marked with `xfail`~ skipped - this currently includes B3TLAP, BP86VWN, LRC-BOP, PBEsol, t-HCTH, t-HCTHh, wM05-D and wM06-D3, in addition to wB97X-D3 which was already marked `xfail`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] adds SCAN and SCAN0; - [ ] tests for revSCAN, revSCAN0, revM06-L are missing - if anyone has access to these in other codes, I'd appreciate reference values!. ## Checklist; - [x] Tests added for functionals, where available; - [x] `dft_bench_interaction` and `dft_bench_ionization` pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597:920,avail,available,920,https://psicode.org,https://github.com/psi4/psi4/pull/1597,1,['avail'],['available']
Availability,"## Description; Adds a generalized Davidson solver to solvers.py. Issue #886. @dgasmith @amjames . ## Todos; * **Developer Interest**; - [x] General Davidson solver in python, takes an arbitrary number of roots, the convergence tolerance and maximum number of guess vectors. ## Questions; - [ ] Should the solver do all operations with psi4.core.Matrix functions? Currently, I’m using a QR decomposition in numpy to orthogonalize the added guess vectors with respect to the previous guess vectors. - [ ] I also need to change the code to handle a list of psi4.core.Matrix objects. Can I assume that this would be a list of guess vectors, with their second dimension being 1?. - [ ] Since this is a general solver, should I be worrying about irreps?. ## Checklist; - [ ] Currently takes in and returns numpy arrays, needs to take in and return a list of Psi4.core.Matrix objects; - [ ] May implement RHF stability analysis as a test case. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1080:228,toler,tolerance,228,https://psicode.org,https://github.com/psi4/psi4/pull/1080,1,['toler'],['tolerance']
Availability,"## Description; Adds ability for psi4.set_memory() to take unit-containing string as an argument, so that; `psi4.set_memory('30 GB')` behaves as would be expected. ## Todos; * **User API Changes**; - `int`, `float`, and `str` argument types supported; - `int` and `float` type arguments taken literally as number of bytes of memory to be set; - `str` type arguments must have units attached, e.g., `'20 mb'`, and are case-insensitive; - Added return of the amount of memory set; - renamed underlying fn to `psi4.core.set_memory_bytes(); - Arranged for inputparser to use the same psi4.set_memory() as psiapi, so now kib/mib/gib/tib avail. in input; - Correct the Psi4 and SCF headers which were computing MB and labeling MiB; - Add and test some bad examples of mem setting; - Add a minimum memory (250 MiB), adjust the default mem to 500 MiB. ## Questions; - [x] Currently, arguments of type `str` **MUST** have units. Should we allow users to input unitless numbers as `str`, to be taken literally? Or, if they wish to do that, should they just input as `int` or `float`? Consensus is, No, string args must have unit. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/641:632,avail,avail,632,https://psicode.org,https://github.com/psi4/psi4/pull/641,1,['avail'],['avail']
Availability,"## Description; Adds hostname printing to output file header, and stop time to output file ""footer"" before success/failure beer/coffee message. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/947:115,failure,failure,115,https://psicode.org,https://github.com/psi4/psi4/pull/947,1,['failure'],['failure']
Availability,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/672:345,echo,echo-target,345,https://psicode.org,https://github.com/psi4/psi4/pull/672,2,"['echo', 'error']","['echo-target', 'error']"
Availability,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966:513,error,errors,513,https://psicode.org,https://github.com/psi4/psi4/pull/966,1,['error'],['errors']
Availability,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:528,recover,recovers,528,https://psicode.org,https://github.com/psi4/psi4/pull/2093,2,"['error', 'recover']","['error', 'recovers']"
Availability,## Description; All credit to @hokru . This fixes runtime errors seen on Mac with clang 10. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2017:58,error,errors,58,https://psicode.org,https://github.com/psi4/psi4/pull/2017,1,['error'],['errors']
Availability,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:63,error,errors,63,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['error'],['errors']
Availability,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/897:99,error,error,99,https://psicode.org,https://github.com/psi4/psi4/pull/897,1,['error'],['error']
Availability,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043:353,error,error,353,https://psicode.org,https://github.com/psi4/psi4/pull/1043,1,['error'],['error']
Availability,"## Description; As the title says. PSIO errors now give suggestions on how to fix the observed PSIO issue. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] PSIO errors now provide advice on how to rerun the calculation to fix the PSIO issue. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adjusts PSIO error printout so that advice is now given on how to rerun calculations to fix the observed PSIO issue. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3139:40,error,errors,40,https://psicode.org,https://github.com/psi4/psi4/pull/3139,3,['error'],"['error', 'errors']"
Availability,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:343,robust,robust,343,https://psicode.org,https://github.com/psi4/psi4/pull/1846,2,"['error', 'robust']","['error', 'robust']"
Availability,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:138,error,error,138,https://psicode.org,https://github.com/psi4/psi4/pull/1599,1,['error'],['error']
Availability,"## Description; Attempts to restore the docs. Previously, we were getting warnings:; ```; 2022-03-10T17:32:55.6518847Z /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/notes_c.rst:66: ERROR: Unexpected indentation.; 2022-03-10T17:32:55.6519492Z /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/notes_c.rst:67: WARNING: Block quote ends without a blank line; unexpected unindent.; 2022-03-10T17:32:55.6520109Z /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/notes_c.rst:70: WARNING: Bullet list ends without a blank line; unexpected unindent.; ```. Wouldn't GHA docs auto-build be nice...?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468:196,ERROR,ERROR,196,https://psicode.org,https://github.com/psi4/psi4/pull/2468,1,['ERROR'],['ERROR']
Availability,## Description; Avert travis failures,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1659:29,failure,failures,29,https://psicode.org,https://github.com/psi4/psi4/pull/1659,1,['failure'],['failures']
Availability,"## Description; Ben Pritchard has been extensively revamping QCFractal/QCArchive. It has reached the point that the QCFractal `master` branch (latest release v0.15.8) will get no more support, and the `next` branch (no releases or conda packages) is in beta testing. This PR switches Psi4 distributed driver from `master` to `next` interfaces. It shouldn't affect many, if any. Only affects ppl running Psi4 and have `client = FractalClient(...)` in their inputs. User-side, was:; ```; from qcfractal.interface import FractalClient; client = FractalClient(""localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. User-side, now:; ```; from qcportal import PortalClient; client = PortalClient(""http://localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Updates interface for QCFractal `next`. Core snippet written by Ben.; - [x] ADDED: Also, updated to `task_config` from `local_options`. This isn't urgently needed, but it'll silence a repeated warning, at the cost of requiring latest qcng and hence latest qcel. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] I've tested it on GT cluster. Various calls were changed out for new ones. I'm not sure if error handling is any worse or better. ## Status; - [x] Ready for review; - [ ] Ready for merge, no particular hurry",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:1601,error,error,1601,https://psicode.org,https://github.com/psi4/psi4/pull/2645,1,['error'],['error']
Availability,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/788:252,Repair,Repair,252,https://psicode.org,https://github.com/psi4/psi4/pull/788,1,['Repair'],['Repair']
Availability,"## Description; Changes a setting in the COSX JK algorithm to a more conservative default. Previously, the incremental fock option (`cosx_incfock`) was enabled by default. This gave a minor speedup, but it came at the risk of possible SCF convergence issues when using diffuse basis sets. This PR disables this option, so the COSX algorithm will be slightly slower, but more robust by default. ## Todos; - [x] Changed `cosx_incfock` default. ## Checklist; - [x] COSX tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2689:375,robust,robust,375,https://psicode.org,https://github.com/psi4/psi4/pull/2689,1,['robust'],['robust']
Availability,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:806,down,downstream,806,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['down'],['downstream']
Availability,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2280:56,error,error,56,https://psicode.org,https://github.com/psi4/psi4/pull/2280,2,['error'],"['error', 'errors']"
Availability,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:958,ping,ping,958,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['ping'],['ping']
Availability,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/pull/2193,3,"['error', 'failure']","['error', 'failure']"
Availability,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2450:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/pull/2450,1,['error'],['error']
Availability,## Description; Closes #2779. (@susilehtola). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Raise an error when a user requests more roots of `detci` than there are determinants. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780:228,error,error,228,https://psicode.org,https://github.com/psi4/psi4/pull/2780,1,['error'],['error']
Availability,## Description; Closes issue #2559 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removed redundant work in parallel TwoBodyAOInt construction. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2581:152,redundant,redundant,152,https://psicode.org,https://github.com/psi4/psi4/pull/2581,1,['redundant'],['redundant']
Availability,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/689:383,error,error,383,https://psicode.org,https://github.com/psi4/psi4/pull/689,1,['error'],['error']
Availability,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802:383,error,errors,383,https://psicode.org,https://github.com/psi4/psi4/pull/802,3,"['Error', 'error']","['Error', 'errors']"
Availability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:160,down,downstream,160,https://psicode.org,https://github.com/psi4/psi4/pull/865,4,"['down', 'error']","['down', 'downstream', 'error']"
Availability,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1023:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/pull/1023,1,['error'],['error']
Availability,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1455:623,error,errors,623,https://psicode.org,https://github.com/psi4/psi4/pull/1455,1,['error'],['errors']
Availability,"## Description; Currently, COSX in Psi4 uses a two-grid scheme to complete the SCF - the SCF is first converged on a smaller grid, and then a single iteration is performed on a larger grid, a scheme proposed by Neese. This scheme works quite well for energies; but since the SCF isn't converged on the larger grid, it may not be as ideal if wavefunction properties (e.g., gradients) are desired. This PR fixes that by adding a new keyword, `COSX_MAXITER_FINAL`, an integer that determines the maximum number of SCF iterations to run on the final COSX grid. By default, this keyword is set to 1, mimicking the current behavior of the code. A more detailed description of behavior can be broken down as follows:. - If `COSX_MAXITER_FINAL` < 0; the SCF will attempt to fully converge on the final COSX grid (within the constraints provided by `MAXITER`, of course).; - If `COSX_MAXITER_FINAL` == 0; the SCF will not run on the final grid at all, effectively turning the COSX algorithm into a single-grid implementation.; - If `COSX_MAXITER_FINAL` > 0; the SCF will run on the final grid for a maximum number of iterations specified by the keyword. ; - If the SCF converges on the final grid before the iteration count specified by `COSX_MAXITER_FINAL`, the SCF will exit upon convergence.; - If the iteration count specified by `COSX_MAXITER_FINAL` is reached before the SCF is converged on the final grid, the SCF will exit, treated as a success.; - If the `MAXITER` SCF iteration limit is hit before the `COSX_MAXITER_FINAL` limit is reached, the calculation will fail. Also of note, this PR changes CompositeJK so that early_screening is disabled for LinK-based composite methods. Practically, this means that LinK-based methods do not run the extra post-early-screening SCF iteration that is present in COSX-based methods. ## User API & Changelog headlines; - [X] Adds a new keyword, `COSX_MAXITER_FINAL`, for controlling the maximum number of SCF iterations to run on the final COSX grid. ## Dev not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2981:693,down,down,693,https://psicode.org,https://github.com/psi4/psi4/pull/2981,1,['down'],['down']
Availability,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1873:1059,Error,Error,1059,https://psicode.org,https://github.com/psi4/psi4/pull/1873,1,['Error'],['Error']
Availability,## Description; DFT-D plus the use of a guess basis set produced an error because of a typo in setting the dispersion energy: set_variables -> set_variable. . ## Status; - [X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/769:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/pull/769,1,['error'],['error']
Availability,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:1052,fault,fault,1052,https://psicode.org,https://github.com/psi4/psi4/pull/914,1,['fault'],['fault']
Availability,"## Description; Deprecates ways of calling derivatives that are, as best as I can tell, artifacts of legacy code that were never removed. If anybody downstream of us needs these, we're giving them a chance to prevent us. Otherwise, less code, less problems. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2423:149,down,downstream,149,https://psicode.org,https://github.com/psi4/psi4/pull/2423,1,['down'],['downstream']
Availability,"## Description; Described in great detail [here](https://github.com/psi4/psi4/issues/1736). ## Todos; I see this PR occurring in six major stages.; - [x] Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:918,avail,available,918,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['avail'],['available']
Availability,## Description; Docs cleanup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] allows building docs w/o psi-sphinx-theme (though you lose psivar indexing); - [x] makes sure all the tests (incl. psiapi/json) get copied to samples; - [x] fixes up misc. options-referencing errors. ## Checklist; - [x] built with alabaster sphinx theme. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1044:337,error,errors,337,https://psicode.org,https://github.com/psi4/psi4/pull/1044,1,['error'],['errors']
Availability,"## Description; Does exactly what it says. I tested for correctness not only by comparison to basis sets that are on EMSL, but also by reproducing the G2 energy of SO2 reported by Brown and Barber (DOI: 10.1021/j100020a034) within 2E-5 hartrees. The G2 method requires this basis set. I get the same error margin when I try to reproduce their CO2 energies, so I attribute this to them not having converged their geometry tightly. Many thanks to @loriab for guidance with Psi's basis set parser. ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1531:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1531,1,['error'],['error']
Availability,## Description; Drop string expansion of variables which breaks down when they are empty strings.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/652:64,down,down,64,https://psicode.org,https://github.com/psi4/psi4/pull/652,1,['down'],['down']
Availability,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2445:82,error,error,82,https://psicode.org,https://github.com/psi4/psi4/pull/2445,2,['error'],['error']
Availability,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734:977,Toler,Tolerate,977,https://psicode.org,https://github.com/psi4/psi4/pull/734,1,['Toler'],['Tolerate']
Availability,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962:653,error,errors,653,https://psicode.org,https://github.com/psi4/psi4/issues/962,2,['error'],"['error', 'errors']"
Availability,"## Description; During the switch over to the super build the `ENABLE_{ASAN,TSAN,UBSAN}` flags stopped working. This PR fixes them. To use these sanitizers you must compile a copy of Python with the corresponding flags added. If you do not then you'll receive runtime errors. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845:268,error,errors,268,https://psicode.org,https://github.com/psi4/psi4/pull/845,1,['error'],['errors']
Availability,"## Description; Ensures that the `Ct_` array is built when using initial guesses with ROHF Wavefunctions. Thereby fixing `GUESS READ` for ROHF Wavefunctions. As a note this still wont quite work for CUHF as we do not have a full orthogonal basis available. However, it works much better than for ROHF and generally stays in the same minima. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/570:246,avail,available,246,https://psicode.org,https://github.com/psi4/psi4/pull/570,1,['avail'],['available']
Availability,"## Description; Errors in PSIO should probably be handled by calling `psio_error(...)`, instead of printing the error messages from the function where the error happens. This PR renovates this function to something more C++-style, and adds a new string argument that defaults to the empty string. This allows the callers of the function to prepend their own error messages to the text that eventually ends up in the error box, such as OS supplied error messages when a read/write/lseek system call fails. This should make it easier to clean up `wt_toclen` etc. (see #2700). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `psio_error(...)` can now take a string argument that will be printed first; - [x] Unnecessary includes are removed; - [x] Fixed size char array and C-style string manipulation is gone. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2711:16,Error,Errors,16,https://psicode.org,https://github.com/psi4/psi4/pull/2711,6,"['Error', 'error']","['Errors', 'error']"
Availability,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2088:92,ping,ping,92,https://psicode.org,https://github.com/psi4/psi4/pull/2088,3,"['avail', 'ping']","['available', 'ping']"
Availability,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/pull/1862,2,['error'],['error']
Availability,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/957:287,down,down,287,https://psicode.org,https://github.com/psi4/psi4/pull/957,2,"['down', 'robust']","['down', 'robust']"
Availability,"## Description; First we had to constrain einsums to the openblas variant on linux to get the env to solve b/c the most recent libblas wasn't available for MKL 2023. Then that got fixed on c-f and we could use the mkl variant. But that as a constraint, of course, won't work on Mac Silicon, which doesn't have MKL. It'd be cleanest if the solver handled it, so I'm giving the no-constraint a try. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3163:142,avail,available,142,https://psicode.org,https://github.com/psi4/psi4/pull/3163,1,['avail'],['available']
Availability,"## Description; First, this PR cleans up some manual memory management in `libscf_solver`, including a memory leak of an `nao`-by-`nso` matrix created once per call to the SCF code. During the course of fixing that, I uncovered a correctness error in `libmints`: the `dgemv` function was using rows rather than cols for an argument. The original choice was correct in Fortran-style indexing but not C-style indexing and disagreed with every other `C_DGEMV` call in Psi. It didn't cause any issues because `Vector::dgemv` is almost never used in Psi. The one other time I found it used was for a Hermitian matrix, which of course won't have problems. ## Questions; - [x] Jet, please double-check my claim of a bug in `libmints`. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2347:242,error,error,242,https://psicode.org,https://github.com/psi4/psi4/pull/2347,1,['error'],['error']
Availability,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2331:44,error,error,44,https://psicode.org,https://github.com/psi4/psi4/pull/2331,1,['error'],['error']
Availability,## Description; Fix a little error in conditional statement in driver_nbody.py,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/924:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/pull/924,1,['error'],['error']
Availability,"## Description; Fix a minor logic error in DLPNO-MP2 code, where Mulliken charges are used for determining local density fitting domains, also cleans up variable names (removes underscores from variables that are not instance variables). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2707:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/pull/2707,1,['error'],['error']
Availability,## Description; Fix an error message which I [invalidated](https://github.com/psi4/psi4/pull/1949) last year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2358:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/2358,1,['error'],['error']
Availability,## Description; Fix memory bug in libtrans for large cases. ## Todos; - [X] bucketSize was overflowing int storage causing psio write error. ## Status; - [X] Ready to merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2027:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/pull/2027,1,['error'],['error']
Availability,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:366,redundant,redundant,366,https://psicode.org,https://github.com/psi4/psi4/pull/2259,1,['redundant'],['redundant']
Availability,## Description; Fixed a few lgtm errors. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1568:33,error,errors,33,https://psicode.org,https://github.com/psi4/psi4/pull/1568,1,['error'],['errors']
Availability,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1336:328,redundant,redundant,328,https://psicode.org,https://github.com/psi4/psi4/pull/1336,1,['redundant'],['redundant']
Availability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:788,avail,available,788,https://psicode.org,https://github.com/psi4/psi4/pull/1314,3,['avail'],['available']
Availability,"## Description; Fixes #1353 by raising an error that DF was never implemented with the QC algorithm in `dcft`. Per discussions with @ssh2, I also added a message that the QC algorithm employs the hessian for DC-06, as the others haven't been implemented yet. ## Checklist; - [x] `ctest -R dcft` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1518:42,error,error,42,https://psicode.org,https://github.com/psi4/psi4/pull/1518,1,['error'],['error']
Availability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:403,error,error,403,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['error'],['error']
Availability,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/701:33,failure,failure,33,https://psicode.org,https://github.com/psi4/psi4/pull/701,1,['failure'],['failure']
Availability,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112:608,error,error,608,https://psicode.org,https://github.com/psi4/psi4/pull/2112,2,['error'],['error']
Availability,## Description; Fixes an error in `detci` printing. This one is so obscure that it can easily come in for 1.5. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2245:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/2245,1,['error'],['error']
Availability,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1377:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/1377,1,['error'],['error']
Availability,"## Description; Fixes an issues where VV10 occasionally seg faults due to improperly sized temporary arrays. Also, spot the error of why the Naive grid blocker has been seg faulting for years in [#9575ede](https://github.com/dgasmith/psi4/commit/9575ede082c5287be1c176a13299829317b3b719). Highly recommend we stop using raw pointers and C functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/832:60,fault,faults,60,https://psicode.org,https://github.com/psi4/psi4/pull/832,3,"['error', 'fault']","['error', 'faulting', 'faults']"
Availability,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['error'],['error']
Availability,"## Description; Fixes issue #1093, where the use of density fitting caused a crash when computing frequencies. As for why these fixes are necessary:. Previously, the clone function would have separate memory addresses for elements of the two lists, which would be fixed by update_geometry assuming that coordinate reinterpretation was allowed. This is precisely what the driver does not allow when getting a findif hessian. The basis set setting code assumed that the memory addresses were the same. This assumption failing led to the originally reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for dis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108:555,error,error,555,https://psicode.org,https://github.com/psi4/psi4/pull/1108,2,['error'],['error']
Availability,"## Description; Fixes many compiler warnings by no longer passing redundant arguments to Matrix constructors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes 83 compiler warnings, 81 of which were coming from `dct`. ## Checklist; - [x] quick tests and dct tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3175:66,redundant,redundant,66,https://psicode.org,https://github.com/psi4/psi4/pull/3175,1,['redundant'],['redundant']
Availability,"## Description; Fixes the ""decimal point of death for Zn"" BS radius that leads to likely wrong DFT results (and bad SCF convergence).; Relevant for MBIS PR ( #1961) test systems, where the error became apparent. ZnO molecule with PBE0/def2-SVP and 434 spherical grid points:; | radial points | old N(electrons) | old E | new N(electrons) | new E |; |---------|--------------------|---------------------|--------------------|---------------------|; | 75 | 42.38542254742733 | -1867.6992099879865 | 37.999997369772665 | -1853.8406995133948 |; | 99 | 35.70883041483774 | -1843.0139920380993 | 37.99999898528541 | -1853.8406965374315 |; | 200 | 37.996233783694734 | -1853.8819221398608 | 37.99999900043764 | -1853.8406976562953 |. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes Zn radius (2551 -> 2.551) !!. ## Checklist; - [x] manual Zn tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2000:189,error,error,189,https://psicode.org,https://github.com/psi4/psi4/pull/2000,1,['error'],['error']
Availability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:783,down,downstream,783,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['down'],['downstream']
Availability,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2545:174,down,downstream,174,https://psicode.org,https://github.com/psi4/psi4/pull/2545,1,['down'],['downstream']
Availability,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1452:121,avail,available,121,https://psicode.org,https://github.com/psi4/psi4/pull/1452,1,['avail'],['available']
Availability,"## Description; Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [] Both DF and CD options are available (only for RHF ref for now).; - [] The required changes were made in proc.py and proc_table.py. ; - [] Relevant doc files are revised.; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/824:319,avail,available,319,https://psicode.org,https://github.com/psi4/psi4/pull/824,1,['avail'],['available']
Availability,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:656,error,error,656,https://psicode.org,https://github.com/psi4/psi4/pull/593,2,"['down', 'error']","['down', 'error']"
Availability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:317,error,error,317,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['error'],['error']
Availability,## Description; Humor the Sphinx by specifying _exactly_ what error is raised by a function that was promoted to a Wavefunction method in the A/EDIIS PR. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2436:62,error,error,62,https://psicode.org,https://github.com/psi4/psi4/pull/2436,1,['error'],['error']
Availability,## Description; I forgot the `threading/CMakeLists.txt`. Now included. Error found by @schiebermc. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/620:71,Error,Error,71,https://psicode.org,https://github.com/psi4/psi4/pull/620,1,['Error'],['Error']
Availability,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/826:71,avail,avail,71,https://psicode.org,https://github.com/psi4/psi4/pull/826,1,['avail'],['avail']
Availability,"## Description; I need to give `psimrcc` a wavefunction for the upcoming `libtrans` refactor. Step one is to take the existing `compute_energy`-like functions and make them conform to the normal `Wavefunction::compute_energy` API. No arguments. Returns a double. A follow-up PR will be needed to actually give `psimrcc` a wavefunction. I'm hopeful this will not be another long series like the `occ` one. I don't care whether this is in 1.4 or not. Pinging @fevangelista and @andysim, the two people who have some chance of remembering how this code works. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Conform `psimrcc`'s myriad `Wavefunction::compute_energy`-like functions to the `Wavefunction` interface, as prep for the next PR.; - [x] Removed unpublished ""perturbative CBS"" capabilities from `psimrcc` and adds appropriate warnings. ## Questions; - [x] @fevangelista, can you explain what the ""perturbative CBS"" is? Those should be added to the current energy somehow, but I can't tell which of the three flavors to add, or even what this is. ## Checklist; - [x] `ctest -R psimrcc` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:449,Ping,Pinging,449,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['Ping'],['Pinging']
Availability,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:26,down,down,26,https://psicode.org,https://github.com/psi4/psi4/pull/685,5,"['down', 'fault']","['down', 'fault', 'fault-during-']"
Availability,## Description; I was getting an error of off one grid point count on local box for 1.e-16 tolerance. So relaxed the count. ## Questions; - [ ] Is this a good way to handle this?. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1668:33,error,error,33,https://psicode.org,https://github.com/psi4/psi4/pull/1668,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1134:879,failure,failure,879,https://psicode.org,https://github.com/psi4/psi4/pull/1134,1,['failure'],['failure']
Availability,"## Description; Implements the linear exchange matrix build (LinK) algorithm for Direct SCF.; Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). NOTE: The J build already has density screening implemented (see #2155). ![wc_linK_errors_updated_06_04_21](https://user-images.githubusercontent.com/60559795/120875167-7c793e00-c578-11eb-83d2-b2b2e197d788.jpg); ![wc_linK_timings_hornet_06_04_21](https://user-images.githubusercontent.com/60559795/120875169-7d11d480-c578-11eb-8315-642e4ee0510c.jpg). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Builds the K matrix of large molecular systems in O(N) time; - [x] Errors are minimal when compared to approximations like Density Fitting. ## Questions; - [ ] This code is currently in DirectJK, should I make a new JK module for fast methods like LinK, since a fast K algorithm would be really useful for density fitting?. ## Checklist; - [x] Tested accuracy and speed of method on a 3D system of growing water clusters. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187:760,Error,Errors,760,https://psicode.org,https://github.com/psi4/psi4/pull/2187,1,['Error'],['Errors']
Availability,"## Description; In C++, the destructor for a templated class should not include the template parameter in the destructor's name. This is not a problem for C++17 and earlier standards, but with C++20 compilers it raises an error. This PR fixes one instance of this problem in psi4. ## User API & Changelog headlines; - [x] API should now be compatible with both C++17 and C++20. ## Dev notes & details; - [x] Change one line. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3061:222,error,error,222,https://psicode.org,https://github.com/psi4/psi4/pull/3061,1,['error'],['error']
Availability,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2361:129,down,down,129,https://psicode.org,https://github.com/psi4/psi4/pull/2361,1,['down'],['down']
Availability,"## Description; In preparation for allowing `detci` to support symmetry broken displacements for frequencies, this PR streamlines the active space setting logic used by `detci`. Nothing should have changed except function signatures and code clarity. Obligatory ping to @fevangelista, since this touches on active space specifications. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Streamline `ras_set`; - [x] Adds `Dimension::copy` @jturney ; - [x] Fewer raw pointers, more `Dimension` . ## Checklist; - [x] `ctest -L ci` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3208:262,ping,ping,262,https://psicode.org,https://github.com/psi4/psi4/pull/3208,1,['ping'],['ping']
Availability,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:750,error,errors,750,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['error'],['errors']
Availability,"## Description; Issue #846 has been fixed, so a contraction set where all primitives have a coefficient of 0 will remain untouched. While I was poking around the file, I decided to clean up some other things. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] 0 coefficient primitives will no longer be normalized. This should prove useful to planned ECP changes.; - [X] Miscellaneous code cleanup. ## Questions; - [ ] ECP team, I assume you're happy with this? ; - [ ] In the zero coefficient case, do we want to explicitly check this is an ECP by checking radial powers? If so, what would we do otherwise, raise some error?; - [ ] I also assume that I'm within the Psi4 coding style here?. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/849:683,error,error,683,https://psicode.org,https://github.com/psi4/psi4/pull/849,1,['error'],['error']
Availability,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082:30,error,errors,30,https://psicode.org,https://github.com/psi4/psi4/pull/2082,1,['error'],['errors']
Availability,"## Description; Last summer, I discovered that the energy _increased_ along the IRC for my complex formation coordinate. I eventually tracked this down to a bug where the molecule did not displace the initial geometry correctly, which this PR fixes. Since that time, those of us at UGA have found this fix essential to follow modes <200i. I discuss this in more detail [here](https://github.com/psi-rking/optking/issues/19). I updated a test to reflect the fact that the IRC can go a bit further when it displaces correctly. I didn't bother updating the reference files, as I expect it'll be invalidated soon anyways. The whole reason I'm submitting this PR now is to eliminate this bug from consideration when I send @psi-rking the _latest_ IRC bug I found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix IRCs. ## Checklist; - [x] All IRC tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1663:147,down,down,147,https://psicode.org,https://github.com/psi4/psi4/pull/1663,1,['down'],['down']
Availability,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:28,mainten,maintenance,28,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['mainten'],['maintenance']
Availability,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:237,error,error,237,https://psicode.org,https://github.com/psi4/psi4/pull/993,2,"['error', 'fault']","['error', 'faulty']"
Availability,"## Description; MKL 2020.1 often selects a different basis fn set than 2019.4 or 2020.0, so answers often differ by 1.14e-8. This relaxes tolerance to 2.e-8. Alternative is to add `mkl!=2020.1` to `conda create` line, but this would be disruptive to conda packaging. * **Note** A definitive test of above statement that returns to 1.e-8 but bans 2020.1 is running at https://dev.azure.com/psi4/psi4/_build/results?buildId=1969&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a , but I'll get a head start and submit this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896:138,toler,tolerance,138,https://psicode.org,https://github.com/psi4/psi4/pull/1896,1,['toler'],['tolerance']
Availability,"## Description; Make `back_transform` consistent across the various signatures and better behaved for more ""exotic"" cases. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Improved `Matrix::back_transform`'s ability to handle edge cases. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `back_transform` signatures now trickle down to a single function; - [x] All `back_transform` signatures resize the target matrix if necessary (only one did this previously, DGEMM error otherwise); - [x] All `back_transform` signatures handle symmetry correctly (at least some would error previously). ## Checklist; - [x] `back_transform` passing tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2745:645,down,down,645,https://psicode.org,https://github.com/psi4/psi4/pull/2745,3,"['down', 'error']","['down', 'error']"
Availability,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:332,failure,failure,332,https://psicode.org,https://github.com/psi4/psi4/pull/638,1,['failure'],['failure']
Availability,"## Description; Make `transform` consistent across the various signatures and better behaved for more ""exotic"" cases. Sister PR to #2745. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Improved `Matrix::transform`'s ability to handle edge cases. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `transform` signatures now trickle down to a single function; - [x] All `transform` signatures resize the target matrix if necessary (only one did this previously, DGEMM error otherwise); - [x] All `transform` signatures handle symmetry correctly (at least some would error previously). ## Checklist; - [x] `transform` passing tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2748:650,down,down,650,https://psicode.org,https://github.com/psi4/psi4/pull/2748,3,"['down', 'error']","['down', 'error']"
Availability,"## Description; Make psi safe for py38. The basic conda pkg does build, but I haven't done full stack yet. For practical reasons, no use turning on a CI lane for 38 until conda pkg available. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] req'd mods for python 3.8; - [x] avoid ""DeprecationWarning: In future, it will be an error for 'np.bool_' scalars to be interpreted as an index"" in `Molecule.from_dict`; - [x] more killing off travis. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776:181,avail,available,181,https://psicode.org,https://github.com/psi4/psi4/pull/1776,2,"['avail', 'error']","['available', 'error']"
Availability,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1326:31,reliab,reliably,31,https://psicode.org,https://github.com/psi4/psi4/pull/1326,4,"['error', 'reliab']","['error', 'errors', 'reliably']"
Availability,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/955:953,error,error,953,https://psicode.org,https://github.com/psi4/psi4/pull/955,1,['error'],['error']
Availability,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:230,error,errors,230,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['error'],['errors']
Availability,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2425:97,redundant,redundant,97,https://psicode.org,https://github.com/psi4/psi4/pull/2425,1,['redundant'],['redundant']
Availability,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394:605,down,downstream,605,https://psicode.org,https://github.com/psi4/psi4/pull/1394,4,"['avail', 'down', 'toler']","['available', 'downstream', 'tolerance']"
Availability,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/995:862,error,error,862,https://psicode.org,https://github.com/psi4/psi4/pull/995,2,['error'],"['error', 'errors']"
Availability,"## Description; Modify the download location away from the (temporarily?) defunct tddft.org, back to gitlab. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1688:27,down,download,27,https://psicode.org,https://github.com/psi4/psi4/pull/1688,1,['down'],['download']
Availability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:50,error,error,50,https://psicode.org,https://github.com/psi4/psi4/pull/1122,3,"['down', 'error']","['down', 'error', 'errors']"
Availability,"## Description; New feature to compute the explicitly correlated MP2 energy. Only computes the specific case of MP2-F12/3C(FIX) which has been shown to be the most robust of all versions of MP2-F12. Includes conventional and density-fitted versions of the code and also allows choice between a in-core and disk implementation. Relies on the tensor library Einsums. Equations come from:; [Werner, Adler, and Manby](https://pubs.aip.org/aip/jcp/article/126/16/164102/905556/General-orbital-invariant-MP2-F12-theory); [Kong, Bischoff, and Valeev](https://pubs.acs.org/doi/10.1021/cr200204r); [Manby](https://pubs.aip.org/aip/jcp/article/119/9/4607/817158/Density-fitting-in-second-order-linear-r12-Moller). ### Example Input; ```; molecule {; 0 1; C 0.000000000 0.000000000 0.000000000; H 1.185992116 1.185992116 1.185992116; H 1.185992116 -1.185992116 -1.185992116; H -1.185992116 1.185992116 -1.185992116; H -1.185992116 -1.185992116 1.185992116. units bohr; symmetry c1; }. set {; BASIS cc-pvtz-f12; FREEZE_CORE true; E_CONVERGENCE 1.e-10; }. set mp2-f12 {; CABS_BASIS cc-pvtz-f12-optri; DF_BASIS_F12 aug-cc-pvtz-ri; F12_TYPE df; CABS_SINGLES true; }. energy('mp2-f12'); ```. ### Timings; Timings and maxvmem are an average over 50 runs.; Orbital basis set (OBS) is cc-pVTZ-F12 (VTZ-F12) and CABS is cc-pVTZ-F12-OPTRI. For DF, auxiliary basis set (AUX) is aug-cc-pVTZ-RI. Timings and Max RAM Usage for MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | Total (s) | Total (min) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 176.48 | 2.94 | 27.554; NH3 | 107 | 198 | 96.64 | 1.61 | 15.060; H2O | 89 | 157 | 53.02 | 0.88 | 7.828; HF | 71 | 116 | 17.96 | 0.30 | 4.081. Timings and Max RAM Usage for DF-MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | NAUX | Total (s) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 290 | 6.24 | 3.219; NH3 | 107 | 198 | 244 | 4.91 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:164,robust,robust,164,https://psicode.org,https://github.com/psi4/psi4/pull/3110,1,['robust'],['robust']
Availability,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1506:497,error,error,497,https://psicode.org,https://github.com/psi4/psi4/pull/1506,1,['error'],['error']
Availability,## Description; Non-urgent stuff I found this week. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Expand my collection of Windows problems and solutions after Tuesday's fun with #2624 ; - [x] Update supported Py versions in README; - [x] Fix a test that wasn't declaring its dependencies; - [x] Make non-optional the use of `git --atomic` for versions/tags/CI conda; - [x] Expand logic on whether to build conda-pkg or not to include the 1.N.x maintenance branches. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2629:505,mainten,maintenance,505,https://psicode.org,https://github.com/psi4/psi4/pull/2629,1,['mainten'],['maintenance']
Availability,## Description; NumPy linked DSYEV was not robust enough under certain conditions. Switches to Psi4 power inversion to fix this issue. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/610:43,robust,robust,43,https://psicode.org,https://github.com/psi4/psi4/pull/610,1,['robust'],['robust']
Availability,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:629,down,downside,629,https://psicode.org,https://github.com/psi4/psi4/pull/751,2,"['down', 'robust']","['downside', 'robust']"
Availability,"## Description; OpenMP detection is very finely balanced to compensate for LAPACK demands, `libgomp` self aggrandizement, and psi4's need to sanely and transparently impose the psi4-compile-omp status on any derived plugins. Unfortunately, #1348 disturbed some of that for the particular case of plugins with fewer active languages than their parent psi4. A plugin (dfmp2) wasn't inheriting openmp from psi4 and thus was giving unknown openmp pragma warnings upon compile. This wasn't getting caught on linux because I was only checking that iomp5/gomp/omp weren't mixing, not that at least one was present. By happenstance, this did trigger an error on Mac in the course of building `psi4-dev`. This seems to patch things up on Linux. Will use this branch to try out Mac again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:645,error,error,645,https://psicode.org,https://github.com/psi4/psi4/pull/1520,1,['error'],['error']
Availability,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:811,redundant,redundant,811,https://psicode.org,https://github.com/psi4/psi4/pull/2481,1,['redundant'],['redundant']
Availability,"## Description; PR #2022 labeled _ground-state_ properties with the method name... even when the method name included ""EOM-"". So even though `ccsd` and `eom-ccsd` compute the same ground state dipole, they weren't given the same name. This PR fixes that. More fixes to come, but the next PR will be heftier. Obligatory @bgpeyton ping. ## Checklist; - [x] `eom` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533:329,ping,ping,329,https://psicode.org,https://github.com/psi4/psi4/pull/2533,1,['ping'],['ping']
Availability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:1063,error,error,1063,https://psicode.org,https://github.com/psi4/psi4/pull/2637,1,['error'],['error']
Availability,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949:495,ping,pings,495,https://psicode.org,https://github.com/psi4/psi4/pull/1949,1,['ping'],['pings']
Availability,"## Description; PSIO toclen errors are extremely cryptic, making them even more difficult to debug,; I have recently ran into another input that produces the error in #2261 so decided to try taking a look.; I have not debugged the actual issue, but made some changes to the function raising the error to hopefully make the error messages more informative. The `read`/`write`/`lseek` syscalls deposit an OS-defined error code in `errno`, which can be decoded to an OS-provided, human-readable (possibly non-English) error message. This should at least tell the person seeing it vaguely what is wrong, ie. is the disk full, does the file not exist, etc. The toclen functions have been renovated in general, `const` added where appropriate, common code factored out, etc. Error conditions now properly use `psio_error(...)` and pass the OS-provided message to it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Error messages from `PSIO::rd_toclen` and `PSIO::wt_toclen` are now more informative; - [x] The new function `decode_errno(int)` is now available for use after system calls to decode `errno`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700:28,error,errors,28,https://psicode.org,https://github.com/psi4/psi4/pull/2700,9,"['Error', 'avail', 'error']","['Error', 'available', 'error', 'errors']"
Availability,"## Description; Partial fix to #2634. thanks, @TiborGY, for that report. The mrcc interface beyond single-points was another casualty of distributed driver. The Allen test needs a further fix that involves moving a dictionary. In the meantime, this heals all the ctests. Update: I've got all parts fixed locally, and one of these changes is no longer necessary. I'll leave this open until the other PR available, in case someone needs a quick fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2638:402,avail,available,402,https://psicode.org,https://github.com/psi4/psi4/pull/2638,1,['avail'],['available']
Availability,"## Description; Per discussion on the conference call, this PR gives some error messages for cases where using a serialized wavefunction would give a segfault. 1851 is still an issue, but one that shouldn't hold up 1.4 or eat my time to straighten out `dfocc`. I'm modernizing enough modules in Psi as it is... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace some segfaults from #1851 with actual error messages. ## Checklist; - [x] Tested that all four error modules used to segfault and now give an error message. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:74,error,error,74,https://psicode.org,https://github.com/psi4/psi4/pull/1858,4,['error'],['error']
Availability,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:481,avail,available,481,https://psicode.org,https://github.com/psi4/psi4/pull/3226,1,['avail'],['available']
Availability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fix ""<built-in method X of PyCapsule object at Y> returned NULL without setting an error"" (http://forum.psicode.org/t/frequency-calculations-result-in-built-in-method-x-of-pycapsule-object-at-y-returned-null-without-setting-an-error/1436) by following jcerezo's advice.; - [x] change `compare_vibinfo` to always be `atol`, not `digits`.; - [x] check DF Hessian calcs to PK refs at looser tols; - [x] test atom Hessian (analytic only; fix findif in ddd). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1845:251,error,error,251,https://psicode.org,https://github.com/psi4/psi4/pull/1845,2,['error'],['error']
Availability,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395:109,toler,tolerance,109,https://psicode.org,https://github.com/psi4/psi4/pull/2395,1,['toler'],['tolerance']
Availability,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460:145,robust,robust,145,https://psicode.org,https://github.com/psi4/psi4/pull/1460,4,"['error', 'robust']","['error', 'robust']"
Availability,"## Description; Rebase through of qcel v0.4.0 (not yet released). ## Todos; - [x] moved `tests/pytest` to `tests/pytests` so latter can be a module w/o confusing ""import pytest""; - [x] migrated to use which, which_import, parse_version from qcl; - [x] removed alignment code that migrated to QCElemental. - [x] derived testing fns from qcel, rather than scattering and duplicating in psi4/qcdb; * there's two conflicting APIs going on:; * Psi4: `compare_something(expected, computed, significant_digits, label, verbose=1)`; * QCEl: `compare_something(expected, computed, label=None, atol=1.e-6, quiet=False)`; * and there's two sets of fn names:; * Psi4: `compare_integers`, `compare_strings`, `compare_arrays`, `compare_values`, `compare_matrices`; * QCEl: `compare` (for exact comparison scalars or np-castable arrays), `compare_values` (for floating point comparison scalaurs or np-castable arrays), `compare_recursive` (for iterables containing any of the previous); * Basically, now in psi4 or qcdb, you can use the qcel fns and the psi4 fns and the psi4 API or the qcel API. And their failure response is localized in a fn that can be switched out. ; * A few highly specialized comp fns (like `compare_molrecs` have been deprecated or psi4 API deprecated, but there should be enough UpgradeHelper guides to raise a problem and suggest solution.; * EDIT: whether using psi4 or qcel APIs, `label` is no longer required -- it'll default to the calling fn name (or `<module>` in a script). - [x] added link to binder image and fix tutorial cmd that didn't work in binder. ## Questions; - [ ] Someone should look at the old/new `compare_matrices` fns to check that the values comparison is still catching any detailed uses of the `^` operator. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1644:1091,failure,failure,1091,https://psicode.org,https://github.com/psi4/psi4/pull/1644,1,['failure'],['failure']
Availability,## Description; Recent changes to the cmake build systems introduced an issue when compiling psi4 plugins and Forte on a Mac. Compilation fails at the linking stage with the error; ```; ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB); ```. This PR reverts two changes. ## Questions; - [ ] Is there a better solution that still uses `pybind11_add_module(core MODULE NO_EXTRAS core.cc)`?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640:174,error,error,174,https://psicode.org,https://github.com/psi4/psi4/pull/1640,1,['error'],['error']
Availability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:35,error,errors,35,https://psicode.org,https://github.com/psi4/psi4/pull/2030,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,## Description; Remaining LGTM errors/warnings for libsapt_solver addressed (mostly size_t related).Print statements in optking also fixed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1651:31,error,errors,31,https://psicode.org,https://github.com/psi4/psi4/pull/1651,1,['error'],['errors']
Availability,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:839,toler,tolerant,839,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['toler'],['tolerant']
Availability,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390:236,avail,available,236,https://psicode.org,https://github.com/psi4/psi4/pull/1390,1,['avail'],['available']
Availability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:984,error,error,984,https://psicode.org,https://github.com/psi4/psi4/pull/623,2,"['avail', 'error']","['available', 'error']"
Availability,## Description; Resolved typo in code which would have given syntax error if copied verbatim. ## Todos; - [x] Fix typo. ## Status; - [x] Ready to go. Corrected print statement in NumPy Views section that was missing a `)'.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/495:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/pull/495,1,['error'],['error']
Availability,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130:40,Error,Error,40,https://psicode.org,https://github.com/psi4/psi4/pull/1130,2,"['Error', 'error']","['Error', 'error']"
Availability,## Description; See below. ## User API & Changelog headlines; - [x] `Matrix::set_block` can be used on matrices that are not totally symmetric. ## Dev notes & details; - [x] `Matrix::set_block` can be used on matrices that are not totally symmetric.; - [x] `Matrix::set_block` now raises an explicit error when the symmetry of the target and block matrices disagree. ## Checklist; - [x] New test working. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2734:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/2734,1,['error'],['error']
Availability,"## Description; Sept/Oct 2017 someone fixed up 5-zeta Dunning orbital basis sets for Li/Be. Those were only parts of the relevant publications, so I scraped up the rest. Below is summary. Only reason these didn't get posted 18 mo ago was that I was confused about the deleted Na/Mg from cc-pcv5z-dk.gbs, and I didn't have time to follow up and detangle why. All the same, I have confidence, if not conviction, about these bases, so they may as well be available for use. This file is the guide to what has changed (blue is new, yellow is changed, red is deleted); [basissets_libenamg_PR.pdf](https://github.com/psi4/psi4/files/2903308/basissets_libenamg_PR.pdf). ```; [43] From Peterson alkali paper website: http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Added Be to cc-pV6Z (basis-cc-pv6z); Added Na & Mg to cc-pV(X+d)Z X=DTQ5 (basis-cc-pv_xpd_z); Replaced Li, Be, Na, Mg exponents for tight functions for cc-pCVXZ X=DTQ; from ones from EMSL to the ones from Peterson website (corevalence-cc-pcvxz, as separable); Replaced Na & Mg to cc-pCVXZ X=5; (non-separable so deleted from corevalence-cc-pcv5z and added to partial-basis-cc-pcv5z); Replaced Li, Be, Na, Mg exponents for diffuse of aug-cc-pvXZ X=DTQ; from ones from EMSL (lacking citation) to the ones from Peterson website (diffuse-aug-cc-pvxz); Added Na & Mg to diffuse of aug-cc-pVXZ X=5 (Li & Be added in [42]) (diffuse-aug-cc-pv5z); Added Na & Mg to aug-cc-pV(X+d)Z X=DTQ5 (diffuse-aug-cc-pv_xpd_z). Propagated diffuse fns to hold-diffuse-[jun|may|apr|mar]-cc-pv[dtq5]z.gbs and _[dtq5]pd_z; ```. ### Basis sets present now in last commit. If you value your sanity, do not try to comprehend the diff of the last commit. #### Just to show how crazily these basis sets compose, the diff of the basis set progenitors (even including copying to the months) is `+2015 -633` but `36,655 −13,419` for the actual final basis sets. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests clean. ## Status; - [ ] Ready f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1559:452,avail,available,452,https://psicode.org,https://github.com/psi4/psi4/pull/1559,1,['avail'],['available']
Availability,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398:1129,error,error,1129,https://psicode.org,https://github.com/psi4/psi4/pull/1398,1,['error'],['error']
Availability,"## Description; Sets up Ruff to replace yapf & isort. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Should not affect end-users,; - [x] Will affect open PRs once `main` is re-formatted and ruff is enforced on the CI level, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] aligns code formatting convention to [Ruff](https://docs.astral.sh/ruff/formatter/), replacing yapf & isort,. ## Questions; - [ ] Should pre-commit run in the CI? It could run to let know PR might not be following the style, but the failure might not be blocking. It's something like a warning for a maintainer/PR issuer. ## Checklist; - [x] No new tests are required for that,; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3234:825,failure,failure,825,https://psicode.org,https://github.com/psi4/psi4/pull/3234,1,['failure'],['failure']
Availability,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:184,error,errors,184,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['error'],['errors']
Availability,"## Description; Small bug fix that prevents adding local options to a module. This error shows only for `string` and `int` type options, but I potentially also in `array` and `python` data types. This PR addresses all four cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix option reading bug. ## Questions; - In the following part of the code one can potentially encounter the same problem. This can be fixed by adding `module` to the list of parameters passed to this function. Any reason why there is no `std::string module` in the parameter list? Adding it would also make this function consistent with other `set_local_x` functions.; https://github.com/psi4/psi4/blob/396b4c51d6902301baeed41386c49ccb9099a30b/psi4/src/core.cc#L705-L707. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1412:83,error,error,83,https://psicode.org,https://github.com/psi4/psi4/pull/1412,1,['error'],['error']
Availability,"## Description; Small improvements to the TDDFT solver. This one should be merged after #1885. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Document; - [x] Handle computation of triplets properly; - [x] Implement transition moments and spectroscopic observables:; - [x] Electric dipole moment, length representation; - [x] Electric dipole moment, velocity representation; - [x] Magnetic dipole moment; - [x] Oscillator strengths, length representation; - [x] Oscillator strengths, velocity representation; - [x] Rotatory strengths, length representation; - [x] Rotatory strengths, velocity representation; - [x] Robustness fix: `states_per_irrep` sometimes fails with an obscure out-of-bounds error.; - [x] Usability fix: verbosity should be slightly higher, to let the user know stuff is being done (currently, only printout is at convergence); - [x] Implement functions to plot electronic absorption (EAS) and eletronic circular dichroism (ECD) spectra; - [x] Remove warning on potential inaccuracy of results.; - [X] Check convergence only against the norm of the residual (`r_tol`). The `e_tol` parameter has been completely removed. ## Follow-up; - The solver stalls when very tight convergence (`r_tol = 1e-8`) is requested. I am not quite sure if this is a fundamental issue with the algorithm. That convergence threshold is insanely tight, I am not even sure if this should be considered a real problem... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814:665,Robust,Robustness,665,https://psicode.org,https://github.com/psi4/psi4/pull/1814,2,"['Robust', 'error']","['Robustness', 'error']"
Availability,## Description; Small tweak to SAPT(DFT) to help eliminate small ~30cal/mol wiggles in the PES. Tracked this down to issues in allowing the derivatives of very small densities leading to quite spurious results. This was changed to the same tolerance as the V derivative builds. Does change the result by ~1cal/mol for a test case- this is lost in the noise of DFT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/840:109,down,down,109,https://psicode.org,https://github.com/psi4/psi4/pull/840,2,"['down', 'toler']","['down', 'tolerance']"
Availability,"## Description; So in the course of working on DDD/pydantic, a fix I needed triggered the dreaded ""circular import"" error, which anyone who's tried to alter the driver's fragile import structure has probably seen, too. Being sick of this, I located https://medium.com/brexeng/avoiding-circular-imports-in-python-7c35ec8145ed with advice to do `from .driver import energy`, not `from psi4.driver.driver import energy`. So that's the first pass on the driver imports. This fixes my circular import problem and makes it easier to find others. Since all the imports are churned anyways, I set up `isort` (that is, you can run isort on the repo, not that it's enforced on the repo). This is a utility (https://pycqa.github.io/isort/index.html) that sorts all the imports at the top of the file into stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:116,error,error,116,https://psicode.org,https://github.com/psi4/psi4/pull/3033,1,['error'],['error']
Availability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:344,down,down,344,https://psicode.org,https://github.com/psi4/psi4/pull/625,2,"['avail', 'down']","['available', 'down']"
Availability,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935:445,error,error,445,https://psicode.org,https://github.com/psi4/psi4/pull/1935,1,['error'],['error']
Availability,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2561:407,ping,ping,407,https://psicode.org,https://github.com/psi4/psi4/pull/2561,1,['ping'],['ping']
Availability,"## Description; Suggestion for #1711; Moves the `nmo` table to a place after the orbital guess, so that it actual contains all the information. Adds a reduced `nmo` table for SAD together with a note that no occupations are available. _Formatting details up to debate_. Perhaps especially the placement of the `Pre-Iterations` line. Edit: See updated examples in thread below. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713:224,avail,available,224,https://psicode.org,https://github.com/psi4/psi4/pull/1713,1,['avail'],['available']
Availability,## Description; Switch to adcc main channel and update the fallback version downloaded from github. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1827:76,down,downloaded,76,https://psicode.org,https://github.com/psi4/psi4/pull/1827,1,['down'],['downloaded']
Availability,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1070:115,failure,failure,115,https://psicode.org,https://github.com/psi4/psi4/pull/1070,2,['failure'],['failure']
Availability,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/895:219,Ping,Pinging,219,https://psicode.org,https://github.com/psi4/psi4/pull/895,1,['Ping'],['Pinging']
Availability,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1963:38,avail,available,38,https://psicode.org,https://github.com/psi4/psi4/pull/1963,3,"['avail', 'ping']","['available', 'ping']"
Availability,"## Description; The `JK_deriv2` function exists to compute the overlap-derivative-times-TEI part of the right side of the CPHF equation. It's a J-term and a K-like term. with overlap derivative integrals instead of a density.[1] The previous algorithm to do this first computed the alpha spin part in one function call, and then the beta spin part in another function call. This approach was redundant. The first function call had all the intermediates _necessary_ to compute the beta part, but didn't use them. As a result, the function re-computed JK. This PR refactors `JK_deriv2` so it computes both spin cases in a single function call. [1] = There's also a Vx term, but its implementation was both unused and buggy. Now it's just unused. Trying to use it in the _old_ way would be even more redundant. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The UHF hessian algorithm has been slightly adjusted, which should lead to slightly faster computations. Please report any errors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `JK_deriv2` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `JK_deriv2` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf-hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:392,redundant,redundant,392,https://psicode.org,https://github.com/psi4/psi4/pull/2994,3,"['error', 'redundant']","['errors', 'redundant']"
Availability,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493:157,error,error,157,https://psicode.org,https://github.com/psi4/psi4/pull/1493,1,['error'],['error']
Availability,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475:30,checkpoint,checkpoint,30,https://psicode.org,https://github.com/psi4/psi4/pull/1475,1,['checkpoint'],['checkpoint']
Availability,"## Description; The goal of this PR is to expand test coverage of the DFJCOSK and DFJLinK JK subclasses within Psi4 by including their testing within the scf5 test. The scf5 test in Psi4 tests a variety of combinations of SCF_TYPE and SCF reference for singlet and triplet O2. As it were, the COSX and LinK SCF_TYPES were missing from the list of methods analyzed within this test. This PR simply adds COSX and LinK to the list of methods tested in scf5, expanding testing of these two methods beyond what was previously present. NOTE TO REVIEWERS: This PR is a general JK maintenance/cleanup/improvement PR and is independent of the developments occurring regarding CompositeJK and its direct implementation into Psi4. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Adds COSX and LINK to the list of SCF_TYPEs tested in the scf5 test option. ## Questions; - [ ] Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768:573,mainten,maintenance,573,https://psicode.org,https://github.com/psi4/psi4/pull/2768,1,['mainten'],['maintenance']
Availability,## Description; The main script (`run_psi4.py` in the source tree or `psi4` when installed) was importing qcelemental before it had a chance to modify the Python search path. If you didn't already have a copy of qcelemental in your Python search path would cause an error. Encountered this on our cluster while trying to run the tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1925:266,error,error,266,https://psicode.org,https://github.com/psi4/psi4/pull/1925,1,['error'],['error']
Availability,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1988:750,ping,ping,750,https://psicode.org,https://github.com/psi4/psi4/pull/1988,2,['ping'],['ping']
Availability,"## Description; The old instability following procedure Trotterized a matrix exponential. Now we compute it (more or less) exactly. Obligatory @susilehtola ping. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Change the algorithm we use to approximate a matrix exponential when instability following from a Trotter approximation to that of the build-in `expm` function.; - [x] Added documentation for the rationale for the orbital rotation step. ## Questions; - [ ] **Warning!** None of our tests cover instability following. I've run a check that the old and new codes mostly agree for the particular instability I'm trying to track. Is this an issue?. ## Status; - [x] Ready for review; - [ ] Ready for merge after discussion",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2758:156,ping,ping,156,https://psicode.org,https://github.com/psi4/psi4/pull/2758,1,['ping'],['ping']
Availability,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2100:66,error,errors,66,https://psicode.org,https://github.com/psi4/psi4/pull/2100,1,['error'],['errors']
Availability,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:299,robust,robust,299,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['robust'],['robust']
Availability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:508,error,error,508,https://psicode.org,https://github.com/psi4/psi4/pull/1383,2,['error'],"['error', 'errors']"
Availability,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:127,error,error,127,https://psicode.org,https://github.com/psi4/psi4/pull/602,1,['error'],['error']
Availability,"## Description; There was a report that the slack link gave ""an error"". fwiw, when I regenerated the link, it was different. Link replaced and new paper partially added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1869:64,error,error,64,https://psicode.org,https://github.com/psi4/psi4/pull/1869,1,['error'],['error']
Availability,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/811:1260,Error,Error,1260,https://psicode.org,https://github.com/psi4/psi4/pull/811,2,['Error'],['Error']
Availability,## Description; There's a memory leak _somewhere_ in the SCF code. This PR replaces some of the manual memory management with `new`/`delete` in `libmints` to cut down the number of places where it could be coming from. (I'd like to start from a zero-leak baseline for DIIS profiling.). I'll probably need to use `valgrind` to track this down further... ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2346:162,down,down,162,https://psicode.org,https://github.com/psi4/psi4/pull/2346,2,['down'],['down']
Availability,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:380,failure,failure,380,https://psicode.org,https://github.com/psi4/psi4/pull/1829,3,['failure'],"['failure', 'failures']"
Availability,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:412,ping,ping,412,https://psicode.org,https://github.com/psi4/psi4/pull/2451,1,['ping'],['ping']
Availability,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:569,Error,Error,569,https://psicode.org,https://github.com/psi4/psi4/pull/1855,2,"['Error', 'error']","['Error', 'error']"
Availability,"## Description; This PR aims to expose useful functions from _detci_ and _libpsio_ to the python side:; - libpsio needs **read()**, **write()**, **read_entry()**, and **write_entry()** functions available in python to be actually useful to the user who intends to use Psi4 intermediate files, containers and buffers.; - There are publicly accessible _get_opdm()_ and _get_tpdm()_ functions in _detci_ but for the active-space only. This PR tries to bring the **opdm_add_inactive()** function to the public scope as well and expose it to the python side.; - Members of the **psio_address** structure are also exposed that can be adopted as arguments in _libsio_'s _read()/write()_ function calls. ## Todos. * Having a spatial symmetry-imposed bock-structured sparse TPDM as a result of get_tpdm() instead of the dense format only is desirable.; * Adding _opdm_add_inactive()_'s counterpart in order to complete the full structure of TPDM [such as **tpdm_add_inactive()**] will be extremely useful. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:195,avail,available,195,https://psicode.org,https://github.com/psi4/psi4/pull/1821,1,['avail'],['available']
Availability,"## Description; This PR aims to implement computation of multipole potential integrals up to a desired; order. Such integrals are used for EFP and PE (#1401), where for EFP, the integrals; are already implemented, but are always computed through third order (octupoles). For PE, often parameters are only available up to quadrupoles, so I'd like to avoid computation; of higher order integrals all the time. ~~The code is copied from `efpmultipolepotential`, so probably one should decide on whether; to keep `efpmultipolepotential` or to use the new code to avoid code duplication.~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] enable octupole moments as well; - [x] change ordering of cartesian components to Cartesian; - [x] use `multipolepotential` for EFP (`ao_efp_multipole_potential` calls `ao_multipole_potential` and does the remapping of components in `mintshelper.cc`); - [x] remove `efpmultipolepotential.{hh,cc}`; - [x] tests of the actual integrals using finite differences. ## Questions; - [x] ~~Switch to `multipolepotentials` for EFP in another PR?~~. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657:305,avail,available,305,https://psicode.org,https://github.com/psi4/psi4/pull/1657,1,['avail'],['available']
Availability,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/896:615,avail,available,615,https://psicode.org,https://github.com/psi4/psi4/pull/896,1,['avail'],['available']
Availability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:393,error,error,393,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['error'],['error']
Availability,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1923:78,error,errors,78,https://psicode.org,https://github.com/psi4/psi4/pull/1923,4,['error'],"['error', 'errors']"
Availability,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2302:1280,ping,ping,1280,https://psicode.org,https://github.com/psi4/psi4/pull/2302,1,['ping'],['ping']
Availability,"## Description; This PR eliminates 600+ duplicate lines of code from `dfocc`, as well as two functions. This cleans up a near-future PR of mine. Obligatory @loriab ping. ## Todos; - [x] `dfocc` repeats itself a little bit less. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2067:164,ping,ping,164,https://psicode.org,https://github.com/psi4/psi4/pull/2067,1,['ping'],['ping']
Availability,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683:333,down,down,333,https://psicode.org,https://github.com/psi4/psi4/pull/683,1,['down'],['down']
Availability,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2517:364,avail,available,364,https://psicode.org,https://github.com/psi4/psi4/pull/2517,1,['avail'],['available']
Availability,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2375:227,avail,available,227,https://psicode.org,https://github.com/psi4/psi4/pull/2375,2,['avail'],['available']
Availability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:60,error,errors,60,https://psicode.org,https://github.com/psi4/psi4/pull/2232,2,['error'],"['errored', 'errors']"
Availability,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2435:439,error,error,439,https://psicode.org,https://github.com/psi4/psi4/pull/2435,1,['error'],['error']
Availability,## Description; This PR fixes a bug where a coupled cluster computation that diverges triggers a further bug in the timer system. A fatal error is now triggered instead. Closes #1864. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2150:138,error,error,138,https://psicode.org,https://github.com/psi4/psi4/pull/2150,1,['error'],['error']
Availability,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2447:390,ping,ping,390,https://psicode.org,https://github.com/psi4/psi4/pull/2447,2,['ping'],['ping']
Availability,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/841:97,failure,failure,97,https://psicode.org,https://github.com/psi4/psi4/pull/841,1,['failure'],['failure']
Availability,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2456:352,ping,pings,352,https://psicode.org,https://github.com/psi4/psi4/pull/2456,1,['ping'],['pings']
Availability,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1887:47,fault,fault,47,https://psicode.org,https://github.com/psi4/psi4/pull/1887,1,['fault'],['fault']
Availability,"## Description; This PR fixes three bugs in Psi's NBOWriter.; 1. The AO->MO matrix was previously put in the transpose way to how NBO expected it.; 2. MO coefficients for non-totally symmetric irrep were transformed from SOs to AOs incorrectly, leading to #1566. Closes #1566.; 3. The map from angular momentum functions in Psi to labels for NBO was wrong. For instance, p0 was previously px instead of pz. Due to point 3, **all previous NBO computations from Psi-generated NBO files are suspect.** I very nearly published wrong results due to that, so I advocate backporting this to 1.3. **NEW**; Linear dependencies and angular momentum up to _h_ is now handled properly. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix critical errors in NBOWriter. ## Tests of Correctness; I compared the overlap, density, and Fock matrices for nearly-cis diazene from file47's from Psi and QChem. After accounting for the fact that they order the AOs differently, they match almost perfectly. The density matrix was off in the last decimal place for a few entries. The NAO energies, NAO occupations, and perturbative analysis matched as well. I repeated for my instigating case, cis-sulfurous acid. QChem matches Psi with symmetry matches Psi without symmetry for NAO energies, NAO occupations, and perturbative analysis. Finally, to verify the molecular orbitals, I had both QChem and Psi report the MOs in the basis of NBOs. Apart from ordering the NBOs differently, the two match to within the last decimal place. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602:785,error,errors,785,https://psicode.org,https://github.com/psi4/psi4/pull/1602,1,['error'],['errors']
Availability,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2066:77,error,errors,77,https://psicode.org,https://github.com/psi4/psi4/pull/2066,2,"['down', 'error']","['downstream', 'errors']"
Availability,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:350,avail,available,350,https://psicode.org,https://github.com/psi4/psi4/pull/1760,2,['avail'],['available']
Availability,"## Description; This PR is an effort to move towards canonical C++11 usage: ; 1. it removes use of `new` when creating `std::shared_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:746,down,down,746,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['down'],['down']
Availability,"## Description; This PR is designed to enable testing of a wide variety of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:143,avail,available,143,https://psicode.org,https://github.com/psi4/psi4/pull/2978,2,['avail'],['available']
Availability,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:664,avail,available,664,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['avail'],['available']
Availability,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2475:689,ping,pings,689,https://psicode.org,https://github.com/psi4/psi4/pull/2475,1,['ping'],['pings']
Availability,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:179,avail,available,179,https://psicode.org,https://github.com/psi4/psi4/pull/2547,2,"['avail', 'failure']","['available', 'failures']"
Availability,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:219,avail,available,219,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['avail'],['available']
Availability,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2440:498,ping,ping,498,https://psicode.org,https://github.com/psi4/psi4/pull/2440,1,['ping'],['ping']
Availability,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:186,ping,pings,186,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['ping'],['pings']
Availability,"## Description; This PR provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/pull/2906,7,['error'],['error']
Availability,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:124,avail,available,124,https://psicode.org,https://github.com/psi4/psi4/pull/1344,2,"['avail', 'error']","['available', 'errors']"
Availability,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:1151,Ping,Ping,1151,https://psicode.org,https://github.com/psi4/psi4/pull/2473,1,['Ping'],['Ping']
Availability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:85,redundant,redundant,85,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['redundant'],['redundant']
Availability,"## Description; This PR replaces all def2 jfit sets with the universal jfit sets from the Basis Set Exchange, and the jkfit sets with the universal jkfit set. At present, there are some inconsistencies between the jfit sets; ```; b=( def2*jfit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-sv_p_-jfit.gbs vs def2-qzvp-jfit.gbs: 101; def2-sv_p_-jfit.gbs vs def2-qzvpp-jfit.gbs: 54; def2-svp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-svp-jfit.gbs vs def2-qzvpp-jfit.gbs: 0; def2-svp-jfit.gbs vs def2-sv_p_-jfit.gbs: 54; def2-tzvp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-tzvp-jfit.gbs vs def2-qzvpp-jfit.gbs: 0; def2-tzvp-jfit.gbs vs def2-sv_p_-jfit.gbs: 54; def2-tzvp-jfit.gbs vs def2-svp-jfit.gbs: 0; def2-tzvpp-jfit.gbs vs def2-qzvp-jfit.gbs: 47; def2-tzvpp-jfit.gbs vs def2-qzvpp-jfit.gbs: 0; def2-tzvpp-jfit.gbs vs def2-sv_p_-jfit.gbs: 54; def2-tzvpp-jfit.gbs vs def2-svp-jfit.gbs: 0; def2-tzvpp-jfit.gbs vs def2-tzvp-jfit.gbs: 0; ```; and the jkfit sets as well; ```; b=( def2*jkfit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:311,echo,echo,311,https://psicode.org,https://github.com/psi4/psi4/pull/1804,1,['echo'],['echo']
Availability,"## Description; This PR strives to implement an interface of psi4 to the [ddX library](https://github.com/ACoM-Computational-Mathematics/ddX), which implements solvation models (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart neede",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:622,down,down,622,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['down'],['down']
Availability,"## Description; This PR was motivated by a comment by @andyj10224 in PR https://github.com/psi4/psi4/pull/3150, pointing out that implementing method-specific setters/getters in `SplitJK` could more elegantly and sensibly be performed via downcasting. While the comment in that PR addressed knobs specific to `snLinK`, it is also applicable to other methods within the CompositeJK framework. This PR fixes that, replacing all instances of method-specific setters/getters in the base `SplitJK` class with downcasting to call the needed function at the derived-class level. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Renames `COSK::set_COSX_grid` and `COSK::get_COSX_grid` functions to `COSK::set_grid` and `COSK::get_grid`, respectively.; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions, localizing their presence to the `COSK` class.; - [X] Replaces utilizations of the above with usage of downcasting in the `CompositeJK::set_COSX_grid` and `CompositeJK::get_COSX_grid` functions. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3183:239,down,downcasting,239,https://psicode.org,https://github.com/psi4/psi4/pull/3183,3,['down'],['downcasting']
Availability,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2144:206,down,down,206,https://psicode.org,https://github.com/psi4/psi4/pull/2144,3,"['down', 'error']","['down', 'errors']"
Availability,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311:1311,error,errors,1311,https://psicode.org,https://github.com/psi4/psi4/pull/2311,2,"['Error', 'error']","['Errors', 'errors']"
Availability,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2530:603,toler,tolerant,603,https://psicode.org,https://github.com/psi4/psi4/pull/2530,3,"['error', 'toler']","['error', 'erroring', 'tolerant']"
Availability,"## Description; This is a first step towards DFT Hessians. The code seems to be correct based on initial tests, but this needs a lot more stress testing. The emphasis here is correctness over efficiency, and I just want to get all of the nasty CPKS infrastructure in place before worrying about making it fast and memory efficient. The symmetric stretch of water is off by 2.8cm-1 (less than 1%), but there are a number of possible causes: 1) noise in the finite difference reference, which is unlikely given my experiments with 5 point FDs and different step sizes 2) the lack of grid weight derivatives, also unlikely because the error doesn't decrease when I use a huge grid 3) the filtering of the functional derivatives in areas of small density. I think number 3) is most likely, but it's also possible that there's something wrong in the code still. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds analytic DFT hessians for LSDA functionals (RKS wavefunctions only). ## Questions; - [x] How should we handle the procrouting? We could explicitly list all LSDA type functionals, but that would not be good for custom functionals. I'm sure there's a better way that I'm just not familiar with. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run]; ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664:632,error,error,632,https://psicode.org,https://github.com/psi4/psi4/pull/1664,1,['error'],['error']
Availability,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2449:60,failure,failures,60,https://psicode.org,https://github.com/psi4/psi4/pull/2449,1,['failure'],['failures']
Availability,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:397,error,error,397,https://psicode.org,https://github.com/psi4/psi4/pull/1480,2,['error'],['error']
Availability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size `ref_wfn.frzcpi()` is not `nirreps_ref` in `psimrcc-fd-freq2` test:; https://github.com/psi4/psi4/blob/5c0e495bdd3042795d8e39fe250ec153c4d236e9/psi4/src/psi4/libmoinfo/moinfo.cc#L257; It makes `convert_int_array_to_vector` to access invalid memory. In the past, I replaced `nirreps` with `nirreps_ref` to solve another problem #1427 and this one became visible after fixing #1480. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix the memory error in `psi::MOInfo::read_mo_spaces`. ## Questions; - [x] I'm lacking enough understanding of the code to fix, so just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521:577,error,error,577,https://psicode.org,https://github.com/psi4/psi4/pull/1521,2,['error'],['error']
Availability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488:413,error,error,413,https://psicode.org,https://github.com/psi4/psi4/pull/1488,2,['error'],['error']
Availability,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476:531,error,error,531,https://psicode.org,https://github.com/psi4/psi4/pull/1476,1,['error'],['error']
Availability,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273:539,avail,available,539,https://psicode.org,https://github.com/psi4/psi4/pull/2273,3,['avail'],['available']
Availability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:249,failure,failures,249,https://psicode.org,https://github.com/psi4/psi4/pull/3081,3,['failure'],"['failure', 'failures']"
Availability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238:175,error,error,175,https://psicode.org,https://github.com/psi4/psi4/pull/1238,2,['error'],['error']
Availability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442:181,error,error,181,https://psicode.org,https://github.com/psi4/psi4/pull/1442,1,['error'],['error']
Availability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220:184,error,error,184,https://psicode.org,https://github.com/psi4/psi4/pull/1220,1,['error'],['error']
Availability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237:184,error,error,184,https://psicode.org,https://github.com/psi4/psi4/pull/1237,1,['error'],['error']
Availability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1440:206,failure,failures,206,https://psicode.org,https://github.com/psi4/psi4/pull/1440,3,"['error', 'failure', 'fault']","['error', 'failures', 'faulting']"
Availability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264:212,error,errors,212,https://psicode.org,https://github.com/psi4/psi4/pull/1264,1,['error'],['errors']
Availability,"## Description; This is part of *Psi4* porting to Windows (#933). From MKL 2019.0, the packaging of Windows packages has changed. Import libraries (.lib) have been moved to separate `mkl-devel` package (https://github.com/ContinuumIO/anaconda-issues/issues/10154), which follows the changes in Intel channel (https://anaconda.org/intel). The same happened to `intel-openmp`, but `intel-openmp-devel` package has not been created. *Clang* needs an import library `libiomp5md.lib` to link with `libiomp5md.dll`. Interestingly, MKL installer from *Intel* (https://software.intel.com/en-us/mkl/choose-download/windows) has that library. This obsoletes #1408 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the missing Intel OpenMP import file; - [x] Update to MKL 2019.1; - [x] Improve CMake message. ## Questions; - [x] This is hackish, but makes things to work. Ideally, we need `intel-openmp-devel`, so hopefully *Intel* decides to make it. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1571:597,down,download,597,https://psicode.org,https://github.com/psi4/psi4/pull/1571,1,['down'],['download']
Availability,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1427:220,error,error,220,https://psicode.org,https://github.com/psi4/psi4/pull/1427,1,['error'],['error']
Availability,"## Description; This is part of *Psi4* porting to Windows (#933). `EaT_RHF.cc` and `ET_RHF.cc` contain incompatible declarations of `psi::cctriples::thread_data`. During compilation, templates (i.e. `std::vector<psi::cctriples::thread_data>`) are generated once and reused, while memory access instructions to `psi::cctriples::thread_data` are generate at each translation unit. That results into an overflow:; ```; ==29447==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800007a380 at pc 0x7fa994502627 bp 0x7fffc3cb6560 sp 0x7fffc3cb6558; WRITE of size 4 at 0x60800007a380 thread T0; #0 0x7fa994502626 in psi::cctriples::EaT_RHF() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206; #1 0x7fa993ee2cec in psi::cctriples::cctriples(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/triples.cc:154; #2 0x7fa993dfd890 in psi::cclambda::CCLambdaWavefunction::compute_energy() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cclambda/cclambda.cc:324; #3 0x7fa9937cfa84 in py_psi_cclambda(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:382; #4 0x7fa9938b8a3c in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1874; #5 0x7fa9938a441c in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:425,ERROR,ERROR,425,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['ERROR'],['ERROR']
Availability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix hard-code paths; - [x] Guard against importing not available packages . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091:234,avail,available,234,https://psicode.org,https://github.com/psi4/psi4/pull/1091,1,['avail'],['available']
Availability,"## Description; This is the make-dfocc-work-reliably and bring-dfocc-testing-to-normal-level step of mega-dfocc-remp. All the former by @behnle. ~**REVIEW COMMIT 3 ONLY** I'll get the first two merged and out of the way shortly.~. This is PR No. 3 in the mega-dfocc-remp series. ## Todos; - [x] no new methods; - [x] coupled DIIS ported from OCC! fixes #2215. now dfocc can be converged tightly enough that 5-pt findif gradient matches analytic gradient; - [x] potential integer overflows fixed which may lead to wrong memory demand estimates for large molecules; - [x] stdsuite testing added for plain RHF DF/CD a-ccsd(t) energies and DF/CD energies and DF gradients for OO methods omp2, omp2.5, omp3, & olccd. attendantly, qcvar handling in the managers brought up to modern standards, with most saving on wfn, and freebie methods saved and checked; - [x] update run_dfocc in driver to dict/director syntax (works b/c `cc_lambda_` now set in dfocc.cc) and uniform P::e/wfn handling of qcvars; - [x] tightened convergence so that default conditions match values to 1e-6; - [x] tightened base rms_mograd_convergence from 4 to 6.5 for oo methods (matches occ, which had to be tightened from 6 to 6.5); - [x] tightened r_convergence to same on the basis of e_conv for non-oo methods; - [x] added an extra check that difference in orbitals at convergence not too big a step. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669:44,reliab,reliably,44,https://psicode.org,https://github.com/psi4/psi4/pull/2669,1,['reliab'],['reliably']
Availability,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:63,error,errors,63,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['error'],['errors']
Availability,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747:222,checkpoint,checkpointing,222,https://psicode.org,https://github.com/psi4/psi4/pull/747,2,"['checkpoint', 'fault']","['checkpointing', 'fault']"
Availability,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:832,avail,available,832,https://psicode.org,https://github.com/psi4/psi4/pull/965,1,['avail'],['available']
Availability,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1402:689,down,downstream,689,https://psicode.org,https://github.com/psi4/psi4/pull/1402,1,['down'],['downstream']
Availability,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:964,avail,available,964,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['avail'],['available']
Availability,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884:631,avail,available,631,https://psicode.org,https://github.com/psi4/psi4/pull/1884,2,['avail'],['available']
Availability,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This is atop lapack and ambit PR's, so you'll want to look only at 410be6f; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` --> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [ ] This runs into trouble in libpsipcm, where the signatures don't match up. What's missing is the dreaded HostWriter at the end. I daresay that's a change upstream that @robertodr understands. ```; /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(133): error: argument of type ""void (*)(const char *, int)"" is incompatible with parameter of type ""HostWriter""; symmetry_info, &host_input, &host_writer);; ^. /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(136): error #165: too few arguments in function call; symmetry_info, &host_input);; ^; ```. * **User-Facing for Release Notes**. ## Questions; - [ ] @robertodr, you'll take a look at this? I can certainly answer any ""why"" questions. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594:947,error,error,947,https://psicode.org,https://github.com/psi4/psi4/pull/594,2,['error'],['error']
Availability,"## Description; Two bug fixes. First is wrong projected energy change in P-RFO transition state optimization.; Second, is an i/o error that occured because the file1 was not always deleted when the ""dynamic level"" changed. Default behavior should be unaffected.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; Should resolve issue #789 ; ; ## Questions; None; ## Status; Should be ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798:129,error,error,129,https://psicode.org,https://github.com/psi4/psi4/pull/798,1,['error'],['error']
Availability,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/489:465,Failure,Failure,465,https://psicode.org,https://github.com/psi4/psi4/pull/489,1,['Failure'],['Failure']
Availability,"## Description; Use a centralized function to determine the scratch name associated with scratch files, to make sure they're being read and written consistently. Fixes `cookbook-rohf-orbrot`, which was writing the modified orbitals to a location other than what the SCF code expects, resulting in them being ignored. ## Checklist; - [x] Cleaned up `cookbook-rohf-orbrot` input file; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); The following (unrelated) failures persist, but are fixed in #1494 .; ```; The following tests FAILED:; 223 - mints8 (Failed); 291 - opt-irc-1 (Failed); ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1495:548,failure,failures,548,https://psicode.org,https://github.com/psi4/psi4/pull/1495,1,['failure'],['failures']
Availability,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1317:58,redundant,redundant,58,https://psicode.org,https://github.com/psi4/psi4/pull/1317,3,['redundant'],"['redundant', 'redundant-void-arg']"
Availability,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1962:541,ping,ping,541,https://psicode.org,https://github.com/psi4/psi4/pull/1962,2,['ping'],['ping']
Availability,"## Description; When running a simple RHF calculation and computing cube files, I was experiencing seg faults or orbitals that look like:; ![image](https://user-images.githubusercontent.com/9198329/38570936-0b5815e4-3cbd-11e8-93ce-f7cf4a57b46e.png); after updating my Psi for the first time in a while. After a bit of digging, I think I've tracked the problem--no more seg faults and my orbitals look like:; ![image](https://user-images.githubusercontent.com/9198329/38570995-3f7b156a-3cbd-11e8-8dbd-b8a2423033be.png). Not sure why the cubeprop test (which was passing) didn't catch this. ## Todos; - [X] Fix copy call in points.cc. ## Questions; - [x] Should I add another cubeprop test?. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/951:103,fault,faults,103,https://psicode.org,https://github.com/psi4/psi4/pull/951,2,['fault'],['faults']
Availability,"## Description; While working on a _different_ PR for the dcft code, I stumbled across a bug that I had accidentally introduced in #1310. DCFT previously allowed you to use the amplitudes from a previous computation as your guess for the next one by setting `dcft_guess dcft`. Key to this mechanism was the fact that the LibDPD files persisted after the computation... which is precisely what I changed in #1310 to fix #1309, where intermediate files would interfere with the amplitude guess. The primary purpose of this PR is to both keep the guess feature working and keep issue #1309 fixed. This is accomplished by checking if `dcft_guess` is `dcft` at the time of `compute_energy` and choosing whether or not to nuke previous files. So past intermediate files will interfere only when you want them to. There are also some related changes: adding a helpful error message to replace the PSIO error that appears when the past files don't exist, adding a test case to prevent a repeat of this little mess, removing some dead code, and per discussions with @jturney, moving some tensors from the libtrans libdpd to the dcft libdpd if they were more than integrals. The other `dcft` PR will be coming as soon as this one is merged in: another bugfix, and (finally!) the transition from `dcft` to `dct`. Obligatory @ssh2 notification. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restore `dcft_guess dcft` functionality; - [x] Move tensors (DCT's amplitudes and ""generalized"" Fock matrix) from the `libtrans` dpd buffer to the `dcft` buffer; - [x] Add a test for `dcft_guess`; - [x] Eliminate one obnoxious PSIO_ERROR. ## Checklist; - [x] Tests added for any newly working features; - [x] All 14 `dcft` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1717:861,error,error,861,https://psicode.org,https://github.com/psi4/psi4/pull/1717,2,['error'],['error']
Availability,"## Description; While working on a fix to #1777, I encountered bug #1808, which blocks my fix. This PR fixes #1808 and condenses some of the relevant code. The bug is discussed in detail at https://github.com/psi4/psi4/issues/1808. Briefly, OMP2.5 theory has two sets of amplitudes, T2(1) and T2(2). Compared to the very similar OMP3 theory, it halves certain terms. OCC implemented this by halving the T2(2) amplitudes instead of halving intermediates that use them. While the intermediates will be correct, this has the side-effect of changing the T2(2) amplitudes from their current values, so they do not converge. This PR changes the implementation so the necessary terms are halved, but not the T2(2) amplitudes. Now they converge properly and agree better with my Psi4Numpy implementation of OMP2.5. Disclaimer that @bozkaya has yet to comment. While I'm confident I've implemented the theory correctly, he is more familiar with OMP2.5 than I am. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug causing small (~fifth decimal place) errors in OMP2.5 gradients with conventional integrals.; - [x] Condenses OMP2 and OMP2.5/OMP3's functions for the first order T2 amplitudes. . ## Checklist; - [x] Quick tests pass. `^omp2p5` passes. `^omp3` passes with the exceptions noted in #1793. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1809:1101,error,errors,1101,https://psicode.org,https://github.com/psi4/psi4/pull/1809,1,['error'],['errors']
Availability,"## Description; With Intel compiler, current master throws:. ```; /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc(1015): internal error: null pointer; }; ^. compilation aborted for /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc (code 4); ```. ~The `size_t` is in the header, so I don't know why it should need it again, but it seems to want it. All the below fail, too. I'm glad to try any more rational variations.~; ```; # out-of-date # all throw with above; # out-of-date num_computed_shells_ = 0L;; # out-of-date num_computed_shells_ = 0;; # out-of-date num_computed_shells_ = std::size_t{ 0 };; ```. FYI @andyj10224 who has also hit this and @davpoolechem since it came about in #2547. ~EDIT: nevermind, this only lets it build but kills off the threading and doesn't count ints. Ignore PR for now.~. EDIT: ok, this works, though I don't see why Intel should have complained about the original. Throw seen on 2021.4 and 2021.6, btw. ## Checklist; - Tests added for any new features; - [x] ~ran smoke~ ran full tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2625:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/pull/2625,1,['error'],['error']
Availability,"## Description; XC quadrature weights can become very small and thus their contributions are negligible. This PR introduces a cutoff for small weights. The grid points with small weights are not included in the final grid. Such a cutoff is a standard procedure in many programs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] expert option `DFT_WEIGHTS_TOLERANCE` keyword (current default `1e-14`).; - [x] small error overview added; - [x] together with pruning ca. 40% faster calculation for C60 compared to `v1.3` :-); - [x] simple test added. ## Questions; - [x] which default value? -> `1e-15` conservative or `1e-14` like in ORCA. ## Checklist; - [x] all `ctest -L dft` pass. ## Status; - [x] Ready for review; - [x] Ready for merge. ------; water dimer (RKS total energy): `PBE/aug-cc-pVTZ (99,520)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 350460 | ; | 1e-30 | 1.36e-12 | 349417 |; | 1e-25 | 1.65e-12 | 348670 |; | 1e-20 | 1.65e-12 | 346918 |; | 1e-18 | 1.68e-12 | 345747 |; | 1e-16 | 1.63e-11 | 340646 |; | 1e-15 | 2.74e-11 | 339647|; | 1e-14 | 5.73e-09 | 335089 |; | 1e-13 | 3.65e-08 | 331285 |; | 1e-12 | 3.18e-07 | 326462 |. c2 sym. C60 isomer (RKS total energy): `PBE/aug-cc-pVDZ (75,302)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 1359000 | ; | 1e-30 -| 3.17e-10| 1229846|; | 1e-25 | -5.34e-10| 1209622|; | 1e-20 | 5.94e-10 |1183674|; | 1e-18 | 5.41e-10 |1171102|; | 1e-16 | -6.25e-10 |1156776|; | 1e-15 | 2.48e-09| 1131228|; | 1e-14 | 3.54e-09| 1123018|; | 1e-13 | 1.25e-07 |1110668 |; | 1e-12 |1.07e-06 |1085824 |. -----. *further timings*; C60 fullerene (C2h) :PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; comparison to `v1.3.1`; * pruning `ROBUST`=1.33 // `1361880/1953000` grid points // dE=2E-11; * pruning `TREUTLER=1.36`// `1064520/1953000` grid points // dE=-4E-05; * pruning `ROBUST` + `screening(1e-14)` = 1.39; `1070388/195",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581:463,error,error,463,https://psicode.org,https://github.com/psi4/psi4/pull/1581,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"## Description; [My](https://github.com/psi4/psi4/pull/2824) [previous](https://github.com/psi4/psi4/pull/2832) [PRs](https://github.com/psi4/psi4/pull/2834) fixed the bugs making UKS TDDFT and stability analysis incorrect, so let's enable them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Stability analysis is now supported for unrestricted GGAs.; - [x] TDDFT is now supported for unrestricted GGAs. . ## Dev notes & details; - [x] The prohibition against VV10 is not added to this PR, but its enforcement is. The old code would have given incorrect results. ## Checklist; - [x] Tests _mostly_ pass. `test_tdscf_excitations.py` has this PR covered. The one complication is that we're failing the TDA and RPA tests for CH2 with HCTH93. My investigations lead me to suspect the fault is bad reference data, probably involving pruned integration grids. @bgpeyton has confirmed pruning as the issue and volunteered to re-generate proper data. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849:907,fault,fault,907,https://psicode.org,https://github.com/psi4/psi4/pull/2849,1,['fault'],['fault']
Availability,"## Description; `LEOM_CCSD` is included in the list of EOM methods, but I can find no evidence that this method exists in Psi, other than as an option. This PR removes the option entirely. This brings the EOM methods to create variables for down to EOMCCSD, EOMCC2, and EOMCC3. Per Lori observation, the `LOCAL_GHOST` option is removed as unused. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2467:241,down,down,241,https://psicode.org,https://github.com/psi4/psi4/pull/2467,1,['down'],['down']
Availability,"## Description; `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. This PR seems way too easy. @brianz98, please let me know if there are issues. Obligatory @fevangelista and @dnascimento13 pings. ## User API & Changelog headlines. - [x] `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes `RelPotentialInt` to expose W0, Wx, Wy, and Wz integrals. ## Questions; - [x] Any objections to changing an existing integral type rather than creating a new one?; - [x] Any documentation edits needed?; - [x] Do any of the users need the derivative integrals?. ## Checklist; - [ ] Are any tests necessary?; - [x] `ctest -L x2c` passes, in addition to standard tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174:260,ping,pings,260,https://psicode.org,https://github.com/psi4/psi4/pull/3174,1,['ping'],['pings']
Availability,"## Description; `cc` now uses `Matrix` rather than `block_matrix` for the OPDM and Lagrangian. During the course of this transition, I discovered an indexing bug in the conversion of the UHF densities to Matrix. This dates [back to 2016](https://github.com/psi4/psi4/commit/d4bbb98291afe4b500476d0d46c87ded3821bed6). As-is seen from the test values that had to change, this can lead to dramatic errors in properties. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cc` now stores its Lagrangian and OPDM as `Matrix` objects rather than block_matrices rather than write them to disk; - [x] `cc` now uses the wfn based interface, rather than the disk interface, to gradients ; - [x] Adds a finite difference correctness test to UHF-CCSD one-electron properties; - [x] Much heavier use of slice technology . ## Questions; - [x] Lori, does the test look okay to you?; - [x] Should I do another check on the dipole that changed the most in our test? That change is _massive_. ## Checklist; - [x] `cc` tests pass; - [x] Edited test with incorrect reference values . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2818:395,error,errors,395,https://psicode.org,https://github.com/psi4/psi4/pull/2818,1,['error'],['errors']
Availability,"## Description; `sq_rsp(...)` is an ancient diagonalizer function from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:382,failure,failure,382,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['failure'],['failure']
Availability,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1098:892,error,error,892,https://psicode.org,https://github.com/psi4/psi4/pull/1098,1,['error'],['error']
Availability,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2063:37,error,errors,37,https://psicode.org,https://github.com/psi4/psi4/pull/2063,2,"['error', 'toler']","['errors', 'tolerances']"
Availability,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1494:274,error,error,274,https://psicode.org,https://github.com/psi4/psi4/pull/1494,1,['error'],['error']
Availability,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:950,error,error,950,https://psicode.org,https://github.com/psi4/psi4/pull/1484,2,['error'],['error']
Availability,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2005:114,reliab,reliable,114,https://psicode.org,https://github.com/psi4/psi4/pull/2005,1,['reliab'],['reliable']
Availability,## Description; misc. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] one more nix py35; - [x] try to get around below in https://lgtm.com/projects/g/psi4/psi4/logs/languages/lang:cpp. ```; [2019-03-04 21:34:07] [build] Scanning dependencies of target libxc_external; [2019-03-04 21:34:07] [build] [ 2%] Creating directories for 'libxc_external'; [2019-03-04 21:34:07] [build] [ 4%] Performing download step (git clone) for 'libxc_external'; [2019-03-04 21:34:07] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:10] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:10] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:10] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:11] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:12] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:12] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:13] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:13] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:13] [build] -- Had to git clone more than once:; [2019-03-04 21:34:13] [build] 3 times.; [2019-03-04 21:34:13] [build] CMake Error at /opt/src/_lgtm_build_dir/external/upstream/libxc/libxc_external-prefix/tmp/libxc_external-gitclone.cmake:66 (message):; [2019-03-04 21:34:13] [build] Failed to clone repository: 'https://gitlab.com/libxc/libxc.git'; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran quicktests from libxc tarball. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1567:444,down,download,444,https://psicode.org,https://github.com/psi4/psi4/pull/1567,2,"['Error', 'down']","['Error', 'download']"
Availability,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:101,error,errors,101,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['error'],['errors']
Availability,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:195,down,downstream,195,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['down'],['downstream']
Availability,## Description; provide immediate warning of upstream or downstream integration failures. ## Todos; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1555:57,down,downstream,57,https://psicode.org,https://github.com/psi4/psi4/pull/1555,2,"['down', 'failure']","['downstream', 'failures']"
Availability,"## Description; set_Ca treats Cb_so_ incorrectly in the same orbs case.; I did not trigger the bug actively, but it looks like a clear bug to me. The bug won't have triggered in any meaningful code, because every algorithm queries same orbs and therefore only uses Ca_so_ if(same_orbs). However it should be fixed regardless. Please review carefully. ## Checklist; - [ ] Tests added for any new features; ctest -L quick ran through without errors. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1128:440,error,errors,440,https://psicode.org,https://github.com/psi4/psi4/pull/1128,1,['error'],['errors']
Availability,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146:652,error,errors,652,https://psicode.org,https://github.com/psi4/psi4/pull/2146,1,['error'],['errors']
Availability,"## Description; ~Mostly a code demo, so I'll cancel the CI. upstream master isn't quite ready yet, but this works locally on linux.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Add Einsums as optional build dependency via the usual `-D ENABLE_Einsums=ON` arg.; - [x] Added a dummy module that uses Einsums both as a model and so we have something to check in tests w/o imposing on fnocc. Conda packages are available for Linux & Mac (Intel & Silicon); - [x] Tried some docs tweaks again. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3050:537,avail,available,537,https://psicode.org,https://github.com/psi4/psi4/pull/3050,1,['avail'],['available']
Availability,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126:253,ping,ping,253,https://psicode.org,https://github.com/psi4/psi4/pull/2126,1,['ping'],['ping']
Availability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix obvious bug in `UV::compute_X`; - [x] `UV::compute_Vx` is still not production-ready, sadly. While the function is correct _to within screening tolerance_, the screening procedure breaks the hermiticity of the exchange-correlation hessian. I've observed matrix elements <x_i | V'' | x_j> and <x_j | V'' | x_i> disagreements on the order of 1e-5. This leads to errors in converging Davidson algorithm tightly for TD-UKS. The problems are there for both LDA and GGA, but more severe for GGA because there are more terms to screen. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2832:604,error,errors,604,https://psicode.org,https://github.com/psi4/psi4/pull/2832,1,['error'],['errors']
Availability,"## Information:. I have two versions of boost installed on my system. ; - I installed boost 1.59 in a conda env using the ([recipe](https://github.com/conda/conda-recipes/tree/b9570c14d5a25ac88b98c6c597365bfcba4174ce/boost)) from the condo/conda-recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //B",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:762,error,errors,762,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['error'],['errors']
Availability,## Medium; - [ ] Design and implement a memory manager. It should keep track of the memory allocated and provide the user with the currently available memory.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-230368446:141,avail,available,141,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-230368446,1,['avail'],['available']
Availability,"## Notes on updating your conda distribution of Psi4; There's been a lot of changes to conda defaults channel and the Psi4 conda build since v1.1 c. May 2017. They've all been to the good, but they're drastic enough that a `conda update psi4` is not the right way to go.; #### Changes/Timeline; * July 2017 — Psi4 stops statically linking MKL into the binary and starts dynamically linking `mkl_rt` from conda; * Dec 2017 — Psi4 updates pybind11 from 2.0 to 2.2; * winter/spring 2017/2018 — On Linux, conda defaults channel switches from GCC 4.8.5 to 7.2.0. This means Psi4 doesn't have to ship a potentially interfering 5.2.0 alongside just for C++11 support. On Mac, conda defaults channel switches to a non-AppleClang Clang compiler that supports OpenMP. We can thread again! Also, conda defaults switches their NumPy to link to `mkl_rt` (from a different combination of MKL libs) (so any previous advice to grab NumPy from `-c intel` can be ignored).; * April/May/June 2018 — Psi4 follows defaults channel and incorporates all these improvements. We are currently compatible with defaults to the best of my knowledge (that is, no reason installing psi4 into your up-to-date base environment should cause symbol errors for psi4 or the base). conda-forge channel is still working on their update, so I wouldn't mix psi4 with serious (i.e., compiled) packages from there. #### Updating; * If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, **do not update**. Another clue is if there's a `gcc5` in your `conda list`. Another clue is a `__svml` error.; * Instead, create a new environment for a new Psi4. You may need to `conda update conda` beforehand.; * Then `conda create -n {p4env} python={3.6} psi4 psi4-rt -c psi4/label/dev` You get to choose the `{...}` bits.; * There's at least one report that a fresh Anaconda doesn't work with psi while a fresh Miniconda does. This doesn't sound right to me, but it's worth noting and getting further reports.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-397056473:1215,error,errors,1215,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-397056473,2,['error'],"['error', 'errors']"
Availability,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447:488,avail,available,488,https://psicode.org,https://github.com/psi4/psi4/pull/447,2,['avail'],['available']
Availability,"## Todos; - [x] This prevents partial frequencies from hanging (causing ctest timeout) when analytic freq are available and user hasn't specified a findif.; - [x] Clarifies extrapolations syntax with e.g., aug-cc-pv(d+d)z basis sets used; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/451:110,avail,available,110,https://psicode.org,https://github.com/psi4/psi4/pull/451,1,['avail'],['available']
Availability,## Todos; - [x] bump qcel to 0.5.0; - [x] bump qcng to 0.8.2; - [x] bump pb11 to 2.3.0; - [x] update FindPythonLibsNew.cmake from upstream (pb11); - [x] try to fix 0-bit Python travis error -- ended up averting Win problem and letting Lin upstream fix itself. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1697:184,error,error,184,https://psicode.org,https://github.com/psi4/psi4/pull/1697,1,['error'],['error']
Availability,"## Todos; - [x] modernizes `run_json` to the level of the ddd branch; - sets all options at once and allows module-level options (`scf__reference` --> `set scf reference`); - shifts `json['psi4:qcvars']` --> `json['extras']['qcvars']`; - `json['extras']['wfn_qcvars_only']` collects qcvars only from wfn, not from `P::e`; - uses molecule dtype=2, qcschema one-word, and new error format; - [x] adds more psivars; - `HF TOTAL HESSIAN`; - removes scs-mp2 ss/os psivars in dfmp2 that were getting autovivified. thereby also corrects printing of 0s; - in cc* modules, defines psivars on wfn that I'm confident will endure. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1578:374,error,error,374,https://psicode.org,https://github.com/psi4/psi4/pull/1578,1,['error'],['error']
Availability,"## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a GHA to build the docs for every PR; * gives us advance warning if the docs break, rather than having to watch master; * advance warning is particularly necessary since the warnings-to-errors and nitpicky flags are on. these make sure links (functions, options, etc) aren't dead and that lists don't end up as mushed text.; * unlike #2364, this isn't ambitious by building a website preview and writing a comment to the PR. but it does provide a tarball of the docs as a GHA artifact, so you can download, unpack, and view it locally in a browser. this happens whether the build succeeds or fails.; * the new docs-pr.yml file looks so close to docs.yml, that you could argue for merging them. However, I think they could develop differently, with the master one also doing samples commits and auto-formatting, while the PR one does linting like add-a-comment-to-that-test or reformat warnings.; - [x] a filesystem.py file could be easily replaced by pathlib. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Plugin tests generate and run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2607:297,error,errors,297,https://psicode.org,https://github.com/psi4/psi4/pull/2607,2,"['down', 'error']","['download', 'errors']"
Availability,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980:786,ping,ping,786,https://psicode.org,https://github.com/psi4/psi4/pull/1980,1,['ping'],['ping']
Availability,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Feature1; Added printout for memory availability in DFHelper; ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1097:151,avail,availability,151,https://psicode.org,https://github.com/psi4/psi4/pull/1097,1,['avail'],['availability']
Availability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/576:370,avail,available,370,https://psicode.org,https://github.com/psi4/psi4/pull/576,1,['avail'],['available']
Availability,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:251,error,error,251,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['error'],['error']
Availability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Provided a more informative error message when SAD crashes due to an atom having more core electrons than basis functions. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed typos in comments; - [x] Fixed buggy print information. ## Questions; - [ ] Is it worth testing for the error message explicitly?. ## Checklist; - [x] Confirmed I get the expected error message upon running the example from #2853. ## Status; - [x] Ready for review; - [x] Ready for merge upon @susilehtola approval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859:201,error,error,201,https://psicode.org,https://github.com/psi4/psi4/pull/2859,3,['error'],['error']
Availability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The `LINEQ_SOLVER` option for `occ` has been removed. ## Dev notes & details; - [x] `occ` now uses LAPACK to solve Ax=b rather than the `pople` or `flin` algorithms. `LAPACK` just might be more reliable. This was an extremely obscure option, so I'm not worried about breaking anybody's input. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2778:367,reliab,reliable,367,https://psicode.org,https://github.com/psi4/psi4/pull/2778,1,['reliab'],['reliable']
Availability,"### System Specs:; ```; OS: MacOS Monterey 12.5.1; 2,6 GHz 6-Core Intel Core i7; 32 GB 2667 MHz DDR4; IDE: PyCharm 2022.3.2 (Community Edition); ```. ### Software Specs:; ```; Virtual Env: Conda env ; Conda version: 23.1.0; Python version: 3.6.13 and 3.7.16 (same error on both versions); PSI4 version: 1.5+e9f4d6d ; PSI4 build: py37ha809fef_0 ; Installed PSI4 using: conda install -c psi4 psi4; ```. ### Minimum reproducible example script:; ```; import psi4; psi4.set_memory('500 MB'); h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); print(psi4.energy('scf/cc-pvdz')); ```. ### Complete traceback :; ```; /Users/vandanrevanur/anaconda3/envs/psi4_env_36/bin/python /Users/vandanrevanur/personal/codes/chemistry/psi4_stuff/psi4_testing.py . Memory set to 476.837 MiB by Python driver. Scratch directory: /tmp/. Scratch directory: /tmp/. *** tstart() called on Temps-MacBook-Pro.local; *** at Mon Apr 24 13:23:21 2023. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:264,error,error,264,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['error'],['error']
Availability,### Tentative Roadmap; - [ ] **1.3a1** when Windows ready; - alphas as needed by downstream users who need tags; - [ ] sometime drop py35 and add py37; - [ ] **feature freeze** & **1.3rc1** 1 Oct 2018; - rc's as needed until code settles; - [ ] **1.3** 1 Nov 2018; - [ ] **PsiCon2018** 9–10 Nov 2018 @ GT,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-407559283:81,down,downstream,81,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-407559283,1,['down'],['downstream']
Availability,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:308,error,errors,308,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,1,['error'],['errors']
Availability,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:428,failure,failures,428,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,2,"['Error', 'failure']","['Errors', 'failures']"
Availability,"##### Watch Out For. Matt's seeing consistent failures among certain functionals in `dft-bench-ionization`. Particularly the first and third (`PWB6K` & `wB97X-D`) while the second is fine. I don't see the problem with Intel `2018.0.2` compilers, and travis doesn't see it in a truncated test case (clang and gcc). So watch out for this, and even if you cut off full tests prematurely b/c the benches are so long, please go ahead and run at least the first few functionals of the test outright for a few weeks so we can get more info.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385090273:46,failure,failures,46,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385090273,1,['failure'],['failures']
Availability,"########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs larger than above fail with a similar error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:1174,error,error,1174,https://psicode.org,https://github.com/psi4/psi4/issues/464,2,['error'],['error']
Availability,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:40,failure,failure,40,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,2,['failure'],"['failure', 'failures']"
Availability,"#2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5387,error,error,5387,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['error'],['error']
Availability,"#849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3382,error,errors,3382,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['error'],['errors']
Availability,"': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:17184,error,error,17184,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['error'],['error']
Availability,"': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe ther",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:21730,error,error,21730,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['error'],['error']
Availability,"': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:19436,error,error,19436,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['error'],['error']
Availability,"'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:11267,avail,available,11267,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability,"'python' may not be available, use the same Python to run the tests",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3216:20,avail,available,20,https://psicode.org,https://github.com/psi4/psi4/pull/3216,1,['avail'],['available']
Availability,"(1) do other conda packages like NumPy work for you?; Yes, I just opened pycharm using conda as the interpreter, import numpy and converted a list to a np array. (2) can/did you do the Windows equivalent of log out then log back in?; I just restarted my computer, error still persists . (3) what exactly was your ""added the directory to my path"" command?; I went system properties --> environment manager --> Path ; then added the following code in ""C:\Users\erikc\psi4conda"". (4) what does psi4 --version say?; C:\Users\erikc>psi4 --version; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088:264,error,error,264,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088,1,['error'],['error']
Availability,"(3), acpf, aqcc, ccd, bccd, bccd(t), cc2, cc3, and some representative DFTs (svwn, pbe, b3lyp, wb97x, b2plyp) to standard suite testing to nail down their capabilities. Added some advice to the stdsuite so that others can perhaps edit it.; * all but cepa(1), cepa(3), acpf, aqcc, svwn, and wb97x are verified against external programs (for qcdb's and qcengine's good, not because I distrusted longstanding Psi4 implementations), usually cfour, nwchem, gamess; * ROHF DETCI doesn't match gamess/cfour for CISD or FCI, but doubtless that's implementation choice that I haven't identified. Anyway, that's why those are separate entries (away from qcng) in `standard_suite_ref_local.py`; * In filling out the capabilities tables for Hessians, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11008,failure,failure,11008,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['failure'],['failure']
Availability,"(?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:21956,error,error,21956,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"(?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpprfs，该符号在函数 ""int __cdecl psi::C_DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsv，该符号在函数 ""int __cdecl psi::C_DPPSV(char,int,int,double *,double *,int)"" (?C_DPPSV@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsvx，该符号在函数 ""int __cdecl psi::C_DPPSVX(char,char,int,int,double *,double *,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPPSVX@psi@@YAHDDHHPEAN0D00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrf，该符号在函数 ""int __cdecl psi::C_DPPTRF(char,int,double *)"" (?C_DPPTRF@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptri，该符号在函数 ""int __cdecl psi::C_DPPTRI(char,int,double *)"" (?C_DPPTRI@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrs，该符号在函数 ""int __cdecl psi::C_DPPTRS(char,int,int,double *,double *,int)"" (?C_DPPTRS@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptcon，该符号在函数 ""int __cdecl psi::C_DPTCON(int,double *,double *,double,double *,double *)"" (?C_DPTCON@psi@@YAHHPEAN0N00@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpteqr，该符号在函数 ""int __cdecl psi::C_DPTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DPTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptrfs，该符号在函数 ""int __cdecl psi::C_DPTRFS(int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *)"" (?C_DPTRFS@psi@@YAHHHPEAN0000H0H000@Z)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:36335,error,error,36335,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"(PSI4 1.1); water_opt -7.606667516613838e+01; water+_homo -7.566072290801020e+01; water+_homo-1 -7.558091679634278e+01; water+_homo-2 -7.541230326047109e+01; water+_homo-3 -7.423771580655676e+01; water+_homo-4 -5.571830715553878e+01. Noticeably, pulling an electron from the homo-3 and homo-4 require some crafty work, but **I have managed to converge this calculations with several basis sets and in DFT, too, using damping and other tricks, all in PSI4 1.1. Energies are qualitatively the same alway**s. All the output files are attached, in psython mode (I could not make MOM to work from python). Now then, I wanted to check some things, so I printed the density matrices from .fchk files and plugged them to PySCF, projecting them properly and so on, just to evaluate the energy with UHF on top of those density matrices. I get the same energies for the neutral molecule and the homo, homo-1 and homo-2 cations. I get VERY different energies from the homo-3 and homo-4 states. Now thats weird, because the energies above make sense. So I assumed, okay, maybe there's something odd with the .fchk writer module. I've seen its been updated, so lets try a newer version of PSI4. So I got the 1.4a2.dev78 and tried to run my calculations using the newest available dev release, from scratch. I get exactly the same energies, except for the homo-4 state, for which I get some very funky results:. [psi4_14.tar.gz](https://github.com/psi4/psi4/files/3469641/psi4_14.tar.gz). (Psi4 1.4a2...); water_opt -7.606667516615393e+01; water+_homo -7.566072290809453e+01; water+_homo-1 -7.558091679647397e+01; water+_homo-2 -7.541230326053801e+01; water+_homo-3 -7.423771580754870e+01; water+_homo-4 **9.360901611130924e+00**. And that's the story! I would try to read the .fchk files and see if I can evaluate the UHF energy on top of them with Psi4 intead of PySCF next, but this thing appeared and I guess some checks are due to know what is going on. Thank you for your patience! I hope its nothing serious!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692:1829,avail,available,1829,https://psicode.org,https://github.com/psi4/psi4/issues/1692,1,['avail'],['available']
Availability,(Rather than adding to and probably reopening #1041): v2rdm_casscf suffers from the same problem that gpu_dfcc did.; It needs `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` adding to CMAKE_ARGS in `external/downstream/gpu_dfcc/CMakeLists.txt` for it to build within a psi4 build.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1063:207,down,downstream,207,https://psicode.org,https://github.com/psi4/psi4/issues/1063,1,['down'],['downstream']
Availability,"(base) C:\Users\erikc>conda create -n p4envnew python=3.8 psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining @/win-64::__win==0=0: 80%|████████████████████████████████████████████████████████████████████████████▊ | 4/5 [00:00<00:00, 14.60it/s]-failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; psi4 -> python=3.8; python=3.8. I dont think it is the environment name",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114:722,Avail,Available,722,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114,1,['Avail'],['Available']
Availability,(from http://forum.psicode.org/t/scaled-opposite-spin-sos-not-changing-orbital-optimized-mp2-omp2/1596); It appears that the spin-scaled OMP2 methods like `sos-omp2` do not apply spin-scaling to the MP-L functional. Instead spin-scaling is done in a post-scf fashion on the `omp2` results.; This is not necessarily what one would expect from the method name. Pinging both @bozkaya and @JonathonMisiewicz ; Could you have a look please? What is suppose to happen?. Test input:; [test.txt](https://github.com/psi4/psi4/files/3825609/test.txt),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1751:359,Ping,Pinging,359,https://psicode.org,https://github.com/psi4/psi4/issues/1751,1,['Ping'],['Pinging']
Availability,"(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGS@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggesx，该符号在函数 ""int __cdecl psi::C_DGGESX(char,char,char,char,int,double *,int,double *,int,int *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGGESX@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:23390,error,error,23390,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"(most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 197, in scf_initialize; mints.one_electron_integrals(). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /lscratch/software_build/easybuild/build/PSI4/1.3.2/foss-2020b/psi4-1.3.2/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::open(unsigned long, int); psi::Matrix::save(psi::PSIO*, unsigned long, psi::Matrix::SaveType); psi::MintsHelper::one_electron_integrals(). Printing out the relevant lines from the Psithon --> Python processed input file:; no_reorient; no_com; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""sdzhf""); --> E, wfn = energy('WB97X-D', return_wfn=True); wfn.to_file(""mol.wfn""). Psi4 stopped on: Tuesday, 31 October 2023 05:02PM; Psi4 wall time for execution: 0:01:45.79; ```; Can anyone explain in more detail what is happening here and how i can solve this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:2719,Error,Error,2719,https://psicode.org,https://github.com/psi4/psi4/issues/3069,4,"['Error', 'error']","['Error', 'error']"
Availability,"(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:1207,robust,robust,1207,https://psicode.org,https://github.com/psi4/psi4/pull/1591,4,"['ROBUST', 'error', 'robust']","['ROBUST', 'error', 'robust']"
Availability,"(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in libpcm.a(Input.cpp.o); ""double const& Section::get<double>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const"", referenced from:; Section::getDbl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in libpcm.a(Input.cpp.o); ""int const& Section::get<int>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const"", referenced from:; Section::getInt(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in libpcm.a(Input.cpp.o); ""Section::getSect(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const"", referenced from:; Input::reader(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libpcm.a(Input.cpp.o); ""_crc32"", referenced from:; void cnpy::npz_save<unsigned int>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int const*, unsigned int const*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) in libpcm.a(Cavity.cpp.o); void cnpy::npz_save<double>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, double const*, unsigned int const*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) in libpcm.a(Cavity.cpp.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207:4879,error,error,4879,https://psicode.org,https://github.com/psi4/psi4/issues/207,3,"['Error', 'error']","['Error', 'error']"
Availability,") result in the following non-deterministic error:; ```; Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/psi4/driver/schema_wrapper.py"", line 459, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/opt/conda/lib/python3.10/site-packages/psi4/driver/schema_wrapper.py"", line 721, in run_json_qcschema; json_data[""native_files""] = {fl: flpath.read_text() for fl, flpath in files.items() if flpath.exists()}; File ""/opt/conda/lib/python3.10/site-packages/psi4/driver/schema_wrapper.py"", line 721, in <dictcomp>; json_data[""native_files""] = {fl: flpath.read_text() for fl, flpath in files.items() if flpath.exists()}; File ""/opt/conda/lib/python3.10/pathlib.py"", line 1135, in read_text; return f.read(); File ""/opt/conda/lib/python3.10/codecs.py"", line 322, in decode; (result, consumed) = self._buffer_decode(data, self.errors, final); UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe1 in position 47: invalid continuation byte; ```; This error tells us that psi4 is unable to read its own `timer.dat` file. . Upon further examination of these problematic `timer.dat` files, we noticed that the ""host"" field appears to be corrupted. Here is one such corrupted header of a `timer.dat` file, represented w/ a latin-1 encoding (since it can't be read w/ the standard utf-8 encoding):; ```; Host: ip-172-31-XX-XXX.us-east-2.compute.interá^X. Timers On : Sat Sep 2 14:14:18 2023; Timers Off: Sat Sep 2 14:14:18 2023. Wall Time: 0.52 seconds. Time (seconds); Module User System Wall Calls. --------------------------------------------------------------------------------------; ```; In all of these problematic timer.dat files, the host name is truncated and ends with a random assortment of bytes. In the above example, the full host name should be `ip-172-31-XX-XXX.us-east-2.compute.internal`. We then examined how psi4 determines and processes the host name. It turns out, psi4 uses the `gethostname` functi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:1165,error,errors,1165,https://psicode.org,https://github.com/psi4/psi4/pull/3043,2,['error'],"['error', 'errors']"
Availability,") with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing: OO ROHF was printing and setting wrong plain MP2 energies, OMP3 & OMP2.5 wasn't setting right `Wfn.energy_`, stop setting ROHF MP3 and MP2.5 out of caution.; - [x] tightened the min rms_mograd_convergence from 6.0 to 6.5 so that stdsuite (3 mol/basis sets) could reliably compute energies, gradients, and findif gradients to 1e-6. ## Questions; - [x] sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. @behnle, please confirm that this sounds right.; - @behnle, sorry for the long delay and scrambling of your PR. please feel free to comment and PR to this to modify.; - @bozkaya, this adds pretty cleanly onto your `occ` code, but do look it over if you want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:2265,reliab,reliably,2265,https://psicode.org,https://github.com/psi4/psi4/pull/2653,2,"['avail', 'reliab']","['available', 'reliably']"
Availability,")"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函数 ""int __cdecl psi::C_DSPGVD(int,char,char,int,double *,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPGVD@psi@@YAHHDDHPEAN000H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvx，该符号在函数 ""int __cdecl psi::C_DSPGVX(int,char,char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPGVX@psi@@YAHHDDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsprfs，该符号在函数 ""int __cdecl psi::C_DSPRFS(char,int,int,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSPRFS@psi@@YAHDHHPEAN0PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsv，该符号在函数 ""int __cdecl psi::C_DSPSV(char,int,int,double *,int *,double *,int)"" (?C_DSPSV@psi@@YAHDHHPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:41366,error,error,41366,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,")"" (?C_DTRMV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsm，该符号在函数 ""void __cdecl psi::C_DTRSM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRSM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsv，该符号在函数 ""void __cdecl psi::C_DTRSV(char,char,char,int,double *,int,double *,int)"" (?C_DTRSV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsdc，该符号在函数 ""int __cdecl psi::C_DBDSDC(char,char,int,double *,double *,double *,int,double *,int,double *,int *,double *,int *)"" (?C_DBDSDC@psi@@YAHDDHPEAN00H0H0PEAH01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsqr，该符号在函数 ""int __cdecl psi::C_DBDSQR(char,int,int,int,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DBDSQR@psi@@YAHDHHHHPEAN00H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddisna，该符号在函数 ""int __cdecl psi::C_DDISNA(char,int,int,double *,double *)"" (?C_DDISNA@psi@@YAHDHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbbrd，该符号在函数 ""int __cdecl psi::C_DGBBRD(char,int,int,int,int,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DGBBRD@psi@@YAHDHHHHHPEANH000H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbcon，该符号在函数 ""int __cdecl psi::C_DGBCON(char,int,int,int,double *,int,int *,double,double *,double *,int *)"" (?C_DGBCON@psi@@YAHDHHHPEANHPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbequ，该符号在函数 ""int __cdecl psi::C_DGBEQU(int,int,int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGBEQU@psi@@YAHHHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbrfs，该符号在函数 ""int __cdecl psi::C_DGBRFS(char,int,int,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGBRFS@psi@@YAHDHHHHPEANH0HPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:15492,error,error,15492,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,")$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been reformulated to enable calculations with grids containing negative grid weights. ## Questions; - [x] Is the current way of handling computation of the numerical overlap matrix acceptable? Currently, two X matrices are used to form the numerical overlap matrix. One goal of folding the grid weight sign into the formation of G was to prevent the use of multiple X matrices. However, I don't think that can be done here without removing the call to `linalg::doublet` in the `compute_numeric_overlap` function. One could probably do a slightly-modified, manually-implemented matrix multiply with the grid weight folded in, and construct $S_{N}$ with a single $X$ matrix that way. But that comes at the cost of not utilizing BLAS. What does everyone consider preferable?; - [ ] What, exactly, is the best way to test this? I would like to add a test to `test_dfjcosk.py` for a new grid weight option with negative weights. Unfortunately, it seems that other codes that have COSX just don't have grid options that lead to negative grid weights. For now, I've been comparing against Psi4 COSX calculations using similar grid sizes and ensuring the calculations have similar energies, but I certainly wouldn't consider that robust. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:3412,robust,robust,3412,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['robust'],['robust']
Availability,")'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:751: undefined reference to `CheMPS2::CASSCF::calcNOON(CheMPS2::DMRGSCFindices*, double*, double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:767: undefined reference to `CheMPS2::CASSCF::rotate2DMand1DM(int, int, double*, double*, double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:768: undefined reference to `CheMPS2::DMRGSCFunitary::rotateActiveSpaceVectors(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:776: undefined reference to `CheMPS2::DMRGSCFunitary::saveU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:793: undefined reference to `CheMPS2::CASSCF::buildFmat(CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFindices const*, CheMPS2::DMRGSCFintegrals const*, double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:794: undefined reference to `CheMPS2::CASSCF::buildWtilde(CheMPS2::DMRGSCFwtilde*, CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFindices const*, CheMPS2::DMRGSCFintegrals const*, double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:795: undefined reference to `CheMPS2::CASSCF::augmentedHessianNR(CheMPS2::DMRGSCFmatrix const*, CheMPS2::DMRGSCFwtilde const*, CheMPS2::DMRGSCFindices const*, CheMPS2::DMRGSCFunitary const*, double*, double*, double*)'; collect2: error: ld returned 1 exit status; src/bin/psi4/CMakeFiles/psi4.dir/build.make:617: recipe for target 'bin/psi4' failed; make[2]: *** [bin/psi4] Error 1; CMakeFiles/Makefile2:4698: recipe for target 'src/bin/psi4/CMakeFiles/psi4.dir/all' failed; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ```. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:24070,error,error,24070,https://psicode.org,https://github.com/psi4/psi4/issues/264,4,"['Error', 'error']","['Error', 'error']"
Availability,"):; psi2dump[0] = 1 # A; psi2dump[1] = 4 # B1; psi2dump[2] = 3 # B2; psi2dump[3] = 2 # B3; if ( 'c2v' == symm ):; psi2dump[0] = 1 # A1; psi2dump[1] = 4 # A2; psi2dump[2] = 2 # B1; psi2dump[3] = 3 # B2; if ( 'c2h' == symm ):; psi2dump[0] = 1 # Ag; psi2dump[1] = 4 # Bg; psi2dump[2] = 2 # Au; psi2dump[3] = 3 # Bu; if ( 'd2h' == symm ):; psi2dump[0] = 1 # Ag; psi2dump[1] = 4 # B1g; psi2dump[2] = 6 # B2g; psi2dump[3] = 7 # B3g; psi2dump[4] = 8 # Au; psi2dump[5] = 5 # B1u; psi2dump[6] = 3 # B2u; psi2dump[7] = 2 # B3u. return psi2dump. and the replacement. core.print_out('Writing integrals in FCIDUMP format to ' + fname + '\n'); psi2dump = fcidump_helper(wfn); # Generate FCIDUMP header; header = '&FCI\n'; header += 'NORB={:d},\n'.format(nbf); header += 'NELEC={:d},\n'.format(nelectron); header += 'MS2={:d},\n'.format(wfn.nalpha() - wfn.nbeta()); header += 'UHF=.{}.,\n'.format(not wfn.same_a_b_orbs()).upper(); orbsym = ''; for h in range(active_mopi.n()):; for n in range(frzcpi[h], frzcpi[h] + active_mopi[h]):; orbsym += '{:d},'.format(psi2dump[h]); if not wfn.same_a_b_orbs():; orbsym += '{:d},'.format(psi2dump[h]); header += 'ORBSYM={}\n'.format(orbsym); header += 'ISYM={:d},\n'.format(psi2dump[wfn.irrep()]); header += '&END\n'; with open(fname, 'w') as intdump:; intdump.write(header). Please also note that ""ISYM"" is printed according to FCIDUMP convention on a separate line subsequent the ""ORBSYM"" line. I do not have an idea whether the wfn.irrep() call is implemented or which equivalent to use, but better versed psi4 programmers will know what to do. Please note that, for example, in pyscf, there is:. - a package-provided [fcidump](https://github.com/sunqm/pyscf/blob/a22a531a07c862ce3681c0d069c97aa192ede032/pyscf/tools/fcidump.py), and; - a separate [fcidump](https://github.com/sunqm/pyscf/blob/a22a531a07c862ce3681c0d069c97aa192ede032/pyscf/fciqmcscf/fciqmc.py) for interfacing with fciqmc (with renumbered orbital irreps),. so it's a common error. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449621130:2471,error,error,2471,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449621130,1,['error'],['error']
Availability,"); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:5332,down,download,5332,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:3388,error,error,3388,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['error'],['error']
Availability,"* Advertised Version: 1.4; * Continuous Version: 1.4; * Release Date: 08 03 2021; * Documentation: http://psicode.org/psi4manual/1.4.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:139,Avail,Availability,139,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['Avail', 'avail']","['Availability', 'available']"
Availability,"* Fixed mp2-module failure. Changed the symmetry reset to only occur if the user provided a default symmetry. My changes overrode Bozkaya's DF code running computations in C1, and the computational symmetry change resulted in BH3 landing on different UHF solutions.; * Fixed pywrap-all failure. Per discussion in Slack, findif now saves and resets the core variables from the reference, after all displacements are finished.; * Addressed concerns of @andysim. I now set DOCC explicitly for my test case, to show compatibility with my symmetry-breaking findif solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964:19,failure,failure,19,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964,2,['failure'],['failure']
Availability,"* I think CDS would like to see levelshifting as a widely available convergence strategy. But no need to tack it onto this project.; * The disappearance of the level_shift keyword (for reference, used by dfocc, occ, mcscf) doesn't trouble me much. If `throw_deprecation_errors` can't catch set as global, only way I can think of to emit a warning is to add it back to read_options, then probe in the occ module itself and throw an exception there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575501992:58,avail,available,58,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575501992,1,['avail'],['available']
Availability,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:244,avail,available,244,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['avail'],['available']
Availability,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:680,down,download,680,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['down'],['download']
Availability,"* You can ignore what I said about py27, too. v1.2.1 will be good with 2.7, 3.5, 3.6 (and probably 3.7, though not tested). But boost is definitely not used c. v1.1. * I'm trying to remember the AM conventions. I think it's that quicktests will pass with AM5, while full tests requires AM6. Those ""rules"" may have broken down, so it's possible that some of those tests will heal with higher AM libint. * If you can `cat Testing/Temporary/LastTest*log` after `ctest`, that may be helpful for diagnosis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451522000:321,down,down,321,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451522000,1,['down'],['down']
Availability,"* generating download site directions above; * shift alias to new installs/content file; * NYI commit new files, PR, and upload site. * On GH site ""Draft a New Release"". * grab the 1.3 manual by `cp -pR master 1.3` on godaddy; * NYI adjust the front-matter tags. ## reset; * NYI new ltrt line; * NYI psi4-multi and psi4-docs back to master; * NYI turn off anom and go back to norm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036:13,down,download,13,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036,1,['down'],['download']
Availability,"* run `make sphinxman` at least once by hand and check in resulting psifiles.py and all the updated and new `samples/` files and dirs. * figure out any new `Additional Contributors` since last release and edit header.py accordingly. Get their particulars for codemeta.json. invite any >=3 PRs to GH org. * follow the procedure outlined in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py) (I haven't pushed the versions with enhanced comments) to; * update upstream and downstream deps/addons that may have advanced since last release. edit recipes and psi4 `external/` code.; * rebuild the psi4, psi4-rt, psi4-dev, psi4-docs stack on Linux and Mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604:603,down,downstream,603,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604,1,['down'],['downstream']
Availability,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:787,redundant,redundant,787,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683,1,['redundant'],['redundant']
Availability,"* when publishing a new installer page, move the ""latest"" alias https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md to the new page so that ""Downloads"" on the naviagtion bar points there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366:173,Down,Downloads,173,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366,1,['Down'],['Downloads']
Availability,"*)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DPBTRS(char,int,int,int,double *,int,double *,int)"" (?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:33061,error,error,33061,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"**General comments**: The `robust` scheme uses the following orders in the regions: [7, nominal-7, nominal, nominal] Meaning only the inner 50% are pruned. And things will break i think when the order is 7 -> 86 points or smaller.; Also for `Treutler` it does not make much sense to go below 11 -> 194 points because the order of the core region is fixed at that and you don't want to have the outer regions with less points than the inner.; I didn't take into account people would want to do pruning with small grids to be honest and even if things do not ""break"" there will certainly an unwanted imbalance. This needs to be at least checked by the code in the future.; As for pruning schemes for small grids, one could come up with a new scheme or even let the user input an array with orders to make grid pruning fully manually adjustable. **On topic**: I don't really understand why this should happen currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1458711309:27,robust,robust,27,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1458711309,1,['robust'],['robust']
Availability,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:260,failure,failure,260,https://psicode.org,https://github.com/psi4/psi4/issues/800,3,"['error', 'failure']","['error', 'failure']"
Availability,"**TL;DR** If conda psi4 is acting up, update libint, too: `conda update libint -c psi4/label/dev`. If locally compiled psi4 is acting up, trigger a partial recompile: `cd objdir && rm -rf external/upstream/libint/ && make`. We've been planning for a while to distribute conda psi4 with libint compiled at `MAX_AM_ERI` 8, not 6. I have rebuilt the `libint` package and now the `v1.3rc1` will be the first `psi4` package with extended AM. Unfortunately, both **libint of different AM are not hot-swappable** and **AM not detectable at runtime**. That is, a built psi4 is perfectly happy to link (in the `ldd` sense) to a `libint.so` that is inconsistent with fixed data dimensions in psi4 _libmints_, and libmints can't even throw an error for enlightenment. . I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. ### which `libint`s are out there?; `conda list`; ```; # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:732,error,error,732,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['error'],['error']
Availability,"**Update on the Azure CI failures**; The problem seems _not_ to be entirely controllable through flags. Parts of the xtensor stack code base (xtensor itself, xsimd, possibly xtensor-python) need to be changed and I am working on it. Once I have PR submitted to all these projects, they are hopefully merged and new releases minted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-487287211:25,failure,failures,25,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-487287211,1,['failure'],['failures']
Availability,"**user summary**:; This is not a bug that is affecting any DFT calculations currently run with PSI4.; The bug is found in unused code. ---. The radial grid is entirely build with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L2433. The function supposed to call `build_becke` `build_treutler` is never called, instead a dummy function is called that only populates the `RadialGrid` class, which is never used in `cubature.cc` anyway (looks like it is nowhere used). . On the plus side, the bug fixed with this PR is never encountered. The downside is that the TREUTLER scheme is not entirely correct because at least the eta mapping parameters (`TreutlerEta`) are missing. If `build_treutler` is correct or not, I cannot 100% say. In a quick & dirty fashion I enforced it. _Without_ eta (set to 1.0) all DFT `ctests` pass. That's good!; I added the missing eta parameters with updated BS radii a while ago, but didn't notice that the etas changed nothing. I thought the effect was just too small. But there is a very minor one. Including the etas has 11 of 37 tests fail. (Did not run the pytests). I will refactor `cubature.cc` ..somehow.. in the near future. ---. I will approve & merge tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400:568,down,downside,568,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400,1,['down'],['downside']
Availability,"*,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdecl psi::C_DGEESX(char,char,char,int,double *,int,int *,double *,double *,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGEESX@psi@@YAHDDDHPEANHPEAH000H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev，该符号在函数 ""int __cdecl psi::C_DGEEV(char,char,int,double *,int,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEEV@psi@@YAHDDHPEANH000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeevx，该符号在函数 ""int __cdecl psi::C_DGEEVX(char,char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DG",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:19500,error,error,19500,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"*,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26968,error,error,26968,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"*,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptrs，该符号在函数 ""int __cdecl psi::C_DTPTRS(char,char,char,int,int,double *,double *,int)"" (?C_DTPTRS@psi@@YAHDDDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrcon，该符号在函数 ""int __cdecl psi::C_DTRCON(char,char,char,int,double *,int,double *,double *,int *)"" (?C_DTRCON@psi@@YAHDDDHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrevc，该符号在函数 ""int __cdecl psi::C_DTREVC(char,char,int,double *,int,double *,int,double *,int,int,int *,double *)"" (?C_DTREVC@psi@@YAHDDHPEANH0H0HHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrexc，该符号在函数 ""int __cdecl psi::C_DTREXC(char,int,double *,int,double *,int,int *,int *,double *)"" (?C_DTREXC@psi@@YAHDHPEANH0HPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrrfs，该符号在函数 ""int __cdecl psi::C_DTRRFS(char,char,char,int,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTRRFS@psi@@YAHDDDHHPEANH0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsen，该符号在函数 ""int __cdecl psi::C_DTRSEN(char,char,int,double *,int,double *,int,double *,double *,int *,double *,double *,double *,int,int *,int)"" (?C_DTRSEN@psi@@YAHDDHPEANH0H00PEAH000H1H@Z",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:52237,error,error,52237,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,*Question*: Do we want to be able to switch between old and new BS radii (as expert option)?. Personally I think I would leave them commented out in the code and not make a user-facing switch available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494774576:192,avail,available,192,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494774576,1,['avail'],['available']
Availability,"*kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; > occ_wfn = core.occ(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - CISD/cc-pVDZ via DETCI: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 29, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3062, in run_detci; > ciwfn = core.detci(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1021#issuecomment-388980081>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdoBl5TkzfuztMHuD5aseZ9qEjGVeks5tygHBgaJpZM4T-hi0>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:13067,Error,Error,13067,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,4,"['Error', 'error']","['Error', 'error']"
Availability,*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:40023,Error,Errors,40023,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Error'],['Errors']
Availability,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-200900928:28,error,errors,28,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928,3,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,", Mol. Phys. 91, 847 (1997)						 <; GGA = TRUE									 <; Meta = FALSE									 <; LRC = FALSE									 <; Alpha = 1.000000E+00									 <; Omega = 0.000000E+00									 <; 												 <; => XC_GGA_C_FT97 Functional <=								 <; 												 <; Filatov & Thiel correlation									 <; M. Filatov and W. Thiel, Int. J. Quantum Chem. 62, 603 (1997)				 <; M. Filatov and W. Thiel, Mol. Phys. 91, 847 (1997)						 <; GGA = TRUE									 <; Meta = FALSE									 <; LRC = FALSE									 <; Alpha = 1.000000E+00									 <; Omega = 0.000000E+00									 <. => Molecular Quadrature <=										 => Molecular Quadrature <=. Radial Scheme = TREUTLER								 Radial Scheme = TREUTLER; Pruning Scheme = NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap ma",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6347,Toler,Tolerance,6347,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Toler'],['Tolerance']
Availability,", `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY` in C++ where available.; - [x] Fixes up the conventional CCSD qcvars in ccenergy, including closes #1702 ; - [x] Fixes up CD/DF-CCSD qcvars in fnocc, dfocc; - [x] Moves qcvars in fnocc from P::e.globals to wfn; - [x] Adds fc/ae aspects to managed method for gradient mp2. Old behavior for fc conv mp2 grad was to stop with an informative message. New behavior is to hop into finite difference. Users who definitely want to avoid finite difference for compute time or accuracy should run `gradient(..., dertype=1)` to get psi to stop instead. ## Questions; - [ ] ~Organization of tests is not finalized. qcng does 6 tests per method (r/u/ro x ae/fc) (https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/test_standard_suite_ccsd.py), which is nice, but in psi, it's nice to keep all the modules together. I'm undecided.~; - [ ] @JonathonMisiewicz, did you ever get the impression that `pcg_convergence` should be tig",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:2102,avail,available,2102,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['avail'],['available']
Availability,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:4367,failure,failure,4367,https://psicode.org,https://github.com/psi4/psi4/issues/2427,1,['failure'],['failure']
Availability,", line 81, in <module>; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/driver.py"", line 548, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 685, in select_lccd; return func(name, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::vector_dot(psi::Matrix const*). Printing out the relevant lines from the Psithon --> Python processed input file:; energy('scf',write_orbitals='scf_mos'); Avals=[0.00, 0.05, 0.10, 0.12, 0.15, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimens",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:1990,Error,Error,1990,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['Error'],['Error']
Availability,", v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:3219,error,error,3219,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['error'],['error']
Availability,",double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ""int __cdecl psi::C_DORGHR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGHR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorglq，该符号在函数 ""int __cdecl psi::C_DORGLQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGLQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgql，该符号在函数 ""int __cdecl psi::C_DORGQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgtr，该符号在函数 ""int __cdecl psi::C_DORGTR(char,int,double *,int,double *,double *,int)"" (?C_DORGTR@psi@@YAHDHPEAN",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:28990,error,error,28990,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:21727,error,error,21727,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMV@psi@@YAXDHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr，该符号在函数 ""void __cdecl psi::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:11944,error,error,11944,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:39598,error,error,39598,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:20295,error,error,20295,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:21105,error,error,21105,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:11538,error,error,11538,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,double *,double *,double *,int)"" (?C_DPTSV@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsvx，该符号在函数 ""int __cdecl psi::C_DPTSVX(char,int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,double *)"" (?C_DPTSVX@psi@@YAHDHHPEAN0000H0H0000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrf，该符号在函数 ""int __cdecl psi::C_DPTTRF(int,double *,double *)"" (?C_DPTTRF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpttrs，该符号在函数 ""int __cdecl psi::C_DPTTRS(int,int,double *,double *,double *,int)"" (?C_DPTTRS@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbev，该符号在函数 ""int __cdecl psi::C_DSBEV(char,char,int,int,double *,int,double *,double *,int,double *)"" (?C_DSBEV@psi@@YAHDDHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevd，该符号在函数 ""int __cdecl psi::C_DSBEVD(char,char,int,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBEVD@psi@@YAHDDHHPEANH00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbevx，该符号在函数 ""int __cdecl psi::C_DSBEVX(char,char,char,int,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBEVX@psi@@YAHDDDHHPEANH0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgst，该符号在函数 ""int __cdecl psi::C_DSBGST(char,char,int,int,int,double *,int,double *,int,double *,int,double *)"" (?C_DSBGST@psi@@YAHDDHHHPEANH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgv，该符号在函数 ""int __cdecl psi::C_DSBGV(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *)"" (?C_DSBGV@psi@@YAHDDHHHPEANH0H00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvd，该符号在函数 ""int __cdecl psi::C_DSBGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:38407,error,error,38407,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@YAHDHPEANH0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrf，该符号在函数 ""int __cdecl psi::C_DSYTRF(char,int,double *,int,int *,double *,int)"" (?C_DSYTRF@psi@@YAHDHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytri，该符号在函数 ""int __cdecl psi::C_DSYTRI(char,int,double *,int,int *,double *)"" (?C_DSYTRI@psi@@YAHDHPEANHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrs，该符号在函数 ""int __cdecl psi::C_DSYTRS(char,int,int,double *,int,int *,double *,int)"" (?C_DSYTRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbcon，该符号在函数 ""int __cdecl psi::C_DTBCON(char,char,char,int,int,double *,int,double *,double *,int *)"" (?C_DTBCON@psi@@YAHDDDHHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbrfs，该符号在函数 ""int __cdecl psi::C_DTBRFS(char,char,char,int,int,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTBRFS@psi@@YAHDDDHHHPEANH0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtbtrs，该符号在函数 ""int __cdecl psi::C_DTBTRS(char,char,char,int,int,int,double *,int,double *,int)"" (?C_DTBTRS@psi@@YAHDDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgevc，该符号在函数 ""int __cdecl psi::C_DTGEVC(char,char,int,double *,int,double *,int,double *,int,double *,int,int,int *,double *)"" (?C_DTGEVC@psi@@YAHDDHPEANH0H0H0HHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgexc，该符号在函数 ""int __cdecl psi::C_DTGEXC(int,double *,int,double *,int,double *,int,double *,int,int *,int *,double *,int)"" (?C_DTGEXC@psi@@YAHHPEANH0H0H0HPEAH10H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsen，该符号在函数 ""int __cdecl psi::C_DTGSEN(int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,double *,double *,double *,double *,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:49379,error,error,49379,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,int,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSPRFS@psi@@YAHDHHPEAN0PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsv，该符号在函数 ""int __cdecl psi::C_DSPSV(char,int,int,double *,int *,double *,int)"" (?C_DSPSV@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsvx，该符号在函数 ""int __cdecl psi::C_DSPSVX(char,char,int,int,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DSPSVX@psi@@YAHDDHHPEAN0PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrd，该符号在函数 ""int __cdecl psi::C_DSPTRD(char,int,double *,double *,double *,double *)"" (?C_DSPTRD@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrf，该符号在函数 ""int __cdecl psi::C_DSPTRF(char,int,double *,int *)"" (?C_DSPTRF@psi@@YAHDHPEANPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptri，该符号在函数 ""int __cdecl psi::C_DSPTRI(char,int,double *,int *,double *)"" (?C_DSPTRI@psi@@YAHDHPEANPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrs，该符号在函数 ""int __cdecl psi::C_DSPTRS(char,int,int,double *,int *,double *,int)"" (?C_DSPTRS@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstebz，该符号在函数 ""int __cdecl psi::C_DSTEBZ(char,char,int,double,double,int,int,double,double *,double *,int *,int *,double *,int *,int *,double *,int *)"" (?C_DSTEBZ@psi@@YAHDDHNNHHNPEAN0PEAH101101@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstedc，该符号在函数 ""int __cdecl psi::C_DSTEDC(char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSTEDC@psi@@YAHDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstegr，该符号在函数 ""int __cdecl psi::C_DSTEGR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEGR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:43077,error,error,43077,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,",int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ""int __cdecl psi::C_DORGHR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGHR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorglq，该符号在函数 ""int __cdecl psi::C_DORGLQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGLQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgql，该符号在函数 ""int __cdecl psi::C_DORGQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgtr，该符号在函数 ""int __cdecl psi::C_DORGTR(char,int,double *,int,double *,double *,int)"" (?C_DORGTR@psi@@YAHDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormbr，该符号在函数 ""int __cdecl psi::C_DORMBR(char,char,char,int,int,int,double *,int,double *,double *,int,double *,int)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:29178,error,error,29178,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"- No S^2 vs S^Inf is, in some ways, a different level theory.; - S^2/S^Inf are separate quantities; - Mixing is as safe as any other mixing in SAPT. Our current version is fine, but S^Inf should help more for charged complexes. Exch/Ind-Exch at S^Inf and Disp-Exch at S^2 is probably quite reasonable.; - Yes and no. S^Inf is limited to SAPT0 for the time being, higher levels could get quite complex. One more person to ping and can correct me: @ajmisquitta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-366112364:421,ping,ping,421,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-366112364,1,['ping'],['ping']
Availability,"- Step 1. Modify the perl script to write the reference values out instead of checking them could even write them directly into input.dat with a variable name.; - Step 2. Hunt down the corresponding psivars and add the `compare_value` statements.; - Step 3. The ones that don't work in 2 point at missing psivars which need to be added. 1.) should be somewhat easy but some perl knowledge required. 2) not too difficult either. 3) will take the most time, finding the code in `psi4/src/psi4/cc*` that needs to be modified will take the most time. . I am not completely sure I get what you want to do with your point (3) do you want to just lump `compare_values` together in a function that takes a `wfn` and `ref_vals` dict and does all the `compare_values` needed rather than putting lots of them in the input files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376638034:176,down,down,176,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376638034,1,['down'],['down']
Availability,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20552847:140,toler,tolerance,140,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847,1,['toler'],['tolerance']
Availability,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:516,failure,failure,516,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['failure'],['failure']
Availability,- [ ] mention Disp30 error before v1.4 in docs #1803,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796#issuecomment-582589959:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-582589959,1,['error'],['error']
Availability,"- [x] Can libmints get away with not having `MAX_AM_ERI` passed to it? That way one could switch out `libint.so`s on the fly (conda can do this). Would have to find a way to still exit gracefully if insufficient AM and give decent error messages. EDIT: Can't be done, as the header sets data structure sizes as well. Settling on AM=8 for conda linux instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-334617561:231,error,error,231,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-334617561,1,['error'],['error']
Availability,"- [x] PSI_API doesn't work for gnu compiler and pointer returning fns whe not at start of decl. Affects `v2rdm_casscf/tests/v2rdm6/input.dat`; - [x] Adds to python module, `psi4.executable` returning the psithon script/binary/executable. Also cleaned up main psi4 namespace by deleting some intermediate strings.; - [x] To the `psi4Config.cmake` consumed by downstream, defines `psi4_SYS_PATH` which is the full path needed to be added to `sys.path` in order to `import psi4`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1034:358,down,downstream,358,https://psicode.org,https://github.com/psi4/psi4/pull/1034,1,['down'],['downstream']
Availability,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:952,failure,failure,952,https://psicode.org,https://github.com/psi4/psi4/pull/2048,1,['failure'],['failure']
Availability,"- [x] integrate proper (non-WSL) Windows downloads; - [ ] integrate some options like base env/conda env and how-to-update instructions into guide so can retire reST docs; - [ ] reST docs should become like traditional `INSTALL` documents to be read only by ppl who want to build psi from source with their choice of compilers, etc. and who relish details, not by everyday user or dev.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1840:41,down,downloads,41,https://psicode.org,https://github.com/psi4/psi4/issues/1840,1,['down'],['downloads']
Availability,"- [x] need to redirect docs latest and master on sirius to on psicode. Many ways how here: https://css-tricks.com/redirect-web-page/ . Perhaps Apache best? I know that's installed. Want to redirect rather than shutdown so that google and co. don't reset the popularity ratings.; - [x] need to tarball the trac website and stuff it somewhere. Not everything was transferred to the wiki, but most everything _useful_ migrated. Should sirius be decommissioned someday,; - [x] tarball up all the old (beta2 onwards) docs builds, establish them on godaddy or something, and relink on psicode.; - [x] shut down trac page",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112:600,down,down,600,https://psicode.org,https://github.com/psi4/psi4/issues/112,1,['down'],['down']
Availability,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:12992,error,errors,12992,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['error'],['errors']
Availability,"---------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole34/Documents/Codes/psi4/psi4/src/psi4/libmints/matrix.cc !; ! on line: 1715 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::diagonalize(psi::Matrix&, psi::Vector&, psi::diagonalize_order) !; ! !; !----------------------------------------------------------------------------------!; ```. Various things can be switched, with equally varying effects:; * Switching the COSX_PRUNING_SCHEME from ROBUST to TREUTLER fixes these calculations.; * Switching from 146 spherical points to either 110 or 170 fixes these calculations.; * Switching from 50 radial points to either 55 or 45 does _not_ fix these calculations.; * Switching from water to benzene does _not_ fix these calculations. Finally, from my observation, the problem seems to be localized specifically to COSX. Consider the following input:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type direct; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; dft_spherical_points 146; dft_radial_points 50; dft_vv10_spherical_points 146; dft_vv10_radial_points 50; dft_pruning_scheme robust; mbis_spherical_points 146; mbis_radial_points 50; mbis_pruning_scheme robust; }. energy, wfn = energy('b3lyp-nl', return_wfn=True); oeprop(wfn, ""MBIS_CHARGES"", ""MBIS_VOLUME_RATIOS""); ```. This calculation uses other components of Psi4 (DFT, VV10, MBIS) which enable specification of grid points and/or pruning schemes. This calculation, using 146 spherical points and a ROBUST pruning scheme where allowable, runs fine. . Given that this issue is localized to COSX seemingly, I will further explore this and see what I find.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:3324,robust,robust,3324,https://psicode.org,https://github.com/psi4/psi4/issues/2890,3,"['ROBUST', 'robust']","['ROBUST', 'robust']"
Availability,"------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51141760 -1.84e-02 1.84e-02 4.83e-03 o 2.71e-01 9.38e-02 o ~; 16 -609.46604175 4.54e-02 6.62e-02 1.90e-02 o 1.47e-01 5.38e-02 o ~; 17 -609.50752379 -4.15e-02 3.93e-02 8.01e-03 o 1.44e-01 4.93e-02 o ~; 18 -609.50243791 5.09e-03 4.01e-02 1.12e-02 o 2.42e-01 7.18e-02 o ~; 19 -609.48911958 1.33e-02 7.26e-02 1.74e-02 o 1.09e-01 4.09e-02 o ~; 20 -609.51528318 -2.62e-02 9.87e-03 2.56e-03 o 1.78e-01 5.73e-02 o ~; 21 -609.51351330 1.77e-03 1.38e-02 3.38e-03 o 1.74e-01 4.56e-02 o ~; 22 -609.51620753 -2.69e-03 3.27e-03 1.32e-03 o 5.00e-02 1.16e-02 o ~; 23 -609.51663430 -4.27e-04 2.26e-03 7.58e-04 o 1.86e-01 2.83e-02 o ~; 24 -609.51722373 -5.89e-04 2.81e-03 9.14e-04 o 2.33e-01 3.45e-02 o ~; ```. error is same as OP reports. Below shows starting (L) and final (R) geometries. <img width=""1357"" alt=""screen shot 2015-07-29 at 3 55 39 pm"" src=""https://cloud.githubusercontent.com/assets/2314730/8975665/110d0ab0-3650-11e5-9c6f-5358f4f84105.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126177998:2692,error,error,2692,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998,1,['error'],['error']
Availability,"--------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/psi4/psi4/issues/2294#issuecomment-920805274; > [2]; > https://github.com/notifications/unsubscribe-auth/AENL3I6BPHZOPNVWELB2ITDUCHF2TANCNFSM5EEDQMYA; > [3]; > https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&amp;mt=8&amp;pt=524675; > [4]; > https://play.google.com/store/apps/details?id=com.github.android&amp;referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:1656,error,error,1656,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607,1,['error'],['error']
Availability,"---------------. Psi4 started on: Wednesday, 13 June 2018 11:12AM. Process ID: 23105; Host: scychon-OptiPlex-7010; PSIDATADIR: /root/psi4/build/stage/share/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1. ==> Input File <==. --------------------------------------------------------------------------; #! DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. # copy&paste list:; # ""b86bpbe"" : build_b86bpbe_superfunctional,; # ""blyp"" : build_blyp_superfunctional,; # ""svwn"" : build_svwn_superfunctional,; # ""pw86pbe"" : build_pw86pbe_superfunctional,; # ""pbe"" : build_pbe_superfunctional,; # ""bp86"" : build_bp86_superfunctional,; # ""pw91"" : build_pw91_superfunctional,; # ""ft97"" : build_ft97_superfunctional,; # ""bop"" : build_bop_superfunctional,; # ""mpwpw"" : build_mpwpw_superfunctional,. ## Programs/References; # ORCA v.4.0.1: cc-pVDZ, RI-MP2, no FC, GRID7, nori; # Gaussian 09: cc-pVDZ 5D SP Int(Grid=99770); # Turbomole 7.2, nori, grid 7; # NWCHEM grid: xfine, TOLERANCES accCoul 1e-14; ## Notes; # BP86 can come with PW91 or VWN5 LDA correlation. Deviations are quite large either way.; # SOGGA11 only up to 4 decimals even for Ne with fine grid. ggaval ={; ""blyp"" : -128.894855380969, # ORCA; ""svwn"" : -128.357941704 , # G09; ""pbe"" : -128.79305010293, # TM LDA-PW91; #""pbe"" : -128.793027408, # G09; #""pbe"" : -128.793068569269 # ORCA LDA-PW91; #""bp86"" : -128.905683777641, # ORCA LDA-PW91; #""bp86"" : -128.9092927447, # TM = LDA-VWN, or iop(3/74=418) in Gaussian; #""bp86"" : -128.903070321, #G09 LDA-PW86; ""pw91"" : -128.871229934635, # ORCA; ""mpwpw"" : -128.893378250504, # ORCA; ""ft97"" : -128.850056371480 , # NWCHEM xfine xc ft97 screening 1-e14; ""bop"" : -128.892404778404, # NWCHEM; #""b86bpbe"" : , # ???; ""pw86pbe"" : -128.946484366 , # G09 iop(3/74=809); ""sogga11"" : -128.889273547 , # G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:1774,TOLER,TOLERANCES,1774,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['TOLER'],['TOLERANCES']
Availability,"------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5705,avail,available,5705,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:2809,error,error,2809,https://psicode.org,https://github.com/psi4/psi4/issues/1126,2,['error'],['error']
Availability,--test error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:7,error,error,7,https://psicode.org,https://github.com/psi4/psi4/issues/1902,1,['error'],['error']
Availability,"-0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, factory, True); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 25); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > # Works fine!; > petite = core.PetiteList(basis, factory, False); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 24); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > The next question is what we do about this. I see two solutions:; >; > 1. Put a flag in sotoao that throws if include_pure_transform_ is; > true. I've run this change through full tests and didn't get any errors.; > However, somebody can assume sotoao() is the transpose of aotoso() and; > get rubbish.; > 2. Remove the functionality of the include_pure_transform flag; > entirely. The transformations are always invertible, but we lose whatever; > efficiency gain motivated including the flag in the first place.; >; > I don't know which is the best solution, or if there's a third.; >; > Pinging @andysim <https://github.com/andysim>, @susilehtola; > <https://github.com/susilehtola>, @jturney <https://github.com/jturney>,; > and @fevangelista <https://github.com/fevangelista>, all of whom have; > either touched this code or expressed interest in this issue previously.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1763?email_source=notifications&email_token=AAXVA5WSYVY7DDERYLO3GDLQWURWFA5CNFSM4JTXOXB2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4H5JN6UA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VPMHM3HOZ7O5JLBRDQWURWFANCNFSM4JTXOXBQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:3154,Ping,Pinging,3154,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['Ping'],['Pinging']
Availability,"-312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-01 DIIS; @DF-RHF iter 26: -315.36589297460404 1.41188e-03 3.75578e-01 DIIS; @DF-RHF iter 27: -315.36543355687996 4.59418e-04 3.75578e-01 DIIS; @DF-RHF iter 28: -315.36456132195099 8.72235e-04 3.75577e-01 DIIS; @DF-RHF iter 29: -315.36496171844306 -4.00396e-04 3.75577e-01 DIIS; @DF-RHF iter 30: -315.36444779551914 5.13923e-04 3.75577e-01 DIIS; @DF-RHF iter 31: -315.36454935016326 -1.01555e-04 3.75577e-01 DIIS; @DF-RHF iter 32: -315.36429506717400 2.54283e-04 3.75577e-01 DIIS; @DF-RHF iter 33: -315.36492875519383 -6.33688e-04 3.75577e-01 DIIS; @DF-RHF iter 34: -315.36475459725352 1.74158e-04 3.75577e-01 DIIS; @DF-RHF iter 35: -315.36472123328099 3.33640e-05 3.75577e-01 DIIS; @DF-RHF iter 36: -315.36482066630248 -9.94330e-05 3.75577e-01 DIIS; ```; The DIIS error hangs around the same number as with the new version of the SAD guess. The above output is especially weird, since the energy error becomes small while the DIIS error is large. Could the ECP contribution to the Fock matrix asymmetric? This can yield an energy that appears converged but a large orbital gradient.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433:2765,error,error,2765,https://psicode.org,https://github.com/psi4/psi4/issues/1433,3,['error'],['error']
Availability,"-> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5642,error,error,5642,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"-input-7-95f03e942086> in <module>; 9 ; 10 psi4.set_options({'reference': 'uhf','basis': basis_set}); ---> 11 e, wfn = psi4.energy('hf',return_wfn=True); 12 ; 13 print(""energy ="",e,"" and number of basis functions ="", wfn.basisset().nbf()). /usr/local/psi4/lib/psi4/driver/driver.py in energy(name, **kwargs); 568 shutil.copy(item, targetfile); 569 ; --> 570 wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 571 ; 572 for postcallback in hooks['energy']['post']:. /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in run_scf(name, **kwargs); 2180 ; 2181 ; -> 2182 scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2183 returnvalue = scf_wfn.energy(); 2184 . /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in scf_helper(name, post_scf, **kwargs); 1511 ); 1512 ; -> 1513 e_scf = scf_wfn.compute_energy(); 1514 for obj in [core, scf_wfn]:; 1515 for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_compute_energy(self); 81 self.initialize_jk(self.memory_jk_); 82 else:; ---> 83 self.initialize(); 84 ; 85 try:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_initialize(self); 195 mints.set_rel_basisset(self.get_basisset('BASIS_RELATIVISTIC')); 196 ; --> 197 mints.one_electron_integrals(); 198 self.initialize_jk(self.memory_jk_, jk=jk); 199 if self.V_potential():. RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/billy/Python_stuff/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::Matrix::save(psi::PSIO*, unsigned long, psi::Matrix::SaveType); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794:2775,Error,Error,2775,https://psicode.org,https://github.com/psi4/psi4/issues/1794,4,"['Error', 'error']","['Error', 'error']"
Availability,"-j4 builds now run smoothly on my Mac and another cluster (cerebro), but I still have problems on one of our campus clusters. The error is not the same as the libdpd+libmints case mentioned above, so I'm investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173210896:130,error,error,130,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173210896,1,['error'],['error']
Availability,"-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Modelling following reaction:; `2x 35 + 20x H2 -> 2x LIH + 4x BH4 + 4x CH4 + O2 + 4x AlH4 + 2x SiH4 + P2 + CL2`; In essence, a diverse inorganic,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:3437,ROBUST,ROBUST,3437,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['ROBUST'],['ROBUST']
Availability,". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CX",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:7946,Error,Error,7946,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Error'],['Error']
Availability,". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:1341,Error,Error,1341,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Error'],['Error']
Availability,". For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Modelling following reaction:; `2x 35 + 20x H2 -> 2x LIH + 4x BH4 + 4x CH4 + O2 + 4x AlH4 + 2x SiH4 + P2 + CL2`; In essence, a diverse inorganic, main group chemistry reaction.; level of theory: PBE/def2-TZVP with (434,85) grid.; link to input file: https://gist.github.com/hokru/408873d71efb522f7de1f0cfe0cf9da0. _reaction energy_ ; * dev. old BS to new BS: -0.0011 kcal/mol ; * (newBS) `NONE` to `ROBUST`: -0.0003 kcal/mol; * (newBS) `NONE` to `TREUTLER`: 0.94978 kcal/mol (0.5 % of a reaction energy of 188 kcal/mol !); * speed-ups: `ROBUST=1.33 `; `TREULTER=1.36`. _abso",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:3838,ROBUST,ROBUST,3838,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['ROBUST'],['ROBUST']
Availability,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2198,down,downloading,2198,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,2,['down'],['downloading']
Availability,". psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bond_length}: {str(e)}""); energies = {method: {state: [float('nan')] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [None] for state in range(1, num_states + 1)} for method in methods_to_try}. return energies, wfns. def generate_potential_energy_curves():; bond_lengths = np.arange(1.0, 10.2, 0.2); num_states = 6; methods_to_try = ['EOM-CCSD', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:1958,Error,Error,1958,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['Error'],['Error']
Availability,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2195,Error,Errors,2195,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,2,"['Error', 'error']","['Errors', 'error']"
Availability,"....... Passed 46.21 sec; Start 368: dft-custom-mgga; 23/24 Test #368: dft-custom-mgga .................. Passed 244.44 sec; Start 369: dft-custom-gga; 24/24 Test #369: dft-custom-gga ...................***Failed 171.36 sec; 	Ne: BLYP..........................................................PASSED; 	Ne: SVWN..........................................................PASSED; 	Ne: PBE...........................................................PASSED; 	Ne: PW91..........................................................PASSED; 	Ne: MPWPW.........................................................PASSED; Error occurred in file: C:\Users\User\psi4.git\psi4\src\psi4\libpsi4util\process.cc on line: 112; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\procrouting\proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\procrouting\proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError: ; Fatal Error: Iterations did not converge.; Error occurred in file: C:\Users\User\psi4.git\psi4\src\psi4\libpsi4util\process.cc on line: 112. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 88% tests passed, 3 tests failed out of 24. Label Time Summary:; cart = 233.39 sec (4 tests); dft = 2298.14 sec (24 tests); mp2 = 16.23 sec (1 test); psi = 2298.14 sec (24 tests); quicktests = 144.78 sec (2 tests); scf = 2298.14 sec (24 tests); shorttests = 129.39 sec (3 tests). Total Test time (real) = 2303.35 sec. The following tests FAILED:; 	168 - dft3 (Failed); 	366 - dft-custom-dhdf (Failed); 	369 - dft-custom-gga (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:6131,Error,Error,6131,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,2,['Error'],['Error']
Availability,".................................PASSED; 401: 	Result: MAYER_INDICES.............................................PASSED; 401: 	CALCINFO_NBASIS...................................................PASSED; 401: 	CALCINFO_NMO......................................................PASSED; 401: 	CALCINFO_NALPHA...................................................PASSED; 401: 	CALCINFO_NBETA....................................................PASSED; 401: 	CALCINFO_NATOM....................................................PASSED; 401: 	SCF_ONE_ELECTRON_ENERGY: computed value (-122.2750930) does not match (-122.2750911) to 6 digits.; 401: 	JSON Success......................................................PASSED; 401: 	Result: DIPOLE....................................................PASSED; 401: 	Result: QUADRUPOLE................................................PASSED; 401: 	Result: MULLIKEN_CHARGES..........................................PASSED; 401: 	Result: LOWDIN_CHARGES............................................PASSED; 401: 	Result: WIBERG_LOWDIN_INDICES.....................................PASSED; 401: 	Result: MAYER_INDICES.............................................PASSED; 401: 	CALCINFO_NBASIS...................................................PASSED; 401: 	CALCINFO_NMO......................................................PASSED; 401: 	CALCINFO_NALPHA...................................................PASSED; 401: 	CALCINFO_NBETA....................................................PASSED; 401: 	CALCINFO_NATOM....................................................PASSED; 401: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #401: json-schema_0_properties .........***Failed 1.21 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; json = 1.21 sec*proc (1 test); psi = 1.21 sec*proc (1 test). Total Test time (real) = 1.28 sec. The following tests FAILED:; 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:12159,Error,Errors,12159,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Error'],['Errors']
Availability,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:150,failure,failure,150,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316,1,['failure'],['failure']
Availability,"../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X- - ]; [gw0] [ 72%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[MN12-SX- - ]; [gw8] [ 88%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; [gw9] [ 91%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97- - ]; [gw10] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D- - ]; [gw0] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D3BJ- - ]; [gw2] [ 99%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X- - ]; ```; Most all the trouble are wB97. The B5050 is off in 3rd decimal but most of the other are; ```; E RuntimeError: ; E Fatal Error: Matrix::power: C_DSYEV failed; E Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/matrix.cc on line: 2280; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::Matrix::power(double, double); E psi::DIISManager::extrapolate(int, ...); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:2785,Error,Error,2785,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,2,['Error'],['Error']
Availability,".0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:4838,down,download,4838,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,".000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:2116,Error,Error,2116,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Error'],['Error']
Availability,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11053,error,error,11053,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,2,['error'],['error']
Availability,".3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in `-c psi4/label/dev` for now, not `-c psi4`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:3104,error,error,3104,https://psicode.org,https://github.com/psi4/psi4/issues/1533,2,"['down', 'error']","['downstream', 'error']"
Availability,".6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:3645,down,download,3645,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,".81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1520, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 196, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:1664,error,error,1664,https://psicode.org,https://github.com/psi4/psi4/issues/2571,1,['error'],['error']
Availability,".95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:3624,error,error,3624,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['error'],['error']
Availability,".bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:3914,down,download,3914,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,".cc.o); ...; ""__ZTISt8bad_cast"", referenced from:; __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in libmints.a(basisset_parser.cc.o); ...; ""__ZTISt9bad_alloc"", referenced from:; __ZTIN5boost16exception_detail10bad_alloc_E in libpsio.a(filemanager.cc.o); __ZN5boost6python15instance_holder8allocateEP7_objectmm in libboost_python-1_57.a(class.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZN5boost6python6detail12gcc_demangleEPKc in libboost_python-1_57.a(type_id.o); GCC_except_table3 in libmints.a(eribase.cc.o); GCC_except_table3 in libmints.a(3coverlap.cc.o); __ZN5Eigen8internal19throw_std_bad_allocEv in libpcm.a(Meddle.cpp.o); ...; ""__ZTISt9exception"", referenced from:; __ZTIN5boost2io12format_errorE in libmints.a(molecule.cc.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZTIN6PsiAPI13PsiException2E in libpsiapi.a(BasisSet.cc.o); __ZTIN3psi13PsiException2E in libmolecule.a(FragmentedSys.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskMap.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskStatistics.cc.o); __ZTIN3psi13PsiException2E in libPsiUtil.a(Exception2.cc.o); ...; ""__ZTIa"", referenced from:; __ZN5boost6python9converter29initialize_builtin_convertersEv in libboost_python-1_57.a(builtin_converters.o); ""__ZTIb"", referenced from:; __ZN5boost6python6detail15signature_arityILj3EE4implINS_3mpl7vector4IvRN3psi11PSIOManagerEibEEE8elem",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199#issuecomment-169139808:76455,error,errors,76455,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808,1,['error'],['errors']
Availability,".lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm_，该符号在函数 ""void __cdecl psi::fnocc::DGEMM(char &,char &,long &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMM@fnocc@psi@@YAXAEAD0AEAJ11AEANPEAN131231@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(algebra_interface.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(operation_contraction.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev_，该符号在函数 ""void __cdecl psi::fnocc::DSYEV(char &,char &,long &,double *,long &,double *,double *,long &,long &)"" (?DSYEV@fnocc@psi@@YAXAEAD0AEAJPEAN12211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dsyev_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dspev_，该符号在函数 ""void __cdecl psi::fnocc::DSPEV(char &,char &,long &,double *,double *,double *,long &,double *,long &)"" (?DSPEV@fnocc@psi@@YAXAEAD0AEAJPEAN22121@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvd_，该符号在函数 ""void __cdecl psi::fnocc::DGESVD(char &,char &,long &,long &,double *,long &,double *,double *,long &,double *,long &,double *,long &,long &)"" (?DGESVD@fnocc@psi@@YAXAEAD0AEAJ1PEAN122121211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev_，该符号在函数 opt_asymm_matrix_eig 中被引用; F:\psimrcc.lib(manybody.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(heff_diagonalize.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2019: 无法解析的外部符号 ddot_，该符号在函数 ""public: void __cdecl psi::psimrcc::CCBLAS::diis(int,double,enum psi::psimrcc::DiisType)"" (?diis@CCBLAS@psimrcc@psi@@QEAAXHNW4DiisType@23@@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:8088,error,error,8088,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,".lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26487,error,error,26487,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4177,fault,faults,4177,https://psicode.org,https://github.com/psi4/psi4/issues/2593,3,"['down', 'fault']","['down', 'downgrade', 'faults']"
Availability,"/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:6968,Error,Error,6968,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Error'],['Error']
Availability,"/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Plea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1061,down,down,1061,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['down'],['down']
Availability,/bio/gromacs/bin:/opt/bio/gmap/bin:/opt/bio/tigr/bin:/opt/bio/autodocksuite/bin:/opt/bio/wgs/bin:/opt/eclipse:/opt/ganglia/bin:/opt/ganglia/sbin:/usr/java/latest/bin:/opt/maven/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/opt/condor/bin:/opt/condor/sbin:/opt/gridengine/bin/linux-x64:/home/gaussian/g09/bsd:/home/gaussian/g09/local:/home/gaussian/g09/extras:/home/gaussian/g09:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu:/home/software/psi4conda/bin:/home/software/multiwfn:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu_smp`. `[ch1jgh@xxx ~]$ echo $PYTHONPATH; :/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts:/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts`. `[ch1jgh@xxx ~]$ echo $LD_LIBRARY_PATH ; /home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/tbb/lib/intel64/gcc4.4:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/tbb/lib/intel64/gcc4.4:/home/gaussian/g09/bsd:/home/gaussian/g09/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:4405,echo,echo,4405,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['echo'],['echo']
Availability,"/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:4632,down,download,4632,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"/executable.cpp:459: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:462: undefined reference to `CheMPS2::DMRG::newExcitation(double)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:463: undefined reference to `CheMPS2::DMRG::Solve()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to `CheMPS2::DMRG::deleteStoredOperators()'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to `CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to `CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to `CheMPS2::Irreps::~Irreps()'; collect2: error: ld returned 1 exit status; CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; make[2]: *** [CheMPS2/chemps2] Error 1; CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; make[1]: *** [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ... ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185220619:3748,error,error,3748,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185220619,4,"['Error', 'error']","['Error', 'error']"
Availability,/hmmer/bin:/opt/bio/phylip/exe:/opt/bio/mrbayes:/opt/bio/fasta:/opt/bio/glimmer/bin:/opt/bio/glimmer/scripts:/opt/bio/gromacs/bin:/opt/bio/gmap/bin:/opt/bio/tigr/bin:/opt/bio/autodocksuite/bin:/opt/bio/wgs/bin:/opt/eclipse:/opt/ganglia/bin:/opt/ganglia/sbin:/usr/java/latest/bin:/opt/maven/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/opt/condor/bin:/opt/condor/sbin:/opt/gridengine/bin/linux-x64:/home/gaussian/g09/bsd:/home/gaussian/g09/local:/home/gaussian/g09/extras:/home/gaussian/g09:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu:/home/software/psi4conda/bin:/home/software/multiwfn:/home/software/molden4.0:/home/software/Python-2.7.6/bin:/home/ch1jgh/bin:/home/software/Turbomole/7.1/TURBOMOLE/scripts:/home/software/Turbomole/7.1/TURBOMOLE/bin/em64t-unknown-linux-gnu_smp`. `[ch1jgh@xxx ~]$ echo $PYTHONPATH; :/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts:/export/home/ch1jgh/pbt:/export/home/ch1jgh/scripts`. `[ch1jgh@xxx ~]$ echo $LD_LIBRARY_PATH ; /home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/tbb/lib/intel64/gcc4.4:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/../compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/ipp/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/compiler/lib/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:4263,echo,echo,4263,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['echo'],['echo']
Availability,"/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 2894, in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 197, in scf_initialize; self.form_H(); RuntimeError: ; Fatal Error: PSIO_ERROR: 18 (Incorrect block end address). Practical advice: This error is probably disk related. First, check that your scratch isn’t full.; Second, make sure that you’re setting scratch (""psi4 -s"" or ""export PSI_SCRATCH"") rather than letting it ; default to /tmp. Third, run the job again to see if the error is reproducible.; If it persists, finally, file an issue. Error occurred in file: /home/ubuntu/build/psi4/src/psi4/libpsio/error.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::Matrix::save(psi::PSIO*, unsigned long, psi::Matrix::SaveType); ```. Turns out, this is caused by [not running `psi4.core.clean()` between these calculations](https://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206). To find this function, I took a lucky guess that Psi4 had some kind of cleanup function since independent calculations succeeded. Instead, this should probably be in: https://psicode.org/psi4manual/master/psiapi.html. I am fully willing to submit a PR with this documentation, but I don't have much experience with Psi4/QC knowledge in genera",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3164:2010,Error,Error,2010,https://psicode.org,https://github.com/psi4/psi4/issues/3164,2,"['Error', 'error']","['Error', 'error']"
Availability,"/home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:3908,Error,Error,3908,https://psicode.org,https://github.com/psi4/psi4/issues/1256,2,['Error'],['Error']
Availability,"/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ================================================ 12 passed, 10 skipped, 304 warnings in 43.19 seconds ================================================`; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:83650,error,error,83650,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,3,['error'],['error']
Availability,"/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -g -O0 -debug -DDEBUG -Wall -Wuninitialized -Wno-unknown-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-report -Wall -Wuninitialized ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-group;-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;-openmp;-Wl,--end-group; -- Definitions :",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:4136,avail,available,4136,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['avail'],['available']
Availability,"/master, but it completed okay with psi4/v1.3.2. This is due to the default integral screening threshold (`INTS_TOLERANCE`) changing from 0.0 to 1e-12 for the SCF module. The calculation converges fine when `INTS_TOLERANCE` is reset to 0.0:. ```; memory 64 GB. molecule mol {; 0 1 ; O -1.43902644 2.20001916 0.52666667; C -0.23262529 0.21202727 0.63286928; N -1.24873102 -2.11271381 0.47828968; C -3.7777515 -2.85877768 0.08730535; C -4.46145441 -5.34849185 0.74152853; C -2.56341349 -7.19739989 1.87800982; C -6.94682221 -6.16901094 0.3643392; C -8.75094374 -4.55140537 -0.66556154; C -8.08273658 -2.09627319 -1.33509151; C -5.61324248 -1.25402226 -0.96753978; C 2.6282311 0.28062433 1.05654588; C 3.98467651 2.83553405 0.63381414; N 6.54374363 2.70155247 -0.40515728; C 8.61979675 2.25141971 0.96961847; O 8.56480572 1.89615119 3.26884825; H -0.04232987 -3.54814977 0.82014114; H -3.42815216 -8.99585225 2.39447197; H -1.03934937 -7.57742382 0.54424112; H -1.71851694 -6.40333698 3.5817869; H -7.49559868 -8.07309898 0.86738429; H -10.66693706 -5.20506164 -0.95166608; H -9.47697652 -0.84262888 -2.14880758; H -5.16216486 0.65044373 -1.5435283; H 3.24390387 -0.55898099 2.83213254; H 3.51375676 -1.09698602 -0.19445282; H 3.04888413 3.57366108 -1.05446718; H 3.38827894 4.41440023 1.82490852; H 6.75331425 3.01713673 -2.28241121; H 10.34700643 2.24329388 -0.20333453; symmetry c1; no_com; no_reorient; units bohr; }. # set ints_tolerance 0.0 # uncomment to fix. energy('pbe0/aug-cc-pv_tpd_z'); ```; ~~[screen_zero.out.txt](https://github.com/psi4/psi4/files/5984125/screen_zero.out.txt)~~; ~~[screen_default.out.txt](https://github.com/psi4/psi4/files/5984126/screen_default.out.txt)~~; [failed_jobs.zip](https://github.com/psi4/psi4/files/5985739/failed_jobs.zip). I can post additional similar systems that fail at the same level of theory. Does this warrant changing the `INTS_TOLERANCE` default to a more conservative value? Or is this something that would be fixed by a more robust SCF solver?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114:2048,robust,robust,2048,https://psicode.org,https://github.com/psi4/psi4/issues/2114,1,['robust'],['robust']
Availability,"/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsupported by MBIS !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on !; ! line: 1871 !; ! The most recent 5 function calls were: !; ! psi::OEProp::compute_mbis_multipoles(bool) !; ! psi::OEProp::compute() !; ! !; !----------------------------------------------------------------------------------!; ```. It works fine with `def2-svp`, I doubt whether this is related to an earlier fix for auxiliary basis set for DZVP (https://github.com/psi4/psi4/pull/2134). . Best,; Pavan. Edit: Old PR updated to 2134",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:1969,Error,Error,1969,https://psicode.org,https://github.com/psi4/psi4/issues/2728,2,['Error'],['Error']
Availability,/psi4/../../../libstdc++.so.6:; 		ld-linux-x86-64.so.2 (GLIBC_2.3) => /lib64/ld-linux-x86-64.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libgcc_s.so.1 (GCC_4.2.0) => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libgcc_s.so.1 (GCC_3.3) => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libgcc_s.so.1 (GCC_3.0) => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.2) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgcc_s.so.1:; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/lib64/libc.so.6:; 		ld-linux-x86-64.so.2 (GLIBC_PRIVATE) => /lib64/ld-linux-x86-64.so.2; 		ld-linux-x86-64.so.2 (GLIBC_2.3) => /lib64/ld-linux-x86-64.so.2; 	/home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../.././libhdf5.so.101:; 		libdl.so.2 (GLIBC_2.2.5) => /lib64/libdl.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libpthread.so.0 (GLIBC_2.3.2) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.8) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; 	/home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../.././libz.so.1:; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 	/lib64/librt.so.1:; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_PRIVATE) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.3.2) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_PRIVATE) => /lib64/libc.so.6; ```; psi4; Segmentation fault (core dumped),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690:18679,fault,fault,18679,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690,1,['fault'],['fault']
Availability,"/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:2236,Error,Error,2236,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Error'],['Error']
Availability,"/psi4/src/lib/libfrag/LibFragDriver.cc:116:49: warning: unused parameter 'MethodName' [-Wunused-parameter]; LibFragDriver::LibFragDriver(const std::string& MethodName){; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:183:9: error: no template named 'MPITask'; did you mean 'psi::MPITask'?; typedef MPITask<SharedFrag> Task_t;; ^~~~~~~; psi::MPITask; /Users/francesco/Source/psi4/src/lib/libparallel2/TaskJobGuts/../MPITask.h:50:7: note: 'psi::MPITask' declared here; class MPITask{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:183:17: error: use of undeclared identifier 'SharedFrag'; typedef MPITask<SharedFrag> Task_t;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:184:76: error: unknown type name 'SharedFrags'; static std::vector<Task_t> MakeTasks(const int Start, const int Stop,const SharedFrags& Frags_){; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:186:4: error: unknown type name 'FragItr'; FragItr MonoI,MonoEnd;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:188:7: error: use of undeclared identifier 'MonoEnd'; MonoEnd=Frags_->end(i);; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:189:43: error: use of undeclared identifier 'MonoEnd'; did you mean 'MonoI'?; for (MonoI=Frags_->begin(i); MonoI!=MonoEnd; ++MonoI); ^~~~~~~; MonoI; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:186:12: note: 'MonoI' declared here; FragItr MonoI,MonoEnd;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:238:6: error: use of undeclared identifier 'LibFragDriver'; did you mean; 'psi::LibFrag::LibFragDriver'?; void LibFragDriver::RunCalc(const std::string& MethodName,int Start, int Stop) {; ^~~~~~~~~~~~~; psi::LibFrag::LibFragDriver; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.h:34:7: note: 'psi::LibFrag::LibFragDriver' declared here; class LibFragDriver{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:240:30: error",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/206:1599,error,error,1599,https://psicode.org,https://github.com/psi4/psi4/issues/206,1,['error'],['error']
Availability,"/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:3119,Error,Error,3119,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Error'],['Error']
Availability,"/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected unqualified-id before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘)’ before numeric constant; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘void psi::Table<T, Args>::SetBorder(psi::TableSide, char)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:251: error: invalid type in declaration before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...) [with T = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, Args = psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, psi::TableColumn<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404#issuecomment-224865906:2137,error,error,2137,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906,1,['error'],['error']
Availability,"/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3445,error,error,3445,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:2972,down,download,2972,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"0 HF,LR [omega = 0.3000]; 0.1670 HF . => LibXC Density Thresholds <==. XC_HYB_GGA_XC_WB97X_V: 1.00E-14 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 239042; Total Blocks = 1831; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 9 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-8, 10-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.162 GiB; user supplied 0.162 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 166; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 4.4477; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.161 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5610928795E-04.; Reciprocal condition number of the overlap matrix is 9.8342984140E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -39.70316824232670 -3.97032e+01 0.00000e+00 ; @DF-RKS iter 1: -43.27234536758360 -3.56918e+00 3.69413e-03 ADIIS/DIIS; @",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:9807,Mask,Mask,9807,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Mask'],['Mask']
Availability,0 hdf63c60_0 ; libint 1.2.1 hb4a4fd4_6 psi4; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.3.4 h7b6447c_0 psi4; metis 5.1.0 hf484d3e_4 ; mkl 2019.3 199 ; mkl_fft 1.0.12 py37ha843d7b_0 ; mkl_random 1.0.2 py37hd81dba3_0 ; more-itertools 7.0.0 py37_0 ; ncurses 6.1 he6710b0_1 ; networkx 2.3 pypi_0 pypi; numpy 1.16.3 py37h7e9f1db_0 ; numpy-base 1.16.3 py37hde5b4d6_0 ; openfermion 0.9 py37hd763080_1 psi4; openfermionpsi4 0.4 py37h934b37d_0 psi4; openssl 1.1.1b h7b6447c_1 ; pcmsolver 1.2.1 py37h142c950_0 psi4; pint 0.9 py37_2 psi4; pip 19.1.1 py37_0 ; pluggy 0.11.0 pypi_0 pypi; psi4 1.3.2+ecbda83 py37h31b3128_0 psi4; psi4-rt 1.3.2 py37ha6b60c8_0 psi4; py 1.8.0 py37_0 ; pycosat 0.6.3 py37h14c3975_0 ; pycparser 2.19 py37_0 ; pydantic 0.23 py37_0 psi4; pylibefp 0.4+f42ffb8 py37h7adc81b_1 psi4; pyopenssl 19.0.0 py37_0 ; pysocks 1.7.0 py37_0 ; pytest 4.5.0 py37_0 ; python 3.7.3 h0371630_0 ; qcelemental 0.4.0 pypi_0 pypi; readline 7.0 h7b6447c_5 ; requests 2.21.0 py37_0 ; resp 0.7 py37ha93d1a2_0 psi4; ruamel_yaml 0.15.46 py37h14c3975_0 ; scipy 1.2.1 py37h7c811a0_0 ; setuptools 41.0.1 py37_0 ; simint 0.7 h642920c_1 psi4; six 1.12.0 py37_0 ; snsmp2 1.0.3 py37he403277_2 psi4; sqlite 3.28.0 h7b6447c_0 ; suitesparse 5.2.0 h9e4a6bb_0 ; tbb 2019.4 hfd86e86_0 ; tk 8.6.8 hbc83047_0 ; urllib3 1.24.2 py37_0 ; v2rdm_casscf 0.8 py37hc3560e4_6 psi4; wcwidth 0.1.7 py37_0 ; wheel 0.33.4 py37_0 ; xz 5.2.4 h14c3975_4 ; yaml 0.1.7 had09818_2 ; zlib 1.2.11 h7b6447c_3 ; ```. `echo $PATH` gives; `/opt/gridware//mpi/gcc/openmpi/3.1.4/bin/:/opt/gridware//compilers/gcc/6.2.0//bin/:/users/grte2001/psi4conda/bin:/users/grte2001/psi4conda/condabin:/usr/lib64/qt-3.3/bin:/opt/gridware/ge/bin/lx24-amd64:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/users/grte2001/Multiwfn_3.7_dev_bin_Linux:/users/grte2001/bin`. `echo $PYTHONPATH` gives nothing ; `echo $LD_LIBRARY_PATH` gives; `/opt/gridware//mpi/gcc/openmpi/3.1.4/lib/:/opt/gridware//compilers/gcc/6.2.0//lib:/opt/gridware//compilers/gcc/6.2.0//lib64`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792:2706,echo,echo,2706,https://psicode.org,https://github.com/psi4/psi4/issues/1792,3,['echo'],['echo']
Availability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5529,fault,fault,5529,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,"['alive', 'fault']","['alive', 'fault']"
Availability,"0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325:1753,fault,fault,1753,https://psicode.org,https://github.com/psi4/psi4/issues/1325,1,['fault'],['fault']
Availability,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:2545,error,error,2545,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['error'],['error']
Availability,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:3055,avail,availability,3055,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['avail'],['availability']
Availability,"0000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appears to be thrown from [here in the ccsd.cc program](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L144). It only breaks for small toy systems, and using DETCI provides a nice work-around, but I thought I should mention this anyway. Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828:1458,Error,Error,1458,https://psicode.org,https://github.com/psi4/psi4/issues/828,2,['Error'],['Error']
Availability,"000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:3237,error,errors,3237,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['error'],['errors']
Availability,"0000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:2094,error,error,2094,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['error'],['error']
Availability,"00000000 -7.94755100 0.00000000; H -2.14658900 -6.70243100 0.00000000; H -2.14648500 -4.22841800 0.00000000. }. set scf_type df; set basis aug-cc-pVTZ; set reference uks. mol.update_geometry(); mol.symmetrize(1e-3). energy('b3lyp'); ```. I observe; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; Ag 160 160 ; B1g 130 130 ; B2g 63 63 ; B3g 84 84 ; Au 63 63 ; B1u 84 84 ; B2u 160 160 ; B3u 130 130 ; -------------------------; Total 874 874; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UKS iter SAD: -538.61970612101391 -5.38620e+02 0.00000e+00 . Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 429, in scf_iterate; self.form_C(). RuntimeError: ; Fatal Error: Count 49 alpha electrons, expected 48.; This is a bug. Please file a report.; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/hf.cc on line: 482; ```. Quick counting says that 48 is the expected number of alpha electrons for this system.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594:2666,Error,Error,2666,https://psicode.org,https://github.com/psi4/psi4/issues/2594,2,['Error'],['Error']
Availability,"000000; 57 5000000.000000; 58 6000000.000000; 59 7000000.000000; 60 8000000.000000; 61 9000000.000000; 62 10000000.000000; 63 20000000.000000; 64 30000000.000000; 65 40000000.000000; 66 50000000.000000; 67 70000000.000000; 68 100000000.000000; 69 200000000.000000; 70 300000000.000000; 71 400000000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:2290,error,error,2290,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['error'],['error']
Availability,"0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsv，该符号在函数 ""int __cdecl psi::C_DGBSV(int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBSV@psi@@YAHHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsvx，该符号在函数 ""int __cdecl psi::C_DGBSVX(char,char,int,int,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGBSVX@psi@@YAHDDHHHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrf，该符号在函数 ""int __cdecl psi::C_DGBTRF(int,int,int,int,double *,int,int *)"" (?C_DGBTRF@psi@@YAHHHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrs，该符号在函数 ""int __cdecl psi::C_DGBTRS(char,int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBTRS@psi@@YAHDHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebak，该符号在函数 ""int __cdecl psi::C_DGEBAK(char,char,int,int,int,double *,int,double *,int)"" (?C_DGEBAK@psi@@YAHDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebal，该符号在函数 ""int __cdecl psi::C_DGEBAL(char,int,double *,int,int *,int *,double *)"" (?C_DGEBAL@psi@@YAHDHPEANHPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:17488,error,error,17488,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"0007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1713D Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C19158 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1919B Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C40C5A Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C0C27D Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FD99 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C19158 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1919B Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C3E410 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C3FA03 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C5ACE7 Unknown Unknown Unknown; python 0000000000400BBD Unknown Unknown Unknown; libc.so.6 00000034CEC1ED5D Unknown Unknown Unknown; python 0000000000400999 Unknown Unknown Unknown; ```; This is the error message. The node memory is 256 GB. I have run another system with a similar number of atoms at the same level of theory and it finished normally on this node. I have run this system at sSAPT0 level, which has also finished normally. Here is a copy of the input file; ```; memory 256 GB. molecule dimer {; 0 1; C	33.53728	36.41505	90.62589; C	33.90406	36.81886	89.19581; O	35.09473	36.87670	88.87973; H	32.47104	36.21876	90.76503; H	34.11454	35.52935	90.89115; H	33.84377	37.22581	91.29056; N	32.90475	37.13782	88.34874; C	33.15782	37.60052	86.97934; C	33.86886	38.96454	87.03422; O	34.80991	39.18532	86.28033; C	31.84528	37.71848	86.17268; C	32.03912	38.31152	84.79977; C	32.40330	37.64936	83.66144; C	31.91466	39.69401	84.43479; N	32.47754	38.52922	82.60241; C	32.22560	39.79734	83.05872; C	31.60991	40.86835	85.14938; C	32.23753	41.02592	82.38040; C	31.61276	42.08300	84.47411; C	31.93451	42.15430	83.10915; H	31.95003	36.90694	88.59560; H	33.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:3318,error,error,3318,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['error'],['error']
Availability,"00; 54 2000000.000000; 55 3000000.000000; 56 4000000.000000; 57 5000000.000000; 58 6000000.000000; 59 7000000.000000; 60 8000000.000000; 61 9000000.000000; 62 10000000.000000; 63 20000000.000000; 64 30000000.000000; 65 40000000.000000; 66 50000000.000000; 67 70000000.000000; 68 100000000.000000; 69 200000000.000000; 70 300000000.000000; 71 400000000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose hap",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:2205,error,error,2205,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['error'],['error']
Availability,"00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrf，该符号在函数 ""int __cdecl psi::C_DPOTRF(char,int,double *,int)"" (?C_DPOTRF@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotri，该符号在函数 ""int __cdecl psi::C_DPOTRI(char,int,double *,int)"" (?C_DPOTRI@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrs，该符号在函数 ""int __cdecl psi::C_DPOTRS(char,int,int,double *,int,double *,int)"" (?C_DPOTRS@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppcon，该符号在函数 ""int __cdecl psi::C_DPPCON(char,int,double *,double,double *,double *,int *)"" (?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpprfs，该符号在函数 ""int __cdecl psi::C_DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:34781,error,error,34781,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,00[fa]fa fa; 0x0c068006f8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raim,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17738,ERROR,ERROR,17738,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['ERROR'],['ERROR']
Availability,"02) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (#2245); - Fix bug whereby MP2 cube files through OCC segfaulted (#2249); - Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); - Fix normalization issue in Molden files (#2229); - Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262) . ## Known Bugs; - Find them and tell us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:13658,error,error,13658,https://psicode.org,https://github.com/psi4/psi4/issues/1562,4,['error'],['error']
Availability,"023. Wall Time: 0.52 seconds. Time (seconds); Module User System Wall Calls. --------------------------------------------------------------------------------------; ```; In all of these problematic timer.dat files, the host name is truncated and ends with a random assortment of bytes. In the above example, the full host name should be `ip-172-31-XX-XXX.us-east-2.compute.internal`. We then examined how psi4 determines and processes the host name. It turns out, psi4 uses the `gethostname` function from the C API to get up to the first 40 bytes of the host name, and then it writes those bytes to `timer.dat`. The host name of this particular compute cluster is over 40 chars/bytes. This is unsafe because if a host name has more than 40 characters, the null byte (`\0`) won't be written to `timer.dat` to signify the end of the string, and psi4 will continue to write whatever is in memory past the 40 chars/bytes until it hits a null byte. This also explains the original error, b/c writing random bytes to a file can lead to non-utf-8-compliant files. It turns out that [linux defines a maximum host name length of 64](https://man7.org/linux/man-pages/man2/gethostname.2.html), so the easy fix here is to just increase the size of the host name buffer from 40 to 65 (== 64 + 1 for the null byte at the end). I have no idea why this length was previously limited to 40. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fix bug resulting in `UnicodeDecodeError` and corrupted `timer.dat` files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] increase the buffer size used to retrieve the host name and enforce that the host name ends in a null byte before writing to `timer.dat`. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:2736,error,error,2736,https://psicode.org,https://github.com/psi4/psi4/pull/3043,1,['error'],['error']
Availability,"02aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308; C -0.013127 1.729838 -1.697308; H 1.809881 0.565636 -1.697308; H 0.620767 -1.623659 -1.697309; H -1.869768 -1.688580 -1.697309; H -3.171240 0.435884 -1.697309; H 0.508409 2.690100 -1.697308; C -2.142628 2.887174 -1.697308; N -2.730222 3.885021 -1.697308; symmetry c1; }. set optking {; frag_mode multi; }; set basis cc-pVDZ; optimize('blyp-d3bj'); ```; Running the same job with ""frag_mode single"", or with ""frag_mode multi"" with ""opt_coordinates cartesian"", ran for multiple opt steps (until I killed it) without giving a seg fault. I'll dig further but suspect others might have more of an idea of where to look.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680:3596,fault,fault,3596,https://psicode.org,https://github.com/psi4/psi4/issues/680,1,['fault'],['fault']
Availability,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:2043,error,error,2043,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,1,['error'],['error']
Availability,"04296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:1990,error,error,1990,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['error'],['error']
Availability,"06/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_16206",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:1906,ERROR,ERROR,1906,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['ERROR'],['ERROR']
Availability,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:2120,error,error,2120,https://psicode.org,https://github.com/psi4/psi4/issues/1311,27,['error'],['error']
Availability,"0; C 4.020 0.000 0.000; C 5.422 0.000 0.000; C 8.214 0.000 0.000; C 7.516 1.209 0.000; C 6.120 1.209 0.000; C 6.120 -1.209 0.000; C 7.516 -1.209 0.000; H 8.058 2.147 0.000; H 5.578 2.147 0.000; H 9.297 0.000 0.000; H 5.578 -2.147 0.000; H 8.058 -2.147 0.000. symmetry c1; units angstrom; }. set globals {; reference rhf; basis cc-pvdz ; #freeze_core true; scf_type out_of_core; dipmom true; num_roots 4; }. set scf d_convergence 10; set detci e_convergence 8. thisenergy = energy('fci'). ---. I am getting this erorr and i am not able to correct this. any one can help me ? . PSIO_ERROR: unit = 41, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 58, in <module>; File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; psi4.transqt2(); RuntimeError: PSIO Error; file: /home/psi4.0b5/src/lib/libpsio/error.cc; ## line: 116. Output File. ```; -----------------------------------------------------------------------; PSI4: An Open-Source Ab Initio Electronic Structure Package; PSI 4.0.0-beta5 Driver. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Process ID: 4249; PSI4DATADIR: /usr/local/psi4/share/psi. Using LocalCommunicator (Number of processes = 1). Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # Finding of 30 higher roots(i.e excited states) and then finding transition dipole moment from ground sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:1632,error,error,1632,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['error'],['error']
Availability,"0>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawText",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:20681,error,error,20681,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['error'],['error']
Availability,"0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error L",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31630,error,error,31630,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormhr，该符号在函数 ""int __cdecl psi::C_DORMHR(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMHR@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormlq，该符号在函数 ""int __cdecl psi::C_DORMLQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMLQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31200,error,error,31200,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"0HPEAH0000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsja，该符号在函数 ""int __cdecl psi::C_DTGSJA(char,char,char,int,int,int,int,int,double *,int,double *,int,double,double,double *,double *,double *,int,double *,int,double *,int,double *,int *)"" (?C_DTGSJA@psi@@YAHDDDHHHHHPEANH0HNN000H0H0H0PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsna，该符号在函数 ""int __cdecl psi::C_DTGSNA(char,char,int,double *,int,double *,int,double *,int,double *,int,double *,double *,int,int *,double *,int,int *)"" (?C_DTGSNA@psi@@YAHDDHPEANH0H0H0H00HPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsyl，该符号在函数 ""int __cdecl psi::C_DTGSYL(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptrs，该符号在函数 ""int __cdecl psi::C_DTPTRS(char,char,char,int,int,double *,double *,int)"" (?C_DTPTRS@psi@@YAHDDDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrcon，该符号在函数 ""int __cdecl psi::C_DTRCON(char,char,char,int,double *,int,double *,double *,int *)"" (?C_DTRCON@psi@@YAHDDDHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrevc，该符号在函数 ""int __cdecl psi::C_DTREVC(char,char,int,double *,int,doub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:51454,error,error,51454,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"1 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; - [X] Computes disk DF-MP2-F12/3C(FIX) energy. ## Questions; - [ ] I am unsure if I have done the disk implementation correctly.; - [ ] The max RAM usage for the conventional is quite large. I could use some suggestions on how to get this down.; - [ ] The conventional MP2-F12/3C(FIX) is not as usable as I would like with the high max RAM usage and slow integral computation. DF-MP2-F12/3C(FIX) is recommended over the conventional.; - [ ] This version of DF-MP2-F12/3C(FIX) uses a more robust scheme than ORCA and MPQC for the density-fitting. . ## Checklist; - [x] Documentation; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:3298,down,down,3298,https://psicode.org,https://github.com/psi4/psi4/pull/3110,2,"['down', 'robust']","['down', 'robust']"
Availability,"1, in cubeprop; cp.compute_properties(). RuntimeError: ; Fatal Error: FRONTIER_ORBITALSis an unrecognized PROPERTY_TASKS value; Error occurred in file: /build/psi4-XGp1km/psi4-1.1/psi4/src/psi4/libcubeprop/cubeprop.cc on line: 196; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::CubeProperties::compute_properties(); pybind11::cpp_function::initialize<pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}, void, psi::CubeProperties*, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}&&, void (*)(psi::CubeProperties*), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(pybind11::detail::function_record*, pybind11::handle, pybind11::detail::function_record*, pybind11::detail::function_record*)#3}::_FUN(pybind11::detail::function_record, pybind11::detail::function_record*, pybind11::detail::function_record*, pybind11::detail::function_record*); pybind11::cpp_function::dispatcher(_object*, _object*, _object*)`. I have tried running a smaller molecule with no cubeprop_task specified which runs fine and produces lots of cube files correctly. Sadly I do not have the disk space to do this for larger molecules. I'll dig around into the problem myself but thought it a good idea to point this out here. Feel free to close if I have missed a glaring error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722:2606,error,error,2606,https://psicode.org,https://github.com/psi4/psi4/issues/1722,1,['error'],['error']
Availability,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:211,toler,tolerance,211,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926,2,['toler'],['tolerance']
Availability,"1. Psi doesn't tabulate these, and I've mostly seen them for DFT. Scaling factors handy for getting oriented with a vib spectrum, but they're not uniquely determined for a method/basis.; 2. Yes, IR intensities are available as of psi4 1.6 in late May provided analytic gradients are available (as opposed to Hessian by finite difference of energies).; 3. I'm not sure what ""mode"" you were looking at. I can clarify if you post a link. Once upon a time, there was a `frequency(..., mode=(continuous|sow|reap))` but that had to do with farming out finite difference jobs and is now defunct anyways. There's `irrep` https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1511-L1517 that allows a partial frequency job for only a symmetry subset. Example here https://github.com/psi4/psi4/blob/master/tests/fd-freq-gradient/input.dat#L75 . There's no singling out of particular modes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1225919509:214,avail,available,214,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1225919509,2,['avail'],['available']
Availability,"1. The key phrase here is _would give us_. The capabilities aren't there yet. This is GauXC. I know this was a feature they desired, but I don't know how close it is to being complete. My guess is that things are, as always, not going as optimistically as they would like.; 2. Psi4 1.9.1 should not raise this error. You're saying that the input; ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check', 'basis_guess': 'true'}); mol = psi4.geometry(""""""; symmetry c1; 0 3; O; """""");; psi4.energy('PBE/6-31G', molecule=mol); ```; gave you `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`? Can you double-check and post the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042:310,error,error,310,https://psicode.org,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042,1,['error'],['error']
Availability,1.2rc2 was tagged last week. Please try it out and report problems here on GitHub. Linux installers and packages available from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-391862109:113,avail,available,113,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-391862109,1,['avail'],['available']
Availability,"1.30113970569431E+01 1.19978051198750E+01; H 1.44424504488042E+01 1.30589832954827E+01 1.29686420001814E+01; H 1.51761320099903E+01 1.34867010754835E+01 1.16393171667026E+01; }. set {; freeze_core true; scf_type df; mp_type df; basis aug-cc-pvtz; DF_BASIS_MP2 cc-pVQZ-RI; }. energy('mp2.5'); ```. Failure:. ```; ==============================================================================; ==============================================================================; ==============================================================================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. Traceback (most recent call last):; File ""/home/416653/PSI4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/home/416653/PSI4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 456, in select_mp2p5; return func(name, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 1607, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""FREEZE_CORE"", ""true""); core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:3831,Avail,Available,3831,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['Avail'],['Available']
Availability,"10807957900 0.000000000103; > C -1.260557226131 1.493619582118 -0.000000000155; > C -0.000034659568 0.759625960521 -0.000000000159; > C -0.000034625713 -0.759624178218 -0.000000000042; > H -5.916030845275 -1.282197811131 -0.000000001395; > H -5.916031258658 1.282196125448 -0.000000001329; > H -3.903819438194 2.368212991154 -0.000000000840; > H -3.903818961364 -2.368213684326 -0.000000000900; > H -3.380202809742 -3.532377155298 0.000000000843; > H -3.323483157889 -5.783256218484 0.000000001017; > H -1.123533880262 -7.010678898257 0.000000000718; > H 1.123569529821 -7.010687056820 0.000000000512; > H 3.323444251476 -5.783425057171 0.000000000238; > H 3.380590817837 -3.532764155114 0.000000000007; > H 3.903306158089 -2.368093837703 -0.000000000251; > H 5.915904268397 -1.282153443029 -0.000000000487; > H 5.915904332310 1.282151831717 -0.000000000600; > H 3.903306767856 2.368091938384 -0.000000000491; > H 3.380592041773 3.532764158212 -0.000000000516; > H 3.323445571900 5.783426049843 -0.000000000059; > H 1.123570392243 7.010688579024 0.000000000716; > H -1.123534819764 7.010680587949 0.000000001092; > H -3.323484052934 5.783257818228 0.000000001355; > H -3.380204830685 3.532377523087 0.000000001020; > }; > set basis 6-31g; > set reference rhf; > set scf_type DIRECT; > set e_convergence 1e-10; > set d_convergence 1e-8; > set ints_tolerance 0.0; > ; > set dmrg_irrep 0; > set dmrg_multiplicity 1; > set restricted_docc [105,0]; > set active [0,38]; > ; > set dmrg_sweep_states [200, 400, 600, 800]; > set dmrg_sweep_energy_conv [1e-6, 1e-6, 1e-8, 1e-10]; > set dmrg_sweep_dvdson_rtol [1e-5, 1e-5, 1e-5, 1e-8]; > set dmrg_sweep_max_sweeps [10, 10, 8, 6]; > set dmrg_sweep_noise_prefac [0.05, 0.05, 0.05, 0.0]; > set dmrg_scf_active_space loc; > set dmrg_scf_max_iter 100; > set dmrg_mps_write true; > ; > energy(""dmrg-ci""). I believe this might be a memory issue because this exact input file but with the sto-3g basis runs as expected, ""upgrading"" the basis set introduces this error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102#issuecomment-772517025:3842,error,error,3842,https://psicode.org,https://github.com/psi4/psi4/issues/2102#issuecomment-772517025,1,['error'],['error']
Availability,"12 0.000000; }. set basis def2-sv(p). optimize('pbe0'). With the lastest numpy 1.16.3 from conda, I get ""; Traceback (most recent call last):; File ""/home/psi4/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 691, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2064, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1289, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 156, in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/npyio.py"", line 447, in load; pickle_kwargs=pickle_kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/format.py"", line 692, in read_array; raise ValueError(""Object arrays cannot be loaded when "". ValueError: Object arrays cannot be loaded when allow_pickle=False; "". When I downgrade to 1.16.2, I get no error. Release note of numpy 1.16.3: ; ""The most noticeable change in this release is that unpickling object arrays; when loading *.npy or *.npz files now requires an explicit opt-in.; This backwards incompatible change was made in response to; CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>_.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610:1758,down,downgrade,1758,https://psicode.org,https://github.com/psi4/psi4/issues/1610,2,"['down', 'error']","['downgrade', 'error']"
Availability,"171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""rohf""); core.set_global_option(""INTS_TOLERANCE"", 1e-14); core.set_global_option(""D_CONVERGENCE"", 5e-9); core.set_global_option(""E_CONVERGENCE"", 1e-10); core.set_local_option(""CCENERGY"", ""MAXITER"", 2); --> energy('BCCD(T)'). Psi4 stopped on: Friday, 10 April 2020 10:27PM; Psi4 wall time for execution: 0:00:27.38. *** Psi4 encountered an error. Buy a developer more coffee!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864:1706,Error,Error,1706,https://psicode.org,https://github.com/psi4/psi4/issues/1864,3,"['Error', 'error']","['Error', 'error']"
Availability,"19: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *)"" (?C_DSYSVX@psi@@YAHDDHHPEANH0HPEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrd，该符号在函数 ""int __cdecl psi::C_DSYTRD(char,int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@YAHDHPEANH0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrf，该符号在函数 ""int __cdecl psi::C_DSYTRF(char,int,double *,int,int *,double *,int)"" (?C_DSYTRF@psi@@YAHDHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47725,error,error,47725,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc.; **********************************************************************; ```. As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:1969,Error,Error,1969,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['Error'],['Error']
Availability,2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	188 - mints9 (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	331 - dftd3-grad (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:4828,Error,Errors,4828,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Error'],['Errors']
Availability,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:4148,Error,Error,4148,https://psicode.org,https://github.com/psi4/psi4/issues/1328,5,"['Error', 'error']","['Error', 'error']"
Availability,"2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"". -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -ftree-vectorize -march=corei7-avx -mavx -fopenmp -O3; -- Fortran compiler flags: -fcray-pointer -DVAR_GFORTRAN -DVAR_MFDS -fno-range-check -fautomatic -fPIC -fimplicit-none -ftree-vectorize -m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:7544,Error,Error,7544,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Error'],['Error']
Availability,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3938,robust,robust,3938,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['robust'],['robust']
Availability,"2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for some states, the energies reported are near exact:; ```; Lit: 9.63 eV; Psi4: 9.6455240 eV; QChem: 9.631168 eV; ```; for others, the excitation energy deviates as much as 0.08 eV:; ```; Lit: 15.33 eV; Psi4: 15.2573251 eV; QChem: 15.318842 eV; ```. ### **N2**; In the case of the N2 system, we again saw no errors in the ADC(1) results. QChem continues to be able to reproduce excitation energies for ADC(2) calculations, but in Psi4, for several states in the ADC(2) calculation, we see warnings about a strongly rotated CIS state and zero eigenvalues. ### **Psi4 1.3.2 -- N2 ADC(2) excitation energies**; ```; 1 Ag state : 0.9479767 (a.u.), 25.7957601 (eV); 2 Ag state : 1.0193053 (a.u.), 27.7367101 (eV); #WARNING: Strongly rotated from the CIS state!; 3 Ag state : 1.0706909 (a.u.), 29.1349838 (eV); #WARNING: Strongly rotated from the CIS state!; 4 Ag state : 1.1395201 (a.u.), 31.0079202 (eV). 1B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 2B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 3B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 4B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!. 1B2g state :",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:3642,error,errors,3642,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['error'],['errors']
Availability,"282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D0BACD Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D2109A Unknown Unknown Unknown; core.cpython-37m- 00007F7B3383BB3F Unknown Unknown Unknown; python3.7 000055AADA9716E4 _PyMethodDef_RawF Unknown Unknown; python3.7 000055AADA971801 _PyCFunction_Fast Unknown Unknown; python3.7 000055AADA9CD2BC _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055AADA970A27 _PyFunction_FastC Unknown Unknown; python3.7 000055AADA9C8846 _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055AADA90F3C4 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055AADA90F3EC PyEval_EvalC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:2078,fault,fault,2078,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['fault'],['fault']
Availability,"296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid sp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:2042,error,error,2042,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['error'],['error']
Availability,"2; cosx_spherical_points_final 146; cosx_radial_points_final 50; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole34/Documents/Codes/psi4/psi4/src/psi4/libmints/matrix.cc !; ! on line: 1715 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::diagonalize(psi::Matrix&, psi::Vector&, psi::diagonalize_order) !; ! !; !----------------------------------------------------------------------------------!; ```. Various things can be switched, with equally varying effects:; * Switching the COSX_PRUNING_SCHEME from ROBUST to TREUTLER fixes these calculations.; * Switching from 146 sphe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:1691,robust,robust,1691,https://psicode.org,https://github.com/psi4/psi4/issues/2890,1,['robust'],['robust']
Availability,"2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:3781,down,download,3781,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:2642,Error,Error,2642,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['Error'],['Error']
Availability,"3896681495E+01; H 1.74208808173953E+01 9.58447870262053E+00 1.16469328356722E+01; O 2.10924406367978E+01 1.68832684376857E+01 1.20029556700182E+01; H 2.11724374304327E+01 1.69344491039565E+01 1.29747092928667E+01; H 2.19127120650509E+01 1.73649867268274E+01 1.16495241352093E+01; O 1.66001175009873E+01 1.68847213502115E+01 1.20018639379116E+01; H 1.66863065463536E+01 1.69318387695251E+01 1.29733879832984E+01; H 1.74208858618342E+01 1.73652789519844E+01 1.16468995475923E+01; O 1.88431375700750E+01 1.30109988980166E+01 1.19983531520136E+01; H 1.89282402555765E+01 1.30611209267480E+01 1.29697750466024E+01; H 1.96664898627493E+01 1.34868752802308E+01 1.16416190108971E+01; O 1.43526763532959E+01 1.30113970569431E+01 1.19978051198750E+01; H 1.44424504488042E+01 1.30589832954827E+01 1.29686420001814E+01; H 1.51761320099903E+01 1.34867010754835E+01 1.16393171667026E+01; }. set {; freeze_core true; scf_type df; mp_type df; basis aug-cc-pvtz; DF_BASIS_MP2 cc-pVQZ-RI; }. energy('mp2.5'); ```. Failure:. ```; ==============================================================================; ==============================================================================; ==============================================================================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. Traceback (most recen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:3140,Failure,Failure,3140,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['Failure'],['Failure']
Availability,"3N-6 = 30 SALCs. There is no symmetry to exploit, as recognized or not by libmints. Here are the 3 point formulas O(1/h^2):; For diagonal:; [f(1,0) + f(-1,0) - 2f(0,0)]/(h^2); Off-diagonal; [f(1,1)+f(-1,-1)+2f(0,0) -f(1,0) -f(-1,0) -f(0,1) -f(0,-1)]/(2h^2). So the diagonal of the Hessian costs 30*2 = 60.; The off-diagonal costs an additional (29 \* 30 / 2 = 465 entries) times 2 = 870.; If there is an error, it is in libmints symmetry detection - not findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122013214:404,error,error,404,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122013214,1,['error'],['error']
Availability,"3_0 conda-forge; setuptools 61.2.0 py38haa95532_0; sqlite 3.38.3 h2bbff1b_0; tk 8.6.12 h8ffe710_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; vc 14.2 h21ff451_1; vs2015_runtime 14.27.29016 h5e58377_2; wheel 0.37.1 pyhd3eb1b0_0; wincertstore 0.2 py38haa95532_2; xz 5.2.5 h62dcd97_1 conda-forge; yaml 0.2.5 h8ffe710_2 conda-forge; zipp 3.8.0 pyhd8ed1ab_0 conda-forge; ```. Manually updating pydantic with `pip install -U pydantic`, installs version 1.9.1 and then running `psi4 --test` gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectiv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:3013,ERROR,ERRORS,3013,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['ERROR'],"['ERROR', 'ERRORS']"
Availability,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1615,failure,failures,1615,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,2,"['error', 'failure']","['error', 'failures']"
Availability,"4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; I'll have a poke about to see if I can get it to build, either within the main psi4 build or stand alone ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1564,error,errors,1564,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,2,"['down', 'error']","['downstream', 'errors']"
Availability,"4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: ; ```. Unlike the test cases that come with PSI4, this input explicitly refers to a basis set for the initial guess: cc-pvdz. (That may seem a heavy-handed choice but we found it to be more robust when processing databases of molecular dimers.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484:2351,robust,robust,2351,https://psicode.org,https://github.com/psi4/psi4/issues/484,1,['robust'],['robust']
Availability,"4); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2217,failure,failure,2217,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['failure'],['failure']
Availability,"4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-confi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:4193,Error,Error,4193,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['Error'],['Error']
Availability,"4002487283383; 3 0.00000000000000 -0.00000000000000 -0.00008207795130; 4 -0.01223116065955 -0.00000000000000 -0.00731033118319; 5 0.01223116065955 0.00000000000000 -0.00731033118319; 6 -0.00012619424214 -0.00130983621357 0.00002545245078; 7 -0.00012619424214 0.00130983621357 0.00002545245078; 8 0.00012619424214 0.00130983621357 0.00002545245078; 9 0.00012619424214 -0.00130983621357 0.00002545245078. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02542132788092; 2 0.00000000000000 0.00000000000000 0.04001842268283; 3 0.00000000000000 0.00000000000000 -0.00008157403367; 4 -0.01223146212679 0.00000000000000 -0.00730812502865; 5 0.01223146212679 0.00000000000000 -0.00730812502865; 6 -0.00012673181204 -0.00131081707156 0.00002518232226; 7 -0.00012673181204 0.00131081707156 0.00002518232226; 8 0.00012673181204 0.00131081707156 0.00002518232226; 9 0.00012673181204 -0.00131081707156 0.00002518232226; ```. ---. A large part of the error comes from remaining XC grid errors. Removing the XC component and switching to the following functional:. ```; func = {; ""name"": ""random"",; ""x_hf"": {; ""alpha"": 0.6,; ""beta"": 1.0,; ""omega"": 0.2; },; ""c_functionals"": {}; }; ```. We get:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00751539716985; 2 0.00000000000000 -0.00000000000000 -0.11630695396167; 3 0.00000000000000 0.00000000000000 -0.01206645849208; 4 0.03096553875899 0.00000000000000 0.01320113763483; 5 -0.03096553875899 -0.00000000000000 0.01320113763483; 6 0.03065040266884 0.05175861616944 0.02361393500320; 7 0.03065040266884 -0.05175861616944 0.02361393500320; 8 -0.03065040266884 -0.05175861616944 0.02361393500320; 9 -0.03065040266884 0.05175861616944 0.02361393500320. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00751479730193; 2 0.00000000000000 0.00000000000000 -0.11630874980790; 3 0.00000000000000 0.000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043#issuecomment-397310129:1786,error,error,1786,https://psicode.org,https://github.com/psi4/psi4/pull/1043#issuecomment-397310129,2,['error'],"['error', 'errors']"
Availability,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2029,avail,available,2029,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,3,"['avail', 'error', 'toler']","['available', 'error', 'tolerances']"
Availability,"4218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.00081633836046; 5 0.00080665975793 0.00000000000000 -0.00081633836046; 6 -0.00151005119180 -0.00585353047813 -0.00140640315084; 7 -0.00151005119180 0.00585353047813 -0.00140640315084; 8 0.00151005119180 0.00585353047813 -0.00140640315084; 9 0.00151005119180 -0.00585353047813 -0.00140640315084; ```; It does look like we can re-enable the exact integral methods in the driver, but the DF bug is still present. Thankfully DF cannot be run without code modifications, so users will never see that faulty DF gradients. I bet it's an easy one to figure out - should be a good candidate for the next hackathon unless somebody gets to it before then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351422094:2821,fault,faulty,2821,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094,2,['fault'],['faulty']
Availability,"48886 -2.2974156084 2.1731147635; H 2.9070579021 0.6633160437 0.4892159706; H 3.2587884244 -0.9572243350 -3.3447119335; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: c1; Full point group: C1; ```; But then when it starts going again, this is happening. ```; Name: DEF2-TZVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2, 5-7, 10 entry C line 123 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 3-4, 8-9, 11-13 entry O line 189 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 14-21 entry H line 15 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs. Reading orbitals from file /tmp/citric_acid_B3LYP-D3_def2-tzvp_psi4_geom_opt.py.dimer_0_0.23437.180.npy, no projection. ==> Integral Setup <==. DFHelper Memory: AOs need 1.457 GiB; user supplied 24.990 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 20; Memory [MiB]: 25589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Ener",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:3817,Mask,Mask,3817,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914,1,['Mask'],['Mask']
Availability,"4942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.12121680 1 -399.44122431 1; HEAVY28-18 2.2000 2.1130 -0.0870 -0.3641 -702.97644274 -1 -242.12121680 1 -460.85185870 1; HEAVY28-19 2.0700 1.9609 -0.1091 -0.4563 -2816.96828346 -1 -242.12121680 1 -2574.84394169 1; HEAVY28-20 1.6400 1.1654 -0.4746 -1.9859 -540.53025230 -1 -242.12121680 1 -298.40717839 1; HEAVY28-22 0.5800 -0.0821 -0.6621 -2.7702 -538.61694704 -1 -269.30853894 2; HEAVY28-24 0.5000 -0.0901 -0.5901 -2.4690 -668.74961966 -1 -269.30853894 1 -399.44122431 1; HEAVY28-25 1.2400 0.7192 -0.5208 -2.1790 -730.16154377 -1 -269.30853894 1 -460.85185870 1; HEAVY28-26 1.2400 0.7729 -0.4671 -1.9542 -2844.15371239 -1 -269.30853894 1 -2574.84394169 1; HEAVY28-27 0.8400 0.2215 -0.6185 -2.5876 -567.71607039 -1 -269.30853894 1 -298.40717839 1; --------------------------------------------------------------------------------------------------------------------------; Minimal Dev 0.0156 0.0653; Maximal Dev -1.2548 -5.2502; Mean Signed Dev -0.5805 -2.4287; Mean Absolute Dev 0.5965 2.4956; RMS Dev 0.6837 2.8605; --------------------------------------------------------------------------------------------------------------------------; ```; when col ""Energy Calc"" should match http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN30/funcsGMTKN30/HEAVY28B3LYP.html. Sorry, that's D2 vs D3, will post correction shortly. Just wanted to make materials available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-326351281:3213,down,downloads,3213,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281,2,"['avail', 'down']","['available', 'downloads']"
Availability,"4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void __cdecl psi::fnocc::DGESV(long &,long &,double *,long &,long *,double *,long &,long &)"" (?DGESV@fnocc@psi@@YAXAEAJ0PEAN0PEAJ100@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm_，该符号在函数 ""void __cdecl psi::fnocc::DGEMM(char &,char &,long &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMM@fnocc@psi@@YAXAEAD0AEAJ11AEANPEAN131231@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(algebra_interface.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(operation_contraction.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev_，该符号在函数 ""void __cdecl psi::fnocc::DSYEV(char &,char &,long &,double *,long &,double *,double *,long &,long &)"" (?DSYEV@fnocc@psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:6996,error,error,6996,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"5 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.2846300601959229; C 0.5650341510772705 0.6324429512023926 -1.1073341369628906; H 1.0022953748703003 1.1210383176803589 -1.9738258123397827; H -0.46503451466560364 -0.8350303173065186 -2.2904675006866455; H -0.9999359846115112 -1.117483139038086 1.977584958076477; H 0.46812179684638977 0.8390328884124756 2.2878639698028564; H 1.9390827417373657 2.4920878410339355 -0.5236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:2826,fault,fault,2826,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['fault'],['fault']
Availability,"5 ; (n = 1): 275 ; Row and column block dimensions of B; (n = 1): 276 ; (n = 1): 275 ; Row and column block dimensions of C; (n = 1): 275 ; (n = 1): 275 ; Asym: 0, Bsym: 0, Csym: 0; Mismatch in index Ha = 0; ```. Additionally, the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timings/debug/psi4test/psi4_ccsdt.py"", line 28, in <module>; e = psi4.energy(model, molecule=mol); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 989, in select_ccsd_t_ return func(name, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2898, in run_ccenergy core.cctransort(ref_wfn); RuntimeError: ; Fatal Error: Matrix::gemm error: Number of rows and columns do not match.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/libmints/matrix.cc on line: 1389The most recent 5 function calls were:. psi::Matrix::gemm(bool, bool, double, psi::Matrix const*, psi::Matrix const*, double); psi::Matrix::transform(psi::Matrix const&, psi::Matrix const&, psi::Matrix const&); ```. I am not technically knowledgeable enough to interpret the information about the 'A', 'B', and 'C' matrices in the log file, but it seems like the problem is that their dimensions do not match. Additionally, I can also report that the calculation works if ANY of the following changes are made to the input:; 1) The ghost atoms are removed.; 2) The non-augmented basis set is used. (cc-pvtz rather than aug-cc-pvtz); 3) If {'cc_type': 'df'} is passed to psi4.set_options() to do density-fitted coupled cluster. I installed the stable branch of psi4 through anaconda, I have version ""1.7+6c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:2629,Error,Error,2629,https://psicode.org,https://github.com/psi4/psi4/issues/2916,2,"['Error', 'error']","['Error', 'error']"
Availability,"5000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584; *** at Mon Feb 17 12:17:52 2014. PSI4 interface to MRCC:; Generating inputs for CCSD(T)_L. Automatically determined settings:; method 4; exlevel 3; fullname CCSD(T)_L. Orbital Information:. Frozen Core [ 24]; Active DOCC [ 70]; SOCC [ 0]; Frozen Virtual [ 0]. Total MOs [ 690]. Beginning integral transformation.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 5; ```. Stderr. ```; iwl_buf_init: Can't open file 33; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 72, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2111, in run_mrcc; psi4.mrcc_generate_input(level); RuntimeError: PSIO Error; file: /short/z00/cyl900/psi4/psi4public/src/lib/libpsio/error.cc; line: 116; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:2913,Error,Error,2913,https://psicode.org,https://github.com/psi4/psi4/issues/35,2,"['Error', 'error']","['Error', 'error']"
Availability,"506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_ba",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:2095,ERROR,ERROR,2095,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['ERROR'],['ERROR']
Availability,"6, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 84, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 918, in construct; raise BasisSetNotFound('BasisSet::construct: Unable to find a basis set for atom %d for key %s among:\n%s' % \. psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['C']; Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)]; File Path: /home/tony/test_psi4_jobs/test_restart, /home/tony/test_psi4_jobs/test_restart, /home/tony/psi4conda/share/psi4/basis; Input Blocks:. Printing out the relevant lines from the Psithon --> Python processed input file:; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; """"""); core.IO.set_default_namespace(""""); --> nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""). !----------------------------------------------------------------------------------!; ! !; ! BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among: !; ! Shell Entries: ['C'] !; ! Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)] !; ! File Path: /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/psi4conda/share/psi4/basis !; ! Input Blocks: !; ! !; !----------------------------------------------------------------------------------!; ```. The documentation indicates that this should work. I've tried it with ""scf"" instead of M06-2X, and I get the same error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:4442,error,error,4442,https://psicode.org,https://github.com/psi4/psi4/issues/2571,1,['error'],['error']
Availability,6.1 hf484d3e_0 ; networkx 2.1 py36_0 ; numpy 1.14.5 py36hcd700cb_3 ; numpy-base 1.14.5 py36hdbf6ddf_3 ; openssl 1.0.2o h20670df_0 ; pcmsolver 1.2.1 py36h8733eb9_0 psi4; pip 10.0.1 py36_0 ; pluggy 0.6.0 py36hb689045_0 ; psi4 1.2+9d4a61c py36hf231b52_1 psi4; psi4-rt 1.2 py36ha3f051b_1 psi4; py 1.5.3 py36_0 ; pycosat 0.6.3 py36h0a5515d_0 ; pycparser 2.18 py36hf9f622e_1 ; pyopenssl 18.0.0 py36_0 ; pysocks 1.6.8 py36_0 ; pytest 3.6.2 py36_0 ; python 3.6.6 hc3d631a_0 ; readline 7.0 ha6073c6_4 ; requests 2.18.4 py36he2e5f8d_1 ; resp 0.7 py36ha93d1a2_0 psi4; ruamel_yaml 0.15.37 py36h14c3975_2 ; scipy 1.1.0 py36hfc37229_0 ; setuptools 39.2.0 py36_0 ; simint 0.7 h642920c_1 psi4; six 1.11.0 py36h372c433_1 ; snsmp2 1.0.1 py36hda7112b_2 psi4; sqlite 3.24.0 h84994c4_0 ; tk 8.6.7 hc745277_3 ; urllib3 1.22 py36hbe7ace6_0 ; v2rdm_casscf 0.8 py36hbddea90_0 psi4; wheel 0.31.1 py36_0 ; xz 5.2.4 h14c3975_4 ; yaml 0.1.7 had09818_2 ; zlib 1.2.11 ha838bed_2`. `[ch1jgh@xxx ~]$ echo $PATH; /home/software/miniconda3/bin:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64_mic/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64_mic:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gui/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/mpirt/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64_mic/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gdb/intel64/py26/bin:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64:/home/software/intel/composer_xe_2013_sp1.1.106/bin/intel64_mic:/home/software/intel/composer_xe_2013_sp1.1.106/debugger/gui/intel64:/opt/openmpi/bin:/usr/lib64/qt-3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:2105,echo,echo,2105,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['echo'],['echo']
Availability,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361:2096,error,error,2096,https://psicode.org,https://github.com/psi4/psi4/issues/1361,2,"['error', 'failure']","['error', 'failure']"
Availability,"67, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5376,fault,fault,5376,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['fault'],['fault']
Availability,"685693; O 2.81552768 -0.50840706 -1.42180252; O 3.61564541 1.27844179 0.09948727; O 2.95557380 -0.82533526 1.00298083; C 2.03019476 -1.93245912 1.04782605; C -1.66037059 -1.05786431 -0.87382233; C -1.39498496 -1.19960129 -2.34816003; C -2.65299201 -1.76249051 -0.27337471; H -2.37740040 -0.54585648 2.90523863; H 2.38954139 -2.56465364 1.84992540; H 1.02863634 -1.57685304 1.27002537; H 2.04236674 -2.46241236 0.09951447; H -2.15541649 -1.82673633 -2.80763054; H -0.41234738 -1.64107180 -2.50716877; H -1.37758315 -0.22482435 -2.83713913; H -3.27599978 -2.43724084 -0.84607768; S -0.34233722 2.35735393 -1.83532763; C 1.36095190 2.94818139 -1.81407535; H 1.71979201 3.09855604 -0.79815280; H 2.02802634 2.25554347 -2.32132745; H 1.39841688 3.90181231 -2.33199310; H 0.52648693 0.85272557 2.39744759; H -0.38901252 2.05630112 1.52833438; H -1.06736839 1.33094835 2.99083304; }. set {; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. gradient(""b97-3c""); ```. And here's what happens when I run the calculation:. ```shell; $ psi4 input.dat; PCMSolver fatal error.; In function computeS at line 51 of file /Users/runner/miniforge3/conda-bld/pcmsolver-split_1696645993753/work/src/bi_operators/IBoundaryIntegralOperator.cpp; S matrix is not positive-definite!; Consider changing the average area of the cavity finite elements.; Please report this issue: https://github.com/PCMSolver/pcmsolver/issues; ```. If I delete the PCM sections, the B97-3c gradient runs just fine. The molecule looks normal:. <img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/afa2ecd1-9890-4dc5-bf99-a1d7ae898d11"">. All calculations run on a MacBook Pro using Psi4 1.9.1 from conda-forge. (I know the message says to report this to [PCMSolver](https://github.com/PCMSolver/pcmsolver/issues) but that repository hasn't had any updates in 3+ years...)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202:1645,error,error,1645,https://psicode.org,https://github.com/psi4/psi4/issues/3202,1,['error'],['error']
Availability,"6\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:4027,error,errors,4027,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['error'],['errors']
Availability,"6ccacb77bf8944a3dcf6c097f2/psi4/__init__.py#L47-L48. The full error is below:; ```; [2024-01-25 07:17:41 EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1696426865911/work/build/stage/share/psi4'; ``` . To decode this output a little, the failure results from qcarchive trying to get the version of psi4. The specific qcarchive code is here: https://github.com/MolSSI/QCFractal/blob/32a29a86d6673b0ea1a743b02d3af314c2fd164c/qcfractalcompute/qcfractalcompute/run_scripts/qcengine_list.py#L12. The code to query ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:1349,Error,Error,1349,https://psicode.org,https://github.com/psi4/psi4/issues/3126,2,['Error'],['Error']
Availability,"7 -2.64002e-06 2.86336e-06 SOSCF, nmicro=5; @DF-ROHF iter 14: -1928.51831487022673 -2.51935e-06 1.14965e-06 SOSCF, nmicro=5; @DF-ROHF iter 15: -1928.51831729563537 -2.42541e-06 2.74681e-06 SOSCF, nmicro=5; @DF-ROHF iter 16: -1928.51831963922041 -2.34359e-06 1.10840e-06 SOSCF, nmicro=5; @DF-ROHF iter 17: -1928.51832191065023 -2.27143e-06 2.65960e-06 SOSCF, nmicro=5; @DF-ROHF iter 18: -1928.51832411656915 -2.20592e-06 1.07467e-06 SOSCF, nmicro=5; @DF-ROHF iter 19: -1928.51832626156192 -2.14499e-06 2.58541e-06 SOSCF, nmicro=5; @DF-ROHF iter 20: -1928.51832834999686 -2.08843e-06 1.04450e-06 SOSCF, nmicro=5; @DF-ROHF iter 21: -1928.51833038416635 -2.03417e-06 2.51779e-06 SOSCF, nmicro=5; @DF-ROHF iter 22: -1928.51833236735638 -1.98319e-06 1.01620e-06 SOSCF, nmicro=5; @DF-ROHF iter 23: -1928.51833430059696 -1.93324e-06 2.45380e-06 SOSCF, nmicro=5; @DF-ROHF iter 24: -1928.51833618656428 -1.88597e-06 9.89026e-07 SOSCF, nmicro=5; @DF-ROHF iter 25: -1928.51833802564261 -1.83908e-06 2.39210e-06 SOSCF, nmicro=5; @DF-ROHF iter 26: -1928.51833982011476 -1.79447e-06 9.62693e-07 SOSCF, nmicro=5; @DF-ROHF iter 27: -1928.51834157004896 -1.74993e-06 2.33205e-06 SOSCF, nmicro=5; @DF-ROHF iter 28: -1928.51834327746201 -1.70741e-06 9.37124e-07 SOSCF, nmicro=5; @DF-ROHF iter 29: -1928.51834494231707 -1.66486e-06 2.27333e-06 SOSCF, nmicro=5; @DF-ROHF iter 30: -1928.51834656639858 -1.62408e-06 9.12295e-07 SOSCF, nmicro=5; @DF-ROHF iter 31: -1928.51834814968470 -1.58329e-06 2.21577e-06 SOSCF, nmicro=5; ```. We are well within the quadratic region, and although the energy is monotonically decreasing, it is decreasing very slowly, and with the error bouncing back and forth between two numbers: one around 2e-6 and one around 9e-7. That should never happen within the quadratic region. We see the same pattern if you try the SCF with conventional integrals. There are similar problems when you don't use SOSCF, so the error may not be SOSCF specific. I strongly suspect the ECPs are somehow at fault.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716:3227,error,error,3227,https://psicode.org,https://github.com/psi4/psi4/issues/1716,3,"['error', 'fault']","['error', 'fault']"
Availability,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2309,error,errors,2309,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,3,['error'],"['error', 'errors']"
Availability,"7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:5825,down,download,5825,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1296,error,error,1296,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['error'],['error']
Availability,"77, -108.48893387244806, -108.4885456753569, -108.48825797751267, -108.48802517925705, -108.48783928065005, -108.48769318174477, -108.48758038259001, ; -108.48749538322693, -108.48743328369225, -108.48738988401745, -108.4873615842295, -108.4873453843509, -108.48733858440185, -108.48733918439734, -108.48734528435165, -108.487544082862,; -108.4875574827616, -108.48757248264921, -108.48758858252856, -108.48760498240567, -108.48762118228429, -108.48763708216514, -108.48765208205275, -108.4876661819471, ; -108.48767918184969, -108.48769108176053, -108.4877016816811, -108.48771108161066, -108.48771918154995, -108.48772618149751, -108.48773188145479, -108.48773658141958, ; -108.48774018139261, -108.48774268137387, -108.48774438136114, -108.48774518135515, -108.48774518135515, -108.48774438136114, -108.48774298137162, -108.48774098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]. psi4.diatomic.anharmonicity(r,eng,'result.out'); ```. But when I run it with Psi4, I'm getting the following error:; ```; m1: 14.00307400443, m2: 14.00307400443; d2: -0.02414940264774275, mu: 1.1626325532182573e-26; invalid value encountered in sqrt; invalid value encountered in sqrt; Traceback (most recent call last):; File ""/home/martin/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 41, in <module>; File ""/home/martin/miniconda/lib//python3.7/site-packages/psi4/driver/diatomic.py"", line 194, in anharmonicity; roots2 = np.roots(coefs2); File ""/home/martin/miniconda/lib//python3.7/site-packages/numpy/lib/polynomial.py"", line 245, in roots; roots = eigvals(A); File ""/home/martin/miniconda/lib//python3.7/site-packages/numpy/linalg/linalg.py"", line 1059, in eigvals; _assertFinite(a); File ""/home/martin/miniconda/lib//python3.7/site-packages/numpy/linalg/linalg.py"", line 219, in _assertFinite; raise LinAlgError(""Array must not contain infs or NaNs""). numpy.linalg.LinAlgError: Array must not contain infs or NaNs. Printing out the relevant lines f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:2727,error,error,2727,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['error'],['error']
Availability,"79752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:4499,down,download,4499,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"80/#) in conversion_factor(self, base_unit, conv_unit); 310 # Add a little magic in case the incoming values have scalars; 311 ; --> 312 from pint import quantity; 313 ; 314 factor = 1.0. [/usr/local/lib/python3.7/site-packages/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:4884,error,errors,4884,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['error'],['errors']
Availability,"8330 HF,LR [omega = 0.3000]; 0.1670 HF . => LibXC Density Thresholds <==. XC_HYB_GGA_XC_WB97X_V: 1.00E-14 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 238643; Total Blocks = 1822; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 3-8 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2, 9-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.163 GiB; user supplied 0.163 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 167; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 3.8471; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.155 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5224744543E-04.; Reciprocal condition number of the overlap matrix is 8.7845130506E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -40.20742626722070 -4.02074e+01 0.00000e+00 ; @DF-RKS iter 1: -41.85372076056422 -1.64629e+00 4.64946e-03 DIIS/ADIIS; @",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:22202,Mask,Mask,22202,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Mask'],['Mask']
Availability,"8640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Modelling following reaction:; `2x 35 + 20x H2 -> 2x LIH + 4x BH4 + 4x CH4 + O2 + 4x AlH4 + 2x SiH4 + P2 + CL2`; In essence, a diverse inorganic, main group chemistry reaction.; level of theory: PBE/def2-TZVP with (434,85) grid.; link to input file: https://gist.github.com/hokru/408873d71efb522f7de1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:3571,ROBUST,ROBUST,3571,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['ROBUST'],['ROBUST']
Availability,"9 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graph",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:2162,error,error,2162,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['error'],['error']
Availability,"9, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-pack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1641,error,error,1641,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['error'],['error']
Availability,"9.187; N 32.575 19.445 27.669; C 32.087 18.889 26.432; C 31.731 17.414 26.713; C 31.321 16.545 25.541; C 31.013 15.137 26.058; C 30.543 14.205 24.939; N 30.199 12.899 25.479; H 31.224 19.458 26.087; H 32.557 18.953 28.374; H 32.758 18.931 25.732; H 32.498 16.999 27.137; H 31.008 17.401 27.36; H 30.542 16.92 25.101; H 32.031 16.513 24.881; H 31.806 14.766 26.475; H 30.329 15.188 26.744; H 29.773 14.59 24.492; H 31.241 14.112 24.272; H 29.548 12.991 26.078; H 29.922 12.373 24.817; H 30.914 12.537 25.867; C 31.761 21.869 21.802; C 32.242 20.403 21.82; C 33.766 20.25 22.033; C 34.219 19.883 23.454; N 33.896 18.494 23.771; C 34.834 17.555 23.931; N 36.131 17.833 23.815; N 34.474 16.305 24.204; H 31.663 22.232 22.825; H 30.794 21.929 21.302; H 32.406 22.415 21.326; H 31.776 19.927 22.525; H 31.997 19.98 20.982; H 34.092 19.569 21.424; H 34.194 21.084 21.782; H 35.175 20.022 23.537; H 33.79 20.472 24.095; H 33.07 18.269 23.849; H 36.39 18.633 23.634; H 36.712 17.209 23.924; H 33.641 16.105 24.278; H 35.074 15.698 24.31; C 38.551 24.807 28.833; C 39.217 23.791 29.752; O 40.012 23.0 29.251; H 39.174 24.9 27.944; H 37.55 24.41 28.664; H 38.405 25.701 29.18; N 38.994 23.745 31.065; C 39.394 22.611 31.867; C 38.505 22.665 33.102; O 37.885 23.692 33.416; C 40.943 22.687 32.147; C 41.446 23.269 33.424; O 41.297 21.311 32.139; H 38.613 24.41 31.455; H 39.273 21.75 31.437; H 41.327 23.294 31.495; H 42.122 21.236 32.281; H 42.415 23.239 33.434; H 41.151 24.19 33.499; H 41.099 22.757 34.172; N 38.365 21.521 33.776; C 37.444 21.422 34.889; H 36.713 20.636 34.701; H 37.974 21.174 35.809; H 38.903 20.867 33.627; H 36.998 22.28 34.969. units angstrom; no_reorient; symmetry c1; }. set globals {; basis jun-cc-pvdz; df_basis_scf jun-cc-pvdz-jkfit; df_basis_sapt jun-cc-pvdz-ri; guess sad; scf_type df; freeze_core true; }. set sapt {; print 1; }. energy('fisapt0-d3mbj'); ```. Hello, We are having the same pairwise sum error . ! !; ! pairwise sum -2.401299138175176 != energy -2.40130245 !; ! !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:8830,error,error,8830,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923,1,['error'],['error']
Availability,"94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:2532,avail,available,2532,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['avail'],['available']
Availability,9949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 55,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4269,avail,available,4269,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['avail'],['available']
Availability,"9: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:40531,error,error,40531,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"9: 无法解析的外部符号 dstevr，该符号在函数 ""int __cdecl psi::C_DSTEVR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEVR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstevx，该符号在函数 ""int __cdecl psi::C_DSTEVX(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSTEVX@psi@@YAHDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsycon，该符号在函数 ""int __cdecl psi::C_DSYCON(char,int,double *,int,int *,double,double *,double *,int *)"" (?C_DSYCON@psi@@YAHDHPEANHPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev，该符号在函数 ""int __cdecl psi::C_DSYEV(char,char,int,double *,int,double *,double *,int)"" (?C_DSYEV@psi@@YAHDDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevd，该符号在函数 ""int __cdecl psi::C_DSYEVD(char,char,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYEVD@psi@@YAHDDHPEANH00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:46077,error,error,46077,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,": 0); | ; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/cgshell_ordering.h:93: warning: ""INT_CARTINDEX"" redefined; 93 | #define INT_CARTINDEX(am,i,j) ( (((((am) - (i) + 1)*((am) - (i)))>>1) + (am) - (i) - (j)) ); | ; In file included from psi4/src/export_mints.cc:48:; psi4/src/psi4/libmints/integral.h:64: note: this is the location of the previous definition; 64 | #define INT_CARTINDEX(am, i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared IN",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:2713,error,error,2713,https://psicode.org,https://github.com/psi4/psi4/issues/2427,1,['error'],['error']
Availability,": error LNK2019: 无法解析的外部符号 ddot，该符号在函数 ""double __cdecl psi::C_DDOT(unsigned __int64,double *,int,double *,int)"" (?C_DDOT@psi@@YAN_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dnrm2，该符号在函数 ""double __cdecl psi::C_DNRM2(unsigned __int64,double *,int)"" (?C_DNRM2@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dasum，该符号在函数 ""double __cdecl psi::C_DASUM(unsigned __int64,double *,int)"" (?C_DASUM@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 idamax，该符号在函数 ""unsigned __int64 __cdecl psi::C_IDAMAX(unsigned __int64,double *,int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:10920,error,error,10920,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,": 无法解析的外部符号 dsyevd，该符号在函数 ""int __cdecl psi::C_DSYEVD(char,char,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYEVD@psi@@YAHDDHPEANH00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47004,error,error,47004,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2066,error,error,2066,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597,1,['error'],['error']
Availability,"://localhost:8080/#) in to_schema(self, dtype, units); 1542 ; 1543 molrec = self.to_dict(np_out=True); -> 1544 schmol = qcel.molparse.to_schema(molrec, dtype=dtype, units=units); 1545 return schmol; 1546 . [/usr/local/lib/python3.7/site-packages/qcelemental/molparse/to_schema.py](https://localhost:8080/#) in to_schema(molrec, dtype, units, np_out, copy); 47 geom = geom * molrec[""input_units_to_au""]; 48 else:; ---> 49 geom = geom * constants.conversion_factor(molrec[""units""], units); 50 ; 51 nat = geom.shape[0] // 3. [/usr/local/lib/python3.7/site-packages/qcelemental/physical_constants/context.py](https://localhost:8080/#) in conversion_factor(self, base_unit, conv_unit); 310 # Add a little magic in case the incoming values have scalars; 311 ; --> 312 from pint import quantity; 313 ; 314 factor = 1.0. [/usr/local/lib/python3.7/site-packages/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:4254,error,errors,4254,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['error'],['errors']
Availability,":1001 ] Searching for CHRONO_LIBRARY_RELEASE: boost_chrono-mt-1_59;boost_chrono-mt;boost_chrono-mt-1_59;boost_chrono-mt;boost_chrono; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1037 ] Searching for CHRONO_LIBRARY_DEBUG: boost_chrono-mt-d-1_59;boost_chrono-mt-d;boost_chrono-mt-d-1_59;boost_chrono-mt-d;boost_chrono-mt;boost_chrono; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1001 ] Searching for THREAD_LIBRARY_RELEASE: boost_thread-mt-1_59;boost_thread-mt;boost_thread-mt-1_59;boost_thread-mt;boost_thread; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1037 ] Searching for THREAD_LIBRARY_DEBUG: boost_thread-mt-d-1_59;boost_thread-mt-d;boost_thread-mt-d-1_59;boost_thread-mt-d;boost_thread-mt;boost_thread; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1088 ] Boost_FOUND = 1; ```. ... after this point if hombrew boost _is unlinked_:. ```; -- Could NOT find Boost ; Could not find the following static Boost libraries:; boost_filesystem; boost_regex; boost_serialization; boost_system; boost_timer; boost_chrono; boost_thread; ```. ... and if hombrew boost _is linked_: . ```; Boost version: 1.59.0 ; Boost include path: /Users/admin/anaconda/envs/psi4-py2.7/include; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; ```. My main concern is CMake reporting Boost version 1.59.0, but then using library paths that point to a different version. I don't know if I would have been able to figure out what was going on if I didn't recognize the linker errors as the boost 1.60.0 incompatibility issue. ; (Good thing I have been reading the issues I guess! :tongue: ). But since `Boost_FOUND = 1` is set in both cases, why is the prepackaged boost being built? ; ### Temporary workaround. Using `-DBUILD_CUSTOM_BOOST=ON` will avoid the issue completely and still build successfully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:10793,error,errors,10793,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['error'],['errors']
Availability,":56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1642,ERROR,ERROR,1642,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['ERROR'],['ERROR']
Availability,":56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== If you believe this happened as a result of a stack; ==98805== overflow in your program's main thread (unlikely but; ==98805== possible), you can try to increase the size of the; ==98805== main thread stack using the --main-stacksize= flag.; ==98805== The main thread stack size used in this run was 8388608.; ==98805== ; ==98805== HEAP SUMMARY:; ==98805== in use at exit: 20,461,418 bytes in 40,150 blocks; ==98805== total heap usage: 393,696 allocs, 353,546 frees, 108,089,532 bytes allocated; ==98805== ; ==98805== LEAK SUMMARY:; ==98805== definitely lost: 0 bytes in 0 blocks; ==98805== indirectly lost: 0 bytes in 0 blocks; ==98805== possibly lost: 480,565 bytes in 454 blocks; ==98805== still reachable: 19,980,817 bytes in 39,694 blocks; ==98805== suppressed: 36 bytes in 2 blocks; ==98805== Rerun with --leak-check=full to see details of leaked memory; ==98805== ; ==98805== For lists of detected and suppressed errors, rerun with: -s; ==98805== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0); Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:4510,error,errors,4510,https://psicode.org,https://github.com/psi4/psi4/issues/3200,4,"['ERROR', 'error', 'fault']","['ERROR', 'errors', 'fault']"
Availability,"::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cdecl psi::C_DSPMV(char,int,double,double *,double *,int,double,double *,int)"" (?C_DSPMV@psi@@YAXDHNPEAN0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr，该符号在函数 ""void __cdecl psi::C_DSPR(char,int,double,double *,int,double *)"" (?C_DSPR@psi@@YAXDHNPEANH0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspr2，该符号在函数 ""void __cdecl psi::C_DSPR2(char,int,double,double *,int,double *,int,double *)"" (?C_DSPR2@psi@@YAXDHNPEANH0H0@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymm，该符号在函数 ""void __cdecl psi::C_DSYMM(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMM@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsymv，该符号在函数 ""void __cdecl psi::C_DSYMV(char,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYMV@psi@@YAXDHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr，该符号在函数 ""void __cdecl psi::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double *,int)"" (?C_DSYR2@psi@@YAXDHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2k，该符号在函数 ""void __cdecl psi::C_DSYR2K(char,char,int,int,double,double ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:12116,error,error,12116,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"::C_DSPTRD(char,int,double *,double *,double *,double *)"" (?C_DSPTRD@psi@@YAHDHPEAN000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrf，该符号在函数 ""int __cdecl psi::C_DSPTRF(char,int,double *,int *)"" (?C_DSPTRF@psi@@YAHDHPEANPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptri，该符号在函数 ""int __cdecl psi::C_DSPTRI(char,int,double *,int *,double *)"" (?C_DSPTRI@psi@@YAHDHPEANPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrs，该符号在函数 ""int __cdecl psi::C_DSPTRS(char,int,int,double *,int *,double *,int)"" (?C_DSPTRS@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstebz，该符号在函数 ""int __cdecl psi::C_DSTEBZ(char,char,int,double,double,int,int,double,double *,double *,int *,int *,double *,int *,int *,double *,int *)"" (?C_DSTEBZ@psi@@YAHDDHNNHHNPEAN0PEAH101101@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstedc，该符号在函数 ""int __cdecl psi::C_DSTEDC(char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSTEDC@psi@@YAHDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstegr，该符号在函数 ""int __cdecl psi::C_DSTEGR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEGR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstein，该符号在函数 ""int __cdecl psi::C_DSTEIN(int,double *,double *,int,double *,int *,int *,double *,int,double *,int *,int *)"" (?C_DSTEIN@psi@@YAHHPEAN0H0PEAH10H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsteqr，该符号在函数 ""int __cdecl psi::C_DSTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DSTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsterf，该符号在函数 ""int __cdecl psi::C_DSTERF(int,double *,double *)"" (?C_DSTERF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstev",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:43697,error,error,43697,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"::C_DSYR(char,int,double,double *,int,double *,int)"" (?C_DSYR@psi@@YAXDHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2，该符号在函数 ""void __cdecl psi::C_DSYR2(char,int,double,double *,int,double *,int,double *,int)"" (?C_DSYR2@psi@@YAXDHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyr2k，该符号在函数 ""void __cdecl psi::C_DSYR2K(char,char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSYR2K@psi@@YAXDDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrk，该符号在函数 ""void __cdecl psi::C_DSYRK(char,char,int,int,double,double *,int,double,double *,int)"" (?C_DSYRK@psi@@YAXDDHHNPEANHN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbmv，该符号在函数 ""void __cdecl psi::C_DTBMV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBMV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtbsv，该符号在函数 ""void __cdecl psi::C_DTBSV(char,char,char,int,int,double *,int,double *,int)"" (?C_DTBSV@psi@@YAXDDDHHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpmv，该符号在函数 ""void __cdecl psi::C_DTPMV(char,char,char,int,double *,double *,int)"" (?C_DTPMV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtpsv，该符号在函数 ""void __cdecl psi::C_DTPSV(char,char,char,int,double *,double *,int)"" (?C_DTPSV@psi@@YAXDDDHPEAN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmm，该符号在函数 ""void __cdecl psi::C_DTRMM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRMM@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrmv，该符号在函数 ""void __cdecl psi::C_DTRMV(char,char,char,int,double *,int,double *,int)"" (?C_DTRMV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsm，该符号在函数 ""void __cdecl psi::C_DTRSM(char,char,char,char,int,int,double,double *,int,double *,int)"" (?C_DTRSM@psi@@Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:13700,error,error,13700,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"::vector<Task_t> Tasks=MakeTasks(Start,Stop,Frags_);; ^~~~~~~~~; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:184:28: note: candidate function not viable: no known conversion from; 'boost::shared_ptr<LibMolecule::FragmentedSystem>' to 'const int' for 3rd argument; static std::vector<Task_t> MakeTasks(const int Start, const int Stop,const SharedFrags& Frags_){; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:258:11: error: use of undeclared identifier 'SharedFrag'; MPIJob<SharedFrag> PMan(Tasks);; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:259:8: error: unknown type name 'SharedFrag'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:259:24: error: use of undeclared identifier 'PMan'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:259:38: error: use of undeclared identifier 'PMan'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:259:55: error: use of undeclared identifier 'PMan'; for(SharedFrag NMer=PMan.Begin();!PMan.Done();NMer=PMan.Next()) {; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:281:34: error: use of undeclared identifier 'PMan'; std::vector<double> TempEgys2=PMan.Synch(TempEngy, NEgys);; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:284:48: error: member reference base type 'int' is not a structure or union; const LibMolecule::SerialNumber& SN=TaskI->GetLabel()->GetSN();; ~~~~~^ ~~~~~~~~; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:290:6: error: use of undeclared identifier 'LibFragDriver'; did you mean; 'psi::LibFrag::LibFragDriver'?; void LibFragDriver::RunNMers(int Start,const std::string& MethodName) {; ^~~~~~~~~~~~~; psi::LibFrag::LibFragDriver; /Users/francesco/Source/psi4/src/lib/libfrag/Lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/206:3677,error,error,3677,https://psicode.org,https://github.com/psi4/psi4/issues/206,1,['error'],['error']
Availability,":C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double *,int,int *,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdecl psi::C_DGEESX(char,char,char,int,double *,int,int *,double *,double *,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGEESX@psi@@YAHDDDHPEANHPEAH000H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev，该符号在函数 ""int __cdecl psi::C_DGEEV(char,char,int,double *,int,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEEV@psi@@YAHDDHPEANH000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeevx，该符号在函数 ""int __cdecl psi::C_DGEEVX(char,char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:19194,error,error,19194,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":C_DTGSNA(char,char,int,double *,int,double *,int,double *,int,double *,int,double *,double *,int,int *,double *,int,int *)"" (?C_DTGSNA@psi@@YAHDDHPEANH0H0H0H00HPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsyl，该符号在函数 ""int __cdecl psi::C_DTGSYL(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptrs，该符号在函数 ""int __cdecl psi::C_DTPTRS(char,char,char,int,int,double *,double *,int)"" (?C_DTPTRS@psi@@YAHDDDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrcon，该符号在函数 ""int __cdecl psi::C_DTRCON(char,char,char,int,double *,int,double *,double *,int *)"" (?C_DTRCON@psi@@YAHDDDHPEANH00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrevc，该符号在函数 ""int __cdecl psi::C_DTREVC(char,char,int,double *,int,double *,int,double *,int,int,int *,double *)"" (?C_DTREVC@psi@@YAHDDHPEANH0H0HHPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrexc，该符号在函数 ""int __cdecl psi::C_DTREXC(char,int,double *,int,double *,int,int *,int *,double *)"" (?C_DTREXC@psi@@YAHDHPEANH0HPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtrrfs，该符号在函数 ""int __cdecl psi::C_DTRRFS(char,char,char,int,int,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:51891,error,error,51891,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":DMRG::Solve()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to`CheMPS2::DMRG::deleteStoredOperators()'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; > /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to`CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to`CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to`CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to`CheMPS2::Irreps::~Irreps()'; > collect2: error: ld returned 1 exit status; > CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; > make[2]: **\* [CheMPS2/chemps2] Error 1; > CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; > make[1]: **\* [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; > Makefile:126: recipe for target 'all' failed; > make: **\* [all] Error 2; > ...; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/264#issuecomment-185220619. ## . ---. dr. ir. Sebastian Wouters; Postdoctoral Fellow of the Research Foundation Flanders (FWO); Ghent University; (address) Center for Molecular Modeling; Technologiepark 903; 9052 Zwijnaarde (Belgium); (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185225793:3972,error,error,3972,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185225793,4,"['Error', 'error']","['Error', 'error']"
Availability,":\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgghrd，该符号在函数 ""int __cdecl psi::C_DGGHRD(char,char,int,int,int,double *,int,double *,int,double *,int,double *,int)"" (?C_DGGHRD@psi@@YAHDDHHHPEANH0H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgglse，该符号在函数 ""int __cdecl psi::C_DGGLSE(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGLSE@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggqrf，该符号在函数 ""int __cdecl psi::C_DGGQRF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:25433,error,error,25433,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,":buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1511,Error,Error,1511,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,1,['Error'],['Error']
Availability,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6889,error,error,6889,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,3,['error'],['error']
Availability,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3738,Error,Error,3738,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879,2,['Error'],['Error']
Availability,"; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14538,avail,available,14538,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['avail'],['available']
Availability,"; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/p4util/numpy_helper.py:454: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead; ret.nph[n].flat[:] = np.fromstring(json_data[""data""][n], dtype=np.double). /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:37192,error,error,37192,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/p4util/numpy_helper.py:454: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead; ret.nph[n].flat[:] = np.fromstring(json_data[""data""][n], dtype=np.double). /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:36931,error,error,36931,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/p4util/numpy_helper.py:454: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead; ret.nph[n].flat[:] = np.fromstring(json_data[""data""][n], dtype=np.double). /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:. /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:36670,error,error,36670,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7773,down,down,7773,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['down'],['down']
Availability,"; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2652,Error,Error,2652,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['Error'],['Error']
Availability,"; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; > CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all'; > failed make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt Makefile:138:; > recipe for target 'all' failed make: *** [all] Interrupt; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:2087,Error,Error,2087,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['Error'],['Error']
Availability,"; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron densit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:2016,error,error,2016,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['error'],['error']
Availability,; df = 781.81 sec*proc (38 tests); dfccd = 1.18 sec*proc (1 test); dfccd-grad = 1.98 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 2.54 sec*proc (1 test); dfccsd-grad = 7.22 sec*proc (1 test); dfccsd-t-grad = 10.40 sec*proc (1 test); dfccsdat = 3.19 sec*proc (1 test); dfccsdl = 3.30 sec*proc (1 test); dfccsdt = 2.46 sec*proc (1 test); dfep2 = 4.34 sec*proc (2 tests); dfmp2 = 62.44 sec*proc (11 tests); dfomp2 = 517.24 sec*proc (7 tests); dfomp2.5 = 42.99 sec*proc (4 tests); dfomp3 = 50.83 sec*proc (4 tests); dfscf = 31.62 sec*proc (1 test); dft = 738.08 sec*proc (27 tests); docs = 1.16 sec*proc (2 tests); ecp = 32.55 sec*proc (2 tests); fci = 5.67 sec*proc (2 tests); fcidump = 3.01 sec*proc (1 test); findif = 553.63 sec*proc (5 tests); fnocc = 28.55 sec*proc (4 tests); freq = 919.36 sec*proc (6 tests); gradient = 876.87 sec*proc (16 tests); json = 10.02 sec*proc (8 tests); longtests = 792.31 sec*proc (5 tests); mcscf = 2.83 sec*proc (3 tests); minitests = 27.46 sec*proc (3 tests); mints = 32.34 sec*proc (14 tests); misc = 234.73 sec*proc (16 tests); mp2 = 166.66 sec*proc (13 tests); nbody = 43.85 sec*proc (2 tests); numpy = 0.62 sec*proc (1 test); ocepa = 492.10 sec*proc (6 tests); omp = 280.23 sec*proc (18 tests); opt = 690.78 sec*proc (21 tests); prop = 1.27 sec*proc (1 test); properties = 67.96 sec*proc (10 tests); psi = 18047.47 sec*proc (403 tests); psi4numpy = 10.13 sec*proc (6 tests); psimrcc = 59.10 sec*proc (8 tests); python = 942.95 sec*proc (10 tests); pywrap = 2529.67 sec*proc (12 tests); quicktests = 1844.29 sec*proc (138 tests); rasci = 34.06 sec*proc (3 tests); sapt = 1326.10 sec*proc (21 tests); scf = 1008.60 sec*proc (52 tests); shorttests = 34.75 sec*proc (4 tests); smoketests = 48.57 sec*proc (11 tests); stability = 3.84 sec*proc (2 tests); tutorial = 98.89 sec*proc (6 tests); x2c = 9.44 sec*proc (3 tests). Total Test time (real) = 2258.21 sec. The following tests FAILED:; 	365 - cubeprop-esp (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:40035,Error,Errors,40035,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Error'],['Errors']
Availability,"= 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1601,error,error,1601,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['error'],['error']
Availability,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48087,error,error,48087,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['error'],['error']
Availability,"=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); at Python/pythonrun.c:1914; #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); from /usr/lib/libboost_python3.so.1.54.0; #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; ```. Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:7409,down,down,7409,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['down'],['down']
Availability,"==========; _____________ ERROR collecting miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_addons.py ______________; ImportError while importing test module '/root/miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_addons.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_addons.py:7: in <module>; from qcengine.testing import using_mp2d; E ImportError: cannot import name 'using_mp2d' from 'qcengine.testing' (/root/miniconda3/envs/psi4/lib//python3.7/site-packages/qcengine/testing.py); ______________ ERROR collecting miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_mp2d.py _______________; ImportError while importing test module '/root/miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_mp2d.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_mp2d.py:7: in <module>; from qcengine.testing import using_mp2d; E ImportError: cannot import name 'using_mp2d' from 'qcengine.testing' (/root/miniconda3/envs/psi4/lib//python3.7/site-packages/qcengine/testing.py); _________ ERROR collecting miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_qcng_dftd3_mp2d.py _________; ImportError while importing test module '/root/miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_qcng_dftd3_mp2d.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_qcng_dftd3_mp2d.py:10: in <module>; from qcengine.testing import is_program_new_enough, using_dftd3, using_dftd3_321, using_psi4, using_qcdb, using_mp2d; E ImportError: cannot import name 'using_dftd3' from 'qcengine.testing' (/root/miniconda3/envs/psi4/lib//python3.7/site-packages/qcengine/testing.py); ```. Transfer to a lower verion qcengine 0.12.0, all would be OK.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1782:1488,ERROR,ERROR,1488,https://psicode.org,https://github.com/psi4/psi4/issues/1782,1,['ERROR'],['ERROR']
Availability,"=========================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. Traceback (most recent call last):; File ""/home/416653/PSI4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/home/416653/PSI4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 456, in select_mp2p5; return func(name, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 1607, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""FREEZE_CORE"", ""true""); core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""MP_TYPE"", ""df""); core.set_global_option(""BASIS"", ""aug-cc-pvtz""); core.set_global_option(""DF_BASIS_MP2"", ""cc-pVQZ-RI""); --> energy('mp2.5'). Psi4 stopped on: Thursday, 02 May 2019 01:23PM; Psi4 wall time for execution: 0:18:04.56; ```. Looks like the error is somewhere around [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2546). The `std::bad_array_new_length` is usually (but not always) thrown for negative lengths. @bozkaya any ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:5147,error,error,5147,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['error'],['error']
Availability,"============================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; =================================== 3950 deselected, 5 warnings, 1 error in 20.79s ====================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:6076,error,error,6076,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,4,['error'],['error']
Availability,==========================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:5814,error,error,5814,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['error'],['error']
Availability,"=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20375,error,error,20375,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Ke",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10831,error,error,10831,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['error'],['error']
Availability,"> ![image](https://private-user-images.githubusercontent.com/174042911/343890176-4ecd3a4a-19a1-48a3-af1e-5c1c787756ff.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTk1MTE3NDksIm5iZiI6MTcxOTUxMTQ0OSwicGF0aCI6Ii8xNzQwNDI5MTEvMzQzODkwMTc2LTRlY2QzYTRhLTE5YTEtNDhhMy1hZjFlLTVjMWM3ODc3NTZmZi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwNjI3JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDYyN1QxODA0MDlaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1lNjhjNjNlMDljZWY3MDZiMTgwY2NmMDI0MzM4NzQyYjEyOTRkYjAzNGQ1YWNkMjBlNmIwMTk3YjM5NjYzYmI2JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.lrgh8Wm-ActfzXx9w5DLSgo9D-Bnf-eOKrQ1te9qJj8). The first one gives you a syntax error because it was meant to be executed in Bash, not Python, so naturally it does not have the correct syntax according to Python.; The second syntax error is because `sys.path.append` expects a string, and in Python you need to enclose string literals in quote characters.; Plus of course both of the paths you have tried to use were invalid, because the `<whatever>` notation generally means you are supposed to replace `<whatever>` with something before use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195402490:867,error,error,867,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195402490,2,['error'],['error']
Availability,"> * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out. They are of proper magnitude. Grid points with tiny weights are also already screened out during construction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1499311759:103,toler,tolerance,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499311759,1,['toler'],['tolerance']
Availability,"> * Holger asked about correctness tests. Sorry if I was unclear. I only wanted a sentence about how correctness was tested (or which other code was followed) for completeness of the PR body. Just in case one has to track something down.; Maybe in this more trivial case it's not needed, I don't think I looked at the code changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767165337:232,down,down,232,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767165337,1,['down'],['down']
Availability,"> * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration. Yeah, there were some bizarre bits -- had to basically restructure the driver import structure in #3033 to unwind the circular import to let pydantic see the classes it demanded. Thankfully Levi did the really hard part for qcel. > * Having 1.9 drop with pydantic =2 constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; > * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be pydantic =2 sounds like a great idea (I think this is what you're suggesting?). Ok, good. Yes, I was suggesting psi v1.10 in May 2024 be pydantic=2 only and let v1.9 stay v1/v2-compatible. I don't want downstream to get locked into too-narrow a slice of the stack to cope with other constraints. So long as psi4 as v1/v2 isn't holding openff back, I think this is the way to go. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855:909,down,downstream,909,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855,1,['down'],['downstream']
Availability,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:549,avail,available,549,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316,1,['avail'],['available']
Availability,"> . > There is a rohf-bccd test at https://github.com/psi4/psi4/blob/master/tests/cc16/input.dat#L28 . If it's any help, bccd and bccd(t) all-electron in psi4 match that in cfour. (Though I did have to turn on orbitals=1 for cfour bccd(t) for rhf/uhf to allow it to match psi4. After moderate effort, I couldn't get cfour bccd to run with frozen-core, but I wouldn't rule out user error.); > ; > > Would taking a look at https://psicode.org/psi4manual/master/cc.html be also in-scope for this PR? I think that page never mentions that gradients are restricted to all-electron.; > ; > I agree documenting capability exceptions is weak across modules at the moment. I was hoping to fix that with the table above, which is autogenerated from calcs, not hand-assembled. Do you think more is needed?. Hmmm...the `cc_index` file refers to `cc16` as ""UHF-B-CCD(T)"", but the input file in that test appears to execute ROHF-B-CCD(T) twice. The `output.ref` file, on the other hand starts with a UHF initial guess, and then switches to ROHF. Strange that it still passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243114814:381,error,error,381,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243114814,1,['error'],['error']
Availability,"> 1. Fix the merge conflicts (annoying rebase). I'm not sure how much rebasing you want to do, but I think things are back to the state-of-the-world that we were discussing prior to #2743 . > 2. Determine what information in `print_details` is actually used. I want to retain print information that is actually used, but I can do away with the rest. Once we have that, we can assess if keeping a modified `RadialGrid` is the best way to keep the useful print information. (I think we've established that `r` and `wr` are used, but `order` is not?). ""Used"" is a funny word here. No tests when this print is removed, so it's not _so_ important that someone wrote a test to preserve it. Furthermore, the `order_` was _always_ wrong. The other elements weren't, though, but you have to set a pretty high print level to actually see anything (`v.cc` requires `print_ > 2`). . If by ""used"" you mean that the piece of information represented in the print is used downstream: `r` and `wr` are the primary candidates here. That said, they aren't used as-is -- they're dotted through other elements found by a lookup in `LebedevGridMgr` and `RadialGridMgr` to make `MassPoints` (see https://github.com/psi4/psi4/blob/9db9100564eaef5d02c952817a73c397db9d657b/psi4/src/psi4/libfock/cubature.cc#L3814-L3822). I'm not sure if we care about diagnostic print info on the intermediaries (the radii of shells around atoms we care about, and the number of angular points we end up picking for each shell). Maybe we do? If so, a struct seems like the most reasonable solution. I suppose, all-in-all, it's not so much data to carry around. Appending that data onto every `MassPoint` however feels like overkill (and that's the only other place to put it). . But we definitely should clean up/remove the rest of the old `RadialGrid` and `SphericalGrid`, as these seem to only cause confusion about where changes should be made. `RadialGridMgr` and `LebedevGridMgr` are the classes of Actual Importance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1275116304:956,down,downstream,956,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1275116304,1,['down'],['downstream']
Availability,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:1148,avail,available,1148,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,2,"['avail', 'ping']","['available', 'pinging']"
Availability,"> 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. Since the active orbitals are numbered A2 A3 A4 A5, why not the three determinants as 2u00, 0u20, and 0u02? 3A up-electron not promoted anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-2426630487:200,down,down,200,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2426630487,1,['down'],['down']
Availability,"> ; > ; > @ TiborGY I would not know how to monitor the health of my SSD, so I cannot speak to that. I have a 16GB M1 Mac mini sitting on my desk using most of the cores 24/7, but all of the program memory requirements fit comfortably within 16GB, so little or no swap is being used. Edit: We are going off topic here, but I am going to answer because I think this could be useful information.; I am not just talking about swap here, a lot of quantum chemistry programs create temporary files that they intensely read and write to. Usually called ""conventional integrals"" or ""out-of-core"" algorithms for historical reasons. I once guesstimated the amount of writes running non-DF CCSD(T) generates to be around 1 to 5 TB per day on a fast 8-14 core machine. Not something that most SSDs can be expected to reliably handle for long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961542615:806,reliab,reliably,806,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961542615,1,['reliab'],['reliably']
Availability,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:615,error,error,615,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342,2,['error'],['error']
Availability,"> ; > ; > Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; > `PSIO_ERROR: 12 (error writing to file)` should in most cases be a disk space issue. Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661793401:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661793401,1,['error'],['error']
Availability,"> ; > ; > The PSIO error can occur for running out of RAM? Is it writing to a virtual file (for the lack of better term)?. On some systems, /tmp is a ramdisk by default, so if PSI4 is configured to use that as a scratch dir, the system can easily run out of memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594:19,error,error,19,https://psicode.org,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594,1,['error'],['error']
Availability,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:246,redundant,redundant,246,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581,3,"['fault', 'redundant']","['fault', 'redundant']"
Availability,"> ; > But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users. I think the typical ramdisk implementation used for /tmp starts off using ~0 RAM. One can create as many 10 TB ramdisks as one desires, they only start allocating memory when they are written to, and I think the amount of RAM used by the ramdisk follows the amount of data currently stored on it.; IIRC the RAM consumed by such ramdisks appears as if some other regular application was using it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965#issuecomment-661826679:208,error,errors,208,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-661826679,1,['error'],['errors']
Availability,"> > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed.; > ; > MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. This is completely correct. The lone OLCCD algorithm in `occ` does not compute LCCD with the input orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739:54,avail,available,54,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739,4,"['avail', 'fault']","['available', 'fault']"
Availability,"> > > Do you have all the patches installed?; > > ; > > ; > > Define patches; > ; > Sorry, should have clarified. https://www.mrcc.hu/index.php/download-mrcc/mrcc-binary-2/category/5-mrcc-patches. Wow, talking about a blast from the past.... haven't done this in over 20 years",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071556216:144,down,download-mrcc,144,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071556216,1,['down'],['download-mrcc']
Availability,"> > > I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here.; > ; > In the future, please use ""accept suggestion"". Not when I need to suggest a change to the suggestion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1404992356:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1404992356,1,['error'],['error']
Availability,"> > > lgtm, thanks! Is there any atomic unit for specific rotation?; > > ; > > ; > > since specific rotation is normalized for path length and concentration in experimental settings, I'd say the use of deg/[dm (g/cm^3)] for specific rotation is even more ubiquitous than the use of NM for wavelength for dynamic properties. @lothian may have more to say on this topic.; > ; > Are we talking about storing the specific rotation or the G' tensor? I would think we'd want to store the latter in atomic units (along with the field energy, also in a.u.), and not store the specific rotation, which can quickly be computed from the tensor and the energy. The G' tensor is stored in atomic units (as it's reported in the output file), while the specific rotation itself is stored in deg/[dm (g/cm^3)] since it is only one additional float. For now, since the syntax is `CCxx xPROPERTYx @ xxNM`, it's a bit easier to use NM. But you're right that the field strength in a.u. should be available at the python level to an arbitrary number of digits. perhaps the `omega` dict passed in (as `psi4.set_options({""omega"":[x,x,unit]})`) is available on the wfn already?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716600491:976,avail,available,976,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716600491,2,['avail'],['available']
Availability,"> > >, true>, boost::python::detail::no_proxy_helper<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true>, boost::python::detail::container_element<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true> >, unsigned long>, boost::shared_ptr<psi::Matrix>, unsigned long>::base_get_slice_data(std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >&, PySliceObject*, unsigned long&, unsigned long&) in export_mints.cc.o; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); ""_PyExc_OverflowError"", referenced from:; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned long>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned int>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned short>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned char>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyExc_ReferenceError"", referenced from:; boost::python::converter::(anonymous namespace)::lvalue_result_from_python(_object*, boost::python::converter::registration const&, char const*) in libbo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:22674,error,errors,22674,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,2,['error'],['errors']
Availability,"> > Do you have all the patches installed?; > ; > Define patches. Sorry, should have clarified.; https://www.mrcc.hu/index.php/download-mrcc/mrcc-binary-2/category/5-mrcc-patches",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070626117:127,down,download-mrcc,127,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070626117,1,['down'],['download-mrcc']
Availability,"> > Hopefully psi4 will hit conda forge soon; > ; > Agreed. There's some conflicting dependency issues to work out beforehand. More specifically, #2537 is the next step, AFAIK. We'd love to work on this, but a few other things (SCF cleanup and a new feature, double-checking ECPs, and overdue maintenance of `dfocc`) are higher priority for Lori and I.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257:293,mainten,maintenance,293,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257,1,['mainten'],['maintenance']
Availability,"> > I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR.; > ; > Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?. I will commit to doing it. I will likely open it up within the next few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373:320,down,down,320,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373,1,['down'],['down']
Availability,"> > I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more.; > ; > This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated.; > ; > @andyj10224, if you rebase as of this morning, the clang CI lane will work again. @loriab @JonathonMisiewicz I updated my qcel/qcng, and the mp2 hessian tests now pass. Now I just need to compile the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083:24,failure,failure,24,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083,1,['failure'],['failure']
Availability,"> > I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here. In the future, please use ""accept suggestion"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1404913573:78,error,error,78,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1404913573,1,['error'],['error']
Availability,"> > I'm slightly confused. So COSX and Direct have different ""versions"" of incremental Fock build, and this PR has them use the same incremental Fock code?; > ; > Yes this is correct. Yeah, what Andy said is correct. I've been doing some benchmarking of different J build methods with the COSX method. When doing benchmarks on the DFJCOSK code currently present in Psi4, it often to take a notably higher number of iterations then expected to converge many of the calculations, especially when diffuse functions are in the basis set. After modifying the COSX code to use the ""Direct"" version of Incfock, the number of SCF iterations needs to converge goes down noticeably. It was in these timing benchmarks that we found the different Incfock implementation in COSX, and this PR is meant to remedy that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1219772523:656,down,down,656,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1219772523,1,['down'],['down']
Availability,"> > The dfocc module is nice but pretty memory hungry. With systems that carry more than ~1300 basis functions i ran into problems i haven't been able to resolve yet. > What problems? I can imagine memory issues because of DFOCC::b_so. Exactly. As far as i tracked down the crashes, the program dies while computing the three-index integrals. It computes them all at once and stores them in memory. Probably, these need to be batched.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-971481116:265,down,down,265,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-971481116,1,['down'],['down']
Availability,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:1194,down,down,1194,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,2,['down'],['down']
Availability,"> @JonathonMisiewicz I think I did it right -- I added `MBIS VALENCE CHARGES` (`MBIS VALENCE WIDTHS` was already present) to the glossary and got things pulled in. Does this lgty now?. It should be. We need one other reviewer, and then to troubleshoot the failing test... The failure is unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226#issuecomment-2457645305:276,failure,failure,276,https://psicode.org,https://github.com/psi4/psi4/pull/3226#issuecomment-2457645305,1,['failure'],['failure']
Availability,"> @JonathonMisiewicz To reference the treating the D separately, we are calculating the change in the density matrix, or delta D if we are not in the first iteration, the delta J, K, and wKs are added to the J and K in the post-iteration step. That way, incremental Fock build is available for all JK types. Basically knowledge of the iteration is needed so we know when to set up the delta D matrices. (It is also needed for my future CFMM and linK PRs, where we do NOT want to run linK or CFMM on the SAD guess). Okay, so why do you need to know the _iteration number_? It sounds like you just need to know whether you're on the first iteration or not, which is inherently a boolean. I'd be less opposed to that, but I'd need to look over the code again to see whether I'm in favor of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937754025:280,avail,available,280,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937754025,1,['avail'],['available']
Availability,"> @davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?; > ; > ```; > Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; > ```. After some quick tinkering, I was fix the issue by adding the line. `psi4.set_options({ ""scf_subtype"": ""auto"" })`. under the definition of `mol`. Setting `SCF_SUBTYPE` explicitly like this circumvents the switch to the `INCORE` MemDF algorithm in the DFHelper constructor that is causing the exception. . Cross-checking against the test output from another Psi4 build leads to basically no difference in the output files, specifically in MemDF header printout, so I believe the intent of the test is also preserved (i.e., there are no alterations into what configurations of MemDF are tested).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904:193,Error,Error,193,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904,1,['Error'],['Error']
Availability,> @hokru Would you have time for a Psi4NumPy implementation?. I cannot promise anything but I write it down as a potential project.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1669#issuecomment-503910522:103,down,down,103,https://psicode.org,https://github.com/psi4/psi4/issues/1669#issuecomment-503910522,1,['down'],['down']
Availability,"> A couple thoughts before a more thorough review:; > ; > Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules; > ; > Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good.; > ; > It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop. I will run a variety of tests and include that as a Google Sheets link. And your point about redundancy is good. I will get that fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001:377,error,error,377,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001,2,"['error', 'redundant']","['error', 'redundant']"
Availability,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:33,error,error,33,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535,2,['error'],['error']
Availability,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:336,ping,ping,336,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379,2,['ping'],['ping']
Availability,"> All relevant error information should end up in the error box, not just `stderr`. OK. Would the inverse be acceptable? ie. nothing going to `stderr`, only to the error box",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1236139536:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1236139536,3,['error'],['error']
Availability,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:196,down,downgrade,196,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664,1,['down'],['downgrade']
Availability,"> Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe. I have extensively verified the correctness of this approach, across many different molecules, basis sets, etc. I have never observed an error of ""2 Hartrees"". The worst I have ever observed is on the order of 1.0e-5 Hartrees, better than density fitting. Here is a link to my ""benzene case study"". https://docs.google.com/spreadsheets/d/1HDMZ5PV6GhnK4i68Y1t86VhauTwqMP_X2kII21GCsiY/edit?usp=sharing. I empirically discovered that the best screening threshold given an energy convergence of 1.0e-n is 1.0e-(n+3) for non-augmented basis sets and 1.0e-(n+5) for augmented basis sets. For example, for an e_convergence of 1.0e-8 in cc-pVTZ, the ideal threshold is 1.0e-11, while it is 1.0e-13 in aug-cc-pVTZ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029:327,error,error,327,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029,1,['error'],['error']
Availability,"> Also, would using the (smaller) default grid, i.e. `dft_spherical_points 302` (instead of 434) and `dft_radial_points 75` (instead of 85) improve the convergence?. No, this will only worsen the convergence by introducing more numerical error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016#issuecomment-704952817:238,error,error,238,https://psicode.org,https://github.com/psi4/psi4/issues/2016#issuecomment-704952817,1,['error'],['error']
Availability,> Any error message on the crash?. No.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940098:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940098,1,['error'],['error']
Availability,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:1318,avail,available,1318,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['avail'],['available']
Availability,"> Before we merge, just wanting to confirm if the right conda install libint2 -c psi4/label/dev is available?. I hope so -- they should be: https://anaconda.org/psi4/libint2/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341:99,avail,available,99,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341,1,['avail'],['available']
Availability,"> CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine. The docs CI seems to be flaky at the moment, no idea why",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338:5,failure,failure,5,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338,2,"['error', 'failure']","['error', 'failure']"
Availability,"> Can you provide a before-and-after example of what error messages look like?. Hmm, yes I reckon if I ran something with a ~50 MB ramdisk as the scratch drive, that should be a reliable way to trigger a write failure. My immediate-term schedule just got a lot busier, so I might not get around to doing this for a week or so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441:53,error,error,53,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441,3,"['error', 'failure', 'reliab']","['error', 'failure', 'reliable']"
Availability,"> Cool! Just as a remark: I suggest to default to adcc in procrouting as well for ADC(2) in case it is available. Right now the default is still the builtin. I'm in favor, but this sounds like the sort of thing other developers may object to, so I'll defer to popular opinion before deciding to adopt or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1029167139:103,avail,available,103,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029167139,1,['avail'],['available']
Availability,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:199,error,error,199,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685,3,['error'],['error']
Availability,"> Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?. I poorly worded my explanation. I was attempting to say that the geometries are virtually the same but not numerically, they are both well converged. I assumed the discrepancy was just a numeric difference and there have been various tweaks as well over the last few years to the algorithm. There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. > Is .log where all the optking detailed output goes now? I guess we ought to start collecting them. output.log, perhaps. But this can also be deferred to a grand regenerate-the-refs script and PR. Yes optking's detailed output goes to `.log` but it isn't strictly speaking necessary for the user to see the detailed logs I would say. However, if the test is failing it might be nice to have a more detailed optimization record to compare against if the optimizer is at fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435:1298,fault,fault,1298,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435,1,['fault'],['fault']
Availability,"> Could you post the whole test output please?; > ; > And do you have the `dftd3` binary available at run time?. Yep, it was a dftd3 issue. Rerunning tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981:89,avail,available,89,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981,1,['avail'],['available']
Availability,"> Do you have SCF iterations before the crash?. No. It crashes setting everything up. And yes, the error is not reliably found in one place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-443205607:99,error,error,99,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-443205607,2,"['error', 'reliab']","['error', 'reliably']"
Availability,"> Downgrade numpy to 1.16.2 may work. Thanks tzyii. . I have noticed that error information and downgrade the numpy, all are ok now. This just a report that PSI4 is incompatible with numpy >= 1.16.3?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350:2,Down,Downgrade,2,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350,3,"['Down', 'down', 'error']","['Downgrade', 'downgrade', 'error']"
Availability,"> Following up on an issue from the conference call:; > The fixed `phi_ao` functions are used to form the core Hamiltonian whenever an embedding potential is read from a file. While I haven't run anything, I would expect the bug fixed by this PR to cause correctness errors in SCF energies. Definitely agree with getting this fix in for 1.4. Hi Jonathon,. As requested, I cleaned up the code by removing the helper functions, as well as added a new test case (C test phi-ao).; I think having phi_ao as a python function will be useful to Psi developers and users, as it would be immensely helpful for the development of grid-based approaches. Thank you,; Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877678443:267,error,errors,267,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877678443,1,['error'],['errors']
Availability,"> From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. . It's somewhere in between. Good news is that besides this error, it finished building fine. Previously reported by me errors are only in 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702979:204,error,error,204,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702979,2,['error'],"['error', 'errors']"
Availability,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:116,error,error,116,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092,6,"['error', 'reliab']","['error', 'reliable']"
Availability,"> Here's a quick-and-dirty review before I go silent for a while over the Thanksgiving holidays.; > ; > There is a _lot_ of code duplication in this file. How much of this can we consolidate? I can figure out where one builder function differs from another, but it takes much more effort than I'm comfortable with. I understand if this is essential for speed purposes, but the current arrangement is error-prone. Good point. I will try to see if I can consolidate any repeats, perhaps `build_JK(ints, D, J, K, do_J, do_K)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-976006166:400,error,error-prone,400,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976006166,1,['error'],['error-prone']
Availability,"> Hi, did you get a chance to look at this further? So long as as big problems aren't uncovered in last week's rc3, we'd like to do the 1.4 release including the new databases this week. I think the items in [#2154 (comment)](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272) were pretty small. Let me know if you need advice for the rebase. I need to run, some tests, if the database after the changes is still fine since I didn't manage to put up automated tests, yet.; Running, whole test set might add significant overhead to the already time-consuming test suite. Are there any recommendations on `pytest.mark` to qualify it for the `heaviest` league?; I imagine, running some small-basis SAPT0 for mb case, and UMP2 for CP/un-CP one. > remove no_com, etc. if not really; - [x] done . > clarify in docstrings whether 1.9 is R_eq or AA; - [x] done, I think. See the latest changes `R=0.9R_eq`. > allow uncp in ACTV rather than hardcoding both it and ACTV_CP to cp, unless there's a good reason not to; - [x] done, TBH I've worked exclusively with mid-bond version with CP, I don't know if unCP with mid-bonds makes even sense. Need someone with `unCP` experience to comment on that. > I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.; - [x] rebased. as for DRYifing two files, I don't think it's desired to couple these two files, as they should be in-principle, runnable standalone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595:1322,fault,fault,1322,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595,1,['fault'],['fault']
Availability,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:651,down,downstream,651,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414,2,['down'],"['downstream', 'downstreams']"
Availability,"> I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428:318,down,down,318,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428,1,['down'],['down']
Availability,"> I can try to reproduce the error on my systems, but I wonder if the behavior would change if you asked for less memory – say 4GB?. No change in behavior with 4GB, same crash.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246607163:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246607163,1,['error'],['error']
Availability,"> I didn't examine the code in detail; does it use aliasing? I think Neese and coworkers use it a lot, the idea is to make the integrand smoother so that the quadrature errors are smaller and one can get away with smaller grids. Yes, this PR uses aliasing (also called ""overlap fitting""). This feature is enabled with the `COSX_OVERLAP_FITTING` keyword. The second reference added to the bibliography covers the theory behind this idea, and the code references equations from this paper.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120084494:169,error,errors,169,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120084494,1,['error'],['errors']
Availability,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-344327124:93,down,downloads,93,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124,2,['down'],['downloads']
Availability,"> I don't like the idea of removing these functions. Some of us in Francesco's group use `swap_columns` to move orbitals in the C matrix. Thanks, I have no intention of causing downstream pain by axing it if it is actually being used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483209663:177,down,downstream,177,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483209663,1,['down'],['downstream']
Availability,"> I don't quite understand what the numbers in brackets mean; > * 1 -0.972087 ( 0, 0) 2AX 3AA.; > * 2 -0.165902 ( 2, 2) 3AA 4AX.; > * 3 -0.165902 ( 4, 3) 3AA 5AX.; > I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed. 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. I think the difference may just be in the ordering of the different spin blocks: are the creation/annihilation operators acting on the HF determinant first by orbital, then by spin, or first by spin, and then by orbital.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-804983924:289,down,down,289,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-804983924,2,['down'],['down']
Availability,"> I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more. This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated. @andyj10224, if you rebase as of this morning, the clang CI lane will work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530:22,failure,failure,22,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530,1,['failure'],['failure']
Availability,"> I finished about half of the review and then got confused about the ""big picture."" If you're only intending to support point charges, then what happens if a user passes in an external potential object with basis functions attached? I can't find a place in this code that limits the kind of external potentials that can be considered. And why are there lines of code to get and append basis functions from/to the external potential? If you don't intend to support basis function external potentials (and it isn't clear to me if you intend to or not), then there should be a user-friendly error message when a user tries this. And on the topic, what is the technical barrier to including basis function external potentials? Is there a reason why those are being excluded from this PR, if they are?; > ; > I'll need to re-review once changes are made, and this issue of basis function external potentials is clarified. Please see the updated description above. I removes unnecessary code to make this PR specifically for point charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855:589,error,error,589,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855,2,['error'],['error']
Availability,"> I finished the `lmp2_iterations` function, and I have a much better feel for how the code works now.; > ; > Zach, do you want me to keep going, or do you want to respond to what I've already flooded you with? I'd rather wait for you to catch up, to avoid having many comment chains at once. Thanks for the super thorough review. You've given me plenty to work through if you want to turn your attention to other things for a bit. I can ping you once I've responded to everything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460:438,ping,ping,438,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460,1,['ping'],['ping']
Availability,"> I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started. Hmmmm, I see. Thank you for looking into this! I just rebased and pushed again, so we will see if that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983:26,error,error,26,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983,1,['error'],['error']
Availability,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:697,error,error,697,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585,2,['error'],['error']
Availability,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:164,robust,robust,164,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,6,['robust'],['robust']
Availability,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:415,down,download,415,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,3,['down'],"['download', 'downloaded', 'downloads']"
Availability,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500,2,['error'],['error']
Availability,"> I removed the MEMORY option from the ADC section, but now some tests using fnocc are failing, because apparently, the option was only provided by the ADC part in read_options.cc... What should I do about this? adcc does not take any input on available memory, so where should the MEMORY option live from now on?. My best guess at why fnocc is using MEMORY is so that it can get more memory under default conditions (1gb instead of 0.5gb). Better handling would probably be to have a `FNOCC_TRIPLES_FACTOR` to manipulate input memory. I think comment out those `MEMORY` blocks in triples and lowmemory_triples, and we'll put up an issue. Those aren't running by default, and fnocc doesn't own MEMORY (as you discovered).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1270159393:244,avail,available,244,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1270159393,1,['avail'],['available']
Availability,"> I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. No. Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:757,avail,available,757,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,2,['avail'],['available']
Availability,"> I think that requiring pairs of (Alpha, Beta) is the right interface. Another (more clean and less error-prone) option would be to only allow for custom operators in the AO basis...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168:101,error,error-prone,101,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168,1,['error'],['error-prone']
Availability,"> I think the problem is the MOs appearing in the output file in addition to the FCHK file. Should be an easy one to track down, I hope. Whoops, that's right..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-426249740:123,down,down,123,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-426249740,1,['down'],['down']
Availability,"> I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; > Please check the updated main post. What do you mean? If you run OO-CC, does the checkpoint file contain the original HF orbitals, or the OO-CC orbitals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939:216,checkpoint,checkpoint,216,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939,1,['checkpoint'],['checkpoint']
Availability,"> I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... In another project, I have the glossary-like doc generated by python to cut down on that. Perhaps someday ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001:32,down,down,32,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001,2,['down'],['down']
Availability,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:114,avail,available,114,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293,1,['avail'],['available']
Availability,> I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here. @susilehtola,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1403785234:76,error,error,76,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1403785234,1,['error'],['error']
Availability,"> I'm afraid I don't know what ""consolidate the -D and -NL behaviour"" means in this context. I am referring essentially to this: https://github.com/psi4/psi4/pull/2132#issuecomment-802158952; Was a PR question, rather than code comment. If there was a code discussion I missed it. If you/we don't want to touch it this now, we should note it down somewhere. Either as issue or code comment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963304601:342,down,down,342,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963304601,1,['down'],['down']
Availability,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:54,error,error,54,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,1,['error'],['error']
Availability,"> I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues. sounds good. I think it's worth turning on in azure, if that wasn't already in your plans.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039:99,error,errors,99,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039,1,['error'],['errors']
Availability,"> I'm not really qualified to appraise this, but I don't see any obvious errors. Alas, nobody is fully qualified to appraise this. TDC knows the `cc` code and Lori knows psivars, but densities touch so many parts of the code that we'd need expertise in every single module, which we simply don't have. I won't be free to work on the next PR for a while, so we can leave this open to collect more comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1098334427:73,error,errors,73,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1098334427,2,['error'],['errors']
Availability,"> I'm not seeing any change in in 6 years -- https://github.com/psi4/psi4/blame/master/psi4/src/psi4/libscf_solver/hf.cc#L772-L801 . I also did a fresh clone and compile of master earlier today, and it was fine, so I'm not sure what circumstances could lead to your error. If you're rebuilding psi4 after a long interval, I'd suggest a new objdir.`compute_fcpi()`. maybe because i enable brianqc? my compile being corrected after I add ""}""; btw , my link is [https://github.com/psi4/psi4/tree/master/psi4/src/psi4/libscf_solver](url)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3185#issuecomment-2179682307:266,error,error,266,https://psicode.org,https://github.com/psi4/psi4/issues/3185#issuecomment-2179682307,1,['error'],['error']
Availability,"> Ideally, the list of functionals in Psi4 would depend on the version of libxc available. Not to be snarky, but when there are two upstream libxc-s that can build and are API compatible with Psi, I can probably arrange for varying functional lists. For present, I yearn for one. (I may be misunderstanding your point.) . > And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:80,avail,available,80,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,2,"['avail', 'down']","['available', 'downstreams']"
Availability,"> Including the _order of magnitude_ in a corner of the plot is highly non-standard and leads to the confusion I just went through. Choose units that are of the proper order of magnitude, and include any needed decimals on the axis directly. According to your axes, you have 2 hartree error, which is utterly unacceptable. 0.2 microhartree error is much more reasonable.; > ; > What you're describing confirms that the error is small. That is different from confirming correctness. Are you able to compare the numbers to some other implementation and show agreement? Is there some rare property that the exact scheme has, which you can numerically reproduce?. Ah, the energy convergence criteria itself is 1.0e-6, and the errors are well below that number, so I strongly believe that we are safe. It may not be a good idea to compare to another implementation since every implementation has different tricks thrown in. Rather, if the energy difference is less than the e_convergence criteria, we are definitely safe. Though we could try to reproduce something like MBIS charges to check if we are safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961:285,error,error,285,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961,4,['error'],"['error', 'errors']"
Availability,"> Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?. Yes. Lori's comment was ""trick you can use to prevent accidentally stumbling into this again,"" not a fix. `scf::HF::compute_fcpi` probably needs a validation check...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818,1,['error'],['error']
Availability,"> Instead, the parser should be developed to have a shorthand for exchange and correlation functionals. . Not sure I agree on this one. While such parsers are common in other codes, personally I think it's a wasted effort when one uses libxc - most folks who want ""non-standard"" combinations of exchanges and correlations know what they're doing, and they will be comfortable with the `dict`-based interface (if they aren't, it's a failure of the docs more than anything). Obviously, it doesn't hurt to have the common options (such as BLYP, SVWN, PW91, PBE...) pre-defined and checked for regressions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875:432,failure,failure,432,https://psicode.org,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875,1,['failure'],['failure']
Availability,"> Interesting, I had believed the other cases were handled by LibXC and the only component we were interested in is if they needed wK or not. As a note this was directly copied out of the wiki at one stage. What needs to be done to add Yukawa screening and what exactly is LC then?. They are handled in libxc in the same way CAM is. Namely, if you use a range-separated hybrid, libxc only computes the local component. It is the responsibility of the downstream code to do the range-separated exact exchange. I have a vague recollection of seeing a paper (I think the authors were Japanese) that discussed how the Yukawa exchange can be calculated in Gaussian basis sets. I never implemented it in ERKALE since basically all functionals just use the error function method which is trivial to implement in Gaussian programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1258#issuecomment-424044212:451,down,downstream,451,https://psicode.org,https://github.com/psi4/psi4/issues/1258#issuecomment-424044212,2,"['down', 'error']","['downstream', 'error']"
Availability,"> Internally it's fine to use COSK, however user-facing it is better to use COSX, imo. That's a good idea, done. > Ideally the COSK grids can use all the options the normal DFT grid uses. At the very least pruning. However it is a bit annoying that one has to duplicate/triplicate the normal DFT grid options for this. Not sure how this can be solved best. Yes, the fact that the COSX grids are affected by keywords such as `DFT_PRUNING_SCHEME`, `DFT_RADIAL_SCHEME`, `DFT_NUCLEAR_SCHEME`, etc. is not ideal. I don't think we should duplicate/triplicate these keywords (resulting in independent but parallel keywords like `COSX_RADIAL_SCHEME`, `COSX_RADIAL_SCHEME_FINAL`, etc.) because I can't imagine any users realistically wanting to manually set those values. I think it makes more sense to hardwire some of the grid settings when building the grids for COSX. For example, we probably always want do `ROBUST` pruning on those grids.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1117521179:904,ROBUST,ROBUST,904,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1117521179,1,['ROBUST'],['ROBUST']
Availability,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:324,down,downstream,324,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698,4,"['down', 'mainten']","['downstream', 'maintenance']"
Availability,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:462,error,error,462,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933,10,['error'],['error']
Availability,"> It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving ; > downstream the permission to rely on both the object and all of its public members ; > being a stable API, not just a few functions. I think that is right, as well. When I said ""user-facing"", I meant the `ERISieve` functions that are explicitly enabled Python-side via PyBind, as defined through the `export_mints.cc` file. Deprecation as a whole is less my realm of expertise, however, so I'm not 100% if what I'm doing is even the ideal route regardless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435:96,down,downstream,96,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435,1,['down'],['downstream']
Availability,"> It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow. That's what I do for the json molecule record – there's a list `real = [True, False, True, False, False, False]` and a separate `fragment_separators = [3]` that decouples what would be the following in psi. Ghosting types A & B are collapsed. . ```; molecule {; C; @C; C; --; C; C; C; }; extract_subsets(1, 2); ```. > As for a new Molecule function to ensure the user knows what they're going to get, are you referring specifically to a molecular_weight function or more generally a function to return either the mass or Z val as either zero or real depending on input?. I think I've settled on recommending changing the signature of `Molecule.Z()` and `Molecule.mass()` to take a required argument `bool zero_ghost`. The recompile will force consideration of which was wanted everywhere (incl. downstream). At the same time, I think leave `CoordEntry.Z()` and `CoordEntry.mass()` alone in their probably inconsistent state. Most of the `Z()` calls in Mol are probably to `CoordEntry.Z()` and have the gh=0 factored into the logic. Should definitely get consensus tomorrow before diving in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363503391:930,down,downstream,930,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363503391,1,['down'],['downstream']
Availability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:345,error,errors,345,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,4,"['down', 'error']","['down', 'errors']"
Availability,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:317,avail,available,317,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815,1,['avail'],['available']
Availability,"> Just checking that the extra precision added https://github.com/psi4/psi4/pull/1510/files didn't get lost. We studied numerical precision and couldn't justify going out to the **17** decimal places reported after #1510: the Python code couldn't reproduce the C++ code out that far. My memory is hazy, but I recall some errors that were normally in the 14th decimal place but could rarely reach to the 12th decimal place, which I suspected were related to the numerical precision of S^(-1/2). This made me want to cut back the number of decimal places to something less fragile. I [checked in](https://github.com/psi4/psi4/issues/1973) about why we had 17 decimal places in the first place, and the person who made the change simply assumed that we had that many decimals of precision. In my judgment, we do not, and it was a mistake to ever report that many decimal places. I _also_ checked that 10 decimal places was enough to keep #1486 fixed. (That was the issue that originally prompted the increased precision in our Molden files.) While the 4 decimal places of the pre-#1486 era had the bug, the 10 decimal places of this PR did not. While we could _maybe_ go out to 11 or 12 decimal places, trying to get 17 decimal places of precision would require an analysis of round-off error in every line of the SCF code. This seems far beyond the scope of the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2229#issuecomment-872543523:321,error,errors,321,https://psicode.org,https://github.com/psi4/psi4/pull/2229#issuecomment-872543523,4,['error'],"['error', 'errors']"
Availability,"> Let me make sure I have this right: you're plotting energy errors on the order of 1e-7, but you only converged the energy to 1e-6? If so, then your plots are pure noise. If not, then what am I getting wrong?. Yes sir that is right :) The point of the plots is to show that the errors are irrelavent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821213641:61,error,errors,61,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821213641,2,['error'],['errors']
Availability,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:111,error,error,111,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171,2,"['down', 'error']","['down', 'error']"
Availability,"> Maybe it's a pybind11 issue?. Worth a try. Looks like we were at `v2.2.3` in that era: (2nd col of https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml#L103-L104). > Yup. And no changes to dependency lists either; no qcengine. aggh. > And yes, this is with Python 3.11 in Fedora rawhide. Can you dial Python down a bit? Psi 1.3 was only knowingly build for 3.6 and 3.7. --------. This long life of v1.3 is all because of Libint2 issues, right? Can L2 be vendored with (internal build distributed with) Psi4? Must it be static?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833:340,down,down,340,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833,1,['down'],['down']
Availability,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:117,Ping,Ping,117,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373,1,['Ping'],['Ping']
Availability,"> No py-side changes needed for 3.9 to work? Nice!. nope! I tested it a month ago with c-f 3.9, and it built first time. now the py39 stack is available on defaults, so we're good to go. (there's a p4 conda package up now, but it's built from this branch, not master, so I'll pull it soon.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2063#issuecomment-743485611:143,avail,available,143,https://psicode.org,https://github.com/psi4/psi4/pull/2063#issuecomment-743485611,1,['avail'],['available']
Availability,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:698,down,down,698,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932,1,['down'],['down']
Availability,"> Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python.; > ; > I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that. thanks for this very useful pointer! I will then give `PySCF` a try. however, my main concern with `PySCF` is, after getting the SAD Guess from it, I have to reorder the rows and columns of the density matrix, so that it aligns with the ordering in `psi4` ? I believe these 2 programs do not have the same ordering (but I'm not certain). I need to do this as most of my workflow is centred in `psi4`, and a large amount of calculations of density matrices have already been done with `psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056:113,avail,available,113,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056,1,['avail'],['available']
Availability,"> Now I also get it :); > ; > Incremental Fock builds can show numerical error accumulation. Adding a reset frequency is sensible, e.g. after 20 incremental builds do a full Fock build from scratch. The actual number should be a (expert) user option.; > ; > The incremental Fock build can be compared against a standard build. They have to agree.; > Comparing density screening to other programs can probably only be done for HF calculations and even then I would expect that one can only see 'similar errors' and no exact number agreement. This is already done, as I turn off incremental Fock build after the density drops below 1.0e-5, to reduce the differences, though I could make this a user option. :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821204441:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821204441,2,['error'],"['error', 'errors']"
Availability,"> Other than seeing python test failures caused by psi4 being compiled with python3 not python2 assumed by the tests, nothing big comes out. I hope these are tests in `tests/python/` and `tests/json/` you're seeing this with (those are psiapi)? All psithon `ctest` tests should be using the python psi was built with, not the `which python` python. . Sure, I'll run a local full tests on this PR this weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607182:32,failure,failures,32,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607182,1,['failure'],['failures']
Availability,"> Please explain the bug in more detail. Is the expected behavior that Psi reports some jobs in the plan can't run? If the expected behavior is that you get a number, why are any PsiExceptions appearing in the plan?. Good point. The new driver_util tech separates figuring out what derivative psi can do analytically under the specified conditions from what derivative requested or demanded by user. So those error strings you see in `analytic` are just being stored _in case_ user demanded analytic gradient. In the given case, energy was requested and the error strings were never used. If the user wanted gradient, calc would fall back to findif by E and the error strings wouldn't be used. If the user wanted gradient and also gave `dertype=1` for analytic, the error string pops up. For the last case, this needs to be improved in future to show the user _all_ the errors, not just the first (mp2) one. But that's more than a couple-line fix, so not suitable for backport.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2590#issuecomment-1145418829:409,error,error,409,https://psicode.org,https://github.com/psi4/psi4/pull/2590#issuecomment-1145418829,5,['error'],"['error', 'errors']"
Availability,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769,1,['error'],['error']
Availability,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:485,error,error,485,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333,4,"['error', 'toler']","['error', 'tolerance']"
Availability,"> Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of; > ; > * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); > * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); > * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2); > ; > You can see what you've got with `conda list`. Thank you very much. I'm using a fresh psi4-dev env, which I create with the following command: conda create -n psi4env python=3.9 psi4 gau2grid=2 --only-deps -c psi4/label/dev.; When I use the conda list to check it, it also includes: libint2 2.7.1 h2fe1556_15 psi4/label/dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093:345,down,download,345,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093,3,['down'],['download']
Availability,"> Since this is real trouble if a K-needing method doesn't get a K, maybe add a test of scf_type=dfdirj parametrized over BP86 and B3LYP that checks that the former runs and the latter errors informatively. Yeah, I can do that!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873:185,error,errors,185,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873,1,['error'],['errors']
Availability,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:524,checkpoint,checkpoint,524,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820,1,['checkpoint'],['checkpoint']
Availability,"> Sorry to keep making you write, but is the ""big picture"" view of nbody documented anywhere? I can't follow what energy_body_dict means, or why the value of one of its entries is coupled to whether the total energy is available. > I fear this is a case where there is a lot of ""developer was only coding to be comprehensible to themselves"" code debt. I confess to being lost in nbody, too. And some of the psivars set aren't as descriptive as I'd like (e.g., `2CP`. However, any changes to nbody make DDD especially painful to rebase. And I think a good time to rationalize and document the pieces are when we take the nbody communication dictionary DDD uses and formulate/propose a proper schema. I guess I'm ok leaving it inscrutable (and without binding contracts :-) until then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597:219,avail,available,219,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597,1,['avail'],['available']
Availability,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:11,down,downloaded,11,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['down'],['downloaded']
Availability,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432,3,['error'],['error']
Availability,"> The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. . Yep, much cleaner syntax. > Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again. The (probably faulty) code should be in `twoel_Hx` (and deeper) which was not touched in this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644794380:396,fault,faulty,396,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644794380,1,['fault'],['faulty']
Availability,"> The git history is still a concern. If it's WIP, fine, but if you're having trouble, please ping me on slack. Thanks. Yes, I'm still working on the project. Though I fixed the git history.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043#issuecomment-742693014:94,ping,ping,94,https://psicode.org,https://github.com/psi4/psi4/pull/2043#issuecomment-742693014,1,['ping'],['ping']
Availability,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:351,avail,available,351,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375,2,['avail'],['available']
Availability,"> Then I rebuild dftd3 under WSL. You mean you go to https://github.com/loriab/dftd3, clone and compile and it works? (`make` or `cmake`?) Or you mean downloading the 3.2.0 tarball from Grimme and `make`ing it works?. In either case, thanks for the investigation. I must have done something in the conda package that disagrees with WSL. Will fix by v1.3.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587#issuecomment-478302836:151,down,downloading,151,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-478302836,1,['down'],['downloading']
Availability,"> There are not many places internal to Psi4 that need to really know the ordering of our orbitals. So perhaps us changing to match default libint2 wouldn't be too big a hurdle. Do any of our up or downstream packages need to know the ordering?. * fwiw, none of our ecosystem packages use libint directly; * gau2grid is aware of ordering, but it's runtime setable; * reading Andy's comment into the record https://github.com/evaleev/libint/issues/190#issuecomment-691482710",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926952999:198,down,downstream,198,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926952999,1,['down'],['downstream']
Availability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:178,down,downstream,178,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,4,"['down', 'mainten']","['downstream', 'maintenance']"
Availability,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:91,toler,tolerance,91,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"> This reminds me, there _is_ a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation. Thank you for telling me about this! This is an intriguing idea overall. Essentially, instead of hard-setting a number of iterations to fully recompute the Fock matrix, one does it dynamically based on how much the density matrix has changed over time. While I don't think this PR is the right place to implement such a scheme (with 1.7 is right around the corner; and since such a scheme would break standardization of IncFock between the different integral-direct JK builds Psi4 has currently, assuming we implement it only in DFJCOSK for this PR), it could be worth investigating in the future. The potential for removing a human-set parameter (INCFOCK_FULL_FOCK_EVERY in this case) is always appealing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155:488,error,error,488,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155,1,['error'],['error']
Availability,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344762514:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514,3,['error'],['error']
Availability,"> Two questions:; > ; > * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; > * Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do. @hokru answered the first part; and while I couldn't say what a ""proper magnitude"" is, my observation was that some of the negative weights were large enough in magnitude to where zeroing them out wouldn't be feasible. For your second part, it's just what was settled on at the Psi4 dev meeting, moreso than anything. On further reflection, though, I can work on your suggestion today, because you're right, it wouldn't be too hard to do what you said.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042:125,toler,tolerance,125,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042,2,['toler'],['tolerance']
Availability,"> Update your PR description. Behavior changes are not ""minor cleanup"", even if that behavior is as simple as raising an error where there wasn't one before. Done",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322:121,error,error,121,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322,2,['error'],['error']
Availability,"> Wait, what? Then how is Incremental Fock build set to energy tolerance on the order of 1e-9 giving you errors on the order of 1e-7?. Oh no, I mean the SCREENING threshold is set to 1.0e-9, the energy tolerance is 1.0e-6.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821209945:63,toler,tolerance,63,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821209945,3,"['error', 'toler']","['errors', 'tolerance']"
Availability,"> Wait, why do we want to ""turn off the incremental build once a preset level of `D_CONVERGENCE` is achieved""? Is the idea that the numerical creep is within the `D_CONVERGENCE` tolerance?. I would maybe turn it off when the final `D_CONVERGENCE` has been reached, and then do full rebuild(s) until SCF convergence has been achieved. It's been almost a decade since I worked with the equations for direct SCF; wasn't there some cutoff parameter that's used to discard ""small"" elements to the Fock matrix? This may not be accurate enough so it's always safer to do a full build at the end. Again, the point about resets is just to prevent numerical creep, which might require several more costly full rebuilds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917:178,toler,tolerance,178,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917,1,['toler'],['tolerance']
Availability,"> We should use a more informative/tailored error message.; > ; > But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?. Ach so, I just found a method to calculate without this wfn,thanks!; btw,I'm looking forward to calculate analytical hessian with DFT for long time, having any plan?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664:44,error,error,44,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664,1,['error'],['error']
Availability,"> Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we ; > suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering ; > schemes. Well, there are already the 0.1, 0.2 and 0.3 releases - I complained about the number downgrade, got schooled and bit the bullet by introducing an epoch in the version for the packages I maintain. But if the developers decide to switch back to 4.0 as stable version, I won't complain, it's not a big deal to skip version numbers. . In that case I guess there should be a note that psi5 really starts at 0.1 from the beginning (if people still use version numbers by then).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-183429072:302,down,downgrade,302,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-183429072,1,['down'],['downgrade']
Availability,"> What happens if a user runs a computation, toggles whether X2C is on, and then calls the wavefunction's compute_gradient method?. Apparently even the non-rel returns a `psi4.core.RHF`, and since that hasn't had it's `compute_gradient` implemented, the parent `Wavefunction`'s `Analytic gradients are not available for this wavefunction.` is thrown. Not what I was expecting (or probably what someone using a C++ API was expecting), but it does shut down a way to get the wrong answer by evading the Py APi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869752875:306,avail,available,306,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869752875,2,"['avail', 'down']","['available', 'down']"
Availability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:981,error,error,981,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,2,['error'],['error']
Availability,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930,8,"['Error', 'down', 'error']","['Error', 'downstream', 'error']"
Availability,> Why do we have DipoleInt as a class unrelated to MultipoleInt?. I don't know. There's also `QuadrupoleInt` and `TracelessQuadrupoleInt` which both use L2. Some more senior developer would have to comment on whether a) we should keep all of the multipole classes as-is or b) hard-wire some to the general `MultipoleInt` or c) remove the specialized integral classes entirely. ping @loriab @andysim @jturney,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077741209:377,ping,ping,377,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077741209,1,['ping'],['ping']
Availability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:348,toler,tolerances,348,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,4,"['down', 'toler']","['down', 'tolerances']"
Availability,"> Wow, a lot of PYTHON->Python for you to track down there. Is that syntax change a recent thing? LGTM!. I guess long, long ago, cmake's native python's detection had no notion of finding matching interpreter/library pairs. That reported its results as `PYTHON_FOUND` and friends. Hence numpy/pb11/us used the `FindPythonLibsNew` module that had mixed c++/py in mind and also reported as `PYTHON_*`. But the cmake native detection has been much revamped, reformed, and componentized, enough to [inspire pybind11 to switch over](https://github.com/pybind/pybind11/pull/2370/files). The new setup reports as `Python_*`. The long time it's taken to get cmake's new detection modules hammered out leads to the big jump to 3.15. There may still be plugin and docs build follow-up items, but I think I've caught most of the `Python`s. Main thing ppl have to do is edit their setup scripts if they're hinting the `PYTHON_EXECUTABLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688:48,down,down,48,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688,1,['down'],['down']
Availability,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:1147,down,down,1147,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,2,['down'],['down']
Availability,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:526,error,errors,526,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932,1,['error'],['errors']
Availability,"> You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points.; > ; > This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so.; > ; > I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?; > ; > Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while. Ah, I am learning a lot. Good teachers like you will prepare me well for grad school :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069:75,error,error,75,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069,4,['error'],['error']
Availability,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:1089,down,down,1089,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,1,['down'],['down']
Availability,> ```; > rows_per_bucket = -1622894080; > nbuckets = -18256; > rows_left = -1312595486; > ```; > ; > This immediately makes me suspect a type overflow error. Thanks for everything thus far. Or possibly an unsigned underflow that got cast to signed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227204536:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227204536,1,['error'],['error']
Availability,"> ah, was this choking in `OEProp` when you pushed an EOM wfn? or was it computing properly and just giving the redundant name? regardless, good catch. Computing properly and not giving the expected `CCSD DIPOLE`. This led to an error when I fixed a bug in AJ's code. That should be fixed in the next `cc` series PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532:112,redundant,redundant,112,https://psicode.org,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532,2,"['error', 'redundant']","['error', 'redundant']"
Availability,"> do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. If I'm following this correctly, you are talking about RI fitting for Li? It looks like the EMSL BSE was missing that, but I've taken the values from turbomole for the new BSE. (The developers of that fitting basis were turbomole developers)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467228938:47,avail,available,47,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467228938,1,['avail'],['available']
Availability,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258535598:2,error,error,2,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598,4,"['error', 'reboot', 'recover']","['error', 'reboot', 'recovery']"
Availability,"> general note: now that I have the correct base of master, azure should run and fail on mbis-3. @zachglick tracked the problem down to nondeterministic root solutions of the degenerate states. a PR will happen. follow-up: I've removed mbis-3 from quicktests so this one can merge. note that it's a known failure in full tests for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-688988721:128,down,down,128,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-688988721,2,"['down', 'failure']","['down', 'failure']"
Availability,"> hello, I'll try to work on the replies and changes to have it completed by the end of the week, might I ask what's the timeframe we're working here before 1.4 stable release?. We're probably looking at rc3 asap and stable 1.4 next week. So end-of-the-week is fine. As I see it, the items are:; * remove no_com, etc. if not really needed; * clarify in docstrings whether 1.9 is R_eq or AA; * allow uncp in `ACTV` rather than hardcoding both it and `ACTV_CP` to cp, unless there's a good reason not to; * the suggestion about deduplicating the two files might be possible, but I don't think it's worth it for a db; * I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-870728272:737,fault,fault,737,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-870728272,1,['fault'],['fault']
Availability,"> heya it says 40 passed, 51 skipped, 4026 deselected, 1x failed in 283.19s (0:04:43). no failed or errors, so it seems to be working fine. https://docs.pytest.org/en/7.1.x/how-to/output.html?highlight=xpass#producing-a-detailed-summary-report. > also how do you copy paste i try the ctrl+shift+c but it doesn't look as it should. you'd have to look that up for your OS and terminal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1175773574:100,error,errors,100,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1175773574,1,['error'],['errors']
Availability,"> oh no, not again. Yes, one had to download patched files for the previous version from their homepage. See [the issue about the 2020 release](https://github.com/psi4/psi4/issues/1866) for additional information on ""the previous version"" and Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1077599645:36,down,download,36,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1077599645,1,['down'],['download']
Availability,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:546,error,error,546,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845,4,['error'],"['error', 'errors']"
Availability,"> svwn_hessian_module shows 15 failures, now that I check that... Can I just halve the default value? That will make RKS behavior as it was before. UKS will stay change, but I think that's unavoidable. Unless you think new (w/PR) analytic value is better than before (in which case I need to re-collect refs), I agree on halving the default. That's equivalent to tightening up occ/dfocc to work under standard options settings. All stdsuite is run under standard conv and options (besides points=5; otherwise nothing would match).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834#issuecomment-1349608028:31,failure,failures,31,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349608028,1,['failure'],['failures']
Availability,"> that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running get_funcs.pl. The easiest way to force the list to be regenerated is to remove the build directory and rebuild. aha, thanks. you can also just add a blank line to top-level CMakeLists.txt to retrigger cmake config. LRC-BOP now working. >> I want to work on converting the c-f recipe to cmake and building out for Windows, so I may have some build MRs over at libxc. > What do you mean?. I mean I'm trying to build out the conda-forge arch matrix for libxc (https://github.com/conda-forge/libxc-feedstock/pull/8) so that psi4 windows can pull a pre-built libxc instead of doing an internal build. So I may have merge requests in your intervening week before v5.1 tagging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197:67,avail,available,67,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197,1,['avail'],['available']
Availability,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:332,error,error,332,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"> turns out the downloaded basis sets files from the SI don't comply with the expected angular momentum notation. E.g. there is a J where a K should be. (psi4 does G-H-I-K-L etc.). Great, a third standard.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-437581927:16,down,downloaded,16,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-437581927,1,['down'],['downloaded']
Availability,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:31,error,errors,31,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,3,"['error', 'fault']","['error', 'errors', 'fault']"
Availability,"> v2rdm strikes again! :-); > ; > fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive. Thank you for the heads-up on this! I'll work on getting rid of ERISieve there, as well, and deprecate ERISieve here for 1.8. With this PR being connected to v2rdm_casscf, it'd probably be wise to make this PR post-1.8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258:164,down,downstream,164,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258,1,['down'],['downstream']
Availability,">; > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; > G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; > **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; > derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; > dfmp2_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: There are no occupied orbitals with beta spin.; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; > The most recent 5 function calls were:; >; >; >; >; > Printing out the relevant lines from the Psithon --> Python processed input file:; > core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); > core.set_global_option(""DFT_RADIAL_POINTS"", 85); > core.set_global_option(""REFERENCE"", ""uhf""); > set_memory(100000000000); > try:; > --> optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > core.set_global_option(""GUESS"", ""read""); > optimize('pwpb95-d3bj'); >; > Psi4 stopped on: Friday, 21 August 2020 04:21PM; > Psi4 wall time for execution: 0:00:04.47; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > As I am fairly new to quantum chemistry, I do not really know how to; > interpret this error.; >; > Any pointers are appreciated.;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:3486,Error,Error,3486,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['Error'],['Error']
Availability,">= 1.12 is very reasonable as it's a few years old, and I think pins like >= 1.16 are likely to happen elsewhere. Following your suggestion, conda chokes with more errors than fit on my terminal's history, but mamba complains about . ```; Problem: package ambertools-20.0-py37h18738c5_0 requires netcdf-fortran >=4.5.2,<4.6.0a0, but none of the providers can be installed; ```. yet here's a 4.5.3 online: https://anaconda.org/conda-forge/netcdf-fortran/files / https://anaconda.org/conda-forge/netcdf-fortran/files/modal/info/5f8e0b60a58f0d0a54b46bb2. hdf5 1.10.6 seems to be in the recent psi4 builds, so that shouldn't be the issue. Maybe it's the fortran stuff, it's confusing how and why `libgfortran`/`libgfortran4`/`libgfortran5` all coexist at once.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-718357532:164,error,errors,164,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-718357532,1,['error'],['errors']
Availability,">> All relevant error information should end up in the error box, not just stderr. > OK. Would the inverse be acceptable? ie. nothing going to stderr, only to the error box. Haven't investigated, but my first thought is that error box only would work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1236169643:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1236169643,4,['error'],['error']
Availability,">> I do think we should try to get the changes into one psi4 release cycle. > Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?. I think deprecation warnings (with code still functional) need to be in at least one release. So the code can be broken as soon as ~Dec (after 1.7.0 release). But what I was meaning to say with ""get the changes into one psi4 release cycle"" was let's aim to get all the immediate-breaks and/or notifications in before 1.7.0 so that downstream users have the info to do a single overhaul after 1.7.0. Keep pinging me if this doesn't make sense :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160:534,down,downstream,534,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160,2,"['down', 'ping']","['downstream', 'pinging']"
Availability,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,4,"['avail', 'fault']","['available', 'fault']"
Availability,"?C_DGGSVD3@psi@@YAHDDDHHHPEAH0PEANH1H111H1H1H1H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvp3，该符号在函数 ""int __cdecl psi::C_DGGSVP3(char,char,char,int,int,int,double *,int,double *,int,double,double,int *,int *,double *,int,double *,int,double *,int,int *,double *,double *,int)"" (?C_DGGSVP3@psi@@YAHDDDHHHPEANH0HNNPEAH10H0H0H100H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtcon，该符号在函数 ""int __cdecl psi::C_DGTCON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:26783,error,error,26783,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrf，该符号在函数 ""int __cdecl psi::C_DPOTRF(char,int,double *,int)"" (?C_DPOTRF@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotri，该符号在函数 ""int __cdecl psi::C_DPOTRI(char,int,double *,int)"" (?C_DPOTRI@psi@@YAHDHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpotrs，该符号在函数 ""int __cdecl psi::C_DPOTRS(char,int,int,double *,int,double *,int)"" (?C_DPOTRS@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppcon，该符号在函数 ""int __cdecl psi::C_DPPCON(char,int,double *,double,double *,double *,int *)"" (?C_DPPCON@psi@@YAHDHPEANN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppequ，该符号在函数 ""int __cdecl psi::C_DPPEQU(char,int,double *,double *,double *,double *)"" (?C_DPPEQU@psi@@YAHDHPEAN000@Z) 中被引用; F:\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:34500,error,error,34500,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@AlexHeide, your suggestion to compute an energy is an excellent one. How do we do it? I'm available to work on this, but not sure where to start putting the catch. Feel free to cue me on Slack if that's more convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559:91,avail,available,91,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559,1,['avail'],['available']
Availability,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122484876:248,avail,available,248,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876,1,['avail'],['available']
Availability,"@CDSherrill . Oh, and if an error's raised but not caught, it just shows the traceback and triggers coffee:. ```; PsiException: Could not converge SCF iterations in 4 iterations. Failed to converge. Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:28,error,error,28,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,1,['error'],['error']
Availability,"@CDSherrill . [This](https://github.com/psi4/psi4/blob/1.2.x/psi4/src/psi4/libscf_solver/hf.cc#L631-L639) was the v1.2 behavior so print error msg or die, depending on settings. Previous scfitertopy behavior was always to throw generic ConvergenceError with msg and niter. Now, throw SCFConvergenceError with msg, niter, and wfn attached.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673,1,['error'],['error']
Availability,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/641#issuecomment-285734725:188,avail,available,188,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725,1,['avail'],['available']
Availability,"@JGrantHill yes, I think it's definitely affected. The quicker solution will probably slow down the delta Hartree--Fock step b/c it won't reuse integrals. But eventually that could be restored. I'm still working on the gradients issue #3066 but I hope to look into this soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1825937582:91,down,down,91,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825937582,1,['down'],['down']
Availability,"@JonathonMisiewicz . Let's subdivide further into 3 issues: the dfocc pcg, the occ lccd, and the occ olccd. * dfocc pcg: I think with the switch to coupling to `tol_t2` we're both satisfied. your approach fixes all the tests with far fewer iterations than my original sol'n; * occ lccd: you're right that the three errors were in spin components. I found that a `0.5 * tol_Eod` adds a single iteration about a quarter of the time, and fixes all the tests. Since triggering convergence on a small energy _rise_ is already a little unexpected, this prefactor doesn't bother me. I'm not adamant though -- adjusting e_conv for the stdsuite tests is a lot more palatable than adjusting pcg_conv.; * occ olccd: there's two errors -- one in spin components and another with the correlation energy itself (below). I tried to back off the prefactor, but nothing looser than a full order of magnitude fixed the tests. It's adding 2-4 iterations to every test (so 8-11 iterations becomes 10-14). That's severe, especially as it affects all the oo methods, not just olccd. So if you think it's better to skip this fix for a while, I'm ok with that. . `test_olccd_energy_module[olccd uhf conv ae: * occ -qz2p-ene0] OLCCD CORRELATION ENERGY: computed value (-0.21805777) does not match (-0.21805608) to atol=1e-06 by difference (-0.00000169).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760:315,error,errors,315,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760,2,['error'],['errors']
Availability,"@JonathonMisiewicz @loriab I think I understand now, I thought you had to use an explicit `std::move` but that is only for an **`lvalue`**, you can do . ```c++; std::shared_ptr<TwoBodyAOInt>(factory->erf_eri(omega_); ```. where `erf_eri` returns a `std::unique_ptr` because its a **temporary `rvalue`**. My bad sorry for the misunderstanding. . Regardless I will track down the failing test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355:369,down,down,369,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355,1,['down'],['down']
Availability,"@JonathonMisiewicz I reran my timings on a growing system of water clusters for density screening and the new incfock algorithm. The basis set is 6-31G*, and the screening is the Psi4 default of `1.0e-12`. The errors are well within SCF convergence (1.0e-6), and the time savings remain significant (albeit with a tighter screening tolerance). ![dscreen_time_wc](https://user-images.githubusercontent.com/60559795/137191849-d0fc9f07-5dc1-4e61-89ab-5b9bd552a011.png); ![dscreen_diff_wc](https://user-images.githubusercontent.com/60559795/137191850-9ee6311c-f898-4064-857e-90e95be8bad6.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-942599138:210,error,errors,210,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-942599138,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:184,down,downloaded,184,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,8,"['Down', 'down']","['Downloading', 'download', 'downloaded']"
Availability,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262,1,['error'],['error']
Availability,"@JonathonMisiewicz To reference the treating the D separately, we are calculating the change in the density matrix, or delta D if we are not in the first iteration, the delta J, K, and wKs are added to the J and K in the post-iteration step. That way, incremental Fock build is available for all JK types. Basically knowledge of the iteration is needed so we know when to set up the delta D matrices. (It is also needed for my future CFMM and linK PRs, where we do NOT want to run linK or CFMM on the SAD guess)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937307252:278,avail,available,278,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937307252,1,['avail'],['available']
Availability,"@JonathonMisiewicz Yeah, I realized that I was doing redundant work. I fixed this issue. Great catch, thank you for pointing that out. Please continue review :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142:53,redundant,redundant,53,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142,1,['redundant'],['redundant']
Availability,"@JonathonMisiewicz looks like most things worked except one of the linux builds failed for an issue that I don't think is related to my patch:. ```CMake Error at /usr/local/share/cmake-3.24/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS Interpreter; NumPy) (found suitable version ""3.8.10"", minimum required is ""3.8""); ```. Not sure how to proceed here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317:153,Error,Error,153,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317,1,['Error'],['Error']
Availability,"@JonathonMisiewicz please tag me next time ;). The check should be human readable. Please declare new variables for all of the results of the ternary operations. If I were to write a size check for a matrix multiply of `C(m,n) = A(m,k) B(k,n)`, I would write the check something along the lines of `if((m_in != m_out) || (n_in != n_out) || (k1 != k2))`. And yes, in case of an error, one should print out the dimensions of all three matrices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178:377,error,error,377,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178,1,['error'],['error']
Availability,"@JonathonMisiewicz smaller here means the number of bytes in the psio entry. The piso unit (`PSIF_LIBTRANS_DPD`) and the TOC key `MO Ints (OO|OV)` point to a unique entry. Based on the error you are seeing that means that the number of bytes written to that entry by `OMP2` code or by some call made by the `OMP2` was smaller than the number of bytes that the line you linked is trying to write. I am not familiar with the `ID` macro, but I am assuming it is defined outside each module and that is not the source of the problem, and since the size of the Alpha occupied/virtual space hasn't changed it could be that the entry on file was written in the `OMP2` code with the bra packed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435213821:185,error,error,185,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435213821,1,['error'],['error']
Availability,"@JonathonMisiewicz something to keep in mind, that may help while investigating the bug, The error you are seeing is raised by psio when it checks that a particular write won't extend into the next entry. So there may be differences in the size of other blocks, however if the overwrite is smaller than the old quantity you will never write into the next entry and an error wont occur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050:93,error,error,93,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050,2,['error'],['error']
Availability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:1085,down,downloading,1085,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['down'],['downloading']
Availability,"@Konjkov could you show some of the output above the `PSIO_ERROR`? I am not sure that DF integrals is the culprit here. It would be easier to track down if I could see where in the second exited state it is failing. I ran the input you posted but I don't see the same PSIO_ERROR. It is strange that the first excited state would be able to run if the integrals were incompatible. Also, the file number 128 is a temporary file used by the CC codes to store things with a short lifetime. If the integrals were the source of the problem I would expect this kind of error to show up when trying to read some persistent quantity, which would then be used to compute the values that would go into file 128. . @kannon92 do you have an input that will cause the `PSIO_ERROR` if DF is used? The driver should probably soft-fail with a warning to turn DF off in these cases. It would be very frustrating for a job to run this far just to fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194417745:148,down,down,148,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194417745,2,"['down', 'error']","['down', 'error']"
Availability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,8,"['down', 'error']","['downstream', 'error']"
Availability,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:347,failure,failure,347,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['failure'],['failure']
Availability,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:69,redundant,redundant,69,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['redundant'],['redundant']
Availability,"@PhillCli . > as a follow up from #1948 the original issue was resolved, but I've missed another edge-case, where setting freeze_core True results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add output.ref also?) with lithium dimer. Not at all -- problem identified and solution prepared is a double win, not a pain. thank you. > The code is available at fcore_fix, should I make another PR?. please do. and `output.ref` welcome. we try to generate missing ones every year or so, but sooner they're present the better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493:433,avail,available,433,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493,1,['avail'],['available']
Availability,"@SebWouters, I was on the verge of introducing FCIDUMP in Forte but if an alternative like you describe is available, we would be happy to adopt it instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-452041777:107,avail,available,107,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-452041777,1,['avail'],['available']
Availability,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:335,fault,fault,335,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,2,['fault'],['fault']
Availability,"@TiborGY is right. Even though you've set ""uhf"", that switches to ""uks"" behind the scenes (so you're not having to set DFT in two places). When I release the error you hit, the further error shows: . ```. Printing out the relevant lines from the Psithon --> Python processed input file:; psi4.set_options({'reference': 'uks', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; --> psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol). !-----------------------------------------------------------!; ! !; ! Stability analysis not yet supported for XC functionals. !; ! !; !-----------------------------------------------------------!; ```. Agree that the existing error looks contradictory. I've adjusted it to show:. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; --> psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol). !----------------------------------------------------------------------------------!; ! !; ! Stability analysis root following is only available for unrestricted Hartree-- !; ! Fock, not present UKS !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1125639718:158,error,error,158,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1125639718,4,"['avail', 'error']","['available', 'error']"
Availability,"@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm_，该符号在函数 ""void __cdecl psi::fnocc::DGEMM(char &,char &,long &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMM@fnocc@psi@@YAXAEAD0AEAJ11AEANPEAN131231@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(algebra_interface.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\psimrcc.lib(operation_contraction.cc.obj) : error LNK2001: 无法解析的外部符号 dgemm_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dsyev_，该符号在函数 ""void __cdecl psi::fnocc::DSYEV(char &,char &,long &,double *,long &,double *,double *,long &,long &)"" (?DSYEV@fnocc@psi@@YAXAEAD0AEAJPEAN12211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2001: 无法解析的外部符号 dsyev_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dspev_，该符号在函数 ""void __cdecl psi::fnocc::DSPEV(char &,char &,long &,double *,double *,double *,long &,double *,long &)"" (?DSPEV@fnocc@psi@@YAXAEAD0AEAJPEAN22121@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvd_，该符号在函数 ""void __cdecl psi::fnocc::DGESVD(char &,char &,long &,long &,double *,long &,double *,double *,long &,double *,long &,double *,long &,long &)"" (?DGESVD@fnocc@psi@@YAXAEAD0AEAJ1PEAN122121211@Z) 中被引用; F:\optking.lib(linear_algebra.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev_，该符号在函数 opt_asymm_matrix_eig 中被引用; F:\psimrcc.lib(manybody.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(heff_diagonalize.cc.obj) : error LNK2001: 无法解析的外部符号 dgeev_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2019: 无法解析的外部符号 ddot_，该符号在函数 ""public: void __cdecl p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:7856,error,error,7856,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:22434,error,error,22434,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@aizvorski or @hokru (or anyone), did you happen to have on hand independent ref values for any of these five fctls, particularly r2SCAN-3C & B97-3C ? (Note that c-f dftd4 isn't available for py312, so I'll likely need to adjust the CI to improve testing coverage. If this makes it into v1.9, I'm good with dropping support for dftd3 classic and the psi4 build of dftd4. Also, the plan is libxc=6, dropping v5 support.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611:178,avail,available,178,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611,1,['avail'],['available']
Availability,@ajmisquitta I may have pinged you incorrectly the first time. Let me know what you think of these changes and apologies for the possible double ping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942#issuecomment-376280951:24,ping,pinged,24,https://psicode.org,https://github.com/psi4/psi4/pull/942#issuecomment-376280951,2,['ping'],"['ping', 'pinged']"
Availability,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300777718:808,avail,available,808,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718,2,['avail'],['available']
Availability,"@amjames That clears up the shared state issue, thank you. I have the growing suspicion that I've been leading you all to nowhere. I'll walk you through what I did from the start. lldb said the error originated from line 362 of dcft_integrals_UHF.cc, so I applied the following:; ```; @ -357,8 +357,14 @@ void DCFTSolver::sort_OOOV_integrals() {; global_dpd_->buf4_sort(&I, PSIF_LIBTRANS_DPD, prqs, ID(""[V,O]""), ID(""[O,O]""), ""MO Ints <VO|OO>"");; global_dpd_->buf4_close(&I);; ; + global_dpd_->buf4_init(&I, PSIF_LIBTRANS_DPD, 0, ID(""[O,O]""), ID(""[O,V]""), ID(""[O>=O]+""), ID(""[O,V]""), 0,; + ""MO Ints (VO|OO)"");; + global_dpd_->buf4_print(&I, ""outfile"", 1);; + global_dpd_->buf4_close(&I);; +; global_dpd_->buf4_init(&I, PSIF_LIBTRANS_DPD, 0, ID(""[V,O]""), ID(""[O,O]""), ID(""[V,O]""), ID(""[O>=O]+""), 0,; ""MO Ints (VO|OO)"");; + global_dpd_->buf4_print(&I, ""outfile"", 1);; global_dpd_->buf4_sort(&I, PSIF_LIBTRANS_DPD, rsqp, ID(""[O,O]""), ID(""[O,V]""), ""MO Ints (OO|OV)"");; global_dpd_->buf4_close(&I);; ```. You can see the results of the print statements as pre.txt and post.txt respectively at https://gist.github.com/JonathonMisiewicz/7d4e3ac7eee98b8dcc94d74f2d60f378. I noticed the row and column indices were transposed but everything else looked fine, suspected the transpose was the problem and checked with @jturney. Maybe there was some miscommunication here? I thought he agreed with me that one of the two codes using the wrong index convention was the problem. Based on what you've been saying about byte counts, it looks like the problem is elsewhere. Maybe the code is supposed to do the transposing? I'll admit that I'm very shaky on reading this code. The only documentation I've been able to find on LIBPSIO is more than 20 years old, and from that, all I can make out about the purpose of LIBPSIO is that it replaced some other I/O system. On second look, it is strange that the non-zero pqnum/rsnum changes from 25 to 26. Is that supposed to happen?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435251377:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435251377,2,['error'],['error']
Availability,"@amjames, I get these errors when I am using my plugins. I usually don't get it when I am running psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194431083:22,error,errors,22,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194431083,1,['error'],['errors']
Availability,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235422113:28,down,down,28,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113,1,['down'],['down']
Availability,"@andysim I agree that `size_t` is probably a better solution, but I will have to take a closer look to say for sure. . @lazaroid I agree that there are probably more int overflows to be tracked down in DPD, any that you find you are welcome to patch I will go hunting as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685#issuecomment-297214526:194,down,down,194,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297214526,1,['down'],['down']
Availability,"@andysim I believe this is correct, do you concur?. @SebWouters You seem to have a pretty good handle on exactly where this error occurs, would you mind making a PR to patch this up?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449605158:124,error,error,124,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449605158,1,['error'],['error']
Availability,"@andysim I can't help but notice that the three failing jobs all involve Hessians....Does anything in the logs jump out at you? The only error I saw was that the fnocc2 G2 free-energies weren't matching to 8 decimal places, but rather 7. Do we really expect them to match to 8 decimal places? I have no idea why the other two are failing....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235098972:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235098972,1,['error'],['error']
Availability,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:63,error,errors,63,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056,2,['error'],"['error', 'errors']"
Availability,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295521147:321,avail,available,321,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147,1,['avail'],['available']
Availability,"@andysim: I may have some extra bandwidth to assist with the basis set cleanup if you ping me at that time. Improving support for ECPs is also something I'm particularly interested in, and a place where the C++- and Python-side basis set machinery has recently slightly diverged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-305325000:86,ping,ping,86,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305325000,1,['ping'],['ping']
Availability,"@bast, the -6 is the return code from the subprocess call that ran the test case. Usually it reflects success (0) or failure (anything else). Not sure what's going off here, but since your job gave every other appearance of success, I won't worry about it unless more evidence surfaces. Thanks for testing it with an exotic (for us) setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276673381:117,failure,failure,117,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276673381,1,['failure'],['failure']
Availability,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198786718:467,down,down,467,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718,1,['down'],['down']
Availability,"@bennybp I'm trying to switch the `psi4_add_library` macro from imported to public as we speak. The error I was getting was something about the alias target `PCMSolver::PCMSolver`, which I appear to have fixed; was this what you were also getting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237855000:100,error,error,100,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237855000,1,['error'],['error']
Availability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:90,avail,available,90,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,2,"['avail', 'ping']","['available', 'pinging']"
Availability,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:163,error,error,163,https://psicode.org,https://github.com/psi4/psi4/issues/893,1,['error'],['error']
Availability,"@bozkaya, great, thanks! If you don’t mind, please push your branch to your fork (perhaps already done), then make a PR to my branch (choose “loriab/psi4” instead of usual “psi4/psi4” and “ugurfno” instead of usual “master” on the left hand side of the four-drop down PR form)..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446617359:263,down,down,263,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446617359,1,['down'],['down']
Availability,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192816600:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600,1,['error'],['error']
Availability,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192934321:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321,2,['error'],['error']
Availability,"@bwb314 : Your recent update (a5facd8) to libpsio/filemanager.cc causes a build error with icpc 15.3:. ```; /home/crawdad/src/psi4/src/lib/libpsio/filemanager.cc(82): error: more than one instance of overloaded function ""std::to_string"" matches the argument list:; function ""std::to_string(long long)""; function ""std::to_string(unsigned long long)""; function ""std::to_string(long double)""; argument types are: (int); std::string filenum = std::to_string(fileno);; ```. std::to_string is C++11 and **should** accept an `(int)` argument, so I'm wondering if this is an inconsistent implementation in the Intel 15+ compiler.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/220:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/issues/220,2,['error'],['error']
Availability,"@bwb314 Confirmed this is fixed, I was seeing a separate error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-205789744:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-205789744,1,['error'],['error']
Availability,"@bwb314, @PeterKraus, were errors for DSD-BLYP and DSD-PBE-PBE86 to be expected? I didn't see any comments to that respect but there's been a lot of edits to DFT and its testing of late. Thanks for any clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945#issuecomment-378478967:27,error,errors,27,https://psicode.org,https://github.com/psi4/psi4/pull/945#issuecomment-378478967,1,['error'],['errors']
Availability,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182596162:993,error,error,993,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162,2,['error'],['error']
Availability,"@davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?. ```; Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1935022416:183,Error,Error,183,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1935022416,1,['Error'],['Error']
Availability,"@dgasmith , maybe keep an eye out for test ""casscf-fzc-sp"". That's what failed on distelli (below), though it passed locally and on travis. May be another clue to the #322 intermittent failure. ```; ==> Setting up CI strings <==. There are 15 alpha and 15 beta strings; The CI space requires 65 (6.50E+01) determinants and 4 blocks. ==> Setting up MCSCF integrals <==. ==> Starting MCSCF iterations <==. Total Energy Delta E RMS Grad NCI. @MCSCF Iter 1: -76.02993400953443 -1.2637e-02 9.9525e-03 1 Initial CI; @MCSCF Iter 2: -76.06895156963408 -3.9018e-02 1.3537e-02 9 APPROX; @MCSCF Iter 3: -76.07302175257405 -4.0702e-03 4.4001e-03 7 APPROX; @MCSCF Iter 4: -76.07362055903870 -5.9881e-04 1.6406e-03 7 APPROX; @MCSCF Iter 5: -76.07373579006990 -1.1523e-04 7.9473e-04 7 APPROX, DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/456#issuecomment-238002601:185,failure,failure,185,https://psicode.org,https://github.com/psi4/psi4/pull/456#issuecomment-238002601,1,['failure'],['failure']
Availability,"@dgasmith . Essentially, the size of `Parameters_->average_weights` is not `nroots`:; https://github.com/psi4/psi4/blob/51f1cb126641a3398ec5219d3b8789e2cdfb847b/psi4/src/psi4/detci/sem.cc#L991-L998. ```; =================================================================; ==8917==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020004445d8 at pc 0x7fa13936619c bp 0x7ffdfdc7def0 sp 0x7ffdfdc7dee8; READ of size 8 at 0x6020004445d8 thread T0; #0 0x7fa13936619b in psi::detci::CIWavefunction::sem_iter(psi::detci::CIvect&, psi::detci::stringwr**, psi::detci::stringwr**, double*, double, double, double, double, int, int, int) /home/raimis/psi4.git/psi4/src/psi4/detci/sem.cc:994; #1 0x7fa1392bee3c in psi::detci::CIWavefunction::diag_h(double, double) /home/raimis/psi4.git/psi4/src/psi4/detci/diag_h.cc:443; #2 0x7fa139293574 in psi::detci::CIWavefunction::compute_energy() /home/raimis/psi4.git/psi4/src/psi4/detci/ciwave.cc:154; #3 0x7fa1392b5dcf in psi::detci::detci(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/psi4.git/psi4/src/psi4/detci/detci.cc:68; #4 0x7fa138466ba0 in py_psi_detci(std::shared_ptr<psi::Wavefunction>) /home/raimis/psi4.git/psi4/src/core.cc:346; #5 0x7fa13851eea0 in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/cast.h:1870; #6 0x7fa1385101e4 in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:279,ERROR,ERROR,279,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['ERROR'],['ERROR']
Availability,@dgasmith I think this is ready for review - there is also one test that tests the minimal functionality of the Broker.; I have more things to implement once the amplitudes are available from python as well and could add another PR for that once that is in as well,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-449792318:177,avail,available,177,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-449792318,1,['avail'],['available']
Availability,@dgasmith That is a copying error. Thanks for catching that. It is fixed now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/584#issuecomment-275691833:28,error,error,28,https://psicode.org,https://github.com/psi4/psi4/pull/584#issuecomment-275691833,1,['error'],['error']
Availability,"@dgasmith and I were discussing this and realizing that if we start guaranteeing symmetrized output that there are many arrays as plausible targets: Hessian, components of gradient, MOs, properties. That is, every symmetry tolerant code is going to have to shove its output through a symmetrizer, or parts that need symmetrized input (e.g., optking) could it into targeted (e.g., gradient-only) symmetrizers. For general planning, functions like these probably belong in the driver alongside functions (various of which I have) for manipulating mol, dipole, grad, hess by translation, rotation, atom-exchange, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191938284:223,toler,tolerant,223,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191938284,1,['toler'],['tolerant']
Availability,"@dgasmith thanks, I'm still road tripping and haven't opened my computer in a few days. Getting back home to work tomorrow evening. @loriab okay, I'll have a look later (ping me since I'll probably forget). And no, there's no way to track package downloads, because they're mirrored to n>>>1 locations anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-285217536:170,ping,ping,170,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-285217536,2,"['down', 'ping']","['downloads', 'ping']"
Availability,"@dgasmith well, it's quite a simple matter: if you have a large matrix where a few elements are large while the rest are numerically zero, the RMS norm may be small since it's only looking at the average. The maximum absolute norm, however, picks up this case. Q-Chem appears to have switched to the maximum absolute norm from the RMS norm in version 3.0. It's also the default in GAMESS'94, probably other codes as well. This means that the bigger system you have, the more likely you're going to see problems with the RMS norm, as it will say the wave function has converged even if you have significant residual gradients for a limited set of orbitals. The extreme case is, of course, if you e.g. use ```guess read``` with ```guess_mix true``` with a previously converged calculation. Then only the HOMO-LUMO pair isn't converged, and even in cases where the ground state wave function may have significant symmetry breaking, you might not pick this up since the orbital gradient only has two large elements. I've been running calculations on some small transition metal complexes lately, and there it's quite common to see differences of 1 or 2 orders of magnitude between the RMS and MAX error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452407959:1193,error,error,1193,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452407959,2,['error'],['error']
Availability,"@dgasmith yes, `opt10` and `sapt4` no longer complain. However, I've got two new failures: `opt7` and `opt-irc-2`.; For `opt7`:. ```; PsiException: Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```. For `opt-irc-2`:. ```; PsiException: Energy of last IRC point: computed value (-92.869134) does not match (-92.868901) to 5 decimal places.; ```. I used 13bf41bd1b0dd2a39d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190689367:81,failure,failures,81,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190689367,1,['failure'],['failures']
Availability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:113,down,downgrade,113,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['down'],['downgrade']
Availability,"@dgasmith, fyi that the scf5 problem has surfaced on your box with 2016 compilers. Sometimes fails on Singlet PK UHF, like above error. Sometimes passes. Below is diff of the key SCF with new (failing) on L, output.ref on R. Further below is diff of the key SCF with new (passing) on L, output.ref on R. Note the changing occupancies. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ] | SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.07431434746931 -9.19477e+00 1.82031e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.23552613462837 -9.16121e+00 4.96906e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-200629470:129,error,error,129,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470,1,['error'],['error']
Availability,"@dgasmith. I think this is a PEBKAC error. I was passing in desymmetrized matrices, which is fine for PK and DF, which both use C1 symmetry under the hood. The fix for `OUT_OF_CORE` is to add symmetry back into the L and R matrices, before calling `jk->compute()`. There's no problem with the JK code, and I'll see if I can add a simple fix for out of core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233021414:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233021414,2,['error'],['error']
Availability,"@dgasmith: I don't know the ""citation"", ""description"" and also [""dispersion""][""citation""] maximum lengths. However, it shouldn't be too difficult to ""pad"" all three of these strings with the right number of leading spaces, and throw a warning (or even raise an error) if they are too long. However, perhaps not in this PR? If you make an issue (and tell me the limits), I can tackle this next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385265092:261,error,error,261,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385265092,1,['error'],['error']
Availability,"@drhaney I made a few comments to your work, a few notes:; - Your comments only have the new basis sets, was the new G3 module intended as well?; - Most of the comments are aimed at removing global options. Globals are now semi-deprecated within Psi4 and will be completely removed in an update. ; - This is one of the first modules that will take extensive use of our option passing update, you will probably collide with a few errors. Let us know and we will get them fixed up.; - Thanks for writing this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-205789593:429,error,errors,429,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205789593,1,['error'],['errors']
Availability,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:338,error,error,338,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,2,['error'],['error']
Availability,"@hokru I get the error below when there's no dftd4 of any kind around. (It's what Azure linux is doing now.) When I change the try/except in qcng empirical_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['error'],['error']
Availability,"@hokru and @dgasmith . I tested the analytic and numeric gradients with 100 molecules using wB97X-D and B3LYP (for reference). ![anal_vs_grad_wb97x-d](https://user-images.githubusercontent.com/2469715/33882176-8d09a24e-df37-11e7-9aee-3a6a4530d4a9.png). Sample: 4512; MaxAE 0.002127; MSE -0.000000; MAE 0.000039; RMSE 0.000089. ![anal_vs_grad_b3lyp](https://user-images.githubusercontent.com/2469715/33882181-8f7b6972-df37-11e7-8377-358eb436c824.png). Sample: 4512; MaxAE 0.000631; MSE -0.000000; MAE 0.000016; RMSE 0.000031. There is no systematic error in both cases, but wB97X-D results are more skewed. Do you think, it is just numerics or indication of a more serious problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351024635:548,error,error,548,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351024635,1,['error'],['error']
Availability,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670,2,['error'],['error']
Availability,"@hokru, fyi, the tests you added in #1320 got moved around here. Because they use dftd3, which isn't always available, they need `using_dftd3` decorator (for pytest) or to be in `tests/dftd3/` (for ctest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414#issuecomment-448263677:108,avail,available,108,https://psicode.org,https://github.com/psi4/psi4/pull/1414#issuecomment-448263677,1,['avail'],['available']
Availability,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248348353:163,error,errors,163,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353,2,['error'],['errors']
Availability,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182896518:154,down,down,154,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518,1,['down'],['down']
Availability,"@jgonthier In the latest SAD PR I reduced the tolerance to `1.e-2` up from `1.e-4`. ""Failing"" is a strong word here as the eigenvalue is still positive. Im guessing this is just small flutter in the Davidson iterations which are not converged strongly to begin with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/385#issuecomment-224908411:46,toler,tolerance,46,https://psicode.org,https://github.com/psi4/psi4/issues/385#issuecomment-224908411,1,['toler'],['tolerance']
Availability,"@jgonthier is there any easy way to turn on or off different components of the SAPT computation? That is, compute only the electrostatic and induction terms, or only the dispersion terms, etc. That might be easier to do than (and/or an initial step towards) full restart capability. @loriab it would be interesting to debate this as a use-case for more general restart capabilities. Where do we log the info about how far the computation has gotten? And what information is going to be available for the restart calculation? In a cluster computing environment, the scratch files are going to be gone. We could save the orbitals (although that's probably not the rate-determining step of most SAPT computations, regardless of the SAPT order). Other stuff is probably too large to save anywhere for a restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-177233740:486,avail,available,486,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177233740,1,['avail'],['available']
Availability,"@jgonthier, if you can build successfully, then it's getting the `-gcc-name`/`-gxx-name` – no more recompile necessary. It would have failed to build libmints if that part wasn't right. . You're right that your `ldd psi4` will cause trouble – in fact it should have given you `CXXABI` and `GLIBCXX` errors just in the `ldd psi4`. Your `$LD_LIBRARY_PATH` should have fixed it, though. Any chance that's not in effect in the terminal you're running the `ldd psi4` in? If the gcc52 was in ld_library_path, your ldd psi4 should switch immediately to `libstdc++.so.6 => /theoryfs2/ds/cdsgroup/miniconda/envs/sgcc5/lib/libstdc++.so.6`. Alternatively, you can delete `stage/......../bin/psi4` (that file only) (or lib/psi4/core.so if you're on inversion) and edit w/i objdir `psi4_core-prefix/src/psi4_core-build/src/CMakeFiles/psi4-bin.dir/link.txt` (psi4-lib.dir if you're on inversion) and stick your gcc5 path first behind the `rpath` at the end, then rebuild (will only relink). I named my env `sgcc5`. Looks like you named yours `gcc52`. Could there be name mixing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252802774:299,error,errors,299,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252802774,1,['error'],['errors']
Availability,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:603,down,down,603,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474,1,['down'],['down']
Availability,@jturney @andysim @psi-rking Does anyone object to reducing the tolerance here? Alternatively we can make a special case for ghost atoms. Although two centers so close will increase linear dependency issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189336384:64,toler,tolerance,64,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189336384,1,['toler'],['tolerance']
Availability,"@jturney It seems that CMake is not aware of any compiler features for the Intel compilers...; How do you handle this? Or you never tried to compile your other projects with Intel?; I found some ""custom"" extensions for the Intel compilers, but that would just move the maintenance work from the current detection system to another...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-161354287:269,mainten,maintenance,269,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-161354287,1,['mainten'],['maintenance']
Availability,"@jturney yeah, it's ignoring the 14 flag ; ```; 2022-01-06T15:09:42.7151758Z C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /DWIN32 /D_WINDOWS /GR /EHsc -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 -std=c++14 /showIncludes /Fosrc\psi4\libmints\CMakeFiles\mints.dir\integral.cc.obj /Fdsrc\psi4\libmints\CMakeFiles\mints.dir\mints.pdb -c -- D:\a\1\s\psi4\src\psi4\libmints\integral.cc; 2022-01-06T15:09:42.7772130Z clang-cl: warning: unknown argument ignored in clang-cl: '-std=c++14' [-Wunknown-argument]; ```. before shorting out on `any.h`. ```; 2022-01-06T15:09:43.2968999Z In file included from D:\a\1\s\psi4\src\psi4\libmints\integral.cc:35:; 2022-01-06T15:09:43.2969944Z In file included from D:\a\1\s\psi4\src\psi4/libmints/eri.h:42:; 2022-01-06T15:09:43.2970731Z In file included from D:\a\1\s\psi4\src\psi4/libmints/shellpair.h:8:; 2022-01-06T15:09:43.2971583Z In file included from C:\tools\miniconda3\include\libint2/engine.h:53:; 2022-01-06T15:09:43.2972460Z C:\tools\miniconda3\include\libint2/util/any.h(47,11): fatal error: 'any' file not found; 2022-01-06T15:09:43.2973173Z # include <any>; 2022-01-06T15:09:43.2973795Z ^~~~~; 2022-01-06T15:09:43.2974438Z 1 warning and 1 error generated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579:1266,error,error,1266,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579,2,['error'],['error']
Availability,"@jturney, any ideas? In his original `cdefs.h` error, it's showing finding three headers in the proper conda-supplied locations, then failing out on the 4th in the chain. I've tried all the `man icpc` options I can find. Very confused, as, apart from RHEL7 supplying 4.8.5 instead of 5.4 natively, my system is about the same setup and working with only env activation and `-gnu-prefix`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386735634:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386735634,1,['error'],['error']
Availability,@kannon92 These issues are solved in the driver. Please let us know if you encounter a PSIO 33 or 35 file error in Psi4 proper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194435312:106,error,error,106,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194435312,1,['error'],['error']
Availability,"@kannon92 yes, I'd suggest formatted checkpoints, which is an OK format for passing around data, and which is supported by a number of different visualization programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-271110193:37,checkpoint,checkpoints,37,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-271110193,1,['checkpoint'],['checkpoints']
Availability,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:452,avail,available,452,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975,2,"['avail', 'down']","['available', 'down']"
Availability,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:170,avail,available,170,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,2,['avail'],['available']
Availability,"@loriab - many, but I think I might be nearing the end of these updates. I apparently hadn't used this plugin since the days of boost ... it probably would have been easier to rewrite the stupid thing from scratch than to repair it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373:222,repair,repair,222,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373,1,['repair'],['repair']
Availability,"@loriab ; as a follow up from #1948; the original issue was resolved, but I've missed another edge-case, where setting `freeze_core True` results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add `output.ref` also?) with lithium dimer.; The code is available at [fcore_fix](https://github.com/PhillCli/psi4/tree/usapt0_spin_fix_fcore), should I make another PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911:338,avail,available,338,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911,1,['avail'],['available']
Availability,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-317918961:49,failure,failure,49,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961,3,"['Error', 'failure']","['Error', 'failure']"
Availability,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:236,error,error,236,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534,3,"['Error', 'error']","['Error', 'error']"
Availability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:295,error,error,295,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,3,"['Error', 'error']","['Error', 'error']"
Availability,"@loriab Correct: I believe there's a symmetrization step missing. I forget exactly where it was done before, but things like benzene are commonly retrieved with coords that are effectively C1. There's (molecule?) member function somewhere that allows symmetrization to a given tolerance (something really sleazy like 0.01A is needed, IIRC) so it's just a case of calling that. A simple STO-3G optimization could be a good followup step, but that's not essential.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382854005:277,toler,tolerance,277,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382854005,2,['toler'],['tolerance']
Availability,"@loriab Could potentially be [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/df_helper.cc#L1335) line. Could you change the schedule to simply `schedule(static)`? Either way we now have a reproducible error that can be fixed, thanks so much!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384625713:225,error,error,225,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384625713,2,['error'],['error']
Availability,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343716686:91,down,download,91,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686,1,['down'],['download']
Availability,"@loriab I am re-creating the broken build now and I will look at what `ldd -v psi4` gives me, but I did try modifying the `LD_LIBRARY_PATH` to fix the `GLIBCXX_X.X.XX` runtime error with no luck. Actually loading the GCC_5.2 module would modify it for me, but I removed /usr/lib64 from it just to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249681177:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249681177,1,['error'],['error']
Availability,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:547,error,errors,547,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['error'],['errors']
Availability,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['error'],['error']
Availability,"@loriab I have integrated `psi4 --fulltest` on Azure, but the tests does not work in parallel:; ```; 2018-12-06T18:15:06.8235423Z =================================== ERRORS ====================================; 2018-12-06T18:15:06.8236398Z _______________ ERROR at teardown of test_deprecated_wfn_arrays _______________; 2018-12-06T18:15:06.8236914Z [gw0] win32 -- Python 3.6.6 C:\tools\miniconda3\python.exe; 2018-12-06T18:15:06.8237116Z ; 2018-12-06T18:15:06.8238150Z tp = <class 'PermissionError'>, value = None, tb = None; 2018-12-06T18:15:06.8238413Z ; 2018-12-06T18:15:06.8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:166,ERROR,ERRORS,166,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,2,['ERROR'],"['ERROR', 'ERRORS']"
Availability,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:442,avail,available,442,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045,1,['avail'],['available']
Availability,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:86,failure,failures,86,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512,3,['failure'],['failures']
Availability,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249690183:77,error,error,77,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183,2,['error'],"['error', 'errors']"
Availability,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252797491:939,echo,echo,939,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491,1,['echo'],['echo']
Availability,"@loriab I removed the `MEMORY` option from the ADC section, but now some tests using `fnocc` are failing, because apparently, the option was *only* provided by the ADC part in `read_options.cc`... What should I do about this? `adcc` does not take any input on available memory, so where should the `MEMORY` option live from now on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1269567607:260,avail,available,260,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1269567607,1,['avail'],['available']
Availability,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:696,error,errors,696,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,1,['error'],['errors']
Availability,"@loriab I think this is now ready for review. The values in the new test are hand-calculated from the single point values using a spreadsheet. Let me know if I should just boilerplate the docstrings from the `qcdb.cbs_helpers` file - and whether I should change just the missing functions or the old ones as well. One thing that is perhaps missing is handling of different `corl_alpha`'s for delta-corrections; this might actually be a useful feature, as one is more likely to drop down to [DT] extrapolation (for which `alpha = 2.4` gives better results) with things like CCSD(T) while using MP2/[TQ] as the `corl_wfn/basis`. It should be an easy fix. I left the `pcseg-N` basis sets out for now; I'll read the literature and see whether it makes sense. I still plan to allow the `roos-ano-[dt]z` basis sets into the CBS functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381996152:482,down,down,482,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381996152,1,['down'],['down']
Availability,"@loriab I'm happy to switch the logic if necessary, and I would love to name it `undead_ghosts`, but the name should probably be strikingly clear at a glance since it's a required arg c-side. `include_ghosts` or `count_ghosts` maybe? . As for uses w/i our control, I'm not convinced we've switched everything that needs it, but the ones I _have_ switched from default I am confident in (current work on `scatter.cc` and the Hessian notwithstanding). If there's others we could ping for the other cases I'm all for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702:477,ping,ping,477,https://psicode.org,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702,2,['ping'],['ping']
Availability,"@loriab If the threading flag you mentioned refers to `USE_OPENMP=1`, then I am reasonably sure that is essential. As far as I understand, OpenBLAS is not stateless/thread-safe when compiled to use its native threading. So if there is an OMP parallel section in Psi4, and multiple Psi4 threads call BLAS/LAPACK subrutines at the same time, AND OpenBLAS is also doing those operations in parallel, then you get undefined behaviour. This is probably not going to be reliably mitigated by setting OpenBLAS to only use 1 thread at runtime, it may still cause UB.; AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with `USE_OPENMP=1`. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476:464,reliab,reliably,464,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476,1,['reliab'],['reliably']
Availability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:1602,error,error,1602,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,1,['error'],['error']
Availability,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288529918:297,avail,availability,297,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918,1,['avail'],['availability']
Availability,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252821533:152,echo,echo,152,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533,2,"['echo', 'failure']","['echo', 'failures']"
Availability,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:929,error,error,929,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015,6,"['Error', 'error']","['Error', 'error']"
Availability,"@loriab This issue isn't so much a problem with not understanding how to use DPD, as I am sure the author of each module was aware of what the code they wrote would do. This is more a fundamental issue with DPD and how it poorly manages shared state. In this case the entry that triggers the psio error already exists and has a smaller size than the data that is being written in its place, but there is no mechanism for gracefully avoiding that situation. . I am working on a better model that avoids a lot of these problems with shared state. I have so far worked out (on paper) how map objects to the regions where their data is stored on disk and keep everything from overwriting each other. The last piece of the puzzle is how to allow *some* shared ownership to exist, for example you would like the DCFT module or the OMP2 module to be ""aware"" if integrals have already been transformed, and then avoid doing the transformation again but because they were given an object that points to a particular location on disk, not because they looked in some predetermined location and found *something* there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522:297,error,error,297,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522,1,['error'],['error']
Availability,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263296772:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772,1,['error'],['error']
Availability,"@loriab You can also drop the loop and just put `H2.R=1`. Futhermore, add `OPDM yes` and even with `num_roots 1`, it will give the same error. So there's probably an error in saving the eigenvectors. I don't need the 0.1 point, the np.arange command will give a list starting at 1.0 and increasing with 0.1 until 10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-96190725:136,error,error,136,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96190725,2,['error'],['error']
Availability,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:191,down,down,191,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345,2,['down'],['down']
Availability,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708:65,checkpoint,checkpoint,65,https://psicode.org,https://github.com/psi4/psi4/issues/708,2,['checkpoint'],['checkpoint']
Availability,"@loriab can correct me if I'm mistaken, but I think your error is occurring because STO-3G doesn't have a fitting basis. Try using one of our ""hidden"" features, conventional, non-DF MP2; details on how to do this can be found at this link:; http://www.psicode.org/psi4manual/master/occ.html; ,but amount to replacing `'df-mp2'` with `'conv-mp2'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144734918:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144734918,1,['error'],['error']
Availability,"@loriab can discuss this more, but the largest issue is if NumPy and Psi4 have different OMP runtimes via BLAS. GOMP and IOMP do not play well together. So naively you would either need to use GCC as this is likely what NumPy's BLAS is linked against or build your own NumPy and link it against the same Intel BLAS you plan to use with Psi4. At this point I think we highly recommend using a conda environment or our [binaries](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). Both are ICC compiled with MKL and are optimized for multiple architectures from SSE2 (?) to AVX-512. If you really want to compile Psi4 yourself we recommend using the p4dev environment with the built in path-manager, see [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier) to help avoid these conflicts. Lots of fun intricacies to make something like Python really work with large C++ backends :). LAB EDIT: the 1.1 binaries use statically linked MKL in psi4 and are potentially susceptible to the problems mentioned. binaries after mid-July 2017 are safe (provided numpy is MKL RT)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100:471,down,download,471,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100,1,['down'],['download']
Availability,"@loriab can't see any such thing browsing the netlib GitHub repo. There could be some CMake magic to check whether those functions are available, but I am afraid it could become quite painful to maintain, since it would require first finding math libraries, then trying to link against it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433466071:135,avail,available,135,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433466071,1,['avail'],['available']
Availability,"@loriab did you have an easy fix for the svml error? psi4 was working until I installed rdkit and ambertools, and during the process it seems to have over-rode something. now I have the . ```; Traceback (most recent call last):; File ""/home/user/psi4conda/bin/psi4"", line 183, in <module>; import psi4 # isort:skip; File ""/home/user/psi4conda/lib//python3.8/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /home/user/psi4conda/lib//python3.8/site-packages/psi4/core.cpython-38-x86_64-linux-gnu.so: undefined symbol: __svml_exp4_mask_e9; ```; error. Thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460:46,error,error,46,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460,2,['error'],['error']
Availability,"@loriab full tests are running, although I have the default libint which is handicapped. Your failures were most likely caused by #1451: since the occupation numbers weren't included, e.g. the Sc atom would have been calculated in the charge state -15(!).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451553569:94,failure,failures,94,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451553569,1,['failure'],['failures']
Availability,"@loriab libxc 4 uses Maple implementations of pretty much everything, whereas version 3 had my hand-written implementation. But yes, it would appear that the Maple version is faulty and needs to be fixed. https://gitlab.com/libxc/libxc/issues/45",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383554275:175,fault,faulty,175,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383554275,1,['fault'],['faulty']
Availability,@loriab that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running `get_funcs.pl`. The easiest way to force the list to be regenerated is to remove the build directory and rebuild,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443:73,avail,available,73,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443,1,['avail'],['available']
Availability,"@loriab yes, that still works. Travis still uses Makefiles, since the GCC builds are failing with a compiler error with Ninja.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-328489425:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-328489425,1,['error'],['error']
Availability,"@loriab yup, failures are for ```python-*```, ```json-*```, as well as ```psi4numpy-*```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607523:13,failure,failures,13,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607523,1,['failure'],['failures']
Availability,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278176196:92,error,errors,92,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196,5,['error'],"['error', 'errors']"
Availability,"@loriab, I am excited to test this feature more extensively. When it will be available in the conda build can you please let me know?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720#issuecomment-303909419:77,avail,available,77,https://psicode.org,https://github.com/psi4/psi4/pull/720#issuecomment-303909419,1,['avail'],['available']
Availability,"@loriab, I noticed that you posted a fix for my Psi4/Cfour problem at https://github.com/psi4/psi4/pull/2615. Thank you for that! As I understand correctly, you have the updated files using which all Cfour test jobs run successfully. If so, could you please help me which files have been modified, and from where I can download them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201:319,down,download,319,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201,1,['down'],['download']
Availability,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225029668:154,error,error,154,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668,1,['error'],['error']
Availability,"@loriab. I think `-DOpenMP_LIBRARY_DIRS` is a good solution. I just think that if the detection is not going to be truly automatic (i.e. combinations such as gcc + MKL, which is a very common free combination of software, is not properly detected) it probably should be more obvious to the user that such options _have_ to be passed to CMake. With that in mind, improving the error message suggesting to use `-DOpenMP_LIBRARY_DIRS` would be awesome. And thank you for your time by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052:376,error,error,376,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052,1,['error'],['error']
Availability,"@loriab: This sounds good --- I think die+traceback is probably the right; default if the exception isn't caught. On Wed, Aug 8, 2018 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>; >; > Oh, and if an error's raised but not caught, it just shows the traceback; > and triggers coffee:; >; > PsiException: Could not converge SCF iterations in 4 iterations.; >; > Failed to converge.; >; > Traceback (most recent call last):; > File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:261,error,error,261,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,1,['error'],['error']
Availability,"@loriab: Yes, the state must change somewhere and the error comes when the input is parsed (say after running SCF). My solution is to temporarily switch to the module passed by the user and then go back to the one set before these functions are called. In the future, I would like to see if we could find a way to rely less on the set_/get_module. I see the benefits, but it makes the options model quite obscure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1412#issuecomment-445294507:54,error,error,54,https://psicode.org,https://github.com/psi4/psi4/pull/1412#issuecomment-445294507,1,['error'],['error']
Availability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:1052,down,downloading,1052,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['down'],['downloading']
Availability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:817,down,downloading,817,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['down'],['downloading']
Availability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:824,down,downloading,824,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['down'],['downloading']
Availability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920:498,down,downloading,498,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920,2,['down'],['downloading']
Availability,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:129,avail,available,129,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,2,['avail'],['available']
Availability,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344761262:306,robust,robust,306,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262,6,"['Error', 'error', 'robust']","['Error', 'error', 'robust']"
Availability,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:22,ping,ping,22,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783,1,['ping'],['ping']
Availability,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:744,reliab,reliable,744,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,2,['reliab'],['reliable']
Availability,"@psi-rking Ah, thats disturbing it appears to be non-deterministic. I find failures between iteration 7 and 35 or the optimization stopping at iteration 50 between separate DF-SCF runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203491619:75,failure,failures,75,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203491619,1,['failure'],['failures']
Availability,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203062097:135,error,error,135,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097,4,['error'],['error']
Availability,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203471756:35,failure,failure,35,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756,2,"['error', 'failure']","['error', 'failure']"
Availability,"@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPEAH10000000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgghrd，该符号在函数 ""int __cdecl psi::C_DGGHRD(char,char,int,int,int,double *,int,double *,int,double *,int,double *,int)"" (?C_DGGHRD@psi@@YAHDDHHHPEANH0H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgglse，该符号在函数 ""int __cdecl psi::C_DGGLSE(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGLSE@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggqrf，该符号在函数 ""int __cdecl psi::C_DGGQRF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggsvd3，该符号在函数 ""int __cdecl psi::C_DGGSVD3(char,char,char,int,int,int,int *,int *,double *,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *,int,int *)"" (?C_DGGSVD3@p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:24777,error,error,24777,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:32268,error,error,32268,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@psi@@YAXDDDDHHNPEANH0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dtrsv，该符号在函数 ""void __cdecl psi::C_DTRSV(char,char,char,int,double *,int,double *,int)"" (?C_DTRSV@psi@@YAXDDDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsdc，该符号在函数 ""int __cdecl psi::C_DBDSDC(char,char,int,double *,double *,double *,int,double *,int,double *,int *,double *,int *)"" (?C_DBDSDC@psi@@YAHDDHPEAN00H0H0PEAH01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dbdsqr，该符号在函数 ""int __cdecl psi::C_DBDSQR(char,int,int,int,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DBDSQR@psi@@YAHDHHHHPEAN00H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddisna，该符号在函数 ""int __cdecl psi::C_DDISNA(char,int,int,double *,double *)"" (?C_DDISNA@psi@@YAHDHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbbrd，该符号在函数 ""int __cdecl psi::C_DGBBRD(char,int,int,int,int,int,double *,int,double *,double *,double *,int,double *,int,double *,int,double *)"" (?C_DGBBRD@psi@@YAHDHHHHHPEANH000H0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbcon，该符号在函数 ""int __cdecl psi::C_DGBCON(char,int,int,int,double *,int,int *,double,double *,double *,int *)"" (?C_DGBCON@psi@@YAHDHHHPEANHPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbequ，该符号在函数 ""int __cdecl psi::C_DGBEQU(int,int,int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGBEQU@psi@@YAHHHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbrfs，该符号在函数 ""int __cdecl psi::C_DGBRFS(char,int,int,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGBRFS@psi@@YAHDHHHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsv，该符号在函数 ""int __cdecl psi::C_DGBSV(int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBSV@psi@@YAHHHHHPEANHPEAH0H@Z) 中被引用; F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:15661,error,error,15661,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:170,failure,failures,170,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479,1,['failure'],['failures']
Availability,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,2,['error'],['error']
Availability,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:159,error,errors,159,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048,1,['error'],['errors']
Availability,"@raimis, could you post here an example? if @dgasmith already spot it, maybe it's easier to track it down?; Thanks guys!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-335202988:101,down,down,101,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-335202988,1,['down'],['down']
Availability,"@raimis, yes, I've tried separate outfiles for individual tests, but pytest didn't like it, so need another bout. Also confirmed that there's no such thing as a session-wide tear-down with pytest-xdist. So, you're right, will have to stay serial for the moment. Sorry for the bad commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445844379:179,down,down,179,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445844379,1,['down'],['down']
Availability,@rmcgibbo Did you track this down any further?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716#issuecomment-308200431:29,down,down,29,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-308200431,1,['down'],['down']
Availability,"@rmcgibbo I can't see why anything you have done would cause the output file to disappear, it's more likely that some changes you made have caused that test to error out before the output file was created. . Can you run mints9 locally and see what it spits out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304134806:160,error,error,160,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304134806,1,['error'],['error']
Availability,"@robashaw I'm really sorry to hear that. You should focus on your health, of course, and I wish you a speedy recovery. I have been able to follow your examples very easily, so getting the library shoehorned into Psi4 is going very well so far. Even without derivatives it will be a big boost for us because of the efficiency gains from screening, so thanks for taking the time to write this and make it available. Thanks also for providing clear examples for me to follow. All the best. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526:109,recover,recovery,109,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526,4,"['avail', 'recover']","['available', 'recovery']"
Availability,"@robertodr , that seeming GCC version symbol error you reported earlier somehow came about because [psipcm was unlinked](https://github.com/psi4/psi4/pull/594/commits/f89d42b517564f4f46918488554ef889d10b9a16#diff-938e23f9a1850388684b9681e0db1a4aL14). I'll push a correction shortly. This branch (pcm) seems to have gotten commits from upstream master added not at the base. Abandoning it and pushing a new branch and PR, this one still atop lapack branch but not atop ambit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276525583:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276525583,1,['error'],['error']
Availability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:354,down,downloaded,354,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,1,['down'],['downloaded']
Availability,"@robertodr I used the line you suggested. I guess that I should then specify; --toolset=intel-linux-cray as argument for the bootstrap script ?. The bootstrap script does not like that, it issues the error:. Unknown toolset: intel-linux-cray. You can specify the toolset as the argument, i.e.:; ./build.sh gcc. Toolsets supported by this script are:; acc, como, darwin, gcc, intel-darwin, intel-linux, kcc, kylix,; mipspro, mingw(msys), pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp. and I believe that if I specify --toolset=intel-linux, it then just uses icc instead of the proper CC wrapper on the Cray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-163044282:200,error,error,200,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163044282,1,['error'],['error']
Availability,"@robertodr we are making progress. The error has now morphed to:. ```; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171380307:39,error,error,39,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171380307,2,['error'],['error']
Availability,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262017070:751,mainten,maintenance,751,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070,1,['mainten'],['maintenance']
Availability,"@robertodr, was using `MODULE` instead of `SHARED` deliberate? https://github.com/pybind/pybind11/blob/master/tools/pybind11Tools.cmake#L116. I confirm that v2rdm won't build in psi4's current state with same module error. @fevangelista, there's a new ambit 0.3 conda pkg available for Mac now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-489927058:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489927058,2,"['avail', 'error']","['available', 'error']"
Availability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:805,error,errors,805,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,2,['error'],['errors']
Availability,"@schiebermc was seeing problems with `scf-coverage`, but my fresh build of this branch (icpc) came back clean on full tests. So no barriers to merge on my part. Keep an eye out for `scf-coverage` errors on the 3rd test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-326597342:196,error,errors,196,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-326597342,1,['error'],['errors']
Availability,"@sgoodlett and I have been working on this and have to ask about an older PR. @tovrstra, in #1510, why did you go to **17** decimal places? I understand that we can go beyond four decimal places, but I wouldn't expect reproducibility to 17 decimal places due to finite machine precision, and indeed, we're seeing errors out that far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747554735:313,error,errors,313,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747554735,1,['error'],['errors']
Availability,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:232,error,error,232,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,3,"['Error', 'error']","['Error', 'error']"
Availability,"@susilehtola . Regarding your first suggestion about charges, I would like to make that change, however, that information is not available at the time of construction of the JK object. More general changes will need to be made to the codebase for that to be possible. . Separating the Coulomb and Exchange bits in a way that does not require extra AO ERI determination is beyond me. If you have a suggestion as to how to do it, I will consider implementing it in the limited time I have left. Otherwise, I will regard the task as impossible. I'm confused about the perceived assumption that all integrals fit into memory. No such assumption is made. In fact, this code can be seen as an extension of Weigend's work to the case in which they *don't* all fit in memory, and working with the assumption that integrals do *not* fit in memory is the reason for many of the strange choices made in writing this code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-748409140:129,avail,available,129,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-748409140,1,['avail'],['available']
Availability,"@susilehtola Actually after thinking about it, shouldn't LibXC do the `nan` scan and filter out these values? The user should filter through the input set for speed, but the downstream program probably shouldn't be responsible for output massaging as this will lead to *everyone* using LibXC fiddling with this (in probably different manners) when it should be fixed in a single place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-346123658:174,down,downstream,174,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-346123658,1,['down'],['downstream']
Availability,"@susilehtola Apologies for missing the date on those remarks. For some reason I thought I saw them after your remark about annoying code. The blocking is honestly difficult to describe in comments. I will try to provide an illustration in the code, but the best remedy would be for someone trying to work on the code to consult my thesis which I will make more widely available. As for your last point about clarity of operations in the code, that can be fixed. The code was written a while ago, and there was a set of notes that went along with the code that is no longer useful. Comments that are more relevant will be added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-748422549:368,avail,available,368,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-748422549,1,['avail'],['available']
Availability,"@susilehtola I cannot reproduce the failure on current master. Please try the _first_ input again and report back with whether the calculation succeeds. If it does, I'm going to close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2174#issuecomment-879962805:36,failure,failure,36,https://psicode.org,https://github.com/psi4/psi4/issues/2174#issuecomment-879962805,1,['failure'],['failure']
Availability,"@susilehtola Thank you for the explanation. Given that we want to run psi4 run on clusters where the maintenance is done by people holding permanent positions, it is quite difficult to have them do anything. I wonder if you can suggest the oldest kernel version that I can purpose them to update to? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717:101,mainten,maintenance,101,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717,1,['mainten'],['maintenance']
Availability,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345706660:38,down,downloaded,38,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660,2,"['down', 'fault']","['downloaded', 'fault']"
Availability,"@susilehtola if you get a chance, could you try running @PeterKraus's new sapt-ecp test from #1350? I think that and this PR may have conflicted in that I get `Fatal Error: Atom has more electrons than basis functions.` for the *non-ECP* case. When I switch to `set guess core` (and back off decimals to 6), it runs and passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-455372517:166,Error,Error,166,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-455372517,1,['Error'],['Error']
Availability,"@susilehtola it does, and we do plan to interface all available integrals. I also have plans to generalize the Erfc integrals to a form like `(a + b erf(omega r)/r` so we don't have to compute two sets of integrals for the range separated functionals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446:54,avail,available,54,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446,1,['avail'],['available']
Availability,"@tomspur I had a feeling you would run into something like this eventually. I would suspect that you are getting a segfault when calling these functions because the `global_dpd_` object has been broken down. When `CCEnergyWavefunction::compute_energy` is called the `DPD` object that `global_dpd_` is pointing to is constructed [(example for UHF)](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/ccenergy/ccenergy.cc#L122-L131) before iterations begin, and then [deleted](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/ccenergy/ccenergy.cc#L504) before the function returns. . So if when you do something like this:. ```python; e, wfn = psi4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be val",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:202,down,down,202,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,2,['down'],['down']
Availability,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:237,avail,available,237,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219,1,['avail'],['available']
Availability,"@vymetal commit df548db seems to fix both the problems you reported, i.e. convergence failures for PCM-UHF and the discrepancies in calculated first-order properties _wrt_ finite difference calculations.; The input file you provided is now a test case for first-order properties with PCM (it's in `tests/pcm_dipole`) In case your problems persist, don't hesitate to open a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/198#issuecomment-172765174:86,failure,failures,86,https://psicode.org,https://github.com/psi4/psi4/issues/198#issuecomment-172765174,1,['failure'],['failures']
Availability,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:40,error,errors,40,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,1,['error'],['errors']
Availability,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-185192172:54,failure,failures,54,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172,3,"['error', 'failure']","['error', 'failures']"
Availability,"@xiki-tempula there's more to the OS than just the kernel. Like @andysim said, EL7 would be a better option. EL6 is ancient. EL8 is also available, so if a reinstall is necessary then going straight to EL8 is an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607346549:137,avail,available,137,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607346549,1,['avail'],['available']
Availability,"@ymshi449, when you post error reports, _please_ be explicit. We need to know exactly what you are asking and exactly what the problem is. Including the details is more important than the grammar. > > Also, it seems that for `sadno`, `guess_mix` is not implemented.; > ; > wym? It should work out-of-the-box, since the `sadno` guess has orbitals like GWH. `huckel` is another possible choice. It might be that DIIS just pulls you back into the spin-restricted solution... @susilehtola ; Using your H2 example. ```; ==> Pre-Iterations <== . SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0 ; -------------------------------------------------------; Total 10 10 1 1 1 0 ; -------------------------------------------------------. ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824246 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18513e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41887e-13 2.57430e-14 DIIS; Energy and wave function converged.; ```. Even though `set guess_mix True` is set in my input file, the output that _should_ appear (and does for `guess gwh` instead of `guess sadno`) when `guess_mix` runs does not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737,1,['error'],['error']
Availability,"@zachglick reports he was able to get the same seg fault with just ; `conda create -n test_env4 -c psi4 python=3.7 psi4==1.5+e9f4d6d`; and ; ```; molecule mol {; 0 1 ; O ; H 1 1.0 ; H 1 1.0 2 109.5; }. set basis sto-3g; energy, wfn = energy(""HF"", return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503237:51,fault,fault,51,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503237,1,['fault'],['fault']
Availability,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:109,avail,available,109,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,2,"['avail', 'robust']","['available', 'robust']"
Availability,"A [long-requested feature](http://forum.psicode.org/t/scf-level-shift/938): implement level shifts in Psi4. This is an even simpler to implement than [GDM](#2214). What is needed is to edit the `form_C()` functions in RHF, UHF, and ROHF by replacing e.g.; ```; diagonalize_F(F_, C_, epsilon_);; ```; with the diagonalization of an effective Fock matrix `Feff = F + shift S*Cvirt*Cvirt.T*S` where `shift` is the level shift (should be `0.5` by default), when the DIIS error is larger than the set threshold. This would also make the SCF solver smarter, see #888.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2216:467,error,error,467,https://psicode.org,https://github.com/psi4/psi4/issues/2216,1,['error'],['error']
Availability,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:337,error,error,337,https://psicode.org,https://github.com/psi4/psi4/issues/2825,4,"['down', 'error', 'recover']","['downwards', 'error', 'recover']"
Availability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:296,down,down,296,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,1,['down'],['down']
Availability,"A couple thoughts before a more thorough review:. Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules. Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good. It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546:363,error,error,363,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546,2,"['error', 'redundant']","['error', 'redundant']"
Availability,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:913,Down,Download,913,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['Down'],['Download']
Availability,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124775223:110,error,error,110,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223,1,['error'],['error']
Availability,"A few suggestions for the documentation based on a recent interaction of a new user with Psi4 that I could observe:. - The Psi4 manual is kinda ""hard to find"". The user searched for ""manual"" on psicode.org, and despite the ""Docs"" link in the top bar, was puzzled when no hits were found. Maybe just a brighter colour for the tabs on top.; - Unknown keywords (using Psithon) should print a warning. Not sure this is easy to do or whether we even want it, as it might mess with python functionality...; - The PCMsolver docs page should show available solvents somewhere - currently one has to go to PCMsolver's github, then docs, then manual, which is kinda tedious. A direct link in Psi4's PCMsolver page to the solvent table in PCMsolvers own docs would do the job, IMO.; - Search on the docs page is quite tough to deal with. Is it possible to sort the results to list hand-written pages before autogenerated ones?. Obligatory ping to #2109",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2138:539,avail,available,539,https://psicode.org,https://github.com/psi4/psi4/issues/2138,2,"['avail', 'ping']","['available', 'ping']"
Availability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:63,avail,available,63,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,1,['avail'],['available']
Availability,"A fresh compile of psi4 1.9.1 on Fedora (yay, finally updating from 1.3.2!) fails to run; all the tests fail with the error; ```; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Exit Status: overall (1); ```; which suggests that there is critical path code that is accessing a `std::vector` out-of-bounds. All Fedora packages are compiled with the following default optimization flags; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214:118,error,error,118,https://psicode.org,https://github.com/psi4/psi4/issues/3214,1,['error'],['error']
Availability,"A little worried damping is not being applied correctly. We build JK matrices from C matrices and not the density, the only time the density is used is in the DIIS error vector and for the energy. We probably need to scale the Fock matrices as well. @jturney @andysim Did I miss something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228439151:164,error,error,164,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228439151,1,['error'],['error']
Availability,"A place to stash ""next-release"" items that come up that don't fit elsewhere. Who knows what the next release will be called — ""1.3"" shall be used as placeholder. This is for opinions as well as consensus, so don't read this and consider anything BDFL-PEP-Approved. Similarly, if you're posting for more than yourself, try to convey a notion of the breadth of agreement. Also, separate issues by post so up/downvotes have a chance to mean something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972:406,down,downvotes,406,https://psicode.org,https://github.com/psi4/psi4/issues/972,1,['down'],['downvotes']
Availability,"A problem was just fixed with GGAs and meta-GGAs in libxc 5, which may have caused some of the failures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619533547:95,failure,failures,95,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619533547,1,['failure'],['failures']
Availability,"A recent [forum issue](http://forum.psicode.org/t/error-in-running-on-centos-undefinted-name-true/1727/2) traced back to a user writing `return_wfn=true` rather than `return_wfn=True`. Can we teach the parser to automatically correct this, or at least print a better error message?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1859:50,error,error-in-running-on-centos-undefinted-name-true,50,https://psicode.org,https://github.com/psi4/psi4/issues/1859,2,['error'],"['error', 'error-in-running-on-centos-undefinted-name-true']"
Availability,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:56,error,error-wavefunction-unable-to-obtain-mo-coefficients,56,https://psicode.org,https://github.com/psi4/psi4/issues/2203,1,['error'],['error-wavefunction-unable-to-obtain-mo-coefficients']
Availability,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2224:138,error,error,138,https://psicode.org,https://github.com/psi4/psi4/issues/2224,3,['error'],['error']
Availability,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29766453:114,avail,available,114,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453,4,"['avail', 'checkpoint', 'error']","['avail', 'available', 'checkpointing', 'error']"
Availability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:418,error,error,418,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531:257,error,error,257,https://psicode.org,https://github.com/psi4/psi4/issues/531,2,['error'],['error']
Availability,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:127,failure,failure,127,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201,1,['failure'],['failure']
Availability,"A traceback is never adequate information for a bug report. We need a Psi4 version number, exact steps to reproduce the error, and need to know what operating system you're using.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-920805274:120,error,error,120,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-920805274,1,['error'],['error']
Availability,"A user on the forums [reported](http://forum.psicode.org/t/psio-error-during-adc-2/1338) a PSIO error when using ADC(2). The input file is; ```; #! ADC/def-2SVP on BODIPY-Phe . molecule bodphe {; 0 1 ; N 0.07895 0.63049 2.21156; N 0.40701 -1.77253 2.18386; C 0.85975 -1.61894 0.87368; C 1.93462 -2.51476 0.66009; C 0.25153 -0.54266 0.07529; C 0.60747 0.60802 0.92030; C 1.47746 1.72071 0.77028; C 1.38234 2.45311 1.95195; C 2.07438 -3.24863 1.84094; C 0.53652 1.71840 2.84134; C 1.13424 -2.73093 2.77791; H 2.76916 -4.06657 2.02914; H 0.98002 -2.99119 3.82431; H 2.46553 -2.64393 -0.28198; H -0.76107 1.52726 -1.36025; C -0.87740 0.55157 -1.84231; C -0.42668 -0.61486 -1.17553; C -0.59367 -1.86931 -1.81442; H -0.24902 -2.77578 -1.30769; C -1.18278 -1.94632 -3.07591; H -1.30041 -2.92327 -3.55316; C -1.60723 -0.78659 -3.74115; H -2.04665 -0.85123 -4.73942; C -1.45720 0.45654 -3.10859; H -1.78685 1.36634 -3.61791; B -0.55985 -0.69534 2.82439; F -0.40573 -0.68314 4.19154; H 0.27433 1.92595 3.87885; H 1.84952 3.41187 2.17639; H 2.03049 1.96835 -0.13399; F -1.84936 -0.86321 2.39539; symmetry c1 ; }. set {; reference rhf; basis def2-svp; freeze_core true; guess auto ; roots_per_irrep [2] ; }. ref_energy = -906.2735763050857258 ; adc_energy = energy('adc'); ```. The (OV|VV) integral transformation completes, and then `file4_mat_irrep_rd_block` raises the following error:; ```; PSIO_ERROR: Can't find TOC Entry MO Ints V1243); PSIO_ERROR: unit = 61, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. This may be a large system, but user's tests indicate scratch usage is at 10% at the time of the crash, and this error message isn't what PSIO normally displays during a memory problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1596:64,error,error-during-adc-,64,https://psicode.org,https://github.com/psi4/psi4/issues/1596,4,['error'],"['error', 'error-during-adc-']"
Availability,"A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C —",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:5685,down,download,5685,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['down'],['download']
Availability,"ARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow. Interestingly, the stand-alone version I built doesn't even link against libiomp5.so or and LAPACK or BLAS libraries (apart from the CUDA libraries):;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:1156,Error,Error,1156,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,2,"['Error', 'down']","['Error', 'downstream']"
Availability,"About time to start patch notes again. As always please modify or comment as permissions allow. Please understand that these notes are not complete.; ## . The Psi4 1.1 update contains large changes to the internal infrastructure. The primary result of the internal changes is that Psi4 is now a normal Python module instead of a executable that calls Python. While these changes are substantial it should be stressed that the current Psi4 input including calling the executable `/bin/psi4` should behave in an identical way to the Psi4 1.0 release. A discussion and overview of the current changes can be found [here](https://github.com/psi4/psi4/issues/468). Points of interest:; - Psi4 is now a Python module (e.g. `python -c ""import psi4""`). [details](https://github.com/psi4/psi4/pull/481); - The build system has been rewritten to allow for more flexibility for external projects in the future. [details](https://github.com/psi4/psi4/pull/442). # New Features; - High-spin open-shell SAPT0 computations are now available.; - MCSCF now has Augmented Hessian as an additional convergence option.; - If Psi4 fails, users are now suggested to purchase developers coffee instead of beer. # Developer notes; - Psi4 now requires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:1016,avail,available,1016,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['avail'],['available']
Availability,"According to the docs (https://psicode.org/psi4manual/master/autodir_options_c/module__ccenergy.html#cachelevel), the maximum value of cachelevel is 6. This is wrong, trying to use a cachelevel of 6 or 5 results in an invalid cachelevel error message. The largest cachelevel that appears to work is 4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:237,error,error,237,https://psicode.org,https://github.com/psi4/psi4/issues/2701,1,['error'],['error']
Availability,"Actually, I think it might make sense to keep this issue open (and retitled to ""cdomp2-2 test suite failure when ATLAS is used"" or so); this is something that should be tracked down eventually.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451669743:100,failure,failure,100,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451669743,2,"['down', 'failure']","['down', 'failure']"
Availability,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133175539:388,error,error,388,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539,1,['error'],['error']
Availability,"Actually, as defined above, the M11 dictionary should raise a validation error, see section 2b of `check_consistency()`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383216051:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383216051,1,['error'],['error']
Availability,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173202821:61,error,error,61,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821,1,['error'],['error']
Availability,"Actually, if this is intended, then the manual should be adjusted. 'active' is listed as a relevant keyword for CI in the ""Spaces available in the MCSCF program"" section at http://www.psicode.org/psi4manual/master/detci.html. Otherwise, the behavior should be changed that when running ci(n), the code should figure out the resulting restricted spaces..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-278208375:130,avail,available,130,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-278208375,1,['avail'],['available']
Availability,"Actually, if what I said was correct, that's not quite DNS hijacking. It's still resolving to the correct IP, but downloading a different document based on referer. This would point to a godaddy server hijacking (I would think)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210026465:114,down,downloading,114,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210026465,1,['down'],['downloading']
Availability,"Actually, it sounds like there might be an issue in the code, although I am not sure if I fully understand stability analysis. > The instability analysis gave us the first two terms of the Taylor expansion, analytically. If you have minimized a second-order Taylor expansion, this means that you've solved the Newton-Raphson equations. Thus, in addition to having the *direction* of the instability vector, you should also have its **length**. That is, one should not have any user fed in length for the step!. Doing a line search in the direction of the instability is exactly what an orbital rotation optimizer can do. Unfortunately, I'm again pegged down by other projects...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961:653,down,down,653,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961,1,['down'],['down']
Availability,"Actually, there are more failures; ```; (gdb) bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0); at pthread_kill.c:44; #1 0x00007f21b9c426d3 in __pthread_kill_internal (threadid=<optimized out>, signo=6) at pthread_kill.c:78; #2 0x00007f21b9be9c4e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007f21b9bd1902 in __GI_abort () at abort.c:79; #4 0x00007f21862e80af in std::__glibcxx_assert_fail (file=<optimized out>, line=<optimized out>, ; function=<optimized out>, condition=<optimized out>); at ../../../../../libstdc++-v3/src/c++11/assert_fail.cc:41; #5 0x00007f21aa275614 in std::vector<double const*, libint2::detail::ext_stack_allocator<double const*, 121ul> >::operator[] (this=0x56025b76c988, __n=6) at /usr/include/c++/14/bits/stl_vector.h:1149; #6 0x00007f21aa2a709b in psi::Libint2TwoElectronInt::compute_shell_deriv1 (this=0x56025b7bb980, s1=0, s2=0, ; s3=0, s4=0) at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/eribase.cc:3245; #7 0x00007f21a9f71d73 in _ZN3psi11MintsHelper11metric_gradERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_6MatrixEESt4lessIS7_ESaISt4pairIKS7_SA_EEERSE_._omp_fn.0(void) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:25,failure,failures,25,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['failure'],['failures']
Availability,"Add a new method in `share/python/procedures/proc_table.py:172` that links to a function in `share/python/procedures/proc_table.py:1710` (line number approximate) that should mimic `run_scf_gradient` right above that line. Make sure to raise a Validation error for non-RHF and DFT references for now. The Hessian should then run assuming some untested code works as expected. For frequencies: when we use finite difference Hessians its easy to assign different frequencies to different symmetries, without that it becomes much more difficult. You can guess which frequency applies to which frequency, but you cannot be certain in some cases. @loriab Do you remember the conclusion of this? I think we might have to insert our new thermo module for this. @bwb314 Hows the NumPy thermo module coming?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230648867:255,error,error,255,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230648867,1,['error'],['error']
Availability,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232781392:36,down,downloads,36,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392,1,['down'],['downloads']
Availability,Added virtual functions to UKS and RKS to override the soscf_update of UHF and RKS. The result is that calling soscf_update on these functions will now fail with an error message instead of a set fault. Also cleaned up the SOSCF logic a bit. This PR is ready to be merged if everything passes. Fixes #256.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/258:165,error,error,165,https://psicode.org,https://github.com/psi4/psi4/pull/258,2,"['error', 'fault']","['error', 'fault']"
Availability,"Adding purely for the sake of search results for anyone else who goes down this rabbit hole:. If you are getting a mismatch between Orca and Psi4 on, say, a dimer interaction energy, and your system contains Xe or I, and you've been tearing your hair out trying to reconcile the difference, **this is probably why**. Orca removes the ECPs on ghost sites.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353:70,down,down,70,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353,1,['down'],['down']
Availability,"Additional testing confirms that the error message I reported in my last message displays regardless of whether this fix is in place. This should be investigated in more detail later, but it's outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825:37,error,error,37,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825,1,['error'],['error']
Availability,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/770:568,down,downloads,568,https://psicode.org,https://github.com/psi4/psi4/pull/770,2,['down'],"['downloads', 'downstream']"
Availability,Adjust printout for PSIO errors,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3139:25,error,errors,25,https://psicode.org,https://github.com/psi4/psi4/pull/3139,1,['error'],['errors']
Availability,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,3,['error'],['error']
Availability,"After #1233 removed memory padding, test case opt13 started failing b/c it was borderline in-core/disk and chose ... poorly. See details https://github.com/psi4/psi4/pull/1233#issuecomment-428754862. First stage question is: Are we willing to have more jobs pass through the in-core/disk choice stage with a false negative and instead hit the error further on? I'm thinking that's not good. This particular case is readily fixed by upping the memory user-side or (as @dgasmith suggests) adding in another buffer `required += naux_ * naux_;` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/dfhelper.cc#L228-L232). But there's a lot of estimates, and it'd be good to centralize memory apportionment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1283:343,error,error,343,https://psicode.org,https://github.com/psi4/psi4/issues/1283,1,['error'],['error']
Availability,"After @andysim 's fix I get a normal print; ```; MO spaces... FC OCC VIR FV; ----------------------; 36 91 567 0. Number of basis functions in the DF-CC basis: 2548. Available memory : 61440.00 MB; Memory requirement for 3-index ints : 7413.66 MB; Memory requirement for DF-CC int trans: 23261.99 MB; Memory requirement for CC contractions: 60934.08 MB; Warning: T2 amplitudes will be stored on the disk!; Memory requirement for Wabef term : 34201.37 MB; ```. Though the calculation exceeds my 64 GiB RAM in the end. @kaljugit wow, looks like you went deep!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878:166,Avail,Available,166,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878,1,['Avail'],['Available']
Availability,"After a discussion, the plan is to:. * Implement SymmDFJK vs PackedDFJK logic in the DFJK constructor, thus requiring memory and wK info at initialization time that we don't now.; * Overload the constructor so that there's a default and an elaborate signature; * For methods that require PackedDFJK because of downstream data structure assumptions, that will be handled in proc.py with a force_*dfjk flag passed to scf_helper; * SymmDFJK aka Matt's will be named MemDFJK. PackedDFJK aka Rob's will be named DiskDFJK. since the actual implementations aren't as orthogonal as those names suggest, references/more explicit explanations will be in HF and/or SCF_TYPE docstrings; * `SCF_TYPE` option will have three relevant choices; * `DF` formerly went to Rob's code. now will choose the best DFJK from available info. will be conservative on memory estimation; * `MEM_DF` will always go to Matt's code so that a user can test both or be smarter than the logic depending on known hardware/mem considerations; * `DISK_DF` will always go to Rob's code; * The read_options docstring for SCF_TYPE will label the MEM_DF and DISK_DF as expert choices; * In future, other algorithms will follow similar DF|MEM_DF|DISK_DF options in their MTD_TYPE algorithm controllers. Any further ideas on labeling these things welcome. @CDSherrill . Edits:. * `SymmDF` and `DFHelper` classes shall go to Pascal case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382894140:310,down,downstream,310,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382894140,2,"['avail', 'down']","['available', 'downstream']"
Availability,"After a recent [forum report](http://forum.psicode.org/t/sapt0-d3mbj-error-writing-to-file/2474/6), @zachglick had the excellent suggestion of having _some_ way to warn the user when the user doesn't set the scratch space. What exactly this should look like is unclear. Suggestions that have been raised:. * Auto-exit if scratch hasn't been set and memory demand is large; * Print warning to output file when scratch hasn't been set and memory demand is large; * Edit the PSIO errors for read/write when scratch hasn't been set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2573:69,error,error-writing-to-file,69,https://psicode.org,https://github.com/psi4/psi4/issues/2573,2,['error'],"['error-writing-to-file', 'errors']"
Availability,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/536,4,['error'],['error']
Availability,"After each exit of any run the following crash happens:. ``` bash; Program received signal SIGSEGV, Segmentation fault.; subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install atlas-3.8.4-8.fc19.x86_64 blas-3.4.2-2.fc19.x86_64 keyutils-libs-1.5.5-4.fc19.x86_64 krb5-libs-1.11.3-1.fc19.x86_64 libcom_err-1.42.7-2.fc19.x86_64 libselinux-2.1.13-15.fc19.x86_64 pcre-8.32-7.fc19.x86_64; (gdb) bt full; #0 subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; type = 0x10d7f9c0; base = <optimized out>; basedealloc = <optimized out>; tstate = 0x0; #1 0x00007ffff6b92cb2 in xdecref<_object> (p=<optimized out>) at boost/python/refcount.hpp:36; p = <optimized out>; #2 reset (this=0x1107b438) at boost/python/handle.hpp:249; No locals.; #3 boost::python::converter::shared_ptr_deleter::operator() (this=0x1107b438) at libs/python/src/converter/builtin_converters.cpp:35; No locals.; #4 0x0000000000710812 in psi::Process::Environment::~Environment() (); No symbol table info available.; #5 0x000000374f2390a9 in __run_exit_handlers (status=0, listp=0x374f5b96e8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77; atfct = <optimized out>; onfct = <optimized out>; cxafct = <optimized out>; f = <optimized out>; #6 0x000000374f2390f5 in __GI_exit (status=<optimized out>) at exit.c:99; No locals.; #7 0x000000374f221b7c in __libc_start_main (main=0x699720 <main>, argc=2, ubp_av=0x7fffffffdb38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdb28); at libc-start.c:292; result = <optimized out>; unwind_buf = {cancel_jmp_buf = {{jmp_buf = {0, -420104691260379722, 7149040, 140737488345904, 0, 0, 420104692152085942, -412673899392062026}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, ; 0x1c22e20 <__libc_csu_init>, 0x7fffffffdb38}, data =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8:113,fault,fault,113,https://psicode.org,https://github.com/psi4/psi4/issues/8,1,['fault'],['fault']
Availability,"After further investigation, I've learned a few things. First, I was mistaken about the PCG convergence guarantees. Each iteration guarantees that you are closer to the correct solution vector. It does _not_ guarantee that your residual RMS is smaller. For a simple model, just think of z=500x^2+y^2. (1, 0) is closer to the minimum than (0, 10), but (0, 10) gives a smaller value of `z`. In this particular case, you are indeed getting close to the right `x` value, even as your residual increases. Second, when I throw exact MO hessian diagonalization at the problem, they aren't converging well either. The problem is that the MO hessian often has small, negative eigenvalues along the optimization path, causing steps that can be large and energy increasing. While I think this points out a need for more robust convergence algorithms, the behavior I'm seeing does not need an implementation error to be explained. As such, I'm inclined to close this issue and mark an item on the developer wishlist. #2183 is worth separate investigation. @susilehtola, any objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790:809,robust,robust,809,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790,4,"['error', 'robust']","['error', 'robust']"
Availability,"After installing the binary patches, I get the error; ```; psi4.driver.p4util.exceptions.MissingMethodError: Method=ccsdt is not available for any derivative level. Did you mean? ccd ccsd ccsd(t) cisd cisdt cisdtq lccsd ksdt; ```; with the above input as well as `tests/mrcc/ccsdt/input.dat`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524,2,"['avail', 'error']","['available', 'error']"
Availability,"After installing the psi4, I ran a simple test. By looking at the output file, I found that the program seemed to stop after reading the contents of the input file, the program did not stop, but it did not continue and did not report an error. Also, there were no errors during the compilation of psi4, and it's not clear to me what went wrong.; ![1678955019941](https://user-images.githubusercontent.com/99332231/225558169-d53d12b0-5c8b-4f6e-86e7-bb18e630ec4e.jpg)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2900:237,error,error,237,https://psicode.org,https://github.com/psi4/psi4/issues/2900,2,['error'],"['error', 'errors']"
Availability,"After some deep digging, the source of the `nan`s has been identified!. In the function `compute_numeric_overlap` in DFJCOSK.cc, we have this block of code:; ```; for (size_t p = 0; p < npoints_block; p++) {; for (size_t k = 0; k < nbf_block; k++) {; X_blockp[p][k] = point_values->get(p, k) * std::sqrt(w[p]);; }; }; ```. which is meant to compute a part of the X matrix, as defined in Eq. 2 of [this paper.](https://doi.org/10.1063/1.3646921) Problem is, with a ROBUST grid pruning scheme and 146 spherical points, some of the weights w seem to evaluate as negative. The resulting square-rooting of these weights during computing X_blockp, then, is what leads to the `nan`s that were observed. After some discussion with @hokru, it seems that Psi4 grid weights can indeed be negative as expected behavior, so this is a problem that could show up with other constructed grids fed into COSX. This leaves the question - how do we best handle this? One obvious start is to simply have COSX throw an exception if a grid with negative weights is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376:464,ROBUST,ROBUST,464,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376,1,['ROBUST'],['ROBUST']
Availability,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:184,error,error,184,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,2,['error'],['error']
Availability,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,6,"['error', 'robust']","['error', 'robust']"
Availability,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196005999:198,error,error,198,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999,1,['error'],['error']
Availability,"Ah yes, my fault for not suggesting posting the input file when OP asked the form for PRs. I can believe that we could stick something funny on `wfn` (or the user could) like EFP object, stray array that `save` could balk at. But, yes, we would have hit the problem if it had been in test suite. the MP2 error in CI is new this week. i'll have to look into that. but it's unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229:11,fault,fault,11,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229,2,"['error', 'fault']","['error', 'fault']"
Availability,"Ah, I run a lot of the CI code that hasn't been touched since Psi3 through clang-format with google style options so that I can read it a bit better. I do wish the ignore white-space option was available online as well. I do like the idea of a style guide for the code, but it isn't particularly high on any list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372#issuecomment-217654331:194,avail,available,194,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217654331,2,['avail'],['available']
Availability,"Ah, I see it now. Just the decimals were not copied correctly in the email. > On Jan 8, 2016, at 5:04 PM, Daniel Smith dgasmith@icloud.com wrote:; > ; > It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?; > ; > > On Jan 8, 2016, at 4:54 PM, ssh2 <notifications@github.com <mailto:notifications@github.com>> wrote:; > > ; > > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170141043:237,error,error,237,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170141043,2,['error'],['error']
Availability,"Ah, NumPy issue. Needs a rebuild after Psi4 1.3.2 release since NumPy fixed a security bug and broke quite a few downstream repos. You can try downgraded NumPy by one patch version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492354867:113,down,downstream,113,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492354867,2,['down'],"['downgraded', 'downstream']"
Availability,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:127,down,downstream,127,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347,2,"['down', 'error']","['downstream', 'error']"
Availability,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249306912:444,failure,failure,444,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912,1,['failure'],['failure']
Availability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:101,error,error,101,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,1,['error'],['error']
Availability,"Ah, yes if `DEFAULT_SYM_TOL` was just an attribute of Molecule, that'd work just fine. That was the scheme I originally talked over with Jet, and in that case the argument to `symmetrize()` could certainly be dropped. . It was later that I noticed the separate tolerance parameter to `symmetrize()` and thought that might be a way around WebMO's problem (point group changing in the course of geom opt) _without_ major construction work on the Molecule class. Brandon was looking into this at one point. Really should reproduce the WebMO problem first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232#issuecomment-205865787:261,toler,tolerance,261,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205865787,1,['toler'],['tolerance']
Availability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:193,avail,available,193,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,3,"['avail', 'down', 'error']","['available', 'down', 'error']"
Availability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:132,robust,robust,132,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,2,['robust'],['robust']
Availability,"Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233001167:85,fault,fault,85,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233001167,2,"['error', 'fault']","['error', 'fault']"
Availability,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:149,error,error,149,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591,2,['error'],['error']
Availability,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:141,error,error,141,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739,2,['error'],"['error', 'errors']"
Availability,"All relevant error information should end up in the error box, not just `stderr`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1226880838:13,error,error,13,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1226880838,2,['error'],['error']
Availability,"All right, I just pushed some changes that should fix the CI! . Whether those changes are _kosher_ is a question, though. Previously, I used `option_with_flags` to handle `FORCE_PEDANTIC`.Now, I use `option_with_default` instead, and when `FORCE_PEDANTIC` is set to `ON`, it explicitly appends the `-pedantic-errors` flag in the `psi4/CMakeLists.txt` file. Is this an acceptable approach?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2299098336:309,error,errors,309,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2299098336,1,['error'],['errors']
Availability,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:314,down,down,314,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057,1,['down'],['down']
Availability,All test cases pass now (using ctest). There wasn't any problem in the code. It was an issue in my perl environment settings which caused failure of some cc test cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303925660:138,failure,failure,138,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303925660,1,['failure'],['failure']
Availability,"All tests ran through except for:; FAILED tests/fsapt1/test_input.py::test_fsapt1 - AssertionError: Traceback (most recent call last):; with the message:; E !----------------------------------------------------------------------------------!; E ! !; E ! Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to !; E ! do in-core! Increase the amount of memory allocated to Psi4 or allow for !; E ! out-of-core to be used. !; E ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4nm_171103 !; E ! 8779956/work/psi4/src/psi4/lib3index/dfhelper.cc on line: 261 !; E ! The most recent 5 function calls were: !; E ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; E ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; E ! psi::DFHelper::initialize() !; E ! !; E !----------------------------------------------------------------------------------!. I think this is independent of this PR and the PR would be good to go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817:260,Error,Error,260,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817,2,['Error'],['Error']
Availability,"All the CTests have passed, except two that are not related to this PR; 1.) sapt7 (Error Message: `'psi4.core.UHF' object has no attribute 'diis_manager'`). 2.) scf-cholesky-basis (Error message: `Energy with Cholesky 1e-7: computed value (-230.6415254470) does not match (-230.6415254327) to atol=1e-08 by difference (-0.0000000142).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560:83,Error,Error,83,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560,2,['Error'],['Error']
Availability,"All the new packages are available. No further problems are anticipated, so lmk if there's further trouble. I'll leave this open for a few days for information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-1984588364:25,avail,available,25,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-1984588364,1,['avail'],['available']
Availability,"All the symmetry detection in the Molecule class is through `tol` arguments for individual methods. For the Molecule as a whole, this is controlled by `DEFAULT_SYM_TOL`, which is compiled in. This means one can't just dial down the symmetry tolerance for an entire optimization. For this ticket, make the `tol` parameter not a preprocessor option but a bit of member data. Make a set function for this. Export it to python.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232:223,down,down,223,https://psicode.org,https://github.com/psi4/psi4/issues/232,2,"['down', 'toler']","['down', 'tolerance']"
Availability,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157470643:89,down,download,89,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643,3,"['down', 'error', 'failure']","['download', 'error', 'failure']"
Availability,"All was well on psi4/psi4 circa 7913b38 early morning 15 Nov, but after pub/priv sync, by early morning 16 Nov, fresh recursive clones (`git clone --recursive https://github.com/psi4/psi4.git`) are giving errors; like below. @robertodr, could you check that the current submodule reference is what it ought it be? Thanks. ```; Cloning into 'psi4'...; ...; Resolving deltas: 100% (80379/80379), done.; Submodule 'interfaces/pcmsolver' (https://github.com/PCMSolver/pcmsolver.git) registered for path 'interfaces/pcmsolver'; Cloning into 'interfaces/pcmsolver'...; ...; Resolving deltas: 100% (13625/13625), done.; fatal: reference is not a tree: 9bc8e049f14260a4c1b4b2bda898a16850907b1c; Unable to checkout '9bc8e049f14260a4c1b4b2bda898a16850907b1c' in submodule path 'interfaces/pcmsolver'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189:205,error,errors,205,https://psicode.org,https://github.com/psi4/psi4/issues/189,1,['error'],['errors']
Availability,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:495,error,error,495,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,1,['error'],['error']
Availability,"Allenes, yeah, 'too linear' and like to make trouble.; The backtransform broke the molecule, look at most of the `Change` values. They are huge!. I tried a few things and typical solutions like `set DYNAMIC_LEVEL 1` or `opt_coordinates delocalized` do not work well.; Also geomeTRIC is behaving oddly. Tested with pw6b95 instead of pwpb95. If you want something more reliable I can recommend cartesian coordinates and a computed initial hessian.; Optimisation with cartesian coordinates is usually slow, but actually OK with a decent initial hessian.; `set opt_coordinates cartesian `. Automatic initial hessian at a different (cheaper) level is easily done:; ```; set FULL_HESS_EVERY 0; optimize('pwpb95-d3bj',hessian_with='pbe0-d3bj/def2-SV(P)'); ```; usually no need to go beyond the above level, even PBE would be OK I think. Also this hessian will be numerical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091:367,reliab,reliable,367,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091,1,['reliab'],['reliable']
Availability,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:34,down,down,34,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318,2,['down'],['down']
Availability,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:236,down,downgrade,236,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542,2,['down'],['downgrade']
Availability,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:1425,error,error,1425,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243,2,"['avail', 'error']","['available', 'error']"
Availability,"Alrighty, this one should be ready to go now. I tried to cook up a simple test using f orbitals, but they're all too costly; in the end I just added a permutation to the atom ordering in our existing cc-pVDZ water test, because this is enough to reveal the bug. The fact that we've always had a working cc-pVDZ test case shows how subtle the bug is; the affected d components in water must be zero by symmetry. I did have a distorted water in my test suite to check that case, but didn't detect problems. Oh well, live and learn I guess. This should be a trivial review, and it clearly helps to address a couple of high priority tickets, so please have at it whenever you get a chance. Sorry again for the error. Next time you see me, I'll be at a chalkboard, writing ""I will not cut and paste"", à la Bart in the Simpsons opening credits. Except, instead of writing it, I'll be cutting and pasting it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361080182:706,error,error,706,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361080182,2,['error'],['error']
Availability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:221,error,error,221,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['error'],['error']
Availability,"Also perhaps of interest, I ran 150 similar calculations, many with symmetry. Without obvious issues except for the reported structure. Most DF-CCSD(T)/CBS interaction energies agree with expected errors to a lower CCSD(T) references. Some larger (expected) disagreements are the reason why I do these calculations, so I hope they are physical nature and not technical :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110#issuecomment-408835725:197,error,errors,197,https://psicode.org,https://github.com/psi4/psi4/issues/1110#issuecomment-408835725,1,['error'],['errors']
Availability,"Also, here's what I get for the CI error:. `Error: The process 'C:\Miniconda\condabin\conda.bat' failed with exit code 1`. This seems unrelated to the changes in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211,2,"['Error', 'error']","['Error', 'error']"
Availability,"Also, this is carried forward from [forums](http://forum.psicode.org/t/radical-anion-error-bug-in-1-6/2505/3).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594#issuecomment-1146678498:85,error,error-bug-in-,85,https://psicode.org,https://github.com/psi4/psi4/issues/2594#issuecomment-1146678498,1,['error'],['error-bug-in-']
Availability,"Ambitious to hand-format read_options :-). What's wrong with the c-f of it, though? I can see that things like the below might need adjustment, but at a glance, it looked pretty respectful. line-break formatting isn't conveyed to the manual anyways. ```; options.add_str(""CFOUR_BASIS"", ""SPECIAL"",; ""STO-3G 3-21G 4-31G 6-31G 6-31G* 6-31G** 6-311G 6-311G* 6-311G** DZ DZP TZ TZP TZ2P PVDZ PVTZ ""; ""PVQZ PV5Z PV6Z PCVDZ PCVTZ PCVQZ PCV5Z PCV6Z AUG-PVDZ AUG-PVTZ AUG-PVTZ AUG-PVQZ AUG-PV5Z ""; ""AUG-PV6Z D-AUG-PVDZ D-AUG-PVTZ D-AUG-PVQZ D-AUG-PV5Z D-AUG-PV6Z cc-pVDZ cc-pVTZ cc-pVQZ ""; ""cc-pV5Z cc-pV6Z cc-pCVDZ cc-pCVTZ cc-pCVQZ cc-pCV5Z cc-pCV6Z PWCVDZ PWCVTZ PWCVQZ PWCV5Z ""; ""PWCV6Z PwCVDZ PwCVTZ PwCVQZ PwCV5Z PwCV6Z svp dzp tzp tzp2p qz2p pz3d2f 13s9p4d3f WMR ANO0 ""; ""ANO1 ANO2 EVEN_TEMPERED SPECIAL"");; ```. ```; if (name == ""FINDIF"" || options.read_globals()) {; /*- MODULEDESCRIPTION Performs finite difference computations of energy derivative, with respect to nuclear; displacements; for geometry optimizations and vibrational frequency analyses, where the required analytical derivatives are; not; available. -*/; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812:1106,avail,available,1106,https://psicode.org,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812,1,['avail'],['available']
Availability,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196157987:3,error,error,3,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987,1,['error'],['error']
Availability,"An error which is very high on my to-fix list, but where the fix is very involved. DF-DCT properties as present are not correct. I've tested against my own Python code and the Psi code and found disagreements in the fifth and sixth decimal place between finite difference and analytic properties. I've spoken with the code authors, and we are aware of two sources of disagreement.; 1. For gradients, the RDMs are contracted against the conventional derivative integrals, not the density fitted derivative integrals.; 2. Due to a subtle point in the derivation, the DF-DCT cumulant stationarity conditions are not variational minimization of the energy, as they are in conventional DCT. Accordingly, you're missing a cumulant response term for gradients and other properties. The fix for point 1 will hopefully just be marking the wavefunction as density fitted and leave the contractions to the `Deriv` object. However, DCT at present interferes with RDM processing in `libtrans`, so the fix will be likely be more involved. The fix for point 2 is not clear. I'm aware of three options:; * Change the DF-DCFT stationarity conditions to be variational minimization of the energy; * Change which terms are to be contracted against JKFIT integrals and which against RIFIT integrals, so the stationarity conditions are ""fixed"" automatically; * Add a cumulant response term. (Please don't make me do this.). I favor option B, but it'll take time to see what B does to energies.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579:3,error,error,3,https://psicode.org,https://github.com/psi4/psi4/issues/1579,1,['error'],['error']
Availability,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:250,down,downstream,250,https://psicode.org,https://github.com/psi4/psi4/pull/1393,2,['down'],['downstream']
Availability,An running error in fsapt.py,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/2281,1,['error'],['error']
Availability,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:30,reboot,rebooted,30,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967,2,"['down', 'reboot']","['down-the-line', 'rebooted']"
Availability,"And regarding the shared state issue. I did not realize that we were looking at orbital optimized methods so the example of avoiding work by intentionally sharing state here is a bad one. but the issue is still related. . The error arises when you run the modules one after the other, because the `DCFT` module is making some assumptions, probably unintentionally about the state of various psio files. However the `OMP2` module has modified that state and the assumptions `DCFT` is making are no longer valid. In this case the assumption is that the `MO Ints (OO|OV)` entry either does not exist, or if it exists it is the correct size to hold `O,O,O,V`. This is not a case of sloppy programing by the authors of either module, it is a consequence of DPD creating global state in a difficult to predict way (due to a lack of documentation), and not providing the means to program defensively around it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365:226,error,error,226,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365,1,['error'],['error']
Availability,And that error code (`20000_6805`) doesn't turn up anything on google either.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940788:9,error,error,9,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940788,1,['error'],['error']
Availability,"And yeah, I was planning to file a ticket in here that ADIIS should be implemented. It is already available in ERKALE and I think PySCF, also, although I think PySCF also has EDIIS and I'm not sure whether either is enabled in the SCF. PySCF is in my experience excellent at finding convergent solutions to a problem; using spherical symmetry in the SAD code is an essential feature. The only issue I found recently is that DIIS in PySCF does not treat linear dependencies properly, which means that whenever you have overcompleteness, the code doesn't find the correct solution. https://github.com/pyscf/pyscf/issues/1000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682:98,avail,available,98,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682,1,['avail'],['available']
Availability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:140,error,error,140,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,2,['error'],['error']
Availability,"Another case of the same issue: [same issue](http://forum.psicode.org/t/lambda-not-converged/2239). An `r_convergence` of `'6'` has no effect on the computation; `6`is required. Despite this, verbose mode _says_ the option was set just fine, and no error or warning arises that it actually was not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1137#issuecomment-890503767:249,error,error,249,https://psicode.org,https://github.com/psi4/psi4/issues/1137#issuecomment-890503767,1,['error'],['error']
Availability,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:156,error,error,156,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737,1,['error'],['error']
Availability,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-306527489:66,error,error,66,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489,2,['error'],['error']
Availability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:940,avail,available,940,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,1,['avail'],['available']
Availability,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:753,error,error,753,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['error'],['error']
Availability,Any test case that actually used NumPy (mostly casscf) failed. Afraid I don't remember the error trace details.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312328448:91,error,error,91,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312328448,1,['error'],['error']
Availability,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:218,ROBUST,ROBUST,218,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392,3,['ROBUST'],['ROBUST']
Availability,Apparently the `str(mess` error I was getting last night was from a combination of errors. Can't recreate at present. So that part will have to be reverted until I hit the problem again and fully note its circumstances.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263304143:26,error,error,26,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263304143,2,['error'],"['error', 'errors']"
Availability,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:211,Avail,Available,211,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701,1,['Avail'],['Available']
Availability,"Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:. molecule {; Mg; }; set basis aug-cc-pvdz-dk; set relativistic dkh; energy('scf'). ---. I got this error output:; Traceback (most recent call last):; File ""<string>"", line 20, in <module>; RuntimeError: DKH is not a valid choice",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124904274:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124904274,1,['error'],['error']
Availability,"Are you able to make the internal stage directory optional based on a cmake option?. The internal stage directory adds complexity without providing any benefit - with or without it the files should be installed into the real stage directory, but internal stage directory makes the process more complex and error prone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555:306,error,error,306,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555,1,['error'],['error']
Availability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:376,ping,pinging,376,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,2,['ping'],['pinging']
Availability,"Arrrgghhh...schoolboy error! Oops!. Now:. `cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DOpenMP_CXX_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/`; gives:. ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP iomp5 B /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP -Wl,--as-needed 0 ; MathOpenMP -Wl,--as-needed A _lib-NOTFOUND; MathOpenMP -Wl,--as-needed B _lib-NOTFOUND; MathOpenMP_LIBRARIES /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Found MathOpenMP: Found MathOpenMP: /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['error'],['error']
Availability,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1266:1504,down,down,1504,https://psicode.org,https://github.com/psi4/psi4/issues/1266,1,['down'],['down']
Availability,"As @hokru pointed out, this is because I forgot to define fragments in my system. Perhaps we should check for that in the n-body driver somehow and print a better error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743:163,error,error,163,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743,1,['error'],['error']
Availability,"As a general note, if you are working on Psi4 please drop us a line if you are having issues. Contributing should be an easy process and we are here to help! I believe you are on our Slack channel, feel free to comment or ping me there. If not we can certainly shoot out an invite (thats general to anyone reading this).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364107454:222,ping,ping,222,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364107454,1,['ping'],['ping']
Availability,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:509,down,down,509,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,1,['down'],['down']
Availability,"As discussed in #2204, Psi's current second-order SCF technology is the straightforward Newton-Raphson approach. This is prone to fail in cases where the MO hessian has a small, negative eigenvalue near the minimum, and it would be good if we had a modified second-order method that could handle this. As a test case, this eigenstructure problem causes the convergence failure of. ```; molecule {; 0 2; Mg; F 1 3.0; }. set reference uhf ; set soscf true ; set soscf_print true ; set soscf_max_iter 10; set stability_analysis follow. energy('hf/cc-pvdz'); ```. as confirmed by running the system with the Psi4Numpy SOSCF code. @susilehtola suggested a level shift as a possible fix, but I'm open to alternatives.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2212:369,failure,failure,369,https://psicode.org,https://github.com/psi4/psi4/issues/2212,1,['failure'],['failure']
Availability,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913,3,"['avail', 'down', 'error']","['available', 'down', 'error']"
Availability,"As for Debian and 1.2(.1), I have patched out libxc similar to what @susilehtola suggested in https://github.com/psi4/psi4/issues/1302#issuecomment-450826912 - for the next development cycle I guess psi4 will be able to use a system ilbxc, but time was running out. 1.2.1 is currently bulding here: https://buildd.debian.org/status/package.php?p=psi4 - there are a couple fo test suite failures I have not diagnosed yet, I'll try to find time over the weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547:386,failure,failures,386,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547,1,['failure'],['failures']
Availability,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/341#issuecomment-209534925:82,avail,available,82,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925,1,['avail'],['available']
Availability,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980:145,down,down,145,https://psicode.org,https://github.com/psi4/psi4/issues/980,2,"['avail', 'down']","['available', 'down']"
Availability,"As of 0.2.287, conda binary is building chemps2 and properly downloading dependency hdf5 from defaults and gsl from copy of asmeurer's into psi4 channel. As of 0.2.291 (42175a9cc2a2ba082c33a676c0bc518125f5f445), conda binary is building dkh and properly linking _static_ Fortran libraries so no user PATH manipulations necessary. Checked, but please report if ever otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126863294:61,down,downloading,61,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126863294,1,['down'],['downloading']
Availability,"As of this morning, I show dfomp3-2 and dfomp2p5-2 as fixed and dfomp2p5-grad1 and dfomp3-grad2 as still broken. You can see the errors by clicking on the ""Failed"" link at https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=44226.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157786910:129,error,errors,129,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157786910,1,['error'],['errors']
Availability,"As pointed out by others, LGTM is already down. Switching LGTM as a required check off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265479245:42,down,down,42,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265479245,1,['down'],['down']
Availability,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:306,error,error,306,https://psicode.org,https://github.com/psi4/psi4/issues/2291,1,['error'],['error']
Availability,Assertion error when using SAPT0-D3 and SAPT0-D3mbj,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/issues/2914,1,['error'],['error']
Availability,"At a conf, so won’t be able to examine links in depth, only respond to comments. . Neat! Yes, I commonly pull all non-qc department from conda, incl. pybind11 (-c conda-forge), mkl (defaults channel, repackaged direct from intel distribution), numpy (defaults, built with mkl). . If win is like linux and Mac, you can get the compilers from conda, and yes that will impart runtime lib deps, which presumably are also available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390254118:417,avail,available,417,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390254118,1,['avail'],['available']
Availability,"At a glance, your `conda list` is fine, though you should always copy the text from screen and paste within triple backticks for formatting rather than post screenshots. > how do you mean channel order reversed? :((. `conda create -n psi16 psi4 python=3.8 -c psi4 -c conda-forge` with ""channel order reversed"" makes `conda create -n psi16 psi4 python=3.8 -c conda-forge -c psi4`. ""same error"" is hard to diagnose -- you'd have to post the solve-time or run-time error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1175715270:386,error,error,386,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1175715270,2,['error'],['error']
Availability,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288472702:109,down,down,109,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702,1,['down'],['down']
Availability,"At long last, some gradient refactoring. Supersedes [my previous attempt](https://github.com/psi4/psi4/pull/1745). Only the OPDM and Lagrangian are a 1.7 target. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Orbital-optimized `occ` densities now available on the wavefunction; - [x] DC-06 densities now symmetrized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Conventional gradients now check whether the density and Lagrangian are set on the wavefunction. If so, it uses those rather than reading MO-basis quantities from disk. `dct` and `occ` use this new system. `cc` will use it in the next PR. The old system will be removed for 1.8. Old system vs new system is toggled by the `reset_oneel` flag. ## Questions; - [x] How to create a warning that plugin developers should use new-style gradients?. ## Checklist; - [x] All `dct`, `omp`, `mp`, `olccd`, lccd`, `cepa`, and `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2788:373,avail,available,373,https://psicode.org,https://github.com/psi4/psi4/pull/2788,1,['avail'],['available']
Availability,"At present you're trying to merge 288 commits and nearly 30k lines, and the commits are from many non-you authors. This means the rebase was faulty. If you made a backup branch locally before commencing rebase, restore from that. If not, you'll have to start from a fresh branch and cherry-pick over your own commits similar to https://github.com/psi4/psi4/pull/1490#issuecomment-457765390 . Another resource is http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-652171153:141,fault,faulty,141,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-652171153,1,['fault'],['faulty']
Availability,"At risk of encouraging procrastination, the alignment of error codes in `config.h` has been lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364,1,['error'],['error']
Availability,"At the moment, just quicktests (~118) because `cc14` and `mints9` are still failing. The latter is my fault, the former is a mystery. Failures make the conda build fail, so the test suite needs to be clean before go back to running all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262358481:102,fault,fault,102,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262358481,2,"['Failure', 'fault']","['Failures', 'fault']"
Availability,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295755959:334,reliab,reliable,334,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959,2,"['redundant', 'reliab']","['redundant', 'reliable']"
Availability,"At this stage, I have a reminder to look into this, rather than a full report. We had a user on the forum [report](http://forum.psicode.org/t/question-on-oscillator-strength-calculation-using-python-api/1036/2) getting the error message that ""Must provide roots_per_irrep vector in input."" during a EOM computation via PythonAPI. The user did provide `roots_per_irrep` in `set_options`... Just as a string rather than a list. A smarter API would have either tried to coerce the string to the actual type, a list, or have raised an error that a string wasn't valid for that argument. If Psi is already supposed to do this, why didn't it? If Psi isn't already supposed to do this, which one do we want to take?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1137:223,error,error,223,https://psicode.org,https://github.com/psi4/psi4/issues/1137,2,['error'],['error']
Availability,"Attempting frequency() for atomic species fails irrespective of charge, multiplicity, and reference type. Typical error message:. > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > <type 'exceptions.IndexError'>: basic_string::replace: File ""<string>"", line 26, in <module>; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in frequency; > psi4.thermo(wfn, wfn.frequencies()). Thanks,; -drhaney, -- that's ""D. R."", not Doctor. Typical input file attached (C atom, neutral triplet).; [C.txt](https://github.com/psi4/psi4/files/198782/C.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332:114,error,error,114,https://psicode.org,https://github.com/psi4/psi4/issues/332,2,['error'],['error']
Availability,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1353:317,error,error,317,https://psicode.org,https://github.com/psi4/psi4/issues/1353,7,"['Error', 'error']","['Error', 'error']"
Availability,"BGVD(char,char,int,int,int,double *,int,double *,int,double *,double *,int,double *,int,int *,int)"" (?C_DSBGVD@psi@@YAHDDHHHPEANH0H00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbgvx，该符号在函数 ""int __cdecl psi::C_DSBGVX(char,char,char,int,int,int,double *,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSBGVX@psi@@YAHDDDHHHPEANH0H0HNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsbtrd，该符号在函数 ""int __cdecl psi::C_DSBTRD(char,char,int,int,double *,int,double *,double *,double *,int,double *)"" (?C_DSBTRD@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:40332,error,error,40332,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,BLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3426,error,error,3426,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['error'],['error']
Availability,Bandaid over 1851... Segfault to error message.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:33,error,error,33,https://psicode.org,https://github.com/psi4/psi4/pull/1858,1,['error'],['error']
Availability,Based off the forums and a few issues there are a few tests that are not quite robust enough to test the code rather than a operational tweaks.; - `props2` - The new orientation code requires that this be moved to the COM at every step.; - `props3` - Overall convergence needs to be tightened to move flutter in 64-pole below test threshold.; - `scf-cov` - Convergence needs to be tightened in addition to not using a C2v molecule during a orientation check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808:79,robust,robust,79,https://psicode.org,https://github.com/psi4/psi4/pull/808,1,['robust'],['robust']
Availability,"Based on the discussion we had today in the Psi4 dev meeting, it has been decided that the best way to fully solve this issue is simply to have COSX error out when a grid with negative weights is encountered. This is what https://github.com/psi4/psi4/pull/2906 implements, so once that PR is merged into Psi4, this issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552:149,error,error,149,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552,2,['error'],['error']
Availability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,10,['error'],['error']
Availability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:36,avail,available,36,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['avail'],['available']
Availability,"Before anyone else tries to track down what's going on: I've found the ""problem"", working on a sustainable fix with @loriab 😬",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930:34,down,down,34,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930,1,['down'],['down']
Availability,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:91,error,error,91,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057,2,"['down', 'error']","['download', 'error']"
Availability,Better Error Message for Issue #2890,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:7,Error,Error,7,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['Error'],['Error']
Availability,Better visible PSIO errors,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:20,error,errors,20,https://psicode.org,https://github.com/psi4/psi4/pull/2030,1,['error'],['errors']
Availability,"Between my last three PRs, there shouldn't be a need for these strange hacks. Ping me if you encounter anything strange in the densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-661313439:78,Ping,Ping,78,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-661313439,1,['Ping'],['Ping']
Availability,"Between the two of you, the two of us are confused about what kinds of tests you want. * Holger asked about correctness tests. Lori hasn't raised the issue. This issue wasn't raised during my earlier ""density to wavefunction"" PRs, so I don't understand why we're doubting its correctness now. This is the same code as I used to bring densities over then. If there is a bug, that's the fault of `occ` and outside the scope of this PR. (And while we _could_ test correctness for the 1RDM, that requires adding occ properties. Which we could do, but is outside the scope of this PR.); * Holger asked if FCHK can be enabled but said that would be for a different PR. Lori says that may be appropriate for this PR. This is a straight contradiction, and we're confused which you want.; * While it's also possible to test `compute_fvpi`, I cannot recall one other case of a simple Pybind requiring a test, so I'm not sure what we'd be testing. Correctness? That this function can be called Python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324:385,fault,fault,385,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324,2,['fault'],['fault']
Availability,"Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4809,Error,Error,4809,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Error'],['Error']
Availability,"Both PCMSolver (in `pcmsolver.h`) and psi (in `src/lib/libpsipcm/psipcm.cc`) defined a `extern ""C""` function called:. ``` c++; extern ""C"" void host_writer(const char * message, int message_length);; ```. The fails to build of course (icpc 16.0.1):. ```; error: more than one instance of overloaded function ""host_writer"" has ""C"" linkage; ```. Please rename or adjust the function.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/417:254,error,error,254,https://psicode.org,https://github.com/psi4/psi4/issues/417,1,['error'],['error']
Availability,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356713683:672,down,down,672,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683,1,['down'],['down']
Availability,"Btw, which OSX version do you use? . You still need to get libgfortran.dylib in there somewhere to get rid of this error. See @andysim answer above. You could also try a flag like `-DCMAKE_FFLAGS='-lgfortran'` (not sure..). If it's any consolidation, I am compiling psi4 with gcc9(homebrew) and MKL against `psi4-dev` conda and also cannot get rid of `gomp`. This breaks threading for me, but serial execution is fine and anyway enough workload for my old macbook.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615181744:115,error,error,115,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615181744,1,['error'],['error']
Availability,"Bug; * Fix bug whereby MP2 cube files through OCC segfaulted (#2249); * Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); * Fix normalization issue in Molden files (#2229); * Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262). Feature; * Add O24 database (#2252, #2154); * Move Molden writer to Python (#2229); * Make restarting SCF and saving orbitals easier (#2190)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-892111323:127,error,error,127,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-892111323,1,['error'],['error']
Availability,Build error psi4::Options,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['error'],['error']
Availability,Build error with gcc 7.0.1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/631,1,['error'],['error']
Availability,"Build error(s) with intel 2017 compilers, gcc 5.4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['error'],['error']
Availability,Build fails on FreeBSD 12.3:; ```; /wrkdirs/usr/ports/science/psi4/work/psi4-0889d6d34/psi4/src/psi4/libpsio/rw.cc:86:33: error: use of undeclared identifier 'errno'; const int saved_errno = errno;; ^; /wrkdirs/usr/ports/science/psi4/work/psi4-0889d6d34/psi4/src/psi4/libpsio/rw.cc:97:33: error: use of undeclared identifier 'errno'; const int saved_errno = errno;; ^; /wrkdirs/usr/ports/science/psi4/work/psi4-0889d6d34/psi4/src/psi4/libpsio/rw.cc:119:37: error: use of undeclared identifier 'errno'; const int saved_errno = errno;; ^; /wrkdirs/usr/ports/science/psi4/work/psi4-0889d6d34/psi4/src/psi4/libpsio/rw.cc:131:37: error: use of undeclared identifier 'errno'; const int saved_errno = errno;; ^; ```. It looks like ```#include <errno.h>``` is missing.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2810:122,error,error,122,https://psicode.org,https://github.com/psi4/psi4/issues/2810,4,['error'],['error']
Availability,"Build failure (current rev. f03a896): undefined reference to `pow', etc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853:6,failure,failure,6,https://psicode.org,https://github.com/psi4/psi4/issues/853,1,['failure'],['failure']
Availability,Build failure (version 1.1): cannot initialize return object of type ...,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/852:6,failure,failure,6,https://psicode.org,https://github.com/psi4/psi4/issues/852,1,['failure'],['failure']
Availability,"Build the shared library with `make psi4so`, and it builds just fine but then segfaults when you try to set options. @bennybp, Boost/fpic notwithstanding, I know you've got a shared library of psi4 in working order. Could you send me or post the `src/bin/psi4/CMakeLists.txt` and any changes to the `MAKE_PYTHON_MODULE` sections? I didn't see that you had a fork of psi4 with changes. ``` python; Python 2.7.10 |Anaconda 2.1.0 (x86_64)| (default, May 28 2015, 17:04:42) ; [GCC 4.2.1 (Apple Inc. build 5577)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Anaconda is brought to you by Continuum Analytics.; Please check out: http://continuum.io/thanks and https://binstar.org; >>> import sys; >>> sys.path.insert(1, '/Users/loriab/linux/psihub/publicface/psi4/objdir/bin'); >>> import psi4; >>> psi4.set_global_option('BASIS', 'CC_PVDZ'). Error: option BASIS is not contained in the list of available options.; Assertion failed: (px != 0), function operator->, file /Users/loriab/linux/psihub/publicface/psi4/objdir/boost/include/boost/smart_ptr/shared_ptr.hpp, line 648.; Abort trap: 6; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/251:875,Error,Error,875,https://psicode.org,https://github.com/psi4/psi4/issues/251,2,"['Error', 'avail']","['Error', 'available']"
Availability,"But adcc hasn't even been downloaded yet, so it may be a pre-adcc problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598805685:26,down,downloaded,26,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598805685,1,['down'],['downloaded']
Availability,But the energy is still going down all the time!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708:30,down,down,30,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708,1,['down'],['down']
Availability,"But yeah thanks @zachglick for pointing out the root cause. Indeed, if you specify `ints_tolerance` by hand, it works as it should. Having the default gradient threshold be 0 is just confusing, since it gets changed when you manually specify the tolerance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1540#issuecomment-464870518:246,toler,tolerance,246,https://psicode.org,https://github.com/psi4/psi4/issues/1540#issuecomment-464870518,1,['toler'],['tolerance']
Availability,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911897:156,error,error,156,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897,2,['error'],['error']
Availability,"But.. those parameters are available also in the presently used version of libxc. Just query cam_omega, cam_alpha and cam_beta from libxc, these will give you all the range separation parameters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916#issuecomment-365273795:27,avail,available,27,https://psicode.org,https://github.com/psi4/psi4/pull/916#issuecomment-365273795,1,['avail'],['available']
Availability,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:384,error,error,384,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,2,['error'],['error']
Availability,"By headers you mean DMRG, that problem is fixed. That was my own fault. Everything is ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225905942:65,fault,fault,65,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225905942,1,['fault'],['fault']
Availability,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231269168:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168,1,['error'],['error']
Availability,CASSCF failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693:7,failure,failure,7,https://psicode.org,https://github.com/psi4/psi4/issues/1693,1,['failure'],['failure']
Availability,"CC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:10185,Error,Error,10185,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,4,"['Error', 'error']","['Error', 'error']"
Availability,"CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:. ```; molecule f { ; f 0.00 0.00 0.00; }; set basis cc-pVTZ; set scf reference uhf ; energy('ccsd'); ```. (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. Full backtrace from gdb:. ```; (gdb) where; #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:62,fault,faults,62,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,"['avail', 'fault']","['avail', 'fault', 'faults']"
Availability,CCSD(T) Fatal Error: Matrix::gemm error: Number of rows and columns do not match,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:14,Error,Error,14,https://psicode.org,https://github.com/psi4/psi4/issues/2916,2,"['Error', 'error']","['Error', 'error']"
Availability,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:3,error,error,3,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406,3,"['Error', 'error']","['Error', 'error']"
Availability,CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342:3,failure,failure,3,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342,2,"['error', 'failure']","['error', 'failure']"
Availability,"CI failures are caused by Einsums v0.5. Once v0.6 goes up @jturney , hopefully, the CI checks pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2182761619:3,failure,failures,3,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2182761619,1,['failure'],['failures']
Availability,CI runtime error in conda package,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/764,1,['error'],['error']
Availability,CIWave: Fixes strange ICC 2015 compiler error with certain vectorization options,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/316:40,error,error,40,https://psicode.org,https://github.com/psi4/psi4/pull/316,1,['error'],['error']
Availability,"CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:2068,error,error,2068,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['error'],['error']
Availability,CMake Error Overhaul,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/82:6,Error,Error,6,https://psicode.org,https://github.com/psi4/psi4/issues/82,1,['Error'],['Error']
Availability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:301,down,down,301,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,1,['down'],['down']
Availability,"CMake is still back magic too me, but i just tried again from scratch and actually the error occurs when making psi4-core. The Simint library is installed before and cmake finds it in the correct path. ```; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/gshell.cc.o; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/integral.cc.o; In file included from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_avx.h:7:0,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/vectorization.h:11,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/ostei/ostei_config.h:3,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/simint.h:4,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/siminteri.h:34,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/integral.cc:55:; /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_sse.h:7:35: fatal error: simint/cpp_restrict.hpp: No such file or directory; #include ""simint/cpp_restrict.hpp""; ^; compilation terminated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356928723:87,error,error,87,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356928723,2,['error'],['error']
Availability,"CON(char,int,double *,double *,double *,double *,int *,double,double *,double *,int *)"" (?C_DGTCON@psi@@YAHDHPEAN000PEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtrfs，该符号在函数 ""int __cdecl psi::C_DGTRFS(char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGTRFS@psi@@YAHDHHPEAN000000PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsv，该符号在函数 ""int __cdecl psi::C_DGTSV(int,int,double *,double *,double *,double *,int)"" (?C_DGTSV@psi@@YAHHHPEAN000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgtsvx，该符号在函数 ""int __cdecl psi::C_DGTSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:27243,error,error,27243,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,COSX Grid Issues with 146 Spherical Grid Points + ROBUST Grid Pruning Scheme,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:50,ROBUST,ROBUST,50,https://psicode.org,https://github.com/psi4/psi4/issues/2890,1,['ROBUST'],['ROBUST']
Availability,Calcium Basis Set Error?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1271:18,Error,Error,18,https://psicode.org,https://github.com/psi4/psi4/issues/1271,1,['Error'],['Error']
Availability,Can I see the errors from RHEL7 conda? I can't reproduce this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/120#issuecomment-123386691:14,error,errors,14,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-123386691,2,['error'],['errors']
Availability,"Can confirm it, but had to fiddle with the input to see the error because coordinates were returning all 0s (integer rounding). This input work on my machine:; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; }. set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1.*(float(ir)/100.); mol.R2 = 2.*(float(ir)/100.); mol.R3 = 3.*(float(ir)/100.); ci_e=energy('fci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759#issuecomment-313824229:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313824229,1,['error'],['error']
Availability,Can we see download counts for Debian/Fedora package managers?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451177986:11,down,download,11,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451177986,1,['down'],['download']
Availability,Can you give me an example of TDDFT using finite difference gradients? I have the vague memory that I got an error the last time I tried that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106#issuecomment-1856865567:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/3106#issuecomment-1856865567,1,['error'],['error']
Availability,Can you provide a before-and-after example of what error messages look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371:51,error,error,51,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371,1,['error'],['error']
Availability,"Can you try downloading the basis set from BSE, maybe psi4 doesn't come with the RI-fit for He (I don't remember). I'm seeing it available here: https://www.basissetexchange.org/basis/aug-cc-pv6z-rifit/format/psi4/?version=1&elements=2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869:12,down,downloading,12,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869,2,"['avail', 'down']","['available', 'downloading']"
Availability,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215889548:312,failure,failure,312,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548,1,['failure'],['failure']
Availability,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/714:640,avail,available,640,https://psicode.org,https://github.com/psi4/psi4/issues/714,1,['avail'],['available']
Availability,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2196:62,error,error-wavefunction-unable-to-obtain-mo-coefficients,62,https://psicode.org,https://github.com/psi4/psi4/issues/2196,2,['error'],"['error', 'error-wavefunction-unable-to-obtain-mo-coefficients']"
Availability,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/12). Even with SOSCF, I'm not able to converge MgF at 3 Angstroms. Several of the iterations display non-monotonic decrease of the residual, sometimes increasing after PCG iterations. This is surprising but I don't think mathematically inpossible, if the MO Hessian isn't positive semi-definite, in which case, CG methods fail. If that was all, we should look into alternate SOSCF methods. But even when convergence is monotonic, one sees an energy improvement on the order of 1e-4 hartrees, and negligible drop in the residual. What's going wrong here? I have a memory that the SOSCF step isn't being taken correctly (by exponentiation), so that's worth looking into. Probably a weekend project for me...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204:62,error,error-wavefunction-unable-to-obtain-mo-coefficients,62,https://psicode.org,https://github.com/psi4/psi4/issues/2204,1,['error'],['error-wavefunction-unable-to-obtain-mo-coefficients']
Availability,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:1011,error,error,1011,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['error'],['error']
Availability,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:542,error,error,542,https://psicode.org,https://github.com/psi4/psi4/issues/1924,1,['error'],['error']
Availability,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1931:397,error,error,397,https://psicode.org,https://github.com/psi4/psi4/issues/1931,3,"['error', 'failure']","['error', 'failure']"
Availability,"Carrying forward from [the forums](http://forum.psicode.org/t/problem-when-passing-a-reference-wavefunction-to-df-ccsd-in-the-fnocc-module/1346). . The following input file leads to a PSIO error:; ```; molecule {; O; H 1 r; H 1 r 2 a. r=0.958; a=104.5. symmetry c1; }. set scf_type df; set cc_type df; set df_ints_io save; eng, wfn = psi4.energy('hf/cc-pvdz', return_wfn=True); cc_eng = psi4.energy('ccsd/cc-pvdz', ref_wfn=wfn); ```. The following workaround input file runs fine:; ```; molecule {; O; H 1; H 1 r 2 a; r=0.958; a=104.5; symmetry c1; }. set basis cc-pvdz; set scf_type df; set cc_type df; set df_ints_io save; eng, wfn = psi4.energy(‘hf’, return_wfn=True); cc_eng = psi4.energy(‘ccsd’, ref_wfn=wfn); ```. Still, it would be good to figure out what is differing between these two cases.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604:189,error,error,189,https://psicode.org,https://github.com/psi4/psi4/issues/1604,1,['error'],['error']
Availability,Catch Basis Set Errors in Parse Step,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332:16,Error,Errors,16,https://psicode.org,https://github.com/psi4/psi4/issues/1332,1,['Error'],['Errors']
Availability,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291237788:494,error,error,494,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788,2,['error'],['error']
Availability,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144751892:291,error,error,291,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892,3,"['Error', 'error']","['Error', 'error']"
Availability,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:694,avail,available,694,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,1,['avail'],['available']
Availability,"CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1575,Error,Error,1575,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,3,['Error'],['Error']
Availability,"Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:2361,Error,Error,2361,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['Error'],['Error']
Availability,"Clean up #includes, macros, unnecessary array init, error exits, and other miscellaneous things in libmoinfo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3112:52,error,error,52,https://psicode.org,https://github.com/psi4/psi4/pull/3112,1,['error'],['error']
Availability,Closing this down for now. @wadejong Please open a new PR if you want a specific implementation to get around this issue such as introducing noise to the SCF guess.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-533548739:13,down,down,13,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-533548739,1,['down'],['down']
Availability,"Closing this down, this seems more of an initial guess issue than an error in default SEM algorithm and one that I don't think we can fix in a wholistic manner.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1281#issuecomment-533549591:13,down,down,13,https://psicode.org,https://github.com/psi4/psi4/issues/1281#issuecomment-533549591,2,"['down', 'error']","['down', 'error']"
Availability,"Closing this out, if someone has an input where this fails please post a new issue with the reproducible error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/54#issuecomment-276722757:105,error,error,105,https://psicode.org,https://github.com/psi4/psi4/issues/54#issuecomment-276722757,1,['error'],['error']
Availability,"Closing. Upon rerunning the input file, I get the much saner behavior of Psi simply exiting. While one _could_ intercept the error with a manual try-except, use of `fail_on_maxiter` is the expected behavior and does not have this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560,2,['error'],['error']
Availability,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:150,redundant,redundant,150,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,1,['redundant'],['redundant']
Availability,"Commit e6916b7b14ee873e1218de36bab6fb60e99abf3d gives a compilation error. The PsiAPI directory is missing:. ```; CMake Error at CMakeLists.txt:286 (add_subdirectory):; add_subdirectory given source ""PsiAPI"" which is not an existing directory.; ```. This should be an easy fix.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/205:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/issues/205,2,"['Error', 'error']","['Error', 'error']"
Availability,"Commits prior to PR 65c0921213e6fe2979733f6c316915f79051f558 seem to have broken some tests that I suspect are not checked by our CI system:; ```; 	255 - ocepa-freq1 (Failed); 	259 - ocepa2 (Failed); 	260 - ocepa3 (Failed); 	273 - omp3-2 (Failed); 	278 - omp3-grad2 (Failed); 	320 - pywrap-checkrun-rhf (Failed); 	321 - pywrap-checkrun-rohf (Failed); 	322 - pywrap-checkrun-uhf (Failed); ```. The following are known to fail due to poor convergence of the occ module; ```; 	260 - ocepa3 (Failed); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input fil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:554,error,error,554,https://psicode.org,https://github.com/psi4/psi4/issues/1793,1,['error'],['error']
Availability,Compilation error (libfrag),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/206:12,error,error,12,https://psicode.org,https://github.com/psi4/psi4/issues/206,1,['error'],['error']
Availability,Compilation error (missing PsiAPI),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/205:12,error,error,12,https://psicode.org,https://github.com/psi4/psi4/issues/205,1,['error'],['error']
Availability,Compilation error with icc 18.0.1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:12,error,error,12,https://psicode.org,https://github.com/psi4/psi4/issues/923,1,['error'],['error']
Availability,Compilation failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404:12,failure,failure,12,https://psicode.org,https://github.com/psi4/psi4/issues/404,1,['failure'],['failure']
Availability,Compilation failure with GCC 8,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013:12,failure,failure,12,https://psicode.org,https://github.com/psi4/psi4/issues/1013,1,['failure'],['failure']
Availability,Compile error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/issues/536,1,['error'],['error']
Availability,Compiler error PK_workers.cc file with the Intel 14 compiler,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/398:9,error,error,9,https://psicode.org,https://github.com/psi4/psi4/issues/398,1,['error'],['error']
Availability,Compiling Psi4 I got this error:; .; .; .; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/nao.cc.o; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/am2canon_shell_order.cc.o; [ 60%] Linking CXX static library ../../../lib/libchkpt.a; [ 60%] Built target chkpt; Scanning dependencies of target cubeprop; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/csg.cc.o; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/cubeprop.cc.o; [ 60%] Linking CXX static library ../../../lib/libcubeprop.a; [ 60%] Built target cubeprop; Scanning dependencies of target git_update; fatal: Not a git repository (or any of the parent directories): .git; make[2]: **\* [src/lib/libpsipcm/CMakeFiles/git_update] Error 128; make[1]: **\* [src/lib/libpsipcm/CMakeFiles/git_update.dir/all] Error 2; make: **\* [all] Error 2. ---. The git and cmake version from macports is 2.5.3 and 3.3.3 respectively. I used the setup command:; ./setup --plugins --fc gfortran-mp-4.8 --accelerate objdir. I was wondering if you can provide me some input to solve the problem. Thank you.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183:26,error,error,26,https://psicode.org,https://github.com/psi4/psi4/issues/183,4,"['Error', 'error']","['Error', 'error']"
Availability,Compiling error: lib/libmints/matrix.cc (icpc 16.0.3),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/issues/444,1,['error'],['error']
Availability,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:203,down,down,203,https://psicode.org,https://github.com/psi4/psi4/issues/923,6,"['Error', 'down', 'error']","['Error', 'down', 'error']"
Availability,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:1461,avail,available,1461,https://psicode.org,https://github.com/psi4/psi4/issues/867,3,"['avail', 'error']","['available', 'error']"
Availability,"Confirmed to also be broken on `1.2a1.dev508` which is pre-DFHelper and pre-gau2grid. Psi's `molinstance.Z(atomindex)` returns nuclear charge (so `0.0` for ghosts), not atomic number (as one might think from the function name), so I can see room for programming error there. But I'm not seeing anywhere that CAM is singled out from other functional, so I share your confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360582523:262,error,error,262,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360582523,1,['error'],['error']
Availability,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2335:518,error,error,518,https://psicode.org,https://github.com/psi4/psi4/issues/2335,1,['error'],['error']
Availability,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2457:680,failure,failure,680,https://psicode.org,https://github.com/psi4/psi4/issues/2457,1,['failure'],['failure']
Availability,"Consider the following input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set scf_type pk; set basis 6-31+G(d); set r_convergence 12. energy, wfn = energy('hf', return_wfn = True); NBOWriter(wfn).write('input.47'); ```. This is the NBO test case, except I have replaced the basis set with a Pople basis. When I run the produced input file through NBO, the result I get does not match QChem. The fault is with Psi. Just look at the unphysical energy gap in the d NAOs:; ```; 15 O 1 dxy Ryd( 3d) 0.00000 0.22545; 16 O 1 dxz Ryd( 3d) 0.00196 0.22862; 17 O 1 dyz Ryd( 3d) 0.00518 0.52493; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. For comparison, QChem gives; ```; 15 O 1 dxy Ryd( 3d) 0.00000 2.02907; 16 O 1 dxz Ryd( 3d) 0.00518 2.71710; 17 O 1 dyz Ryd( 3d) 0.00196 2.05762; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. I suspect the error has to do with Pople basis sets being defined in cartesians and not spherical. This is the only reason I can think of for agreement with QChem being basis-set dependent, and it also agrees nicely with the fact that ""Input basis functions are not normalized; fixed"" appears in the Psi-NBO output file. While I'll likely end up fixing this, this is very low on my priority list. If anybody else wants to take this, feel free. Just post here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1698:407,fault,fault,407,https://psicode.org,https://github.com/psi4/psi4/issues/1698,2,"['error', 'fault']","['error', 'fault']"
Availability,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2219:803,ping,ping,803,https://psicode.org,https://github.com/psi4/psi4/issues/2219,1,['ping'],['ping']
Availability,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343:43,error,errors,43,https://psicode.org,https://github.com/psi4/psi4/issues/2343,1,['error'],['errors']
Availability,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295384269:87,Ping,Ping,87,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269,2,"['Ping', 'down']","['Ping', 'down']"
Availability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:44,ping,pinging,44,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,2,['ping'],['pinging']
Availability,"Cool, this should give us a base to start playing around with automatic rigid body optimizations. . Also note you can do `git pull --rebase upstream master` to rebase in the master branch of upstream. This will help cut down on the number of merges that happen. You can always fall back to merging if needed of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230565713:220,down,down,220,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230565713,1,['down'],['down']
Availability,Correct copy-paste error message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811:19,error,error,19,https://psicode.org,https://github.com/psi4/psi4/pull/1811,1,['error'],['error']
Availability,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:73,reliab,reliable,73,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['reliab'],['reliable']
Availability,Could you copy-paste the error you get from the `-jN` build? It might be the same problem I hit on some nightly builds on stallo and that I have never been able to reproduce.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173199216:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173199216,1,['error'],['error']
Availability,"Could you ping me when you have a PR that makes `cc53` run on Windows? It will probably close #1376 as well, and I'd like to check myself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-446192665:10,ping,ping,10,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-446192665,1,['ping'],['ping']
Availability,Could you post the whole test output please?. And do you have the `dftd3` binary available at run time?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928:81,avail,available,81,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928,1,['avail'],['available']
Availability,"Could you try running:. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I see this error quite a bit, but it is usually because I forget to use an scf_type that writes the integrals to disk. I am not really confident that this would work, but it is worth a shot. . The other thing you could do is. ```; scf_energy, scf_wfn = energy('scf', return_wfn=True); mints(scf_wfn); energy('dmrg-ci', ref_wfn=scf_wfn); ```. I may have the syntax wrong for the above calls. The main thing you need to do is make sure the integrals are actually written to disk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244579713:135,error,error,135,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244579713,1,['error'],['error']
Availability,"Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. The other option might be to use `pkg-config` and check the `Libs.private` (I guess):. ```; grep ^Libs /usr/lib/x86_64-linux-gnu/pkgconfig/lapack-openblas.pc; Libs: -L${libdir} -llapack; Libs.private: -L${libdir} -llapack -lgfortran -lpthread -lm; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865:76,down,down,76,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865,1,['down'],['down']
Availability,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:1378,error,error,1378,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,1,['error'],['error']
Availability,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416:227,echo,echo,227,https://psicode.org,https://github.com/psi4/psi4/issues/2416,4,['echo'],['echo']
Availability,"Currently the OCC/DFOCC page of the docs makes no mention of frozen core.; DFOCC seems to default to all-electron, but _does_ seem to run with `set freeze_core true`.; OCC throws a RuntimeError, and claims that ""Frozen core/virtual not implemented in Orbital-optimized methods"". I can see two issues here:. 1. The error message from OCC suggests that none of the orbital-optimized methods in Psi4 support FC. This is either wrong and misleading (if DFOCC really does support FC) or DFOCC should also throw the same error.; 2. Regardless of the answer to 1, [the relevant doc page](http://www.psicode.org/psi4manual/master/occ.html) ought to have a few words about FC support or the lack thereof.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863:314,error,error,314,https://psicode.org,https://github.com/psi4/psi4/issues/1863,2,['error'],['error']
Availability,"Currently the `Molecule.xyz()` method does not check the length of the array that it is getting. ```; >>> import psi4; >>> mol = psi4.geometry(""He 0 0 0\nHe 0 0 5""); >>> mol.xyz(3); [1] 26521 segmentation fault python; ```. This should be capped and provide a nice error message to the user. This should be a straightforward fix, the relevant file is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1675:205,fault,fault,205,https://psicode.org,https://github.com/psi4/psi4/issues/1675,2,"['error', 'fault']","['error', 'fault']"
Availability,"Currently, I have been looking at featurizing frontier orbitals and electron densities in their 3d coordinate space for downstream processing in the context of small molecule binding. There was a function to do this in pyscf that was fairly straightforward, but I didn't find an in memory solution in psi4. The cube files work great, but I was just curious if there was a solution that could be done in memory, due to the io costs at scale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3057#issuecomment-1769298953:120,down,downstream,120,https://psicode.org,https://github.com/psi4/psi4/issues/3057#issuecomment-1769298953,1,['down'],['downstream']
Availability,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:133,error,error,133,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['error'],['error']
Availability,"D/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c11 -DNDEBUG' '-DCUSTOM_CXX_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c++11 -DNDEBUG'; ```; which already includes the C++11 standard, but the build system seems to append this with -std=gnu++11 which is probably the reason why the build is broken. It's funny though, that the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:1403,error,error,1403,https://psicode.org,https://github.com/psi4/psi4/issues/631,1,['error'],['error']
Availability,"D@psi@@YAHDDHHPEANH000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsgesv，该符号在函数 ""int __cdecl psi::C_DSGESV(int,int,double *,int,int *,double *,int,double *,int,double *,int *)"" (?C_DSGESV@psi@@YAHHHPEANHPEAH0H0H01@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspcon，该符号在函数 ""int __cdecl psi::C_DSPCON(char,int,double *,int *,double,double *,double *,int *)"" (?C_DSPCON@psi@@YAHDHPEANPEAHN001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspev，该符号在函数 ""int __cdecl psi::C_DSPEV(char,char,int,double *,double *,double *,int,double *)"" (?C_DSPEV@psi@@YAHDDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函数 ""int __cdecl psi::C_DSPGVD(int,char,char,int,double *,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPGVD@psi@@YAHHDDHPEAN000H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvx，该符号在函数 ""int __cdecl psi::C_DSPGVX(int,char,char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPGVX@psi@@YAHHDDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:40938,error,error,40938,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1482:1287,Error,Error,1287,https://psicode.org,https://github.com/psi4/psi4/issues/1482,5,"['Error', 'error']","['Error', 'error']"
Availability,DCT: Faulty Advice from Output File... Any Good Replacements?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:5,Fault,Faulty,5,https://psicode.org,https://github.com/psi4/psi4/issues/1354,1,['Fault'],['Faulty']
Availability,"DDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:2419,failure,failures,2419,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['failure'],['failures']
Availability,"DDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:32462,error,error,32462,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"DE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed through to the makefile(s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4496,Error,Error,4496,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['Error'],['Error']
Availability,DF-MP2.5 failure for large inputs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:9,failure,failure,9,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['failure'],['failure']
Availability,DF-MP2: Put energies in variables_ so that they are available in Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/pull/643,1,['avail'],['available']
Availability,DFT: Fix VV10 timer error and quickens test,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/889:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/889,1,['error'],['error']
Availability,"DGELQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgels，该符号在函数 ""int __cdecl psi::C_DGELS(char,int,int,int,double *,int,double *,int,double *,int)"" (?C_DGELS@psi@@YAHDHHHPEANH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsd，该符号在函数 ""int __cdecl psi::C_DGELSD(int,int,int,double *,int,double *,int,double *,double,int *,double *,int,int *)"" (?C_DGELSD@psi@@YAHHHHPEANH0H0NPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelss，该符号在函数 ""int __cdecl psi::C_DGELSS(int,int,int,double *,int,double *,int,double *,double,int *,double *,int)"" (?C_DGELSS@psi@@YAHHHHPEANH0H0NPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelsy，该符号在函数 ""int __cdecl psi::C_DGELSX(int,int,int,double *,int,double *,int,int *,double,int *,double *)"" (?C_DGELSX@psi@@YAHHHHPEANH0HPEAHN10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqlf，该符号在函数 ""int __cdecl psi::C_DGEQLF(int,int,double *,int,double *,double *,int)"" (?C_DGEQLF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqp3，该符号在函数 ""int __cdecl psi::C_DGEQP3(int,int,double *,int,int *,double *,double *,int)"" (?C_DGEQP3@psi@@YAHHHPEANHPEAH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeqrf，该符号在函数 ""int __cdecl psi::C_DGEQRF(int,int,double *,int,double *,double *,int)"" (?C_DGEQRF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerfs，该符号在函数 ""int __cdecl psi::C_DGERFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DGERFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgerqf，该符号在函数 ""int __cdecl psi::C_DGERQF(int,int,double *,int,double *,double *,int)"" (?C_DGERQF@psi@@YAHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:20729,error,error,20729,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"DPPRFS(char,int,int,double *,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPPRFS@psi@@YAHDHHPEAN00H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsv，该符号在函数 ""int __cdecl psi::C_DPPSV(char,int,int,double *,double *,int)"" (?C_DPPSV@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dppsvx，该符号在函数 ""int __cdecl psi::C_DPPSVX(char,char,int,int,double *,double *,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPPSVX@psi@@YAHDDHHPEAN0D00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrf，该符号在函数 ""int __cdecl psi::C_DPPTRF(char,int,double *)"" (?C_DPPTRF@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptri，该符号在函数 ""int __cdecl psi::C_DPPTRI(char,int,double *)"" (?C_DPPTRI@psi@@YAHDHPEAN@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpptrs，该符号在函数 ""int __cdecl psi::C_DPPTRS(char,int,int,double *,double *,int)"" (?C_DPPTRS@psi@@YAHDHHPEAN0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptcon，该符号在函数 ""int __cdecl psi::C_DPTCON(int,double *,double *,double,double *,double *)"" (?C_DPTCON@psi@@YAHHPEAN0N00@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpteqr，该符号在函数 ""int __cdecl psi::C_DPTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DPTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptrfs，该符号在函数 ""int __cdecl psi::C_DPTRFS(int,int,double *,double *,double *,double *,double *,int,double *,int,double *,double *,double *)"" (?C_DPTRFS@psi@@YAHHHPEAN0000H0H000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsv，该符号在函数 ""int __cdecl psi::C_DPTSV(int,int,double *,double *,double *,int)"" (?C_DPTSV@psi@@YAHHHPEAN00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dptsvx，该符号在函数 ""int __cdecl psi::C_DPTSVX(char,int,int,double *,double *,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:36643,error,error,36643,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Dear Alfred,. Yeah, the problem is, as the code says, ""Fatal Error: There are no occupied; orbitals with beta spin."" In our program, you can't run an MP2 calculation; on an atom or molecule that doesn't have any beta spin electrons. More; generally, an MP2 calculation doesn't make any sense for systems with only; one electron. Your method is a ""double hybrid"" that includes MP2 as a part; of it. Also, it's impossible to ""optimize"" (like you are trying to do) the; geometry of an atom. It has no internal degrees of freedom to optimize. These computational chemistry programs require a little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenste",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:61,Error,Error,61,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['Error'],['Error']
Availability,"Dear All,. 1) For analytic gradients, one may follow NCG or SCG formalisms, as explained in the DF-CCSD(T) paper [J. Chem. Phys., 147, 044104. DOI: 10.1063/1.4994918]. The NCG formalism is numerically more stable. As far as I remember, all grad codes in Psi4 rely on the NCG formalism. 2) The cost of NCG and SCG are the same for CCSD. But in the case of CCSD(T), SCG has a lower cost (by 25%). 3) For all methods in DFOCC, I use NCG, while for DF-CCSD(T) I replaced the earlier NCG code with the SCG code because of significant cost reduction. . 4) In SCG, frozen cores and virtuals are already included because of the structure of the formalism, while one should additionally consider frozen core/virtual terms for NCG. . 5) As far as I remember, in the beginning, I discussed it with David, and he told me that frozen cores are enough for us since we generally do not use frozen virtual. Of course, he is right. Hence, I have only implement NCG for MP2...CCSD. 6) Normally DFOCC has both formalisms now, but only one of them is activated in the module for any method. It was my TODO list for a while, to activate both SCG and NCG for all methods. But it should be performed very carefully, hence; I keep it waiting for an available time. . 7) I will try to include it in the next major revision of DFOCC. Presently, we are working on UHF based grads for CC methods. Once, we complete the UHF grads, then I can activate frozen virtuals via SCG. But, it may take a while (:. @jgonthier @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342:1225,avail,available,1225,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342,1,['avail'],['available']
Availability,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:481,error,error,481,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253,1,['error'],['error']
Availability,"Dear Developers, . I compiled successfully psi4-0.5 but obtain an error when running psi4 :. ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {detached?} 8e01b1f . J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Thu Feb 18 17:21:00 2016. Process ID: 63254; PSI4DATADIR: /home/LUCA/psi-master/psi4public/lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! Sample UHF/6-31G*\* CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). ---. Memory set to 250.000 MiB by Python script. An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(boost::shared_ptrpsi::Wavefunction, _object_, _object_): File ""<string>"", line 29, in <module>. File ""/home/LUCA/psi-master/psi4public/lib/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/home/LUCA/psi-master/psi4public/lib/python/proc.py"", line 932, in run_scf; scf_helper(name, **kwargs). File ""/home/LUCA/psi-master/psi4public/lib/python/proc.py"", line 1138, in scf_helper; e_scf = psi4.scf(precallback, postcallback). Best wishes; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266:66,error,error,66,https://psicode.org,https://github.com/psi4/psi4/issues/266,2,['error'],['error']
Availability,"Dear Developers,. I would like to perform counterpoise-corrected DBOC computations at the CCSD level, using psi4-1.9.1. For this purpose, I wrote the following input:. ```; molecule dimer {; 0 1; N 1.608094757 -0.561155368 0.000000000; N 2.389700473 0.210989439 0.000000000; --; 0 1; N -2.389700473 -0.210989439 0.000000000; N -1.608094757 0.561155368 0.000000000; }. set globals {; cfour_dboc on; basis cc-pvdz; d_convergence 11; }. e_cp = energy('c4-ccsd',bsse_type='cp', return_total_data=True); ```. When I tried to run this input, I received a segmentation fault, without any further information. If I replace `c4-ccsd` with `c4-hf`, then there occurs another segmentation fault, which is more verbose than the previous one:. `QcdbException: Psi4/Cfour gradients with ghost atoms no longer supported. Use QCEngine or QCDB where they are.`. There is a simple warning, as well, which I am not sure what to do with:. `Using qcdb.align.B787instead ofqcelemental.molutil.B787 is deprecated, and as soon as 1.5 it will stop working`. Could you please help me how to modify this input for a successful execution?. Thank you in advance for your help. Best regards,. Roland",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:562,fault,fault,562,https://psicode.org,https://github.com/psi4/psi4/issues/3217,2,['fault'],['fault']
Availability,"Dear Jonathon,; Many thanks for your support. No additional errors have occurred, but the previous one that was mentioned to. If you can let me know about the result of your running job, it would be so appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640057899:60,error,errors,60,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640057899,1,['error'],['errors']
Availability,"Dear PSI4 developers,; the current state of the master branch (last included commit: 97761b111b68c56e3763ad7b471ec603da90ed25) of psi4 fails to build at the linking step. The last lines of the output of `make` are; ```/usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_X",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:786,error,error,786,https://psicode.org,https://github.com/psi4/psi4/issues/2572,2,"['Error', 'error']","['Error', 'error']"
Availability,"Dear Pis4 developers. I've got in issue when link psi4 binary:. ```; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tempnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; builtin_converters.cpp:(.text+0x1286): undefined reference to `PyUnicodeUCS4_AsWideChar'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; builtin_converters.cpp:(.text+0x455): undefined reference to `PyUnicodeUCS4_FromEncodedObject'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Ошибка 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; make: *** [all] Ошибка 2; ```. I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x. Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; http://packages.ubuntu.com/trusty/libboost-all-dev. My python interpreter support UCS-4. python -c ""import sys; print(sys.maxunicode)""; returns 1114111. python3 -c ""import sys; print(sys.maxunicode)""; returns 1114111. Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; in particular, I only need to generate MOLDEN file from SCF calculations. With respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94:1067,error,error,1067,https://psicode.org,https://github.com/psi4/psi4/issues/94,2,"['avail', 'error']","['available', 'error']"
Availability,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:275,error,error,275,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['error'],['error']
Availability,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2542:134,fault,fault,134,https://psicode.org,https://github.com/psi4/psi4/issues/2542,8,"['error', 'fault']","['error', 'errors', 'fault']"
Availability,"Dear Sir, ; I am trying to find out higher roots(i.e excited states) and then finding transition dipole moment from ground state to these excited states. My Job automatically dies after some time (two and half our). I am not getting any error. . output file; -----------------------------------------------------------------------; PSI4: An Open-Source Ab Initio Electronic Structure Package; PSI 4.0.0-beta5 Driver. ```; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Process ID: 11169; PSI4DATADIR: /usr/local/psi4/share/psi. Using LocalCommunicator (Number of processes = 1). Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # Finding of 30 higher roots(i.e excited states) and then finding transition dipole moment from ground state to these excited states; # for Graphyne using basis cc-pvdz. psi4_io.set_default_path('./'). memory 5000 mb. molecule Graphyne {; 0 1; C 1.396 0.000 0.000; C 0.698 1.209 0.000; C -0.698 1.209 0.000; C -1.396 0.000 0.000; C -0.698 -1.209 0.000; C 0.698 -1.209 0.000; H 1.240 2.147 0.000; H -1.240 2.147 0.000; H -2.479 0.000 0.000; H -1.240 -2.147 0.000; H 1.240 -2.147 0.000; C 2.798 0.000 0.000; C 4.020 0.000 0.000; C 5.422 0.000 0.000; C 8.214 0.000 0.000; C 7.516 1.209 0.000; C 6.120 1.209 0.000; C 6.120 -1.209 0.000; C 7.516 -1.209 0.000; H 8.058 2.147 0.000; H 5.578 2.147 0.000; H 9.297 0.000 0.000; H 5.578 -2.147 0.000; H 8.058 -2.147 0.000. symmetry c1; units angstrom; }. set globals {; reference rhf; basis cc-pvdz ; freeze_core true; scf_type out_of_core; dipmom true",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:237,error,error,237,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['error'],['error']
Availability,"Dear Vladimir,. For OCC module ""molden_write true"" option is not active. Hence for the conventional OO methods it is not available. But, for DFOCC module it should be. Hence, for DF/CD-OO methods you should be use the ""molden_write true"" option. Best ragrds,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152699235:121,avail,available,121,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152699235,1,['avail'],['available']
Availability,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186#issuecomment-152699151:242,avail,available,242,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151,1,['avail'],['available']
Availability,"Dear all, . I added a new plugin into PSI4 (the newest psi-master code from github) (dmrgscf plugin), but ; when running psi4 on the input.dat file, i obtain the following error :; ## symbol lookup error: /home/luca/psi-master/psi4public/plugins/mypsi4plugins/dmrgscf/dmrgscf.so: undefined symbol: _ZN7CheMPS26Irreps12getGroupNameEi; ## my input file is :. molecule O2 {; O 0.0 0.0 0.0; O 0.0 0.0 3.0 ; units au; }. plugin_load(""/home/luca/psi-master/psi4public/plugins/mypsi4plugins/dmrgscf/dmrgscf.so""). set basis cc-pVDZ; set reference rhf. set dmrgscf wfn_irrep 0; set dmrgscf wfn_multp 1; set dmrgscf frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrgscf active [ 2 , 0 , 2 , 2 , 0 , 2 , 2 , 2 ]. set dmrgscf dmrg_states [ 500, 1000, 1000 ]; set dmrgscf dmrg_econv [ 1e-10, 1e-10, 1e-10 ]; set dmrgscf dmrg_maxsweeps [ 5, 5, 10 ]; set dmrgscf dmrg_noiseprefactors [ 0.05, 0.05, 0.0 ]; set dmrgscf dmrg_print_corr false; set dmrgscf mps_chkpt false. set dmrgscf dmrgscf_convergence 1e-6; set dmrgscf dmrgscf_store_unit true; set dmrgscf dmrgscf_do_diis true; set dmrgscf dmrgscf_diis_branch 1e-2; set dmrgscf dmrgscf_store_diis true. set dmrgscf dmrgscf_max_iter 100; set dmrgscf dmrgscf_which_root 2 # First excited state; set dmrgscf dmrgscf_state_avg true; set dmrgscf dmrgscf_active_space NO # INPUT; NO; LOC; set dmrgscf dmrgscf_loc_random false. scf(). plugin(""dmrgscf.so""). ---. Best wishes; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/96:172,error,error,172,https://psicode.org,https://github.com/psi4/psi4/issues/96,2,['error'],['error']
Availability,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785:146,error,error,146,https://psicode.org,https://github.com/psi4/psi4/issues/785,9,"['Error', 'error']","['Error', 'error']"
Availability,"Dear all, . I try to compile PSI4 from github with intel 2017 compiler; CXX=icpc CC=icc cmake .. , however i get some errors.; Please see the attached file.; [psi4_error.txt](https://github.com/psi4/psi4/files/601557/psi4_error.txt). LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522:118,error,errors,118,https://psicode.org,https://github.com/psi4/psi4/issues/522,1,['error'],['errors']
Availability,"Dear all, . when using eom-ccsd module, i get the following error : . -----------------------------------------------------------------------------------------------; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=8 Out-of-core algorithm not yet coded for NN or TT DGEMM.; Error in: contract444; -----------------------------------------------------------------------------------------------. however, when i increase the number of frozen virtual orbitals, the error disappears !. here the input for which i get the error : . molecule pentamer { ; O -2.611 -0.00565 0.45789 ; O -1.30452 2.25724 -0.45568 ; O -2.611 4.51335 0.45789 ; O 1.30257 2.25385 0.45789 ; O -1.301 2.2647 -3.22291 ; H -2.63261 -0.00107 1.44733 ; H -2.63261 4.51793 1.44733 ; H 1.28096 2.25843 1.44733 ; H -1.31578 2.28044 -2.23347 ; H -1.7735 3.07887 -3.52876 ; H 0.36131 2.25462 0.1513 ; H -3.55226 -0.00488 0.1513 ; H -3.55226 4.51412 0.1513 ; H -1.78841 3.05064 -0.11356 ; H -1.78963 1.46139 -0.12277; units ang; SYMMETRY C1; }. set basis aug-cc-pvdz ; set scf_type df; set guess sad; set reference rhf; set e_convergence 1e-05; set d_convergence 1e-05; set ints_tolerance 1e-08. set FROZEN_DOCC [10]; set frozen_uocc [15]. #set freeze_core true; set roots_per_irrep [8]; set maxiter 100000; property('eom-ccsd', properties=['oscillator_strength'])",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/523,4,"['Error', 'error']","['Error', 'error']"
Availability,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/issues/936,1,['error'],['error']
Availability,"Dear all,. I am trying to compile psi4 on a supercomputer, which i don't have a root access to. It is based on Xeons and has the following software avaliable: . gcc/5.2.0, pgi/12.9. intel/13.1.0, intel/15.0.090. mkl/4.0.2.146, mkl/11.2.0. impi/4.0.3, impi/4.1.0-32bit, impi/4.1.0, impi/4.1.0-ofa, impi/5.0.1, impi/5.0.1-ofa. openmpi/1.5.5-gcc, openmpi/1.5.5-icc, openmpi/1.8.4-gcc, openmpi/1.8.4-icc, openmpi/1.6.5-gcc, openmpi/1.6.5-icc. I choosed impi/5.0.1 and mkl/11.2.0.; I have tried to use both intel compiler versions to compile ""master"" and ""0.3 release from 5 Aug 2015"" versions. All times I have failed. With the intel/15.0.090 compilers it even fails on the ./setup script as follows:. CMake Error: Unable to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Debug/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Development/cmTC_e39a7. And with the intel/13.1.0 compilers ./setup runs successfully. To avoid crushes I have changed -std=g++98 to -std=c++11 in the CMAKE_CXX_FLAGS:STRING in the CMakeCache.txt and followed the post http://forum.psicode.org/t/undefined-git-version/61/3 in case of ""0.3 release"". Thus in case of both versions of psi4 using the intel/13.1.0 compilers I have ended with:. ..........; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_efp.cc.o; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_cubeprop.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/clean.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/create_new_plugin.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/script.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/set_memory.cc.o; [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:704,Error,Error,704,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['Error'],['Error']
Availability,"Dear all,. I just made a clone of the psi4public. However, I got the error message ""Cannot find source file sapt_dft.cc"" when trying to compile psi4 (in a directory ""psi4public/build"") by either ""../configure.cmake"" or ""cmake .."". Is it a bug in psi4? Thank you. Cheers; Gao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/55,1,['error'],['error']
Availability,"Dear all,. ```; I tried to install the latest PSI4 on my PC, whose operating system is Fedora 14. I have passed the steps ""./configure --with-opt=-O2"" and ""make"" successfully according to PSI4's manual. However, I met a trouble in ""make tests"". One of the error report is pasted below:; ```. ---. echo ""Testing omp2_5-grad1...""; Testing omp2_5-grad1...; make -C omp2_5-grad1; true; make[2]: Entering directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'; PSIO_ERROR: unit = 32, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); Traceback (most recent call last):; File ""<string>"", line 38, in <module>; File ""/usr/local/src/psi4/lib/python/driver.py"", line 671, in gradient; procedures['gradient'][lowername](lowername, **kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 459, in run_omp2_5_gradient; run_omp2_5(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 440, in run_omp2_5; scf_helper(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 757, in scf_helper; e_scf = psi4.scf(precallback, postcallback); RuntimeError: PSIO Error; file: /usr/local/src/psi4/src/lib/libpsio/error.cc; line: 116P; make[2]: **\* [omp2_5-grad1.passed] Error 1; ## make[2]: Leaving directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'. There are also many other error report which are similar to this. I am wondering what cause these errors and how can I fix them. Can you help me to install PSI4 successfully? . Looking forward to any comments and suggestions! Many thanks!. Best Regards; Xin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56:256,error,error,256,https://psicode.org,https://github.com/psi4/psi4/issues/56,7,"['Error', 'echo', 'error']","['Error', 'echo', 'error', 'errors']"
Availability,"Dear colleagues,. first, please let me again send your whole team a big, big, „Thank you!“ for making this excellent software available to the whole scientific community without barriers like money etc. Then, it seems I hit a bug:. I ran PSI4 (see attached input and output files for details) on a Linux cluster and reproduced the problem in detail on my MacBook. Non-relativistic:. CCSD/def2-SVP OK; CCSD/Jorge-DZP-DKH OK; DF-CCSD/def2-SVP			OK; CD-CCSD/def2-SVP			OK; CD-CCSD/Jorge-DZP-DKH		OK. FNO-CCSD/def2-SVP OK; FNO-CCSD/Jorge-DZP-DKH OK; DF-FNO-CCSD/def2-SVP		OK; CD-FNO-CCSD/def2-SVP		OK; CD-FNO-CCSD/Jorge-DZP-DKH	OK. Relativistic: set relativistic dkh. CCSD/def2-SVP				OK; CCSD/Jorge-DZP-DKH			OK; DF-CCSD/def2-SVP			crashed; CD-CCSD/def2-SVP			crashed; CD-CCSD/Jorge-DZP-DKH		crashed. FNO-CCSD/def2-SVP			OK; FNO-CCSD/Jorge-DZP-DKH 		OK; DF-FNO-CCSD/def2-SVP		crashed; CD-FNO-CCSD/def2-SVP		crashed; CD-FNO-CCSD/Jorge-DZP-DKH	crashed. Hope, you find this helpful. With best regards. Ludger Palm; ludger.palm@gmx.de. Jorge-DZP-DKH from https://www.basissetexchange.org. [jorge-dzp-dkh.gbs.txt](https://github.com/psi4/psi4/files/4133158/jorge-dzp-dkh.gbs.txt). [h2.in.txt](https://github.com/psi4/psi4/files/4133171/h2.in.txt); [h2.out.txt](https://github.com/psi4/psi4/files/4133175/h2.out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791:126,avail,available,126,https://psicode.org,https://github.com/psi4/psi4/issues/1791,1,['avail'],['available']
Availability,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/744:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/issues/744,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"Dear devs,. I've been running some dihedral-constrained optimizations on capped dipeptides, and a small percentage of them fail. Examples are attached. In the first example, the optimizer takes a huge step and ends up in a crazy geometry. I worked around it by setting `intrafrag_step_limit 0.1`. Unfortunately I lost the .intco file, but the output file shows that two dihedrals have been constrained. https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.xyz. In the second example, the energy oscillates with periodicity 3. . https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.xyz; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.THR.intco. I'll try to work around this by using `step_type nr`, but thought it was worth reporting nonetheless. Thanks,; - Lee-Ping Wang (Postdoc, Stanford)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:1070,Ping,Ping,1070,https://psicode.org,https://github.com/psi4/psi4/issues/18,1,['Ping'],['Ping']
Availability,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-132368809:727,error,error,727,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809,1,['error'],['error']
Availability,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:31,avail,available,31,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700,1,['avail'],['available']
Availability,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:558,down,down,558,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,4,"['avail', 'down']","['available', 'down']"
Availability,"Did you compile the code with a Fortran compiler? One is required for using DKH. > On Jul 25, 2015, at 6:07 PM, Hassenky notifications@github.com wrote:; > ; > Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:; > ; > molecule {; > Mg; > }; > set basis aug-cc-pvdz-dk; > set relativistic dkh; > energy('scf'); > ; > I got this error output:; > Traceback (most recent call last):; > File """", line 20, in ; > RuntimeError: DKH is not a valid choice; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124907212:371,error,error,371,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124907212,1,['error'],['error']
Availability,"Different error, same module, so I'll add to this issue. Building simint afresh through psi4 on Mac w/`AppleClang 7.0.0.7000176` yields . ```; [ 0%] Building C object simint/CMakeFiles/simint.dir/ostei/gen/ostei_s_s_s_s.c.o; In file included from /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/ostei/gen/ostei_s_s_s_s.c:1:; In file included from /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/boys/boys.h:3:; In file included from /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/vectorization.h:11:; /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/intrinsics_avx.h:110:26: warning: ; implicit declaration of function '_mm256_set_m128d' is invalid in C99 [-Wimplicit-function-declaration]; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^; /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/intrinsics_avx.h:110:21: error: ; initializing '__m256d' (vector of 4 'double' values) with an expression of incompatible type 'int'; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external/simint/vectorization/intrinsics_avx.h:165:21: error: ; initializing '__m256d' (vector of 4 'double' values) with an expression of incompatible type 'int'; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 1 warning and 2 errors",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356726977:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356726977,1,['error'],['error']
Availability,Dipole polarizabilities error when linear dependencies are removed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1998:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/issues/1998,1,['error'],['error']
Availability,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504:400,error,errors,400,https://psicode.org,https://github.com/psi4/psi4/issues/1504,1,['error'],['errors']
Availability,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332:169,error,error,169,https://psicode.org,https://github.com/psi4/psi4/issues/1332,4,['error'],"['error', 'errors']"
Availability,Do we allow non-integer indexing for zmat? I hadn't thought so. Same error if `I 8 3.6 9 90.0 1 90.0`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434793976:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434793976,1,['error'],['error']
Availability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:20,down,down,20,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,1,['down'],['down']
Availability,Documentation fails to build with perl 5.22 and reports the following error:. Can't use 'defined(%hash)' (Maybe you should just omit the defined()?); at /build/psi4-0.3/doc/sphinxman/document_options_c.pl line 150.; doc/sphinxman/CMakeFiles/sphinxman.dir/build.make:106: recipe for; target 'doc/sphinxman/source/autodoc_abbr_options_c.rst' failed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/200:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/200,1,['error'],['error']
Availability,Documentation maintenance for 1.4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2109:14,mainten,maintenance,14,https://psicode.org,https://github.com/psi4/psi4/issues/2109,1,['mainten'],['maintenance']
Availability,Documentation: Obtaining Maintenance,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2125:25,Mainten,Maintenance,25,https://psicode.org,https://github.com/psi4/psi4/issues/2125,1,['Mainten'],['Maintenance']
Availability,Does adding https://github.com/psi4/psi4/blob/master/external/downstream/v2rdm_casscf/CMakeLists.txt#L33 to external/downstream/gpu_dfcc help?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400472093:62,down,downstream,62,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400472093,2,['down'],['downstream']
Availability,"Does the overall energy look sensible when you've got the additional diffuse functions? . I occasionally find that def2-TZVPD converges to some odd state with strange properties (energy, dipole etc). I'd put it down to some form of numerical difficulties as I could usually use a mixed basis of def2-TZVP on some atoms and def2-TZVPD on others and get logical values (identity of which atoms to change was system dependent, but often H is the main culprit).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698:211,down,down,211,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698,1,['down'],['down']
Availability,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215879353:41,failure,failure,41,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353,1,['failure'],['failure']
Availability,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:598,error,error,598,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,1,['error'],['error']
Availability,"Don't be alarmed if this fails tests. I'm still working out the correct sequence of `core.clean()` and `set_specific_retention` so nothing breaks. I'm currently tracking down a bug with the `full_hess_every` keyword set to something not zero, which slipped through test coverage. If it wasn't introduced by this PR, I'll post more details about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-430832599:170,down,down,170,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-430832599,1,['down'],['down']
Availability,Don't worry about the Docs fail. I think intersphinx for scipy & numpy is down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3078#issuecomment-1814856120:74,down,down,74,https://psicode.org,https://github.com/psi4/psi4/pull/3078#issuecomment-1814856120,1,['down'],['down']
Availability,Don't worry about the Eco/Linux error -- it's https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087#issuecomment-1831252908:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1831252908,1,['error'],['error']
Availability,"Done with that bullet, but I think also the other two. I dumped a tarball of the sirius trac website on psicode.org as trac@sirius.chem.vt.edu.tgz. In addition, I pulled the docs from the old 4.0b2, 4.0b3, 4.0b4, and 4.0b5 dockers from sirius and moved them into place in html/psi4manual on psicode.org. Please take a look and see that you're in agreement with all this. I may then shut down trac on sirius.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121379741:387,down,down,387,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121379741,1,['down'],['down']
Availability,Downgrade numpy to 1.16.2 may work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487276503:0,Down,Downgrade,0,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487276503,1,['Down'],['Downgrade']
Availability,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1309:365,error,errors,365,https://psicode.org,https://github.com/psi4/psi4/issues/1309,1,['error'],['errors']
Availability,"EAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgexc，该符号在函数 ""int __cdecl psi::C_DTGEXC(int,double *,int,double *,int,double *,int,double *,int,int *,int *,double *,int)"" (?C_DTGEXC@psi@@YAHHPEANH0H0H0HPEAH10H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsen，该符号在函数 ""int __cdecl psi::C_DTGSEN(int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,double *,double *,double *,double *,int,int *,int)"" (?C_DTGSEN@psi@@YAHHHPEANH0H0000H0HPEAH0000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsja，该符号在函数 ""int __cdecl psi::C_DTGSJA(char,char,char,int,int,int,int,int,double *,int,double *,int,double,double,double *,double *,double *,int,double *,int,double *,int,double *,int *)"" (?C_DTGSJA@psi@@YAHDDDHHHHHPEANH0HNN000H0H0H0PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsna，该符号在函数 ""int __cdecl psi::C_DTGSNA(char,char,int,double *,int,double *,int,double *,int,double *,int,double *,double *,int,int *,double *,int,int *)"" (?C_DTGSNA@psi@@YAHDDHPEANH0H0H0H00HPEAH0H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtgsyl，该符号在函数 ""int __cdecl psi::C_DTGSYL(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int,int *)"" (?C_DTGSYL@psi@@YAHDHHHPEANH0H0H0H0H0H000HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtpcon，该符号在函数 ""int __cdecl psi::C_DTPCON(char,char,char,int,double *,double *,double *,int *)"" (?C_DTPCON@psi@@YAHDDDHPEAN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtprfs，该符号在函数 ""int __cdecl psi::C_DTPRFS(char,char,char,int,int,double *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DTPRFS@psi@@YAHDDDHHPEAN0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dtptri，该符号在函数 ""int __cdecl psi::C_DTPTRI(char,char,int,double *)"" (?C_DTPTRI@psi@@YAHDDHPEAN@Z) 中被引",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:50898,error,error,50898,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"EANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DPBTRS(char,int,int,int,double *,int,double *,int)"" (?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:33347,error,error,33347,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"EANH1HNN@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dscal，该符号在函数 ""void __cdecl psi::C_DSCAL(unsigned __int64,double,double *,int)"" (?C_DSCAL@psi@@YAX_KNPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddot，该符号在函数 ""double __cdecl psi::C_DDOT(unsigned __int64,double *,int,double *,int)"" (?C_DDOT@psi@@YAN_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dnrm2，该符号在函数 ""double __cdecl psi::C_DNRM2(unsigned __int64,double *,int)"" (?C_DNRM2@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dasum，该符号在函数 ""double __cdecl psi::C_DASUM(unsigned __int64,double *,int)"" (?C_DASUM@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 idamax，该符号在函数 ""unsigned __int64 __cdecl psi::C_IDAMAX(unsigned __int64,double *,int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dger，该符号在函数 ""void __cdecl psi::C_DGER(int,int,double,double *,int,double *,int,double *,int)"" (?C_DGER@psi@@YAXHHNPEANH0H0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dsbmv，该符号在函数 ""void __cdecl psi::C_DSBMV(char,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DSBMV@psi@@YAXDHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dspmv，该符号在函数 ""void __cd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:10702,error,error,10702,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,ECP Convergence Failures,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:16,Failure,Failures,16,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['Failure'],['Failures']
Availability,"EG ---; ---------------------------------------------------------------------------; Coordinate Previous Force Change New; ---------- -------- ------ ------ ------; 1 R(1,2) = 1.257186 -0.000456 0.000097 1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1073,ERROR,ERROR,1073,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508,1,['ERROR'],['ERROR']
Availability,EOM-CC3 Diagonalization Failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1931:24,Failure,Failure,24,https://psicode.org,https://github.com/psi4/psi4/issues/1931,1,['Failure'],['Failure']
Availability,EOM-CCSD error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523:9,error,error,9,https://psicode.org,https://github.com/psi4/psi4/issues/523,1,['error'],['error']
Availability,ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/744:0,ERROR,ERROR,0,https://psicode.org,https://github.com/psi4/psi4/issues/744,1,['ERROR'],['ERROR']
Availability,"Eco failure is, quite predictably, because it breaks `v2rdm`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607:4,failure,failure,4,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607,1,['failure'],['failure']
Availability,"Edit: from forum post: http://forum.psicode.org/t/error-for-sapt-dmp2-calculation/1691; running `psi4 -p myprefix <input_file>` for a delta_mp2 SAPT calculations results in:. ```; PSIO_ERROR: Can't find TOC Entry DFMP2 Jm12; PSIO_ERROR: unit = 97, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. uncommenting [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/change_namespace.cc#L69) , applied [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3918) reveals (at least); the 97 file (the Jm12 metric) still uses the default prefix (`psi`):. ```; /Users/kruse/scratch/PSI4/psi.44624.dimer.97; /Users/kruse/scratch/PSI4/psi.44624.monomerA.97; ```. ---; example input; ```; molecule water_dimer {; 0 1; O -0.003244 1.511274 0.000000; H 0.070125 0.540684 0.000000; H 0.900899 1.845934 0.000000; --; 0 1; O -0.003244 -1.375885 0.000000; H -0.459556 -1.734864 0.771839; H -0.459556 -1.734864 -0.771839. units angstrom; no_reorient; symmetry c1; }; set basis sto-3g; energy('sapt2+(3)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1874:50,error,error-for-sapt-,50,https://psicode.org,https://github.com/psi4/psi4/issues/1874,1,['error'],['error-for-sapt-']
Availability,"Eh, always a time for merging. Just trying to cut down on all the needless merging that goes on. This looks great, I think a reference implementation for now is fine. We won't hook anything up, but it would good to have in the code. I think UHF/DFT/DF- are on a long enough time frame to not worry about in this particular PR. Especially since we move from something thats broken to something that works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230564166:50,down,down,50,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230564166,1,['down'],['down']
Availability,"Either both of the below attempts to read a wfn in for an SCF gradient should be trapped by an error, or neither should. Right now, the first works fine, but the bottom segfaults. ```; h2o = psi4.geometry(""""""; O ; H 1 0.96; H 1 0.96 2 104.5; """"""); wfn=psi4.energy('scf/def2-svp', molecule=h2o, return_wfn=True)[1]; # No segfault with the un-serialized wfn.; psi4.gradient('scf/def2-svp', molecule=wfn.molecule(), ref_wfn=wfn). wfn.to_file('my_wfn'); wfn_new = psi4.core.Wavefunction.from_file('my_wfn'); # Segfault with the un-serialized wfn.; psi4.gradient('scf/def2-svp', molecule=wfn_new.molecule(), ref_wfn=wfn_new) # Segfault here.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2712:95,error,error,95,https://psicode.org,https://github.com/psi4/psi4/issues/2712,1,['error'],['error']
Availability,"Elsewhere, I've added builds of all the `--new-plugin plugname +template` templates, so we'll know if they ever break. . Here (https://github.com/psi4/psi4/pull/304/files#diff-960310e869df2437e6e4b4ad1fa11867R1799) is there any more specific error to catch, or is it one of those c-side psi-exceptions that can't be caught with specificity?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304#issuecomment-192756982:242,error,error,242,https://psicode.org,https://github.com/psi4/psi4/pull/304#issuecomment-192756982,1,['error'],['error']
Availability,"Err, that's confusing, the orbital file is already opened using the PSIO_OPEN_NEW flag, which should blow away the previous contents. The O_TRUNC flag is passed to ::open() inside PSIO::open, which is supposed to ""Delete any prior file content"". So, I don't get how we are getting an error about overwriting TOC entries in PSIO, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-32648789:284,error,error,284,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-32648789,1,['error'],['error']
Availability,Error Extraction Mangles Message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/1920,1,['Error'],['Error']
Availability,Error about pybind11 in cmake while creating a new psi4 plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/775,1,['Error'],['Error']
Availability,Error computing atomization energy of Al atom,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/2858,1,['Error'],['Error']
Availability,Error in normalization of h basis functions,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/1574,1,['Error'],['Error']
Availability,"Error is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/usr/lib64//python3.9/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64//python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64//python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""x_functionals"": {""GGA_X_PBE"": {}},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; core.set_global_option(""BASIS"", ""pcseg-2""); core.set_global_option(""BASIS_GUESS"", ""true""); --> energy('scf', dft_functional=my_pbe); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2199#issuecomment-867164975:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/2199#issuecomment-867164975,1,['Error'],['Error']
Availability,Error when compiling on a supercomputer; ld: cannot find -lboost_mpi-1_57,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['Error'],['Error']
Availability,Error when making libmints,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/188,1,['Error'],['Error']
Availability,Error when trying to use CP-corrected DBOC with Psi4/CFour,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/3217,1,['Error'],['Error']
Availability,Error with X2C and Decontracted Basis Set Input,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/662,1,['Error'],['Error']
Availability,Error with make -j on MacBook Air,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/396:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/396,1,['Error'],['Error']
Availability,Error: “Unable to find a basis set…” with CFOUR,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608:0,Error,Error,0,https://psicode.org,https://github.com/psi4/psi4/issues/2608,1,['Error'],['Error']
Availability,"Even using **guess huckel**, I am getting _Fatal Error: Monomer B: A Matrix is not SPD_ while calculatin SAPT(0) energy with UHF reference.; Using Psi4 1.3.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459:49,Error,Error,49,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459,1,['Error'],['Error']
Availability,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260369576:350,avail,available,350,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576,1,['avail'],['available']
Availability,"Every link I've tried on the [home page](https://psicode.org/psi4manual/master/index.html) gives me a ""Page Not Found"" error. Here's just one example: https://psicode.org/introduction. If I add /psi4manual/master between psicode.org and /introduction, I can get the correct page: https://psicode.org/psi4manual/master/introduction. I also tried the links in the releases page, and all of them also gave ""Page Not Found"" errors:; - https://psicode.org/psi4manual/1.8.1/; - https://psicode.org/psi4manual/1.7.0/; - https://psicode.org/psi4manual/1.6.1/; - https://psicode.org/psi4manual/1.6.0/. The links for 1.4 and 1.5 actually do work, so maybe everything before that does too.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3042:119,error,error,119,https://psicode.org,https://github.com/psi4/psi4/issues/3042,2,['error'],"['error', 'errors']"
Availability,"Everything passes on my Linux box too, with Intel 15.0.2. I'll try a fresh checkout and see if I can reproduce the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178220621:115,error,error,115,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178220621,1,['error'],['error']
Availability,Ew. Does someone have an example case of the failure?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197560102:45,failure,failure,45,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197560102,1,['failure'],['failure']
Availability,"Exactly why I started trying to track it down: it only occurs on some processors and it shouldn't! I'm just perusing libmints/molecule.cc. In Molecule::inertia_tensor(), inertia tensor elements less that ZERO (#defined as 1e-14) are set to 0.0 before diagonalisation, presumably for similar reasons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292641928:41,down,down,41,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292641928,1,['down'],['down']
Availability,"Example input below. Seems method and integral-type independent. Using `ref_wfn` with an existing wfn works. The issue thus seems caused by the writing or reading. I tested few other modules (fnocc, ccenergy, dfmp2) and those seem fine. (found through http://forum.psicode.org/t/post-scf-with-custom-matrices/1701). ```; molecule water6 {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; symmetry c1; }. memory 2 GiB; set {; ints_tolerance 1e-10; basis def2-SVP; }. set mp2_type df; set cc_type df; set qc_module occ; set scf_type df; e,wfn=energy('scf',return_wfn=True); wfn.to_file('my_wfn'); wfn_new = Wavefunction.from_file('my_wfn'); energy('mp2',ref_wfn=wfn_new); #energy('MP2',ref_wfn=wfn) # <-- works; ```. results in segmentation fault after printing the MO space.; For example for conventional MP2:; ```; IRREP FC OCC VIR FV; ==============================; A 0 5 19 0; ==============================. Memory is 2147 MB; Cost of iabc is 0 MB; Cost of abcd is 0 MB; Switching to the incore algorithm for iabc..; Switching to the incore algorithm for abcd.. /Users/kruse/bin/psi4dev: line 1: 80585 Segmentation fault: 11 /Users/kruse/qc/psi4.bin/bin/psi4 -s . $@; ```. as per wish, pinging @JonathonMisiewicz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851:790,fault,fault,790,https://psicode.org,https://github.com/psi4/psi4/issues/1851,3,"['fault', 'ping']","['fault', 'pinging']"
Availability,"Example:; ```; frame_metadata = {; 'system_name': '{C#N}_O'; }. molecule {; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; }. energy(""hf""); ```. The psithon interpreter turns this into ; ```; import psi4; from psi4 import *; from psi4.core import *; from psi4.driver.diatomic import anharmonicity; from psi4.driver.gaussian_n import *; from psi4.driver.aliases import *; from psi4.driver.driver_cbs import xtpl_highest_1, scf_xtpl_helgaker_2, scf_xtpl_helgaker_3, corl_xtpl_helgaker_2; from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN; from psi4.driver.wrapper_autofrag import auto_fragments; from psi4.driver.constants.physconst import *; psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""/state/partition1/tmp/""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""); frame_metadata = {; 'system_name': '{; }; core.efp_init(); geometry(""""""; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; """"""); core.IO.set_default_namespace(""""); energy(""hf""); ```. Which unsurprisingly gives a syntax error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655:1276,error,error,1276,https://psicode.org,https://github.com/psi4/psi4/issues/655,1,['error'],['error']
Availability,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:478,avail,available,478,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323,1,['avail'],['available']
Availability,"Excellent, an error!. Ok, that header is provided by `gcc_impl_linux-64` pkg and shows up for me at `/path/to/env/x86_64-conda_cos6-linux-gnu/sysroot/usr/include/sys/cdefs.h`. Same?. Note that if you hate this and just want to get on with life, drop the `--intel` from `psi4-path-advisor`, use the resulting `cmake -C/various/psi4DepsCache.cmake ... -H. -Bobjdir` command and tack on your own `-DCMAKE_CXX_COMPILER=icpc` etc. to configure against your system gcc 5.4, which will do just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370:14,error,error,14,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370,1,['error'],['error']
Availability,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:196,avail,available,196,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,4,"['avail', 'fault']","['available', 'fault']"
Availability,"Excellent. Psi being too low by a prefactor of 2 was the exact prefactor error that I expected. QChem's eigenvalues are the correct ones. This error in Psi has no computational effect in SOSCF because our gradient has the same prefactor error, no effect in instability analysis because of normalization, and no effect in standard SCF steps because diagonalization doesn't care about orbital gradients and hessians. Psi's instability analysis returns 0.02026 and -0.0142. The lower eigenvalue does not match QChem and does not change significantly in response to increasing convergence tightness or grid points. I expect to have a busy week, but I'll do some poking at why this is. If this seems to be a rabbit hole, I'll just drop LDA-UKS support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366,3,['error'],['error']
Availability,"Except for compiling docs, the `Inc. fock build` naming issue referenced earlier, and this following issue, this PR should be good to go:. Select pytests from `tests/pytests/test_standard_suite.py::test_mp2_hessian_module` are NOT passing. Why is this the case? Is this to be expected?. All CTests passed except sapt7 and scf-cholesky-basis. The latter is fixed when envvar `MKL_CBWR=AVX`.; All pytests passed EXCEPT most of the mp2 Hessian tests (70% failure rate).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946324182:452,failure,failure,452,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946324182,1,['failure'],['failure']
Availability,"Excerpt of a density-fitted calculation; ```; ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 19.539 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 4; Memory [MiB]: 20008; Algorithm: Disk; Schwarz Cutoff: 1E-12; Mask sparsity (%): 35.4523; Fitting Condition: 1E-10; ```; That is, there's two bugs here: the code is not using in-core AOs, and the printout doesn't match what the code is actually doing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666:322,Mask,Mask,322,https://psicode.org,https://github.com/psi4/psi4/issues/1666,1,['Mask'],['Mask']
Availability,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2136:443,Error,Error,443,https://psicode.org,https://github.com/psi4/psi4/issues/2136,3,['Error'],['Error']
Availability,"F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 daxpy，该符号在函数 ""void __cdecl psi::C_DAXPY(unsigned __int64,double,double *,int,double *,int)"" (?C_DAXPY@psi@@YAX_KNPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dcopy，该符号在函数 ""void __cdecl psi::C_DCOPY(unsigned __int64,double *,int,double *,int)"" (?C_DCOPY@psi@@YAX_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 drot，该符号在函数 ""void __cdecl psi::C_DROT(unsigned __int64,double *,int,double *,int,double,double)"" (?C_DROT@psi@@YAX_KPEANH1HNN@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dscal，该符号在函数 ""void __cdecl psi::C_DSCAL(unsigned __int64,double,double *,int)"" (?C_DSCAL@psi@@YAX_KNPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 ddot，该符号在函数 ""double __cdecl psi::C_DDOT(unsigned __int64,double *,int,double *,int)"" (?C_DDOT@psi@@YAN_KPEANH1H@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dnrm2，该符号在函数 ""double __cdecl psi::C_DNRM2(unsigned __int64,double *,int)"" (?C_DNRM2@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dasum，该符号在函数 ""double __cdecl psi::C_DASUM(unsigned __int64,double *,int)"" (?C_DASUM@psi@@YAN_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 idamax，该符号在函数 ""unsigned __int64 __cdecl psi::C_IDAMAX(unsigned __int64,double *,int)"" (?C_IDAMAX@psi@@YA_K_KPEANH@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgbmv，该符号在函数 ""void __cdecl psi::C_DGBMV(char,int,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGBMV@psi@@YAXDHHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemm，该符号在函数 ""void __cdecl psi::C_DGEMM(char,char,int,int,int,double,double *,int,double *,int,double,double *,int)"" (?C_DGEMM@psi@@YAXDDHHHNPEANH0HN0H@Z) 中被引用; F:\qt.lib(blas_intfc23.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv，该符号在函数 ""void __cdecl psi::C_DGEMV(char,int,int,double,double *,int,double *,int,double,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:10191,error,error,10191,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/pr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:5442,FAILURE,FAILURES,5442,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['FAILURE'],['FAILURES']
Availability,"FF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1920,Error,Error,1920,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Error'],['Error']
Availability,"FF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; fil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1802,Error,Error,1802,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Error'],['Error']
Availability,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4218,avail,available,4218,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['avail'],['available']
Availability,"FWIW, I actually was stumped by the syntax error for a couple minutes, because you can't see the generated Python code anymore. The syntax error says ""error line line 21"" (or similar), but I had no idea what was on line 21.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911061:43,error,error,43,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911061,3,['error'],['error']
Availability,"Fails on methyl chloride, succeeds on diatomic chlorine.; Did not test larger alkyl groups.; CH3Cl was pre-optimized at HF/6-31G(d). ; Attempted RHF single point energy failed to converge with these basis sets:. > 6-311g(3df); > 6-311g(3df,p); > 6-311g(3df,2p); > 6-311g(3df,2pd); > 6-311g(3df,3pd); > aug-cc-pV(D+d)Z; > aug-cc-pV(Q+d)Z; > aug-cc-pV(T+d)Z; > g3mp2large. They all have at least 3df polarization, some more. Not all heavily polarized 6-311G(*) basis sets contain both C, Cl so these basis sets are only 5 of the 51 6-311?G(etc) sets. Doubtless, the other 10 sets with diffuse functions (e.g., 6-311++G(3df)) will fail but take longer at it. Though large, the 7152 Mb memory allocation requirement did not exhaust available shared memory. G3(MP2) method requires the g3mp2large basis set and the Wilson Group's cc-CA methods require the aug-cc-pV([DQT]+d)Z basis sets. Minimal test case attached.; [CH3Cl-3df-fail.zip](https://github.com/psi4/psi4/files/214171/CH3Cl-3df-fail.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340:728,avail,available,728,https://psicode.org,https://github.com/psi4/psi4/issues/340,1,['avail'],['available']
Availability,Failure on compiling plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:0,Failure,Failure,0,https://psicode.org,https://github.com/psi4/psi4/issues/565,1,['Failure'],['Failure']
Availability,"Failures are my fault, and the fix is in-PR. Just to be clear, Psi4 doesn't use pylibxc -- only the compiled library API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140:0,Failure,Failures,0,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140,3,"['Failure', 'fault']","['Failures', 'fault']"
Availability,"Fantastic news! I think we can probably kill this branch and concentrate on getting the latest and greatest in instead. We're doing a massive rewrite of the integrals right now, so best to wait until that's merged before working on the ECPs I think - we don't want to have any merge problems. When we have the new integrals code in (very soon, hopefully), I'll ping you and try to coordinate the ECP rewrite. Thanks for the very positive update :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196:361,ping,ping,361,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196,1,['ping'],['ping']
Availability,Fatal Error in core.so,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984:6,Error,Error,6,https://psicode.org,https://github.com/psi4/psi4/issues/1984,1,['Error'],['Error']
Availability,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182588993:765,error,error,765,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993,2,['error'],['error']
Availability,"File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array has the wrong dimensions; Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/libscf_solver/hf.cc on line: 146; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; F 1 {}; symmetry c2v; """""".format(R)). --> energy('casscf'). ecp[R] = [get_variable('ci root 0 total energy'),; get_variable('ci root 1 total energy'),; get_variable('ci root 2 total energy')]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Input DOCC array has the wrong dimensions !; ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_16838157 !; ! 05191/work/psi4/src/psi4/libscf_solver/hf.cc on line: 146 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:2909,Error,Error,2909,https://psicode.org,https://github.com/psi4/psi4/issues/3181,2,['Error'],['Error']
Availability,File Not Found Error for scratch json_out file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/944:15,Error,Error,15,https://psicode.org,https://github.com/psi4/psi4/issues/944,1,['Error'],['Error']
Availability,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:192,Error,Error,192,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277,1,['Error'],['Error']
Availability,FindPythonModule is a home cooked file under cmake/ . I can investigate in a couple hours or you can see if there's any difference btwn it and master. That error looks like it might just need a cmake policy set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668338629:156,error,error,156,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668338629,1,['error'],['error']
Availability,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2265:69,error,error-radical-anion,69,https://psicode.org,https://github.com/psi4/psi4/issues/2265,5,"['Error', 'error']","['Error', 'Errors', 'error-radical-anion']"
Availability,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,1,['error'],['error']
Availability,Fix GEMM errors in presence of linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:9,error,errors,9,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['error'],['errors']
Availability,Fix PCM test failure in psi4 --test,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/701:13,failure,failure,13,https://psicode.org,https://github.com/psi4/psi4/pull/701,1,['failure'],['failure']
Availability,Fix a filesystem error in psi.driver.cbs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/1442,1,['error'],['error']
Availability,Fix a memory error in psi::MOInfo::read_mo_spaces,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1427:13,error,error,13,https://psicode.org,https://github.com/psi4/psi4/pull/1427,2,['error'],['error']
Availability,Fix buffer overflow error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3215:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/3215,1,['error'],['error']
Availability,Fix compilation error for C++20,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3061:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/pull/3061,1,['error'],['error']
Availability,Fix error in MBE VMFC Hessian,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389:4,error,error,4,https://psicode.org,https://github.com/psi4/psi4/pull/2389,1,['error'],['error']
Availability,Fix error in libtrans,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2857:4,error,error,4,https://psicode.org,https://github.com/psi4/psi4/pull/2857,1,['error'],['error']
Availability,"Fix for issue #231 . When I made the linear bend code more robust recently, I tightened up enforcement of nonsense torsions. In #231, the crash appears to be bad luck mostly, as a dozen iterations into the back-transformation on geometry step 3, we just happen to hit a bogus bend. Turns out this only happened after the iterative procedure started diverging anyway, so I am adding just a test that gives up faster.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/233:59,robust,robust,59,https://psicode.org,https://github.com/psi4/psi4/pull/233,1,['robust'],['robust']
Availability,Fix inconsistencies in formatted checkpoint files,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475:33,checkpoint,checkpoint,33,https://psicode.org,https://github.com/psi4/psi4/pull/1475,1,['checkpoint'],['checkpoint']
Availability,Fix libxc download location,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1688:10,down,download,10,https://psicode.org,https://github.com/psi4/psi4/pull/1688,1,['down'],['download']
Availability,Fix memory error in MOInfoBase::convert_int_array_to_vector,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/1480,1,['error'],['error']
Availability,Fix memory error in psi::IntegralTransform::process_spaces,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/1488,1,['error'],['error']
Availability,Fix memory error in psi::MultipolePropCalc::compute_mo_extents,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1440:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/1440,1,['error'],['error']
Availability,Fix memory error in psi::ccresponse::roa,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/1476,1,['error'],['error']
Availability,Fix memory error in psi::detci::CIWavefunction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1250:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/1250,1,['error'],['error']
Availability,Fix some memory errors,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1248:16,error,errors,16,https://psicode.org,https://github.com/psi4/psi4/pull/1248,1,['error'],['errors']
Availability,Fix type conversion error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2245:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/2245,1,['error'],['error']
Availability,Fix vector index error in psi::PKMgrDisk::batch_sizing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/1237,1,['error'],['error']
Availability,Fix vector indexing error in psi::IntegralTransform::process_spaces,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/1220,1,['error'],['error']
Availability,Fixed the error in E(30)ind (1677),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/pull/1803,1,['error'],['error']
Availability,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1214:1159,error,error,1159,https://psicode.org,https://github.com/psi4/psi4/pull/1214,2,['error'],['error']
Availability,"Fixes #1638 . ## Description; Corrects some small errors in the documentation of the molden writer, plus improved formatting. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1641:50,error,errors,50,https://psicode.org,https://github.com/psi4/psi4/pull/1641,1,['error'],['errors']
Availability,Fixes #2940. Closes #2921. @mnottoli Could you quickly give this a second pair of eyes to check what I'm doing [here when I'm lowering the tolerance](https://github.com/psi4/psi4/blob/6173fba2dc820bba05918f3dfa599550704de4f5/tests/pytests/test_ddx.py#L112) is reasonable --- I'm thinking this is the escaped charge problem for this small system. Maybe we should just remove the test alltogether?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2952:139,toler,tolerance,139,https://psicode.org,https://github.com/psi4/psi4/pull/2952,1,['toler'],['tolerance']
Availability,"Fixes a bug reported by @hokru, where PSIO errors would result for large DFMP2 gradient computations. I forgot to rename a PSIO entry during #1923. . This bug wasn't any more serious because it would only trigger when a block-based algorithm requested multiple blocks. For DFMP2, this would be a large computation indeed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2033:43,error,errors,43,https://psicode.org,https://github.com/psi4/psi4/pull/2033,1,['error'],['errors']
Availability,Fixes os.environ error in setup,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/329:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/329,1,['error'],['error']
Availability,"Following up on an issue from the conference call:; The fixed `phi_ao` functions are used to form the core Hamiltonian whenever an embedding potential is read from a file. While I haven't run anything, I would expect the bug fixed by this PR to cause correctness errors in SCF energies. Definitely agree with getting this fix in for 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877192480:263,error,errors,263,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877192480,1,['error'],['errors']
Availability,"Footnote [2] of the capabilities table in the manual is a little unclear about what methods are available:. RHF and UHF reference are available, however the latter one should be; requsted from DFOCC module. DF-MP2 is recommended as a faster; alternative. Update and revise manual. Check with Ugur about ROHF. Make appropriate defaults.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106:96,avail,available,96,https://psicode.org,https://github.com/psi4/psi4/issues/106,2,['avail'],['available']
Availability,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528:1242,error,error,1242,https://psicode.org,https://github.com/psi4/psi4/issues/528,1,['error'],['error']
Availability,"For `2mer+0-1` the difference is super small (< 0.01 kJ) and differences in density fitting could play a role.; Is ORCA run with RIJCOSX (default) or RIJK (equivalent to psi4's DF) ? ; To eliminate density fitting errors you could run both programs with conventional integrals. If still differences remain, check the values of the D3 and gCP corrections. They should match nearly perfectly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-937524349:214,error,errors,214,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937524349,1,['error'],['errors']
Availability,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1054:33,failure,failure,33,https://psicode.org,https://github.com/psi4/psi4/issues/1054,1,['failure'],['failure']
Availability,"For dunning basis sets Psi4 and MOLPRO should be using the same fitting basis set. For 99% of cases Psi will choose the ""correct"" fitting basis, especially for first row atoms and Dunning orbital bases. The differences are still a bit larger than I am comfortable with so id like to track this down. Can you post the MOLPRO output as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-226172089:294,down,down,294,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226172089,1,['down'],['down']
Availability,For example [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/PsiOutStream.cc#L46) it doesn't mention the file name and the system error that has occurred.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2799:155,error,error,155,https://psicode.org,https://github.com/psi4/psi4/issues/2799,1,['error'],['error']
Availability,"For fitting basis sets, SAPT mostly uses `DF_BASIS_SAPT`, which defaults to RI (http://psicode.org/psi4manual/master/sapt.html#df-basis-sapt). The Elst10 and Exch10 are governed by `DF_BASIS_ELST`, which defaults to `DF_BASIS_SAPT` (which defaults to RI). However, this can go awry for heavy elements, whereupon it is recommended to use JK for `DF_BASIS_ELST`. An important bit of the reasoning behind this is that for the small basis sets used for SAPT0, RI is smaller than JK (for cc-pVDZ, 28 to 46). If we're going to change the defaults so that everything works at its best without intervention, now is the time to do it.; - [ ] Run a A·T 0/jadz with SAPT/ELST RI/RI, RI/JK, JK/JK to see if there's significant time penalties; - [ ] If that's not significant, should ELST always be JK to suppress failure mode?; - [ ] Do we want consistent fitting basis used across all terms?; - [ ] If any changes made, update Note in docs about changes in Spring 2016. sapt2 is the most relevant test case",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317:801,failure,failure,801,https://psicode.org,https://github.com/psi4/psi4/issues/317,1,['failure'],['failure']
Availability,"For fun, I computed the SCF energy from these DUMP files and both sum to the same SCF energy. It looks more like a representation issue than an actual bug. Its probably worth running these through a downstream program and seeing the result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980#issuecomment-384474917:199,down,downstream,199,https://psicode.org,https://github.com/psi4/psi4/issues/980#issuecomment-384474917,1,['down'],['downstream']
Availability,"For future reference and for the robustness of https://github.com/psi4/psi4/pull/301, I'd like to know the answer to the standard orientation question in https://github.com/psi4/psi4/issues/298#issuecomment-191476636, if anyone in the know can supply it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191943783:33,robust,robustness,33,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191943783,1,['robust'],['robustness']
Availability,"For future reference, please ping Lori on build related issues, rather than me. That's the one part of Psi that I refuse to touch if I can help it. 🙂",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325542450:29,ping,ping,29,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325542450,1,['ping'],['ping']
Availability,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877:491,error,error,491,https://psicode.org,https://github.com/psi4/psi4/issues/1877,2,['error'],['error']
Availability,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182577836:425,error,error,425,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836,2,['error'],['error']
Availability,"For me the code in the last answer of Toon (aswell as earlier tries to recompile...) didn't work to solve this issue. All seems to go well until the last command (off course). The recompilation itself ended in several compiler errors. Like. '__END_NAMESPACE_C99' does not name a type; '__END_NAMESPACE_STD' does not name a type; 'div_t' does not name a type; ... I've exactly used the code from his answer a couple of tries and also tried to checkout some tags of psi4 (v1.2, v1.2.1, v1.3) for recompilation. I've included the output of the make to stdout as an attachment.; Thanks on beforehand. [PSI4_en_am8_via_miniconda_error.txt](https://github.com/psi4/psi4/files/2568355/PSI4_en_am8_via_miniconda_error.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437578863:227,error,errors,227,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437578863,1,['error'],['errors']
Availability,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:81,avail,available,81,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['avail'],['available']
Availability,For some unknown reason `psi4 --test` segment fault on Python 3.5.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-416175262:46,fault,fault,46,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-416175262,1,['fault'],['fault']
Availability,"For std::regex, I just found out that regex is not supported on gcc 4.8. You won't get any compile errors, but we get some runtime errors. All of this goes away if you use GCC 4.9 or GCC 5.2.0. . Just a heads up. Looking forward to these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235349863:99,error,errors,99,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235349863,2,['error'],['errors']
Availability,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263048284:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284,1,['error'],['error']
Availability,"For the `fnocc` modules, [`cepa(0)` means `lccsd`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L4655-L4660). I have only ever heard of `cepa(0)` meaning `lccd`. It is `lccd` in the `dct` module, it is `lccd` in the `occ` module, and it is `lccd` in the `dfocc` module. Can we make this consistent, or at least print a warning?. CEPA(0) is very important to my own research, and I had only ever heard of it as `lccd`. After doing some more digging, I've come across some sources that equate CEPA(0) and `lccsd`, but it seems to me to be a minority position. . Making this even more complicated, all requests for `cepa(0)` go to `fnocc`. `occ` and `dfocc` require `lccd`. `dct` also requires `cepa0`, but as a keyword rather than the energy name. Obligatory ping of @edeprince3 for `fnocc` issues and @loriab for defining methods consistently across modules and @jturney because this has been causing problems at CCQC.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872:785,ping,ping,785,https://psicode.org,https://github.com/psi4/psi4/issues/1872,1,['ping'],['ping']
