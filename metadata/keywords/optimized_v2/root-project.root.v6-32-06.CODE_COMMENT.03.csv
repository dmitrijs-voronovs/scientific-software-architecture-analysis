quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"// Transform sequences of insertelements ops with constant data/indexes into; // a single shuffle op.; // Can not handle scalable type, the number of elements needed to create; // shuffle mask is not a compile-time constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:188,mask,mask,188,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['mask'],['mask']
Availability,"// Transform the std::bit_ceil(X) pattern like:; //; // %dec = add i32 %x, -1; // %ctlz = tail call i32 @llvm.ctlz.i32(i32 %dec, i1 false); // %sub = sub i32 32, %ctlz; // %shl = shl i32 1, %sub; // %ugt = icmp ugt i32 %x, 1; // %sel = select i1 %ugt, i32 %shl, i32 1; //; // into:; //; // %dec = add i32 %x, -1; // %ctlz = tail call i32 @llvm.ctlz.i32(i32 %dec, i1 false); // %neg = sub i32 0, %ctlz; // %masked = and i32 %ctlz, 31; // %shl = shl i32 1, %sub; //; // Note that the select is optimized away while the shift count is masked with; // 31. We handle some variations of the input operand like std::bit_ceil(X +; // 1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:406,mask,masked,406,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,2,['mask'],['masked']
Availability,"// Transform: %cr7 = MTOCRF %r3; // Into: MTCRF mask, %r3 ;; cr7",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:48,mask,mask,48,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['mask'],['mask']
Availability,"// Transform: (load ch (add x (and (srl y c) Mask))); // to: (load ch (add x (shl (srl y d) d-c))); // where; // Mask = 00..0 111..1 0.0; // | | +-- d-c 0s, and d-c is 0, 1 or 2.; // | +-------- 1s; // +-------------- at most c 0s; // Motivating example:; // DAG combiner optimizes (add x (shl (srl y 5) 2)); // to (add x (and (srl y 3) 1FFFFFFC)); // which results in a constant-extended and(##...,lsr). This transformation; // undoes this simplification for cases where the shl can be folded into; // an addressing mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:45,Mask,Mask,45,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,4,['Mask'],['Mask']
Availability,// Transformation function: get the size of a mask; // Look for the first non-zero bit,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelDAGToDAG.cpp:46,mask,mask,46,interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Transitions the current record to the new record, records an error on; // invalid transitions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/BlockVerifier.h:64,error,error,64,interpreter/llvm-project/llvm/include/llvm/XRay/BlockVerifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/BlockVerifier.h,1,['error'],['error']
Availability,"// Translate a masked gather intrinsic like; // <16 x i32 > @llvm.masked.gather.v16i32( <16 x i32*> %Ptrs, i32 4,; // <16 x i1> %Mask, <16 x i32> %Src); // to a chain of basic blocks, with loading element one-by-one if; // the appropriate mask bit is set; //; // %Ptrs = getelementptr i32, i32* %base, <16 x i64> %ind; // %Mask0 = extractelement <16 x i1> %Mask, i32 0; // br i1 %Mask0, label %cond.load, label %else; //; // cond.load:; // %Ptr0 = extractelement <16 x i32*> %Ptrs, i32 0; // %Load0 = load i32, i32* %Ptr0, align 4; // %Res0 = insertelement <16 x i32> poison, i32 %Load0, i32 0; // br label %else; //; // else:; // %res.phi.else = phi <16 x i32>[%Res0, %cond.load], [poison, %0]; // %Mask1 = extractelement <16 x i1> %Mask, i32 1; // br i1 %Mask1, label %cond.load1, label %else2; //; // cond.load1:; // %Ptr1 = extractelement <16 x i32*> %Ptrs, i32 1; // %Load1 = load i32, i32* %Ptr1, align 4; // %Res1 = insertelement <16 x i32> %res.phi.else, i32 %Load1, i32 1; // br label %else2; // . . .; // %Result = select <16 x i1> %Mask, <16 x i32> %res.phi.select, <16 x i32> %Src; // ret <16 x i32> %Result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp:15,mask,masked,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,7,"['Mask', 'mask']","['Mask', 'mask', 'masked']"
Availability,"// Translate a masked load intrinsic like; // <16 x i32 > @llvm.masked.load( <16 x i32>* %addr, i32 align,; // <16 x i1> %mask, <16 x i32> %passthru); // to a chain of basic blocks, with loading element one-by-one if; // the appropriate mask bit is set; //; // %1 = bitcast i8* %addr to i32*; // %2 = extractelement <16 x i1> %mask, i32 0; // br i1 %2, label %cond.load, label %else; //; // cond.load: ; preds = %0; // %3 = getelementptr i32* %1, i32 0; // %4 = load i32* %3; // %5 = insertelement <16 x i32> %passthru, i32 %4, i32 0; // br label %else; //; // else: ; preds = %0, %cond.load; // %res.phi.else = phi <16 x i32> [ %5, %cond.load ], [ poison, %0 ]; // %6 = extractelement <16 x i1> %mask, i32 1; // br i1 %6, label %cond.load1, label %else2; //; // cond.load1: ; preds = %else; // %7 = getelementptr i32* %1, i32 1; // %8 = load i32* %7; // %9 = insertelement <16 x i32> %res.phi.else, i32 %8, i32 1; // br label %else2; //; // else2: ; preds = %else, %cond.load1; // %res.phi.else3 = phi <16 x i32> [ %9, %cond.load1 ], [ %res.phi.else, %else ]; // %10 = extractelement <16 x i1> %mask, i32 2; // br i1 %10, label %cond.load4, label %else5; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp:15,mask,masked,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,7,['mask'],"['mask', 'masked']"
Availability,"// Translate a masked scatter intrinsic, like; // void @llvm.masked.scatter.v16i32(<16 x i32> %Src, <16 x i32*>* %Ptrs, i32 4,; // <16 x i1> %Mask); // to a chain of basic blocks, that stores element one-by-one if; // the appropriate mask bit is set.; //; // %Ptrs = getelementptr i32, i32* %ptr, <16 x i64> %ind; // %Mask0 = extractelement <16 x i1> %Mask, i32 0; // br i1 %Mask0, label %cond.store, label %else; //; // cond.store:; // %Elt0 = extractelement <16 x i32> %Src, i32 0; // %Ptr0 = extractelement <16 x i32*> %Ptrs, i32 0; // store i32 %Elt0, i32* %Ptr0, align 4; // br label %else; //; // else:; // %Mask1 = extractelement <16 x i1> %Mask, i32 1; // br i1 %Mask1, label %cond.store1, label %else2; //; // cond.store1:; // %Elt1 = extractelement <16 x i32> %Src, i32 1; // %Ptr1 = extractelement <16 x i32*> %Ptrs, i32 1; // store i32 %Elt1, i32* %Ptr1, align 4; // br label %else2; // . . .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp:15,mask,masked,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,6,"['Mask', 'mask']","['Mask', 'mask', 'masked']"
Availability,"// Translate a masked store intrinsic, like; // void @llvm.masked.store(<16 x i32> %src, <16 x i32>* %addr, i32 align,; // <16 x i1> %mask); // to a chain of basic blocks, that stores element one-by-one if; // the appropriate mask bit is set; //; // %1 = bitcast i8* %addr to i32*; // %2 = extractelement <16 x i1> %mask, i32 0; // br i1 %2, label %cond.store, label %else; //; // cond.store: ; preds = %0; // %3 = extractelement <16 x i32> %val, i32 0; // %4 = getelementptr i32* %1, i32 0; // store i32 %3, i32* %4; // br label %else; //; // else: ; preds = %0, %cond.store; // %5 = extractelement <16 x i1> %mask, i32 1; // br i1 %5, label %cond.store1, label %else2; //; // cond.store1: ; preds = %else; // %6 = extractelement <16 x i32> %val, i32 1; // %7 = getelementptr i32* %1, i32 1; // store i32 %6, i32* %7; // br label %else2; // . . .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp:15,mask,masked,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,6,['mask'],"['mask', 'masked']"
Availability,// Translate available BinaryMetadataFeatures to corresponding clang-cc1; // flags. Does not depend on any other sanitizers. Unsupported on GPUs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:13,avail,available,13,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['avail'],['available']
Availability,// Translate available CoverageFeatures to corresponding clang-cc1 flags.; // Do it even if Sanitizers.empty() since some forms of coverage don't require; // sanitizers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:13,avail,available,13,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['avail'],['available']
Availability,// Translate from the diagnostic info to the SourceManager location if; // available.; // TODO: Unify this with ConvertBackendLocation(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:75,avail,available,75,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,1,['avail'],['available']
Availability,// Translate the location of the error from the location in the MI string to; // the corresponding location in the MIR file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp:33,error,error,33,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,1,['error'],['error']
Availability,// Translate the location of the error from the location in the llvm IR string; // to the corresponding location in the MIR file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp:33,error,error,33,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,1,['error'],['error']
Availability,// Translate the shuffle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['mask'],['mask']
Availability,// Trap errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:8,error,errors,8,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['errors']
Availability,"// Traverse the pointers up to the parent, noting the sums, then print; // in reverse order (callers at top, callees down bottom).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:117,down,down,117,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,1,['down'],['down']
Availability,"// Traverses the stack downwards, looking for the level to which LBrace; // corresponds. Returns either a pointer to the matching level or nullptr if; // LParen is not found in the initial portion of the stack up to; // MatchingStackIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:23,down,downwards,23,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['down'],['downwards']
Availability,"// Treat (srl X, count), mask) as (and (rotl X, size-count), ~0>>count),; // which is similar to SLL above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Treat Shuff0 and Shuff1 as operands to another vector shuffle, and; // Idx as a (non-undef) element of the top level shuffle's mask, that; // is, index into concat(Shuff0, Shuff1).; // Assuming that Shuff0 and Shuff1 both operate on subvectors of the; // same source vector (as described by OpMap), return the index of; // that source vector corresponding to Idx.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:130,mask,mask,130,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['mask'],['mask']
Availability,// Treat VPBLENDWY as a 128-bit vector as it repeats the lo/hi masks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:63,mask,masks,63,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['mask'],['masks']
Availability,// Treat `call [offset fn_ref]` (or `jmp`) syntax as an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:56,error,error,56,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['error'],['error']
Availability,// Treat errors like fatal errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:9,error,errors,9,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,2,['error'],['errors']
Availability,"// Treat explicit casts as an indication from the programmer that the; // Objective-C type system is not rich enough to express the needed; // invariant. In such cases, forget any existing information inferred; // about the type arguments. We don't assume the casted-to specialized; // type here because the invariant the programmer specifies in the cast; // may only hold at this particular program point and not later ones.; // We don't want a suppressing cast to require a cascade of casts down the; // line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:493,down,down,493,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['down'],['down']
Availability,// Treat fatal errors like errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:15,error,errors,15,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,2,['error'],['errors']
Availability,// Treat i1 loads the same as i8 loads. Masking will be done when storing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:40,Mask,Masking,40,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['Mask'],['Masking']
Availability,"// Treat the presence of convergent functions conservatively. The; // transformation is invalid if calls to certain convergent; // functions (like an AMDGPU barrier) get included in the resulting; // inner loop. But blocks meant for the inner loop will be; // identified later at a point where it's too late to abort the; // transformation. Also, the convergent attribute is not really; // sufficient to express the semantics of functions that are; // affected by this transformation. So we choose to back off if such; // a function call is present until a better alternative becomes; // available. This is similar to the conservative treatment of; // convergent function calls in GVNHoist and JumpThreading.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp:588,avail,available,588,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,1,['avail'],['available']
Availability,"// Treat this error as unrecoverable - we cannot be sure what any of; // the data represents including the length field, so cannot skip it or make; // any reasonable assumptions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:14,error,error,14,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,1,['error'],['error']
Availability,// Treat warnings like errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:23,error,errors,23,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['error'],['errors']
Availability,"// Tries to lower a BUILD_VECTOR composed of extract-extract chains that can be; // reasoned to be a permutation of a vector by indices in a non-constant vector.; // (build_vector (extract_elt V, (extract_elt I, 0)),; // (extract_elt V, (extract_elt I, 1)),; // ...; // ->; // (vpermv I, V); //; // TODO: Handle undefs; // TODO: Utilize pshufb and zero mask blending to support more efficient; // construction of vectors with constant-0 elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:353,mask,mask,353,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Trigger a nice error message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:18,error,error,18,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['error'],['error']
Availability,"// Trigger error calculation if h has it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:11,error,error,11,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,3,['error'],['error']
Availability,"// Trigger error calculation if h1 or h2 have it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:11,error,error,11,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,1,['error'],['error']
Availability,"// Trigger error condition by setting both sig and bkg; // to zero in bin zero, thus triggering a likelihood; // error since Poisson(N|0) is undefined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:11,error,error,11,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,2,['error'],['error']
Availability,"// Trigger the import of the full definition of each class that had any; // odr-merging problems, so we can produce better diagnostics for them.; // These updates may in turn find and diagnose some ODR failures, so take; // ownership of the set first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:202,failure,failures,202,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['failure'],['failures']
Availability,// Trim LocMapI down to the LII overlap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:16,down,down,16,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['down'],['down']
Availability,// Trim cold edges to get a more stable call graph. This allows for a more; // stable top-down order which in turns helps the stablity of the generated; // profile from run to run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:90,down,down,90,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,1,['down'],['down']
Availability,"// Trim default choice of error if within 2 sigma of limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:26,error,error,26,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,1,['error'],['error']
Availability,// Trim the value list down to the size it was before we parsed this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:23,down,down,23,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['down'],['down']
Availability,// Trivial roots are always non-redundant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:32,redundant,redundant,32,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['redundant'],['redundant']
Availability,"// True if LHS u< RHS and RHS == sign-bit-mask (2^7, 2^15, 2^31, etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:42,mask,mask,42,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['mask'],['mask']
Availability,// True if LHS u<= RHS and RHS == sign-bit-mask - 1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:43,mask,mask,43,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['mask'],['mask']
Availability,// True if LHS u> RHS and RHS == sign-bit-mask - 1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:42,mask,mask,42,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['mask'],['mask']
Availability,"// True if LHS u>= RHS and RHS == sign-bit-mask (2^7, 2^15, 2^31, etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:43,mask,mask,43,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['mask'],['mask']
Availability,// True if an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:14,error,error,14,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,2,['error'],['error']
Availability,"// True if there is no chance that any outlined candidate from this range; // could require stack fixups. That is, both; // * LR is available in the range (No save/restore around call); // * The range doesn't include calls (No save/restore in outlined frame); // are true.; // These conditions also ensure correctness of the return address; // authentication - we insert sign and authentication instructions only if; // we save/restore LR on stack, but then this condition ensures that the; // outlined range does not modify the SP, therefore the SP value used for; // signing is the same as the one used for authentication.; // FIXME: This is very restrictive; the flags check the whole block,; // not just the bit we will try to outline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:132,avail,available,132,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['avail'],['available']
Availability,// True if this block contains a safepoint and thus AvailableIn does not; // contribute to AvailableOut.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:52,Avail,AvailableIn,52,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,2,['Avail'],"['AvailableIn', 'AvailableOut']"
Availability,// Truncate Result back to a mask vector,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:29,mask,mask,29,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['mask'],['mask']
Availability,// Truncate Result back to a mask vector (Result has same EVL as Op2),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:29,mask,mask,29,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,// Truncate down to the new size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,down,down,12,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['down'],['down']
Availability,// Truncate down to the right width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp:12,down,down,12,interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp,1,['down'],['down']
Availability,// Truncate the register down to the argument type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:25,down,down,25,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,2,['down'],['down']
Availability,// Truncate the register down to the return value type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:25,down,down,25,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,2,['down'],['down']
Availability,"// Truncate the result down to the original type, if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:23,down,down,23,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['down'],['down']
Availability,// Truncate the significand down to its active bit count.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:28,down,down,28,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['down'],['down']
Availability,"// Truncate with PACKUS if we are truncating a vector with leading zero; // bits that extend all the way to the packed/truncated value.; // e.g. Masks, zext_in_reg, etc.; // Pre-SSE41 we can only use PACKUSWB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:145,Mask,Masks,145,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Mask'],['Masks']
Availability,// Truncates a RVV integer vector by one power-of-two. Carries both an extra; // mask and VL operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:81,mask,mask,81,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// Truncates to mask types are handled differently,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:16,mask,mask,16,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,// Try VECTOR GENERATE MASK,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:23,MASK,MASK,23,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['MASK'],['MASK']
Availability,// Try a redundant low-level type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp:9,redundant,redundant,9,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,1,['redundant'],['redundant']
Availability,"// Try and make unsigned vector comparison signed. On pre AVX512 targets there; // only are unsigned comparisons (`PCMPGT`) and on AVX512 its often better to; // use `PCMPGT` if the result is mean to stay in a vector (and if its going to; // a mask, there are signed AVX512 comparisons).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:244,mask,mask,244,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Try and recover a few more locations with entry values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:11,recover,recover,11,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['recover'],['recover']
Availability,"// Try and vectorize the indices. We are currently only interested in; // gather-like cases of the form:; //; // ... = g[a[0] - b[0]] + g[a[1] - b[1]] + ...; //; // where the loads of ""a"", the loads of ""b"", and the subtractions can be; // performed in parallel. It's likely that detecting this pattern in a; // bottom-up phase will be simpler and less costly than building a; // full-blown top-down phase beginning at the consecutive loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:394,down,down,394,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['down'],['down']
Availability,"// Try first to parse as integer, and if so preserve full 64 bits.; // We check for errno for out of bounds errors and for End == S.end(); // to make sure that the numeric string is not malformed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:108,error,errors,108,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp,1,['error'],['errors']
Availability,"// Try hard to avoid looking up in the Cling database as this could enduce; // an unwanted autoparsing.; // Note: this is always done by the callers and thus is redundant.; // Maybe replace with",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:161,redundant,redundant,161,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['redundant'],['redundant']
Availability,// Try inverting the insertion since for v2 masks it is easy to do and we; // can't reliably sort the mask one way or the other.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:44,mask,masks,44,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,6,"['mask', 'reliab']","['mask', 'masks', 'reliably']"
Availability,// Try masking out a splat value first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h:7,mask,masking,7,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h,1,['mask'],['masking']
Availability,// Try recovering from missing { after base-clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:7,recover,recovering,7,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['recover'],['recovering']
Availability,"// Try simplify G_UADDO with 8 or 16 bit operands to wide G_ADD and TBNZ if; // result is only used in the no-overflow case. It is restricted to cases; // where we know that the high-bits of the operands are 0. If there's an; // overflow, then the 9th or 17th bit must be set, which can be checked; // using TBNZ.; //; // Change (for UADDOs on 8 and 16 bits):; //; // %z0 = G_ASSERT_ZEXT _; // %op0 = G_TRUNC %z0; // %z1 = G_ASSERT_ZEXT _; // %op1 = G_TRUNC %z1; // %val, %cond = G_UADDO %op0, %op1; // G_BRCOND %cond, %error.bb; //; // error.bb:; // (no successors and no uses of %val); //; // To:; //; // %z0 = G_ASSERT_ZEXT _; // %z1 = G_ASSERT_ZEXT _; // %add = G_ADD %z0, %z1; // %val = G_TRUNC %add; // %bit = G_AND %add, 1 << scalar-size-in-bits(%op1); // %cond = G_ICMP NE, %bit, 0; // G_BRCOND %cond, %error.bb",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp:520,error,error,520,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,3,['error'],['error']
Availability,"// Try the extraction. If it doesn't work, then the block extractor crashed; // or something, in which case bugpoint can't chase down this possibility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:129,down,down,129,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['down'],['down']
Availability,"// Try to account for the following special case:; // 1. ScaleReg is an inductive variable;; // 2. We use it with non-zero offset;; // 3. IV's increment is available at the point of memory instruction.; //; // In this case, we may reuse the IV increment instead of the IV Phi to; // achieve the following advantages:; // 1. If IV step matches the offset, we will have no need in the offset;; // 2. Even if they don't match, we will reduce the overlap of living IV; // and IV increment, that will potentially lead to better register; // assignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:156,avail,available,156,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['avail'],['available']
Availability,// Try to adjust CC masks for the LOAD AND TEST opcode that could replace MI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:20,mask,masks,20,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['mask'],['masks']
Availability,"// Try to allocate a VGPR at the end of the argument list, or if no argument; // VGPRs are left allocating a stack slot.; // If \p Mask is is given it indicates bitfield position in the register.; // If \p Arg is given use it with new ]p Mask instead of allocating new.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:131,Mask,Mask,131,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['Mask'],['Mask']
Availability,"// Try to associate errors with the lexical context, if that is a function, or; // the value declaration otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:20,error,errors,20,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['error'],['errors']
Availability,// Try to be clever about pruning down the number of top-level declarations we; // see. If both start and end is either before or after the point we're; // looking for the point cannot be inside of this decl. Don't even look at it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp:34,down,down,34,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp,1,['down'],['down']
Availability,// Try to break down into smaller vectors as long as they're at least 64; // bits. This lets us use vector operations for some parts of the; // reduction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:16,down,down,16,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['down'],['down']
Availability,"// Try to build SSE/AVX zero vectors as <N x i32> bitcasted to their dest; // type. This ensures they get CSE'd. But if the integer type is not; // available, use a floating-point +0.0 instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:148,avail,available,148,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['avail'],['available']
Availability,// Try to canonicalize trunc + compare-to-constant into a mask + cmp.; // The trunc masks high bits while the compare may effectively mask low bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:58,mask,mask,58,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,3,['mask'],"['mask', 'masks']"
Availability,"// Try to check if there is an available reader from the column register first; // We do not check that the type of the reader matches the type of the input column of this node,; // because this node does not keep track of that anyway",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RFilterWithMissingValues.hxx:31,avail,available,31,tree/dataframe/inc/ROOT/RDF/RFilterWithMissingValues.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RFilterWithMissingValues.hxx,1,['avail'],['available']
Availability,// Try to cluster defs of condition registers to their uses. This improves; // the chance VCC will be available which will allow shrinking to VOP2; // encodings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMacroFusion.cpp:102,avail,available,102,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMacroFusion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMacroFusion.cpp,1,['avail'],['available']
Availability,// Try to combine 2 shuffles into 1 shuffle by concatenating a shuffle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:71,mask,mask,71,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['mask'],['mask']
Availability,"// Try to complete the type. Under ARC, this is a hard error from which; // we don't try to recover.; // FIXME: In the non-ARC case, this will still be a hard error if the; // definition is found in a module that's not visible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:55,error,error,55,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,3,"['error', 'recover']","['error', 'recover']"
Availability,"// Try to compose a subregister index that takes us from the incoming; // LMUL>1 register class down to the outgoing one. At each step we half; // the LMUL:; // nxv16i32@12 -> nxv2i32: sub_vrm4_1_then_sub_vrm2_1_then_sub_vrm1_0; // Note that this is not guaranteed to find a subregister index, such as; // when we are extracting from one VR type to another.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:96,down,down,96,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['down'],['down']
Availability,// Try to convert a constant mask AND into a shuffle clear mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,mask,mask,29,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],['mask']
Availability,"// Try to convert an ""is positive"" signbit masking operation into arithmetic; // shift and ""andn"". This saves a materialization of a -1 vector constant.; // The ""is negative"" variant should be handled more generally because it only; // requires ""and"" rather than ""andn"":; // and (pcmpgt X, -1), Y --> pandn (vsrai X, BitWidth - 1), Y; //; // This is limited to the original type to avoid producing even more bitcasts.; // If the bitcasts can't be eliminated, then it is unlikely that this fold; // will be profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:43,mask,masking,43,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masking']
Availability,"// Try to create VPTESTM instruction. If InMask is not null, it will be used; // to form a masked operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:91,mask,masked,91,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['mask'],['masked']
Availability,// Try to create a scaled mask constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:26,mask,mask,26,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['mask'],['mask']
Availability,// Try to create an in-lane repeating shuffle mask and then shuffle the; // results into the target lanes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,mask,mask,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,10,['mask'],['mask']
Availability,// Try to decode the wide mask into narrow mask from at most two subvectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,mask,mask,26,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],['mask']
Availability,"// Try to detect the case where the current inlining candidate caller (call; // it B) is a static or linkonce-ODR function and is an inlining candidate; // elsewhere, and the current candidate callee (call it C) is large enough; // that inlining it into B would make B too big to inline later. In these; // circumstances it may be best not to inline C into B, but to inline B into; // its callers.; //; // This only applies to static and linkonce-ODR functions because those are; // expected to be available for inlining in the translation units where they; // are used. Thus we will always have the opportunity to make local inlining; // decisions. Importantly the linkonce-ODR linkage covers inline functions; // and templates in C++.; //; // FIXME: All of this logic should be sunk into getInlineCost. It relies on; // the internal implementation of the inline cost metrics rather than; // treating them as truly abstract units etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp:498,avail,available,498,interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp,1,['avail'],['available']
Availability,"// Try to eliminate a power-of-2 mask constant by converting to a signbit; // test in a narrow type that we can truncate to with no cost. Examples:; // (i32 X & 32768) == 0 --> (trunc X to i16) >= 0; // (i32 X & 32768) != 0 --> (trunc X to i16) < 0; // TODO: This conservatively checks for type legality on the source and; // destination types. That may inhibit optimizations, but it also; // allows setcc->shift transforms that may be more beneficial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:33,mask,mask,33,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['mask'],['mask']
Availability,"// Try to eliminate redundant copy to register which we're going to; // spill, i.e. try to change:; // X = COPY Y; // SPILL X; // to; // SPILL Y; // If there are no uses of X between copy and STATEPOINT, that COPY; // may be eliminated.; // Reg - register we're about to spill; // RI - On entry points to statepoint.; // On successful copy propagation set to new spill point.; // IsKill - set to true if COPY is Kill (there are no uses of Y); // Returns either found source copy register or original one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp:20,redundant,redundant,20,interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp,1,['redundant'],['redundant']
Availability,"// Try to expand strrchr to the memrchr nonstandard extension if it's; // available, or simply fail otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:74,avail,available,74,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['avail'],['available']
Availability,"// Try to find a matching instruction based on s/zext, Alignment, Offset and; // (in BE/masked) type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:88,mask,masked,88,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['mask'],['masked']
Availability,"// Try to find an available value first, and delay expensive alias analysis; // queries until later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:18,avail,available,18,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['avail'],['available']
Availability,// Try to find redundant copies b/w vregs of the same register class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp:15,redundant,redundant,15,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp,1,['redundant'],['redundant']
Availability,"// Try to find the mapping for the scalar version of this intrinsic and the; // exact vector width of the call operands in the TargetLibraryInfo. First,; // check with a non-masked variant, and if that fails try with a masked one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ReplaceWithVeclib.cpp:174,mask,masked,174,interpreter/llvm-project/llvm/lib/CodeGen/ReplaceWithVeclib.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ReplaceWithVeclib.cpp,2,['mask'],['masked']
Availability,"// Try to fold away VMERGE_VVM instructions. We handle these cases:; // -Masked TU VMERGE_VVM combined with an unmasked TA instruction instruction; // folds to a masked TU instruction. VMERGE_VVM must have have merge operand; // same as false operand.; // -Masked TA VMERGE_VVM combined with an unmasked TA instruction fold to a; // masked TA instruction.; // -Unmasked TU VMERGE_VVM combined with a masked MU TA instruction folds to; // masked TU instruction. Both instructions must have the same merge operand.; // VMERGE_VVM must have have merge operand same as false operand.; // Note: The VMERGE_VVM forms above (TA, and TU) refer to the policy implied,; // not the pseudo name. That is, a TA VMERGE_VVM can be either the _TU pseudo; // form with an IMPLICIT_DEF passthrough operand or the unsuffixed (TA) pseudo; // form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:73,Mask,Masked,73,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,6,"['Mask', 'mask']","['Masked', 'masked']"
Availability,// Try to fold the mask and shift directly into the scale.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,// Try to fold the mask and shift into BEXTR and scale.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,// Try to fold the mask and shift into an extract and scale.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,"// Try to fold the mask and shift into the scale, and return false if we; // succeed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Try to fold; //; // (neg (csel X, Y)) -> (csel (neg X), (neg Y)); //; // The folding helps csel to be matched with csneg without generating; // redundant neg instruction, which includes negation of the csel expansion; // of abs node lowered by lowerABS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:147,redundant,redundant,147,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['redundant'],['redundant']
Availability,// Try to form a masked VPTESTM. Operands can be in either order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:17,mask,masked,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['mask'],['masked']
Availability,// Try to form a tentative pair in between this release instruction and the; // top down pointers that we are tracking.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:84,down,down,84,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['down'],['down']
Availability,// Try to fuse comparison instruction Compare into a later branch.; // Return true on success and if Compare is therefore redundant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:122,redundant,redundant,122,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['redundant'],['redundant']
Availability,"// Try to get the region from which the released value was loaded.; // Note that, unlike diagnosing for missing releases, here we don't track; // values that must not be released in the state. This is because even if; // these values escape, it is still an error under the rules of MRR to; // release them in -dealloc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:257,error,error,257,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['error'],['error']
Availability,"// Try to group the scalars into pairs, shuffle the pairs together, then; // shuffle the pairs of pairs together, etc. until the vector has; // been built. This will work only if all of the necessary shuffle masks; // are legal.; // We do this in two phases; first to check the legality of the shuffles,; // and next, assuming that all shuffles are legal, to create the new nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:208,mask,masks,208,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['mask'],['masks']
Availability,"// Try to mask before the extension to avoid having to generate a larger mask,; // possibly over several sub-vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],['mask']
Availability,"// Try to match OR(AND(~MASK,X),AND(MASK,Y)) logic pattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,MASK,MASK,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['MASK'],['MASK']
Availability,"// Try to match/decompose into: icmp eq (X & Mask), 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:45,Mask,Mask,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['Mask'],['Mask']
Availability,"// Try to match:; // (or (and (M, (sub 0, X)), (pandn M, X))); // which is a special case of:; // (select M, (sub 0, X), X); // Per:; // http://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate; // We know that, if fNegate is 0 or 1:; // (fNegate ? -v : v) == ((v ^ -fNegate) + fNegate); //; // Here, we have a mask, M (all 1s or 0), and, similarly, we know that:; // ((M & 1) ? -X : X) == ((X ^ -(M & 1)) + (M & 1)); // ( M ? -X : X) == ((X ^ M ) + (M & 1)); // This lets us transform our vselect to:; // (add (xor X, M), (and M, 1)); // And further to:; // (sub (xor X, M), M)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:324,mask,mask,324,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Try to merge the required wait with preexisting waitcnt instructions.; // Also erase redundant waitcnt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:88,redundant,redundant,88,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['redundant'],['redundant']
Availability,"// Try to parse a shifter (e.g., ""lsl <amt>""). On success, return 0.; // If a recoverable error occurs, return 1. If an irrecoverable error; // occurs, return -1. An irrecoverable error is one where tokens have been; // consumed in the process of trying to parse the shifter (i.e., when it is; // indeed a shifter operand, but malformed).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:78,recover,recoverable,78,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,4,"['error', 'recover']","['error', 'recoverable']"
Availability,// Try to parse line data. Consume error on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.cpp:35,error,error,35,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.cpp,2,"['error', 'failure']","['error', 'failure']"
Availability,// Try to pass driver level flags relevant to LTO code generation down to; // the plugin.; // Handle flags for selecting CPU variants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:66,down,down,66,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,1,['down'],['down']
Availability,// Try to perform better estimation of the permutation.; // 1. Split the source/destination vectors into real registers.; // 2. Do the mask analysis to identify which real registers are; // permuted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:135,mask,mask,135,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['mask'],['mask']
Availability,"// Try to perform better estimation of the permutation.; // 1. Split the source/destination vectors into real registers.; // 2. Do the mask analysis to identify which real registers are; // permuted. If more than 1 source registers are used for the; // destination register building, the cost for this destination register; // is (Number_of_source_register - 1) * Cost_PermuteTwoSrc. If only one; // source register is used, build mask and calculate the cost as a cost; // of PermuteSingleSrc.; // Also, for the single register permute we try to identify if the; // destination register is just a copy of the source register or the; // copy of the previous destination register (the cost is; // TTI::TCC_Basic). If the source register is just reused, the cost for; // this operation is 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:135,mask,mask,135,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['mask'],['mask']
Availability,"// Try to read the config file, return on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:42,error,error,42,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['error'],['error']
Availability,// Try to recover by calling this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['recover'],['recover']
Availability,// Try to recover by implicitly importing this module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['recover'],['recover']
Availability,// Try to recover by looking for viable functions which the user might; // have meant to call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['recover'],['recover']
Availability,// Try to recover from an empty lookup with typo correction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['recover'],['recover']
Availability,"// Try to recover from the typo, by dropping the tag definition and parsing; // the problematic tokens as a type.; //; // FIXME: Split the DeclSpec into pieces for the standalone; // declaration and pieces for the following declaration, instead; // of assuming that all the other pieces attach to new declaration,; // and call ParsedFreeStandingDeclSpec as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['recover'],['recover']
Availability,"// Try to recover if we have something like sizeof(T::X) where X is a type.; // Notably, there must be *exactly* one set of parens if X is a type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:10,recover,recover,10,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['recover'],['recover']
Availability,// Try to recover some path sensitivity in case we couldn't; // compute the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['recover'],['recover']
Availability,"// Try to recover some path-sensitivity. Right now casts of symbolic; // integers that promote their values are currently not tracked well.; // If 'Condition' is such an expression, try and recover the; // underlying value and use that instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,['recover'],['recover']
Availability,// Try to recover; create a SLocEntry so the rest of clang can handle it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:10,recover,recover,10,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['recover'],['recover']
Availability,// Try to refine our inputs given our knowledge of target shuffle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:66,mask,mask,66,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Try to remove bitcasts from input and output of mask arithmetic to; // remove GPR<->K-register crossings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:51,mask,mask,51,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// Try to remove redundant sext operations on Hexagon. The hardware; // already sign extends many 16 bit intrinsic operations to 32 bits.; // For example:; // %34 = tail call i32 @llvm.hexagon.A2.addh.l16.sat.ll(i32 %x, i32 %y); // %sext233 = shl i32 %34, 16; // %conv52 = ashr exact i32 %sext233, 16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp:17,redundant,redundant,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,1,['redundant'],['redundant']
Availability,// Try to sink CI down to Paired.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp:18,down,down,18,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp,1,['down'],['down']
Availability,// Try to split the vector types to get down to legal types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,down,down,40,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['down'],['down']
Availability,// Try to swap the mask and shift to place shifts which can be done as; // a scale on the outside of the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,"// Try to turn a partially redundant memset + memcpy into; // smaller memset + memcpy. We don't need the memcpy size for this.; // The memcpy must post-dom the memset, so limit this to the same basic; // block. A non-local generalization is likely not worthwhile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:27,redundant,redundant,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['redundant'],['redundant']
Availability,// Try to update RxSBG so that only the bits of RxSBG.Input in Mask are used.; // Return true on success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:63,Mask,Mask,63,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['Mask'],['Mask']
Availability,"// Try to use an unsigned bitfield extract (e.g., th.extu) if; // available.; // Transform (and (srl x, C2), C1); // -> (<bfextract> x, msb, lsb); //; // Make sure to keep this below the SRLIW cases, as we always want to; // prefer the more common instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:66,avail,available,66,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['avail'],['available']
Availability,// Try to use broadcast unless the mask only has one non-undef element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:35,mask,mask,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Try to use byte shift instructions to mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:41,mask,mask,41,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,"// Try to use the frame pointer if we can, else use the base pointer; // since it's available. This is handy for the emergency spill slot, in; // particular.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:84,avail,available,84,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['avail'],['available']
Availability,"// Try to widen element type to get a new mask value for a better permutation; // sequence, so that we can use NEON shuffle instructions, such as zip1/2,; // UZP1/2, TRN1/2, REV, INS, etc.; // For example:; // shufflevector <4 x i32> %a, <4 x i32> %b,; // <4 x i32> <i32 6, i32 7, i32 2, i32 3>; // is equivalent to:; // shufflevector <2 x i64> %a, <2 x i64> %b, <2 x i32> <i32 3, i32 1>; // Finally, we can get:; // mov v0.d[0], v1.d[1]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:42,mask,mask,42,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,"// Try unmerging GEPs to reduce liveness interference (register pressure) across; // IndirectBr edges. Since IndirectBr edges tend to touch on many blocks,; // reducing liveness interference across those edges benefits global register; // allocation. Currently handles only certain cases.; //; // For example, unmerge %GEPI and %UGEPI as below.; //; // ---------- BEFORE ----------; // SrcBlock:; // ...; // %GEPIOp = ...; // ...; // %GEPI = gep %GEPIOp, Idx; // ...; // indirectbr ... [ label %DstB0, label %DstB1, ... label %DstBi ... ]; // (* %GEPI is alive on the indirectbr edges due to other uses ahead); // (* %GEPIOp is alive on the indirectbr edges only because of it's used by; // %UGEPI); //; // DstB0: ... (there may be a gep similar to %UGEPI to be unmerged); // DstB1: ... (there may be a gep similar to %UGEPI to be unmerged); // ...; //; // DstBi:; // ...; // %UGEPI = gep %GEPIOp, UIdx; // ...; // ---------------------------; //; // ---------- AFTER ----------; // SrcBlock:; // ... (same as above); // (* %GEPI is still alive on the indirectbr edges); // (* %GEPIOp is no longer alive on the indirectbr edges as a result of the; // unmerging); // ...; //; // DstBi:; // ...; // %UGEPI = gep %GEPI, (UIdx-Idx); // ...; // ---------------------------; //; // The register pressure on the IndirectBr edges is reduced because %GEPIOp is; // no longer alive on them.; //; // We try to unmerge GEPs here in CodGenPrepare, as opposed to limiting merging; // of GEPs in the first place in InstCombiner::visitGetElementPtrInst() so as; // not to disable further simplications and optimizations as a result of GEP; // merging.; //; // Note this unmerging may increase the length of the data flow critical path; // (the path from %GEPIOp to %UGEPI would go through %GEPI), which is a tradeoff; // between the register pressure and the length of data-flow critical; // path. Restricting this to the uncommon IndirectBr case would minimize the; // impact of potentially longer critical path, if ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:555,alive,alive,555,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['alive'],['alive']
Availability,// Try using VECTOR GENERATE BYTE MASK. This is the architecturally-; // preferred way of creating all-zero and all-one vectors so give it; // priority over other methods below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:34,MASK,MASK,34,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['MASK'],['MASK']
Availability,// Try using bit ops for masking and blending before falling back to; // splitting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,mask,masking,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masking']
Availability,"// Trying to remove a dead store (earlier).; // Check that the pointers are the same,; // - the to-be-removed store's mask is a subset of the other store's; // mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:118,mask,mask,118,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,2,['mask'],['mask']
Availability,"// Trying to remove a store of the loaded value.; // Check that the pointers are the same, and; // - store's mask is a subset of the load's mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:109,mask,mask,109,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,2,['mask'],['mask']
Availability,"// Trying to replace a load of a stored value with the store's value.; // Check that the pointers are the same, and; // - load's mask is a subset of store's mask, and; // - load's pass-through is ""undef"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:129,mask,mask,129,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,2,['mask'],['mask']
Availability,"// Trying to replace later masked load with the earlier one.; // Check that the pointers are the same, and; // - masks and pass-throughs are the same, or; // - replacee's pass-through is ""undef"" and replacer's mask is a; // super-set of the replacee's mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:27,mask,masked,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,4,['mask'],"['mask', 'masked', 'masks']"
Availability,// Tuck away so we have a reliable const char *.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp:26,reliab,reliable,26,interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,1,['reliab'],['reliable']
Availability,// Turn 'a' into a mask suitable for VSELECT: a = a << 12;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Turn 'a' into a mask suitable for VSELECT: a = a << 5;; // We can safely do this using i16 shifts as we're only interested in; // the 3 lower bits of each byte.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,"// Turn (and (shl x, c2), c1) -> (slli (srli x, c3-c2), c3) if c1 is a; // shifted mask with no leading zeros and c3 trailing zeros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:83,mask,mask,83,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Turn (and (shl x, c2), c1) -> (srli (slli c2+c3), c3) if c1 is a mask; // shifted by c2 bits with c3 leading zeros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:68,mask,mask,68,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Turn (and (shr x, c2), c1) -> (slli (srli x, c2+c3), c3) if c1 is a; // shifted mask with c2 leading zeros and c3 trailing zeros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:83,mask,mask,83,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Turn (and (srl x, c2) c1) -> (srli (slli x, c3-c2), c3) if c1 is a mask; // with c3 leading zeros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:70,mask,mask,70,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// Turn on colon protection early, while parsing declspec, although there is; // nothing to protect there. It prevents from false errors if error recovery; // incorrectly determines where the declspec ends, as in the example:; // struct A { enum class B { C }; };; // const int C = 4;; // struct D { A::B : C; };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:130,error,errors,130,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,3,"['error', 'recover']","['error', 'errors', 'recovery']"
Availability,// Turn the scalar condition into a vector condition mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['mask'],['mask']
Availability,"// Turn this into a bit-test pattern using mask op + setcc:; // and (not (srl X, C)), 1 --> (and X, 1<<C) == 0; // and (srl (not X), C)), 1 --> (and X, 1<<C) == 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,mask,mask,43,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// Turn vperm(V1,V2,mask) -> shuffle(V1,V2,mask) if mask is a constant.; // Note that ppc_altivec_vperm has a big-endian bias, so when creating; // a vectorshuffle for little endian, we must undo the transformation; // performed on vec_perm in altivec.h. That is, we must complement; // the permutation mask with respect to 31 and reverse the order of; // V1 and V2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:20,mask,mask,20,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,4,['mask'],['mask']
Availability,"// Turning on digraphs in standards before C++0x is error-prone, because e.g.; // the sequence ""<::"" will be unconditionally treated as ""[:"".; // Cf. Lexer::LexTokenInternal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:52,error,error-prone,52,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['error'],['error-prone']
Availability,// Two instrs are partial redundant if their basic blocks are reachable; // from one to another but one doesn't dominate another.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp:26,redundant,redundant,26,interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,1,['redundant'],['redundant']
Availability,// Two of the bits that haven't got used in the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/XCOFF.cpp:48,mask,mask,48,interpreter/llvm-project/llvm/lib/BinaryFormat/XCOFF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/XCOFF.cpp,1,['mask'],['mask']
Availability,"// Two things:; // A. We can't reliably cache all of NewPaused back. Consider a case; // where we have two paths in NewPaused; one of which can't optimize; // above this phi, whereas the other can. If we cache the second path; // back, we'll end up with suboptimal cache entries. We can handle; // cases like this a bit better when we either try to find all; // clobbers that block phi optimization, or when our cache starts; // supporting unfinished searches.; // B. We can't reliably cache TerminatedPaths back here without doing; // extra checks; consider a case like:; // T; // / \; // D C; // \ /; // S; // Where T is our target, C is a node with a clobber on it, D is a; // diamond (with a clobber *only* on the left or right node, N), and; // S is our start. Say we walk to D, through the node opposite N; // (read: ignoring the clobber), and see a cache entry in the top; // node of D. That cache entry gets put into TerminatedPaths. We then; // walk up to C (N is later in our worklist), find the clobber, and; // quit. If we append TerminatedPaths to OtherClobbers, we'll cache; // the bottom part of D to the cached clobber, ignoring the clobber; // in N. Again, this problem goes away if we start tracking all; // blockers for a given phi optimization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:31,reliab,reliably,31,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,2,['reliab'],['reliably']
Availability,// Type in initial directive token: -{error|warning|note|no-diagnostics},MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:38,error,error,38,interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp,1,['error'],['error']
Availability,"// Type is an aggregate, argument is an init list. At this point it comes; // down to checking whether the initialization works.; // FIXME: Find out whether this parameter is consumed or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:78,down,down,78,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['down'],['down']
Availability,// Type mismatch and not a clobber: Return an error;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,error,error,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['error'],['error']
Availability,"// Typically from here on, we need an integer version of MaskVT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:57,Mask,MaskVT,57,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Mask'],['MaskVT']
Availability,// UNDEF nodes convert to UNDEF shuffle mask values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],['mask']
Availability,"// Ump: A memory address suitable for ldp/stp in SI, DI, SF and DF modes.; // Utf: A memory address suitable for ldp/stp in TF mode.; // Usa: An absolute symbolic address.; // Ush: The high part (bits 32:12) of a pc-relative symbolic address.; // Better to return an error saying that it's an unrecognised constraint; // even if this is a valid constraint in gcc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:267,error,error,267,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,1,['error'],['error']
Availability,// Unaliased double registers are not available in non-V9 targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcRegisterInfo.cpp:38,avail,available,38,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcRegisterInfo.cpp,1,['avail'],['available']
Availability,// Unbundle the files. Return true if an error was found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:41,error,error,41,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,1,['error'],['error']
Availability,// Undef elements of the build vector remain undef because we initialize; // the shuffle mask with -1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:89,mask,mask,89,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// Undef in a select condition (choose one of the operands) does not mean; // the same thing as undef in a shuffle mask (any value is acceptable), so; // give up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:115,mask,mask,115,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['mask'],['mask']
Availability,"// Undefs are allowed, but defined elements must still be consecutive:; // i.e.: x,..., undef,..., x + 2,..., undef,..., undef,..., x + 5, ....; // Verify this by storing the last non-undef followed by an undef; // Check that following non-undef masks are incremented with the; // corresponding distance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:246,mask,masks,246,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['mask'],['masks']
Availability,"// Under -fmodules-codegen, codegen is performed for all non-internal,; // non-always_inline functions, unless they are available elsewhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:120,avail,available,120,interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,1,['avail'],['available']
Availability,"// Under normal circumstances B.Index be equal to NextUncovered, but it can; // be less if a bucket points to names which are already known to be in some; // bucket we processed earlier. In that case, we won't trigger this error,; // but report the mismatched hash value error instead. (We know the hash; // will not match because we have already verified that the name's hash; // puts it into the previous bucket.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp:223,error,error,223,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,2,['error'],['error']
Availability,"// Under the MS ABI, lock down the inheritance model now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:26,down,down,26,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,4,['down'],['down']
Availability,"// Under the large code model, we cannot assume that __morestack lives; // within 2^31 bytes of the call site, so we cannot use pc-relative; // addressing. We cannot perform the call via a temporary register,; // as the rax register may be used to store the static chain, and all; // other suitable registers may be either callee-save or used for; // parameter passing. We cannot use the stack at this point either; // because __morestack manipulates the stack directly.; //; // To avoid these issues, perform an indirect call via a read-only memory; // location containing the address.; //; // This solution is not perfect, as it assumes that the .rodata section; // is laid out within 2^31 bytes of each function body, but this seems; // to be sufficient for JIT.; // FIXME: Add retpoline support and remove the error here..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:814,error,error,814,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['error'],['error']
Availability,"// Under-approximation, but always available for assertions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:35,avail,available,35,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,1,['avail'],['available']
Availability,"// Understanding and customizing error handling in likelihood evaluations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:33,error,error,33,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['error'],['error']
Availability,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:122,avail,available,122,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,3,['avail'],['available']
Availability,"// Unfolding code generates a load/store instruction according to the size of; // the register in the register form instruction.; // If the register's size is greater than the memory's operand size, do not; // allow unfolding.; // the unfolded load size will be based on the register size. If that’s bigger; // than the memory operand size, the unfolded load will load more memory and; // potentially cause a memory fault.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86FoldTablesEmitter.cpp:416,fault,fault,416,interpreter/llvm-project/llvm/utils/TableGen/X86FoldTablesEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86FoldTablesEmitter.cpp,1,['fault'],['fault']
Availability,"// Unfortunately, we have to bail out instead of recovering by; // ignoring the parameters, just in case the nested name specifier; // depends on the parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:49,recover,recovering,49,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['recover'],['recovering']
Availability,"// Unhandled case, internal error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleReader.cxx:28,error,error,28,tree/ntuple/v7/src/RNTupleReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleReader.cxx,1,['error'],['error']
Availability,"// Universal Mach-O files can't have an archicture slice that starts; // beyond the 4GB boundary. ""lipo"" can create a 64 bit universal; // header, but not all tools can parse these files so we want to return; // an error if the file can't be encoded as a file with a 32 bit; // universal header. To detect this, we check the size of each; // architecture's skinny Mach-O file and add up the offsets. If they; // exceed 4GB, then we return an error.; // First we compute the right offset where the first architecture will; // fit followin the 32 bit universal header. The 32 bit universal header; // starts with a uint32_t magic and a uint32_t number of architecture; // infos. Then it is followed by 5 uint32_t values for each; // architecture. So we set the start offset to the right value so we can; // calculate the exact offset that the first architecture slice can; // start at.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp:215,error,error,215,interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp,2,['error'],['error']
Availability,"// Unknown character, emit an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp:30,error,error,30,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,2,['error'],['error']
Availability,// Unknown error?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:11,error,error,11,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,1,['error'],['error']
Availability,"// Unless +-flat-for-global is specified, use MUBUF instructions for global; // address space access if flat operations are not available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cpp:128,avail,available,128,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cpp,1,['avail'],['available']
Availability,"// Unless the index is known to be 0, we must slide the vector down to get; // the desired element into index 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:63,down,down,63,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['down'],['down']
Availability,"// Unlike most shuffle nodes, VPERMV's mask operand is operand 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,mask,mask,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// Unlike most shuffle nodes, VPERMV3's mask operand is the middle one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Unmasked pseudo instructions need to append dummy mask operand to; // V instructions. All V instructions are modeled as the masked version.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVAsmPrinter.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVAsmPrinter.cpp,2,['mask'],"['mask', 'masked']"
Availability,"// Unordered atomic memcpy and memmove intrinsics which are not explicitly; // marked as ""gc-leaf-function"" should be lowered in a GC parseable way.; // Specifically, these calls should be lowered to the; // __llvm_{memcpy|memmove}_element_unordered_atomic_safepoint symbols.; // Similarly to __llvm_deoptimize we want to resolve this now, since the; // verifier does not allow taking the address of an intrinsic function.; //; // Moreover we need to shuffle the arguments for the call in order to; // accommodate GC. The underlying source and destination objects might be; // relocated during copy operation should the GC occur. To relocate the; // derived source and destination pointers the implementation of the; // intrinsic should know the corresponding base pointers.; //; // To make the base pointers available pass them explicitly as arguments:; // memcpy(dest_derived, source_derived, ...) =>; // memcpy(dest_base, dest_offset, source_base, source_offset, ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:809,avail,available,809,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['avail'],['available']
Availability,"// Unpoisoning to prevent overwriting poisoned object (e.g., annotated short; // string). Objects that have had their memory poisoned may cause an ASan; // error if their memory is reused without calling their destructor.; // Unpoisoning the memory prevents this error from occurring.; // FIXME: This is a temporary solution to prevent buildbots from failing.; // The more appropriate approach would be to call the object's destructor; // to unpoison memory. This would prevent any potential memory leaks (long; // strings). Read for details:; // https://github.com/llvm/llvm-project/pull/79065#discussion_r1462621761",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:156,error,error,156,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,2,['error'],['error']
Availability,// Unreachable because CodeCoverage.cpp should terminate with an error; // before we get here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/SourceCoverageView.cpp:65,error,error,65,interpreter/llvm-project/llvm/tools/llvm-cov/SourceCoverageView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/SourceCoverageView.cpp,2,['error'],['error']
Availability,// Unreachable because we should have gracefully terminated with an error; // above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp:68,error,error,68,interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp,1,['error'],['error']
Availability,"// Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/ComputeFunctions.cxx:55,toler,tolerated,55,roofit/batchcompute/src/ComputeFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/ComputeFunctions.cxx,1,['toler'],['tolerated']
Availability,// Unrecoverable failure: don't even try to process the input file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:17,failure,failure,17,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['failure'],['failure']
Availability,// Unsafe stack always grows down.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp:29,down,down,29,interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,1,['down'],['down']
Availability,"// Up to 2 vector registers can be truncated efficiently with pack or; // permute. The latter requires an immediate mask to be loaded, which; // typically gets hoisted out of a loop. TODO: return a good value for; // BB-VECTORIZER that includes the immediate loads, which we do not want; // to count for the loop vectorizer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:116,mask,mask,116,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['mask'],['mask']
Availability,// Up to two atomic orderings (cmpxchg provides guarantees on failure).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp:62,failure,failure,62,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,1,['failure'],['failure']
Availability,// Update AVL to vl-output of the fault first load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:34,fault,fault,34,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['fault'],['fault']
Availability,// Update MBB ingoing bundle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:29,mask,mask,29,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['mask'],['mask']
Availability,"// Update MSSA too, if available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:23,avail,available,23,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['avail'],['available']
Availability,"// Update Mask, Bits and ExtraProb.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp:10,Mask,Mask,10,interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,1,['Mask'],['Mask']
Availability,// Update MemoryPhis after split if MemorySSA is available,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:49,avail,available,49,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['avail'],['available']
Availability,"// Update counter (if no error occured)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:25,error,error,25,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,2,['error'],['error']
Availability,// Update counts for DiagnosticErrorTrap even if a fatal error occurred; // or diagnostics are suppressed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:57,error,error,57,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,1,['error'],['error']
Availability,"// Update display here to not slow down too much...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:35,down,down,35,test/RootShower/RootShower.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx,1,['down'],['down']
Availability,// Update dominator tree if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:28,avail,available,28,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['avail'],['available']
Availability,"// Update existing Phi.; // FIXME: some updates may be redundant, try to optimize and skip some.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:55,redundant,redundant,55,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['redundant'],['redundant']
Availability,"// Update feature values from the BBs that were copied from the callee, or; // might have been modified because of inlining. The latter have been; // subtracted in the FunctionPropertiesUpdater ctor.; // There could be successors that were reached before but now are only; // reachable from elsewhere in the CFG.; // One example is the following diamond CFG (lines are arrows pointing down):; // A; // / \; // B C; // | |; // | D; // | |; // | E; // \ /; // F; // There's a call site in C that is inlined. Upon doing that, it turns out; // it expands to; // call void @llvm.trap(); // unreachable; // F isn't reachable from C anymore, but we did discount it when we set up; // FunctionPropertiesUpdater, so we need to re-include it here.; // At the same time, D and E were reachable before, but now are not anymore,; // so we need to leave D out (we discounted it at setup), and explicitly; // remove E.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/FunctionPropertiesAnalysis.cpp:385,down,down,385,interpreter/llvm-project/llvm/lib/Analysis/FunctionPropertiesAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/FunctionPropertiesAnalysis.cpp,1,['down'],['down']
Availability,// Update insertps mask srcidx and reference the source input directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:58,error,error,58,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['error'],['error']
Availability,"// Update last error code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:15,error,error,15,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['error'],['error']
Availability,// Update legal shuffle masks based on demanded elements if it won't reduce; // to Identity which can cause premature removal of the shuffle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:24,mask,masks,24,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['mask'],"['mask', 'masks']"
Availability,"// Update llvm.compiler.used, adding the new liveness globals. This is; // needed so that during LTO these variables stay alive. The alternative; // would be to have the linker handling the LTO symbols, but libLTO; // current API does not expose access to the section for each symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:122,alive,alive,122,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['alive'],['alive']
Availability,"// Update llvm.compiler.used, adding the new metadata globals. This is; // needed so that during LTO these variables stay alive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:122,alive,alive,122,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,2,['alive'],['alive']
Availability,// Update mask and mark undef elems.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['mask'],['mask']
Availability,"// Update string of available libraries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:20,avail,available,20,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['avail'],['available']
Availability,// Update the EntryInfo with the next available count for this location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:38,avail,available,38,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['avail'],['available']
Availability,// Update the availability map to include the new instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:14,avail,availability,14,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['avail'],['availability']
Availability,// Update the cumulative number of resource cycles based on the processor; // resource usage information available from the instruction descriptor. We; // need to compute the cumulative number of resource cycles for every; // processor resource which is consumed by an instruction of the block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp:105,avail,available,105,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp,1,['avail'],['available']
Availability,// Update the next highest slot available to loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:32,avail,available,32,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,1,['avail'],['available']
Availability,// Update the next highest slot available to stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:32,avail,available,32,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,1,['avail'],['available']
Availability,// Update the vector mask to point to the post-shuffle vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,mask,mask,21,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,// Update with new larger threshold if this was a retry (otherwise; // we would have already inserted with NewThreshold above). Also; // update failure info if requested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:144,failure,failure,144,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['failure'],['failure']
Availability,"// Updates for visible decls can occur for other contexts than just the; // TU, and when we read those update records, the actual context may not; // be available yet, so have this pending map using the ID as a key. It; // will be realized when the context is actually loaded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:153,avail,available,153,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['avail'],['available']
Availability,"// Upgrade ""PIE Level"" from Error to Max.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:28,Error,Error,28,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['Error'],['Error']
Availability,// Upgrade PIC from Error/Max to Min.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:20,Error,Error,20,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['Error'],['Error']
Availability,// Upgrade branch protection and return address signing module flags. The; // module flag behavior for these fields were Error and now they are Min.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:121,Error,Error,121,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['Error'],['Error']
Availability,// Upgrade the declaration of fp compare intrinsics that change return type; // from scalar to vXi1 mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:100,mask,mask,100,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// Upgrade the declarations of intrinsic functions whose 8-bit immediate mask; // arguments have changed their type from i32 to i8.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:73,mask,mask,73,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,"// Upon failure, verify that the masked-out part of the loaded value; // has been modified. If it didn't, abort the cmpxchg, since the; // masked-in part must've.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:8,failure,failure,8,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,3,"['failure', 'mask']","['failure', 'masked-in', 'masked-out']"
Availability,"// Upon successful completion, the getline() and getdelim() functions shall; // return the number of bytes written into the buffer.; // If the end-of-file indicator for the stream is set, the function shall; // return -1.; // If an error occurs, the function shall return -1 and set 'errno'.; // Add transition for the successful state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:232,error,error,232,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['error'],['error']
Availability,"// Use +0.5 for 1-sigma errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:24,error,errors,24,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['error'],['errors']
Availability,// Use AvailableRegs to store the fp regs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp:7,Avail,AvailableRegs,7,interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,1,['Avail'],['AvailableRegs']
Availability,"// Use ExternalWeak so that if all sections are discarded due to section; // garbage collection, the linker will not report undefined symbol errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp:141,error,errors,141,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,1,['error'],['errors']
Availability,"// Use ExternalWeak so that if all sections are discarded due to section; // garbage collection, the linker will not report undefined symbol errors.; // Windows defines the start/stop symbols in compiler-rt so no need for; // ExternalWeak.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp:141,error,errors,141,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,1,['error'],['errors']
Availability,// Use Generic on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:18,failure,failure,18,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['failure'],['failure']
Availability,// Use Mask as the merge operand to let the result be 0 if either of the; // inputs is unordered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:7,Mask,Mask,7,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['Mask'],['Mask']
Availability,"// Use Mul(X, Rev(X)) until 4 items remain. Going down to 4 vector elements; // allows us to easily extract vector elements from the lanes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:50,down,down,50,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['down'],['down']
Availability,// Use OffscreenCanvas when available. Specially needed in web workers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:28,avail,available,28,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,// Use VECTOR TEST UNDER MASK for i128 operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:25,MASK,MASK,25,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['MASK'],['MASK']
Availability,// Use XOR (plus OR) and PTEST after SSE4.1 for 128/256-bit operands.; // Use PCMPNEQ (plus OR) and KORTEST for 512-bit operands.; // Otherwise use PCMPEQ (plus AND) and mask testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:170,mask,mask,170,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Use __sincos_stret if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:25,avail,available,25,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['avail'],['available']
Availability,"// Use a SCHED_BARRIER's mask to identify instruction SchedGroups that should; // not be reordered accross the SCHED_BARRIER. This is used for the base; // SCHED_BARRIER, and not SCHED_GROUP_BARRIER. The difference is that; // SCHED_BARRIER will always block all instructions that can be classified; // into a particular SchedClass, whereas SCHED_GROUP_BARRIER has a fixed size; // and may only synchronize with some SchedGroups. Returns the inverse of; // Mask. SCHED_BARRIER's mask describes which instruction types should be; // allowed to be scheduled across it. Invert the mask to get the; // SchedGroupMask of instructions that should be barred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,4,"['Mask', 'mask']","['Mask', 'mask']"
Availability,// Use a fast table for some small values. This also gets rid of some; // rounding errors in libc sqrt for small values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:83,error,errors,83,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['error'],['errors']
Availability,// Use a mask to avoid undefined behavior.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h:9,mask,mask,9,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h,2,['mask'],['mask']
Availability,// Use a mask to drop the high bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:9,mask,mask,9,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Use a signed mask so that shifting right will insert sign bits. These; // bits will be removed when we shift the result left so it doesn't matter; // what we use. This might allow a smaller immediate encoding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:16,mask,mask,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,// Use all available hardware threads,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp:11,avail,available,11,interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/dsymutil.cpp,2,['avail'],['available']
Availability,"// Use an SRST-based sequence to search a block of memory. The first; // operand is the end address, the second is the start, and the third; // is the character to search for. CC is set to 1 on success and 2; // on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:215,failure,failure,215,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,1,['failure'],['failure']
Availability,"// Use an external histogram for the errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/Systematics.h:37,error,errors,37,roofit/histfactory/inc/RooStats/HistFactory/Systematics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/Systematics.h,1,['error'],['errors']
Availability,// Use available stack adjustment in pop instruction to deallocate stack; // space.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:7,avail,available,7,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,1,['avail'],['available']
Availability,// Use available stack adjustment in push instruction to allocate additional; // stack space.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:7,avail,available,7,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,1,['avail'],['available']
Availability,// Use caching to avoid redundant md5 computation for build speed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/PseudoProbePrinter.cpp:24,redundant,redundant,24,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/PseudoProbePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/PseudoProbePrinter.cpp,1,['redundant'],['redundant']
Availability,"// Use computeTargetABI to check if ABIName is valid. If invalid, output; // error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:77,error,error,77,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['error'],['error']
Availability,// Use dedicated pack instructions for masks that match their pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,mask,masks,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,7,['mask'],['masks']
Availability,// Use dedicated unpack instructions for masks that match their pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:41,mask,masks,41,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,17,['mask'],['masks']
Availability,// Use even/odd duplicate instructions for masks that match their pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:43,mask,masks,43,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['mask'],['masks']
Availability,// Use first elt from V2 when indicating zero in the shuffle mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:61,mask,mask,61,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['mask'],['mask']
Availability,// Use frame pointer to reference fixed objects. Use it for locals if; // there are VLAs (and thus the SP isn't reliable as a base).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:112,reliab,reliable,112,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['reliab'],['reliable']
Availability,// Use frame pointer to reference fixed objects. Use it for locals if; // there are VLAs or a dynamically realigned SP (and thus the SP isn't; // reliable as a base). Make sure useFPForScavengingIndex() does the; // right thing for the emergency spill slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:146,reliab,reliable,146,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['reliab'],['reliable']
Availability,"// Use left X error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx:14,error,error,14,roofit/roofitcore/src/RooXYChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx,1,['error'],['error']
Availability,// Use low duplicate instructions for masks that match their pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:38,mask,masks,38,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['masks']
Availability,// Use masked off lanes to simplify operands via SimplifyDemandedVectorElts,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:7,mask,masked,7,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,2,['mask'],['masked']
Availability,"// Use profiled call edges to augment the top-down order. There are cases; // that the top-down order computed based on the static call graph doesn't; // reflect real execution order. For example; //; // 1. Incomplete static call graph due to unknown indirect call targets.; // Adjusting the order by considering indirect call edges from the; // profile can enable the inlining of indirect call targets by allowing; // the caller processed before them.; // 2. Mutual call edges in an SCC. The static processing order computed for; // an SCC may not reflect the call contexts in the context-sensitive; // profile, thus may cause potential inlining to be overlooked. The; // function order in one SCC is being adjusted to a top-down order based; // on the profile to favor more inlining. This is only a problem with CS; // profile.; // 3. Transitive indirect call edges due to inlining. When a callee function; // (say B) is inlined into a caller function (say A) in LTO prelink,; // every call edge originated from the callee B will be transferred to; // the caller A. If any transferred edge (say A->C) is indirect, the; // original profiled indirect edge B->C, even if considered, would not; // enforce a top-down order from the caller A to the potential indirect; // call target C in LTO postlink since the inlined callee B is gone from; // the static call graph.; // 4. #3 can happen even for direct call targets, due to functions defined; // in header files. A header function (say A), when included into source; // files, is defined multiple times but only one definition survives due; // to ODR. Therefore, the LTO prelink inlining done on those dropped; // definitions can be useless based on a local file scope. More; // importantly, the inlinee (say B), once fully inlined to a; // to-be-dropped A, will have no profile to consume when its outlined; // version is compiled. This can lead to a profile-less prelink; // compilation for the outlined version of B which may be called from; // ext",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:46,down,down,46,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,3,['down'],['down']
Availability,// Use reverse-postorder for top-down.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:33,down,down,33,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['down'],['down']
Availability,"// Use right X error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx:15,error,error,15,roofit/roofitcore/src/RooXYChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx,1,['error'],['error']
Availability,// Use shuffle vector is the src and destination are the same number of; // elements and restore the vector mask since it is on the side it will be; // stored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:108,mask,mask,108,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['mask'],['mask']
Availability,// Use shuffles operands instead of shuffles themselves.; // 1. Adjust mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:71,mask,mask,71,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['mask'],['mask']
Availability,// Use source ranges of explicit captures for fixits where available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:59,avail,available,59,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['avail'],['available']
Availability,"// Use sum of the weight squared in evaluating the likelihood; // (this is needed for calculating the errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/LogLikelihoodFCN.h:102,error,errors,102,math/mathcore/inc/Fit/LogLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/LogLikelihoodFCN.h,2,['error'],['errors']
Availability,"// Use the ID of masked load as the ""matching id"". This will; // prevent matching non-masked loads/stores with masked ones; // (which could be done), but at the moment, the code here; // does not support matching intrinsics with non-intrinsics,; // so keep the MatchingIds specific to masked instructions; // for now (TODO).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:17,mask,masked,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,4,['mask'],['masked']
Availability,// Use the OptMinSizeThreshold or OptSizeThreshold knob if they are available; // and reduce the threshold if the caller has the necessary attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:68,avail,available,68,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['avail'],['available']
Availability,"// Use the collected exceptions to build up a detailed error log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:55,error,error,55,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['error'],['error']
Availability,// Use the comdat if it is only available in one of the modules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp:32,avail,available,32,interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp,1,['avail'],['available']
Availability,"// Use the intrinsic if the half type itself isn't supported; // (as opposed to operations on half, available with NativeHalfType).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:100,avail,available,100,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['avail'],['available']
Availability,// Use the line number specified by the LineEntry. This line number may; // be multiple lines down from the line entry. Add the difference in; // physical line numbers from the query point and the line marker to the; // total.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:94,down,down,94,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['down'],['down']
Availability,"// Use the mask length rather than the operands' vector lengths here. We; // already know that the shuffle returns a vector twice as long as the inputs,; // and neither of the inputs are undef vectors. If the mask picks consecutive; // elements from both inputs, then this is a concatenation of the inputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:11,mask,mask,11,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,2,['mask'],['mask']
Availability,"// Use the model's optimized generator, if one is available.; // The generator writes directly into our local 'event' since we attached it above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:50,avail,available,50,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['avail'],['available']
Availability,// Use the popcount of Mask as the effective vector length.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:23,Mask,Mask,23,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['Mask'],['Mask']
Availability,"// Use the previous operand to get the vXi64 VT. The result might be a mask; // VT for compares. Using the previous operand assumes that the previous; // operand will never have a smaller element size than a scalar operand and; // that a widening operation never uses SEW=64.; // NOTE: If this fails the below assert, we can probably just find the; // element count from any operand or result and use it to construct the VT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:71,mask,mask,71,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,"// Use the segment set, if it is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:33,avail,available,33,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,5,['avail'],['available']
Availability,"// Use these flags to help us avoid creating redundant edges. If there; // are more than one edges from an outside node to inside nodes, we only; // keep one edge from that node to the pi-block node. Similarly, if; // there are more than one edges from inside nodes to an outside node,; // we only keep one edge from the pi-block node to the outside node.; // There is a flag defined for each direction (incoming vs outgoing) and; // for each type of edge supported, using a two-dimensional boolean; // array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceGraphBuilder.cpp:45,redundant,redundant,45,interpreter/llvm-project/llvm/lib/Analysis/DependenceGraphBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceGraphBuilder.cpp,1,['redundant'],['redundant']
Availability,"// Use this function in case an error occurred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx:32,error,error,32,tree/treeplayer/src/TTreeProxyGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx,1,['error'],['error']
Availability,// Use this to diagnose that an unexpected Decl was encountered; // or no difference was detected. This causes a generic error; // message to be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h:121,error,error,121,interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h,1,['error'],['error']
Availability,// Use to avoid redundant warning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:16,redundant,redundant,16,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,1,['redundant'],['redundant']
Availability,// Use unique exit code to differentiate failures not directly caused from; // TextAPI operations. This is used for wrapping `compare` operations in; // automation and scripting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp:41,failure,failures,41,interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,1,['failure'],['failures']
Availability,// Use up to 1/4 of available register budget for vectorization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:20,avail,available,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,1,['avail'],['available']
Availability,// Use zeros for the widening if we already have some zeroes. This can; // allow SimplifyDemandedBits to remove scalar ANDs that may be down; // stream of this.; // FIXME: It might make sense to detect a concat_vectors with a mix of; // zeroes and undef and turn it into insert_subvector for i1 vectors as; // a separate combine. What we can't do is canonicalize the operands of; // such a concat or we'll get into a loop with SimplifyDemandedBits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:136,down,down,136,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['down'],['down']
Availability,"// UseGPRForF16_F32 if targeting one of the soft-float ABIs, if passing a; // variadic argument, or if no F16/F32 argument registers are available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:137,avail,available,137,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['avail'],['available']
Availability,"// UseGPRForF64 if targeting soft-float ABIs or an FLEN=32 ABI, if passing a; // variadic argument, or if no F64 argument registers are available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:136,avail,available,136,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['avail'],['available']
Availability,// Used by ErrorInfo::classID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:11,Error,ErrorInfo,11,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,3,['Error'],['ErrorInfo']
Availability,// Used by function `processSTIPredicate` to construct a mask of machine; // instruction operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:57,mask,mask,57,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,1,['mask'],['mask']
Availability,"// Used for shifting constraints for OpenCL, do mask for powers of 2, URem for; // non powers of two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:48,mask,mask,48,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['mask'],['mask']
Availability,"// Used to buffer the emitted string for initializing global aggregates.; //; // Normally an aggregate (array, vector, or structure) is emitted as a u8[].; // However, if either element/field of the aggregate is a non-NULL address,; // and all such addresses are properly aligned, then the aggregate is; // emitted as u32[] or u64[]. In the case of unaligned addresses, the; // aggregate is emitted as u8[], and the mask() operator is used for all; // pointers.; //; // We first layout the aggregate in 'buffer' in bytes, except for those; // symbol addresses. For the i-th symbol address in the aggregate, its; // corresponding 4-byte or 8-byte elements in 'buffer' are filled with 0s.; // symbolPosInBuffer[i-1] records its position in 'buffer', and Symbols[i-1]; // records the Value*.; //; // Once we have this AggBuffer setup, we can choose how to print it out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h:416,mask,mask,416,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,1,['mask'],['mask']
Availability,// Used to check a Mach-O Bind or Rebase entry for errors when iterating.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:51,error,errors,51,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,1,['error'],['errors']
Availability,"// Used to keep track of which base types we have already seen, so; // that we can properly diagnose redundant direct base types. Note; // that the key is always the unqualified canonical type of the base; // class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:101,redundant,redundant,101,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['redundant'],['redundant']
Availability,"// Used to return 0 on success, 1 on duplicate, -1 on failure, -2 on ""fatal"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:54,failure,failure,54,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['failure'],['failure']
Availability,"// User-provided functions for individual targets:; // Return a sub-register mask that indicates which bits in Reg belong; // to the subregister Sub. These bits are assumed to be contiguous in; // the super-register, and have the same ordering in the sub-register; // as in the super-register. It is valid to call this function with; // Sub == 0, in this case, the function should return a mask that spans; // the entire register Reg (which is what the default implementation; // does).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.h:77,mask,mask,77,interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.h,2,['mask'],['mask']
Availability,"// Users in the OrigPreHeader need to use the value to which the; // original definitions are mapped and anything else can be handled by; // the SSAUpdater. To avoid adding PHINodes, check if the value is; // available in UserBB, if not substitute undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:209,avail,available,209,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,2,['avail'],['available']
Availability,// Uses VFP for Thumb libfuncs if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:34,avail,available,34,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['avail'],['available']
Availability,// Using CAS for an atomic load has a better chance of succeeding under high; // contention situations. So use it if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:117,avail,available,117,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['avail'],['available']
Availability,"// Using this TH1* of fractinal stat errors,; // create a set of constraint terms:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:37,error,errors,37,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['error'],['errors']
Availability,// Using zext to expand a narrow element won't work for non-zero; // insertions. But we can use a masked constant vector if we're; // inserting V2 into the bottom of V1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:98,mask,masked,98,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masked']
Availability,"// UsualArithmeticConversions - performs the UsualUnaryConversions on it's; // operands and then handles various conversions that are common to binary; // operators (C99 6.3.1.8). If both operands aren't arithmetic, this; // routine returns the first non-arithmetic type found. The client is; // responsible for emitting appropriate error diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:333,error,error,333,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"// Usually we should not get to this point, but the following is an attempt to; // model the cost of legalization. Currently we can only lower intrinsics with; // evl but no mask, on Power 9/10. Otherwise, we must scalarize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:174,mask,mask,174,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,1,['mask'],['mask']
Availability,"// Utility class with API similar to raw_ostream but can be cast; // to Error, e.g.:; //; // Error foo(...) {; // ...; // if (Error E = bar(...)); // return Err(""error while foo(): "") << E;; // ...; // }; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp:72,Error,Error,72,interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,4,"['Error', 'error']","['Error', 'error']"
Availability,"// Utility functions classes available for use in tailoring; // of composite (multidimensional) pdfs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:29,avail,available,29,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['avail'],['available']
Availability,"// VAARG: [valistty, valist, instty]; // This store code encodes the pointer type, rather than the value type; // this is so information only available in the pointer type (e.g. address; // spaces) is retained.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h:142,avail,available,142,interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,1,['avail'],['available']
Availability,"// VECTOR_SHUFFLE - if all the operands match the shuffle's sources,; // update the shuffle mask (and second operand if we started with unary; // shuffle) and create a new legal shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:92,mask,mask,92,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,// VECTOR_SHUFFLE doesn't support a scalable mask so use a dedicated node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,mask,mask,45,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['mask'],['mask']
Availability,"// VLAs always produce at least a -Wvla diagnostic, sometimes an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:65,error,error,65,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['error']
Availability,"// VLIWPacketizerList implements a simple VLIW packetizer using DFA. The; // packetizer works on machine basic blocks. For each instruction I in BB,; // the packetizer consults the DFA to see if machine resources are available; // to execute I. If so, the packetizer checks if I depends on any instruction; // in the current packet. If no dependency is found, I is added to current; // packet and the machine resource is marked as taken. If any dependency is; // found, a target API call is made to prune the dependence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DFAPacketizer.h:217,avail,available,217,interpreter/llvm-project/llvm/include/llvm/CodeGen/DFAPacketizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DFAPacketizer.h,1,['avail'],['available']
Availability,// VMFLT/VMFLE/VMFGT/VMFGE raise exception for qNan. Generate a mask to only; // active when both input elements are ordered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:64,mask,mask,64,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,// VOP3 dst op_sel (share mask with OP_SEL_1),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h:26,mask,mask,26,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,1,['mask'],['mask']
Availability,// VP operations in which all vector elements are disabled - either by; // determining that the mask is all false or that the EVL is 0 - can be; // eliminated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,mask,mask,96,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,// VP ops already have an explicit mask and AVL. When expanding from non-VP; // attach those additional inputs here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VVPISelLowering.cpp:35,mask,mask,35,interpreter/llvm-project/llvm/lib/Target/VE/VVPISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VVPISelLowering.cpp,2,['mask'],['mask']
Availability,// VPERMIL2 Operation.; // Bits[3] - Match Bit.; // Bits[2:1] - (Per Lane) PD Shuffle Mask.; // Bits[2:0] - (Per Lane) PS Shuffle Mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:86,Mask,Mask,86,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,6,['Mask'],['Mask']
Availability,"// VPHeaderPHIRecipes must be kept in the phi section of HeaderVPBB. In; // the following cases, VPHeaderPHIRecipes may be created after non-phi; // recipes and need to be moved to the phi section of HeaderVPBB:; // * tail-folding (non-phi recipes computing the header mask are; // introduced earlier than regular header phi recipes, and should appear; // after them); // * Optimizing truncates to VPWidenIntOrFpInductionRecipe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:269,mask,mask,269,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['mask'],['mask']
Availability,// VPMOVWB is only available with avx512bw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,avail,available,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['avail'],['available']
Availability,"// VPPERM Mask Operation; // Bits[4:0] - Byte Index (0 - 31); // Bits[7:5] - Permute Operation (0 - Source byte, 4 - ZERO)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:10,Mask,Mask,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Mask'],['Mask']
Availability,"// VPStridedStoreSDNode (Chain, Data, Ptr, Offset, Stride, Mask, EVL); // VPStoreSDNode (Chain, Data, Ptr, Offset, Mask, EVL); // VPStridedLoadSDNode (Chain, Ptr, Offset, Stride, Mask, EVL); // VPLoadSDNode (Chain, Ptr, Offset, Mask, EVL); // Mask is a vector of i1 elements;; // the type of EVL is TLI.getVPExplicitVectorLengthTy().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:59,Mask,Mask,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,5,['Mask'],['Mask']
Availability,"// VPT Masks are actually encoded as a series of invert/don't invert bits,; // rather than true/false bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:7,Mask,Masks,7,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['Mask'],['Masks']
Availability,"// VS2017 and some versions of VS2019 have trouble compiling this:; // error C2976: 'std::map': too few template arguments; // VS 2019 16.x is known to work, except for 16.4/16.5 (MSC_VER 1924/1925)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:71,error,error,71,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,1,['error'],['error']
Availability,"// V_NOP will be discarded by SQ.; // Use V_MOV_B32 v?, v?. Register must be alive so use src0 of V_PERMLANE*; // which is always a VGPR and available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp:77,alive,alive,77,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,2,"['alive', 'avail']","['alive', 'available']"
Availability,"// Validate that X, Y, and Mask are bitcasts, and see through them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,Mask,Mask,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Mask'],['Mask']
Availability,// Validate that all indices in Mask are within the range of the elements; // input to the shuffle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:32,Mask,Mask,32,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['Mask'],['Mask']
Availability,"// Validate that none of the argument registers have been marked as; // reserved, if so report an error. Do the same for the return address if this; // is not a tailcall.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:98,error,error,98,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['error'],['error']
Availability,// Validate that we can get the buffer data without a fatal error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnalyzer.cpp:60,error,error,60,interpreter/llvm-project/clang/lib/Format/TokenAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnalyzer.cpp,1,['error'],['error']
Availability,// Validate the AST as soon as we have a name so we can exit early on; // failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:74,failure,failure,74,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['failure'],['failure']
Availability,"// Validate the AST before processing any imports (otherwise, untangling; // them can be error-prone and expensive). A module will have a name and; // will already have been validated, but this catches the PCH case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:89,error,error-prone,89,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['error'],['error-prone']
Availability,"// Validate the original range to attempt to get a meaningful error; // message. If it's valid, then something else is the cause and we just; // return the generic failure message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/Stencil.cpp:62,error,error,62,interpreter/llvm-project/clang/lib/Tooling/Transformer/Stencil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/Stencil.cpp,2,"['error', 'failure']","['error', 'failure']"
Availability,"// Value modifiers; ////////////////////////////////////////////////////////////////////////////////; /// Change category state by specifying the index code of the desired state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:325,error,error,325,roofit/roofitcore/inc/RooAbsCategoryLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h,1,['error'],['error']
Availability,"// Values basepri, basepri_max and faultmask are only valid for v7m.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp:35,fault,faultmask,35,interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,1,['fault'],['faultmask']
Availability,"// Variable Permute (VPERM).; // Res = VPERMV MaskV, V0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:46,Mask,MaskV,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Mask'],['MaskV']
Availability,"// Variable used to note down the DirectiveKind because mapLoopConstruct may; // change ""Kind"" variable, due to mapping of ""omp loop"" to other directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:25,down,down,25,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['down'],['down']
Availability,"// Variables created by this function are thread local. If the target does not; // support TLS, we depend on CoalesceFeaturesAndStripAtomics to downgrade it; // to non-thread-local ones, in which case we don't allow this object to be; // linked with other objects using shared memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:144,down,downgrade,144,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['down'],['downgrade']
Availability,"// Various error message that may be printed by TTreeReader depending on; // whether we are running with IMT or not",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_incomplete_entries.cxx:11,error,error,11,tree/dataframe/test/dataframe_incomplete_entries.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_incomplete_entries.cxx,4,['error'],['error']
Availability,// Various masks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:11,mask,masks,11,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['mask'],['masks']
Availability,"// Vd = vector_shuffle Va, Vb, Mask; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:31,Mask,Mask,31,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['Mask'],['Mask']
Availability,// Vector FMA ops with a mask as a fourth operand and VL as a fifth operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// Vector Mask Case,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:10,Mask,Mask,10,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['Mask'],['Mask']
Availability,// Vector Shuffle with mask as an operand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h:23,mask,mask,23,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,1,['mask'],['mask']
Availability,"// Vector arguments to VaArg functions are passed both on the stack, and; // in any available GPRs. Load the value from the stack and add the GPRs; // as live ins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:84,avail,available,84,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['avail'],['available']
Availability,"// Vector binary ops with a merge as a third operand, a mask as a fourth; // operand, and VL as a fifth operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:56,mask,mask,56,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// Vector compare producing a mask. Fourth operand is input mask. Fifth; // operand is VL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:30,mask,mask,30,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,2,['mask'],['mask']
Availability,"// Vector element insert/extract with Altivec is very expensive,; // because they require store and reload with the attendant; // processor stall for load-hit-store. Until VSX is available,; // these need to be estimated as very costly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:179,avail,available,179,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,1,['avail'],['available']
Availability,// Vector mask comparison generating mask bits for FP values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:10,mask,mask,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,2,['mask'],['mask']
Availability,// Vector mask comparison with SAE for FP values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:10,mask,mask,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['mask'],['mask']
Availability,// Vector mask registers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/velintrin.h:10,mask,mask,10,interpreter/llvm-project/clang/lib/Headers/velintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/velintrin.h,1,['mask'],['mask']
Availability,"// Vector read from all ones, scalar expects a single 1 so mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:59,mask,mask,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['mask'],['mask']
Availability,// Vector sign/zero extend with additional mask & VL operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:43,mask,mask,43,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// Vector splat address w/known mask -> scalar load; // Fold the gather to load the source vector first lane; // because it is reloading the same value each time,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:32,mask,mask,32,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['mask'],['mask']
Availability,// Vector truncating masked store with unsigned/signed saturation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:21,mask,masked,21,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['mask'],['masked']
Availability,// Vector unary ops with a mask as a second operand and VL as a third operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:27,mask,mask,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// Vector unsigned division/remainder will be simplified to shifts/masks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:67,mask,masks,67,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['mask'],['masks']
Availability,// Vector widening FMA ops with a mask as a fourth operand and VL as a fifth; // operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:34,mask,mask,34,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,"// Vectorcall x86 works subtly different than in x64, so the format is; // a bit different than the x64 version. First, all vector types (not HVAs); // are assigned, with the first 6 ending up in the [XYZ]MM0-5 registers.; // This differs from the x64 implementation, where the first 6 by INDEX get; // registers.; // In the second pass over the arguments, HVAs are passed in the remaining; // vector registers if possible, or indirectly by address. The address will be; // passed in ECX/EDX if available. Any other arguments are passed according to; // the usual fastcall rules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:495,avail,available,495,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['avail'],['available']
Availability,// Vectorization for masked interleaved accesses is only enabled for scalable; // VF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:21,mask,masked,21,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['mask'],['masked']
Availability,// Vectorizing non-consecutive loads with `llvm.masked.gather`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:48,mask,masked,48,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['mask'],['masked']
Availability,// Vectors that are passed as fixed arguments are handled differently.; // They are passed in VRs if any are available (unlike arguments passed; // through ellipses) and shadow GPRs (unlike arguments to non-vaarg; // functions),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:109,avail,available,109,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['avail'],['available']
Availability,"// Verify stack map entry. It's better to communicate a problem to the; // runtime than crash in case of in-process compilation. Currently, we do; // simple overflow checks, but we may eventually communicate other; // compilation errors this way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMaps.cpp:230,error,errors,230,interpreter/llvm-project/llvm/lib/CodeGen/StackMaps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMaps.cpp,1,['error'],['errors']
Availability,// Verify that 'CI' does not occur twice in Mask. A single 'insertelement'; // can't put an element into multiple indices.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:44,Mask,Mask,44,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['Mask'],['Mask']
Availability,"// Verify that LHS is a modifiable lvalue, and emit error if not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:52,error,error,52,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['error'],['error']
Availability,// Verify that all used registers are available with the same values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeEdit.cpp:38,avail,available,38,interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeEdit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeEdit.cpp,1,['avail'],['available']
Availability,"// Verify that each inlinable callsite of a debug-info-bearing function in a; // debug-info-bearing function has a debug location attached to it. Failure to; // do so causes assertion failures when the inliner sets up inline scope info; // (Interposable functions are not inlinable, neither are functions without; // definitions.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:146,Failure,Failure,146,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,2,"['Failure', 'failure']","['Failure', 'failures']"
Availability,"// Verify that the combination of GenTypes in a signature is supported.; // To simplify the logic for creating overloads in SemaLookup, only allow; // a signature to contain different GenTypes if these GenTypes represent; // the same number of actual scalar or vector types.; //; // Exit with a fatal error if an unsupported construct is encountered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:301,error,error,301,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['error'],['error']
Availability,// Verify that the first bit starts at a multiple of mask so that the access; // is aligned the same as the access width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// Verify that the fit result is compatible with true values within the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:72,error,error,72,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['error'],['error']
Availability,// Verify that we have an appropriate mask for a EQ or NE comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['mask'],['mask']
Availability,// Verify the shuffle has the expected (at this stage of the pyramid) mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:70,mask,mask,70,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,2,['mask'],['mask']
Availability,// VerifyParameterAttrs - Check the given attributes for an argument or return; // value of the specified type. The value V is printed in error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:138,error,error,138,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['error'],['error']
Availability,// Version Index mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:17,mask,mask,17,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['mask'],['mask']
Availability,"// Version checking functions, used to implement ObjC's @available:; // i32 @__isOSVersionAtLeast(i32, i32, i32)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:57,avail,available,57,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['avail'],['available']
Availability,"// Vertex.; // REveVector fW; // Cluster widths.; // Coord system? Errors and/or widths Wz, Wy?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveVSDStructs.hxx:67,Error,Errors,67,graf3d/eve7/inc/ROOT/REveVSDStructs.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveVSDStructs.hxx,1,['Error'],['Errors']
Availability,"// Vertex.; // TEveVector fW; // Cluster widths.; // Coord system? Errors and/or widths Wz, Wy?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveVSDStructs.h:67,Error,Errors,67,graf3d/eve/inc/TEveVSDStructs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveVSDStructs.h,1,['Error'],['Errors']
Availability,// Virtual processor selection mask for EF_CUDA_VIRTUAL_SM* values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:31,mask,mask,31,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['mask'],['mask']
Availability,"// Visit all non-def extenders. For each one, determine the offset range; // available for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:77,avail,available,77,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['avail'],['available']
Availability,// Visit all the edges and assign the count value for the instrumented; // edges and the BB. Return false on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:109,error,error,109,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['error'],['error']
Availability,"// Visit all the instructions, top-down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:35,down,down,35,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['down'],['down']
Availability,"// Visit all the nodes in topological order, working top-down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:57,down,down,57,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['down'],['down']
Availability,// Visit loops top down and assign them an index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:19,down,down,19,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['down'],['down']
Availability,"// Visit operation ""Links"" along the reduction chain top-down starting from; // the phi until LoopExitValue. We keep track of the previous item; // (PreviousLink) to tell which of the two operands of a Link will remain; // scalar and which will be reduced. For minmax by select(cmp), Link will be; // the select instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:57,down,down,57,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['down'],['down']
Availability,// Visit the function both top-down and bottom-up.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:31,down,down,31,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['down'],['down']
Availability,"// Visit the unknowns in reverse so that we can start at the values being; // stored and then we can work towards the leaves, hopefully adding more; // instructions to Predicated. Successfully terminating the loop means that; // all the unknown values have to found to be masked by predicated user(s).; // For any unpredicated values, we store them in NonPredicated so that we; // can later check whether these form a reduction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp:272,mask,masked,272,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,1,['mask'],['masked']
Availability,"// Visited will contain all the basic blocks that are in the region; // where the callee saved registers are alive:; // - Anything that is not Save or Restore -> LiveThrough.; // - Save -> LiveIn.; // - Restore -> LiveOut.; // The live-out is not attached to the block, so no need to keep; // Restore in this set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp:109,alive,alive,109,interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp,1,['alive'],['alive']
Availability,"// Visualization of Load-Op-Store fusion:; // -------------------------; // Legend:; // *-lines = Chain operand dependencies.; // |-lines = Normal operand dependencies.; // Dependencies flow down and right. n-suffix references multiple nodes.; //; // C Xn C; // * * *; // * * *; // Xn A-LD Yn TF Yn; // * * \ | * |; // * * \ | * |; // * * \ | => A--LD_OP_ST; // * * \| \; // TF OP \; // * | \ Zn; // * | \; // A-ST Zn; //; // This merge induced dependences from: #1: Xn -> LD, OP, Zn; // #2: Yn -> LD; // #3: ST -> Zn; // Ensure the transform is safe by checking for the dual; // dependencies to make sure we do not induce a loop.; // As LD is a predecessor to both OP and ST we can do this by checking:; // a). if LD is a predecessor to a member of Xn or Yn.; // b). if a Zn is a predecessor to ST.; // However, (b) can only occur through being a chain predecessor to; // ST, which is the same as Zn being a member or predecessor of Xn,; // which is a subset of LD being a predecessor of Xn. So it's; // subsumed by check (a).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:191,down,down,191,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['down'],['down']
Availability,// Volatile Setting; // - .volatile is only available for .global and .shared; // - .volatile has the same memory synchronization semantics as .relaxed.sys,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:44,avail,available,44,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,2,['avail'],['available']
Availability,// Volatile Setting; // - .volatile is only availalble for .global and .shared,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:44,avail,availalble,44,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,2,['avail'],['availalble']
Availability,"// WHEN error is zero normally is at limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:8,error,error,8,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,1,['error'],['error']
Availability,"// WIC2 is available on Windows 8 and Windows 7 SP1 with KB 2670838 installed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/Win32Splash.cxx:11,avail,available,11,core/winnt/src/Win32Splash.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/Win32Splash.cxx,2,['avail'],['available']
Availability,"// Walk (both up and down) the chain looking for another load at the real; // (aligned) offset (the alignment of the other load does not matter in; // this case). If found, then do not use the offset reduction trick, as; // that will prevent the loads from being later combined (as they would; // otherwise be duplicates).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:21,down,down,21,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['down'],['down']
Availability,// Walk all the blocks which end in an indirect branch and make the; // target address available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:87,avail,available,87,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['avail'],['available']
Availability,"// Walk back down the scope stack, (e.g. from outer lambda to inner lambda); // computing the type of the capture at each step, checking type-specific; // requirements, and adding captures if requested.; // If the variable had already been captured previously, we start capturing; // at the lambda nested within that one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:13,down,down,13,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['down'],['down']
Availability,"// Walk down from the CE to the OrigSrcExpr, and mark all immediate; // ImplicitCastExpr's as being part of ExplicitCastExpr. The original CE; // (which is a ExplicitCastExpr), and the OrigSrcExpr are not touched.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:8,down,down,8,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['down'],['down']
Availability,// Walk down the expression until we hit an implicit cast of kind; // ARCReclaimReturnedObject or an Expr that is neither a Paren nor a Cast.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:8,down,down,8,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['down'],['down']
Availability,// Walk down the graph until we run out of edges or find a path to TargetC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp:8,down,down,8,interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,1,['down'],['down']
Availability,// Walk down the left side of the tree until we get to a leaf.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp:8,down,down,8,interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,1,['down'],['down']
Availability,// Walk down the tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/DeltaTree.cpp:8,down,down,8,interpreter/llvm-project/clang/lib/Rewrite/DeltaTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/DeltaTree.cpp,1,['down'],['down']
Availability,"// Walk down to find the store and the release, which may be in either order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp:8,down,down,8,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp,1,['down'],['down']
Availability,// Walk down to the appropriate base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:8,down,down,8,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['down'],['down']
Availability,// Walk down to the base type. We don't care about qualifiers for this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:8,down,down,8,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['down'],['down']
Availability,"// Walk forwards down the list of seen instructions, so we visit defs before; // uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Float2Int.cpp:17,down,down,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Float2Int.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Float2Int.cpp,1,['down'],['down']
Availability,"// Walk the DeclTypeInfo, building the recursive type as we go.; // DeclTypeInfos are ordered from the identifier out, which is; // opposite of what we want :).; // Track if the produced type matches the structure of the declarator.; // This is used later to decide if we can fill `TypeLoc` from; // `DeclaratorChunk`s. E.g. it must be false if Clang recovers from; // an error by replacing the type with `int`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:351,recover,recovers,351,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,2,"['error', 'recover']","['error', 'recovers']"
Availability,"// Walk the post-dominator tree top-down and use a stack for each value to; // store the last value you see. When you hit a CHI from a given edge, the; // value to use as the argument is at the top of the stack, add the value to; // CHI and pop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp:36,down,down,36,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,1,['down'],['down']
Availability,// Walk through the MI to see if they should be merged into; // TargetRegion.BranchBlock (up) or SourceRegion.BranchTargetBlock (down),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp:129,down,down,129,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,1,['down'],['down']
Availability,// Walk through the instructions in MBB and remove any redundant; // instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp:55,redundant,redundant,55,interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp,1,['redundant'],['redundant']
Availability,"// Walk users of WideCanonicalIV and replace all compares of the form; // (ICMP_ULE, WideCanonicalIV, backedge-taken-count) with an; // active-lane-mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:148,mask,mask,148,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,1,['mask'],['mask']
Availability,// Warn about non-default alignment at #includes (without redundant; // warnings for the same directive in nested includes).; // The warning is delayed until the end of the file to avoid warnings; // for files that don't have any records that are affected by the modified; // alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp:58,redundant,redundant,58,interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp,1,['redundant'],['redundant']
Availability,"// Warn about the implcit mode switch. GAS does not switch modes here,; // but instead stays in the old mode, reporting an error on any following; // instructions as the mode does not exist on the target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:123,error,error,123,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['error'],['error']
Availability,// Warn instead of error because users might have makefiles written for; // gfortran (which accepts -ffp-contract=on),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Flang.cpp:19,error,error,19,interpreter/llvm-project/clang/lib/Driver/ToolChains/Flang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Flang.cpp,1,['error'],['error']
Availability,"// Warn on string literal to bool. Checks for string literals in logical; // and expressions, for instance, assert(0 && ""error here""), are; // prevented by a check in AnalyzeImplicitConversions().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:121,error,error,121,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['error'],['error']
Availability,// Warnings which have been upgraded to errors do not prevent compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:40,error,errors,40,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,1,['error'],['errors']
Availability,"// Wasm throw and catch instructions can throw and catch multiple values, but; // that requires multivalue support in the toolchain, which is currently not; // very reliable. We instead throw and catch a pointer to a struct value of; // type 'struct __WasmLongjmpArgs', which is defined in Emscripten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:165,reliab,reliable,165,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['reliab'],['reliable']
Availability,"// Watch out for a RowAddress that is in the middle of a line table entry; // in the DWARF. If we pass an address in between two line table entries; // we will get a RowIndex for the previous valid line table row which won't; // be contained in our function. This is usually a bug in the DWARF due to; // linker problems or LTO or other DWARF re-linking so it is worth emitting; // an error, but not worth stopping the creation of the GSYM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp:385,error,error,385,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp,1,['error'],['error']
Availability,// Wavefront 32 is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h:19,avail,available,19,interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,1,['avail'],['available']
Availability,"// We *could* handle shifted masks here, but doing so would require an; // 'and' operation to fix up the low-order bits so we would trade; // shr+and for bfe+and, which has the same throughput",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:29,mask,masks,29,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['mask'],['masks']
Availability,"// We actually need to generate a rotation if we have a non-zero rotation; // factor or, in the Repl32 case, if we care about any of the; // higher-order replicated bits. In the latter case, we generate a mask; // backward so that it actually includes the entire 64 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:205,mask,mask,205,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// We add a technical suffix for each unnamed section/fill. It does not; // affect the output, but allows us to map them by name in the code and; // report better error messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:163,error,error,163,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,1,['error'],['error']
Availability,// We allow LE non-masked loads to change the type (for example use a vldrb.8; // as opposed to a vldrw.32). This can allow extra addressing modes or; // alignments for what is otherwise an equivalent instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:19,mask,masked,19,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,2,['mask'],['masked']
Availability,"// We allow the ""register"" storage class on exception variables because; // GCC did, but we drop it completely. Any other storage class is an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:142,error,error,142,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['error'],['error']
Availability,"// We allow undefs in matching, but this transform removes those for safety.; // Demanded elements analysis should be able to recover some/all of that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:126,recover,recover,126,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['recover'],['recover']
Availability,// We already have a variable template specialization with these template; // arguments.; // FIXME: Check for specialization vs. instantiation errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:143,error,errors,143,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['error'],['errors']
Availability,// We already know the block is live; // Mark the variable known alive in this bb,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp:65,alive,alive,65,interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,1,['alive'],['alive']
Availability,"// We already know this is not an init-statement within a for loop, so; // if we are parsing a C++11 range-based for loop, we should treat this; // expression statement as being a discarded value expression because; // we will err below. This way we do not warn on an unused expression; // that was an error in the first place, like with: for (expr : expr);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp:302,error,error,302,interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,1,['error'],['error']
Availability,"// We already printed an error, and it's likely impossible to recover,; // so don't try to parse this method later.; // Skip over the rest of the decl and back to somewhere that looks; // reasonable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp:25,error,error,25,interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp,2,"['error', 'recover']","['error', 'recover']"
Availability,// We also have to update the final source mask in this case because; // it may need to undo the above swap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:43,mask,mask,43,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We also need to add the weight variable of the original dataset if; // it's not added yet, again to query the error attributes correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:113,error,error,113,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['error'],['error']
Availability,// We also need to null out the inner AM so that when the object gets; // destroyed as invalid we don't try to clear the inner AM again. At that; // point we won't be able to reliably walk the loops for this function and; // only clear results associated with those loops the way we do here.; // FIXME: Making InnerAM null at this point isn't very nice. Most analyses; // try to remain valid during invalidation. Maybe we should add an; // `IsClean` flag?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp:175,reliab,reliably,175,interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp,1,['reliab'],['reliably']
Availability,"// We also skip empty results. If any of the results could be external and; // the currently available results are empty, then all of the results are; // external and we skip it above. So the only way we get here with an empty; // results is when no results could have been external *and* we have; // external results.; //; // FIXME: While we might want to start emitting on-disk entries for negative; // lookups into a decl context as an optimization, today we *have* to skip; // them because there are names with empty lookup results in decl contexts; // which we can't emit in any stable ordering: we lookup constructors and; // conversion functions in the enclosing namespace scope creating empty; // results for them. This in almost certainly a bug in Clang's name lookup,; // but that is likely to be hard or impossible to fix and so we tolerate it; // here by omitting lookups with empty results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:93,avail,available,93,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,2,"['avail', 'toler']","['available', 'tolerate']"
Availability,// We also want to be able to mask out the preserved bits for asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:30,mask,mask,30,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,1,['mask'],['mask']
Availability,// We always have a glue node for the mask at v0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// We always return 'error' for this, as we're done with this; // statement and don't need to match the 'instruction.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:21,error,error,21,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,2,['error'],['error']
Availability,"// We apply all of the visitors in order, and concatenate errors; // appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/LogBuilderConsumer.cpp:58,error,errors,58,interpreter/llvm-project/llvm/lib/XRay/LogBuilderConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/LogBuilderConsumer.cpp,1,['error'],['errors']
Availability,"// We appreciate the error message about an unknown flag (or do we? if not; // we should switch to a different DiagEngine for parsing the flags).; // But in general we'll happily go on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:21,error,error,21,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['error'],['error']
Availability,"// We are applying the transformation; // Invoke instructions are special in that their result value is not; // available along their unwind edge. The code below tests to see whether; // DomBB dominates the value, so adjust DomBB to the normal destination; // block, which is effectively where the value is first usable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:112,avail,available,112,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['avail'],['available']
Availability,// We are constructing the OptimizationRemarkEmitter on the fly rather than; // using the analysis pass to avoid building DominatorTree and LoopInfo which; // are not available this late in the IR pipeline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp:167,avail,available,167,interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,1,['avail'],['available']
Availability,"// We are either TSK_Undeclared or; // TSK_ExplicitSpecialization.; // Note: This might be ok, the body might be defined; // in a library, and all we have seen is the; // header file.; //::Error(""TClingCallFunc::make_wrapper"",; // ""Cannot make wrapper for a dependent function ""; // ""template explicit specialization which is declared ""; // ""but not defined!"");; // return 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx:189,Error,Error,189,core/metacling/src/TClingCallFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx,1,['Error'],['Error']
Availability,"// We are either TSK_Undeclared or; // TSK_ExplicitSpecialization.; // Note: This might be ok, the body might be defined; // in a library, and all we have seen is the; // header file.; //::Error(""TClingCallFunc::make_wrapper"",; // ""Cannot make wrapper for a function template ""; // ""explicit specialization which is declared ""; // ""but not defined!"");; // return 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx:189,Error,Error,189,core/metacling/src/TClingCallFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx,2,['Error'],['Error']
Availability,"// We are expecting an soffset operand,; // but let matcher handle the error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp:71,error,error,71,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,1,['error'],['error']
Availability,"// We are extracting a subvector from a shuffle. Remove excess elements from; // the 1st shuffle mask to eliminate the extract.; //; // This transform is conservatively limited to identity extracts because we do; // not allow arbitrary shuffle mask creation as a target-independent transform; // (because we can't guarantee that will lower efficiently).; //; // If the extracting shuffle has an undef mask element, it transfers to the; // new shuffle mask. Otherwise, copy the original mask element. Example:; // shuf (shuf X, Y, <C0, C1, C2, undef, C4>), undef, <0, undef, 2, 3> -->; // shuf X, Y, <C0, undef, C2, undef>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:97,mask,mask,97,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,5,['mask'],['mask']
Availability,// We are going to enumerate all the register mask slots contained in LI.; // Start with a binary search of RegMaskSlots to find a starting point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:46,mask,mask,46,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['mask'],['mask']
Availability,// We are going to infer semantics of a library function based on mapping it; // to an LLVM intrinsic. Check that the library function is available from; // this callbase and in this environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:138,avail,available,138,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['avail'],['available']
Availability,"// We are looking at:; // Def = INSERT_SUBREG v0, v1, sub1; // There are two cases:; // 1. DefSubReg == sub1, get v1.; // 2. DefSubReg != sub1, the value may be available through v0.; // #1 Check if the inserted register matches the required sub index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:161,avail,available,161,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['avail'],['available']
Availability,// We are looking for a mask such that all even elements are from; // one vector and all odd elements from the other.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:24,mask,mask,24,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['mask'],['mask']
Availability,"// We are looking for a pattern of, and finding the minimal acceptable cost:; // reduce(mul(ext(A), ext(B))) or; // reduce(mul(A, B)) or; // reduce(ext(A)) or; // reduce(A).; // The basic idea is that we walk down the tree to do that, finding the root; // reduction instruction in InLoopReductionImmediateChains. From there we find; // the pattern of mul/ext and test the cost of the entire pattern vs the cost; // of the components. If the reduction cost is lower then we return it for the; // reduction instruction and 0 for the other instructions in the pattern. If; // it is not we return an invalid cost specifying the orignal cost method; // should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:209,down,down,209,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['down'],['down']
Availability,"// We are looking for masks like; // [0, 1, 0, 1] or [2, 3, 2, 3] or [4, 5, 6, 7, 4, 5, 6, 7] where any element; // might be replaced by 'undefined'. BlockIndices will eventually contain; // lane indices of the duplicated block (i.e. [0, 1], [2, 3] and [4, 5, 6, 7]; // for the above examples)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:22,mask,masks,22,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['masks']
Availability,"// We are looking for the following pattern which basically extracts several; // continuous bits from the source value and places it from the LSB of the; // destination value, all other bits of the destination value or set to zero:; //; // Value2 = AND Value, MaskImm; // SRL Value2, ShiftImm; //; // with MaskImm >> ShiftImm to search for the bit width.; //; // This gets selected into a single UBFM:; //; // UBFM Value, ShiftImm, Log2_64(MaskImm); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:260,Mask,MaskImm,260,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,3,['Mask'],['MaskImm']
Availability,"// We are looking for the situation where there are actually still more; // entries to read in the friend. The following checks if the current entry to read; // is greater than the available entries in the dataset. If not, then we know there; // are more entries left in the friend.; //; // GetEntriesFast gives us a single handle to assess all the following:; // * If the friend is a TTree, it returns the total number of entries; // * If it is a TChain, then two more scenarios may occur:; // - If we have processed until the last file, then it returns the total; // number of entries.; // - If we have not processed all files yet, then it returns TTree::kMaxEntries.; // Thus, fEntry will always be smaller and the warning will be issued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:181,avail,available,181,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['avail'],['available']
Availability,"// We are looking up for something on the TU scope.; // FIXME: We do not want to go through TClingClassInfo(fInterpreter) because of redundant deserializations. That; // interface will actually construct iterators and walk over the decls on the global scope. In would return the first; // occurrence of a decl with the looked up name. However, that's not what C++ lookup would do: if we want to switch; // to a more complete C++ lookup interface we need sift through the found names and pick up the declarations which; // are only fulfilling ROOT's understanding for a Data Member.; // FIXME: We should probably deprecate the TClingClassInfo(fInterpreter) interface and replace it withe something; // similar as below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:133,redundant,redundant,133,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['redundant'],['redundant']
Availability,"// We are moving a binop after a shuffle. When a shuffle has an undefined; // mask element, the result is undefined, but it is not poison or undefined; // behavior. That is not necessarily true for div/rem/shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:78,mask,mask,78,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['mask'],['mask']
Availability,// We are not able to config tile registers since the shape to config; // is not defined yet. Emit error message and continue. The function; // would not config tile registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:99,error,error,99,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['error'],['error']
Availability,"// We are not adding any register mask info here, because the stackmap doesn't; // clobber anything.; // Add scratch registers as implicit def and early clobber.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:34,mask,mask,34,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['mask'],['mask']
Availability,"// We are probably missing the ShowMember, let's; // just issue an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:67,error,error,67,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['error'],['error']
Availability,// We are removing a definition of NarrowReg which will cause; // problems in AliveBlocks. Add an implicit def that will be; // removed so that AliveBlocks are updated correctly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:78,Alive,AliveBlocks,78,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,4,['Alive'],['AliveBlocks']
Availability,"// We are shutting down, there is no point in reloading, it only triggers; // redundant deserializations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:19,down,down,19,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,2,"['down', 'redundant']","['down', 'redundant']"
Availability,// We are sorting on MDNode pointers here. For valid input IR this is ok.; // TODO: Sort on Metadata ID to avoid non-deterministic error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:131,error,error,131,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['error'],['error']
Availability,"// We are split, recurse down to our sub-branches.; //; // FIXME: This is a tail recursion, we burn stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:25,down,down,25,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['down'],['down']
Availability,// We are trying to parse a simple-type-specifier but might not get such; // a token after error recovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:91,error,error,91,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,2,"['error', 'recover']","['error', 'recovery']"
Availability,"// We are trying to stop parser from looking for ';' in this for; // statement, therefore preventing spurious errors to be issued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:110,error,errors,110,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['error'],['errors']
Availability,"// We are unable to predict the size of debug data, so we request to write 0; // bytes. This should always return us an output stream unless CBA is already; // in an error state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:166,error,error,166,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,1,['error'],['error']
Availability,"// We aren't being strict about token-to-token equivalence of types,; // so map down to the canonical type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp:80,down,down,80,interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp,1,['down'],['down']
Availability,"// We aren't likely to be able to resolve the identifier down to a type; // now anyway, so just retain the identifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:57,down,down,57,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['down'],['down']
Availability,"// We assume the (relative) error is provided.; // We must turn it into an absolute error; // using the nominal histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:28,error,error,28,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,2,['error'],['error']
Availability,"// We assume the local GPR requirements to be ""dominated"" by the requirement; // of the TEX clause (which consumes 128 bits regs) ; ALU inst before and; // after TEX are indeed likely to consume or generate values from/for the; // TEX clause.; // Available[IDFetch].size() * 2 : GPRs required in the Fetch clause; // We assume that fetch instructions are either TnXYZW = TEX TnXYZW (need; // one GPR) or TmXYZW = TnXYZW (need 2 GPR).; // (TODO : use RegisterPressure); // If we are going too use too many GPR, we flush Fetch instruction to lower; // register pressure on 128 bits regs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineScheduler.cpp:247,Avail,Available,247,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineScheduler.cpp,1,['Avail'],['Available']
Availability,"// We avoid doing analysis-based warnings when there are errors for; // two reasons:; // (1) The CFGs often can't be constructed (if the body is invalid), so; // don't bother trying.; // (2) The code already has problems; running the analysis just takes more; // time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:57,error,errors,57,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['error'],['errors']
Availability,"// We break out of the big loop in 3 cases: when we see @end or when we see; // top-level ObjC keyword or EOF. In the former case, eat the @end. In the; // later cases, emit an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:177,error,error,177,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['error'],['error']
Availability,// We build up the blend mask while checking whether a blend is a viable way; // to reduce the shuffle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We calculate the interleave count using the following formula.; // Subtract the number of loop invariants from the number of available; // registers. These registers are used by all of the interleaved instances.; // Next, divide the remaining registers by the number of registers that is; // required by the loop, in order to estimate how many parallel instances; // fit without causing spills. All of this is rounded down if necessary to be; // a power of two. We want power of two interleave count to simplify any; // addressing operations or alignment considerations.; // We also want power of two interleave counts to ensure that the induction; // variable of the vector loop wraps to zero, when tail is folded by masking;; // this currently happens when OptForSize, in which case IC is set to 1 above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:128,avail,available,128,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,3,"['avail', 'down', 'mask']","['available', 'down', 'masking']"
Availability,// We can accept extending nodes if the mask is wider or an equal; // width to the original type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// We can allow masked calls if there's at least one vector variant, even; // if we end up scalarizing due to the cost model calculations.; // TODO: Allow other calls if they have appropriate attributes... readonly; // and argmemonly?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:16,mask,masked,16,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['mask'],['masked']
Availability,"// We can do better than a generic split operation if the extend is doing; // more than just doubling the width of the elements and the following are; // true:; // - The number of vector elements is even,; // - the source type is legal,; // - the type of a split source is illegal,; // - the type of an extended (by doubling element size) source is legal, and; // - the type of that extended source when split is legal.; //; // This won't necessarily completely legalize the operation, but it will; // more effectively move in the right direction and prevent falling down; // to scalarization in many cases due to the input vector being split too; // far.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:567,down,down,567,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['down'],['down']
Availability,// We can encounter a global variable instead of a function in rare; // situations with SamplePGO. See comments where this failure type is; // set for more details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:123,failure,failure,123,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['failure'],['failure']
Availability,"// We can extend to types bigger than f32 in two steps without changing; // the result. Since ""f16 -> f32"" is much more commonly available, give; // CodeGen the option of emitting that before resorting to a libcall.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:129,avail,available,129,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,2,['avail'],['available']
Availability,"// We can generate (solve) LVI values only for blocks that are dominated by; // the I's parent. However, to avoid generating LVI for all dominating blocks,; // that contain redundant/uninteresting information, we print LVI for; // blocks that may use this LVI information (such as immediate successor; // blocks, and blocks that contain uses of `I`).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:173,redundant,redundant,173,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['redundant'],['redundant']
Availability,// We can get 256-bit 8 element types here without VLX being enabled. When; // this happens we will use 512-bit operations and the mask will not be; // zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:131,mask,mask,131,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,// We can get a value-dependent initializer during error recovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:51,error,error,51,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,"['error', 'recover']","['error', 'recovery']"
Availability,"// We can handle <8 x i8> vector shuffles. If the index in the mask is out of; // range, then 0 is placed into the resulting vector. So pretty much any mask; // of 8 elements can work here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:63,mask,mask,63,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['mask'],['mask']
Availability,// We can handle an insert into the last element (of a splat) via; // v(f)slide1down. This is slightly better than the vslideup insert; // lowering as it avoids the need for a vector group temporary. It; // is also better than using vmerge.vx as it avoids the need to; // materialize the mask in a vector register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:288,mask,mask,288,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,"// We can handle cases concerning bit-widening nodes containing setcc_c if; // we carefully interrogate the mask to make sure we are semantics; // preserving.; // The transform is not safe if the result of C1 << C2 exceeds the bitwidth; // of the underlying setcc_c operation if the setcc_c was zero extended.; // Consider the following example:; // zext(setcc_c) -> i32 0x0000FFFF; // c1 -> i32 0x0000FFFF; // c2 -> i32 0x00000001; // (shl (and (setcc_c), c1), c2) -> i32 0x0001FFFE; // (and setcc_c, (c1 << c2)) -> i32 0x0000FFFE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:108,mask,mask,108,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We can have multiple diagnostics sharing one diagnostic client.; // Get the total number of warnings/errors from the client.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:104,error,errors,104,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['errors']
Availability,// We can move Repl in HoistPt only when all operands are available.; // The order in which hoistings are done may influence the availability; // of operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp:58,avail,available,58,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,2,['avail'],"['availability', 'available']"
Availability,"// We can not forward declared nested classes (well we might be able to do so for; // the one nested in a namespace but it is not clear yet if we can really reliably; // find this information)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx:157,reliab,reliably,157,tree/treeplayer/src/TTreeProxyGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx,1,['reliab'],['reliably']
Availability,"// We can only benefit if req at least 7-bit for the mask. We; // don't want to replace shl of 1,2,3 as they can be implemented; // with lea/add.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We can only combine unary and binary shuffle mask cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:48,mask,mask,48,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We can only do this if both the start and end of the mask are in the; // same halfword.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:56,mask,mask,56,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['mask'],['mask']
Availability,"// We can only remove the loop if there is a preheader that we can branch from; // after removing it. Also, if LoopSimplify form is not available, stay out; // of trouble.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDeletion.cpp:136,avail,available,136,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDeletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDeletion.cpp,1,['avail'],['available']
Availability,// We can remove the select by ensuring the load zeros all lanes the; // select would have. We determine this by proving there is no overlap; // between the load and select masks.; // (i.e (load_mask & select_mask) == 0 == no overlap),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:173,mask,masks,173,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['mask'],['masks']
Availability,"// We can shuffle with up to 2 half vectors, set the new 'half'; // shuffle mask accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:76,mask,mask,76,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We can tolerate different CPUs in many cases, notably when one CPU; // supports a strict superset of another. When allowing compatible; // differences skip this check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:10,toler,tolerate,10,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['toler'],['tolerate']
Availability,// We can trim down the list!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:15,down,down,15,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,1,['down'],['down']
Availability,// We can use the 32-bit andi/andis technique if the mask does not; // require any higher-order bits. This can save an instruction compared; // to always using the general 64-bit technique.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,"// We can't PushDeclContext, because we go up and the routine that pops; // the DeclContext assumes that we drill down always.; // We have to be on the global context. At that point we are in a; // wrapper function so the parent context must be the global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/ClingRAII.h:114,down,down,114,core/metacling/src/ClingRAII.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/ClingRAII.h,2,['down'],['down']
Availability,"// We can't PushDeclContext, because we go up and the routine that pops; // the DeclContext assumes that we drill down always.; // We have to be on the global context. At that point we are in a; // wrapper function so the parent context must be the global.; // This is needed to solve potential issues when using #include ""myFile.C+""; // after a scope declaration like:; // void Check(TObject* obj) {; // if (obj) cout << ""Found the referenced object\n"";; // else cout << ""Error: Could not find the referenced object\n"";; // }; // #include ""A.C+""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:114,down,down,114,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,2,"['Error', 'down']","['Error', 'down']"
Availability,"// We can't PushDeclContext, because we go up and the routine that; // pops the DeclContext assumes that we drill down always.; // We have to be on the global context. At that point we are in a; // wrapper function so the parent context must be the global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ClingPragmas.cpp:114,down,down,114,interpreter/cling/lib/Interpreter/ClingPragmas.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ClingPragmas.cpp,1,['down'],['down']
Availability,"// We can't assume a canonical shuffle mask, so try the commuted version too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,mask,mask,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We can't commute a trivial mask (there is no way to represent an all-zero; // mask).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:30,mask,mask,30,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,2,['mask'],['mask']
Availability,"// We can't compare the covariance matrix in these next cases, because it is; // externally provided. Still, it's okay because the parameter values and; // errors are compared, where the errors are inferred from the external; // covariance matrix.; // Compare batch mode vs. scalar mode for SumW2 fits on UNWEIGHTED datasets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:156,error,errors,156,roofit/roofitcore/test/testSumW2Error.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx,2,['error'],['errors']
Availability,// We can't determine the liveness info if LIS isn't available. Early return; // in that case and always assume SCC is live.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerWWMCopies.cpp:53,avail,available,53,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerWWMCopies.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerWWMCopies.cpp,1,['avail'],['available']
Availability,"// We can't display the parentheses, so just dig the; // warning/error and return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:65,error,error,65,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['error'],['error']
Availability,"// We can't easily fold ASHR into a shuffle, but if it was feeding a; // PACKSS then it was likely being used for sign-extension for a; // truncation, so just peek through and adjust the mask accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:187,mask,mask,187,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We can't find a module, error out here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:27,error,error,27,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['error']
Availability,"// We can't look at FD->getPreviousDecl() because it may not have been set; // if we're in a dependent context. If the function is known to be a; // redeclaration, we will have narrowed Previous down to the right decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:195,down,down,195,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['down'],['down']
Availability,"// We can't lower via VECTOR_SHUFFLE because it requires constant shuffle; // masks, nor can we lower via BUILD_VECTOR & EXTRACT_VECTOR_ELT because; // EXTRACT_VECTOR_ELT can't extract i64's on MIPS32.; // Instead we lower to MipsISD::VSHF and match from there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:78,mask,masks,78,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,1,['mask'],['masks']
Availability,"// We can't read the file even from RealFS, this is clearly an error,; // but we'll just leave the current VFS as is and let clang's code; // figure out what to do with missing PCH.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:63,error,error,63,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['error'],['error']
Availability,// We can't recover from it being declared as a typedef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:12,recover,recover,12,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['recover'],['recover']
Availability,// We can't recover from this; the declaration might have already; // been used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:12,recover,recover,12,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['recover'],['recover']
Availability,// We can't recover unless there's a dependent scope specifier preceding the; // template name.; // FIXME: Typo correction?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:12,recover,recover,12,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['recover'],['recover']
Availability,"// We can't reliably skip over a mem-initializer-id, because it could be; // a template-id involving not-yet-declared names. Given:; //; // S ( ) : a < b < c > ( e ); //; // 'e' might be an initializer or part of a template argument, depending; // on whether 'b' is a template.; // Track whether we might be inside a template argument. We can give; // significantly better diagnostics if we know that we're not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp:12,reliab,reliably,12,interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp,1,['reliab'],['reliably']
Availability,"// We can't return success/failure, only the old value,; // let LLVM add the comparison",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:27,failure,failure,27,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['failure'],['failure']
Availability,"// We can't slide this mask vector down, indexed by its i1 elements.; // This poses a problem when we wish to extract a scalable vector which; // can't be re-expressed as a larger type. Just choose the slow path and; // extend to a larger type, then truncate back down.; // TODO: We could probably improve this when extracting certain fixed; // from fixed, where we can extract as i8 and shift the correct element; // right to reach the desired subvector?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:23,mask,mask,23,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,3,"['down', 'mask']","['down', 'mask']"
Availability,"// We can't slide this mask vector up indexed by its i1 elements.; // This poses a problem when we wish to insert a scalable vector which; // can't be re-expressed as a larger type. Just choose the slow path and; // extend to a larger type, then truncate back down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:23,mask,mask,23,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,"['down', 'mask']","['down', 'mask']"
Availability,"// We can't trust the high bits at this point, so clear them.; // TODO: Skip masking high bits if def is known boolean.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:77,mask,masking,77,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['mask'],['masking']
Availability,"// We can't use S_MOV_B32 directly, because there is no way to specify m0 as; // the destination register.; //; // We can't use CopyToReg, because MachineCSE won't combine COPY instructions,; // so we will end up with redundant moves to m0.; //; // We use a pseudo to ensure we emit s_mov_b32 with m0 as the direct result.; // A Null SDValue creates a glue result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:218,redundant,redundant,218,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['redundant'],['redundant']
Availability,// We can't verify call instructions as they can contain arbitrary implicit; // register and register mask operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp:102,mask,mask,102,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,1,['mask'],['mask']
Availability,"// We cannot EXPECT_EQ in this test, because we compare actually different; // calculations. The multiple additions and FMA operations involved in the; // calculation of the multiple parts introduces different rounding errors; // on the CPU level than the single calculation over all events at once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:219,error,errors,219,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,1,['error'],['errors']
Availability,// We cannot backward compute values used to calculate; // GRANULATED_WAVEFRONT_SGPR_COUNT. Hence the original values for following; // directives can't be computed:; // .amdhsa_reserve_vcc; // .amdhsa_reserve_flat_scratch; // .amdhsa_reserve_xnack_mask; // They take their respective default values if not specified in the assembly.; //; // GRANULATED_WAVEFRONT_SGPR_COUNT; // = f(NEXT_FREE_SGPR + VCC + FLAT_SCRATCH + XNACK_MASK); //; // We compute the inverse as though all directives apart from NEXT_FREE_SGPR; // are set to 0. So while disassembling we consider that:; //; // GRANULATED_WAVEFRONT_SGPR_COUNT; // = f(NEXT_FREE_SGPR + 0 + 0 + 0); //; // The disassembler cannot recover the original values of those 3 directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp:681,recover,recover,681,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp,1,['recover'],['recover']
Availability,// We cannot change to SPMD mode if the runtime functions aren't availible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:65,avail,availible,65,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['avail'],['availible']
Availability,"// We cannot do this with a single instruction, so we'll use two. The; // problem is that we're not free to choose both a rotation amount and mask; // start and end independently. We can choose an arbitrary mask start and; // end, but then the rotation amount is fixed. Rotation, however, can be; // inverted, and so by applying an ""inverse"" rotation first, we can get the; // desired result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:142,mask,mask,142,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,4,['mask'],['mask']
Availability,"// We cannot format this line; if the reason is that the line had a; // parsing error, remember that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:80,error,error,80,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['error'],['error']
Availability,// We cannot hoist the repairing code in the predecessor.; // Split the edge.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:23,repair,repairing,23,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['repair'],['repairing']
Availability,"// We cannot let the higher word of DefaultStyle be equal to 0xFFFF.; // In such a case, whole object (in .res file) is equivalent to a; // DIALOGEX. It might lead to access violation/segmentation fault in; // resource readers. For example,; // 1 DIALOG 0, 0, 0, 65432; // STYLE 0xFFFF0001 {}; // would be compiled to a DIALOGEX with 65432 controls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:197,fault,fault,197,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,1,['fault'],['fault']
Availability,// We cannot recover from llvm errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp:13,recover,recover,13,interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp,2,"['error', 'recover']","['errors', 'recover']"
Availability,"// We cannot recover from llvm errors. When reporting a fatal error, exit; // with status 70 to generate crash diagnostics. For BSD systems this is; // defined as an internal software error. Otherwise, exit with status 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:13,recover,recover,13,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,8,"['error', 'recover']","['error', 'errors', 'recover']"
Availability,// We cannot trust the source range from the value because there was a; // parse error. Track the range manually -- the end of the directive is the; // end of the condition range.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:81,error,error,81,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,1,['error'],['error']
Availability,"// We cannot use #pragma clang module import because the on-demand modules; // may load a module in the middle of a function body for example. In this; // case this triggers an error:; // fatal error: import of module '...' appears within function '...'; //; // if (declare(""#pragma clang module import \"""" + M->Name + ""\"""") ==; // kSuccess); // return true;; // FIXME: What about importing submodules such as std.blah. This disables; // this functionality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:177,error,error,177,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,2,['error'],['error']
Availability,"// We check for partially redundant case.; // So far, we support cases with only two predecessors; // to avoid increasing the number of instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:26,redundant,redundant,26,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,1,['redundant'],['redundant']
Availability,"// We check the larger class QPR instead of just the legal class; // MQPR, to more accurately report errors when using Q registers; // outside of the allowed range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:101,error,errors,101,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['error'],['errors']
Availability,// We consider the operation a failure if no characters were consumed; // successfully.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:31,failure,failure,31,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,2,['failure'],['failure']
Availability,"// We could also allow loops with known trip counts without mustprogress,; // but ScalarEvolution may not be available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:109,avail,available,109,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['avail'],['available']
Availability,"// We could copy the data only if we need to apply a relocation to it. After; // testing, it seems there is no performance downside to doing the copy; // unconditionally, and it makes the code simpler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:123,down,downside,123,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,2,['down'],['downside']
Availability,"// We could dump the deallocation function used in case of error, but it's; // usually not that interesting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp:59,error,error,59,interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp,1,['error'],['error']
Availability,// We could import from the current TU without error. But previously we; // already had imported a Decl as `ToD` from another TU (with another; // ASTImporter object) and with an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:47,error,error,47,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,2,['error'],['error']
Availability,"// We could not update the meta data for this block on the file.; // This is not fatal as this only means that we won't get it 'right'; // if we ever need to Recover the file before the block is actually; // (attempted to be reused.; // coverity[unchecked_value]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:158,Recover,Recover,158,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['Recover'],['Recover']
Availability,// We could really use specific intrinsic classes for masked loads; // and stores in IntrinsicInst.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:54,mask,masked,54,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['mask'],['masked']
Availability,"// We could reset all the location values too; however either loadFromArray; // or setMPhis should be called before this object is re-used. Just; // clear Masks, they're definitely not needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:155,Mask,Masks,155,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['Mask'],['Masks']
Availability,// We could see an undeduced auto type here during error recovery.; // Just ignore it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:51,error,error,51,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,"['error', 'recover']","['error', 'recovery']"
Availability,"// We could speed-up some of the search by adding (the equivalent of); //; // if (cl->GetState() == kInterpreter) return cl; //; // In this case, if a ROOT dictionary was available when the TClass; // was first requested it would have been used and if a ROOT dictionary is; // loaded later on TClassTable::Add will take care of updating the TClass.; // So as far as ROOT dictionary are concerned, if the current TClass is; // in interpreted state, we are sure there is nothing to load.; //; // However (see TROOT::LoadClass), the TClass can also be loaded/provided; // by a user provided TClassGenerator. We have no way of knowing whether; // those do (or even can) behave the same way as the ROOT dictionary and; // have the 'dictionary is now available for use' step informs the existing; // TClass that their dictionary is now available.; //we may pass here in case of a dummy class created by TVirtualStreamerInfo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:171,avail,available,171,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,['avail'],['available']
Availability,"// We couldn't handle the requested integer size so we fallback by breaking; // the request down into several, smaller, integers.; // Since sizes greater or equal to ""Size"" are invalid, we use the greatest; // power of 2 that is less than ""Size"" as our largest piece of granularity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAsmStreamer.cpp:92,down,down,92,interpreter/llvm-project/llvm/lib/MC/MCAsmStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAsmStreamer.cpp,1,['down'],['down']
Availability,"// We currently don't have a way to correctly allocate LDS objects that; // aren't directly associated with a kernel. We do force inlining of; // functions that use local objects. However, if these dead functions are; // not eliminated, we don't want a compile time error. Just emit a warning; // and a trap, since there should be no callable path here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:266,error,error,266,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,2,['error'],['error']
Availability,"// We currently have two techniques for handling results with zeros: early; // masking (the default) and late masking. Late masking is sometimes more; // efficient, but because the structure of the bit groups is different, it; // is hard to tell without generating both and comparing the results. With; // late masking, we ignore zeros in the resulting value when inserting each; // set of bit groups, and then mask in the zeros at the end. With early; // masking, we only insert the non-zero parts of the result at every step.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:79,mask,masking,79,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,6,['mask'],"['mask', 'masking']"
Availability,// We currently limit the resource kinds to 64 and below so that we can use; // uint64_t for Masks,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:93,Mask,Masks,93,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['Mask'],['Masks']
Availability,"// We currently support LCSSA PHI nodes in the outer loop exit, if their; // incoming values do not come from the outer loop latch or if the; // outer loop latch has a single predecessor. In that case, the value will; // be available if both the inner and outer loop conditions are true, which; // will still be true after interchanging. If we have multiple predecessor,; // that may not be the case, e.g. because the outer loop latch may be executed; // if the inner loop is not executed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:224,avail,available,224,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['avail'],['available']
Availability,// We define the XLC compatibility macros only on AIX and Linux since XLC; // was never available on any other platforms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:88,avail,available,88,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,1,['avail'],['available']
Availability,// We destructively modify AvailableIn as we traverse the block instruction; // by instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:27,Avail,AvailableIn,27,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['Avail'],['AvailableIn']
Availability,// We did not have a definition in this block before: store the phi's vreg; // as this block downward exposed def.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwiftErrorValueTracking.cpp:93,down,downward,93,interpreter/llvm-project/llvm/lib/CodeGen/SwiftErrorValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwiftErrorValueTracking.cpp,1,['down'],['downward']
Availability,"// We didn't find a constant load, fallback to a shuffle mask decode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp:57,mask,mask,57,interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,1,['mask'],['mask']
Availability,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:26,recover,recovery,26,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,4,['recover'],['recovery']
Availability,// We didn't find a semi and we error'ed out. Skip until a ';' or '@'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:32,error,error,32,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['error'],['error']
Availability,"// We didn't lifetime-extend, so don't go any further; we don't need more; // warnings or errors on inner temporaries within this one's initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:90,error,errors,90,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['error'],['errors']
Availability,"// We didn't track asymmetric errors so far, so now we need to allocate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:30,error,errors,30,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['error'],['errors']
Availability,// We do not support targeting NVPTX/AMDGCN for host compilation. Throw; // an error and abort pipeline construction early so we don't trip; // asserts that assume device-side compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:79,error,error,79,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['error'],['error']
Availability,"// We do not use AlignInBits in hashing function here on purpose:; // in most cases this param for local variable is zero (for function param; // it is always zero). This leads to lots of hash collisions and errors on; // cases with lots of similar variables.; // clang/test/CodeGen/debug-info-257-args.c is an example of this problem,; // generated IR is random for each run and test fails with Align included.; // TODO: make hashing work fine with such situations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:208,error,errors,208,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,2,['error'],['errors']
Availability,"// We do not use several vncvt to truncate to mask vector. So we could; // not use PowDiff to calculate it.; // Instead we use the following instructions to truncate to mask vector:; // vand.vi v8, v8, 1; // vmsne.vi v0, v8, 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:46,mask,mask,46,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,2,['mask'],['mask']
Availability,"// We do not use the absolute error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:30,error,error,30,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,2,['error'],['error']
Availability,"// We do not use vsext/vzext to extend from mask vector.; // Instead we use the following instructions to extend from mask vector:; // vmv.v.i v8, 0; // vmerge.vim v8, v8, -1, v0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:44,mask,mask,44,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,2,['mask'],['mask']
Availability,// We do not want error diagnostics escaping here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:18,error,error,18,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,1,['error'],['error']
Availability,"// We don't actually have to clear the table. This could be a good idea; // for greater error checking, but we don't really do any anyway. We; // will just track it with next_code and overwrite old entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:88,error,error,88,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// We don't analyze GV references during attribute propagation, so; // GV with non-trivial initializer can be marked either read or; // write-only.; // Importing definiton of readonly GV with non-trivial initializer; // allows us doing some extra optimizations (like converting indirect; // calls to direct).; // Definition of writeonly GV with non-trivial initializer should also; // be imported. Not doing so will result in:; // a) GV internalization in source module (because it's writeonly); // b) Importing of GV declaration to destination module as a result; // of promotion.; // c) Link error (external declaration with internal definition).; // However we do not promote objects referenced by writeonly GV; // initializer by means of converting it to 'zeroinitializer'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:594,error,error,594,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['error'],['error']
Availability,// We don't call initialize here since there is no raw profile to read. The; // test should pass in the raw profile as structured data.; // If there is an error here then the mock symbolizer has not been; // initialized properly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:155,error,error,155,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,1,['error'],['error']
Availability,"// We don't check for an invalid 'self' in an obj-c message expression to cut; // down false positives where logging functions get information from self; // (like its class) or doing ""invalidation"" on self when the initialization; // fails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp:82,down,down,82,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,1,['down'],['down']
Availability,"// We don't check for e.g. function pointers here, since address; // availability checks should only occur when the function first decays; // into a pointer or reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:69,avail,availability,69,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['avail'],['availability']
Availability,// We don't check reg masks here as they're used only on calls:; // 1. EXEC is only considered const within one BB; // 2. Call should be a terminator instruction if present in a BB,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:22,mask,masks,22,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['mask'],['masks']
Availability,"// We don't emit errors for unterminated conditionals here,; // Lexer::LexEndOfFile can do that properly.; // Just return and let the caller lex after this #include.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:17,error,errors,17,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['error'],['errors']
Availability,"// We don't have the ability to evaluate this, since it contains a; // RecoveryExpr, so we want to fail overload resolution. Otherwise,; // we'd potentially pick up a different overload, and cause confusing; // diagnostics. SO, add a failure detail that will cause us to make this; // overload set not viable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:71,Recover,RecoveryExpr,71,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,2,"['Recover', 'failure']","['RecoveryExpr', 'failure']"
Availability,"// We don't have the ability to slide mask vectors down indexed by their i1; // elements; the smallest we can do is i8. Often we are able to bitcast to; // equivalent i8 vectors. Note that when extracting a fixed-length vector; // from a scalable one, we might not necessarily have enough scalable; // elements to safely divide by 8: v8i1 = extract nxv1i1 is valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,"['down', 'mask']","['down', 'mask']"
Availability,"// We don't have the ability to slide mask vectors up indexed by their i1; // elements; the smallest we can do is i8. Often we are able to bitcast to; // equivalent i8 vectors. Note that when inserting a fixed-length vector; // into a scalable one, we might not necessarily have enough scalable; // elements to safely divide by 8: nxv1i1 = insert nxv1i1, v4i1 is valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,"// We don't have vector operand size information, so assume operands are the; // same size as the mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:98,mask,mask,98,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,2,['mask'],['mask']
Availability,// We don't know beforehand which counters are available (e.g. 6 uops ports; // on Sandybridge but 8 on Haswell) so we report the missing counter without; // crashing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:47,avail,available,47,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,1,['avail'],['available']
Availability,"// We don't know the desired configuration for this module and don't; // necessarily even have a module map. Since ReadAST already produces; // diagnostics for these two cases, we simply error out here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:187,error,error,187,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['error']
Availability,"// We don't know the size of the RegMask, so we can't deep compare the two; // reg masks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOperand.cpp:83,mask,masks,83,interpreter/llvm-project/llvm/lib/CodeGen/MachineOperand.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOperand.cpp,1,['mask'],['masks']
Availability,// We don't need a select if we know the mask bit is a 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:41,mask,mask,41,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['mask'],['mask']
Availability,// We don't need to bother trying to break a dependency if this; // instruction has a true dependency on that register through another; // operand - we'll have to wait for it to be available regardless.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp:181,avail,available,181,interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,1,['avail'],['available']
Availability,// We don't need to do permission checking here since clang will diagnose; // any I/O errors itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-check/ClangCheck.cpp:86,error,errors,86,interpreter/llvm-project/clang/tools/clang-check/ClangCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-check/ClangCheck.cpp,1,['error'],['errors']
Availability,// We don't need to merge masks if the root is empty.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:26,mask,masks,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,// We don't need to select maskedoff if it's undef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:27,mask,maskedoff,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['maskedoff']
Availability,// We don't need vmor if the MaskedOff and the Mask are the same; // value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:29,Mask,MaskedOff,29,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,2,['Mask'],"['Mask', 'MaskedOff']"
Availability,// We don't rely on read-undef flag because in case of tentative schedule; // tracking it isn't set correctly yet. This works correctly however since; // use mask has been tracked before using LIS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRegPressure.cpp:158,mask,mask,158,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRegPressure.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRegPressure.cpp,1,['mask'],['mask']
Availability,"// We don't track enclosing template parameter levels well enough to reliably; // substitute them all within a <constraint-expression>, so print the; // parameter numbering instead for now.; // TODO: Track all enclosing template parameters and substitute them here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:69,reliab,reliably,69,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,1,['reliab'],['reliably']
Availability,"// We don't want to generate duplicated error messages in several dictionaries (when generating temporaries)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:40,error,error,40,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['error'],['error']
Availability,"// We don't want to prevent inlining because of target-cpu and -features; // attributes that were added to newer versions of LLVM/Clang: There are; // no incompatible functions in PTX, ptxas will throw errors in such cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXTargetTransformInfo.h:202,error,errors,202,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXTargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXTargetTransformInfo.h,1,['error'],['errors']
Availability,"// We don't want to reason about speculating loads. Note -- at this point; // we should have already filtered out all of the other non-speculatable; // things, like calls and stores.; // We also do not want to hoist stores because it might change the memory; // while the FaultingMI may result in faulting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:272,Fault,FaultingMI,272,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,2,"['Fault', 'fault']","['FaultingMI', 'faulting']"
Availability,// We don't want to verify LiveVariables if LiveIntervals is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp:61,avail,available,61,interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp,1,['avail'],['available']
Availability,"// We eliminate comparisons here rather than earlier because some; // transformations can change the set of available CC values and we; // generally want those transformations to have priority. This is; // especially true in the commonest case where the result of the comparison; // is used by a single in-range branch instruction, since we will then; // be able to fuse the compare and the branch instead.; //; // For example, two-address NILF can sometimes be converted into; // three-address RISBLG. NILF produces a CC value that indicates whether; // the low word is zero, but RISBLG does not modify CC at all. On the; // other hand, 64-bit ANDs like NILL can sometimes be converted to RISBG.; // The CC value produced by NILL isn't useful for our purposes, but the; // value produced by RISBG can be used for any comparison with zero; // (not just equality). So there are some transformations that lose; // CC values (while still being worthwhile) and others that happen to make; // the CC result more useful than it was originally.; //; // Another reason is that we only want to use BRANCH ON COUNT in cases; // where we know that the count register is not going to be spilled.; //; // Doing it so late makes it more likely that a register will be reused; // between the comparison and the branch, but it isn't clear whether; // preventing that would be a win or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp:108,avail,available,108,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,1,['avail'],['available']
Availability,"// We emit callback to LibraryLoadingFailed when we get error with error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp:56,error,error,56,interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp,4,['error'],['error']
Availability,"// We emit the PPC::FSELS instruction here because of type conflicts with; // the comparison operand. The FSELS instruction is defined to use an 8-byte; // comparison like the FSELD version. The fsels intrinsic takes a 4-byte; // value for the comparison. When selecting through a .td file, a type; // error is raised. Must check this first so we never break on the; // !Subtarget->isISA3_1() check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:302,error,error,302,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['error'],['error']
Availability,// We emitted a compare with an XMM/YMM result. Finish converting to a; // mask register using a vptestm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:75,mask,mask,75,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We emitted an error for the unavailable/deleted function call but keep; // the call in the AST.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:17,error,error,17,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['error'],['error']
Availability,"// We encountered an error in parsing 'decltype(...)' so lets annotate all; // the tokens in the backtracking cache - that we likely had to skip over; // to get to a token that allows us to resume parsing, such as a; // semi-colon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:21,error,error,21,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['error'],['error']
Availability,"// We expect to be able to match a bit extraction instruction if the Zbs; // extension is supported and the mask is a power of two. However, we; // conservatively return false if the mask would fit in an ANDI instruction,; // on the basis that it's possible the sinking+duplication of the AND in; // CodeGenPrepare triggered by this hook wouldn't decrease the instruction; // count and would increase code size (e.g. ANDI+BNEZ => BEXTI+BNEZ).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:108,mask,mask,108,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['mask'],['mask']
Availability,"// We expect zero and -1 to be invalid addresses in DWARF depending; // on the linker of the DWARF. This indicates a function was stripped; // and the debug info wasn't able to be stripped from the DWARF. If; // the LowPC isn't zero or -1, then we should emit an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp:263,error,error,263,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp,1,['error'],['error']
Availability,"// We fail if a failure occured",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:16,failure,failure,16,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['failure'],['failure']
Availability,"// We failed but DefinedVariable has not printed why yet.; // and because we want those to be printed _before_ the notice; // of the failure of the substitution, we need to print them here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:133,failure,failure,133,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['failure'],['failure']
Availability,"// We failed to skip this attribute's value, restore the original offset; // and return the failure status.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugInfoEntry.cpp:92,failure,failure,92,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugInfoEntry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugInfoEntry.cpp,1,['failure'],['failure']
Availability,"// We failed to write out PID, so report the error, remove the; // unique lock file, and fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:45,error,error,45,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,1,['error'],['error']
Availability,// We fall back to use stack operation when the FP_EXTEND operation; // isn't available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:78,avail,available,78,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['avail'],['available']
Availability,// We fall back to use stack operation when the FP_ROUND operation; // isn't available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:77,avail,available,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['avail'],['available']
Availability,"// We found a __device__ function with the same name and signature as NewD; // (ignoring CUDA attrs). This is an error unless that function is defined; // in a system header, in which case we simply return without making NewD; // host+device.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:113,error,error,113,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['error'],['error']
Availability,"// We found a data member but it is the wrong type; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not int \n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:81,error,error,81,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['error'],['error']
Availability,// We found a rotation. We need to slide HiV down by Rotation. Then we need; // to slide LoV up by (NumElts - Rotation).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:45,down,down,45,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['down'],['down']
Availability,"// We found an available, but not scheduled, predecessor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp:15,avail,available,15,interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp,1,['avail'],['available']
Availability,"// We found an available, but not scheduled, predecessor. If it's the; // only one we have found, keep track of it... otherwise give up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LatencyPriorityQueue.cpp:15,avail,available,15,interpreter/llvm-project/llvm/lib/CodeGen/LatencyPriorityQueue.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LatencyPriorityQueue.cpp,2,['avail'],['available']
Availability,"// We found an available, but not scheduled, successor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp:15,avail,available,15,interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp,1,['avail'],['available']
Availability,// We found some types in dependent base classes. Recover as if the user; // wrote 'typename MyClass::II' instead of 'II'. We'll fully resolve the; // lookup during template instantiation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:50,Recover,Recover,50,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Recover'],['Recover']
Availability,// We found the ranges bottom-up. Mapping expects the top-down. Reverse; // the order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:58,down,down,58,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['down'],['down']
Availability,"// We generate a shuffle of InVec and ScVec, so the shuffle mask; // should be 0,1,2,3,4,5... with the appropriate element replaced with; // elt 0 of the RHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:60,mask,mask,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['mask'],['mask']
Availability,"// We get error.; // It is possible that fseek fails but sets none of the error flags.; // If fseek failed, assume that the file position becomes indeterminate in any; // case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:10,error,error,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,2,['error'],['error']
Availability,"// We give the location of the label (IDLoc) here, because otherwise the; // lexer's next location will be used, which can be confusing. For; // example:; //; // test0: ; This function does not end properly; // ...; //; // test1: ; We would like to point to this line for error; // ... . Not this line, which can contain any instruction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp:272,error,error,272,interpreter/llvm-project/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp,1,['error'],['error']
Availability,// We got a unicode codepoint that is neither a space nor a; // a valid identifier part. Carry on as if the codepoint was; // valid for recovery purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:136,recover,recovery,136,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['recover'],['recovery']
Availability,// We got a unicode codepoint that is neither a space nor a; // a valid identifier part.; // Carry on as if the codepoint was valid for recovery purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:136,recover,recovery,136,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['recover'],['recovery']
Availability,"// We got an error, just return 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Interpreter.cpp:13,error,error,13,interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Interpreter.cpp,1,['error'],['error']
Availability,"// We had an error, the branch name had no ""."" or we simply did not find anything.; // We check if we had a branch found with the full name with a dot in it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderValue.cxx:13,error,error,13,tree/treeplayer/src/TTreeReaderValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderValue.cxx,1,['error'],['error']
Availability,// We had viable candidates and couldn't recover; let the caller diagnose; // this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:41,recover,recover,41,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['recover'],['recover']
Availability,"// We have 2 cases that would require a mask:; // 1) The block needs to be predicated, either due to a conditional; // in the scalar loop or use of an active lane mask with; // tail-folding, and we use the appropriate mask for the block.; // 2) No mask is required for the block, but the only available; // vector variant at this VF requires a mask, so we synthesize an; // all-true mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,7,"['avail', 'mask']","['available', 'mask']"
Availability,"// We have a DbgOpID for every value or for none. Tell the variable value; // tracker about it. The rest of this LiveDebugValues implementation acts; // exactly the same for DBG_INSTR_REFs as DBG_VALUEs (just, the former can; // refer to values that aren't immediately available).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:269,avail,available,269,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['avail'],['available']
Availability,"// We have a SELECT_CCMASK or BR_CCMASK comparing the condition code; // set by the CCReg instruction using the CCValid / CCMask masks,; // If the CCReg instruction is itself a ICMP testing the condition; // code set by some other instruction, see whether we can directly; // use that condition code.; // Verify that we have an ICMP against some constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:129,mask,masks,129,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['mask'],['masks']
Availability,"// We have a broken hint, check if it is possible to fix it by; // reusing PhysReg for the copy-related live-ranges. Indeed, we evicted; // some register and PhysReg may be available for the other live-ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:173,avail,available,173,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['avail'],['available']
Availability,"// We have a case where SrcReg == DstReg and we don't have $at; // available. We can't expand this case, so error out appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:67,avail,available,67,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,2,"['avail', 'error']","['available', 'error']"
Availability,"// We have a class type.; // Note: This cannot happen due to the rd->IsObject() test above.; // FIXME: Put an error message here just in case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:110,error,error,110,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['error'],['error']
Availability,"// We have a lone ""&"" or ""="" which is either a misplaced capture-default; // or the start of a capture (in the ""&"" case) with the rest of the; // capture missing. Both are an error but a misplaced capture-default; // is more likely if we don't already have a capture default.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:175,error,error,175,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['error'],['error']
Availability,"// We have a mixture of V1 and V2 in both low and high lanes. Rather than; // trying to place elements directly, just blend them and set up the final; // shuffle to place them.; // The first two blend mask elements are for V1, the second two are for; // V2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:201,mask,mask,201,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We have a pattern of the form ""(and (shl x, c2) c1)"" or; // ""(and (srl x, c2) c1)"", where c1 is a shifted mask. Try to; // transform to a pair of shifts, to save materializing c1.; // First pattern: right shift, then mask off leading bits.; // FIXME: Use demanded bits?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:109,mask,mask,109,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['mask'],['mask']
Availability,"// We have a trie data structure and need a way to walk it that is compatible; // with the C++ iterator model. The solution is a non-recursive depth first; // traversal where the iterator contains a stack of parent nodes along with a; // string that is the accumulation of all edge strings along the parent chain; // to this point.; //; // There is one ""export"" node for each exported symbol. But because some; // symbols may be a prefix of another symbol (e.g. _dup and _dup2), an export; // node may have child nodes too.; //; // The algorithm for moveNext() is to keep moving down the leftmost unvisited; // child until hitting a node with no children (which is an export node or; // else the trie is malformed). On the way down, each node is pushed on the; // stack ivar. If there is no more ways down, it pops up one and tries to go; // down a sibling path until a childless node is reached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:579,down,down,579,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,4,['down'],['down']
Availability,"// We have a weight array, use that info; // Return symmetric error on current bin calculated either from Poisson statistics or from SumOfWeights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:62,error,error,62,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,2,['error'],['error']
Availability,"// We have already accounted for this expression.; // If we can find an existing value for this scev available at the point ""At""; // then consider the expression cheap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:101,avail,available,101,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['avail'],['available']
Availability,"// We have already converted the expression to an integral or enumeration; // type, when we parsed the switch condition. There are cases where we don't; // have an appropriate type, e.g. a typo-expr Cond was corrected to an; // inappropriate-type expr, we just return an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:271,error,error,271,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['error'],['error']
Availability,// We have already error checked this in the driver.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp:19,error,error,19,interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp,1,['error'],['error']
Availability,// We have an AST that has invalid nodes due to compiler errors.; // Use a crash recovery thread for protection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:57,error,errors,57,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,2,"['error', 'recover']","['errors', 'recovery']"
Availability,"// We have an emulated class that has no TStreamerInfo, this; // means it was created to insert a (default) rule. Consequently; // the error message about the missing dictionary was not printed.; // For consistency, let's print it now!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:135,error,error,135,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,1,['error'],['error']
Availability,"// We have an error, now let's go back up through history and show where; // the offending field came from",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:14,error,error,14,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"// We have an existing TClass object. It might be emulated; // or interpreted; we now have more information available.; // Make that available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:108,avail,available,108,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,2,['avail'],['available']
Availability,// We have an umbrella header or directory that doesn't actually include; // all of the headers within the directory it covers. Complain about; // this missing submodule and recover by forgetting that we ever saw; // this submodule.; // FIXME: Should we detect this at module load time? It seems fairly; // expensive (and rare).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:174,recover,recover,174,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['recover'],['recover']
Availability,// We have custom shuffle lowering to expose the shuffle mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:57,mask,mask,57,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['mask'],['mask']
Availability,"// We have enumerators for the three available cases - class, namespace and struct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:37,avail,available,37,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['avail'],['available']
Availability,"// We have exactly two strategies on indexing into stack slot here:; // 1. upwards starting from the beginning of the slot; // 2. downwards starting from the middle of the slot; // On little-endian machine, we pick 1. for right shifts and 2. for left-shift; // and vice versa on big-endian machine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:130,down,downwards,130,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['down'],['downwards']
Availability,"// We have gone through all the branches in this file and the requested basket; // doesn't appear to be in any of them. Likely a logic error / bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:135,error,error,135,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['error'],['error']
Availability,// We have no symbols resolution available. And can't do any better now in the; // case where the prevailing symbol is in a native object. It can be refined; // with linker information in the future.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:33,avail,available,33,interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,1,['avail'],['available']
Availability,"// We have some deduction failure messages. Use them to diagnose; // the function templates, and diagnose the non-template candidates; // normally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:26,failure,failure,26,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['failure'],['failure']
Availability,"// We have some number of constant-length arrays, so addr should; // have LLVM type [M x [N x [...]]]*. Build a GEP that walks; // down to the first element of addr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:131,down,down,131,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['down'],['down']
Availability,// We have some variations of rotate-and-mask instructions; // that clear higher 32-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:41,mask,mask,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['mask'],['mask']
Availability,"// We have something left to analyze. Let's make this an error case!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:57,error,error,57,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['error'],['error']
Availability,"// We have the dictionary but do not have the constructor wrapper,; // so the dictionary was not generated by rootcint (it was made either; // by cint or by some external mechanism). Let's try to create the; // object by having the interpreter call the new operator, either the; // class library is loaded and there is a default constructor we can; // call, or the class is interpreted and we will call the default; // constructor that way, or no default constructor is available and; // we fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:470,avail,available,470,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['avail'],['available']
Availability,"// We have the following case:; // template<typename> requires func(0) struct S { };; // The user probably isn't aware of the parentheses required around; // the function call, and we're only going to parse 'func' as the; // primary-expression, and complain that it is of non-bool type.; //; // However, if we're in a lambda, this might also be:; // []<typename> requires var () {};; // Which also looks like a function call due to the lambda parentheses,; // but unlike the first case, isn't an error, so this check is skipped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:496,error,error,496,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,1,['error'],['error']
Availability,// We have to do this step after AllocKind has been inferred on functions so; // we can reliably identify free-like and realloc-like functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp:88,reliab,reliably,88,interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp,1,['reliab'],['reliably']
Availability,"// We have to drill down the element name within the class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx:20,down,down,20,tree/treeplayer/src/TFormLeafInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx,1,['down'],['down']
Availability,// We have to explicitly define this move operator to copy the fields in; // reverse order (i.e. module first) to ensure the dependencies are; // protected: The old module that is being overwritten must be destroyed; // *before* the context that it depends on.; // We also need to lock the context to make sure the module tear-down; // does not overlap any other work on the context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:327,down,down,327,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,1,['down'],['down']
Availability,"// We have to explicitly store the errors that are implied by the sum of weights squared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:35,error,errors,35,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['error'],['errors']
Availability,"// We have to generate double the number of events because in the next step; // we will weight down each event by a factor of two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:95,down,down,95,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['down'],['down']
Availability,"// We have to preserve the predicating effect of %evl for this; // non-speculatable VP intrinsic.; // 1) Never discard %evl.; // 2) If this VP intrinsic will be expanded to non-VP code, make sure that; // %evl gets folded into %mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp:228,mask,mask,228,interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp,1,['mask'],['mask']
Availability,// We have to swap the uses in our half mask in one sweep.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We have two non-adjacent or clobbered inputs we need to extract from; // the source half. To do this, we need to map them into some adjacent; // dword slot in the source mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:173,mask,mask,173,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We have two ways to try to recover from this error: if the code looks; // grammatically ok (i.e. we have a comma coming up) try to continue; // parsing the rest of the initializer. This allows us to emit; // diagnostics for later elements that we find. If we don't see a comma,; // assume there is a parse error, and just skip to recover.; // FIXME: This comment doesn't sound right. If there is a r_brace; // immediately, it can't be an error, since there is no other way of; // leaving this loop except through this if.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp:30,recover,recover,30,interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,5,"['error', 'recover']","['error', 'recover']"
Availability,"// We haven't found anything, and we're not recovering from a; // different kind of error, so look for typos.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:44,recover,recovering,44,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,2,"['error', 'recover']","['error', 'recovering']"
Availability,// We hit a hard error after deciding this was not an attribute.; // FIXME: Don't parse and annotate expressions when disambiguating; // against an attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:17,error,error,17,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['error'],['error']
Availability,// We hit an error processing the import. Bail out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:13,error,error,13,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['error'],['error']
Availability,"// We ignore MissingArgCount and the return value of ParseDiagnosticArgs.; // Any errors that would be diagnosed here will also be diagnosed later,; // when the DiagnosticsEngine actually exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:82,error,errors,82,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['error'],['errors']
Availability,"// We ignore any errors that don't prevent parsing the section, since we can; // still represent such sections.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:17,error,errors,17,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,2,['error'],['errors']
Availability,"// We ignore any errors that don't prevent parsing the section, since we can; // still represent such sections. These errors are recorded via the; // WarningHandler parameter of Set.extract().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:17,error,errors,17,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,2,['error'],['errors']
Availability,"// We initally reserved the highest available SGPR pair for long branches; // now, after RA, we shift down to a lower unused one if one exists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp:36,avail,available,36,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,2,"['avail', 'down']","['available', 'down']"
Availability,// We intentionally mask away the high bits here; ElementSize may not; // fit in IdxTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,mask,mask,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['mask'],['mask']
Availability,// We iterated bottom up over the registers; flip RegPairs back to top; // down order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:75,down,down,75,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['down'],['down']
Availability,// We just loaded a module map file; check whether the module is; // available now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:69,avail,available,69,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['avail'],['available']
Availability,"// We know that all the stores are consecutive and there are no aliasing; // operations in the range. However, the values that are being stored may be; // generated anywhere before each store. To ensure we have the values; // available, we materialize the wide value and new store at the place of the; // final store in the merge sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LoadStoreOpt.cpp:226,avail,available,226,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LoadStoreOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LoadStoreOpt.cpp,1,['avail'],['available']
Availability,"// We know that getUnwindDestTokenHelper was called on LastUselessPad and; // returned nullptr (and likewise for EHPad and any of its ancestors up to; // LastUselessPad), so LastUselessPad has no information from below. Since; // getUnwindDestTokenHelper must investigate all downward paths through; // no-information nodes to prove that a node has no information like this,; // and since any time it finds information it records it in the MemoMap for; // not just the immediately-containing funclet but also any ancestors also; // exited, it must be the case that, walking downward from LastUselessPad,; // visiting just those nodes which have not been mapped to an unwind dest; // by getUnwindDestTokenHelper (the nullptr TempMemos notwithstanding, since; // they are just used to keep getUnwindDestTokenHelper from repeating work),; // any node visited must have been exhaustively searched with no information; // for it found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:276,down,downward,276,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,['down'],['downward']
Availability,"// We know that the function is non-void, but what if the return statement; // is not there in the code? It's not a compile error, we should not crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MIGChecker.cpp:124,error,error,124,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MIGChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MIGChecker.cpp,1,['error'],['error']
Availability,"// We know that this read depends on all the writes in DependentWrites.; // For each write, check if we have ReadAdvance information, and use it; // to figure out in how many cycles this read will be available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:200,avail,available,200,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,1,['avail'],['available']
Availability,"// We know there's *some* valid leaf now, so march back down the tree picking; // out the left-most element at each node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp:56,down,down,56,interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp,1,['down'],['down']
Availability,"// We logically split the layout down into a series of chunks of this size,; // which is generally the size of a pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:33,down,down,33,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,1,['down'],['down']
Availability,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:129,down,down,129,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['down'],['down']
Availability,// We loop to allow proper surrogate-pair error handling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:42,error,error,42,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp,1,['error'],['error']
Availability,"// We mask write here to teach later passes that the ith element of this; // vector is undef. Thus we can use it to reduce 128 bits reg usage,; // break false dependencies and additionally make assembly easier to read.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp:6,mask,mask,6,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We may also enter basic blocks in this function via exception handling; // control flow. Here, if we are hardening interprocedurally, we need to; // re-capture the predicate state from the throwing code. In the Itanium ABI,; // the throw will always look like a call to __cxa_throw and will have the; // predicate state in the stack pointer, so extract fresh predicate state from; // the stack pointer and make it available in SSA.; // FIXME: Handle non-itanium ABI EH models.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:417,avail,available,417,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['avail'],['available']
Availability,"// We may end up with a situation when section symbol is technically; // defined, but should not be. That happens because we explicitly; // pre-create few .debug_* sections to have accessors.; // And if these sections were not really defined in the code, but were; // referenced, we simply error out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/ELFObjectWriter.cpp:290,error,error,290,interpreter/llvm-project/llvm/lib/MC/ELFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/ELFObjectWriter.cpp,1,['error'],['error']
Availability,"// We may have a SoftFail bitmask, which specifies a mask where an encoding; // may differ from the value in ""Inst"" and yet still be valid, but the; // disassembler should return SoftFail instead of Success.; //; // This is used for marking UNPREDICTABLE instructions in the ARM world.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['mask'],['mask']
Availability,"// We may have a location metadata attached to the end of the; // instruction, and at no point should see metadata at any; // other point while processing. It's an error if so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp:164,error,error,164,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp,1,['error'],['error']
Availability,"// We may have an umbrella and forgot to add the flag. Downgrade the; // warning into an information message.; // FIXME: We should open the umbrella, extract the set of header files; // and check if they exist in the modulemap.; // FIXME: We should also check if the header files are specified in the; // modulemap file as they appeared in the rootcling invocation, i.e.; // if we passed rootcling ... -I/some/path somedir/some/header, the; // modulemap should contain module M { header ""somedir/some/header"" }; // This way we will make sure the module is properly activated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:55,Down,Downgrade,55,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['Down'],['Downgrade']
Availability,// We may have looked through a truncate so mask off any bits that; // shouldn't be part of the compare.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:44,mask,mask,44,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// We may have unresolved symbols. Use dyld to resolve the dependent; // libraries and relink.; // FIXME: We will likely have duplicated libraries as we are appending; // FIXME: This likely makes rootcling --lib-list-prefix redundant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:224,redundant,redundant,224,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['redundant'],['redundant']
Availability,// We may not have transitioned to 'release' if we hit an error.; // This case is handled elsewhere.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.cpp:58,error,error,58,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.cpp,1,['error'],['error']
Availability,"// We may read a sub range of the currently available range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:44,avail,available,44,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['avail'],['available']
Availability,"// We might be deleting a pointer to array. If so, GEP down to the; // first non-array element.; // (this assumes that A(*)[3][7] is converted to [3 x [7 x %A]]*)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:55,down,down,55,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['down'],['down']
Availability,"// We might get a parsing error if rv32e in the list, we could just skip; // that and process the rest of multi-lib configs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:26,error,error,26,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['error'],['error']
Availability,// We might have bitcast from a mask type: cast back to the original type if; // required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:32,mask,mask,32,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['mask'],['mask']
Availability,"// We might not even get the original statically-resolved method due to; // some particularly nasty casting (e.g. casts to sister classes).; // However, we should at least be able to search up and down our own class; // hierarchy, and some real bugs have been caught by checking this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:197,down,down,197,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['down'],['down']
Availability,"// We missed a property, provide some debug output and indicate failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPContext.cpp:64,failure,failure,64,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPContext.cpp,1,['failure'],['failure']
Availability,"// We must be careful with the undef elements of the sign bit mask, however:; // the mask elt can be undef iff the shift amount for that lane was undef,; // otherwise we need to sanitize undef masks to zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:62,mask,mask,62,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,3,['mask'],"['mask', 'masks']"
Availability,"// We must early-exit here to prevent any DPValues from being emitted below,; // as we have just emitted the debug values resulting from assignment; // tracking analysis, making any existing DPValues redundant (and probably; // less correct).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:200,redundant,redundant,200,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['redundant'],['redundant']
Availability,// We must map the original elements down evenly to a type with less elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:37,down,down,37,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['down'],['down']
Availability,"// We must now find another identifier, or error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp:43,error,error,43,interpreter/llvm-project/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp,1,['error'],['error']
Availability,// We must only record actions once for each TypeIdx; otherwise we'd; // try to legalize operands multiple times down the line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:113,down,down,113,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp,1,['down'],['down']
Availability,// We need AT for the 64-bit expansion in the cases where the optional; // source register is the destination register and for the superscalar; // scheduled form.; //; // If it is not available we exit if the destination is the same as the; // source register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:184,avail,available,184,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['avail'],['available']
Availability,// We need RPO here to a) report always the first error b) report errors in; // same order from run to run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:50,error,error,50,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,2,['error'],"['error', 'errors']"
Availability,// We need a constant mask on the RHS of the AND,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:22,mask,mask,22,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,// We need a constant mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:22,mask,mask,22,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,// We need a phi node if we have more than one predecessor with different; // downward defs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwiftErrorValueTracking.cpp:78,down,downward,78,interpreter/llvm-project/llvm/lib/CodeGen/SwiftErrorValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwiftErrorValueTracking.cpp,1,['down'],['downward']
Availability,"// We need a scratch register for spilling LR and for spilling CR. By default,; // we use two scratch registers to hide latency. However, if only one scratch; // register is available, we can adjust for that by not overlapping the spill; // code. However, if we need to realign the stack (i.e. have a base pointer); // and the stack frame is large, we need two scratch registers.; // Also, stack probe requires two scratch registers, one for old sp, one for; // large frame and large probe size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:174,avail,available,174,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,1,['avail'],['available']
Availability,"// We need a v16i8 for TBL, so we extend the source with a placeholder vector; // for v8i8 to get a v16i8. As the pattern we are replacing is extract +; // insert, we know that the index in the mask must be smaller than the number; // of elements in the source, or we would have an out-of-bounds access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:194,mask,mask,194,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,// We need an extra instruction but none is available,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp:44,avail,available,44,interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp,1,['avail'],['available']
Availability,"// We need record relocation if SecA != SecB. Usually SecB is same as the; // section of Fixup, which will be record the relocation as PCRel. If SecB; // is not same as the section of Fixup, it will report error. Just return; // false and then this work can be finished by handleFixup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:206,error,error,206,interpreter/llvm-project/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp,1,['error'],['error']
Availability,"// We need to add to the mask all bits from the associated bit groups.; // If Repl32 is false, we need to add bits from bit groups that have; // Repl32 true, but are trivially convertable to Repl32 false. Such a; // group is trivially convertable if it overlaps only with the lower 32; // bits, and the group has not been coalesced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// We need to check that if we cast the index down to a half, we do not; // lose precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp:46,down,down,46,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,1,['down'],['down']
Availability,"// We need to check that if we cast the index down to an i16, we do not; // lose precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp:46,down,down,46,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,1,['down'],['down']
Availability,// We need to clear the mutability bit in case we are; // destroying the node as part of a sweep in ImutAVLFactory::recoverNodes().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:116,recover,recoverNodes,116,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['recover'],['recoverNodes']
Availability,"// We need to create copies of the various registers and kill them at the; // atomic pseudo. If the copies are not made, when the atomic is expanded; // after fast register allocation, the spills will end up outside of the; // blocks that their values are defined in, causing livein errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:283,error,errors,283,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['error'],['errors']
Availability,// We need to dig down to the symbolic base here because various; // custom allocators do sometimes return the symbol with an offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:18,down,down,18,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,1,['down'],['down']
Availability,"// We need to do non-local repairing. Basically, patch all; // the uses (i.e., phis) that we already proceeded.; // For now, just say this mapping is not possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:27,repair,repairing,27,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['repair'],['repairing']
Availability,// We need to ensure that mask is a continuous run of bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:26,mask,mask,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,"// We need to handle instructions which may be inserted during register; // allocation to handle the prolog. The initial prolog instruction may have; // been separated from the start of the block by spills and copies inserted; // needed by the prolog. However, the insertions for scalar registers can; // always be placed at the BB top as they are independent of the exec mask; // value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:372,mask,mask,372,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['mask'],['mask']
Availability,"// We need to invalidate the loading of the current tree because its list; // of real friend is now obsolete. It is repairable only from LoadTree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:116,repair,repairable,116,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,2,['repair'],['repairable']
Availability,"// We need to invalidate the loading of the current tree because its list; // of real friends is now obsolete. It is repairable only from LoadTree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:117,repair,repairable,117,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,2,['repair'],['repairable']
Availability,// We need to keep the Binary alive with the buffer,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:30,alive,alive,30,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,2,['alive'],['alive']
Availability,"// We need to keep the file alive, because we're replacing DbgObj with it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:28,alive,alive,28,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['alive'],['alive']
Availability,"// We need to know if LR is live across an outlining boundary later on in; // order to decide how we'll create the outlined call, frame, etc.; //; // It's pretty expensive to check this for *every candidate* within a block.; // That's some potentially n^2 behaviour, since in the worst case, we'd need; // to compute liveness from the end of the block for O(n) candidates within; // the block.; //; // So, to improve the average case, let's keep track of liveness from the end; // of the block to the beginning of *every outlinable range*. If we know that; // LR is available in every range we could outline from, then we know that; // we don't need to check liveness for any candidate within that range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:566,avail,available,566,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['avail'],['available']
Availability,"// We need to know the @available context in the current function to; // diagnose this use, let DiagnoseUnguardedAvailabilityViolations do that; // when we're done parsing the current function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:24,avail,available,24,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,1,['avail'],['available']
Availability,"// We need to link all the builtin GCs when LLVM is used as a static library.; // The linker will quite happily remove the static constructors that register; // the builtin GCs if we don't use a function from that object. This function; // does nothing but we need to make sure it is (or at least could be, even; // with all optimisations enabled) called *somewhere*, and this is a good; // place to do that: if the GC strategies are being used then this function; // obviously can't be removed by the linker, and here it won't affect; // performance, since there's about to be a fatal error anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/GCStrategy.cpp:586,error,error,586,interpreter/llvm-project/llvm/lib/IR/GCStrategy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/GCStrategy.cpp,1,['error'],['error']
Availability,"// We need to over-write the stack slot with something (here, a def at; // this instruction) to ensure no values are preserved in this stack slot; // after the spill. It also prevents TTracker from trying to recover the; // location and re-installing it in the same place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:208,recover,recover,208,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['recover'],['recover']
Availability,// We need to set linkage and visibility on the function before; // generating code for it because various parts of IR generation; // want to propagate this information down (e.g. to local static; // declarations).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:169,down,down,169,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['down'],['down']
Availability,"// We need to sort so that the non-Repl32 come first because, when we're; // doing masking, the Repl32 bit groups might be subsumed into the 64-bit; // masking operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:83,mask,masking,83,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['mask'],['masking']
Availability,// We need to special-case DeclRefExprs referring to FieldDecls which; // are not part of a member pointer formation; normal TreeTransforming; // doesn't catch this case because of the way we represent them in the AST.; // FIXME: This is a bit ugly; is it really the best way to handle this; // case?; //; // Error on DeclRefExprs referring to FieldDecls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:309,Error,Error,309,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Error'],['Error']
Availability,"// We need to widen the mask, but the instruction will only use 2; // of its elements. So we can use undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,mask,mask,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We never need to emit a variable that is available in another TU.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:44,avail,available,44,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['avail'],['available']
Availability,"// We note the locations of these intrinsic calls so that we can; // delete them later if the optimization succeeds, this is safe; // since both llvm.lifetime.start and llvm.lifetime.end intrinsics; // practically fill all the bytes of the alloca with an undefined; // value, although conceptually marked as alive/dead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:308,alive,alive,308,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['alive'],['alive']
Availability,"// We notified the preprocessor of EOF already, so detach it first.; // Sema needs the PP alive until after EndSourceFile() though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/TestAST.cpp:90,alive,alive,90,interpreter/llvm-project/clang/lib/Testing/TestAST.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/TestAST.cpp,1,['alive'],['alive']
Availability,"// We now have a shuffle of LHS, RHS, Mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:38,Mask,Mask,38,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['Mask'],['Mask']
Availability,"// We now need to check for equivalence of the use graph of each root with; // that of the primary induction variable (excluding the roots). Our goal; // here is not to solve the full graph isomorphism problem, but rather to; // catch common cases without a lot of work. As a result, we will assume; // that the relative order of the instructions in each unrolled iteration; // is the same (although we will not make an assumption about how the; // different iterations are intermixed). Note that while the order must be; // the same, the instructions may not be in the same basic block.; // An array of just the possible reductions for this scale factor. When we; // collect the set of all users of some root instructions, these reduction; // instructions are treated as 'final' (their uses are not considered).; // This is important because we don't want the root use set to search down; // the reduction chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:884,down,down,884,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['down'],['down']
Availability,"// We only care about full key 'presses' not individual down/up",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLEventHandler.cxx:56,down,down,56,graf3d/gl/src/TGLEventHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLEventHandler.cxx,1,['down'],['down']
Availability,// We only care that the types being shuffled are legal. The lowering can; // handle any possible shuffle mask that results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:106,mask,mask,106,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We only handle target-independent shuffles.; // FIXME: It would be easy and harmless to use the target shuffle mask; // extraction tool to support more.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:114,mask,mask,114,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,// We only handle the case where the mask needs widening to an; // identically-sized type as the vector inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:37,mask,mask,37,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['mask'],['mask']
Availability,// We only handle the case where the stored value needs widening to an; // identically-sized type as the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:105,mask,mask,105,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['mask'],['mask']
Availability,// We only have 2 actual args: one for the SGPRs and one for the VGPRs.; // We'll also tack the value of the EXEC mask at the end.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:114,mask,mask,114,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['mask'],['mask']
Availability,"// We only keep live symbols that are known to be non-prevailing if any are; // available_externally, linkonceodr, weakodr. Those symbols are discarded; // later in the EliminateAvailableExternally pass and setting them to; // not-live could break downstreams users of liveness information (PR36483); // or limit optimization opportunities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:248,down,downstreams,248,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['down'],['downstreams']
Availability,"// We only need a declaration (not a definition) of the type - so use whatever; // we would otherwise do to get a type for a pointee. (forward declarations in; // limited debug info, full definitions (if the type definition is available); // in unlimited debug info)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:227,avail,available,227,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['avail'],['available']
Availability,// We only replace the undef when DominateBB truly dominates all the; // other predecessors with undefined incoming value. Make sure DominateBB; // dominates BB so that UniqueDefinedIncoming is available in BB and; // afterwards.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteUndefForPHI.cpp:194,avail,available,194,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteUndefForPHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteUndefForPHI.cpp,1,['avail'],['available']
Availability,"// We only support broadcasting from 128-bit vectors to minimize the; // number of patterns we need to deal with in isel. So extract down to; // 128-bits, removing as many bitcasts as possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:133,down,down,133,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['down'],['down']
Availability,// We only support warnings or errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:31,error,errors,31,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,1,['error'],['errors']
Availability,"// We only track integer uses, everything else produces a mask with all bits; // set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DemandedBits.cpp:58,mask,mask,58,interpreter/llvm-project/llvm/lib/Analysis/DemandedBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DemandedBits.cpp,1,['mask'],['mask']
Availability,"// We only try to build a recovery expr at this level if we can preserve; // the return type, otherwise we return ExprError() and let the caller; // recover.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:26,recover,recovery,26,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,2,['recover'],"['recover', 'recovery']"
Availability,// We only use half of V1 so map the usage down into the final blend mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:43,down,down,43,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['down', 'mask']","['down', 'mask']"
Availability,// We only use half of V2 so map the usage down into the final blend mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:43,down,down,43,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['down', 'mask']","['down', 'mask']"
Availability,// We padded the mask with undefs. But we now need to undo that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// We parse rvalue refs in C++03, because otherwise the errors are scary.; // But we must not parse them in conversion-type-ids and new-type-ids, since; // those can be legitimately followed by a && operator.; // (The same thing can in theory happen after a trailing-return-type, but; // since those are a C++11 feature, there is no rejects-valid issue there.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:56,error,errors,56,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['error'],['errors']
Availability,"// We parse the warning options twice. The first pass sets diagnostic state,; // while the second pass reports warnings/errors. This has the effect that; // we follow the more canonical ""last option wins"" paradigm when there are; // conflicting options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:120,error,errors,120,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,1,['error'],['errors']
Availability,// We perform a non-recursive top-down dominator tree walk.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:34,down,down,34,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['down'],['down']
Availability,"// We plan to hoist the load to preheader without introducing a new fault.; // In order to do it, we need to prove that we cannot side-exit the loop; // once loop header is first entered before execution of the load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:68,fault,fault,68,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['fault'],['fault']
Availability,// We prefer rotate for vectors of if we won't get a zext mask with SRL; // (PreferRotate will be set in the latter case).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:58,mask,mask,58,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We probably had an error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:22,error,error,22,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"// We produce this register, thus it must not be previously alive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp:60,alive,alive,60,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,1,['alive'],['alive']
Availability,"// We provoke a lot of evaluation errors in this test. Don't print those.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:34,error,errors,34,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['error'],['errors']
Availability,"// We read some number of designators and found something that isn't an = or; // an initializer. If we have exactly one array designator, this; // is the GNU 'designation: array-designator' extension. Otherwise, it is a; // parse error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp:230,error,error,230,interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,1,['error'],['error']
Availability,"// We really want the positive remainder mod 32 here, that happens to be; // easily obtainable with a mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:102,mask,mask,102,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['mask'],['mask']
Availability,// We record each overload check line before emitting because subsequent Inst; // definitions may extend the number of permitted types (i.e. augment the; // Mask). Use std::map to avoid sorting the table by hash number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:157,Mask,Mask,157,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['Mask'],['Mask']
Availability,// We rely on the default argument classification for the most part.; // One exception: An aggregate containing a single floating-point; // or vector item must be passed in a register if one is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:194,avail,available,194,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,1,['avail'],['available']
Availability,"// We repair a use of a phi, we may need to split the related edge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:6,repair,repair,6,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['repair'],['repair']
Availability,// We report a custom error message instead below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:22,error,error,22,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,1,['error'],['error']
Availability,"// We require DT so it's available when LI is available. The LI updating code; // asserts that DT is also present so if we don't make sure that we have DT; // here, that assert will trigger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp:25,avail,available,25,interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,6,['avail'],['available']
Availability,// We reserved the last registers for this. Shift it down to the end of those; // which were actually used.; //; // FIXME: It might be safer to use a pseudoregister before replacement.; // FIXME: We should be able to eliminate unused input registers. We only; // cannot do this for the resources required for scratch access. For now we; // skip over user SGPRs and may leave unused holes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp:53,down,down,53,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,1,['down'],['down']
Availability,"// We retry send and receive only on EINTR, all other errors are either fatal, or can only; // be handled at the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:54,error,errors,54,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['error'],['errors']
Availability,"// We return an invalid parameter as opposed to null to avoid having bogus; // diagnostics about an empty template parameter list.; // FIXME: Fix ParseTemplateParameterList to better handle nullptr results; // from here.; // Return a NTTP as if there was an error in a scope specifier, the user; // probably meant to write the type of a NTTP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:258,error,error,258,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,1,['error'],['error']
Availability,"// We return failure is at least one unique worker failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:13,failure,failure,13,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['failure'],['failure']
Availability,// We select bits from newval and oldval using:; // https://graphics.stanford.edu/~seander/bithacks.html#MaskedMerge; // r = oldval ^ ((oldval ^ newval) & masktargetdata);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVExpandAtomicPseudoInsts.cpp:105,Mask,MaskedMerge,105,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVExpandAtomicPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVExpandAtomicPseudoInsts.cpp,2,"['Mask', 'mask']","['MaskedMerge', 'masktargetdata']"
Availability,"// We should fold ""masked merge"" patterns when `andn` is not available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,mask,masked,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['avail', 'mask']","['available', 'masked']"
Availability,// We should have errored on unrecognized passes before trying to run; // anything.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp:18,error,errored,18,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp,1,['error'],['errored']
Availability,"// We should not need more than a couple of instructions to repair; // an assignment. In other words, the computation should not; // overflow because the repairing cost is free of basic block; // frequency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:60,repair,repair,60,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,2,['repair'],"['repair', 'repairing']"
Availability,// We should not set import error on a node and all following nodes in; // the path if child import errors are ignored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:28,error,error,28,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,2,['error'],"['error', 'errors']"
Availability,"// We should not skip import if the module contains a non-prevailing; // definition with interposable linkage type. This is required for; // correctness in the situation where there is a prevailing def available; // for import and marked read-only. In this case, the non-prevailing def; // will be converted to a declaration, while the prevailing one becomes; // internal, thus no definitions will be available for linking. In order to; // prevent undefined symbol link error, the prevailing definition must be; // imported.; // FIXME: Consider adding a check that the suitable prevailing definition; // exists and marked read-only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:202,avail,available,202,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,3,"['avail', 'error']","['available', 'error']"
Availability,// We should only get a null bound type if processing a dependent; // CFG. Recover by assuming nothing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:75,Recover,Recover,75,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['Recover'],['Recover']
Availability,"// We should take the variables from the original dataset if; // available, such that we can query the ""StoreError"" and; // ""StoreAsymError"" attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:65,avail,available,65,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['avail'],['available']
Availability,"// We should try autoload only for special lookup failures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:50,failure,failures,50,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,1,['failure'],['failures']
Availability,"// We should use Altivec/VSX loads and stores when available. For unaligned; // addresses, unaligned VSX loads are only fast starting with the P8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:51,avail,available,51,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['avail'],['available']
Availability,// We shouldn't use callee-saved registers as scratch registers as they may be; // available when looking for a candidate block for shrink wrapping but not; // available when the actual prologue/epilogue is being emitted because they; // were added as live-in to the prologue block by PrologueEpilogueInserter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:83,avail,available,83,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,2,['avail'],['available']
Availability,// We somehow specified dependent template arguments in an explicit; // instantiation. This should probably only happen during error; // recovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:127,error,error,127,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,"['error', 'recover']","['error', 'recovery']"
Availability,// We split to repair the use of a phi or a terminator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:15,repair,repair,15,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['repair'],['repair']
Availability,// We still want to format the whitespace left of the first token of the; // warning or error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:88,error,error,88,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['error'],['error']
Availability,"// We support any array type as ""consecutive"" block in the parameter; // save area. The element type defines the alignment requirement and; // whether the argument should go in GPRs, FPRs, or VRs if available.; //; // Note that clang uses this capability both to implement the ELFv2; // homogeneous float/vector aggregate ABI, and to avoid having to use; // ""byval"" when passing aggregates that might fully fit in registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:199,avail,available,199,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['avail'],['available']
Availability,// We support these really simple operations even on types where all; // the actual arithmetic has to be broken down into simpler; // operations or turned into library calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:112,down,down,112,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['down'],['down']
Availability,// We support two versions of the gather intrinsics. One with scalar mask and; // one with vXi1 mask. Convert scalar to vXi1 if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:69,mask,mask,69,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,// We support two versions of the scatter intrinsics. One with scalar mask and; // one with vXi1 mask. Convert scalar to vXi1 if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:70,mask,mask,70,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,"// We suppress errors that TTreeReader prints regarding the missing branch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDefaultValueFor.hxx:15,error,errors,15,tree/dataframe/inc/ROOT/RDF/RDefaultValueFor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDefaultValueFor.hxx,2,['error'],['errors']
Availability,"// We then check to see if a valid mask can be constructed for one of the; // register string values permitted for the A and R class cores. These values; // are apsr, spsr and cpsr; these are also valid on older cores.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:35,mask,mask,35,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// We then emit a single entry in the index per function. We use the symbols; // that bound the instrumentation map as the range for a specific function.; // Each entry here will be 2 * word size aligned, as we're writing down two; // pointers. This should work for both 32-bit and 64-bit platforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:222,down,down,222,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['down'],['down']
Availability,// We touch up the compare instruction in MBB2 and move it to; // a previous BB to handle partially redundant case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:100,redundant,redundant,100,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,1,['redundant'],['redundant']
Availability,// We try each unpack from the largest to the smallest to try and find one; // that fits this mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:94,mask,mask,94,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// We try to eliminate redundant compare instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:23,redundant,redundant,23,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,1,['redundant'],['redundant']
Availability,"// We unique sections by their segment/section pair. The returned section; // may not have the same flags as the requested section, if so this should be; // diagnosed by the client as an error.; // Form the name to look up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCContext.cpp:187,error,error,187,interpreter/llvm-project/llvm/lib/MC/MCContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCContext.cpp,1,['error'],['error']
Availability,"// We use 0 rather than 31 as our mask, because shfl.up applies to lanes >=; // maxLane.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h:34,mask,mask,34,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h,2,['mask'],['mask']
Availability,"// We use 30 epsilon below because some platforms (ARM64, x86_64); // have rounding errors exceeding a few ulps and make the test fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:84,error,errors,84,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['errors']
Availability,"// We use MaskedValueIsZero here for generality, but the case we care; // about the most is constant RHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:10,Mask,MaskedValueIsZero,10,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['Mask'],['MaskedValueIsZero']
Availability,"// We use UTF-8 as the internal character encoding. On Windows,; // arguments passed to main() may not be encoded in UTF-8. In order; // to reliably detect encoding of command line arguments, we use an; // Windows API to obtain arguments, convert them to UTF-8, and then; // write them back to the Argv vector.; //; // There's probably other way to do the same thing (e.g. using; // wmain() instead of main()), but this way seems less intrusive; // than that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:140,reliab,reliably,140,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,1,['reliab'],['reliably']
Availability,"// We use UTF-8 as the internal character encoding. On z/OS, all external; // output is encoded in EBCDIC. In order to be able to read all; // error messages, we turn conversion to EBCDIC on for stderr fd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:143,error,error,143,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,1,['error'],['error']
Availability,"// We use crash recovery to make some of our APIs more reliable, implicitly; // enable it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:16,recover,recovery,16,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,2,"['recover', 'reliab']","['recovery', 'reliable']"
Availability,"// We use strict error handling in case of records and enums, but not; // with e.g. namespaces.; //; // FIXME Clients of the ASTImporter should be able to choose an; // appropriate error handling strategy for their needs. For instance,; // they may not want to mark an entire namespace as erroneous merely; // because there is an ODR error with two typedefs. As another example,; // the client may allow EnumConstantDecls with same names but with; // different values in two distinct translation units.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:17,error,error,17,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,3,['error'],['error']
Availability,"// We use the SSAUpdater to insert PHI nodes for the target addresses of; // indirect branches. We don't actually need the full power of the SSA updater; // in this particular case as we always have immediately available values, but; // this avoids us having to re-implement the PHI construction logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:211,avail,available,211,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['avail'],['available']
Availability,"// We use the extraArgs as output parameter to count evaluation errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNormalizedPdf.cxx:64,error,errors,64,roofit/roofitcore/src/RooNormalizedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNormalizedPdf.cxx,1,['error'],['errors']
Availability,"// We use uint64_t to avoid double rounding error of the following; // calculation: BP[i] = BP[i] * NewReachableSum / OldReachableSum; // The formula is taken from the private constructor; // BranchProbability(uint32_t Numerator, uint32_t Denominator)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp:44,error,error,44,interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,1,['error'],['error']
Availability,// We want calling these methods to be a compiler error since they are; // tautologically false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:50,error,error,50,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,1,['error'],['error']
Availability,// We want calling these methods to be a compiler error since they are; // tautologically true/false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:50,error,error,50,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,1,['error'],['error']
Availability,"// We want index gap between two adjacent MI is as same as possible. Given; // total A available indexes, D is number of consecutive unassigned; // instructions, S is the step.; // |<- S-1 -> MI <- S-1 -> MI <- A-S*D ->|; // There're S-1 available indexes between unassigned instruction and its; // predecessor. There're A-S*D available indexes between the last; // unassigned instruction and its successor.; // Ideally, we want; // S-1 = A-S*D; // then; // S = (A+1)/(D+1); // An valid S must be integer greater than zero, so; // S <= (A+1)/(D+1); // =>; // A-S*D >= 0; // That means we can safely use (A+1)/(D+1) as step.; // In previous example, Step is 204, Index of B, C, MI, D is 1228, 1432,; // 1636, 1840.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:87,avail,available,87,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,3,['avail'],['available']
Availability,"// We want only the PCH file from the real filesystem to be available,; // so we create an in-memory VFS with just that and overlay it on top.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:60,avail,available,60,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['avail'],['available']
Availability,"// We want the created NamespaceDecl to be available for redeclaration; // lookups, but not for regular name lookups.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:43,avail,available,43,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['avail'],['available']
Availability,"// We want the following functions to be available in the header for inlining.; // We cannot define them inline in the class definition of `DoubleAPFloat`; // because doing so would instantiate `std::unique_ptr<APFloat[]>` before; // `APFloat` is defined, and that would be undefined behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:41,avail,available,41,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['avail'],['available']
Availability,"// We want the mem access to be issued at a sane offset from PointerReg,; // so that if PointerReg is null then the access reliably page faults.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:123,reliab,reliably,123,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,2,"['fault', 'reliab']","['faults', 'reliably']"
Availability,"// We want the sign bit of the higher-order double. The bitcast we just; // did works as if the double-double was stored to memory and then; // read as an i128. The ""store"" will put the higher-order double in the; // lower address in both little- and big-Endian modes, but the ""load""; // will treat those bits as a different part of the i128: the low bits in; // little-Endian, the high bits in big-Endian. Therefore, on big-Endian; // we need to shift the high bits down to the low before truncating.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:467,down,down,467,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['down'],['down']
Availability,"// We want to find out if the tail-predicated version of this loop will; // produce the same values as the loop in its original form. For this to; // be true, the newly inserted implicit predication must not change the; // the (observable) results.; // We're doing this because many instructions in the loop will not be; // predicated and so the conversion from VPT predication to tail-predication; // can result in different values being produced; due to the tail-predication; // preventing many instructions from updating their falsely predicated; // lanes. This analysis assumes that all the instructions perform lane-wise; // operations and don't perform any exchanges.; // A masked load, whether through VPT or tail predication, will write zeros; // to any of the falsely predicated bytes. So, from the loads, we know that; // the false lanes are zeroed and here we're trying to track that those false; // lanes remain zero, or where they change, the differences are masked away; // by their user(s).; // All MVE stores have to be predicated, so we know that any predicate load; // operands, or stored results are equivalent already. Other explicitly; // predicated instructions will perform the same operation in the original; // loop and the tail-predicated form too. Because of this, we can insert; // loads, stores and other predicated instructions into our Predicated; // set and build from there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp:680,mask,masked,680,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,2,['mask'],['masked']
Availability,// We want to generally process call sites top-down in order for; // simplifications stemming from replacing the call with the returned value; // after inlining to be visible to subsequent inlining decisions.; // FIXME: Using instructions sequence is a really bad way to do this.; // Instead we should do an actual RPO walk of the function body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp:47,down,down,47,interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,1,['down'],['down']
Availability,"// We want to keep the callback alive during the shutdown of Sema, CodeGen; // and the ASTContext. For that to happen we shut down the IncrementalParser; // explicitly, before the implicit destruction (through the unique_ptr) of; // the callbacks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:32,alive,alive,32,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,2,"['alive', 'down']","['alive', 'down']"
Availability,"// We want to keep this GlobalValue around, but have to tell the JIT; // linker that it should not error on duplicate symbols.; // FIXME: Ideally the frontend would never emit duplicate symbols and; // we could just use the old version of saying:; // GV.setLinkage(llvm::GlobalValue::ExternalLinkage);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:99,error,error,99,interpreter/cling/lib/Interpreter/BackendPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp,1,['error'],['error']
Availability,"// We want to know at compile time whether dynamic_cast or static_cast is; // used. First of all to avoid overhead, but also to avoid a compiler; // error when using dynamic_cast on a non-polymorphic class. In C++17,; // this can be done easily with `if constexpr`, but for the older; // standards we have to use a more verbose alternative. Both ways are; // explicitely implemented for different standards, so that when the; // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; // that we can avoid much boilerplate code in this file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RRangeCast.hxx:149,error,error,149,core/foundation/inc/ROOT/RRangeCast.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RRangeCast.hxx,1,['error'],['error']
Availability,"// We want to materialize a mask with every bit but the high bit set, but the; // AdvSIMD immediate moves cannot materialize that in a single instruction for; // 64-bit elements. Instead, materialize all bits set and then negate that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:28,mask,mask,28,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,// We want to materialize a mask with the high bit set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:28,mask,mask,28,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['mask'],['mask']
Availability,"// We want to operate on all lanes, so get the mask and VL and mask for it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:47,mask,mask,47,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['mask'],['mask']
Availability,"// We want to re-analyse the functions as top level in the following cases:; // - The 'init' methods should be reanalyzed because; // ObjCNonNilReturnValueChecker assumes that '[super init]' never returns; // 'nil' and unless we analyze the 'init' functions as top level, we will; // not catch errors within defensive code.; // - We want to reanalyze all ObjC methods as top level to report Retain; // Count naming convention errors more aggressively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp:294,error,errors,294,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,2,['error'],['errors']
Availability,// We want to reanalyze all ObjC methods as top level to report Retain; // Count naming convention errors more aggressively. But we should tune down; // inlining when reanalyzing an already inlined function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp:99,error,errors,99,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,2,"['down', 'error']","['down', 'errors']"
Availability,"// We want to reliably handle any conditional branch terminators in the; // MBB, so we manually analyze the branch. We can handle all of the; // permutations here, including ones that analyze branch cannot.; //; // The approach is to walk backwards across the terminators, resetting at; // any unconditional non-indirect branch, and track all conditional edges; // to basic blocks as well as the fallthrough or unconditional successor; // edge. For each conditional edge, we track the target and the opposite; // condition code in order to inject a ""no-op"" cmov into that successor; // that will harden the predicate. For the fallthrough/unconditional; // edge, we inject a separate cmov for each conditional branch with; // matching condition codes. This effectively implements an ""and"" of the; // condition flags, even if there isn't a single condition flag that would; // directly implement that. We don't bother trying to optimize either of; // these cases because if such an optimization is possible, LLVM should; // have optimized the conditional *branches* in that way already to reduce; // instruction count. This late, we simply assume the minimal number of; // branch instructions is being emitted and use that to guide our cmov; // insertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:14,reliab,reliably,14,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['reliab'],['reliably']
Availability,"// We want to shuffle the result down from a high element of a vector, so; // the offset must be positive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:33,down,down,33,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,1,['down'],['down']
Availability,// We will apply the constraint even if we cannot reason about the; // argument. This means both SuccessSt and FailureSt can be true. If we; // weren't applying the constraint that would mean that symbolic; // execution continues on a code whose behaviour is undefined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:111,Failure,FailureSt,111,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['Failure'],['FailureSt']
Availability,"// We will detect whether a file changed and return 'Failure' for it, but; // we will also try to fail gracefully by setting up the SLocEntry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:53,Failure,Failure,53,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['Failure'],['Failure']
Availability,"// We will need to check if log-likelihood evaluation left an error status.; // Now using faster eval error logging with CountErrors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:62,error,error,62,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,2,['error'],['error']
Availability,// We will split all the edges and repair there.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:35,repair,repair,35,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['repair'],['repair']
Availability,"// We won't be able to check, so assume the worst but don't issue any; // error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:74,error,error,74,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['error'],['error']
Availability,"// We would like to emit the diagnostic even if -Wunguarded-availability is; // not specified for deployment targets >= to iOS 11 or equivalent or; // for declarations that were introduced in iOS 11 (macOS 10.13, ...) or; // later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:60,avail,availability,60,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,2,['avail'],['availability']
Availability,"// We would like to ensure the pad is repainted; // when external viewer is closed down. However; // a modify/paint call here will repaint the pad; // before the external viewer window actually closes.; // So the pad would have to be redraw twice over.; // Currently we just have to live with the pad staying blank; // any click in pad will refresh.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:83,down,down,83,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['down'],['down']
Availability,"// We'd require a ptrtoint/inttoptr down the line, which we can't do for; // non-integral pointers, so in that case bail out now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:36,down,down,36,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['down'],['down']
Availability,"// We'll still produce a fatal error downstream, but this diagnostic is more; // user-friendly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp:31,error,error,31,interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,2,"['down', 'error']","['downstream', 'error']"
Availability,// We're at the point where the parsing of function declarator is finished.; //; // A common error is that users accidently add a virtual specifier; // (e.g. override) in an out-line method definition.; // We attempt to recover by stripping all these specifiers coming after; // the declarator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:93,error,error,93,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,2,"['error', 'recover']","['error', 'recover']"
Availability,"// We're checking for profile read errors in CompilerInvocation, so if; // there was an error it should've already been caught. If it hasn't been; // somehow, trip an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:35,error,errors,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['error'],"['error', 'errors']"
Availability,// We're expecting '__identifier' '(' identifier ')'. Try to recover; // if the parens are missing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp:61,recover,recover,61,interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,1,['recover'],['recover']
Availability,// We're going to walk down into the type and look for VLA expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:23,down,down,23,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['down'],['down']
Availability,// We're going to walk down into the type and look for VLA; // expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:23,down,down,23,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,2,['down'],['down']
Availability,// We're only reducing custom reg masks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp:34,mask,masks,34,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp,1,['mask'],['masks']
Availability,"// We're scheduling top-down but we're visiting the regions in; // bottom-up order, so we don't know the hazards at the start of a; // region. So assume no hazards (this should usually be ok as most; // blocks are a single region).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp:24,down,down,24,interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,1,['down'],['down']
Availability,"// We're simulating a load through a pointer that was bitcast to point to; // a different type, so we can try to walk down through the initial; // elements of an aggregate to see if some part of the aggregate is; // castable to implement the ""load"" semantic model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:118,down,down,118,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['down'],['down']
Availability,"// We're trying to destroy something that is not a region. This may happen; // for a variety of reasons (unknown target region, concrete integer instead; // of target region, etc.). The current code makes an attempt to recover.; // FIXME: We probably don't really need to recover when we're dealing; // with concrete integers specifically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:219,recover,recover,219,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,2,['recover'],['recover']
Availability,"// We're trying to minimize the number of instructions. If we have one; // group, using one of andi/andis can break even. If we have three; // groups, we can use both andi and andis and break even (to use both; // andi and andis we also need to or the results together). We need four; // groups if we also need to rotate. To use andi/andis we need to do more; // than break even because rotate-and-mask instructions tend to be easier; // to schedule.; // FIXME: We've biased here against using andi/andis, which is right for; // POWER cores, but not optimal everywhere. For example, on the A2,; // andi/andis have single-cycle latency whereas the rotate-and-mask; // instructions take two cycles, and it would be better to bias toward; // andi/andis in break-even cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:398,mask,mask,398,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,"// We're using a shifted mask, so the load now has an offset. This means; // that data has been loaded into the lower bytes than it would have been; // before, so we need to shl the loaded data into the correct position in the; // register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// We've already seen a partial specialization with the same template; // parameters and template arguments. This can happen, for example, when; // substituting the outer template arguments ends up causing two; // class template partial specializations of a member class template; // to have identical forms, e.g.,; //; // template<typename T, typename U>; // struct Outer {; // template<typename X, typename Y> struct Inner;; // template<typename Y> struct Inner<T, Y>;; // template<typename Y> struct Inner<U, Y>;; // };; //; // Outer<int, int> outer; // error: the partial specializations of Inner; // // have the same signature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:557,error,error,557,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['error'],['error']
Availability,"// We've already seen a partial specialization with the same template; // parameters and template arguments. This can happen, for example, when; // substituting the outer template arguments ends up causing two; // variable template partial specializations of a member variable template; // to have identical forms, e.g.,; //; // template<typename T, typename U>; // struct Outer {; // template<typename X, typename Y> pair<X,Y> p;; // template<typename Y> pair<T, Y> p;; // template<typename Y> pair<U, Y> p;; // };; //; // Outer<int, int> outer; // error: the partial specializations of Inner; // // have the same signature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:550,error,error,550,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['error'],['error']
Availability,"// We've established mechanical ability and aliasing, it's up to the caller; // to check fault safety",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:89,fault,fault,89,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['fault'],['fault']
Availability,"// We've found the right structure of malloc argument, now save; // the data so when the body of the function is completely available; // we can check for comparisons.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocOverflowSecurityChecker.cpp:124,avail,available,124,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocOverflowSecurityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocOverflowSecurityChecker.cpp,1,['avail'],['available']
Availability,// We've got down to a single element; build a binary operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:13,down,down,13,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['down'],['down']
Availability,// We've inserted the location into the map. The map will have coalesced; // adjacent intervals (variable fragments) that describe the same memory; // location. Use this knowledge to insert a debug location that describes; // that coalesced fragment. This may eclipse other locs we've just; // inserted. This is okay as redundant locs will be cleaned up later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:320,redundant,redundant,320,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['redundant'],['redundant']
Availability,"// We've unwrapped at least one level. If the resulting T1 is a (possibly; // multidimensional) array type, any qualifier on any matching layer of; // T2 is considered to correspond to T1. Decompose down to the element; // type of T1 so that we can compare properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:199,down,down,199,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['down'],['down']
Availability,// WebAssembly tables are always in address space 1 (wasm_var). Don't apply; // address space if the table has local storage (semantic checks elsewhere; // will produce an error anyway).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:172,error,error,172,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"// WebAssembly type-checks instructions, but a noreturn function with a return; // type that doesn't match the context will cause a check failure. So we lower; // LLVM 'unreachable' to ISD::TRAP and then lower that to WebAssembly's; // 'unreachable' instructions which is meant for that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp:138,failure,failure,138,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp,1,['failure'],['failure']
Availability,// Weight is added by one to avoid propagation errors introduced by; // 0 weights.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:47,error,errors,47,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,1,['error'],['errors']
Availability,"// Were there some errors opening this file?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:19,error,errors,19,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['error'],['errors']
Availability,"// What Minuit2 calls ""Error"" is stepsize on the ROOT side.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NumericalDerivator.cxx:23,Error,Error,23,math/minuit2/src/NumericalDerivator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NumericalDerivator.cxx,1,['Error'],['Error']
Availability,// What is the size of each element in the vector mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:50,mask,mask,50,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['mask'],['mask']
Availability,// What range of shuffle mask element values results in picking from Op?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// What's going on here: we want to highlight the subexpression of the; // condition that is the most likely source of the ""uninitialized; // branch condition."" We do a recursive walk of the condition's; // subexpressions and roughly look for the most nested subexpression; // that binds to Undefined. We then highlight that expression's range.; // Get the predecessor node and check if is a PostStmt with the Stmt; // being the terminator condition. We want to inspect the state; // of that node instead because it will contain main information about; // the subexpressions.; // Note: any predecessor will do. They should have identical state,; // since all the BlockEdge did was act as an error sink since the value; // had to already be undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UndefBranchChecker.cpp:691,error,error,691,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UndefBranchChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UndefBranchChecker.cpp,1,['error'],['error']
Availability,"// What's important here is to select the right set of nodes. The main; // selection algorithm loops over nodes in a topological order, i.e. users; // are visited before their operands.; //; // It is an error to have an unselected node with a selected operand, and; // there is an assertion in the main selector code to enforce that.; //; // Such a situation could occur if we selected a node, which is both a; // subnode of ISelN, and a subnode of an unrelated (and yet unselected); // node in the DAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:203,error,error,203,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['error'],['error']
Availability,"// When -O0 is enabled, the Load Value Injection Hardening pass will fall back; // to using the Speculative Execution Side Effect Suppression pass for; // mitigation. This is to prevent slow downs due to; // analyses needed by the LVIHardening pass when compiling at -O0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetMachine.cpp:191,down,downs,191,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetMachine.cpp,1,['down'],['downs']
Availability,"// When <mask> is ""M"", we need to add a parameter that is used as; // global predicate for the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp:9,mask,mask,9,interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,1,['mask'],['mask']
Availability,"// When AA isn't available, but if the load and the store have the same; // base, constant offsets and non-overlapping access ranges, ignore the; // store. This is a simple form of alias analysis that is used by the; // inliner. FIXME: use BasicAA if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:17,avail,available,17,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['avail'],['available']
Availability,// When HoistingGeps there is nothing more we can do to make the; // operands available: just continue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp:78,avail,available,78,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,1,['avail'],['available']
Availability,"// When Mask is not a true mask, this transformation is illegal for some; // operations whose results are affected by mask, like viota.m.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:8,Mask,Mask,8,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,3,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"// When NEON is used for SP, only half of the register file is available; // because operations that define both SP and DP results will be constrained; // to the VFP2 class (D0-D15). We currently model this constraint prior to; // coalescing by double-counting the SP regs. See the FIXME above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:63,avail,available,63,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['avail'],['available']
Availability,"// When SVE is available, then we can lower the v2i64 operation using; // the SVE mul instruction, which has a lower cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:15,avail,available,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['avail'],['available']
Availability,"// When SVE is not available, there is no MUL.2d instruction,; // which means mul <2 x i64> is expensive as elements are extracted; // from the vectors and the muls scalarized.; // As getScalarizationOverhead is a bit too pessimistic, we; // estimate the cost for a i64 vector directly here, which is:; // - four 2-cost i64 extracts,; // - two 2-cost i64 inserts, and; // - two 1-cost muls.; // So, for a v2i64 with LT.First = 1 the cost is 14, and for a v4i64 with; // LT.first = 2 the cost is 28. If both operands are extensions it will not; // need to scalarize so the cost can be cheaper (smull or umull).; // so the cost can be cheaper (smull or umull).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:19,avail,available,19,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['avail'],['available']
Availability,"// When a PHI is used only to be compared with zero, it is safe to replace; // an incoming value proved as known nonzero with any non-zero constant.; // For example, in the code below, the incoming value %v can be replaced; // with any non-zero constant based on the fact that the PHI is only used to; // be compared with zero and %v is a known non-zero value:; // %v = select %cond, 1, 2; // %p = phi [%v, BB] ...; // icmp eq, %p, 0; // FIXME: To be simple, handle only integer type for now.; // This handles a small number of uses to keep the complexity down, and an; // icmp(or(phi)) can equally be replaced with any non-zero constant as the; // ""or"" will only add bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp:556,down,down,556,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,1,['down'],['down']
Availability,"// When a function contains a setjmp call but not other calls that can longjmp,; // we don't do setjmp transformation for that setjmp. But we need to convert the; // setjmp calls into ""i32 0"" so they don't cause link time errors. setjmp always; // returns 0 when called directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:222,error,errors,222,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['error'],['errors']
Availability,"// When a function's address is taken, a TABLE_INDEX relocation is emitted; // against the function symbol at the use site. However the relocation; // doesn't explicitly refer to the table. In the future we may want to; // define a new kind of reloc against both the function and the table, so; // that the linker can see that the function symbol keeps the table alive,; // but for now manually mark the table as live.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp:363,alive,alive,363,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp,1,['alive'],['alive']
Availability,// When a physical register is available read the value from it and glue; // the reads together.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:31,avail,available,31,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['avail'],['available']
Availability,"// When a register is available, pass a small aggregate right-justified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:22,avail,available,22,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['avail'],['available']
Availability,"// When a temporary register is not available everywhere in this basic; // basic block where a propagate-taint-to-sp operation is needed, just; // emit a full speculation barrier at the start of this basic block, which; // renders the taint/speculation tracking in this basic block unnecessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp:36,avail,available,36,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,1,['avail'],['available']
Availability,"// When aligning up we have to first add the mask to ensure we go over the; // next alignment value and then align down to the next valid multiple.; // By adding the mask, we ensure that align_up on an already aligned; // value will not change the value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:45,mask,mask,45,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,3,"['down', 'mask']","['down', 'mask']"
Availability,"// When alignment is >= 4, Addr must be aligned to 4, otherwise it is UB.; // So Mask is unnecessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:81,Mask,Mask,81,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['Mask'],['Mask']
Availability,"// When avoiding a runtime check, the active.lane.mask inside the loop; // uses a modified trip count and the induction variable increment is; // done after the active.lane.mask intrinsic is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:50,mask,mask,50,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,2,['mask'],['mask']
Availability,"// When avx512 is available the lhs operand of select instruction can be; // folded with mask instruction, while the rhs operand can't. Commute the; // lhs and rhs of the select instruction to create the opportunity of; // folding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:18,avail,available,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['avail', 'mask']","['available', 'mask']"
Availability,"// When calling a lambda, both the call operator, and; // the conversion operator to function pointer; // are considered. But when constraint checking; // on the call operator fails, it will also fail on the; // conversion operator as the constraints are always the same.; // As the user probably does not intend to perform a surrogate call,; // we filter them out to produce better error diagnostics, ie to avoid; // showing 2 failed overloads instead of one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:383,error,error,383,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['error'],['error']
Availability,// When checking for const initilization any diagnostic is considered; // an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:77,error,error,77,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['error'],['error']
Availability,// When committing variable values to locations: tell transfer tracker that; // we've clobbered things. It may be able to recover the variable from a; // different location.; // Inform TTracker about any direct clobbers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:122,recover,recover,122,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['recover'],['recover']
Availability,"// When compiling for the OpenMP device we want protected visibility by; // default. This prevents the device from accidentally preempting code on; // the host, makes the system more robust, and improves performance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:183,robust,robust,183,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['robust'],['robust']
Availability,"// When compiling in HipStdPar mode we have to be conservative in rejecting; // target specific features in the FE, and defer the possible error to the; // AcceleratorCodeSelection pass, wherein iff an unsupported target builtin is; // referenced by an accelerator executable function, we emit an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:139,error,error,139,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,2,['error'],['error']
Availability,"// When compiling in HipStdPar mode we have to be conservative in rejecting; // target specific features in the FE, and defer the possible error to the; // AcceleratorCodeSelection pass, wherein iff an unsupported target builtin is; // referenced by an accelerator executable function, we emit an error.; // Returning nullptr here leads to the builtin being handled in; // EmitStdParUnsupportedBuiltin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:139,error,error,139,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,2,['error'],['error']
Availability,"// When computing PGO branch weights, we only know the overall count for; // the true block. This code is essentially doing tail duplication of the; // naive code-gen, introducing new edges for which counts are not; // available. Divide the counts proportionally between the LHS and RHS of; // the conditional operator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:219,avail,available,219,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['avail'],['available']
Availability,"// When converting the deduced template argument, append it to the; // general output list. We need to do this so that the template argument; // checking logic has all of the prior template arguments available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:200,avail,available,200,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['avail'],['available']
Availability,"// When counting down, the dependence distance needs to be swapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:17,down,down,17,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['down'],['down']
Availability,"// When current instruction was not CTI, recover reorder state.; // The format of the second case is:; // .set noreoder; // bnezc; // add; // .set reorder",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:41,recover,recover,41,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['recover'],['recover']
Availability,"// When enabling remarks, we need to error if:; // * The remark file is specified but we're targeting multiple architectures,; // which means more than one remark file is being generated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:37,error,error,37,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,2,['error'],['error']
Availability,"// When encountering a TOC save instruction, call UpdateTOCSaves; // to add it to the TOCSaves map and mark any existing TOC saves; // it dominates as redundant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:151,redundant,redundant,151,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,1,['redundant'],['redundant']
Availability,"// When for example -### or -v is used; // without a file, target specific options are not; // consumed/validated.; // Instead emitting an error emit a warning instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:139,error,error,139,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['error'],['error']
Availability,"// When in a template specialization and on the first loop iteration,; // potentially give the default diagnostic (with the fixit in a; // separate note) instead of having the error reported back to here; // and giving a diagnostic with a fixit attached to the error itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:176,error,error,176,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,2,['error'],['error']
Availability,"// When layout is available, we can generally compute the difference using the; // getSymbolOffset path, which also avoids the possible slow fragment walk.; // However, linker relaxation may cause incorrect fold of A-B if A and B are; // separated by a linker-relaxable instruction. If the section contains; // instructions and InSet is false (not expressions in directive like; // .size/.fill), disable the fast path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCExpr.cpp:18,avail,available,18,interpreter/llvm-project/llvm/lib/MC/MCExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCExpr.cpp,1,['avail'],['available']
Availability,"// When matching of an assembly instruction fails, there may be multiple; // encodings that are close to being a match. It's often ambiguous which one; // the programmer intended to use, so we want to report an error which mentions; // each of these ""near-miss"" encodings. This struct contains information about; // one such encoding, and why it did not match the parsed instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:211,error,error,211,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['error'],['error']
Availability,"// When mthc1 is available, use:; // mtc1 Lo, $fp; // mthc1 Hi, $fp; //; // Otherwise, for O32 FPXX ABI:; // spill + reload via ldc1; // This case is handled by the frame lowering code.; //; // Otherwise, for FP32:; // mtc1 Lo, $fp; // mtc1 Hi, $fp + 1; //; // The case where dmtc1 is available doesn't need to be handled here; // because it never creates a BuildPairF64 node.; // FPXX on MIPS-II or MIPS32r1 should have been handled with a spill/reload; // in MipsSEFrameLowering.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEInstrInfo.cpp:17,avail,available,17,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEInstrInfo.cpp,2,['avail'],['available']
Availability,"// When no requesting module is available, the caller is looking if a; // header is part a module by only looking into the module map. This is; // done by warn_uncovered_module_header checks; don't consider textual; // headers part of it in this mode, otherwise we get misleading warnings; // that a umbrella header is not including a textual header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:32,avail,available,32,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['avail'],['available']
Availability,"// When not folding the tail, use nullptr to model all-true mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:60,mask,mask,60,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['mask'],['mask']
Availability,"// When one of the nonnull arguments are constrained to be null, nullability; // preconditions are violated. It is not enough to check this only when we; // actually report an error, because at that time interesting symbols might be; // reaped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:176,error,error,176,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['error'],['error']
Availability,"// When optimizing, if wasm-opt is available, run it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/WebAssembly.cpp:35,avail,available,35,interpreter/llvm-project/clang/lib/Driver/ToolChains/WebAssembly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/WebAssembly.cpp,1,['avail'],['available']
Availability,"// When peeking, just return the available data, don't loop. Otherwise,; // we may copy the same chunk of data multiple times into the; // output buffer, for instance when there is no more recent data; // in the socket's internal reception buffers.; // Note that in this case we don't update the counters of data received; // through this socket. They will be updated when the data is actually; // read. This avoids double counting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSSLSocket.cxx:33,avail,available,33,net/net/src/TSSLSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSSLSocket.cxx,1,['avail'],['available']
Availability,"// When producing this diagnostic, we temporarily bypass ourselves,; // clear out any current diagnostic, and let the downstream client; // format the diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FixItRewriter.cpp:118,down,downstream,118,interpreter/llvm-project/clang/lib/Frontend/Rewrite/FixItRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FixItRewriter.cpp,1,['down'],['downstream']
Availability,"// When profile data is not available, we need to be conservative in; // estimating the overall savings. Static branch prediction can usually; // guess the branch direction right (taken/non-taken), but the guessed; // branch probability is usually not biased enough. In case when the; // outlined region is predicted to be likely, its probability needs; // to be made higher (more biased) to not under-estimate the cost of; // function outlining. On the other hand, if the outlined region; // is predicted to be less likely, the predicted probablity is usually; // higher than the actual. For instance, the actual probability of the; // less likely target is only 5%, but the guessed probablity can be; // 40%. In the latter case, there is no need for further adjustment.; // FIXME: add an option for this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp:28,avail,available,28,interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,1,['avail'],['available']
Availability,"// When profile is not present, return the StaticLikelyProb.; // When profile is available, we need to handle the triangle-shape CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:81,avail,available,81,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['avail'],['available']
Availability,"// When rendered geometry doesn't include these attributes but the material does,; // use these default values in WebGL. This avoids errors when buffer data is missing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:133,error,errors,133,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// When returning a double via an XMM register, report an error if SSE2 is; // not enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:58,error,error,58,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['error'],['error']
Availability,// When set to false no nullability information will be tracked in; // NullabilityMap. It is possible to catch errors like passing a null pointer; // to a callee that expects nonnull argument without the information that is; // stored in the NullabilityMap. This is an optimization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:111,error,errors,111,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['error'],['errors']
Availability,"// When the loop is guarded by a runtime overflow check for the loop; // induction variable increment by VF, we can increment the value before; // the get.active.lane mask and use the unmodified tripcount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:167,mask,mask,167,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,1,['mask'],['mask']
Availability,"// When the mask is a power-of-2 constant and op0 is a shifted-power-of-2; // constant, test if the shift amount equals the offset bit index:; // (ShiftC << X) & C --> X == (log2(C) - log2(ShiftC)) ? C : 0; // (ShiftC >> X) & C --> X == (log2(ShiftC) - log2(C)) ? C : 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:12,mask,mask,12,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['mask'],['mask']
Availability,"// When the member is missing, just leave the address alone; // (since setting explicitly to 0 would trigger error/warning; // messages).; // abranch->SetAddress(0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:109,error,error,109,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['error'],['error']
Availability,"// When the scalar of G_DUP is an s8/s16 gpr, they can't be selected by; // imported patterns. Do it manually here. Avoiding generating s16 gpr is; // difficult because at RBS we may end up pessimizing the fpr case if we; // decided to add an anyextend to fix this. Manual selection is the most; // robust solution for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:299,robust,robust,299,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['robust'],['robust']
Availability,"// When the vector size is odd and .odd or .hi is used, the last element; // of the Elts constant array will be one past the size of the vector.; // Ignore the last element here, if it is greater than the mask size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:205,mask,mask,205,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['mask'],['mask']
Availability,"// When there are errors resolving types, clang may use IntTy as a fallback,; // breaking our assumption that function declarations have function types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:18,error,errors,18,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,1,['error'],['errors']
Availability,// When there are no used prefixes we report an error except in the case that; // no prefix is specified explicitly but -implicit-check-not is specified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:48,error,error,48,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['error'],['error']
Availability,"// When there is an entry available for the return symbol in DynamicTypeMap,; // the call was inlined, and the information in the DynamicTypeMap is should; // be precise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:26,avail,available,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['avail'],['available']
Availability,"// When there is no integer popcount instruction (FEAT_CSSC isn't available),; // it can be more efficiently lowered to the following sequence that uses; // AdvSIMD registers/instructions as long as the copies to/from the AdvSIMD; // registers are cheap.; // FMOV D0, X0 // copy 64-bit int to vector, high bits zero'd; // CNT V0.8B, V0.8B // 8xbyte pop-counts; // ADDV B0, V0.8B // sum 8xbyte pop-counts; // UMOV X0, V0.B[0] // copy byte result back to integer reg; //; // For 128 bit vector popcounts, we lower to the following sequence:; // cnt.16b v0, v0 // v8s16, v4s32, v2s64; // uaddlp.8h v0, v0 // v8s16, v4s32, v2s64; // uaddlp.4s v0, v0 // v4s32, v2s64; // uaddlp.2d v0, v0 // v2s64; //; // For 64 bit vector popcounts, we lower to the following sequence:; // cnt.8b v0, v0 // v4s16, v2s32; // uaddlp.4h v0, v0 // v4s16, v2s32; // uaddlp.2s v0, v0 // v2s32",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:66,avail,available,66,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['avail'],['available']
Availability,"// When these options are used, the compiler is allowed to apply; // optimizations that may affect the final result. For example; // (x+y)+z is transformed to x+(y+z) but may not give the same; // final result; it's not value safe.; // Another example can be to simplify x/x to 1.0 but x could be 0.0, INF; // or NaN. Final result may then differ. An error is issued when the eval; // method is set with one of these options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:351,error,error,351,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['error'],['error']
Availability,"// When they are not available, we use a placeholder type instead of TThreadExecutor or TProcessExecutor.; // The corresponding data members will not be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/TExecutor.hxx:21,avail,available,21,core/imt/inc/ROOT/TExecutor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/TExecutor.hxx,1,['avail'],['available']
Availability,"// When this occurs, often something is very broken with the value; // being declared, poison it as invalid so we don't get chains of; // errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:138,error,errors,138,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,"// When walking down the dominator tree, we want to traverse through; // blocks from nested (other) loops, because they can dominate blocks; // that are in L. Skip the non-L blocks only after the tree traversal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp:16,down,down,16,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,1,['down'],['down']
Availability,"// When we are skipping C-style comment at the end of a preprocessing; // directive, we can skip several lines. If any meaningful TD token; // follows the end of the C-style comment on the same line, it will; // be considered as an invalid usage of TD token.; // For example, we want to forbid usages like this one:; // #define MACRO class Class {}; // But with C-style comments we also disallow the following:; // #define MACRO /* This macro is used; // to ... */ class Class {}; // One can argue that this should be allowed, but it does not seem; // to be worth of the complication. Moreover, this matches; // the C preprocessor behavior.; // Set TokStart to the beginning of the comment to enable proper; // diagnostic printer in case of error in SkipCComment().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:741,error,error,741,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,1,['error'],['error']
Availability,"// When we can emit a TB(N)Z, prefer that.; //; // Handle non-commutative condition codes first.; // Note that we don't want to do this when we have a G_AND because it can; // become a tst. The tst will make the test bit in the TB(N)Z redundant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:235,redundant,redundant,235,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['redundant'],['redundant']
Availability,"// When we check whether a variable is already defined, for the purpose of; // reporting an error on redefinition, we don't look up to the parent; // scope, because it's all right to shadow an outer definition with an; // inner one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:92,error,error,92,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['error'],['error']
Availability,"// When we come here, the VectorList field will identify a range; // of q-registers by its base register and length, and it will; // have already been error-checked to be the expected length of; // range and contain only q-regs in the range q0-q7. So we can; // count on the base register being in the range q0-q6 (for 2; // regs) or q0-q4 (for 4); //; // The MVE instructions taking a register range of this kind will; // need an operand in the MQQPR or MQQQQPR class, representing the; // entire range as a unit. So we must translate into that class,; // by finding the index of the base register in the MQPR reg; // class, and returning the super-register at the corresponding; // index in the target class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:151,error,error-checked,151,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['error'],['error-checked']
Availability,"// When we don't need a local stack pointer for its local frame but only to; // support EH, we don't need to write SP back in the epilog, because we don't; // bump down the stack pointer in the prolog. We need to write SP back in the; // epilog only if; // 1. We need SP not only for EH support but also because we actually use; // stack or we have a frame address taken.; // 2. We cannot use the red zone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFrameLowering.cpp:164,down,down,164,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFrameLowering.cpp,1,['down'],['down']
Availability,"// When we get SIGUSR1 from child (i.e. ROOT) then pop down logo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:55,down,down,55,rootx/src/rootx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx,1,['down'],['down']
Availability,"// When we have target data, we can reduce the GEP down to the value in bytes; // added to the address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp:51,down,down,51,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,1,['down'],['down']
Availability,"// When we have the RARE case of a BlockAddress Constant that is not; // scoped to the Function it refers to, we need to conservatively; // materialize the referred to Function, regardless of whether or not; // that Function will ultimately be linked, otherwise users of; // BitcodeReader might start splicing out Function bodies such that we; // might no longer be able to materialize the BlockAddress since the; // BasicBlock (and entire body of the Function) the BlockAddress refers; // to may have been moved. In the case that the user of BitcodeReader; // decides ultimately not to link the Function body, materializing here; // could be considered wasteful, but it's better than a deserialization; // failure as described. This keeps BitcodeReader unaware of complex; // linkage policy decisions such as those use by LTO, leaving those; // decisions ""one layer up.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:707,failure,failure,707,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['failure'],['failure']
Availability,"// Whether the definition of the variable is available externally.; // If yes, we shouldn't emit the GloablCtor and GlobalDtor for the variable; // since this is the job for its original source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:45,avail,available,45,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['avail'],['available']
Availability,// Whether the mask and vlen parameter are at the end of the parameter list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VectorBuilder.cpp:15,mask,mask,15,interpreter/llvm-project/llvm/lib/IR/VectorBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VectorBuilder.cpp,1,['mask'],['mask']
Availability,// Whether this is the final resolve step before adding a record to the; // RecordKeeper. Error reporting during resolve and related constant folding; // should only happen when this is true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:90,Error,Error,90,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['Error'],['Error']
Availability,// Whether this type belongs to a packed mask or vector register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h:41,mask,mask,41,interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h,1,['mask'],['mask']
Availability,"// Whether to forward one step down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:31,down,down,31,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['down'],['down']
Availability,// Whether to index macro definitions in the Preprocessor when preprocessor; // callback is not available (e.g. after parsing has finished). Note that; // macro references are not available in Preprocessor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h:96,avail,available,96,interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h,2,['avail'],['available']
Availability,"// Which elements of Op do we demand, given the mask's granularity?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:48,mask,mask,48,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp:9,Avail,Available,9,interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,3,['Avail'],['Available']
Availability,"// While AvailableQueue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:9,Avail,AvailableQueue,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,1,['Avail'],['AvailableQueue']
Availability,"// While __dso_handle is still overriden in the JIT below,; // #define __dso_handle is used to mitigate the following problems:; // 1. Type of __dso_handle is void* making assignemnt to it legal; // 2. Making it void* const in cling would mean possible type mismatch; // 3. Cannot override void* __dso_handle in child Interpreter; // 4. On Unix where the symbol actually exists, __dso_handle will be; // linked into the code before the JIT can say otherwise, so:; // [cling] __dso_handle // codegened __dso_handle always printed; // [cling] __cxa_atexit(f, 0, __dso_handle) // seg-fault; // 5. Code that actually uses __dso_handle will fail as a declaration is; // needed which is not possible with the macro.; // 6. Assuming 4 is sorted out in user code, calling __cxa_atexit through; // atexit below isn't linking to the __dso_handle symbol.; // Use __cxa_atexit to intercept all of the following routines",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:581,fault,fault,581,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,1,['fault'],['fault']
Availability,"// Why on earth ?? was this here? Was the verbosity level option meant to 'disappear? Not a good idea i think..; // DeclareOptionRef( fVerbosityLevelString=""Default"", ""VerboseLevel"", ""Verbosity level"" );; // AddPreDefVal( TString(""Default"") ); // uses default defined in MsgLogger header; // AddPreDefVal( TString(""Debug"") );; // AddPreDefVal( TString(""Verbose"") );; // AddPreDefVal( TString(""Info"") );; // AddPreDefVal( TString(""Warning"") );; // AddPreDefVal( TString(""Error"") );; // AddPreDefVal( TString(""Fatal"") );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:470,Error,Error,470,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['Error'],['Error']
Availability,// Widen the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:13,mask,mask,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,2,['mask'],['mask']
Availability,"// Widening instructions with a merge value a third operand, a mask as a; // fourth operand, and VL as a fifth operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:63,mask,mask,63,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// Widening ternary operations with a mask as the fourth operand and VL as the; // fifth operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,"// Win32 does not support these functions, but; // they are generally available on POSIX-compliant systems.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:70,avail,available,70,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,"// Windows masks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/CocoaConstants.h:11,mask,masks,11,graf2d/cocoa/inc/CocoaConstants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/CocoaConstants.h,1,['mask'],['masks']
Availability,"// With ""RemoveDIs"" debug-info stored in DPValue objects, debug-info; // attached to this instruction, and drop any for scopes that aren't alive,; // like the rest of this loop does. Extending support to assignment tracking; // is future work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:139,alive,alive,139,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['alive'],['alive']
Availability,"// With -fcuda-host-device-constexpr, an unattributed constexpr function is; // treated as implicitly __host__ __device__, unless:; // * it is a variadic function (device-side variadic functions are not; // allowed), or; // * a __device__ function with this signature was already declared, in which; // case in which case we output an error, unless the __device__ decl is in a; // system header, in which case we leave the constexpr function unattributed.; //; // In addition, all function decls are treated as __host__ __device__ when; // ForceCUDAHostDeviceDepth > 0 (corresponding to code within a; // #pragma clang force_cuda_host_device_begin/end; // pair).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:335,error,error,335,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['error'],['error']
Availability,"// With 512-bit vectors and no VLX, we prefer to widen MLOAD/MSTORE; // to 512-bit rather than use the AVX2 instructions so that we can use; // k-masks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:146,mask,masks,146,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,"// With Ovl_Best, the number of overload candidates to show when we encounter; // an error.; //; // The value here is the number of candidates to show in the first nontrivial; // error. Future errors may show a different number of candidates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:85,error,error,85,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,3,['error'],"['error', 'errors']"
Availability,"// With a fatal failure in the module loader, we abort parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:16,failure,failure,16,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,3,['failure'],['failure']
Availability,"// With our CFG finalized, update DomTree if it is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:51,avail,available,51,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['avail'],['available']
Availability,"// With the class hierarchy in place, let synthesized register classes inherit; // properties from their closest super-class. The iteration order here can; // propagate properties down multiple levels.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:180,down,down,180,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['down'],['down']
Availability,// With vector masks we only demand the upper bit of the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,mask,masks,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,4,['mask'],"['mask', 'masks']"
Availability,"// WithMinOffset is the lowest address in the group,; // WithMinOffset.Addr = Base+Start.; // Align instructions for both HVX (V6_valign) and scalar (S2_valignrb); // mask off unnecessary bits, so it's ok to just the original pointer as; // the alignment amount.; // Do an explicit down-alignment of the address to avoid creating an; // aligned instruction with an address that is not really aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:167,mask,mask,167,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,2,"['down', 'mask']","['down-alignment', 'mask']"
Availability,"// Within a single element and its padding.; // Don't try to form ""natural"" types if the elements don't line up with the; // expected size.; // FIXME: We could potentially recurse down through the last element in the; // sub-struct to find a natural end point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:180,down,down,180,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['down'],['down']
Availability,"// Without PTEST, a masked v2i64 or-reduction is not faster than; // scalarization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:20,mask,masked,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masked']
Availability,// Woah! More autorelease counts then retain counts left.; // Emit hard error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:72,error,error,72,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,1,['error'],['error']
Availability,"// Work around Solaris/amd64 ld bug when calling __tls_get_addr directly.; // However, ld -z relax=transtls is available since Solaris 11.2, but not; // in Illumos.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Solaris.cpp:111,avail,available,111,interpreter/llvm-project/clang/lib/Driver/ToolChains/Solaris.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Solaris.cpp,1,['avail'],['available']
Availability,// Work out the masks for the lowest and highest bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:16,mask,masks,16,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['mask'],['masks']
Availability,"// Work out what range of DPValues to clone: normally all the contents of the; // ""From"" marker, optionally we can start from the from_here position down to; // end().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugProgramInstruction.cpp:149,down,down,149,interpreter/llvm-project/llvm/lib/IR/DebugProgramInstruction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugProgramInstruction.cpp,1,['down'],['down']
Availability,"// Workaround for llvm.org/PR23435, since clang 3.6 and below emit a spurious; // error when __has_cpp_attribute is given a scoped attribute in C mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h:82,error,error,82,interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,1,['error'],['error']
Availability,"// Worker method for lexPreprocessor() to skip lines after some; // preprocessing directive up to the buffer end or to the directive; // that re-enables token processing. The method returns true; // upon processing the next directive that re-enables tokens; // processing. False is returned if an error was encountered.; //; // Note that prepSkipRegion() calls lexPreprocessor() to process; // encountered preprocessing directives. In this case, the second; // parameter to lexPreprocessor() is set to false. Being passed; // false ReturnNextLiveToken, lexPreprocessor() must never call; // prepSkipRegion(). We assert this by passing ReturnNextLiveToken; // to prepSkipRegion() and checking that it is never set to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:297,error,error,297,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,1,['error'],['error']
Availability,"// Working around integer by-value escapes.; // The by-value escape would not be captured in checkPointerEscape.; // If the function was not analyzed (otherwise wasInlined should be; // true) and there is no annotation on the handle, we assume the handle; // is escaped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/FuchsiaHandleChecker.cpp:93,checkPoint,checkPointerEscape,93,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/FuchsiaHandleChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/FuchsiaHandleChecker.cpp,1,['checkPoint'],['checkPointerEscape']
Availability,"// Worklist contains the list of function imported in this module, for which; // we will analyse the callees and may import further down the callgraph.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:132,down,down,132,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['down'],['down']
Availability,"// Would need SumW2 error matrix correction, but no done in macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testCompatMode.cxx:20,error,error,20,roofit/roofit/test/vectorisedPDFs/testCompatMode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testCompatMode.cxx,1,['error'],['error']
Availability,"// Would need SumW2 or asymptotic error correction, but that's not in test macro.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGauss.cxx:34,error,error,34,roofit/roofit/test/vectorisedPDFs/testGauss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGauss.cxx,1,['error'],['error']
Availability,"// Wrap return value with a recovery expression of the previous type.; // If no deduction yet, use DependentTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:28,recover,recovery,28,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['recover'],['recovery']
Availability,"// Wrapper callback: except this to become available from Cling directly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.h:43,avail,available,43,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.h,1,['avail'],['available']
Availability,// Wrapper to fix template argument deduction failures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CostTable.h:46,failure,failures,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/CostTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CostTable.h,2,['failure'],['failures']
Availability,"// Write TmpVGPR to memory or read TmpVGPR from memory.; // Either using a single buffer_load/store if exec is set to the needed mask; // or using; // buffer_load; // s_not exec, exec; // buffer_load; // s_not exec, exec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp:129,mask,mask,129,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,1,['mask'],['mask']
Availability,"// Write all bundles along with the start/end markers. If an error was found; // writing the end of the bundle component, abort the bundle writing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:61,error,error,61,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,1,['error'],['error']
Availability,// Write down each range where the variable is defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp:9,down,down,9,interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,1,['down'],['down']
Availability,// Write down how to convert from a derived pointer to a base pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:9,down,down,9,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['down'],['down']
Availability,"// Write out the deployment target information, if it's available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp:56,avail,available,56,interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,1,['avail'],['available']
Availability,"// Write the key if no error occured",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:23,error,error,23,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['error'],['error']
Availability,"// Write the number of words in the Bloom filter. As above, the ""MaskWords""; // property can be used to set this field to any value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:65,Mask,MaskWords,65,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,1,['Mask'],['MaskWords']
Availability,// Write the required features mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:31,mask,mask,31,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,2,['mask'],['mask']
Availability,"// Write the system error only once for this file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:20,error,error,20,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['error'],['error']
Availability,// Write them down.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:14,down,down,14,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,1,['down'],['down']
Availability,"// Write value with error (if not zero)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:20,error,error,20,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['error'],['error']
Availability,// Writing over an existing file is not considered an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:54,error,error,54,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,1,['error'],['error']
Availability,"// Writing to stdout should not be treated as an error here, just; // do not set access/modification times or permissions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:49,error,error,49,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,1,['error'],['error']
Availability,// X / 0 -> poison; // X % 0 -> poison; // We don't need to preserve faults!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:69,fault,faults,69,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['fault'],['faults']
Availability,"// X option. Run Pseudo-experiments to determine NULL distribution of the; // KS distance. We can find the probability from the number of pseudo-experiment that have a; // KS distance larger than the one opbserved in the data.; // We use the histogram with the largest statistics as a parent distribution for the NULL.; // Note if one histogram has zero errors is considered as a function. In that case we use it; // as parent distribution for the toys.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:354,error,errors,354,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// X11 events are handled via gXDisplay->Notify() in; // TUnixSystem::DispatchOneEvent(). When no events available we wait for; // events on all TFileHandlers including this one via a select() call.; // However, X11 events are always handled via gXDisplay->Notify() and not; // via the ReadNotify() (therefore TGInputHandler should not override; // TFileHandler::ReadNotify()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGClient.cxx:105,avail,available,105,gui/gui/src/TGClient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGClient.cxx,1,['avail'],['available']
Availability,// X86 has dedicated pack instructions that can handle specific truncation; // operations: PACKSS and PACKUS.; // Checks for compaction shuffle masks if MaxStages > 1.; // TODO: Add support for matching multiple PACKSS/PACKUS stages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:144,mask,masks,144,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,// X86 interrupts must pop the error code (and the alignment padding) if; // present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:31,error,error,31,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['error'],['error']
Availability,"// X86 target has bfloat16 emulation support in the backend, where; // bfloat16 is treated as a 32-bit float, arithmetic operations are; // performed in 32-bit, and the result is converted back to bfloat16.; // Truncation and extension between bfloat16 and 32-bit float are supported; // by the compiler-rt library. However, native bfloat16 support is currently; // not available in the X86 target. Hence, HasFullBFloat16 will be false; // until native bfloat16 support is available. HasFullBFloat16 is used to; // determine whether to automatically use excess floating point precision; // for bfloat16 arithmetic operations in the front-end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:370,avail,available,370,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,2,['avail'],['available']
Availability,// X86-SSE is even stranger. It uses -1 or 0 for vector masks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:56,mask,masks,56,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,// XLo = X & HalfMask; // YLo = Y & HalfMask; // TODO: Refactor with SimplifyDemandedBits or KnownBits known leading zeros; // to enhance robustness,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:138,robust,robustness,138,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['robust'],['robustness']
Availability,// XNACK selection mask for EF_AMDGPU_FEATURE_XNACK_* values.; //; // Only valid for ELFOSABI_AMDGPU_HSA and ELFABIVERSION_AMDGPU_HSA_V4.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:19,mask,mask,19,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['mask'],['mask']
Availability,// XOP can shift v16i8 directly instead of as shift v8i16 + mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:60,mask,mask,60,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// XSync(_dpy, kFALSE); // force the error...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDNDManager.cxx:37,error,error,37,gui/gui/src/TGDNDManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDNDManager.cxx,1,['error'],['error']
Availability,// XXX - Seems LivePhysRegs doesn't work correctly since it will incorrectly; // report the register as unavailable because a super-register with a lane mask; // is unavailable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp:153,mask,mask,153,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp,1,['mask'],['mask']
Availability,"// XXX This could be searching in the set of available registers, in case; // the match is not exact.; // Match 16-bit chunks, where the RC[B..B+15] references exactly one; // register and all the bits B..B+15 match between RC and the register.; // This is meant to match ""v1[0-15]"", where v1 = { [0]:0 [1-15]:v1... },; // and RC = { [0]:0 [1-15]:v1[1-15]... }.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:45,avail,available,45,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['avail'],['available']
Availability,"// XXX: The earliest documentation available at the moment is for VS2015/VC19:; // https://docs.microsoft.com/en-us/cpp/c-runtime-library/floating-point-support?view=vs-2015; // XXX: In order to use an MSVCRT older than VC19,; // the specific library version must be explicit in the target triple,; // e.g., x86_64-pc-windows-msvc18.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:35,avail,available,35,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,"// XXX: We are running this after RA, so creating virtual registers will; // cause an assertion failure in the PostRA scheduling pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:96,failure,failure,96,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['failure'],['failure']
Availability,// Xnack is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h:12,avail,available,12,interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,1,['avail'],['available']
Availability,"// Xor/and/or are indifferent to the swizzle operation (shuffle of one value).; // Simplify xor/and/or (shuff(A), shuff(B)) -> shuff(op (A,B)); // If both shuffles use the same mask, and both shuffle within a single; // vector, then it is worthwhile to move the swizzle after the operation.; // The type-legalizer generates this pattern when loading illegal; // vector types from memory. In many cases this allows additional shuffle; // optimizations.; // There are other cases where moving the shuffle after the xor/and/or; // is profitable even if shuffles don't perform a swizzle.; // If both shuffles use the same mask, and both shuffles have the same first; // or second operand, then it might still be profitable to move the shuffle; // after the xor/and/or operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:177,mask,mask,177,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],['mask']
Availability,"// YAMLIn dynamically allocates for Interface file and in case of error,; // memory leak will occur unless wrapped around unique_ptr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp:66,error,error,66,interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp,1,['error'],['error']
Availability,"// YYYY Or, it might be better to render overlay after the tone-mapping.; // Eventually, if only overlay changes, we don't need to render the base-scene but; // only overlay and re-merge them. Need to keep base textures alive in RendeQuTor.; // Note that rgt.render_end() releases all std textures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:220,alive,alive,220,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['alive'],['alive']
Availability,// YYYY isn't it an error if obj exists?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:20,error,error,20,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['error'],['error']
Availability,"// You are supposed to call parse() first and then check if error is true. If; // it is false, call output() to write the formatted name to the given stream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:60,error,error,60,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,1,['error'],['error']
Availability,// You need to call this before Mask update,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kCollapseMOVEMPass.cpp:32,Mask,Mask,32,interpreter/llvm-project/llvm/lib/Target/M68k/M68kCollapseMOVEMPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kCollapseMOVEMPass.cpp,1,['Mask'],['Mask']
Availability,// ZExt boils down to & 0x1; for SExt we also subtract that from 0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMInstructionSelector.cpp:14,down,down,14,interpreter/llvm-project/llvm/lib/Target/ARM/ARMInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMInstructionSelector.cpp,1,['down'],['down']
Availability,// Zap gathers with a zero mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,mask,mask,27,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,// Zap masked loads with a zero mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,mask,masked,7,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],"['mask', 'masked']"
Availability,// Zap masked stores with a zero mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,mask,masked,7,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],"['mask', 'masked']"
Availability,// Zap scatters with a zero mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,mask,mask,28,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['mask'],['mask']
Availability,// Zap the fully redundant load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:17,redundant,redundant,17,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,2,['redundant'],['redundant']
Availability,// Zero Mask - masked load instruction creates a zero vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:8,Mask,Mask,8,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,2,"['Mask', 'mask']","['Mask', 'masked']"
Availability,// Zero Mask - select 1st argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:8,Mask,Mask,8,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['Mask'],['Mask']
Availability,// Zero Mask - this masked store instruction does nothing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:8,Mask,Mask,8,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,2,"['Mask', 'mask']","['Mask', 'masked']"
Availability,"// Zero extends are a little more awkward. At the point we are matching; // this, we are looking for an AND with a (-1, 0, -1, 0) buildvector mask.; // That might be before of after a bitcast depending on how the and is; // placed. Because this has to look through bitcasts, it is currently only; // supported on LE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:142,mask,mask,142,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['mask'],['mask']
Availability,// Zero out now to ease cleanup during crash recovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:45,recover,recovery,45,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,1,['recover'],['recovery']
Availability,"// Zero-extend bottom element to v2i64 vector type, either by extension or; // shuffle masking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:87,mask,masking,87,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masking']
Availability,"// Zeroes are retained from the mask, but not ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:32,mask,mask,32,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// Zeros are retained from the mask operand. But not ones.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:31,mask,mask,31,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// Zlib's crc32() only takes a 32-bit length, so we have to iterate for larger; // sizes. One could use crc32_z() instead, but that's a recent (2017) addition; // and may not be available on all systems.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:178,avail,available,178,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp,1,['avail'],['available']
Availability,"// [=, this] {}; // until C++20: Error: this when = is the default",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:33,Error,Error,33,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['Error'],['Error']
Availability,"// [Reg, DW_OP_constu, Offset, DW_OP_plus] --> [DW_OP_breg, Offset]; // [Reg, DW_OP_constu, Offset, DW_OP_minus] --> [DW_OP_breg,-Offset]; // If Reg is a subregister we need to mask it out before subtracting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.cpp:177,mask,mask,177,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.cpp,1,['mask'],['mask']
Availability,// [SU][MIN|MAX] are available for all NEON types apart from i64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:21,avail,available,21,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['avail'],['available']
Availability,"// [dcl.fct.def.coroutine]p15; // The expression co_await promise.final_suspend() shall not be; // potentially-throwing ([except.spec]).; //; // First time seeing an error, emit the error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:166,error,error,166,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,2,['error'],['error']
Availability,"// [expr.sizeof] p1: return -1 on: func, incomplete, bitfield, incomplete; // enumeration; // Note: We get the cxtype, not the cxcursor, so we can't call; // FieldDecl->isBitField(); // [expr.sizeof] p3: pointer ok, function not ok.; // [gcc extension] lib/AST/ExprConstant.cpp:1372 HandleSizeof : vla == error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:305,error,error,305,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp,1,['error'],['error']
Availability,"// [module.interface]p7; // Class and enumeration member names can be found by name lookup in any; // context in which a definition of the type is reachable.; //; // FIXME: The current implementation didn't consider about scope. For example,; // ```; // // m.cppm; // export module m;; // enum E1 { e1 };; // // Use.cpp; // import m;; // void test() {; // auto a = E1::e1; // Error as expected.; // auto b = e1; // Should be error. namespace-scope name e1 is not visible; // }; // ```; // For the above example, the current implementation would emit error for `a`; // correctly. However, the implementation wouldn't diagnose about `b` now.; // Since we only check the reachability for the parent only.; // See clang/test/CXX/module/module.interface/p7.cpp for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:376,Error,Error,376,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,3,"['Error', 'error']","['Error', 'error']"
Availability,"// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In; // case of error emits appropriate diagnostic and invalidates \p Var.; //; // \details CUDA allows only empty constructors as initializers for global; // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all; // __shared__ variables whether they are local or not (they all are implicitly; // static in CUDA). One exception is that CUDA allows constant initializers; // for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,error,error,87,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"// __HIP_OVERLOAD2 is used to resolve function calls with mixed float/double; // or integer argument to avoid compilation error due to ambibuity. e.g.; // max(5.0f, 6.0) is resolved with max(double, double).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h:122,error,error,122,interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h,1,['error'],['error']
Availability,"// __attribute__((aligned)) can increase or decrease alignment; // *except* on a struct or struct member, where it only increases; // alignment unless 'packed' is also specified.; //; // It is an error for alignas to decrease alignment, so we can; // ignore that possibility; Sema should diagnose it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:196,error,error,196,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['error'],['error']
Availability,// __bf16 is always available as a load/store only type on AMDGCN.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:20,avail,available,20,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,1,['avail'],['available']
Availability,// __bf16 is always available as a load/store only type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp:20,avail,available,20,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp,1,['avail'],['available']
Availability,"// __builtin_isfpclass has integer parameter that specify test mask. It is; // passed in (...), so it should be analyzed completely here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:63,mask,mask,63,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['mask'],['mask']
Availability,"// __module_private__ does not apply to local classes. However, we only; // diagnose this as an error when the declaration specifiers are; // freestanding. Here, we just ignore the __module_private__.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:96,error,error,96,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,// __shfl_sync_* variants available in CUDA-9,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h:26,avail,available,26,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h,1,['avail'],['available']
Availability,// __small_printf and friends are only available on Emscripten.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:39,avail,available,39,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,"// __wasm_lpad_context global variable.; // This variable should be thread local. If the target does not support TLS,; // we depend on CoalesceFeaturesAndStripAtomics to downgrade it to; // non-thread-local ones, in which case we don't allow this object to be; // linked with other objects using shared memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp:170,down,downgrade,170,interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp,1,['down'],['downgrade']
Availability,"// _com_ptr_t will throw a _com_error if a COM calls fail.; // The LLVM coding standards forbid exception handling, so we'll have to; // stop them from being thrown in the first place.; // The destructor will put the regular error handler back when we leave; // this scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:225,error,error,225,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,1,['error'],['error']
Availability,"// `ERROR` and `PI` are from loading R related modules, which conflict with; // user's code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:4,ERROR,ERROR,4,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['ERROR'],['ERROR']
Availability,"// `HasPath` will only be false if getDefaultModuleCachePath() fails.; // That being said, that failure is unlikely and not caching is harmless.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:96,failure,failure,96,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['failure'],['failure']
Availability,"// `MI` is a br_table instruction with a dummy default target argument. This; // function finds and adds the default target argument and removes any redundant; // range check preceding the br_table. Returns the MBB that the br_table is; // moved into so it can be removed from further consideration, or nullptr if the; // br_table cannot be optimized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp:149,redundant,redundant,149,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,1,['redundant'],['redundant']
Availability,"// `fflush` returns EOF on failure, otherwise returns 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:27,failure,failure,27,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['failure'],['failure']
Availability,"// a = shuffle v1, v2, mask1 ; interleaving lower lanes of v1 and v2; // b = shuffle v1, v2, mask2 ; interleaving higher lanes of v1 and v2; // =>; // ul = unpckl v1, v2; // uh = unpckh v1, v2; // a = vperm ul, uh; // b = vperm ul, uh; //; // Pattern-match interleave(256b v1, 256b v2) -> 512b v3 and lower it into unpck; // and permute. We cannot directly match v3 because it is split into two; // 256-bit vectors in earlier isel stages. Therefore, this function matches a; // pair of 256-bit shuffles and makes sure the masks are consecutive.; //; // Once unpck and permute nodes are created, the permute corresponding to this; // shuffle is returned, while the other permute replaces the other half of the; // shuffle in the selection dag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:522,mask,masks,522,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,"// a TGraph2D with asymmetric errors does not exist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:30,error,errors,30,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// a more complex expression (failure on Win32)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:30,failure,failure,30,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['failure'],['failure']
Availability,"// a plot only available in case DoBoostMontior option has bee set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDTControlPlots.cxx:15,avail,available,15,tmva/tmvagui/src/BDTControlPlots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDTControlPlots.cxx,2,['avail'],['available']
Availability,"// a[10] = &n6; // gives out-of-bound error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:38,error,error,38,test/tcollex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx,1,['error'],['error']
Availability,"// access to errors in column-wise representation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:13,error,errors,13,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,1,['error'],['errors']
Availability,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:28,error,errors,28,math/minuit2/inc/Minuit2/MnApplication.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h,3,['error'],['errors']
Availability,"// accessing array elements should be OK; //if ((fMajorFormula->GetMultiplicity() != 0) || (fMinorFormula->GetMultiplicity() != 0)) {; // MakeZombie();; // Error(""TreeIndex"",""Cannot build the index with major=%s, minor=%s that cannot be arrays"",fMajorName.Data(), fMinorName.Data());; // return;; //}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeIndex.cxx:156,Error,Error,156,tree/treeplayer/src/TTreeIndex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeIndex.cxx,1,['Error'],['Error']
Availability,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:109,error,errors,109,hist/hist/src/TLimit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx,2,['error'],['errors']
Availability,"// act in case of error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:18,error,error,18,math/mathmore/src/GSLMultiRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx,1,['error'],['error']
Availability,"// activate interpreter error report",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:24,error,error,24,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['error'],['error']
Availability,"// add a 1-sigma error ellipse, if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:17,error,error,17,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,1,['error'],['error']
Availability,"// add a datapoint for a bin with n entries, using a Poisson error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:61,error,error,61,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a datapoint for a bin with n entries, using a given error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:59,error,error,59,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a datapoint for a bin with n entries, using a given x and y error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:67,error,error,67,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a datapoint for the asymmetry (n1-n2)/(n1+n2), using a binomial error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:71,error,error,71,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a datapoint for the asymmetry (n1-n2)/(n1+n2), using sum-of-weights error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:75,error,error,75,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a datapoint for the efficiency (n1)/(n1+n2), using a binomial error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:69,error,error,69,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a datapoint for the efficiency (n1)/(n1+n2), using a sum-of-weights error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:75,error,error,75,roofit/roofitcore/inc/RooHist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h,1,['error'],['error']
Availability,"// add a systematic error source",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:20,error,error,20,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['error']
Availability,"// add also case when delta is small by default (relative error + absolute error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx:58,error,error,58,math/mathcore/test/stress/TestHelper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx,2,['error'],['error']
Availability,"// add correlated background errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:29,error,errors,29,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['errors']
Availability,"// add errors from previous line",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx:7,error,errors,7,gui/gui/src/TGColorDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx,1,['error'],['errors']
Availability,"// add forward errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx:15,error,errors,15,gui/gui/src/TGColorDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx,1,['error'],['errors']
Availability,"// add main() to avoid a linking error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:33,error,error,33,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,1,['error'],['error']
Availability,"// add the error bar for parameter 1, if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:11,error,error,11,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,1,['error'],['error']
Availability,"// add uncorrelated background errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:31,error,errors,31,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],['errors']
Availability,"// add up Poisson errors squared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldIterativeEM.cxx:18,error,errors,18,hist/unfold/src/TUnfoldIterativeEM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldIterativeEM.cxx,2,['error'],['errors']
Availability,"// added to keep the sum alive! with the node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,alive,alive,25,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// address of flag set when default char used.; // Now lookup all members of this group and record down their names and; // SIDs into the output file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:99,down,down,99,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['down'],['down']
Availability,"// adjust error in y according to option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:10,error,error,10,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// adjust the given error according to the option; // return false when point must be skipped.; // When point error = 0, the point is kept if the option UseEmpty is set or if; // fErrors1 is set and the point value is not zero.; // The value should be used only for points representing counts (histograms), not for the graph.; // In the graph points with zero errors are by default skipped indepentently of the value.; // If one wants to keep the points, the option fUseEmpty must be set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:20,error,error,20,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,3,['error'],"['error', 'errors']"
Availability,"// algorithm thanks to Real-Time Collision Detection by Christer Ericson,; // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,; // under the accompanying license; see chapter 5.1.5 for detailed explanation.; // basically, we're distinguishing which of the voronoi regions of the triangle; // the point lies in with the minimum amount of redundant computation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:353,redundant,redundant,353,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['redundant'],['redundant']
Availability,"// algorithms only for GraphErrors (excluding error in X)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:46,error,error,46,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['error'],['error']
Availability,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:11,error,errors,11,roofit/roofitZMQ/src/ZeroMQSvc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp,4,"['error', 'recover']","['errors', 'recoverable']"
Availability,// already available in cache?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:11,avail,available,11,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,1,['avail'],['available']
Availability,"// an error message should be eventually be reported in the virtual single SetVariable methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h:6,error,error,6,math/mathcore/inc/Math/Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h,1,['error'],['error']
Availability,// an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp:6,error,error,6,interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,1,['error'],['error']
Availability,"// an example of a filter's prolog::; // %0 = call ptr @llvm.eh.recoverfp(@""?fin$0@0@main@@"",..); // %1 = call ptr @llvm.localrecover(@""?fin$0@0@main@@"",..); // %2 = load ptr, ptr %1, align 8; // ==> %2 is the frame-pointer of outermost host function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:64,recover,recoverfp,64,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['recover'],['recoverfp']
Availability,"// and (fcmp seto), (fp_class x, mask) -> fp_class x, mask & ~(p_nan | n_nan); // and (fcmp setuo), (fp_class x, mask) -> fp_class x, mask & (p_nan | n_nan)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:33,mask,mask,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,4,['mask'],['mask']
Availability,"// and (srl x, c), mask => shl (bfe x, nb + c, mask >> nb), nb; // nb = number of trailing zeroes in mask; // It can be optimized out using SDWA for GFX8+ in the SDWA peephole pass,; // given that we are selecting 8 or 16 bit fields starting at byte boundary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,3,['mask'],['mask']
Availability,"// and BinOpRes, BinOpRes, Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:27,Mask,Mask,27,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,1,['Mask'],['Mask']
Availability,"// and OldVal, OldVal, Mask; // and Incr, Incr, Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:23,Mask,Mask,23,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,2,['Mask'],['Mask']
Availability,"// and andres, oldval, incr2; // nor binopres, $0, andres; // and newval, binopres, mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:84,mask,mask,84,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,1,['mask'],['mask']
Availability,// anonymous namespace; // Handle error reporting in cases where `ExitOnError` is not used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp:34,error,error,34,interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,1,['error'],['error']
Availability,// anonymous; // Tracker for markers in the input files. A marker is a comment of the form; //; // n = 123; // #123; //; // ... that can be referred to by a later expected-* directive:; //; // // expected-error@#123 {{undeclared identifier 'n'}}; //; // Marker declarations must be at the start of a comment or preceded by; // whitespace to distinguish them from uses of markers in directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:205,error,error,205,interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp,1,['error'],['error']
Availability,// any single contingous sequence of 1s anywhere in the mask simply; // describes a subset of the input bits shifted to the appropriate; // position. Replace with the straight forward IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:56,mask,mask,56,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,2,['mask'],['mask']
Availability,"// append our error if requested and this variable is not constant",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:14,error,error,14,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['error'],['error']
Availability,"// apply correct masks, and count pipes with pending events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:17,mask,masks,17,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['mask'],['masks']
Availability,// apply shift left to mask if it comes first,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:23,mask,mask,23,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,// apply shift right to mask if it comes first,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:24,mask,mask,24,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// apply weight correction . Effective weight is error^2/ y; // and expected events in bins is fval/weight; // can apply correction only when y is not zero otherwise weight is undefined; // (in case of weighted likelihood I don't care about the constant term due to; // the saturated model)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:49,error,error,49,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,1,['error'],['error']
Availability,"// apply weight correction . Effective weight is error^2/ y; // and expected events in bins is fval/weight; // can apply correction only when y is not zero otherwise weight is undefined; // (in case of weighted likelihood I don't care about the constant term due to; // the saturated model); // use for the empty bins the global weight",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:49,error,error,49,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// ashr(R, Amt) === sub(xor(lshr(R, Amt), Mask), Mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:42,Mask,Mask,42,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['Mask'],['Mask']
Availability,"// assert(!seed.Error().IsPosDef());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:16,Error,Error,16,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['Error'],['Error']
Availability,"// assign an ARBITRARY starting error to ensure the parameter won't be fixed!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:32,error,error,32,hist/hist/src/TBinomialEfficiencyFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx,1,['error'],['error']
Availability,"// assume 50% signal probability, if no events found (bad assumption, but can be overruled by cut on error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:101,error,error,101,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// assume error set when converter failed; // TODO: On Windows, throwing a C++ exception here makes the code hang; leave; // the error be which allows at least one layer of propagation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:10,error,error,10,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,2,['error'],['error']
Availability,"// assume failure; // Make typedefs for some ole32.dll functions so that we can use them; // with GetProcAddress",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:10,failure,failure,10,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['failure'],['failure']
Availability,"// assume for now all fits in given path will have the same pars; // so can just look at the float and const pars of first fit result to get all of them; // tuple is: parName, parValue, parAltValue (blank if nan); // key represents the ufit values, value represents the sets of poi for the available cfits (subfits of the ufit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:290,avail,available,290,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['avail'],['available']
Availability,"// assume for now least-square; // since TFumili does not use errordef we must divide chi2 by 2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:62,error,errordef,62,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['error'],['errordef']
Availability,// assume(V & Mask = C),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:14,Mask,Mask,14,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['Mask'],['Mask']
Availability,// assume(V ^ Mask = C),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:14,Mask,Mask,14,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['Mask'],['Mask']
Availability,// assume(V | Mask = C),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:14,Mask,Mask,14,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['Mask'],['Mask']
Availability,"// assumes that in case of failure xcol[i].pixel is not changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:27,failure,failure,27,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,2,['failure'],['failure']
Availability,"// asymmetric errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:14,error,errors,14,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// atomic.swap; // and newval, incr2, mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,1,['mask'],['mask']
Availability,// available IO unlocked variants on GNU/Linux and Android P or later,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:3,avail,available,3,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,// available IO unlocked variants on Mac OS X,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:3,avail,available,3,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,"// available MVA methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:3,avail,available,3,tmva/tmva/inc/TMVA/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h,1,['avail'],['available']
Availability,"// available RAM in MB",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,avail,available,3,core/base/inc/TSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h,1,['avail'],['available']
Availability,"// available variable transformations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:3,avail,available,3,tmva/tmva/inc/TMVA/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h,1,['avail'],['available']
Availability,"// avoid default tolerance to be too small (1. is default in RooMinimizer)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:17,toler,tolerance,17,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,1,['toler'],['tolerance']
Availability,"// avoid mis-leading byte count error message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:32,error,error,32,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,2,['error'],['error']
Availability,"// avoid overflowing the error list, so if there are very many, print; // the oldest one first, and pop it off the list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:25,error,error,25,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['error'],['error']
Availability,"// avoid rounding error which can make E2 negative when M2 is negative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PtEtaPhiM4D.h:18,error,error,18,math/genvector/inc/Math/GenVector/PtEtaPhiM4D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PtEtaPhiM4D.h,1,['error'],['error']
Availability,"// avoid rounding errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,error,errors,18,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,4,['error'],['errors']
Availability,"// avoid to return errors which makes eff-err < 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:19,error,errors,19,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['error'],['errors']
Availability,"// avx512.mask.psll.d.128, avx512.mask.psll.di.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psll.d.256, avx512.mask.psll.di.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psll.q.128, avx512.mask.psll.qi.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psll.q.256, avx512.mask.psll.qi.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psll.w.128, avx512.mask.psll.wi.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psll.w.256, avx512.mask.psll.wi.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,// avx512.mask.psllv16.hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psllv2.di,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psllv32hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psllv4.di,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psllv4.si,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psllv8.hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psllv8.si,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,"// avx512.mask.psra.d.128, avx512.mask.psra.di.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psra.d.256, avx512.mask.psra.di.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psra.q.128, avx512.mask.psra.qi.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psra.q.256, avx512.mask.psra.qi.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psra.w.128, avx512.mask.psra.wi.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psra.w.256, avx512.mask.psra.wi.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,// avx512.mask.psrav16.hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrav32hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrav4.si,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrav8.hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrav8.si,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,"// avx512.mask.psrl.d.128, avx512.mask.psrl.di.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psrl.d.256, avx512.mask.psrl.di.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psrl.q.128, avx512.mask.psrl.qi.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psrl.q.256, avx512.mask.psrl.qi.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psrl.w.128, avx512.mask.psrl.wi.128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,"// avx512.mask.psrl.w.256, avx512.mask.psrl.wi.256",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,2,['mask'],['mask']
Availability,// avx512.mask.psrlv16.hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrlv2.di,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrlv32hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrlv4.di,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrlv4.si,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrlv8.hi,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,// avx512.mask.psrlv8.si,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['mask'],['mask']
Availability,"// bad tolerance for this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:7,toler,tolerance,7,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['toler'],['tolerance']
Availability,"// before calculating the gradient check that all error in x are not zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:50,error,error,50,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// bfgs2 is available only for v>= 1.9",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:12,avail,available,12,math/mathmore/src/GSLMultiMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h,1,['avail'],['available']
Availability,"// bin error, lazy allocation happens in TNDArrayT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h:7,error,error,7,hist/hist/inc/THn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THn.h,1,['error'],['error']
Availability,"// bit mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoAtt.h:7,mask,mask,7,geom/geom/inc/TGeoAtt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoAtt.h,1,['mask'],['mask']
Availability,// bit mask marking indeterminant results,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:7,mask,mask,7,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,// bit-mask of used co-processor registers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:7,mask,mask,7,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,2,['mask'],['mask']
Availability,// bit-mask of used general registers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:7,mask,mask,7,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,2,['mask'],['mask']
Availability,"// bitcast (inselt (bitcast X), Y, 0) --> or (and X, MaskC), (zext Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:53,Mask,MaskC,53,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['Mask'],['MaskC']
Availability,"// bitcast (shuf V, MaskC) --> shuf (bitcast V), MaskC'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:20,Mask,MaskC,20,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,2,['Mask'],['MaskC']
Availability,"// blend(bitcast(x),bitcast(y)) -> bitcast(blend(x,y)) to narrower types.; // TODO: Handle MVT::v16i16 repeated blend mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:118,mask,mask,118,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// bool __atomic_compare_exchange(size_t size, void *obj, void *expected,; // void *desired, int success, int failure);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:110,failure,failure,110,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,1,['failure'],['failure']
Availability,"// bool flipPvalue = false;; // if (flipPValues); // hcResult->SetPValueIsRightTail(!hcResult->GetPValueIsRightTail());; // adjust for some numerical error in discrete models and == is not anymore",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:150,error,error,150,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['error'],['error']
Availability,"// both error low and high should be empty or not",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:8,error,error,8,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,1,['error'],['error']
Availability,"// both str and std::string have method ""find"" and ""rfin""; try the C++ version first; // and fall back on the Python one in case of failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:132,failure,failure,132,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['failure'],['failure']
Availability,"// break in case of read error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:25,error,error,25,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['error'],['error']
Availability,"// break the range down into several trapezoids using 2**(n-2); // equally-spaced interior points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:19,down,down,19,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,1,['down'],['down']
Availability,"// bsel_v(Mask, IfClear, IfSet) -> (vselect Mask, IfSet, IfClear)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:10,Mask,Mask,10,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,2,['Mask'],['Mask']
Availability,"// bseli_v(Mask, IfClear, IfSet) -> (vselect Mask, IfSet, IfClear)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:11,Mask,Mask,11,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,2,['Mask'],['Mask']
Availability,"// build a TGraphErrors of pValues over the existing points; // opt should include any of the following:; // cls: do pCLs, otherwise do pNull; // expX: do expected, X sigma (use +X or -X for contour, otherwise will return band unless X=0); // toys: pvalues from available toys; // readonly: don't compute anything, just return available values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:262,avail,available,262,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,2,['avail'],['available']
Availability,"// build a fitResult using nominal values and infer errors from constraints; // that aren't the 'main' constraints; // Warning(""fitResult"",""Building prefitResult by examining pdf. Consider setting an explicit prefitResult; // (SetFitResult(fr)) where fr name is prefitResult"");; // ensure coefs are included if there are any",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:52,error,errors,52,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,"// build list of available functions; // Sub ComboBox for Type Function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanelModel.cxx:17,avail,available,17,gui/fitpanelv7/src/RFitPanelModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanelModel.cxx,1,['avail'],['available']
Availability,"// build list of available histograms, as id use name from gdir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanelModel.cxx:17,avail,available,17,gui/fitpanelv7/src/RFitPanelModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanelModel.cxx,1,['avail'],['available']
Availability,// built the mask value encoding the expected behavior.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:13,mask,mask,13,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,"// builtin pointer iteration: can only succeed if a size is available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:60,avail,available,60,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['avail'],['available']
Availability,"// builts the Error ComboBox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h:14,Error,Error,14,gui/ged/inc/TH1Editor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h,1,['Error'],['Error']
Availability,"// but is degenerate with at least one other,; // haven't figured out what to do if more than 4 points are involved; /* if (ndegen > 1) {; Error(""Interpolate"",; ""More than 4 points lying on a circle. No decision making process formulated for triangulating this region in a non-arbitrary way %d %d %d %d"",; p,n,m,degen);; return thevalue;; } */; // we have a quadrilateral which can be split down either diagonal; // (d<->f or o1<->o2) to form valid Delaunay triangles. Choose diagonal; // with highest average z-value. Whichever we choose we will have; // verified two triangles as good and two as bad, only note the good ones",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:139,Error,Error,139,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['Error', 'down']","['Error', 'down']"
Availability,"// but is degenerate with at least one other,; // haven't figured out what to do if more than 4 points are involved; /// if (ndegen > 1) {; /// Error(""Interpolate"",; /// ""More than 4 points lying on a circle. No decision making process formulated for triangulating this region in a non-arbitrary way %d %d %d %d"",; /// p,n,m,degen);; /// return thevalue;; /// }; // we have a quadrilateral which can be split down either diagonal; // (d<->f or o1<->o2) to form valid Delaunay triangles. Choose diagonal; // with highest average z-value. Whichever we choose we will have; // verified two triangles as good and two as bad, only note the good ones",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:144,Error,Error,144,hist/hist/src/TGraphDelaunay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx,2,"['Error', 'down']","['Error', 'down']"
Availability,"// button mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:10,mask,mask,10,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,3,['mask'],['mask']
Availability,"// by default do not use absolute tolerance (see https://root.cern/phpBB3/viewtopic.php?f=15&t=20071 )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:34,toler,tolerance,34,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,1,['toler'],['tolerance']
Availability,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:34,toler,tolerance,34,math/mathcore/src/IntegratorOptions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx,2,['toler'],['tolerance']
Availability,"// c++ can put code into header files, why cant we? (with the inline declaration, should be safe from duplicate-symbol error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:119,error,error,119,math/mathcore/src/mixmax.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h,1,['error'],['error']
Availability,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:9,Error,Error,9,math/mathmore/inc/Math/GSLIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h,2,['Error'],['Error']
Availability,"// calc discriminator (and it's error) for each cell",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:32,error,error,32,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,2,['error'],['error']
Availability,"// calc weight (and it's error) for each cell",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:25,error,error,25,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// calculate Binomial errors for this bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx:22,error,errors,22,roofit/roofitcore/src/RooHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx,4,['error'],['errors']
Availability,"// calculate Poisson errors for this bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx:21,error,errors,21,roofit/roofitcore/src/RooHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx,1,['error'],['errors']
Availability,"// calculate asymmetric errors, if required, on the named parameter that was floating in the fit; // returns status code. 0 = all good, 1 = failure, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:24,error,errors,24,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,"['error', 'failure']","['errors', 'failure']"
Availability,"// calculate correlated error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:24,error,error,24,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['error']
Availability,"// calculate edm for good errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:26,error,errors,26,math/minuit2/src/MnHesse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx,2,['error'],['errors']
Availability,"// calculate error matrix from error in regularisation parameter; // ematrix: output; // binMap: see method GetEmatrix(); // clearEmat: set kTRUE to clear the histogram prior to adding the errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:13,error,error,13,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['error'],"['error', 'errors']"
Availability,"// calculate error on poi conditional on the given NPs being held constant at their post-fit values; // The conditional error is often presented as the difference in quadrature to the total error i.e.; // error contribution due to conditional NPs = sqrt( pow(totError,2) - pow(condError,2) )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:13,error,error,13,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,4,['error'],['error']
Availability,"// calculate external error if v exists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:22,error,error,22,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// calculate individual systematic errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:35,error,errors,35,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['errors']
Availability,"// calculate offsets between declared and actual type, up-cast: direction > 0; down-cast: direction < 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:79,down,down-cast,79,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,3,['down'],['down-cast']
Availability,"// calculate square roots of the Eigenvalues of the Error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfold.h:52,Error,Error,52,hist/unfold/inc/TUnfold.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfold.h,1,['Error'],['Error']
Availability,"// calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h:65,error,error,65,tmva/tmva/inc/TMVA/IMethod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IMethod.h,1,['error'],['error']
Availability,"// calculate the contour passing the parameter index (px, py) and the number of requested points (>=4); // the fcn.UP() has to be set to the required value (see Minuit document on errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx:180,error,errors,180,math/minuit2/src/MnContours.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx,1,['error'],['errors']
Availability,"// calculate the effective entries.; // the case when errors are zero (w1 == 0 or w2 ==0) are equivalent to; // compare to a function. In that case the rescaling is done only on sqrt(esum2) or sqrt(esum1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:54,error,errors,54,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,3,['error'],['errors']
Availability,"// calculate the eror on an integral from a to b of a parametetric function f when the parameters; // are estimated from a fit and have an error represented by the covariance matrix of the fit.; // The latest fit result is used; // need to create the gradient functions w.r.t to the parameters; // loop on all parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:139,error,error,139,hist/hist/src/TF1Helper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx,1,['error'],['error']
Availability,"// calculate the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:17,error,error,17,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// calculate the error field of the neuron",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:17,error,error,17,tmva/tmva/inc/TMVA/TNeuron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h,1,['error'],['error']
Availability,"// calculate the error field of the synapse",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:17,error,error,17,tmva/tmva/inc/TMVA/TSynapse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h,1,['error'],['error']
Availability,"// calculate the error matrix using approximation of Fumili; // use only first derivatives (see tutorial par. 5.1,5.2); // The Fumili Hessian is provided by the FumiliGradientCalculator class; // we apply also the Marquard lambda factor to increase weight of diagonal term; // as suggester in Numerical Receipt for Marquard method; // need to downcast to FumiliGradientCalculator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx:17,error,error,17,math/minuit2/src/FumiliErrorUpdator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx,2,"['down', 'error']","['downcast', 'error']"
Availability,"// calculate the error on the Mva value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:17,error,error,17,tmva/tmva/inc/TMVA/MethodPDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h,1,['error'],['error']
Availability,"// calculate the inverse of the contribution to the error matrix; // corresponding to the input data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:52,error,error,52,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['error']
Availability,"// calculate the weighted error using the pruning validation sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:26,error,error,26,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['error'],['error']
Availability,"// calculate uncorrelated error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:26,error,error,26,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['error']
Availability,"// calculating the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:19,error,error,19,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['error'],['error']
Availability,"// call always Hesse (error matrix from Fumili is never accurate since is approximate)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:22,error,error,22,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,1,['error'],['error']
Availability,"// call_indirect instructions have a TYPEINDEX operand that we print; // as a signature here, such that the assembler can recover this; // information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyInstPrinter.cpp:122,recover,recover,122,interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyInstPrinter.cpp,1,['recover'],['recover']
Availability,"// callee may have set a python error itself",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:32,error,error,32,bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx,1,['error'],['error']
Availability,"// calls actual dtor if ref-count down to 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyArg.cxx:34,down,down,34,bindings/pyroot/cppyy/CPyCppyy/src/TPyArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyArg.cxx,2,['down'],['down']
Availability,"// can approximate expected limit using; // mu_hat + sigma_mu*ROOT::Math::gaussian_quantile(1.-alpha/2.,1) for cls; // or mu_hat + sigma_mu*ROOT::Math::gaussian_quantile((1.-alpha),1) for cls+b; // get a very first estimate of sigma_mu from ufit to expected data, take error on mu as sigma_mu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:269,error,error,269,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['error'],['error']
Availability,// can be null along some error paths,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:26,error,error,26,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"// can try to recover nans ... this stopped being possible in 6.27 onwards because NaNPacker made private",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,recover,recover,14,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['recover'],['recover']
Availability,"// cannot determine error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:20,error,error,20,tmva/pymva/src/MethodPyAdaBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx,21,['error'],['error']
Availability,"// cannot go down and/or right with the left key",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx:13,down,down,13,gui/gui/src/TGListView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx,1,['down'],['down']
Availability,"// cannot go down with the left key",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx:13,down,down,13,gui/gui/src/TGListView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx,1,['down'],['down']
Availability,"// cannot treat case of booth histogram have zero zero errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:55,error,errors,55,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// careful for numeical error make sin(theta) ourtside [-1,1]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/3DConversions.cxx:24,error,error,24,math/genvector/src/3DConversions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/3DConversions.cxx,1,['error'],['error']
Availability,"// case (2) or (and A, mask), (and B, mask2) => ARMbfi A, (lsr B, amt), mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:23,mask,mask,23,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['mask'],['mask']
Availability,"// case TStreamerInfo::kSTLvarp: // Variable size array of STL containers.; // {; // TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; // TClass *cl = compinfo[i]->fClass;; // ROOT::NewArrFunc_t arraynew = cl->GetNewArray();; // ROOT::DelArrFunc_t arraydel = cl->GetDeleteArray();; // UInt_t start,count;; // // Version_t v =; // b.ReadVersion(&start, &count, cle);; // if (pstreamer == 0) {; // Int_t size = cl->Size();; // Int_t imethod = compinfo[i]->fMethod+eoffset;; // DOLOOP {; // char **contp = (char**)(arr[k]+ioffset);; // const Int_t *counter = (Int_t*)(arr[k]+imethod);; // const Int_t sublen = (*counter);; // for(int j=0;j<compinfo[i]->fLength;++j) {; // if (arraydel) arraydel(contp[j]);; // contp[j] = 0;; // if (sublen<=0) continue;; // if (arraynew) {; // contp[j] = (char*)arraynew(sublen, 0);; // char *cont = contp[j];; // for(int k=0;k<sublen;++k) {; // cl->Streamer( cont, b );; // cont += size;; // }; // } else {; // // Can't create an array of object; // Error(""ReadBuffer"",""The element %s::%s type %d (%s) can be read because of the class does not have access to new %s[..]\n"",; // GetName(),aElement->GetFullName(),kase,aElement->GetTypeName(),GetName());; // void *cont = cl->New();; // for(int k=0;k<sublen;++k) {; // cl->Streamer( cont, b );; // }; // }; // }; // }; // } else {; // DOLOOP{(*pstreamer)(b,arr[k]+ioffset,compinfo[i]->fLength);}; // }; // b.CheckByteCount(start,count,aElement->GetFullName());; // }; // continue;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoReadBuffer.cxx:985,Error,Error,985,io/io/src/TStreamerInfoReadBuffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoReadBuffer.cxx,1,['Error'],['Error']
Availability,"// case a function minimum is available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:30,avail,available,30,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['avail'],['available']
Availability,"// case both histogram have zero bin contents; // (use square of content to avoid numerical errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:92,error,errors,92,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// case fMinimum is not available - use state information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:24,avail,available,24,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['avail'],['available']
Availability,"// case h1 is exact (has zero errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:30,error,errors,30,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// case h2 has zero errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,error,errors,20,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// case no plugin manager is available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:29,avail,available,29,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,2,['avail'],['available']
Availability,"// case of Seek (random find minimum in a hypercube around current parameter values; // use Tolerance as measures for standard deviation (if < 1) used default value in Minuit ( supposed to be 3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:92,Toler,Tolerance,92,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['Toler'],['Tolerance']
Availability,"// case of asymmetric errors (by default fAsymErrors is true)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:22,error,errors,22,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// case of bins with zero errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:26,error,errors,26,hist/hist/src/TGraphAsymmErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx,2,['error'],['errors']
Availability,"// case of fitting a function with dimension -1; // point error is bin width y / sqrt(N) where N is the number of entries in the bin; // normalization of error will be wrong - but they will be rescaled in the fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:58,error,error,58,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,2,['error'],['error']
Availability,// case of ivars in class extension; all other cases have been; // reported as errors elsewhere.; // FIXME. Class extension does not have a LocEnd field.; // CDecl->setLocEnd(RBrac);; // Add ivar's to class extension's DeclContext.; // Diagnose redeclaration of private ivars.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:79,error,errors,79,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['errors']
Availability,"// case symmetric Y errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:20,error,errors,20,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// case use error in coordinates (x and y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:12,error,error,12,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// case use error in x or asym errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:12,error,error,12,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,2,['error'],"['error', 'errors']"
Availability,"// case weighted histogram has zero bin content and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:52,error,error,52,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// case where label bins are consecutive starting from first bin will work; // calling before a TH1::LabelsDeflate() will avoid this error message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:133,error,error,133,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// case: types are combination of containers and non-containers; // this is not supported, error out",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:91,error,error,91,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,2,['error'],['error']
Availability,"// casting will round down, eg. give i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:22,down,down,22,roofit/roostats/src/SamplingDistribution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx,1,['down'],['down']
Availability,"// caution: here we take some ""forbidden"" action to hide a problem:; // in some cases, in particular for likelihood, the binned efficiency distributions; // do not equal 1, at xmin, and 0 at xmax; of course, in principle we have the; // unbinned information available in the trees, but the unbinned minimization is; // too slow, and we don't need to do a precision measurement here. Hence, we force; // this property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:258,avail,available,258,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,2,['avail'],['available']
Availability,"// changes also errors array (if any)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:16,error,errors,16,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['error'],['errors']
Availability,// check AvailableExternallyLinkage here as getKindForGlobal() asserts,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp:9,Avail,AvailableExternallyLinkage,9,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp,1,['Avail'],['AvailableExternallyLinkage']
Availability,"// check also if that all errors are non zero's",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:26,error,errors,26,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// check edm (add a factor of 10 in tolerance )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:36,toler,tolerance,36,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['toler'],['tolerance']
Availability,"// check first how many slots are available from [acoln,..,acoln+nr-1]; // also note lIndex and rIndex so that [sIndex..lIndex] and [rIndex..eIndex-1]; // contain the row entries except for the region to be inserted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:34,avail,available,34,math/matrix/src/TMatrixTSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx,1,['avail'],['available']
Availability,"// check first if a inimizer is available. If not means; // the minimization is not done , so do it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:32,avail,available,32,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['avail'],['available']
Availability,"// check first if none, to prevent spurious deserializing downstream",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:58,down,downstream,58,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['down'],['downstream']
Availability,"// check for a math error or negative value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:20,error,error,20,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,2,['error'],['error']
Availability,"// check for each class the number of training and testing events, the requested number and the available number",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:96,avail,available,96,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['avail'],['available']
Availability,"// check for error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:13,error,error,13,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['error'],['error']
Availability,"// check for errors ?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:13,error,errors,13,math/mathmore/src/ChebyshevApprox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx,2,['error'],['errors']
Availability,"// check for errors here ???",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:13,error,errors,13,math/mathmore/src/ChebyshevApprox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx,1,['error'],['errors']
Availability,// check for link errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,error,errors,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// check for macro file and make sure the file is available on all slaves",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:50,avail,available,50,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['avail'],['available']
Availability,"// check if Error option (run Hesse and Minos) then",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:12,Error,Error,12,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['Error'],['Error']
Availability,"// check if Hesse needs to be run. We do it when is requested (IsValidError() == true , set by SetParabError(true) in fitConfig); // (IsValidError() means the flag to get correct error from the Minimizer is set (Minimizer::SetValidError()); // AND when we have a valid minimum,; // AND when the the current covariance matrix is estimated using the iterative approximation (Dcovar != 0 , i.e. Hesse has not computed before)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:179,error,error,179,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['error'],['error']
Availability,"// check if Hesse needs to be run; // Migrad runs inside it automatically for strategy >=1. Do also; // in case improve or other minimizers are used; // run Hesse also in case cov matrix has not been computed or has been made pos-def; // or a valid error analysis is requested (when IsValidError() == true)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:249,error,error,249,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['error']
Availability,// check if an EXT instruction can handle the shuffle mask when the; // vector sources of the shuffle are different.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:54,mask,mask,54,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,// check if an EXT instruction can handle the shuffle mask when the; // vector sources of the shuffle are the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:54,mask,mask,54,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,// check if an VEXT instruction can handle the shuffle mask when the; // vector sources of the shuffle are the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:55,mask,mask,55,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['mask'],['mask']
Availability,"// check if any of the parameters are at their limits (potentially a problem with fit); // or their errors go over their limits (just a warning)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:100,error,errors,100,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['error'],['errors']
Availability,"// check if definedCol is in the list of tree branches. This is a bit better than interrogating the TTree; // directly because correct usage of GetBranch, FindBranch, GetLeaf and FindLeaf can be tricky; so let's assume we; // got it right when we collected the list of available branches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:269,avail,available,269,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['avail'],['available']
Availability,"// check if error has been computer (is not zero)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:12,error,error,12,hist/hist/inc/TF1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h,1,['error'],['error']
Availability,"// check if log-likelihood for xprime had an error status",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:45,error,error,45,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['error'],['error']
Availability,"// check if point is close to the left down axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx:39,down,down,39,graf2d/graf/src/TGraphPolargram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx,1,['down'],['down']
Availability,"// check if size is correct otherwise flag an errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:46,error,errors,46,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// check if some text is available in the clipboard",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEditor.cxx:25,avail,available,25,gui/gui/src/TGTextEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEditor.cxx,2,['avail'],['available']
Availability,"// check if we have a specific exporter available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:40,avail,available,40,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,1,['avail'],['available']
Availability,"// check if we should draw markers or error marks directly, skipping optimization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:38,error,error,38,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// check improbable error condition, suppress gcc9 warnings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TColorWheel.cxx:20,error,error,20,graf2d/gpad/src/TColorWheel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TColorWheel.cxx,2,['error'],['error']
Availability,"// check last mysql error code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:20,error,error,20,sql/mysql/src/TMySQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx,1,['error'],['error']
Availability,"// check last mysql statement error code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:30,error,error,30,sql/mysql/src/TMySQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx,2,['error'],['error']
Availability,"// check last pgsql statement error code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:30,error,error,30,sql/pgsql/src/TPgSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx,1,['error'],['error']
Availability,"// check predefined divisions is available in this cell",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:33,avail,available,33,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['avail'],['available']
Availability,"// check that all errors are not zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:18,error,errors,18,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,2,['error'],['errors']
Availability,"// check that errors are provided",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:14,error,errors,14,hist/hist/src/TF1Helper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx,1,['error'],['errors']
Availability,"// check that our grid initialized without errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:43,error,errors,43,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['error'],['errors']
Availability,"// check that parameter error is not zero - otherwise skip it; // should check the limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:24,error,error,24,hist/hist/src/TF1Helper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx,1,['error'],['error']
Availability,"// check that the lower error and upper error are compatible with the parabolic error within 30%; // note that Minos returns lower error as negative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:24,error,error,24,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,4,['error'],['error']
Availability,"// check whether data points with zero error are responsible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:39,error,error,39,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['error']
Availability,"// check whether error is trustworthy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:17,error,error,17,roofit/roostats/src/ToyMCImportanceSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx,1,['error'],['error']
Availability,"// check within a given absolute tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:33,toler,tolerance,33,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['toler'],['tolerance']
Availability,// checkMachOAndArchFlags() checks to see if the ObjectFile is a Mach-O file; // and if it is and there is a list of architecture flags is specified then; // check to make sure this Mach-O file is one of those architectures or all; // architectures were specified. If not then an error is generated and this; // routine returns false. Else it returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:280,error,error,280,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['error'],['error']
Availability,// checkMachOAndArchFlags() checks to see if the SymbolicFile is a Mach-O file; // and if it is and there is a list of architecture flags is specified then; // check to make sure this Mach-O file is one of those architectures or all; // architectures was specificed. If not then an error is generated and this; // routine returns false. Else it returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:282,error,error,282,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,1,['error'],['error']
Availability,// checkPointerTypesForAssignment - This is a very tricky routine (despite; // being closely modeled after the C99 spec:-). The odd characteristic of this; // routine is it effectively iqnores the qualifiers on the top level pointee.; // This circumvents the usual type rules specified in 6.2.7p1 & 6.7.5.[1-3].; // FIXME: add a couple examples in this comment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:3,checkPoint,checkPointerTypesForAssignment,3,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['checkPoint'],['checkPointerTypesForAssignment']
Availability,"// child does an echo loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:17,echo,echo,17,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['echo'],['echo']
Availability,"// child does the equivalent of listening for pings and sending the; // packet back",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:46,ping,pings,46,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['ping'],['pings']
Availability,"// child is shutting down...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:21,down,down,21,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// child may be a histfunc or a rooproduct of a histfunc and a paramhist if has stat errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:85,error,errors,85,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,// clamp for floating pt errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:25,error,errors,25,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// clamp tolerance range to [0, 100)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MisExpect.cpp:9,toler,tolerance,9,interpreter/llvm-project/llvm/lib/Transforms/Utils/MisExpect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MisExpect.cpp,1,['toler'],['tolerance']
Availability,"// clang currently supports native __float128 only on few targets, and; // this target does not have it. The most visible consequence of this is; // a specialization; // __is_floating_point_helper<__float128>; // in include/c++/6.3.0/type_traits:344 that clang then rejects. The; // specialization is protected by !if _GLIBCXX_USE_FLOAT128 (which is; // unconditionally set in c++config.h) and #if !__STRICT_ANSI__. Tweak; // the latter by disabling GNUMode.; // the nvptx backend doesn't support 128 bit float; // a error message is not necessary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:517,error,error,517,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['error'],['error']
Availability,"// clang extension: this expr contains or references an error, and is; // considered dependent on how that error is resolved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:56,error,error,56,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,2,['error'],['error']
Availability,"// clang-format off; /**; * \class ROOT::Experimental::RNTupleDS; * \ingroup dataframe; * \brief The RDataSource implementation for RNTuple. It lets RDataFrame read RNTuple data.; *; * An RDataFrame that reads RNTuple data can be constructed using FromRNTuple().; *; * For each column containing an array or a collection, a corresponding column `#colname` is available to access; * `colname.size()` without reading and deserializing the collection values.; *; **/; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx:359,avail,available,359,tree/dataframe/src/RNTupleDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx,1,['avail'],['available']
Availability,"// clang-format off; /**; * \class ROOT::RDataFrame; * \ingroup dataframe; * \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; on their machines completely transparently.<br>; Skip to the [class reference](#reference) or keep reading for the user guide. In a nutshell:; ~~~{.cpp}; ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; ~~~. Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; care of their execution. The implementation automatically puts in place several low level optimisations such as; multi-thread parallelization and caching. \htmlonly; <a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; alt=""DOI""></a>; \endhtmlonly. ## For the impatient user; You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python. ## Table of Contents; - [Cheat sheet](\ref cheatsheet); - [Introduction](\ref introduction); - [Crash course](\ref crash-course); - [Working with collections](\ref collections); - [Transformations: manipulating data](\ref transformations); - [Actions: getting results](\ref actions); - [Distributed execution in Python](\ref distrdf); - [Performance tips and parallel execution](\ref parallel-execution); - [More features](\ref more-features); - [Systematic variations](\ref systematics); - [RDataFrame objects as function arguments and return values](\ref rnode); - [Storing RDataFrame objects in",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:329,avail,available,329,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['avail'],['available']
Availability,"// clang-format off; /**; \class ROOT::Experimental::EColumnType; \ingroup NTuple; \brief The available trivial, native content types of a column. More complex types, such as classes, get translated into columns of such simple types by the RField.; When changed, remember to update; - RColumnElement::Generate(); - RColumnElement::GetTypeName(); - RColumnElement::GetValidBitRange(); - RColumnElement template specializations / packing & unpacking; - If necessary, endianess handling for the packing + unit test in ntuple_endian; - RNTupleSerializer::[Des|S]erializeColumnType; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:94,avail,available,94,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['avail'],['available']
Availability,"// clang-format off; /**; \class ROOT::Experimental::Internal::RNTupleSerializer; \ingroup NTuple; \brief A helper class for serializing and deserialization of the RNTuple binary format. All serialization and deserialization routines return the number of bytes processed (written or read). The serialization routines can be called with a nullptr buffer, in which case only the size required to perform; a serialization is returned. Deserialization routines must be called with a buffer that is sufficiently large. Deserialization errors throw exceptions. Only when indicated or when passed as a parameter is the buffer size checked.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx:530,error,errors,530,tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,1,['error'],['errors']
Availability,"// clang-format off; /**; \class ROOT::Experimental::RClusterDescriptor; \ingroup NTuple; \brief Meta-data for a set of ntuple clusters. The cluster descriptor is built in two phases. In a first phase, the descriptor has only an ID.; In a second phase, the event range, column group, page locations and column ranges are added.; Both phases are populated by the RClusterDescriptorBuilder.; Clusters usually span across all available columns but in some cases they can describe only a subset of the columns,; for instance when describing friend ntuples.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:423,avail,available,423,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['avail'],['available']
Availability,"// clang-format off; /**; \class ROOT::Experimental::RError; \ingroup Base; \brief Captures diagnostics related to a ROOT runtime error; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:130,error,error,130,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,1,['error'],['error']
Availability,"// clang-format off; /**; \class ROOT::Experimental::RNTupleFillContext; \ingroup NTuple; \brief A context for filling entries (data) into clusters of an RNTuple. An output cluster can be filled with entries. The caller has to make sure that the data that gets filled into a cluster; is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and; writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be; triggered by FlushCluster() or by destructing the context. On I/O errors, an exception is thrown. Instances of this class are not meant to be used in isolation and can be created from an RNTupleParallelWriter. For; sequential writing, please refer to RNTupleWriter.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx:581,error,errors,581,tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,1,['error'],['errors']
Availability,"// clang-format off; /**; \class ROOT::Experimental::RNTupleProcessor; \ingroup NTuple; \brief Interface for iterating over entries of RNTuples and vertically concatenated RNTuples (chains). Example usage (see ntpl012_processor.C for a full example):. ~~~{.cpp}; #include <ROOT/RNTupleProcessor.hxx>; using ROOT::Experimental::RNTupleProcessor;; using ROOT::Experimental::RNTupleOpenSpec;. std::vector<RNTupleOpenSpec> ntuples = {{""ntuple1"", ""ntuple1.root""}, {""ntuple2"", ""ntuple2.root""}};; auto processor = RNTupleProcessor::CreateChain(ntuples);. for (const auto &entry : processor) {; std::cout << ""pt = "" << *entry.GetPtr<float>(""pt"") << std::endl;; }; ~~~. An RNTupleProcessor is created by providing one or more RNTupleOpenSpecs, each of which contains the name and storage; location of a single RNTuple. The RNTuples are processed in the order in which they were provided. The RNTupleProcessor constructor also (optionally) accepts an RNTupleModel, which determines which fields should be; read. If no model is provided, a default model based on the descriptor of the first specified RNTuple will be used.; If a field that was present in the first RNTuple is not found in a subsequent one, an error will be thrown. The RNTupleProcessor provides an iterator which gives access to the REntry containing the field data for the current; entry. Additional bookkeeping information can be obtained through the RNTupleProcessor itself.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx:1199,error,error,1199,tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx,1,['error'],['error']
Availability,"// clang-format off; /**; \class ROOT::Experimental::RResultBase; \ingroup Base; \brief Common handling of the error case for RResult<T> (T != void) and RResult<void>. RResultBase captures a possible runtime error that might have occured. If the RResultBase leaves the scope unchecked,; it will throw an exception. RResultBase should only be allocated on the stack, which is helped by deleting the; new operator. RResultBase is movable but not copyable to avoid throwing multiple exceptions about the same failure.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:111,error,error,111,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,3,"['error', 'failure']","['error', 'failure']"
Availability,"// clang-format off; /**; \class ROOT::RDF::Experimental::RDatasetSpec; \ingroup dataframe; \brief The dataset specification for RDataFrame. This class allows users to create the dataset specification for RDataFrame ; to which they add samples (using the RSample class object) with tree names and file names, ; and, optionally, the metadata information (using the RMetaData class objects). ; Adding global friend trees and/or setting the range of events to be processed; are also available. Note, there exists yet another method to build RDataFrame from the dataset information using the JSON file format: \ref FromSpec(const std::string &jsonFile) ""FromSpec()"". ; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDatasetSpec.hxx:480,avail,available,480,tree/dataframe/inc/ROOT/RDF/RDatasetSpec.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDatasetSpec.hxx,1,['avail'],['available']
Availability,"// clang-format off; /**; \class ROOT::VecOps::RVec; \brief A ""std::vector""-like collection of values implementing handy operation to analyse them; \tparam T The type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy.; Its storage is contiguous in memory and its interface is designed such to resemble to the one; of the stl vector. In addition the interface features methods and; [external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; of the data in the RVec. \note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; - RVecB (`bool`); - RVecC (`char`); - RVecD (`double`); - RVecF (`float`); - RVecI (`int`); - RVecL (`long`); - RVecLL (`long long`); - RVecU (`unsigned`); - RVecUL (`unsigned long`); - RVecULL (`unsigned long long`). \note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; other operations will be propagated potentially leaving the RVec object in an invalid state. \note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; to make RVec a drop-in replacement for `std::vector`. \htmlonly; <a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; \endhtmlonly. ## Table of Contents; - [Example](\ref example); - [Arithmetic operations, logical operations and mathematical functions](\ref operationsandfunctions); - [Owning and adopting memory](\ref owningandadoptingmemory); - [Sorting and manipulation of indices](\ref sorting); - [Usage in combination with RDataFrame](\ref usagetdataframe); - [Reference for the RVec class](\ref RVecdoxyref); - [Reference for RVec helper funct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx:713,avail,available,713,math/vecops/inc/ROOT/RVec.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx,2,['avail'],['available']
Availability,"// clang-format off; /**; \class TTreeReader; \ingroup treeplayer; \brief A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely; access the information in the dataset. Example code can be found in; - tutorials/tree/hsimpleReader.C; - tutorials/tree/h1analysisTreeReader.C; - <a href=""https://github.com/root-project/roottest/tree/master/root/tree/reader"">This example</a>. You can generate a skeleton of `TTreeReaderValue<T>` and `TTreeReaderArray<T>` declarations; for all of a tree's branches using `TTree::MakeSelector()`. Roottest contains an; <a href=""https://github.com/root-project/roottest/tree/master/root/tree/reader"">example</a>; showing the full power. A simpler analysis example can be found below: it histograms a function of the px and py branches. ~~~{.cpp}; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C). #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"". void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);. // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");. // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);. // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");. // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }. myHist->Draw();; }; ~~~. A more complete example including error handling and a few combinat",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:84,robust,robust,84,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['robust'],['robust']
Availability,"// clang-format off; /// Create a graphviz representation of the dataframe computation graph, return it as a string.; /// \param[in] node any node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to.; ///; /// The output can be displayed with a command akin to `dot -Tpng output.dot > output.png && open output.png`.; ///; /// Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are; /// effectively optimized away from the computation graph.; ///; /// Note that SaveGraph is not thread-safe and must not be called concurrently from different threads.; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:447,down,downstream,447,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['down'],['downstream']
Availability,"// clang-format off; /// Create a graphviz representation of the dataframe computation graph, write it to the specified file.; /// \param[in] node any node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to.; /// \param[in] outputFile file where to save the representation.; ///; /// The output can be displayed with a command akin to `dot -Tpng output.dot > output.png && open output.png`.; ///; /// Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are; /// effectively optimized away from the computation graph.; ///; /// Note that SaveGraph is not thread-safe and must not be called concurrently from different threads.; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:522,down,downstream,522,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['down'],['downstream']
Availability,"// clang-format off; /// PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection.; ///; /// PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function `func` as; /// an initializer list `{t1, t2, t3,..., tN}` and returns whatever f({t1, t2, t3, ..., tN}) returns.; ///; /// Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T.; /// Example usage together with RDataFrame (""varX"" columns must all be `float` variables):; /// \code; /// bool myVecFunc(std::vector<float> args);; /// df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});; /// \endcode; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:236,down,down,236,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['down'],['down']
Availability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////; /// \brief Creates a node that filters entries based on range: [begin, end).; /// \param[in] begin Initial entry number considered for this range.; /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; /// \param[in] stride Process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; /// \return the first node of the computation graph for which the event loop is limited to a certain range of entries.; ///; /// Note that in case of previous Ranges and Filters the selected range refers to the transformed dataset.; /// Ranges are only available if EnableImplicitMT has _not_ been called. Multi-thread ranges are not supported.; ///; /// ### Example usage:; /// ~~~{.cpp}; /// auto d_0_30 = d.Range(0, 30); // Pick the first 30 entries; /// auto d_15_end = d.Range(15, 0); // Pick all entries from 15 onwards; /// auto d_15_end_3 = d.Range(15, 0, 3); // Stride: from event 15, pick an event every 3; /// ~~~; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:759,avail,available,759,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['avail'],['available']
Availability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////; /// \brief Define a new column that is updated when the input sample changes.; /// \param[in] name The name of the defined column.; /// \param[in] expression A C++ callable that computes the new value of the defined column.; /// \return the first node of the computation graph for which the new quantity is defined.; ///; /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; /// where:; /// - `T` is the type of the defined column; /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; /// being processed (see the class docs for more information).; ///; /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; /// starts rather than at every entry.; ///; /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; ///; /// ### Example usage:; /// ~~~{.cpp}; /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; /// df.DefinePerSample(""weightbysample"",; /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; /// ~~~; // clang-format on; // TODO we could SFINAE on F's signature to provide friendlier compilation errors in case of signature mismatch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:1778,error,errors,1778,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['error'],['errors']
Availability,"// clang-format on; /// Used to hold a single ""cell"" of the SELECT query's result table. Can be changed to std::variant once available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RSqliteDS.hxx:125,avail,available,125,tree/dataframe/inc/ROOT/RSqliteDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RSqliteDS.hxx,1,['avail'],['available']
Availability,"// clang-format on; ////////////////////////////////////////////////////////////////////////////; /// \brief Save selected columns in memory.; /// \tparam ColumnTypes variadic list of branch/column types.; /// \param[in] columnList columns to be cached in memory.; /// \return a `RDataFrame` that wraps the cached dataset.; ///; /// This action returns a new `RDataFrame` object, completely detached from; /// the originating `RDataFrame`. The new dataframe only contains the cached; /// columns and stores their content in memory for fast, zero-copy subsequent access.; ///; /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; /// fits in memory and that will be accessed many times.; ///; /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; ///; /// ### Example usage:; ///; /// **Types and columns specified:**; /// ~~~{.cpp}; /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; /// ~~~; ///; /// **Types inferred and columns specified (this invocation relies on jitting):**; /// ~~~{.cpp}; /// auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; /// ~~~; ///; /// **Types inferred and columns selected with a regexp (this invocation relies on jitting):**; /// ~~~{.cpp}; /// auto cache_all_cols_df = df.Cache(myRegexp);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:847,avail,available,847,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['avail'],['available']
Availability,"// class RColumnElementCastLE; /**; * Base class for split columns whose on-storage representation is little-endian.; * The implementation of `Pack` and `Unpack` takes care of splitting and, if necessary, byteswap.; * As part of the splitting, can also narrow down the type to NarrowT.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:260,down,down,260,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,1,['down'],['down']
Availability,"// class RColumnElementSplitLE; /**; * Base class for delta + split columns (index columns) whose on-storage representation is little-endian.; * The implementation of `Pack` and `Unpack` takes care of splitting and, if necessary, byteswap.; * As part of the encoding, can also narrow down the type to NarrowT.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:284,down,down,284,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,1,['down'],['down']
Availability,"// class RResultBase; // clang-format off; /**; \class ROOT::Experimental::RResult; \ingroup Base; \brief The class is used as a return type for operations that can fail; wraps a value of type T or an RError. The RResult<T> class and their related classes are used for call chains that can throw exceptions,; such as I/O code paths. Throwing of the exception is deferred to allow for `if (result)` style error; checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw. A function returning an RResult might look like this:. ~~~ {.cpp}; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; ~~~. Code using MyIOFunc might look like this:. ~~~ {.cpp}; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; ~~~. Note that RResult<void> can be used for a function without return value, like this. ~~~ {.cpp}; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; ~~~. RResult<T>::Unwrap() can be used as a short hand for; ""give me the wrapped value or, in case of an error, throw"". For instance:. ~~~ {.cpp}; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; ~~~. There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code; where an exception may be thrown.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:404,error,error,404,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,7,"['error', 'failure']","['error', 'failure']"
Availability,// class RegisterMappingTracker is a physical register file (PRF) descriptor.; // There is one RegisterMappingTracker for every PRF definition in the; // scheduling model.; //; // An instance of RegisterMappingTracker tracks the number of physical; // registers available for renaming. It also tracks the number of register; // moves eliminated per cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:262,avail,available,262,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,1,['avail'],['available']
Availability,"// class is known, but no dictionary available, 2 more cases: * and &",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:37,avail,available,37,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,1,['avail'],['available']
Availability,"// classifier response:; // some methods may return a per-event error estimate; // error calculation is skipped if err==0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:64,error,error,64,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,2,['error'],['error']
Availability,"// cleanup stored errors and done with topmsg (whether used or not)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:18,error,errors,18,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['error'],['errors']
Availability,"// clear Python error, to allow full error handling C++ side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/PyException.h:16,error,error,16,bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/PyException.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/PyException.h,4,['error'],['error']
Availability,"// clear and fill errorParams only with parameters that both in params and cloneParams",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,error,errorParams,18,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['error'],['errorParams']
Availability,"// clear collected errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:19,error,errors,19,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['error'],['errors']
Availability,"// clone the error histograms because in case the sample has not error hist; // it is created in MakeAbsolUncertainty; // we need later to clean statErrorHist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:13,error,error,13,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,2,['error'],['error']
Availability,"// cntrl-down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:9,down,down,9,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['down'],['down']
Availability,"// colRegister must be deleted before prevNodeOnHeap because their dtor needs the RLoopManager to be alive; // and prevNodeOnHeap is what keeps it alive if the rest of the computation graph is already out of scope",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:101,alive,alive,101,tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx,2,['alive'],['alive']
Availability,"// collect all bases, error checking the hierarchy along the way",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:22,error,error,22,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,1,['error'],['error']
Availability,"// collect error message/trace (automatically clears exception, too)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:11,error,error,11,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['error'],['error']
Availability,"// column 'Error'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx:11,Error,Error,11,gui/fitpanel/src/TFitParametersDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx,1,['Error'],['Error']
Availability,"// common calculations for syst.errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:32,error,errors,32,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['errors']
Availability,"// compare only Chi2 value since parameter error is not estimated in GSLMultiMin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:43,error,error,43,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['error'],['error']
Availability,"// compare parameter value with reference with tolerance = parameterError * chi2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:47,toler,tolerance,47,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['toler'],['tolerance']
Availability,"// compare v1 with reference v2; // // give 1% tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:47,toler,tolerance,47,math/mathcore/test/fit/testLogLExecPolicy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx,1,['toler'],['tolerance']
Availability,"// compare v1 with reference v2; // give 1% tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:44,toler,tolerance,44,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['toler'],['tolerance']
Availability,"// computation of errors by Christos Leonidopoulos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:18,error,errors,18,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// compute bin error of profile histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:15,error,error,15,hist/hist/src/TProfileHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h,1,['error'],['error']
Availability,"// compute error on Null pvalue",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:11,error,error,11,roofit/roostats/src/HypoTestResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx,1,['error'],['error']
Availability,"// compute error using normal approximation; // quantile error ~ sqrt (q*(1-q)/ *( n * f(xq)^2 ) from Kendall; // where f(xq) is the p.d.f value at the quantile xq",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:11,error,error,11,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,2,['error'],['error']
Availability,"// compute expected error as f(x) / weight",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:20,error,error,20,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// compute expected error as f(x) or f(x) / weight (if weighted fit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:20,error,error,20,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// compute robust sigma using midspread",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:11,robust,robust,11,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['robust'],['robust']
Availability,"// compute robustness weights except last time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:11,robust,robustness,11,hist/hist/src/TGraphSmooth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx,1,['robust'],['robustness']
Availability,"// compute size of the lines at the end of the error bars",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:47,error,error,47,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// compute step size as a small fraction of the error; // (see numerical recipes in C 5.7.8) 1.E-5 is ~ (eps)^1/3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:48,error,error,48,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['error']
Availability,"// compute sum of content and error squares",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h:30,error,error,30,math/mathcore/inc/Fit/BinData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h,1,['error'],['error']
Availability,"// compute test error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:16,error,error,16,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['error'],['error']
Availability,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:21,error,errors,21,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['error'],['errors']
Availability,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result; // update minimizer (recreate if not done or if name has changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:21,error,errors,21,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['error'],['errors']
Availability,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:21,error,errors,21,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['errors']
Availability,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set; // update minimizer (but cannot re-create in this case). Must use an existing one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:21,error,errors,21,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,2,['error'],['errors']
Availability,"// compute the offset of the error bars due to the symbol size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:29,error,error,29,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// compute training error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:20,error,error,20,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['error'],['error']
Availability,"// computes asymmetric errors on any parameter with the ""minos"" attribute set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:23,error,errors,23,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['error'],['errors']
Availability,"// configure color draw option (default); // draw->Text(true); // configure text drawing (can be enabled with most 2d options); // draw->Box(1); // configure box1 draw option; // draw->Surf(2); // configure surf4 draw option, 3d; // draw->Lego(2); // configure lego2 draw option, 3d; // draw->Error(); // configure error drawing, 3d",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx:293,Error,Error,293,tutorials/rcanvas/rh2_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,"// consider all special cases when bin errors are zero; // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:39,error,errors,39,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['error'],['errors']
Availability,// console.error(`Fail to find streamer info with check sum ${ver.checksum} version ${ver.val}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,error,error,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// console.log(""EveManager web socket opened."");; // Presumably not needed at this point - known places where issues; // can cause server-client protocol breach are handled.; // window.onerror = this.globExceptionHandler.bind(this);; // console.log(""EveManager registered global error handler in window.onerror"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:279,error,error,279,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['error'],['error']
Availability,"// const Double_t tolerance = TGeoShape::Tolerance();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx:18,toler,tolerance,18,geom/geom/src/TGeoParallelWorld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx,2,"['Toler', 'toler']","['Tolerance', 'tolerance']"
Availability,"// construct error matrix and inverted error matrix of measured quantities; // from errors of input histogram or use error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:13,error,error,13,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,4,['error'],"['error', 'errors']"
Availability,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:45,Error,Error,45,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,4,"['Error', 'error']","['Error', 'errors']"
Availability,"// construct from user parameters + errors (before minimization) using std::vector (params) and MnUserCovariance; // class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:36,error,errors,36,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,1,['error'],['errors']
Availability,"// construct from user parameters + errors (before minimization) using std::vector for parameter error and // an; // std::vector of size n*(n+1)/2 for the covariance matrix and n (rank of cov matrix)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:36,error,errors,36,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,2,['error'],"['error', 'errors']"
Availability,"// construct from user parameters + errors (before minimization) using; // MnUserParameters and MnUserCovariance objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:36,error,errors,36,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,1,['error'],['errors']
Availability,"// constructor for the Misclassification error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h:41,error,error,41,tmva/tmva/inc/TMVA/MisClassificationError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MisClassificationError.h,1,['error'],['error']
Availability,"// constructor from a vector of parameter values and a vector of errors (step sizes); // class has as data member the transformation objects (all of the types),; // the std::vector of MinuitParameter objects and the vector with the index conversions from; // internal to external (fExtOfInt)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:65,error,errors,65,math/minuit2/src/MnUserTransformation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx,1,['error'],['errors']
Availability,"// constructor from macfcn calls and tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:37,toler,tolerance,37,math/minuit2/src/MnApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx,1,['toler'],['tolerance']
Availability,"// constructor passing a type of algorithm, (supported now robust via LTS regression); // select type from the string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:59,robust,robust,59,math/minuit/src/TLinearMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx,1,['robust'],['robust']
Availability,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:125,Error,Error,125,math/mathmore/inc/Math/GSLIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h,2,['Error'],['Error']
Availability,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:357,Error,Error,357,math/mathmore/inc/Math/GSLMCIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h,4,"['Error', 'toler']","['Error', 'tolerance']"
Availability,"// container for collecting errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:28,error,errors,28,bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx,1,['error'],['errors']
Availability,"// contains back propagation; // no hessian (old training file) or no error requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:70,error,error,70,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['error'],['error']
Availability,"// contains error scale set for minimization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/inc/TFitEditor.h:12,error,error,12,gui/fitpanel/inc/TFitEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/inc/TFitEditor.h,1,['error'],['error']
Availability,"// contains tolerance set for minimization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/inc/TFitEditor.h:12,toler,tolerance,12,gui/fitpanel/inc/TFitEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/inc/TFitEditor.h,1,['toler'],['tolerance']
Availability,// contains-errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTDumperUtils.h:12,error,errors,12,interpreter/llvm-project/clang/include/clang/AST/ASTDumperUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTDumperUtils.h,1,['error'],['errors']
Availability,"// contour error is actually the desired confidence level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TAdvancedGraphicsDialog.cxx:11,error,error,11,gui/fitpanel/src/TAdvancedGraphicsDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TAdvancedGraphicsDialog.cxx,1,['error'],['error']
Availability,"// converter factory available, use it to create converter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:21,avail,available,21,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['avail'],['available']
Availability,"// converts pvalues to significances and finds where they equal the target pvalue; // return is x-axis value with potentially an error on that value if input pVals had errors; // static RooRealVar FindLimit(TGraph *pVals, double target_pVal = 0.05);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:129,error,error,129,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,2,['error'],"['error', 'errors']"
Availability,"// copy configuration when reached a minimum error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:45,error,error,45,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['error'],['error']
Availability,"// copy coordinate errors and set correct pointers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:19,error,errors,19,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,1,['error'],['errors']
Availability,"// copy data error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:13,error,error,13,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,1,['error'],['error']
Availability,"// copy down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx:8,down,down,8,gui/gui/src/TGString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx,1,['down'],['down']
Availability,"// copy error arrays",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx:8,error,error,8,hist/hist/src/TGraph2DAsymmErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2DAsymmErrors.cxx,2,['error'],['error']
Availability,"// copy everything from the founction available in gROOT; //std::cout << ""GetFitFunction: copying tmp function in PrevFitTMP "" << tmpF1->GetName() << "" ""; // << tmpF1->GetExpFormula() << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:38,avail,available,38,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['avail'],['available']
Availability,"// copy minimum state (parameter values and errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:44,error,errors,44,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['error'],['errors']
Availability,"// copy original error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:17,error,error,17,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['error']
Availability,"// copy parameter value and errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:28,error,errors,28,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,2,['error'],['errors']
Availability,"// copy the asymmetric data error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:28,error,error,28,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,1,['error'],['error']
Availability,"// copy values and errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:19,error,errors,19,roofit/roostats/src/DetailedOutputAggregator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx,1,['error'],['errors']
Availability,"// correct errors for weight squared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:11,error,errors,11,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['error'],['errors']
Availability,"// correction is not necessary if sinTheta = +/- 1; //if (sinTheta == 1.0 || sinTheta == -1.0) return;; // apply the corrections according to max of the other terms; // I think is assumed convention that theta is between -PI/2,PI/2.; // OTHERWISE RESULT MIGHT BE DIFFERENT ???; //since we determine phi+psi or phi-psi phi and psi can be both have a shift of +/- PI.; // The shift must be applied on both (the sum (or difference) is knows to +/- 2PI ); //This can be fixed looking at the other 4 matrix terms, which have terms in sin and cos of psi; // and phi. sin(psi+/-PI) = -sin(psi) and cos(psi+/-PI) = -cos(psi).; //Use then the biggest term for making the correction to minimize possible numerical errors; // set up w[i], all of which would be positive if sin and cosine of; // psi and phi were positive:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/3DConversions.cxx:704,error,errors,704,math/genvector/src/3DConversions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/3DConversions.cxx,1,['error'],['errors']
Availability,"// correction to apply to the errors given a CL different than 1 sigma (cl=0.683)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:30,error,errors,30,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['errors']
Availability,"// correlated systematic errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:25,error,errors,25,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],['errors']
Availability,"// count of name errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/inc/TGDMLWrite.h:17,error,errors,17,geom/gdml/inc/TGDMLWrite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/inc/TGDMLWrite.h,1,['error'],['errors']
Availability,"// cout << ""Chi2Var["" << i << ""] nData = "" << nData << "" nPdf = "" << nPdf << "" errorExt = "" << eExt << "" errorInt = "" << eInt << "" contrib = "" << eExt*eExt/(eInt*eInt) << endl ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:79,error,errorExt,79,roofit/roofitcore/src/RooChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx,2,['error'],"['errorExt', 'errorInt']"
Availability,"// cout << ""RooRealVar::attachToTree("" << this << "") name = "" << GetName(); // << "" StoreError = "" << (getAttribute(""StoreError"")?""T"":""F"") << endl ;; // Attach/create additional branch for error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:189,error,error,189,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['error'],['error']
Availability,"// cout << ""xerrHi = "" << xerrHi << "" xerrLo = "" << xerrLo << "" slope = "" << slope << std::endl ;; // Asymmetric X error, decide which one to use",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx:115,error,error,115,roofit/roofitcore/src/RooXYChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx,1,['error'],['error']
Availability,"// cout << var << "" "" ;; // var->Print() ;; // cout << var->GetName() << "" xerr = "" << xerr << "" slope = "" << slope << std::endl ;; // Symmetric X error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx:147,error,error,147,roofit/roofitcore/src/RooXYChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx,1,['error'],['error']
Availability,"// coutE(Eval) << ""boost::numeric::ublas error: matrix is not invertible!""; // << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:41,error,error,41,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['error'],['error']
Availability,"// coverity[unchecked_value] We do not print error message, have not error; // return code and close the file anyway, not need to check the return value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFilePrefetch.cxx:45,error,error,45,io/io/src/TFilePrefetch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFilePrefetch.cxx,2,['error'],['error']
Availability,"// create MINOS Error factory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:16,Error,Error,16,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,2,['Error'],['Error']
Availability,"// create RStyle here to keep reference alive after leaving tobject() function scope",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/tobject.cxx:40,alive,alive,40,tutorials/rcanvas/tobject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/tobject.cxx,1,['alive'],['alive']
Availability,"// create a Fit result from a fit config (i.e. with initial parameter values; // and errors equal to step values; // The model function is NULL in this case; // set minimizer type and algorithm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:85,error,errors,85,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,2,['error'],['errors']
Availability,"// createShuffleStride returns shuffle mask of size N.; // The shuffle pattern is as following :; // {0, Stride%(VF/Lane), (2*Stride%(VF/Lane))...(VF*Stride/Lane)%(VF/Lane),; // (VF/ Lane) ,(VF / Lane)+Stride%(VF/Lane),...,; // (VF / Lane)+(VF*Stride/Lane)%(VF/Lane)}; // Where Lane is the # of lanes in a register:; // VectorSize = 128 => Lane = 1; // VectorSize = 256 => Lane = 2; // For example shuffle pattern for VF 16 register size 256 -> lanes = 2; // {<[0|3|6|1|4|7|2|5]-[8|11|14|9|12|15|10|13]>}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:39,mask,mask,39,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['mask'],['mask']
Availability,"// creating a fine histograms containing the error rate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:45,error,error,45,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['error'],['error']
Availability,"// cut on discriminant error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:23,error,error,23,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// cut on discriminator error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:24,error,error,24,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// dcbt[st] is printed manually here because:; // 1. The assembly syntax is different between embedded and server targets; // 2. We must print the short mnemonics for TH == 0 because the; // embedded/server syntax default will not be stable across assemblers; // The syntax for dcbt is:; // dcbt ra, rb, th [server]; // dcbt th, ra, rb [embedded]; // where th can be omitted when it is 0. dcbtst is the same.; // On AIX, only emit the extended mnemonics for dcbt and dcbtst if; // the ""modern assembler"" is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp:507,avail,available,507,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp,1,['avail'],['available']
Availability,"// debatable: apparently there are two methods that map onto the same sighash; // and preferring the latest may result in ""ping pong.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:123,ping,ping,123,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['ping'],['ping']
Availability,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:35,error,error,35,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,6,['error'],['error']
Availability,"// debug switch; ////////////////////////////////////////////////////////////////////////////////; /// Restore the 'saved' (saved = TRUE) or 'real' entity as effective.; /// Return 0 on success, < 0 (== -errno) if any error occurs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdpriv.cxx:218,error,error,218,net/rpdutils/src/rpdpriv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdpriv.cxx,1,['error'],['error']
Availability,// decltype is only available in C++11 and above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h:20,avail,available,20,interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h,1,['avail'],['available']
Availability,// default case : fErrorMode = kERRORMEAN; // return standard error on the mean of y,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:62,error,error,62,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// default case : fErrorMode = kERRORMEAN; // return standard error on the mean of y; //if (neff == 0) std::cerr << ""NEFF = 0 for bin "" << bin << "" "" << eprim << "" "" << neff << "" "" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:62,error,error,62,hist/hist/src/TProfileHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h,1,['error'],['error']
Availability,"// default case for graphs (when they have errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:43,error,errors,43,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,2,['error'],['errors']
Availability,"// default chi2 with observed error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:30,error,error,30,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// default constructor standard with value/error = 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:43,error,error,43,math/minuit2/inc/Minuit2/MinuitParameter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h,1,['error'],['error']
Availability,// default error reporting,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,error,error,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// default to sum-of-squares error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:29,error,error,29,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['error'],['error']
Availability,"// default tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:11,toler,tolerance,11,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// default tolerance and max iterations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:11,toler,tolerance,11,math/mathmore/src/GSLNLSMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// default visualization - everything visible 3 levels down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TVirtualGeoPainter.h:55,down,down,55,geom/geom/inc/TVirtualGeoPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TVirtualGeoPainter.h,1,['down'],['down']
Availability,"// define the offset of the error bars due to the symbol size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:28,error,error,28,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,2,['error'],['error']
Availability,"// definition of structure used to retrieve; // PDG number and particle name into the list; // of available primaries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:98,avail,available,98,test/RootShower/SettingsDlg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx,1,['avail'],['available']
Availability,"// delete par file in case of error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:30,error,error,30,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['error'],['error']
Availability,// deltaX and deltaY are in pixels; right and down are positive,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:46,down,down,46,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['down'],['down']
Availability,"// demand CPyCppyy object, and an argument that may match down the road",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:58,down,down,58,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,1,['down'],['down']
Availability,"// demonstrate MINOS Error analysis with limits; // create Minuit parameters with names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:21,Error,Error,21,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,1,['Error'],['Error']
Availability,"// demonstrate MINOS Error analysis; // create Minuit parameters with names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:21,Error,Error,21,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,1,['Error'],['Error']
Availability,"// depending on the object drawing option, the endcaps for error; // bar are drawn differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx:59,error,error,59,graf2d/graf/src/TLegend.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx,1,['error'],['error']
Availability,// destPtr is an array*. Construct an elementType* by drilling down a level.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:63,down,down,63,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['down'],['down']
Availability,"// determine if asym error defined by temporarily setting error to nan ... will then return non-nan if defined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:21,error,error,21,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['error'],['error']
Availability,"// determine which error style",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:19,error,error,19,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,2,['error'],['error']
Availability,"// did not run selector, error messages were already printed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofDraw.cxx:25,error,error,25,proof/proofplayer/src/TProofDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofDraw.cxx,1,['error'],['error']
Availability,"// did our parent tell us to shut down?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:34,down,down,34,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// difference > ERRORLIMIT;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:16,ERROR,ERRORLIMIT,16,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['ERROR'],['ERRORLIMIT']
Availability,"// discriminant error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:16,error,error,16,tmva/tmva/src/PDEFoamDiscriminant.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx,1,['error'],['error']
Availability,// dllimport'd entities aren't constant but are available inside of template; // arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:48,avail,available,48,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['avail'],['available']
Availability,"// do Minos analysis given the parameter index returning a pair for (lower,upper) errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:82,error,errors,82,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['error'],['errors']
Availability,"// do a forward pass to compute initial Mean Error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:45,Error,Error,45,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['Error'],['Error']
Availability,"// do a minimization, but now using GradMinimizer and its MP version; // in the 1D Gaussian tests, we suppress the positive definiteness; // warnings coming from Minuit2 with offsetting; they are errors both; // in serial RooFit and in the MultiProcess-enabled back-end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:196,error,errors,196,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,2,['error'],['errors']
Availability,"// do an evaluation of the network to compute initial minimum test error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:67,error,error,67,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['error'],['error']
Availability,"// do full Minos error analysis for all parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:17,error,error,17,math/mathcore/src/FitConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx,1,['error'],['error']
Availability,"// do full minos error analysis (lower + upper) for parameter par",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:17,error,error,17,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['error'],['error']
Availability,// do not draw empty bins with errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:31,error,errors,31,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// do not draw histogram if error bars required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:28,error,error,28,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// do not error out on an empty tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:10,error,error,10,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['error'],['error']
Availability,"// do not fall through if no RTTI info available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:39,avail,available,39,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['avail'],['available']
Availability,"// do not flag errors case of PROBLEMS or UNCHANGED (",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:15,error,errors,15,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['errors']
Availability,"// do not use coordinate errors (default is using )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:25,error,errors,25,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['errors']
Availability,"// do not use coordinate errors when requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:25,error,errors,25,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// do not use in this case the ""Error option "" for drawing which is enabled by default since the normalized histogram has now errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:32,Error,Error,32,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,"['Error', 'error']","['Error', 'errors']"
Availability,"// do nothing (ping is already acknowledged)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:15,ping,ping,15,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['ping'],['ping']
Availability,"// do nothing if we are no longer tracing evaluations and there was no error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:71,error,error,71,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['error'],['error']
Availability,"// do the trick to eliminate most of the floating point errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx:56,error,errors,56,geom/geom/src/TGeoMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx,1,['error'],['errors']
Availability,"// do this just to keep fData alive while killing previous NLLVar; // (can't kill data while NLL constructed with it)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:30,alive,alive,30,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,2,['alive'],['alive']
Availability,"// does not make sense to have errors=1 in Pearson chi2 fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:31,error,errors,31,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// does not work properly in Node.js, causes 'Maximum call stack size exceeded' error; // min = Math.min.apply(null, obj.fImgBuf),; // max = Math.max.apply(null, obj.fImgBuf);; // create contour like in hist painter to allow palette drawing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:80,error,error,80,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// doesn't seem to exist .. gives an 'error message' and seems to work just fine without ... :); // fDrawButton->Connect(""Clicked()"",""TGNumberEntry"",fInput, ""ValueSet(Long_t)"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT_Reg.cxx:38,error,error,38,tmva/tmvagui/src/BDT_Reg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT_Reg.cxx,1,['error'],['error']
Availability,"// doesn't seem to exist .. gives an 'error message' and seems to work just fine without ... :); // fDrawButton->Connect(""ValueSet(Long_t)"",""TGNumberEntry"",fInput, ""Clicked()"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT.cxx:38,error,error,38,tmva/tmvagui/src/BDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT.cxx,1,['error'],['error']
Availability,"// doing directly gives internal compiler error on windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:42,error,error,42,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['error'],['error']
Availability,"// doing this I get h1->fN which is available only for a TH1D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:36,avail,available,36,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['avail'],['available']
Availability,"// don't check error rate every loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:15,error,error,15,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// don't do anything when size did not change; // if (gTws->fWidth == wval && gTws->fHeight == hval) return 0;; // due to round-off errors in TPad::Resize() we might get +/- 1 pixel; // change, in those cases don't resize pixmap",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx:132,error,errors,132,graf2d/x11/src/TGX11.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx,1,['error'],['errors']
Availability,"// don't do anything when size did not change; // if (gTws->width == wval && gTws->height == hval) return 0;; // due to round-off errors in TPad::Resize() we might get +/- 1 pixel; // change, in those cases don't resize pixmap",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:130,error,errors,130,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,1,['error'],['errors']
Availability,"// don't need high tolerance (use 10-4)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:19,toler,tolerance,19,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['toler'],['tolerance']
Availability,"// don't need high tolerance (use 10-4); //double igf = gaus->Integral(x1,x2,y1,y2,z1,z2,1.E-4); // don't need high tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:19,toler,tolerance,19,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['toler'],['tolerance']
Availability,"// don't put any value into output if the value is masked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:51,mask,masked,51,tmva/tmva/src/VariableNormalizeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx,1,['mask'],['masked']
Availability,"// done to keep globs alive while NLL might still be alive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,alive,alive,22,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,2,['alive'],['alive']
Availability,"// double edm = Estimator().Estimate(seed.Gradient(), seed.Error());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:59,Error,Error,59,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,1,['Error'],['Error']
Availability,"// double edmmax = 0.5*0.05*fFCN.Up()*1.e-3;; // double toler = 0.05;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx:56,toler,toler,56,math/minuit2/src/MnContours.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx,1,['toler'],['toler']
Availability,"// double toler8 = toler;; // double slamax = slambg;; // double flast = f1;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx:19,toler,toler,19,math/minuit2/src/MnLineSearch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx,1,['toler'],['toler']
Availability,"// double up = (null.first + null.second == 0) ? 0 : ((alt.first-alt.second<=0) ?; // std::numeric_limits<double>::infinity() : (null.first + null.second)/(alt.first - alt.second)); double down; // = (null.first - null.second == 0) ? 0 : (null.first - null.second)/(alt.first + alt.second);; // old way ... now doing like in pCLs_asymp by calculating the two variations ... but this is pessimistic; // assumes p-values are anticorrelated!; // so reverting to old",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:189,down,down,189,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['down'],['down']
Availability,// down,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,down,down,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,8,['down'],['down']
Availability,"// down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:3,down,down,3,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,5,['down'],['down']
Availability,"// down-cast",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx:3,down,down-cast,3,bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,1,['down'],['down-cast']
Availability,"// downcast fcn",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:3,down,downcast,3,math/minuit2/src/FumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx,1,['down'],['downcast']
Availability,"// downcast fcn; // std::cout << ""FCN type "" << typeid(&fcn).Name() << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:3,down,downcast,3,math/minuit2/src/FumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx,1,['down'],['downcast']
Availability,"// downcast to real class for object returns, unless pinned; // TODO: should the memory regulator for klass be searched first, so that if; // successful, no down-casting is attempted?; // TODO: optimize for final classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:3,down,downcast,3,bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,2,['down'],"['down-casting', 'downcast']"
Availability,"// downcast unique_ptr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RResultMap.hxx:3,down,downcast,3,tree/dataframe/inc/ROOT/RDF/RResultMap.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RResultMap.hxx,1,['down'],['downcast']
Availability,"// draw histogram as errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx:21,error,errors,21,tutorials/webcanv/logN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx,1,['error'],['errors']
Availability,"// draw line at the end of the error bars",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:31,error,error,31,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// draw the error bars",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:12,error,error,12,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// draw the error rectangles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:12,error,error,12,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,5,['error'],['error']
Availability,"// draw->fill.color = RColor::kLime;; // draw->fill.style = RAttrFill::kSolid;; // draw->Line(); // configure line draw option; // draw->Bar(); // configure bar draw option; // draw->Error(3); // configure error drawing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx:183,Error,Error,183,tutorials/rcanvas/rh1_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,// drop predecessors as they can be big and are redundant,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:48,redundant,redundant,48,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,2,['redundant'],['redundant']
Availability,// due to rounding errors it might be e.g. -1.3877787807814457e-17,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:19,error,errors,19,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// during registration, trust the available information provided by the user",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h:34,avail,available,34,proof/proof/inc/TDataSetManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h,1,['avail'],['available']
Availability,"// dynamic_cast is not available with -fno-rtti.; // As an exception, dynamic_cast to void* is available because it doesn't; // use RTTI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:23,avail,available,23,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,2,['avail'],['available']
Availability,"// e will have been removed above; // breakdown is quadrature difference between total error and conditional error; // group by 'group' attribute",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:87,error,error,87,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['error'],['error']
Availability,"// eat the '}'.; // If we have a semicolon, print a gentle error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:59,error,error,59,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['error'],['error']
Availability,"// echo mode (echo, password, no echo)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:3,echo,echo,3,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,3,['echo'],['echo']
Availability,// echo.c,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/llvm-c-test.h:3,echo,echo,3,interpreter/llvm-project/llvm/tools/llvm-c-test/llvm-c-test.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/llvm-c-test.h,1,['echo'],['echo']
Availability,// eliminate infinite recursion -- assume that this node is not redundant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp:64,redundant,redundant,64,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp,1,['redundant'],['redundant']
Availability,"// else check availability of cygpath...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:14,avail,availability,14,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['avail'],['availability']
Availability,"// else failure ..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:8,failure,failure,8,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['failure'],['failure']
Availability,// else fatal error earlier,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:14,error,error,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['error'],['error']
Availability,"// else increment total alive particles by amount; // of particle's children",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:24,alive,alive,24,test/RootShower/MyEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx,1,['alive'],['alive']
Availability,// else this is a syntax error - omit the last part...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:25,error,error,25,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// else we had other errors, too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:21,error,errors,21,interpreter/cling/lib/Interpreter/IncrementalParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp,1,['error'],['errors']
Availability,"// else, check if definedColView is in the list of tree branches. This is a bit better than interrogating the TTree; // directly because correct usage of GetBranch, FindBranch, GetLeaf and FindLeaf can be tricky; so let's assume we; // got it right when we collected the list of available branches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:279,avail,available,279,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['avail'],['available']
Availability,"// else; // std::cout << "" Error: the recorded hash and the one returned by Hash are distinct.\n"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:27,Error,Error,27,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['Error'],['Error']
Availability,"// empty url indicates failure, which already printed by GetUrl method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:23,failure,failure,23,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['failure'],['failure']
Availability,"// empty, as error already set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:13,error,error,13,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['error'],['error']
Availability,"// enable error calculation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:10,error,error,10,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,2,['error'],['error']
Availability,"// enable error output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h:10,error,error,10,net/net/inc/TSQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h,2,['error'],['error']
Availability,"// enable quadratic errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:20,error,errors,20,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['error'],['errors']
Availability,// encodePPC64LocalEntryOffset will report an error if it cannot; // encode LocalOffset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp:46,error,error,46,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; // Check - We know that cond should be true, if not print an error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:89,error,error,89,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; // FIXME FIXME FIXME: There are number of places in this file where we convert; // what is a 64-bit assembler value used for computation into a value in the; // object file, which may truncate it. We should detect that truncation where; // invalid and report errors back.; /* *** */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp:287,error,errors,287,interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp,1,['error'],['errors']
Availability,// end anonymous namespace; // Forward declare these because the autogenerated code will reference them.; // Definitions are further down.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp:133,down,down,133,interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,2,['down'],['down']
Availability,// end anonymous namespace; // Perform the transformation to calls with errno set by domain error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp:92,error,error,92,interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; /// Check if two instruction are masked stores that completely; /// overwrite one another. More specifically, \p KillingI has to; /// overwrite \p DeadI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:61,mask,masked,61,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['mask'],['masked']
Availability,"// end anonymous namespace; /// Check the well-formedness of a C99 designated initializer.; ///; /// Determines whether the designated initializer @p DIE, which; /// resides at the given @p Index within the initializer list @p; /// IList, is well-formed for a current object of type @p DeclType; /// (C99 6.7.8). The actual subobject that this designator refers to; /// within the current subobject is returned in either; /// @p NextField or @p NextElementIndex (whichever is appropriate).; ///; /// @param IList The initializer list in which this designated; /// initializer occurs.; ///; /// @param DIE The designated initializer expression.; ///; /// @param DesigIdx The index of the current designator.; ///; /// @param CurrentObjectType The type of the ""current object"" (C99 6.7.8p17),; /// into which the designation in @p DIE should refer.; ///; /// @param NextField If non-NULL and the first designator in @p DIE is; /// a field, this will be set to the field declaration corresponding; /// to the field named by the designator. On input, this is expected to be; /// the next field that would be initialized in the absence of designation,; /// if the complete object being initialized is a struct.; ///; /// @param NextElementIndex If non-NULL and the first designator in @p; /// DIE is an array designator or GNU array-range designator, this; /// will be set to the last index initialized by this designator.; ///; /// @param Index Index into @p IList where the designated initializer; /// @p DIE occurs.; ///; /// @param StructuredList The initializer list expression that; /// describes all of the subobject initializers in the order they'll; /// actually be initialized.; ///; /// @returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:1723,error,error,1723,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['error'],['error']
Availability,// end anonymous namespace; /// Emits a reference to a dummy variable which is emitted with each class.; /// This ensures that a linker error will be generated when trying to link; /// together modules where a referenced class is not defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:136,error,error,136,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; /// Given two modules, link them together and run the program, checking to see; /// if the program matches the diff. If there is an error, return NULL. If not,; /// return the merged module. The Broken argument will be set to true if the; /// output is different. If the DeleteInputs argument is set to true then this; /// function deletes both input modules before it returns.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:160,error,error,160,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['error'],['error']
Availability,// end anonymous namespace; /// Helper to issue failure from the TBAA verification,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:48,failure,failure,48,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['failure'],['failure']
Availability,// end anonymous namespace; /// Make sure that the output operand \p OpInfo and its corresponding input; /// operand \p MatchingOpInfo have compatible constraint types (otherwise error; /// out).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:179,error,error,179,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['error'],['error']
Availability,// end anonymous namespace; /// Takes the result of a dependency scan and prints error / dependency files; /// based on the result.; ///; /// \returns True on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp:81,error,error,81,interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,2,['error'],['error']
Availability,// end anonymous namespace; /// The Unicode scalar value of a UTF-8 minimal well-formed code unit; /// subsequence and the subsequence's length in code units (uint8_t).; /// A length of 0 represents an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:202,error,error,202,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; /// This function behaves similarly to StringRef::substr(), but attempts to; /// terminate the returned StringRef at the first null terminator. If no null; /// terminator is found, an error is returned.; ///; /// @param Str Source string to create a substring from.; /// @param Offset The start index of the desired substring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:212,error,error,212,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; /// This is a helper function which builds instructions to provide; /// values necessary for partword atomic operations. It takes an; /// incoming address, Addr, and ValueType, and constructs the address,; /// shift-amounts and masks needed to work with a larger value of size; /// WordSize.; ///; /// AlignedAddr: Addr rounded down to a multiple of WordSize; ///; /// ShiftAmt: Number of bits to right-shift a WordSize value loaded; /// from AlignAddr for it to have the same value as if; /// ValueType was loaded from Addr.; ///; /// Mask: Value to mask with the value loaded from AlignAddr to; /// include only the part that would've been loaded from Addr.; ///; /// Inv_Mask: The inverse of Mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:256,mask,masks,256,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,5,"['Mask', 'down', 'mask']","['Mask', 'down', 'mask', 'masks']"
Availability,"// end anonymous namespace; /// Tries to parse a string as ObjC method name.; ///; /// \param Name The string to parse. Expected to originate from availability; /// attribute argument.; /// \param SlotNames The vector that will be populated with slot names. In case; /// of unsuccessful parsing can contain invalid data.; /// \returns A number of method parameters if parsing was successful,; /// std::nullopt otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:147,avail,availability,147,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,1,['avail'],['availability']
Availability,"// end anonymous namespace; /// Try to map \p V into a BinaryOp, and return \c std::nullopt on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:95,failure,failure,95,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['failure'],['failure']
Availability,"// end anonymous namespace; /// We know that cond should be true, if not print an error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:82,error,error,82,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['error'],['error']
Availability,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // Static Node Priority for Register Pressure Reduction; //===----------------------------------------------------------------------===//; // Check for special nodes that bypass scheduling heuristics.; // Currently this pushes TokenFactor nodes down, but may be used for other; // pseudo-ops as well.; //; // Return -1 to schedule right above left, 1 for left above right.; // Return 0 if no bias exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:355,down,down,355,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['down'],['down']
Availability,// end class Z3Config; // Function used to report errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:50,error,errors,50,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,1,['error'],['errors']
Availability,"// end namespace ROOT; ////////////////////////////////////////////////////////////////////////////////; // macro STATIC_CHECK; // Invocation: STATIC_CHECK(expr, id); // where:; // expr is a compile-time integral or pointer expression; // id is a C++ identifier that does not need to be defined; // If expr is zero, id will appear in a compile-time error message.; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/StaticCheck.h:349,error,error,349,math/smatrix/inc/Math/StaticCheck.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/StaticCheck.h,1,['error'],['error']
Availability,"// end namespace Util; /// \class KahanSum; /// The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors; /// when adding a sequence of finite-precision floating point numbers.; /// This is done by keeping a separate running compensation (a variable to accumulate small errors).; ///; /// ### Auto-vectorisable accumulation; /// This class can internally use multiple accumulators (template parameter `N`).; /// When filled from a collection that supports index access from a *contiguous* block of memory,; /// compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling; /// through the internal accumulators based on the value of ""`index % N`"", so `N` accumulators can be filled from a block; /// of `N` numbers in a single instruction.; ///; /// The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version; /// with `N = 1`.; /// This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation; /// result can change *in dependence of N*, even when the data are identical.; /// The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show; /// in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to; /// speed up the accumulation, but not to increase precision.; ///; /// \param T The type of the values to be accumulated.; /// \param N Number of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture.; /// Depending on the instruction set, good values are:; /// - AVX2-float: 8; /// - AVX2-double: 4; /// - AVX512-float: 16; /// - AVX512-double: 8; ///; /// ### Examples; ///; /// ~~~{.cpp}; /// std::vector<double> numbers(1000);; /// for (std::size_t i=0; i<1000; ++i) {; /// numbers[i] = rand();; /// }; ///; /// ROOT::Math::KahanSu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:144,error,errors,144,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,2,['error'],['errors']
Availability,// end namespace X86; // X86 specific Gather/Scatter nodes.; // The class has the same order of operands as MaskedGatherScatterSDNode for; // convenience.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:108,Mask,MaskedGatherScatterSDNode,108,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Mask'],['MaskedGatherScatterSDNode']
Availability,"// end namespace dependency_directives_scan; /// Scan the input for the preprocessor directives that might have; /// an effect on the dependencies for a compilation unit.; ///; /// This function ignores all non-preprocessor code and anything that; /// can't affect what gets included.; ///; /// \returns false on success, true on error. If the diagnostic engine is not; /// null, an appropriate error is reported using the given input location; /// with the offset that corresponds to the \p Input buffer offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:330,error,error,330,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,2,['error'],['error']
Availability,"// end namespace detail; /// A base class for visitors over the uses of a pointer value.; ///; /// Once constructed, a user can call \c visit on a pointer value, and this; /// will walk its uses and visit each instruction using an InstVisitor. It also; /// provides visit methods which will recurse through any pointer-to-pointer; /// transformations such as GEPs and bitcasts.; ///; /// During the visit, the current Use* being visited is available to the; /// subclass, as well as the current offset from the original base pointer if; /// known.; ///; /// The recursive visit of uses is accomplished with a worklist, so the only; /// ordering guarantee is that an instruction is visited before any uses of it; /// are visited. Note that this does *not* mean before any of its users are; /// visited! This is because users can be visited multiple times due to; /// multiple, different uses of pointers derived from the same base.; ///; /// A particular Use will only be visited once, but a User may be visited; /// multiple times, once per Use. This visits may notably have different; /// offsets.; ///; /// All visit methods on the underlying InstVisitor return a boolean. This; /// return short-circuits the visit, stopping it immediately.; ///; /// FIXME: Generalize this for all values rather than just instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h:440,avail,available,440,interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,1,['avail'],['available']
Availability,// end namespace detail; /// directory_iterator - Iterates through the entries in path. There is no; /// operator++ because we need an error_code. If it's really needed we can make; /// it call report_fatal_error on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:216,error,error,216,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['error'],['error']
Availability,// end namespace detail; /// recursive_directory_iterator - Same as directory_iterator except for it; /// recurses down into child directories.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:115,down,down,115,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['down'],['down']
Availability,"// end namespace llvm; // operator new and delete aren't allowed inside namespaces.; // The throw specifications are mandated by the standard.; /// Placement new for using the MCContext's allocator.; ///; /// This placement form of operator new uses the MCContext's allocator for; /// obtaining memory. It is a non-throwing new, which means that it returns; /// null on error. (If that is what the allocator does. The current does, so if; /// this ever changes, this operator will have to be changed, too.); /// Usage looks like this (assuming there's an MCContext 'Context' in scope):; /// \code; /// // Default alignment (8); /// IntegerLiteral *Ex = new (Context) IntegerLiteral(arguments);; /// // Specific alignment; /// IntegerLiteral *Ex2 = new (Context, 4) IntegerLiteral(arguments);; /// \endcode; /// Please note that you cannot use delete on the pointer; it must be; /// deallocated using an explicit destructor call followed by; /// \c Context.Deallocate(Ptr).; ///; /// \param Bytes The number of bytes to allocate. Calculated by the compiler.; /// \param C The MCContext that provides the allocator.; /// \param Alignment The alignment of the allocated memory (if the underlying; /// allocator supports it).; /// \return The allocated memory. Could be NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:370,error,error,370,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['error'],['error']
Availability,"// end namespace llvm; /// Check to see if AvailableVals has an entry for the specified BB and if so,; /// return it. If not, construct SSA form by first calculating the required; /// placement of PHIs and then inserting new PHIs where needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp:43,Avail,AvailableVals,43,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,1,['Avail'],['AvailableVals']
Availability,"// end namespace llvm; /// GetValueAtEndOfBlockInternal - Check to see if AvailableVals has an entry; /// for the specified BB and if so, return it. If not, construct SSA form by; /// first calculating the required placement of PHIs and then inserting new; /// PHIs where needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp:74,Avail,AvailableVals,74,interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,1,['Avail'],['AvailableVals']
Availability,// end namespace llvm; /// Represents a particular available value that we know how to materialize.; /// Materialization of an AvailableValue never fails. An AvailableValue is; /// implicitly associated with a rematerialization point which is the; /// location of the instruction from which it was formed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:51,avail,available,51,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,3,"['Avail', 'avail']","['AvailableValue', 'available']"
Availability,"// end namespace object; /// Base class for errors originating in RuntimeDyld, e.g. missing relocation; /// support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:44,error,errors,44,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,1,['error'],['errors']
Availability,"// end of FilterChooser::filterProcessor(bool); // Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:243,error,error,243,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['error'],['error']
Availability,// end of PHI handling; // We handle calls that:; // * Are debug info intrinsics.; // * Have a mapping to an IR intrinsic.; // * Have a vector version available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:151,avail,available,151,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['avail'],['available']
Availability,"// end of iteration loop; // save last result in case of no complete final states; // when the result is filled above (reduced storage) the resulting state will not be valid; // since they will not have parameter values and error; // the line above will fill as last element a valid state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:224,error,error,224,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['error'],['error']
Availability,"// enough unspecified are available to equal training and testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:26,avail,available,26,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['avail'],['available']
Availability,"// ensure all hypoTestResults are flagged as keep-alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:50,alive,alive,50,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// ensure factor is assigned an initial error, even if its zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:40,error,error,40,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['error'],['error']
Availability,"// ensure no asymm errors on any pars unless had minuitMinos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:19,error,errors,19,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['error'],['errors']
Availability,"// ensure that in any case correct parabolic errors are estimated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:45,error,errors,45,math/mathcore/src/FitConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx,1,['error'],['errors']
Availability,"// ensure that ranges are properly handled, even if the ranges are invalid; // let: start = desired start, end = desired end, last = actually last entry; // possible cases: default: 0 = start < last < end = max (already implicitly tested above); // 0. start < end <= last; // 1. similar to above but test the case the start is after the first tree); // * In MT runs, there is the additional optimization: once the desired end is reached,; // stop processing further trees, i.e. range asked is [1, 3] and the df has 2 trees; // of 5 entries each -> the second tree is not open.; // 2. 0 = start < last < end < max; // 3. 0 < start < last < end < max; // 4. start = end <= last -> enter the RLoopManager and do no work there (no sanity checks); // 5. start = end > last -> enter the RLoopManager and do no work there (no sanity checks); // 6. last = start < end -> error after getting the number of entries; // 7. last + 1 = start < end -> error after getting the number of entries; // 8. last < start < end -> error after getting the number of entries; // start > end -> error in the spec directly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:863,error,error,863,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,4,['error'],['error']
Availability,"// ensures errors are +/- 1 sigma ..IMPORTANT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:11,error,errors,11,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['error'],['errors']
Availability,"// enum type for possible foam cell values; // kValue : cell value who's rms is minimized; // kValueError : error on kValue; // kValueDensity : kValue / cell volume; // kMeanValue : mean sampling value (saved in fIntegral); // kRms : rms of sampling distribution (saved in fDriver); // kRmsOvMean : rms/mean of sampling distribution (saved in; // fDriver and fIntegral); // kCellVolume : volume of cell",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:108,error,error,108,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['error'],['error']
Availability,"// epoll_wait() always return either error or >0 events. Since there was no; // event for stopping, it must be an inotify event ready for reading.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:37,error,error,37,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,1,['error'],['error']
Availability,// error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:3,error,error,3,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,4,['error'],['error']
Availability,"// error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:3,error,error,3,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,8,['error'],['error']
Availability,// error (may leak).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:3,error,error,3,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['error'],['error']
Availability,"// error -> package should have been found",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:3,error,error,3,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['error'],['error']
Availability,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:3,error,error,3,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,16,['error'],['error']
Availability,"// error > eps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:3,error,error,3,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['error'],['error']
Availability,"// error already set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:3,error,error,3,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,2,['error'],['error']
Availability,"// error already set by lookup_dimension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:3,error,error,3,bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,1,['error'],['error']
Availability,"// error already set, but need to return nullptr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:3,error,error,3,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['error'],['error']
Availability,"// error callback using std::runtime_error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/src/RYMLParser.cxx:3,error,error,3,roofit/jsoninterface/src/RYMLParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/src/RYMLParser.cxx,1,['error'],['error']
Availability,"// error cannot be set in TFumili (always the same); // arglist[0] = ErrorUp();; // fFumili->ExecuteCommand(""SET Err"",arglist,1);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:3,error,error,3,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,2,"['Error', 'error']","['ErrorUp', 'error']"
Availability,"// error code of last operation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h:3,error,error,3,net/net/inc/TSQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h,2,['error'],['error']
Availability,"// error coming from the RLoopManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:3,error,error,3,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['error'],['error']
Availability,"// error condition, should never happen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:3,error,error,3,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,1,['error'],['error']
Availability,"// error def",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,error,error,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// error fraction vs tree number",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,error,error,3,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['error'],['error']
Availability,// error handler,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:3,error,error,3,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,1,['error'],['error']
Availability,"// error handling functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdp.h:3,error,error,3,net/rpdutils/res/rpdp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdp.h,1,['error'],['error']
Availability,"// error handling helpers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/inc/RooFitHS3/RooJSONFactoryWSTool.h:3,error,error,3,roofit/hs3/inc/RooFitHS3/RooJSONFactoryWSTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/inc/RooFitHS3/RooJSONFactoryWSTool.h,1,['error'],['error']
Availability,"// error has been set in CreateScopeProxy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:3,error,error,3,bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,1,['error'],['error']
Availability,// error has occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp:3,error,error,3,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,1,['error'],['error']
Availability,// error in compressed data,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,error,error,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// error in creating pad occurred, make this pad a zombie",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,error,error,3,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['error'],['error']
Availability,"// error in file opening occured, make this object a zombie",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx:3,error,error,3,io/dcache/src/TDCacheFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx,4,['error'],['error']
Availability,"// error in file opening occurred, make this object a zombie",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:3,error,error,3,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['error'],['error']
Availability,"// error in fork()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,error,error,3,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['error'],['error']
Availability,"// error in input plane; // Get info about segment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPcon.cxx:3,error,error,3,geom/geom/src/TGeoPcon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPcon.cxx,2,['error'],['error']
Availability,"// error in the minimization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,error,error,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// error is larger when using fast tanh from vdt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx:3,error,error,3,tmva/tmva/test/DNN/TestActivationFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx,2,['error'],['error']
Availability,"// error is scale, content is offset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:3,error,error,3,roofit/xroofit/src/xRooNode_interactive.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx,1,['error'],['error']
Availability,"// error is step size in this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:3,error,error,3,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['error'],['error']
Availability,"// error is truncated if over the limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:3,error,error,3,math/minuit2/inc/Minuit2/MinosError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h,1,['error'],['error']
Availability,"// error level: 1 (2*log(L) fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:3,error,error,3,tmva/tmva/src/MinuitFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx,1,['error'],['error']
Availability,"// error message if not already set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx:3,error,error,3,bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,1,['error'],['error']
Availability,"// error message of last operation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h:3,error,error,3,net/net/inc/TSQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h,2,['error'],['error']
Availability,"// error must be < 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:3,error,error,3,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['error'],['error']
Availability,"// error normalization also in case of W or WW options (weights = 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,error,error,3,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['error']
Availability,"// error normalization in case of zero error in the data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,error,error,3,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,2,['error'],['error']
Availability,"// error on accidental usage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TVirtualPacketizer.h:3,error,error,3,proof/proof/inc/TVirtualPacketizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TVirtualPacketizer.h,6,['error'],['error']
Availability,"// error on input, unable to implement request",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,error,error,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// error on tau",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:3,error,error,3,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],['error']
Availability,"// error on this bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:3,error,error,3,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['error']
Availability,"// error opening key for writing:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,error,error,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,2,['error'],['error']
Availability,"// error path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:3,error,error,3,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,5,['error'],['error']
Availability,"// error reporting is fraud, given the numerous steps taken, but more details seems better",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:3,error,error,3,bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx,1,['error'],['error']
Availability,"// error situation - conversion cannot be performed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrMap.cxx:3,error,error,3,graf2d/gpadv7/src/RAttrMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrMap.cxx,1,['error'],['error']
Availability,"// error successfully calculated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,error,error,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// error!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx:3,error,error,3,roofit/roofitcore/src/ConstraintHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx,1,['error'],['error']
Availability,"// error(ERR_INVALID_REAL_NUMBER);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx:3,error,error,3,test/periodic/NdbEndfIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx,1,['error'],['error']
Availability,"// error(ERR_INVALID_RECORD);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx:3,error,error,3,test/periodic/NdbEndfIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.cxx,1,['error'],['error']
Availability,"// errors are handled inside OpenFile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TMPWorkerTree.cxx:3,error,errors,3,tree/treeplayer/src/TMPWorkerTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TMPWorkerTree.cxx,1,['error'],['errors']
Availability,"// errors can be infinite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:3,error,errors,3,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['error'],['errors']
Availability,"// errors draw options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1.cxx:3,error,errors,3,tutorials/rcanvas/rh1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1.cxx,1,['error'],['errors']
Availability,"// errors from input vector and from background subtraction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:3,error,errors,3,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],['errors']
Availability,"// errors if multiple actions specified other than replace; // multiple replace flags may be specified, as long as they are not mixed with; // other action flags",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:3,error,errors,3,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,1,['error'],['errors']
Availability,"// errors of measurements (Gaussian, mean=0., sig = 0.01)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussDataGen.cxx:3,error,errors,3,math/minuit2/test/MnSim/GaussDataGen.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussDataGen.cxx,1,['error'],['errors']
Availability,"// errors!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:3,error,errors,3,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['error'],['errors']
Availability,"// errors, stop the action.; // We only want to see diagnostics emitted by migrateWithTemporaryFiles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ARCMTActions.cpp:3,error,errors,3,interpreter/llvm-project/clang/lib/ARCMigrate/ARCMTActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ARCMTActions.cpp,1,['error'],['errors']
Availability,"// errors, stop the action.; // We only want to see warnings reported from arcmt::checkForManualIssues.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ARCMTActions.cpp:3,error,errors,3,interpreter/llvm-project/clang/lib/ARCMigrate/ARCMTActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ARCMTActions.cpp,1,['error'],['errors']
Availability,"// escaped & ?; // copy the string down over it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx:35,down,down,35,gui/gui/src/TGString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx,1,['down'],['down']
Availability,"// estimate error and do the sum; // do this at index=0, netst-1, 2*netst-1 ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:12,error,error,12,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// estimate of binary error rate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:22,error,error,22,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['error'],['error']
Availability,"// estimate of scale average error rate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:29,error,error,29,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['error'],['error']
Availability,"// estimate the edm (expected distance to the minimum) = 0.5 * g^T V g (where V is the error matrix, inverse of; // Hessian); // edm = 0.5 * dx^T H dx where V = H^-1 and dx is x distance from minimum; // now since dx = - V g -> edm = 0.5 g^T V g",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricEDMEstimator.cxx:87,error,error,87,math/minuit2/src/VariableMetricEDMEstimator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricEDMEstimator.cxx,1,['error'],['error']
Availability,"// estimate the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:16,error,error,16,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['error'],['error']
Availability,"// estimate the truncation error from d2-d0 which is O(h^2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:27,error,error,27,math/mathcore/src/RichardsonDerivator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx,1,['error'],['error']
Availability,"// estimates where corresponding pValues graph becomes equal to 0.05; // linearly interpolates log(pVal) when obtaining limits.; // returns value and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:150,error,error,150,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['error'],['error']
Availability,"// estimation of statistical error on counted signal/background events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:29,error,error,29,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// evaluate at most order n ( truncate the series) returning result + error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:70,error,error,70,math/mathmore/src/ChebyshevApprox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx,1,['error'],['error']
Availability,"// evaluate crossing point where function is equal to MIN + UP,; // with direction pdir from values pmid; // tlr indicate tolerance and maxcalls maximum number of calls; // double edmmax = 0.5*0.001*toler*fFCN.Up();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:122,toler,tolerance,122,math/minuit2/src/MnFunctionCross.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx,2,['toler'],"['toler', 'tolerance']"
Availability,"// evaluate returning result and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:33,error,error,33,math/mathmore/src/ChebyshevApprox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx,1,['error'],['error']
Availability,"// evaluate the chi2 given a function reference , the data and returns the value and also in nPoints; // the actual number of used points; // method using the error in the coordinates; // integral of bin does not make sense in this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:159,error,error,159,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// evaluate the chi2 given a function reference , the data and returns the value and also in nPoints; // the actual number of used points; // normal chi2 using only error on values (from fitting histogram); // optionally the integral of function in the bin is used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:165,error,error,165,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// evaluate the chi2 given a function reference, the data and returns the value and also in nPoints; // the actual number of used points; // normal chi2 using only error on values (from fitting histogram); // optionally the integral of function in the bin is used; //Info(""EvalChi2"",""Using non-vectorized implementation %d"",(int) data.Opt().fIntegral);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:164,error,error,164,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,1,['error'],['error']
Availability,"// evaluate the chi2 given a vectorized function reference , the data and returns the value and also in nPoints; // the actual number of used points; // normal chi2 using only error on values (from fitting histogram); // optionally the integral of function in the bin is used; //Info(""EvalChi2"",""Using vectorized implementation %d"",(int) data.Opt().fIntegral);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:176,error,error,176,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,1,['error'],['error']
Availability,"// evaluate the derivative of the pdf; // if derivative function is not given is evaluated numerically; // in case a pdf is available, otherwise a NaN is returned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuranContDist.cxx:124,avail,available,124,math/unuran/src/TUnuranContDist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuranContDist.cxx,1,['avail'],['available']
Availability,"// evaluate the gradient of the chi2 function; // this function is used when the model function knows how to calculate the derivative and we can; // avoid that the minimizer re-computes them; //; // case of chi2 effective (errors on coordinate) is not supported",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:223,error,errors,223,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['error'],['errors']
Availability,"// evaluate the pdf of the distribution. Return NaN if pdf is not available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuranContDist.cxx:66,avail,available,66,math/unuran/src/TUnuranContDist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuranContDist.cxx,1,['avail'],['available']
Availability,"// event selection.; /// It is also possible (starting w/ version 5.27/02) to run on multiple datasets; /// at once in a more flexible way that the one provided by wildcarding. There; /// are three possibilities:; /// 1) specifying the dataset names separated by the OR operator '|', e.g.; /// dsetname = ""<dset1>|<dset2>|<dset3>|...""; /// in this case the datasets are a seen as a global unique dataset; /// 2) specifying the dataset names separated by a ',' or a ' ', e.g.; /// dsetname = ""<dset1>,<dset2> <dset3>,...""; /// in this case the datasets are processed one after the other and the; /// selector is notified when switching dataset via a bit in the current; /// processed element.; /// 3) giving the path of a textfile where the dataset names are specified; /// on one or multiple lines; the lines found are joined as in 1), unless; /// the filepath is followed by a ',' (i.e. p->Process(""datasets.txt,"",...); /// with the dataset names listed in 'datasets.txt') in which case they are; /// treated as in 2); the file is open in raw mode with TFile::Open and; /// therefore it cane be remote, e.g. on a Web server.; /// Each `<dsetj>` has the format specified above for the single dataset processing,; /// included wildcarding (the name of the tree and subdirectory must be same for; /// all the datasets).; /// In the case of multiple datasets, 'elist' is treated a global entry list.; /// It is possible to specify per-dataset entry lists using the syntax; /// ""mydset[#adir/[T]]?enl=entrylist""; /// or; /// ""mydset[#adir/[T]]<<entrylist""; /// Here 'entrylist' is a tag identifying, in the order :; /// i. a named entry-list in the input list or in the input data list; /// ii. a named entry-list in memory (in gDirectory); /// iii. the path of a file containing the entry-list to be used; /// In the case ii) and iii) the entry-list object(s) is(are) added to the input; /// data list.; /// The return value is -1 in case of error and TSelector::GetStatus() in; /// in case of success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:2961,error,error,2961,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['error'],['error']
Availability,"// eventually one should specify tolerance in contours",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,toler,tolerance,33,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['toler'],['tolerance']
Availability,"// exclude points with zero or very small errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:42,error,errors,42,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['error'],['errors']
Availability,"// executor factory available, use it to create executor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:20,avail,available,20,bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx,1,['avail'],['available']
Availability,// exit if having uncompilable errors or ignoring all warnings:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:31,error,errors,31,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['error'],['errors']
Availability,// exp10 and exp10f are not available on OS X until 10.9 and iOS until 7.0; // and their names are __exp10 and __exp10f. exp10l is not available on; // OS X or iOS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:28,avail,available,28,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,2,['avail'],['available']
Availability,"// exp10, exp10f, exp10l is available on Linux (GLIBC) but are extremely; // buggy prior to glibc version 2.18. Until this version is widely deployed; // or we have a reasonable detection strategy, we cannot use exp10 reliably; // on Linux.; //; // Fall through to disable all of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:28,avail,available,28,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,2,"['avail', 'reliab']","['available', 'reliably']"
Availability,"// expected errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,error,errors,12,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,2,['error'],['errors']
Availability,"// expected-error {{ValueExtractionSynthesizer could not find: 'cling::runtime::internal::setValueNoAlloc'.}}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/Driver/C.c:12,error,error,12,interpreter/cling/test/Driver/C.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/Driver/C.c,2,['error'],['error']
Availability,"// expected-error {{redefinition of '__my_i'}}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/ErrorRecovery/SubsequentDecls.h:12,error,error,12,interpreter/cling/test/ErrorRecovery/SubsequentDecls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/ErrorRecovery/SubsequentDecls.h,1,['error'],['error']
Availability,"// expected-error {{use of undeclared identifier}}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/ErrorRecovery/HeaderFileProtector.h:12,error,error,12,interpreter/cling/test/ErrorRecovery/HeaderFileProtector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/ErrorRecovery/HeaderFileProtector.h,3,['error'],['error']
Availability,"// explicitly initialize error fields of pre-synapses, batch mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:25,error,error,25,tmva/tmva/inc/TMVA/TNeuron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h,1,['error'],['error']
Availability,"// extern constinit int a;; // int a = 0; // error (missing 'constinit'), accepted as extension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:45,error,error,45,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"// external error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12,error,error,12,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// extract a distribution from the given set of global bins; // input:; // histogramName : name of the histogram which is created; // globalBins : histogram with all bins; // globalBinsEmatrix : corresponding error matrix; // if this pointer is zero, only diagonal errors; // are considered; // originalAxisBinning : extract histogram with proper binning; // (if possible); // axisSteering; // ""pattern1;pattern2;...;patternN""; // patternI = axis[mode]; // axis = name or *; // mode = C|U|O; // C: collapse axis into one bin; // U: discard underflow bin; // O: discard overflow bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx:209,error,error,209,hist/unfold/src/TUnfoldBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx,2,['error'],"['error', 'errors']"
Availability,"// extract parameters from the variable; // use current value and error on v as constraint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:66,error,error,66,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// extractelement vXi1 X, MaskIdx --> ((movmsk X) & Mask) == Mask; // Mask = 1 << MaskIdx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:26,Mask,MaskIdx,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,5,['Mask'],"['Mask', 'MaskIdx']"
Availability,// f16 arguments could have been extended prior to argument lowering.; // Mask them arguments if this is a CMSE nonsecure call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:74,Mask,Mask,74,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Mask'],['Mask']
Availability,"// fEval and fOpen are borrowed referencers and we need to keep them alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx:69,alive,alive,69,tmva/pymva/src/PyMethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/PyMethodBase.cxx,1,['alive'],['alive']
Availability,"// fSTLType is -1 if not yet evaluated.; // fSTLType is -2 if no fInfo was available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TBaseClass.cxx:75,avail,available,75,core/meta/src/TBaseClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TBaseClass.cxx,1,['avail'],['available']
Availability,"// fVolume->SetNextNodeIndex(fVolume->GetCurrentNodeIndex());; // return snext;; // }; // snext += TGeoShape::Tolerance();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShapeAssembly.cxx:110,Toler,Tolerance,110,geom/geom/src/TGeoShapeAssembly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShapeAssembly.cxx,1,['Toler'],['Tolerance']
Availability,"// failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx:3,failure,failure,3,io/io/src/TBufferJSON.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx,5,['failure'],['failure']
Availability,"// failure ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:3,failure,failure,3,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,6,['failure'],['failure']
Availability,"// failure in determination of cutoff and/or creation of histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:3,failure,failure,3,roofit/roostats/src/MCMCInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx,3,['failure'],['failure']
Availability,"// failure reading",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:3,failure,failure,3,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['failure'],['failure']
Availability,"// failure return",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,failure,failure,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['failure'],['failure']
Availability,"// failure returns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,failure,failure,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['failure'],['failure']
Availability,"// failure to invert 2nd deriv matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,failure,failure,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['failure'],['failure']
Availability,"// failure, clear sending flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:3,failure,failure,3,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['failure'],['failure']
Availability,// fake use to avoid build failure when assertions disabled,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:27,failure,failure,27,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['failure'],['failure']
Availability,// fall through: always an error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:27,error,error,27,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['error'],['error']
Availability,// false on error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:12,error,error,12,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,5,['error'],['error']
Availability,"// fast tanh (only when VDT is available)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:31,avail,available,31,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,1,['avail'],['available']
Availability,"// fatal error occurred: stop execution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:9,error,error,9,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx,1,['error'],['error']
Availability,// faultmask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp:3,fault,faultmask,3,interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,1,['fault'],['faultmask']
Availability,"// ffsl is available on at least Darwin, Mac OS X, iOS, FreeBSD, and; // Linux (GLIBC):; // http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/ffsl.3.html; // http://svn.freebsd.org/base/head/lib/libc/string/ffsl.c; // http://www.gnu.org/software/gnulib/manual/html_node/ffsl.html",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:11,avail,available,11,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,// ffsll is available on at least FreeBSD and Linux (GLIBC):; // http://svn.freebsd.org/base/head/lib/libc/string/ffsll.c; // http://www.gnu.org/software/gnulib/manual/html_node/ffsll.html,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:12,avail,available,12,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,"// file could not be opened --> Error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:32,Error,Error,32,tmva/tmva/src/Configurable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx,3,['Error'],['Error']
Availability,"// file not found --> Error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:22,Error,Error,22,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,8,['Error'],['Error']
Availability,"// fill covariant matrix VL; // fill parameter error matrix up",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:47,error,error,47,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['error'],['error']
Availability,"// fill error matrix; // if minimizer provides error provides also error matrix; // clear in case of re-filling an existing result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:8,error,error,8,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,6,['error'],['error']
Availability,"// fill in this variable's value and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:37,error,error,37,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['error'],['error']
Availability,"// finally check at least one float has errors defined (might not be cause if in prefit state)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:40,error,errors,40,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,"// first do with the covariance approximation, since that's always available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:67,avail,available,67,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['avail'],['available']
Availability,"// first error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:9,error,error,9,interpreter/cling/lib/Interpreter/IncrementalParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp,1,['error'],['error']
Availability,"// first stage errors should be the more informative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:15,error,errors,15,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['error'],['errors']
Availability,"// fit errors are infinite;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:7,error,errors,7,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['error'],['errors']
Availability,"// fit using error on X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:13,error,error,13,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['error']
Availability,"// fix for negative qmu values due to numerical errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:48,error,errors,48,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['error'],['errors']
Availability,"// fixed array, dims will have size if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:39,avail,available,39,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['avail'],['available']
Availability,"// fixes for numerical error and for https://savannah.cern.ch/bugs/index.php?99777",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:23,error,error,23,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['error'],['error']
Availability,"// flag a link time error when a wrong conversion is instantiated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/3DConversions.h:20,error,error,20,math/genvector/inc/Math/GenVector/3DConversions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/3DConversions.h,1,['error'],['error']
Availability,"// flag error only when of the two histogram is zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8,error,error,8,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// flag that the scan is done; // calculate how often to check error rate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:63,error,error,63,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// flag to indicate if a numerical evaluation error occurred",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:46,error,error,46,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['error'],['error']
Availability,"// flag to reset counter for error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h:29,error,error,29,math/mathmore/src/GSLInterpolator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h,1,['error'],['error']
Availability,"// fold (and (mul x, c1), c2) -> (mul x, (and c1, c2)); // iff c2 is all/no bits mask - i.e. a select-with-zero mask.; // TODO: Handle PMULDQ/PMULUDQ/VPMADDWD/VPMADDUBSW?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:81,mask,mask,81,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,"// fold (blend A, A, Mask) -> A",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:21,Mask,Mask,21,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['Mask'],['Mask']
Availability,// fold (fpext (load x)) -> (fpext (fptrunc (extload x))); // We purposefully don't care about legality of the nodes here as we know; // they can be split down into something legal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:155,down,down,155,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['down'],['down']
Availability,"// fold (or (shuf A, V_0, MA), (shuf B, V_0, MB)) -> (shuf A, B, Mask); // Do this only if the resulting type / shuffle is legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:65,Mask,Mask,65,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Mask'],['Mask']
Availability,"// fold (select (setcc x, [+-]0.0, *lt), NaN, (fsqrt x)); // The select + setcc is redundant, because fsqrt returns NaN for X < 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,redundant,redundant,83,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['redundant'],['redundant']
Availability,"// fold (select Cond, 0, 1) -> (xor Cond, 1); // We can't do this reliably if integer based booleans have different contents; // to floating point based booleans. This is because we can't tell whether we; // have an integer-based boolean or a floating-point-based boolean unless we; // can find the SETCC that produced it and inspect its operands. This is; // fairly easy if C is the SETCC node, but it can potentially be; // undiscoverable (or not reasonably discoverable). For example, it could be; // in another basic block or it could require searching a complicated; // expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,reliab,reliably,66,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['reliab'],['reliably']
Availability,// fold (sext_inreg (masked_load x)) -> (sext_masked_load x); // ignore it if the masked load is already sign extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,mask,masked,82,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['masked']
Availability,"// fold (shl (srl x, c1), c2) -> (and (shl x, (sub c2, c1), MASK) or; // (and (srl x, (sub c1, c2), MASK); // Only fold this if the inner shift has no other uses -- if it does,; // folding this will increase the total number of instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,MASK,MASK,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['MASK'],['MASK']
Availability,"// fold (srl (anyextend x), c) -> (and (anyextend (srl x, c)), mask); // TODO - support non-uniform vector shift amounts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,mask,mask,63,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// fold (srl (shl x, c1), c2) -> (and (shl x, (sub c1, c2), MASK) or; // (and (srl x, (sub c2, c1), MASK)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,MASK,MASK,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['MASK'],['MASK']
Availability,"// fold (zext (truncate x)) -> (and x, mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,mask,mask,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['mask']
Availability,"// foldOpIntoPhi will speculate instructions to the end of the PHI's; // predecessor blocks, so do this only if we know the srem or urem; // will not fault.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:150,fault,fault,150,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['fault'],['fault']
Availability,"// following lines required to repair for a bug in Root version 1.03",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:31,repair,repair,31,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['repair'],['repair']
Availability,"// for (let i = 0; i < this.selectedObjects.length; ++i){; // 	const object = this.selectedObjects[i];; // 	// treat Mesh and LineSegments as the same; // 	if(object.type === ""Mesh"" || object.type === ""LineSegments"" ); // 	{; // 		groups[0] = groups[0] || [];; // 		groups[0].push(object);; // 	}; // 	else if(object.type === ""Points""); // 	{; // 		let found = false;; // 		// loop over groups; // 		for (let z = 1; z < groups.length; ++z){; // 			// loop over all the elements of a group; // 			for (let w = 0; w < z.length; ++w){; // 				// if the objects have the same attributes; // 				if(; // 					this.selectedObjects[z][w].type			 === object.type			&&; // 					this.selectedObjects[z][w].material.size === object.material.size	&&; // 					this.selectedObjects[z][w][""vertShader""] === object[""vertShader""]	&&; // 					this.selectedObjects[z][w][""fragShader""] === object[""fragShader""]; // 				){; // 					groups[z].push(object);; // 					found = true;; // 					break;; // 				}; // 			}; // 			if(found); // 				break;; // 		}; // 		if(!found){; // 			groups.push([object]);; // 		}; // 	}; // 	else if(object.type === ""Group""); // 	{; // 		for (const child of object.children){; // 		}; // 	}; // 	else; // 	{; // 		console.error(""unknown type of geometry! fallback to 0"");; // 		groups[0] = groups[0] || [];; // 		groups[0].push(object);; // 	}; // }; // this._groups = groups.filter(Array);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js:1231,error,error,1231,ui5/eve7/lib/OutlinePassEve.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js,1,['error'],['error']
Availability,"// for Fumili implement Minimize here because need downcast",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:51,down,downcast,51,math/minuit2/src/FumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx,1,['down'],['downcast']
Availability,"// for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:26,error,error,26,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['error'],['error']
Availability,"// for completeness in error reporting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:23,error,error,23,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,2,['error'],['error']
Availability,"// for coordinate error we store the error and not the inverse",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h:18,error,error,18,math/mathcore/inc/Fit/BinData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h,2,['error'],['error']
Availability,"// for display of errors will go to one extra dp ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,error,errors,18,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,"// for normalization allow slightly larger error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:43,error,error,43,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx,1,['error'],['error']
Availability,"// for profiles in 2D and 3D avoid problems with bins with zero error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:64,error,error,64,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['error']
Availability,"// for the enumerations defining the types; /** Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:241,Error,Error,241,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,2,['Error'],['Error']
Availability,"// for the enumerations defining the types; // constructors; /**; Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h:228,Error,Error,228,math/mathcore/inc/Math/Integrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h,2,['Error'],['Error']
Availability,"// for the errors use the getters by index to avoid cases when the arrays are zero; // (like in a case of a graph)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:11,error,errors,11,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// for(const auto& selRule: fFunctionSelectionRules) {; // if (!selRule.GetMatchFound() && !GetHasFileNameRule()) {; // // Here the slow methods can be used; // std::string name;; // if (selRule.GetAttributeValue(""proto_pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""proto_name"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""name"", name)) {; // // keept it; // } else {; // name.clear();; // }; // // Make it soft, no error - just warnings; // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // if (IsSelectionXMLFile()){; // // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // }; // // else {; // // std::cout<<""Error - unused function rule: ""<<name<<std::endl;; // // }; // if (name.length() == 0) {; // selRule.PrintAttributes(std::cout,3);; // }; // }; //; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:544,error,error,544,core/dictgen/src/SelectionRules.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,"// force the synapse to adjust its weight according to its error field",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:59,error,error,59,tmva/tmva/inc/TMVA/TSynapse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h,1,['error'],['error']
Availability,"// format or other error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:19,error,error,19,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// formula below has a large error when sigma_b becomes zero; // better to use the approximation for sigma_b=0 for very small values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:29,error,error,29,roofit/roostats/src/RooStatsUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx,1,['error'],['error']
Availability,"// formula functions; // if ndim is not 1 set xmin max to zero to avoid error in ctor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:72,error,error,72,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['error'],['error']
Availability,"// found the minimum test error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:26,error,error,26,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['error'],['error']
Availability,"// free mask pixmap",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:8,mask,mask,8,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['mask'],['mask']
Availability,"// frexp doc is:; // if no errors occur,; // returns the value x in the range (-1;-0.5], [0.5; 1); // and stores an integer value in *exp such that x×2^(*exp) = arg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx:27,error,errors,27,core/meta/src/TStatusBitsChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx,1,['error'],['errors']
Availability,"// frodo:; // Because of the Member and Proto recursion, this has become a bit; // complicated, so here is how it works:; //; // root [1] var.a.b.c[TAB]; //; // will generate the sucessive calls:; // MakeClassFromVarName(""var.a.b.c"", context, 0) returns the class of ""c""; // MakeClassFromVarName(""var.a.b"", context, 1) returns the class of ""b""; // MakeClassFromVarName(""var.a"", context, 2) returns the class of ""a""; // MakeClassFromVarName(""var"", context, 3); // need to make sure ""varName"" exists; // because ""DetermineClass()"" prints clumsy error message otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:543,error,error,543,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['error'],['error']
Availability,"// from now all operations performed with sub-element,; // stack should be repaired at the end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx:75,repair,repaired,75,io/io/src/TBufferJSON.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx,1,['repair'],['repaired']
Availability,"// full triangle down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:17,down,down,17,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,2,['down'],['down']
Availability,"// function ZIP_inflate; /**; * https://github.com/pierrec/node-lz4/blob/master/lib/binding.js; *; * LZ4 based compression and decompression; * Copyright (c) 2014 Pierre Curto; * MIT Licensed; */; /**; * Decode a block. Assumptions: input contains all sequences of a; * chunk, output is large enough to receive the decoded data.; * If the output buffer is too small, an error will be thrown.; * If the returned value is negative, an error occurred at the returned offset.; *; * @param input {Buffer} input data; * @param output {Buffer} output data; * @return {Number} number of decoded bytes; * @private */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:370,error,error,370,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['error'],['error']
Availability,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:1050,Error,Error-prone,1050,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,1,['Error'],['Error-prone']
Availability,"// function performing the minimum searches using the Variable Metric algorithm (MIGRAD); // perform first a line search in the - Vg direction and then update using the Davidon formula (Davidon Error; // updator) stop when edm reached is less than required (edmval); // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:194,Error,Error,194,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['Error'],['Error']
Availability,"// function to test if a point with barycentric coordinates (a,b,c) is inside the triangle; // If the point is outside one or more of the coordinate are negative.; // If the point is on a triangle edge, one of the coordinate (the one not part of the edge) is zero.; // Due to numerical error, it can happen that if the point is at the edge the result is a small negative value.; // Use then a tolerance (of - eps) to still consider the point within the triangle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx:286,error,error,286,math/mathcore/src/Delaunay2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"// functions must be 1d- if not flag an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx:40,error,error,40,hist/hist/src/TF1Convolution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Convolution.cxx,1,['error'],['error']
Availability,"// gGeoManager is defined in the Geom libraries and we want to make sure we; // do not load it when autoloading is off. We can only test this in modules; // mode because gGeoManager is not part of the PCH and non-modular ROOT has; // header parsing and autoloading coupled leading to redundant load of; // libGeom at gROOT->GetGlobal time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingDataMemberInfoTests.cxx:284,redundant,redundant,284,core/metacling/test/TClingDataMemberInfoTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingDataMemberInfoTests.cxx,1,['redundant'],['redundant']
Availability,"// gInterpreter requirement; // would like to warn, but can't quite determine error from intentional; // hiding by developers, so only cover the case where we really should have; // had a class info, but apparently don't:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:78,error,error,78,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['error'],['error']
Availability,"// gShowPrefixStack determines how messages are printed, it acts on all threads;; // race conditions when writing to this do not cause failures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:135,failure,failures,135,math/minuit2/src/MnPrint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx,1,['failure'],['failures']
Availability,"// gcc 4.3.2 gives and error for RhoEtaPhiVector for 32 bits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:23,error,error,23,math/mathcore/test/stress/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx,2,['error'],['error']
Availability,// gcc just blithely ignores member pointers.; // FIXME: we should do better than that. 'M' is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:95,avail,available,95,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['avail'],['available']
Availability,"// gdb-backtrace.sh uses gdb to produce a backtrace. See if it is available.; // If it is, use it. If not proceed as before.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx:66,avail,available,66,core/unix/src/TUnixSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx,1,['avail'],['available']
Availability,"// genShuffleBland - Creates shuffle according to two vectors.This function is; // only works on instructions with lane inside 256 registers. According to; // the mask 'Mask' creates a new Mask 'Out' by the offset of the mask. The; // offset amount depends on the two integer, 'LowOffset' and 'HighOffset'.; // Where the 'LowOffset' refers to the first vector and the highOffset refers to; // the second vector.; // |a0....a5,b0....b4,c0....c4|a16..a21,b16..b20,c16..c20|; // |c5...c10,a5....a9,b5....b9|c21..c26,a22..a26,b21..b25|; // |b10..b15,c11..c15,a10..a15|b26..b31,c27..c31,a27..a31|; // For the sequence to work as a mirror to the load.; // We must consider the elements order as above.; // In this function we are combining two types of shuffles.; // The first one is vpshufed and the second is a type of ""blend"" shuffle.; // By computing the shuffle on a sequence of 16 elements(one lane) and add the; // correct offset. We are creating a vpsuffed + blend sequence between two; // shuffles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:163,mask,mask,163,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,4,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"// generate the wrapper and JIT it; ignore wrapper generation errors (will simply; // result in a nullptr that is reported upstream if necessary; often, however,; // there is a different overload available that will do)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:62,error,errors,62,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,2,"['avail', 'error']","['available', 'errors']"
Availability,"// get a good starting point for x; // for fType == kLog, this means that fFunction->getVal() did not cause; // an eval error; // for fType == kRegular this means fFunction->getVal() != 0; //; // kbelasco: i < 1000 is sort of arbitrary, but way higher than the number of; // steps we should have to take for any reasonable (log) likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:120,error,error,120,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['error'],['error']
Availability,"// get covariance error matrix from TMinuit; // when some parameters are fixed filled the corresponding rows and column with zero's",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:18,error,error,18,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['error']
Availability,"// get crossing value in the parameter direction :; // direction = + 1 upper value; // direction = -1 lower value; // pass now tolerance used for Migrad minimizations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:127,toler,tolerance,127,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['toler'],['tolerance']
Availability,"// get currently available limit, with error. Use nSigma = nan for observed limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:17,avail,available,17,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,2,"['avail', 'error']","['available', 'error']"
Availability,"// get dlopen error if there is one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformPosix.cpp:14,error,error,14,interpreter/cling/lib/Utils/PlatformPosix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformPosix.cpp,1,['error'],['error']
Availability,"// get error contribution from input vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:7,error,error,7,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,2,['error'],['error']
Availability,"// get error for parameter e (external index)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:7,error,error,7,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,1,['error'],['error']
Availability,"// get error for parameter n",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:7,error,error,7,math/minuit2/src/MnUserParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx,1,['error'],['error']
Availability,"// get error for parameter n (external index)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:7,error,error,7,math/minuit2/src/MnUserTransformation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx,1,['error'],['error']
Availability,"// get error level used for fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:7,error,error,7,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,2,['error'],['error']
Availability,"// get error matrix (methods return a copy)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:7,error,error,7,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['error'],['error']
Availability,"// get error matrix contribution from uncorrelated errors on the matrix A",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:7,error,error,7,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,4,['error'],"['error', 'errors']"
Availability,"// get error matrix from one systematic source",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:7,error,error,7,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['error']
Availability,"// get error matrix from tau variation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:7,error,error,7,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['error']
Availability,"// get error matrix from the scale error of one background source",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:7,error,error,7,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,2,['error'],['error']
Availability,"// get error matrix from uncorrelated error of one background source",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:7,error,error,7,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,4,['error'],['error']
Availability,"// get errors from cov matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:7,error,errors,7,math/mathmore/src/GSLNLSMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx,1,['error'],['errors']
Availability,"// get global correlation coefficients including systematic,statistical,background,tau errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:87,error,errors,87,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['errors']
Availability,"// get global correlation coefficients including systematic,statistical,background,tau errors; // rhoi: output histogram; // binMap: for each global bin, indicate in which histogram bin; // to store its content; // invEmat: output histogram for inverse of error matrix; // (pointer may zero if inverse is not requested)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:87,error,errors,87,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],"['error', 'errors']"
Availability,"// get global correlation coefficients with arbitrary min map; // rhoi: global correlation histogram; // emat: error matrix; // binMap: for each bin of the original output distribution; // specify the destination bin. A value of -1 means that the bin; // is discarded. 0 means underflow bin, 1 first bin, ...; // binMap[0] : destination of underflow bin; // binMap[1] : destination of first bin; // ...; // return value: maximum global correlation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:111,error,error,111,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['error']
Availability,"// get global correlation coefficients, including systematic errors (from TUnfoldSys)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:61,error,errors,61,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,1,['error'],['errors']
Availability,"// get global correlation coefficients, stat+bgr errors only (from TUnfold)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:49,error,errors,49,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,1,['error'],['errors']
Availability,"// get input data inverse of error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfold.h:29,error,error,29,hist/unfold/inc/TUnfold.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfold.h,1,['error'],['error']
Availability,"// get lower error for parameter par",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:13,error,error,13,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['error'],['error']
Availability,"// get parameter error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:17,error,error,17,math/minuit2/src/MnUserParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx,2,['error'],['error']
Availability,"// get parameter name for i; // (need separate scope for avoiding compl error when declaring name)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:72,error,error,72,math/minuit2/src/MnHesse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx,1,['error'],['error']
Availability,"// get parameter values and errors (step sizes)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:28,error,errors,28,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,2,['error'],['errors']
Availability,"// get rid of error bar caps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:14,error,error,14,core/base/src/TStyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx,2,['error'],['error']
Availability,"// get the data; // xp = X position of the current point; // yp = Y position of the current point; // ex1 = Low X error; // ex2 = Up X error; // ey1 = Low Y error; // ey2 = Up Y error; // (xi,yi) = Error bars coordinates; // apply offset on errors for bar histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:114,error,error,114,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,6,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"// get the weighted error field of the post-neuron",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:20,error,error,20,tmva/tmva/inc/TMVA/TSynapse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h,1,['error'],['error']
Availability,"// get total chi**2 including all systematic errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:45,error,errors,45,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['errors']
Availability,"// get total error including statistical error; // ematrix: output; // binMap: see method GetEmatrix()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:13,error,error,13,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],['error']
Availability,"// get total error including systematic,statistical,background,tau errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:13,error,error,13,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,4,['error'],"['error', 'errors']"
Availability,"// get training errors (for JsMVA only)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:16,error,errors,16,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['error'],['errors']
Availability,// getAsInteger returns 'true' on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hexagon.cpp:34,error,error,34,interpreter/llvm-project/clang/lib/Driver/ToolChains/Hexagon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hexagon.cpp,1,['error'],['error']
Availability,"// getConstVector sets negative shuffle mask values as undef, so ensure; // we hardcode SM_SentinelZero values to zero (0x80).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// getEndLoc is not reliably set during re-lexing, use text length; // instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:20,reliab,reliably,20,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['reliab'],['reliably']
Availability,// getName returns names only for available funcs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:34,avail,available,34,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,1,['avail'],['available']
Availability,"// give err negative sign to indicate if error due to negative side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:41,error,error,41,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['error'],['error']
Availability,"// give initial error value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:16,error,error,16,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['error'],['error']
Availability,"// give param initial error to match gaussSigma",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:22,error,error,22,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['error'],['error']
Availability,"// go down one; // handle scientific notation cases (1.e-2 ^ 3 )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:6,down,down,6,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['down'],['down']
Availability,"// go inside the division cell and search downwards",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx:42,down,downwards,42,geom/geom/src/TGeoNavigator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx,1,['down'],['downwards']
Availability,"// got EAGAIN/EWOULDBLOCK error, keep trying...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TPSocket.cxx:26,error,error,26,net/net/src/TPSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TPSocket.cxx,1,['error'],['error']
Availability,"// got here need a new point .... evaluate the estimated lim location +/- the relUncert (signed error takes care of; // direction)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:96,error,error,96,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['error'],['error']
Availability,"// group2Shuffle reorder the shuffle stride back into continuous order.; // For example For VF16 with Mask1 = {0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13} =>; // MaskResult = {0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:157,Mask,MaskResult,157,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['Mask'],['MaskResult']
Availability,"// gsl will report an error in this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h:22,error,error,22,math/mathmore/src/GSLInterpolator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h,1,['error'],['error']
Availability,"// h3 has to be filled again so that the errors are properly calculated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,error,errors,41,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['errors']
Availability,"// half a pixel ~ rounding error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPDF.cxx:27,error,error,27,graf2d/postscript/src/TPDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPDF.cxx,1,['error'],['error']
Availability,"// handle SO_KEEPALIVE failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/net.cxx:23,failure,failure,23,net/rpdutils/src/net.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/net.cxx,1,['failure'],['failure']
Availability,// handleErrors needs to be able to iterate the payload list of an; // ErrorList.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:71,Error,ErrorList,71,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['Error'],['ErrorList']
Availability,"// handles if no prefit available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:24,avail,available,24,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['avail'],['available']
Availability,"// handshake with other end (to make sure it's alive)...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:47,alive,alive,47,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,2,['alive'],['alive']
Availability,"// happens with compilation error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:28,error,error,28,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['error'],['error']
Availability,// hasFP ends up calling getMaxCallFrameComputed() which may not be; // available when getPressureLimit() is called as part of; // ScheduleDAGRRList.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp:72,avail,available,72,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp,1,['avail'],['available']
Availability,// has_FlowTraits<int> will cause an error with some compilers because; // it subclasses int. Using this wrapper only instantiates the; // real has_FlowTraits only if the template type is a class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:37,error,error,37,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['error'],['error']
Availability,"// helper function to set errors to -1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:26,error,errors,26,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['error'],['errors']
Availability,"// helper to report errors in a consistent format (derefs msg)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:20,error,errors,20,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,1,['error'],['errors']
Availability,"// here need to get some static extra information (like max iterations, error def, etc...); // parameter settings and transfer the parameters values, names and limits from the functions; // is done automatically in the Fitter.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:72,error,error,72,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['error']
Availability,"// here some bin contents are written into variables to make the error; // calculation a little more legible:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:65,error,error,65,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// here we loop over the columns of the error matrix; // j: counts histogram bins; // index: counts sparse matrix index; // the algorithm makes use of the fact that fHistToX is ordered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:40,error,error,40,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['error']
Availability,"// histogram has more dimensions than the binning scheme; // and the binning scheme has one axis only; //; // special case: error histogram is 2-d; // create nor error if ndim==1 && hist->GetDimension()==2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx:124,error,error,124,hist/unfold/src/TUnfoldBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx,2,['error'],['error']
Availability,"// hspace = z ? atoi(z) : DFLT_HSPACE;; // Figure out the maximum space available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlTable.cxx:72,avail,available,72,gui/guihtml/src/TGHtmlTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlTable.cxx,1,['avail'],['available']
Availability,"// http://gcc.gnu.org/onlinedocs/gcc/Type-Traits.html:; // If type is const qualified or is a reference type then the; // trait is false. Otherwise if __is_pod (type) is true then the; // trait is true, else if type is a cv class or union type with; // a trivial copy assignment ([class.copy]) then the trait is; // true, else it is false.; // Note: the const and reference restrictions are interesting,; // given that const and reference members don't prevent a class; // from having a trivial copy assignment operator (but do cause; // errors if the copy assignment operator is actually used, q.v.; // [class.copy]p12).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:538,error,errors,538,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['error'],['errors']
Availability,"// i'm assuming this happens iff there was some error.; // (misspelled the class name, for example)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:48,error,error,48,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['error'],['error']
Availability,// i8->i16 doesn't exist in the autogenerated isel table. Need to sign; // extend to 32-bits and then extract down to 16-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:110,down,down,110,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['down'],['down']
Availability,// i8->i16 doesn't exist in the autogenerated isel table. Need to zero; // extend to 32-bits and then extract down to 16-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:110,down,down,110,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['down'],['down']
Availability,"// icmp eq (call llvm.s390.tdc(...)), 0 -> TDC with inverted mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp:61,mask,mask,61,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,1,['mask'],['mask']
Availability,"// icmp eq/ne (X * C), (Y * C) --> icmp (X & Mask), (Y & Mask); // Mask = -1 >> count-trailing-zeros(C).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:45,Mask,Mask,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,3,['Mask'],['Mask']
Availability,"// if ( *w < 0) {; // ::Error(""TMVA::Tools::Mean"",""w[%d] = %.4e < 0 ?!"",i,*w);; // return 0;; // } // SURE, why wouldn't you allow for negative event weights here ?? :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:24,Error,Error,24,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,2,['Error'],['Error']
Availability,"// if (!def) {; // Error(""GetParticle"",""No match for %s exists!"",name);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TDatabasePDG.cxx:19,Error,Error,19,montecarlo/eg/src/TDatabasePDG.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TDatabasePDG.cxx,1,['Error'],['Error']
Availability,"// if (!fDataType); // Error(""TDataMember"", ""basic data type %s not found in list of basic types"",; // GetTypeName());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx:23,Error,Error,23,core/meta/src/TDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx,1,['Error'],['Error']
Availability,"// if (!fSplitterPic); // Error(""TGVFileSplitter"", ""filesplitterv.xpm not found"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSplitter.cxx:26,Error,Error,26,gui/gui/src/TGSplitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSplitter.cxx,1,['Error'],['Error']
Availability,"// if (!leaf->InheritsFrom(TLeafObject::Class()) ) {; // If the leaf that we found so far is not a TLeafObject then there is; // nothing we would be able to do.; // Error(""DefinedVariable"",""Need a TLeafObject to call a function!"");; // return -1;; //}; // We need to recover the info not used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:165,Error,Error,165,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,2,"['Error', 'recover']","['Error', 'recover']"
Availability,"// if (!nastyprint) {; // printf(""Found nasty Hbook case!! You had an Hbook error message\n"");; // printf("" when creating the file (too many records)\n"");; // printf("" Hbook file should have been created with a bigger LRECL\n"");; // printf("" ROOT will try to recover\n"");; // nastyprint = 1;; // }; // nastycase = 1;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/h2root.cxx:76,error,error,76,main/src/h2root.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/h2root.cxx,2,"['error', 'recover']","['error', 'recover']"
Availability,"// if (!orig) {; // throw string(Form(""RooCustomizer::CustIFace::create() ERROR: $Replace() input RooAbsArg %s does not exist"",buf)) ;; // }; // if (!subst) {; // throw string(Form(""RooCustomizer::CustIFace::create() ERROR: $Replace() replacement RooAbsArg %s does not exist"",sep+1)) ;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:74,ERROR,ERROR,74,roofit/roofitcore/src/RooCustomizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx,2,['ERROR'],['ERROR']
Availability,"// if (!pp[ndx]) {; // -- We do not have a pointer to a varying-length array.; // Error(""ReadBuffer"", ""The pointer to element %s::%s type %d (%s) is null\n"", thisVar->GetName(),; // aElement->GetFullName(), compinfo[i]->fType, aElement->GetTypeName());; // continue;; //}; // Delete any memory at pp[ndx].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx:82,Error,Error,82,io/io/src/TStreamerInfoActions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx,2,['Error'],['Error']
Availability,"// if (a+1 >= argc) {; // std::cerr << ""Error: no verbosity level was provided after -v.\n"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/hadd.cxx:40,Error,Error,40,main/src/hadd.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/hadd.cxx,1,['Error'],['Error']
Availability,"// if (aElement) {; // TMemberStreamer *pstreamer = aElement->GetStreamer();; // if (pstreamer == 0) {; // //printf(""ERROR, Streamer is null\n"");; // //aElement->ls();; // break;; // }; // //(*pstreamer)(b,ladd,0);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:117,ERROR,ERROR,117,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,1,['ERROR'],['ERROR']
Availability,// if (d.check('E')) res.Errors = 1; // E option only defined for TGraphPolar,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:25,Error,Errors,25,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Error'],['Errors']
Availability,"// if C is zero, then both A and B qualify as mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:46,mask,mask,46,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['mask'],['mask']
Availability,"// if a file was not specified, try to load the class via the interpreter;; // this returns 0 (== failure) in the case the class is already in memory; // but does not have a dictionary, so we just raise a flag for better; // diagnostic in the case the class is not found in the CINT ClassInfo table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TSelector.cxx:98,failure,failure,98,tree/tree/src/TSelector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TSelector.cxx,1,['failure'],['failure']
Availability,"// if a temporary register is not available for at least one of the; // instructions for which we need to transfer taint to the stack pointer, we; // need to insert a full speculation barrier.; // TmpRegisterNotAvailableEverywhere tracks that condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp:34,avail,available,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,1,['avail'],['available']
Availability,"// if address is available, and it wasn't set by this converter, assume a byte-wise copy;; // otherwise assume a pointer copy (this relies on the converter to be used for properties,; // or for argument passing, but not both at the same time; this is currently the case)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:17,avail,available,17,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['avail'],['available']
Availability,"// if all errors are zero set option of using errors to 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:10,error,errors,10,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,6,['error'],['errors']
Availability,"// if an error happens, it usually means the decl has already been; // imported or the decl is a result of a failed import. But in our; // case, every import is fresh each time code completion is; // triggered. So Import usually doesn't fail. If it does, it just means; // the related decl can't be used in code completion and we can safely; // drop it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp:9,error,error,9,interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp,1,['error'],['error']
Availability,"// if angleBraceLevel = true, we have < outside quotes - this is error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:65,error,error,65,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['error'],['error']
Availability,"// if any histogram appears with pre-calculated errors, use E for all histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:48,error,errors,48,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// if cnt1 is zero and cnt2 = 1 and sum1 = sum2 var1 = 0 && var2 == 0; // approximate by incrementing cnt1; // LM (this need to be fixed for numerical errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:151,error,errors,151,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// if conversion failed, don't report another error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:46,error,error,46,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,5,['error'],['error']
Availability,"// if description available, update server infos frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:18,avail,available,18,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['avail'],['available']
Availability,"// if distance covered is greater than particle's decay length,; // apply pair production and check if particle is dead. If not,; // increment total alive particles by the two created children,; // then set the particle status as dead",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:149,alive,alive,149,test/RootShower/MyEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx,1,['alive'],['alive']
Availability,"// if divided, copy division object; // if (fFinder) {; // Error(""MakeCopyVolume"", ""volume %s divided"", GetName());; // vol->SetFinder(fFinder);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:59,Error,Error,59,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['Error'],['Error']
Availability,"// if epochs are counted create monitoring histograms (only available for classification)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:60,avail,available,60,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['avail'],['available']
Availability,"// if error def has been changed update it in FunctionMinimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:6,error,error,6,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['error'],['error']
Availability,"// if error is zero use as step approx 10% of current value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx:6,error,error,6,gui/fitpanel/src/TFitParametersDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx,1,['error'],['error']
Availability,"// if errormarker = 0 or symbolsize = 0. no symbol is drawn",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:6,error,errormarker,6,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['errormarker']
Availability,"// if event is cut out, add to warnings, else add to errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:53,error,errors,53,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['error'],['errors']
Availability,"// if extended, use an extended binding as the coef; // otherwise e.g. if adding a RooRealSumPdf the stacked histograms will be above the; // actual pdf histogram because the pdf histogram is just normalized down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:208,down,down,208,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['down'],['down']
Availability,"// if false means error is not valid and this is due to a failure in Hesse; // update minimizer error status",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:18,error,error,18,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,3,"['error', 'failure']","['error', 'failure']"
Availability,"// if files are not available or have wrong permissions or are; // not accessible, give up",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:20,avail,available,20,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['avail'],['available']
Availability,"// if intrinsic data are not available, fallback to width/height",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:29,avail,available,29,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// if m0 were constant (i.e. setConstant(true)), the fit would converge without errors, because m0 outside of the; // physical area of the Argus distribution is what causes the errors in the line search phase of the fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:80,error,errors,80,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,2,['error'],['errors']
Availability,// if markers or errors drawn - no need handle events for line drawing; // this improves interactivity like zooming around graph points,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:17,error,errors,17,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// if no CPU node available sleep for a while to save CPU usage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:18,avail,available,18,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['avail'],['available']
Availability,"// if no default ctor return immediately (error issued by New())",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:42,error,error,42,core/base/src/TDirectory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx,2,['error'],['error']
Availability,"// if no errors, copy local parameters to formula objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:9,error,errors,9,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['error'],['errors']
Availability,"// if no name was read, report error (i.e. <class =""x"">)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:31,error,error,31,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['error'],['error']
Availability,"// if not at end of particle's life time, check if distance; // covered is greater than particle's decay length, apply; // defined decay type and check if particle is dead. If not,; // increment total alive particles by the two created children,; // then set the particle status as dead",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:201,alive,alive,201,test/RootShower/MyEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx,1,['alive'],['alive']
Availability,"// if not available/specialized, don't try again",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:10,avail,available,10,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['avail'],['available']
Availability,"// if option E projected histogram errors are same as profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:35,error,errors,35,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,3,['error'],['errors']
Availability,"// if parent has expand mask, allow to expand item",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:24,mask,mask,24,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,1,['mask'],['mask']
Availability,"// if requested parabolic error do correct error analysis by the minimizer (call HESSE)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:26,error,error,26,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['error']
Availability,"// if size is still 0, then creation failed.; // if fVecWeight == 0, then there are no entries (indicates the same; // error as fVector.empty() because that only happens when; // fNumBurnInSteps >= fChain->Size()); // either way, reset and return",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:119,error,error,119,roofit/roostats/src/MCMCInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx,1,['error'],['error']
Availability,"// if the BFC instruction is available, use that to zero the lower; // bits:; // bfc Reg, #0, log2(Alignment); // otherwise use BIC, if the mask to zero the required number of bits; // can be encoded in the bic immediate field; // bic Reg, Reg, Alignment-1; // otherwise, emit; // lsr Reg, Reg, log2(Alignment); // lsl Reg, Reg, log2(Alignment)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:29,avail,available,29,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,2,"['avail', 'mask']","['available', 'mask']"
Availability,"// if the key we found is not a map, it's an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:45,error,error,45,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,1,['error'],['error']
Availability,"// if the linkdef was not last, issue an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:41,error,error,41,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['error'],['error']
Availability,// if the mask doesn't intersect any Indeterminant bits,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['mask'],['mask']
Availability,"// if the number of degrees of freedom is too small, create an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:63,error,error,63,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,2,['error'],['error']
Availability,"// if the value is masked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:19,mask,masked,19,tmva/tmva/src/VariableTransformBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx,1,['mask'],['masked']
Availability,"// if there's an error, it was already set by lookup_dimension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:17,error,error,17,bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,1,['error'],['error']
Availability,"// if varexp is empty, take all available leaves as a column",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeTableInterface.cxx:32,avail,available,32,tree/treeplayer/src/TTreeTableInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeTableInterface.cxx,1,['avail'],['available']
Availability,// if vector input detect NaNs and fill mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp:40,mask,mask,40,interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp,1,['mask'],['mask']
Availability,"// if we are here it means we are jitting, if we are jitting the loop manager must be alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:86,alive,alive,86,tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx,1,['alive'],['alive']
Availability,"// if we have a <field>, <method> or <properties> tag outside a parent <clas>s tag,; //this is an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:98,error,error,98,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,3,['error'],['error']
Availability,"// if yes, great, if not then restore original slot mask; // restore original values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:52,mask,mask,52,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,1,['mask'],['mask']
Availability,"// if(__kmpc_masked(ident_t *, gtid, filter)) {; // MaskedOpGen();; // __kmpc_end_masked(iden_t *, gtid);; // }; // Prepare arguments and build a call to __kmpc_masked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:52,Mask,MaskedOpGen,52,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['Mask'],['MaskedOpGen']
Availability,"// if(auto _minuit2 = dynamic_cast<ROOT::Minuit2::Minuit2Minimizer*>(_minimizer.fitter()->GetMinimizer());; // _minuit2 && _minuit2->fMinimum) {; // dCovar = _minuit2->fMinimum->Error().Dcovar();; // }; // only do hesse if was a valid min and not full accurate cov matrix already (can happen if e.g. ran strat2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:178,Error,Error,178,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['Error'],['Error']
Availability,"// if(this.atts.total > 0){; // 	let group = [];; // 	for(let i = 0; i < this.selectedObjects.length; ++i){; // 		let p = this.atts[""index""].indexOf(i);; // 		if(p !== -1){; // 			this.draw(renderer, writeBuffer, readBuffer, maskActive, this.selectedObjects[i], p);; // 		} else {; // 			group.push(this.selectedObjects[i]);; // 		}; // 	}; // 	if(group.length > 0){; // 	}; // } else {; // 	this.draw(renderer, writeBuffer, readBuffer, maskActive, this.selectedObjects, -1);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js:225,mask,maskActive,225,ui5/eve7/lib/OutlinePassEve.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js,2,['mask'],['maskActive']
Availability,"// ignore all other poll errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:25,error,errors,25,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['error'],['errors']
Availability,"// ignore errors from Improve",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:10,error,errors,10,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx,2,['error'],['errors']
Availability,"// ignore errors in Hesse or in Improve and also when matrix was made pos def (status returned = 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:10,error,errors,10,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['error'],['errors']
Availability,// ignore the error since some stylesheets may not be accessible; // due to CORS policies,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:14,error,error,14,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// ignorer all point errors when fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:21,error,errors,21,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// imod == '01' --> UNPREDICTABLE; // NOTE: Even though this is technically UNPREDICTABLE, we choose to; // return failure here. The '01' imod value is unprintable, so there's; // nothing useful we could do even if we returned UNPREDICTABLE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp:115,failure,failure,115,interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,2,['failure'],['failure']
Availability,// in C++ it is not error to take address of a register; // variable (c++03 7.1.1P3),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:20,error,error,20,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['error'],['error']
Availability,// in case content y is an integer (so each my has an error +/- 1/sqrt(12); // when the std(y) is zero,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:54,error,error,54,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// in case content y is an integer (so each my has an error +/- 1/sqrt(12); // when the std(y) is zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:54,error,error,54,hist/hist/src/TProfileHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h,1,['error'],['error']
Availability,"// in case errors are not present do not set them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:11,error,errors,11,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['error'],['errors']
Availability,"// in case of bin entries and profile is weighted, we need to set also the bin error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:79,error,error,79,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,3,['error'],['error']
Availability,"// in case of drawing with error options - scale correctly the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:27,error,error,27,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['error'],['error']
Availability,"// in case of error calculation (i.e. when Sumw2() is set); // use the effective entries for the entries; // since this is the only way to estimate them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:14,error,error,14,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['error'],['error']
Availability,"// in case of error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:14,error,error,14,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['error'],['error']
Availability,"// in case of failure or implausible value, use a safe default: 4k; // page size, and do not try to mmap",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:14,failure,failure,14,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['failure'],['failure']
Availability,"// in case of gradient function one needs to downcast the pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:45,down,downcast,45,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['down'],['downcast']
Availability,"// in case of no error in y invError=1 is returned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:17,error,error,17,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,1,['error'],['error']
Availability,"// in case of option W bin error is deduced from bin sum of z**2 values of profile; // this is correct only if the profile is filled with weights =1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:27,error,error,27,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['error'],['error']
Availability,"// in case of option W bin error is deduced from bin sum of z**2 values of profile; // this is correct only if the profile is unweighted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:27,error,error,27,hist/hist/src/TProfile2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx,2,['error'],['error']
Availability,"// in case of requested a weighted Pearson fit (option ""PW"") a weight factor needs to be applied; // the bin inverse weight is estimated from bin error and bin content",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:146,error,error,146,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['error'],['error']
Availability,"// in case of wrapped data the pointer stores the error and; // not the inverse",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h:50,error,error,50,math/mathcore/inc/Fit/BinData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h,1,['error'],['error']
Availability,"// in case when server does not support segments, let chance to recover",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:64,recover,recover,64,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['recover'],['recover']
Availability,"// in details mode just move one line down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx:38,down,down,38,gui/gui/src/TGListView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx,1,['down'],['down']
Availability,"// in the case of the functions like y-> -1*y the roles of the; // upper and lower error bars is reversed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:83,error,error,83,hist/hist/src/TGraphAsymmErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx,2,['error'],['error']
Availability,"// in this case we store the y error and not the inverse",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:31,error,error,31,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,1,['error'],['error']
Availability,// in vector case mask out NaN elements,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp:18,mask,mask,18,interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp,1,['mask'],['mask']
Availability,// increase tolerance because the numeric integration algos are still different; /*randomizeParameters=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:12,toler,tolerance,12,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['toler'],['tolerance']
Availability,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:12,toler,tolerance,12,math/mathmore/test/testSpecFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx,1,['toler'],['tolerance']
Availability,// increase/decrease xm and ym a little to produce a point; // just outside the triangle (ensuring that the amount added will; // be large enough such that it won't be lost in rounding errors),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:185,error,errors,185,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// increase/decrease xm and ym a little to produce a point; // just outside the triangle (ensuring that the amount added will; // be large enough such that it won't be lost in rounding errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:185,error,errors,185,hist/hist/src/TGraphDelaunay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx,1,['error'],['errors']
Availability,"// increment by one upon failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:25,failure,failure,25,test/stressEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx,1,['failure'],['failure']
Availability,"// increment down the edges",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:13,down,down,13,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['down'],['down']
Availability,"// indicate error if many same keys appears",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:12,error,error,12,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,2,['error'],['error']
Availability,"// indicate that implicit converters are available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h:41,avail,available,41,bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h,1,['avail'],['available']
Availability,"// indices_type can be an initialized tensor, no need to emit an error if it is not registered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseGather.cxx:65,error,error,65,tmva/sofie_parsers/src/ParseGather.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseGather.cxx,1,['error'],['error']
Availability,"// infer errors on all floating non-poi parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,error,errors,9,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,"// info is specified, nothing to do, except that we should verify; // that it contains a valid descriptor.; /*; TDataMember *dm;; Int_t nch = info ? strlen(info) : 0;; Bool_t update = kTRUE;; if (nch != 0) {; //decode strings like ""TObject;TAttLine;fA;fB;Int_t i,j,k;""; char *save, *temp, *blank, *colon, *comma;; save = new char[10000];; temp = save;; strlcpy(temp,info,10000);; //remove heading and trailing blanks; while (*temp == ' ') temp++;; while (save[nch-1] == ' ') {nch--; save[nch] = 0;}; if (nch == 0) {delete [] save; return;}; if (save[nch-1] != ';') {save[nch] = ';'; save[nch+1] = 0;}; //remove blanks around , or ;; while ((blank = strstr(temp,""; ""))) strcpy(blank+1,blank+2);; while ((blank = strstr(temp,"" ;""))) strcpy(blank, blank+1);; while ((blank = strstr(temp,"", ""))) strcpy(blank+1,blank+2);; while ((blank = strstr(temp,"" ,""))) strcpy(blank, blank+1);; while ((blank = strstr(temp,"" ""))) strcpy(blank, blank+1);; //loop on tokens separated by ;; char *final = new char[1000];; char token[100];; while ((colon=strchr(temp,';'))) {; *colon = 0;; strlcpy(token,temp,100);; blank = strchr(token,' ');; if (blank) {; *blank = 0;; if (!gROOT->GetType(token)) {; Error(""SetStreamerInfo"",""Illegal type: %s in %s"",token,info);; return;; }; while (blank) {; strlcat(final,token,1000);; strlcat(final,"" "",1000);; comma = strchr(blank+1,','); if (comma) *comma=0;; strlcat(final,blank+1,1000);; strlcat(final,"";"",1000);; blank = comma;; }. } else {; if (TClass::GetClass(token,update)) {; //a class name; strlcat(final,token,1000); strlcat(final,"";"",1000);; } else {; //a data member name; dm = (TDataMember*)GetListOfDataMembers()->FindObject(token);; if (dm) {; strlcat(final,dm->GetFullTypeName(),1000);; strlcat(final,"" "",1000);; strlcat(final,token,1000); strlcat(final,"";"",1000);; } else {; Error(""SetStreamerInfo"",""Illegal name: %s in %s"",token,info);; return;; }; }; update = kFALSE;; }; temp = colon+1;; if (*temp == 0) break;; }; //// fStreamerInfo = final;; delete [] final;; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:1182,Error,Error,1182,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['Error'],['Error']
Availability,"// information on error state can be retrieved only if fMinimum is available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:18,error,error,18,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,"['avail', 'error']","['available', 'error']"
Availability,"// init error or rootcling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:8,error,error,8,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,7,['error'],['error']
Availability,"// initialize the error field of the synapse to 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:18,error,error,18,tmva/tmva/inc/TMVA/TSynapse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h,1,['error'],['error']
Availability,"// insertelt DestVec, (fneg (extractelt SrcVec, Index)), Index -->; // shuffle DestVec, (fneg SrcVec), Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:103,Mask,Mask,103,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,1,['Mask'],['Mask']
Availability,"// install custom X11 error handler to avoid application exit in case of X11 failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler_linux.cxx:22,error,error,22,gui/cefdisplay/src/gui_handler_linux.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler_linux.cxx,2,"['error', 'failure']","['error', 'failure']"
Availability,// instructions are available on sm_90 only,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:20,avail,available,20,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['avail'],['available']
Availability,// int a = 0;; // constinit extern int a; // error (missing 'constinit'),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:45,error,error,45,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"// int_arm_mve_vstr_scatter_base(_predicated) addr, offset, data(, mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:67,mask,mask,67,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,1,['mask'],['mask']
Availability,"// intercept down key",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:13,down,down,13,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['down'],['down']
Availability,"// interested only in relative tolerance; //fIntegratorOneDim->SetAbsTolerance(1.E-300);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:31,toler,tolerance,31,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['toler'],['tolerance']
Availability,"// internal function to compute Minos errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:38,error,errors,38,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h,1,['error'],['errors']
Availability,"// interpolate on horizontal edge between tr2 and tr3 (line P2-P4); //This was giving an error; // result should be linear interp between P4(x=750,z=250) and P2(x=1000,z=500)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:89,error,error,89,math/mathcore/test/testDelaunay2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx,1,['error'],['error']
Availability,// intersect two Status values to produce a mode and mask that is a subset; // of both values,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegister.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegister.cpp,1,['mask'],['mask']
Availability,// invert mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h:10,mask,mask,10,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,2,['mask'],['mask']
Availability,"// invert remapped error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:19,error,error,19,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['error']
Availability,"// inverter for Cholesky; // works only for symmetric matrices and will produce a; // compilation error otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/Dinv.h:98,error,error,98,math/smatrix/inc/Math/Dinv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/Dinv.h,1,['error'],['error']
Availability,"// iprintf and friends are only available on XCore, TCE, and Emscripten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:32,avail,available,32,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,// irrecoverable error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:17,error,error,17,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['error'],['error']
Availability,"// is.fpclass (fneg x), mask -> is.fpclass x, (fneg mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:24,mask,mask,24,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,2,['mask'],['mask']
Availability,"// isRedundantFlagInstr - check whether the first instruction, whose only; // purpose is to update flags, can be made redundant.; // * SFSUB_F_RR can be made redundant by SUB_RI if the operands are the same.; // * SFSUB_F_RI can be made redundant by SUB_I if the operands are the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiInstrInfo.cpp:118,redundant,redundant,118,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiInstrInfo.cpp,3,['redundant'],['redundant']
Availability,"// ishld, oshld, nshld and ld are only available from ARMv8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:39,avail,available,39,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['avail'],['available']
Availability,"// it does not make sense in case of asymptotic which do not have point errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:72,error,errors,72,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['error'],['errors']
Availability,"// it is normal for this function to receive names of directories that do not exist.; // they should be ignored and should not generate any error messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:140,error,error,140,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['error'],['error']
Availability,"// it is not an error - sometime TableTree does not have displayed items; // console.error('Fail to extract node id for path ' + path.substr(0,lastpos) + ' full path ' + ctxt.getPath());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomHierarchy.controller.js:16,error,error,16,ui5/geom/controller/GeomHierarchy.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomHierarchy.controller.js,2,['error'],['error']
Availability,"// it probably would be better to get this information from syscalls; // this is possibly less error prone",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx:95,error,error,95,core/unix/src/TUnixSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx,1,['error'],['error']
Availability,"// iterate to find ROOTS return GSL_CONTINUE if iteration was successful or another error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinder.h:84,error,error,84,math/mathmore/inc/Math/GSLRootFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinder.h,1,['error'],['error']
Availability,// kMaxEntries available since ROOT 6.05/03,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,avail,available,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// kbelasco: Note - the accuracy is only increased here if the binning for; // each RooRealVar is uniform; // kbelasco: look into why saving the binnings and replacing them doesn't; // work (replaces with 1 bin always).; // Note: this code modifies the binning for the parameters (if they are; // uniform) and sets them back to what they were. If the binnings are not; // uniform, this code does nothing.; // first scan through fAxes to make sure all binnings are uniform, or else; // we can't change the number of bins because there seems to be an error; // when setting the binning itself rather than just the number of bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:549,error,error,549,roofit/roostats/src/MCMCInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx,1,['error'],['error']
Availability,"// kbelasco: check here for memory management errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:46,error,errors,46,roofit/roostats/src/MCMCInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx,1,['error'],['errors']
Availability,"// kbelasco: if fFull hasn't been set (because Keys creation failed because; // fNumBurnInSteps >= fChain->Size()) then this will return infinity, which; // seems ok to me since it will indicate error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:195,error,error,195,roofit/roostats/src/MCMCInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx,1,['error'],['error']
Availability,"// kbelasco: update this or just take it out; // kbelasco: consider keeping this around but changing the implementation; // to set the number of bins for each RooRealVar and then recreating the; // histograms; //void MCMCInterval::SetNumBins(Int_t numBins); //{; // if (numBins > 0) {; // fPreferredNumBins = numBins;; // for (Int_t d = 0; d < fDimension; d++); // fNumBins[d] = numBins;; // }; // else {; // coutE(Eval) << ""* Error in MCMCInterval::SetNumBins: "" <<; // ""Negative number of bins given: "" << numBins << endl;; // return;; // }; //; // // If the histogram already exists, recreate it with the new bin numbers; // if (fHist != nullptr); // CreateHist();; //}; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:427,Error,Error,427,roofit/roostats/src/MCMCInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx,1,['Error'],['Error']
Availability,"// keep alive as may own glob",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,alive,alive,8,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,3,['alive'],['alive']
Availability,"// keep alive because may own the globs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:8,alive,alive,8,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['alive'],['alive']
Availability,"// keep file alive - seems necessary to save workspace again in some cases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,alive,alive,13,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// keep it alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,alive,alive,11,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// keep socket alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:15,alive,alive,15,core/base/inc/TSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h,1,['alive'],['alive']
Availability,"// keep truncation error small",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:19,error,error,19,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['error'],['error']
Availability,"// key mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:7,mask,mask,7,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,4,['mask'],['mask']
Availability,"// key or button mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:17,mask,mask,17,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,5,['mask'],['mask']
Availability,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:21,toler,tolerance,21,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['toler'],['tolerance']
Availability,"// last ditch attempt, works for things like int values; since this is a; // source of errors otherwise, it is limited to specific types and not; // generally used (str(obj) can print anything ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:87,error,errors,87,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['error'],['errors']
Availability,"// ldexp(ldexp(x, a), b) -> ldexp(x, a + b); //; // The danger is if the first ldexp would overflow to infinity or underflow; // to zero, but the combined exponent avoids it. We ignore this with; // reassoc.; //; // It's also safe to fold if we know both exponents are >= 0 or <= 0 since; // it would just double down on the overflow/underflow which would occur; // anyway.; //; // TODO: Could do better if we had range tracking for the input value; // exponent. Also could broaden sign check to cover == 0 case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:313,down,down,313,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['down'],['down']
Availability,"// leaves prior conversion error for report",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:27,error,error,27,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['error'],['error']
Availability,"// left edge error increments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:13,error,error,13,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['error'],['error']
Availability,"// let other end know that we're done with the list of errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx:55,error,errors,55,roofit/roofitcore/src/RooRealMPFE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx,1,['error'],['errors']
Availability,// lib.exe doesn't print an error if no .lib files are passed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ToolDrivers/llvm-lib/LibDriver.cpp:28,error,error,28,interpreter/llvm-project/llvm/lib/ToolDrivers/llvm-lib/LibDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ToolDrivers/llvm-lib/LibDriver.cpp,1,['error'],['error']
Availability,"// libCling symbols are intentionally hidden from the process, and libCling must not be; // dlopened. Instead, symbols must be resolved by specifically querying the dynlib handle of; // libCling, which by definition is loaded - else we could not call this code. The handle; // is made available as argument to `CreateInterpreter`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:285,avail,available,285,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,1,['avail'],['available']
Availability,"// libstdc++4.6 marks the vector default constructor as explicit in; // _GLIBCXX_DEBUG mode, so recover using the C++03 logic in that case.; // stlport does so too. Look for std::__debug for libstdc++, and for; // std:: for stlport. This is effectively a compiler-side implementation of; // LWG2193.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:96,recover,recover,96,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['recover'],['recover']
Availability,"// likelihood fit; // perform a weighted likelihood fit by applying weight correction to errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:89,error,errors,89,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// limit in the percentage of failure!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:30,failure,failure,30,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['failure'],['failure']
Availability,"// limit nbits to less than 30 to avoid error converting from double to uint and also cannot deal with too many combinations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:40,error,error,40,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['error'],['error']
Availability,"// line search tolerance (use fixed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:15,toler,tolerance,15,math/mathmore/src/GSLMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// linear fit cannot be done also in case of asymmetric errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:56,error,errors,56,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// linear regression to estimate slope of error rate evolution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:42,error,error,42,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// lines count - for error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/LinkdefReader.h:21,error,error,21,core/dictgen/res/LinkdefReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/LinkdefReader.h,1,['error'],['error']
Availability,"// list of error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TStatus.h:11,error,error,11,proof/proofplayer/inc/TStatus.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TStatus.h,1,['error'],['error']
Availability,"// llvm and clang cannot be used directly to output native binaries for; // target, but is used to compile C code to llvm bitcode with correct; // type and alignment information.; //; // TCE uses the llvm bitcode as input and uses it for generating customized; // target processor and program binary. TCE co-design environment is; // publicly available in http://tce.cs.tut.fi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/TCE.h:343,avail,available,343,interpreter/llvm-project/clang/lib/Basic/Targets/TCE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/TCE.h,1,['avail'],['available']
Availability,"// llvm.amdgcn.class(undef, mask) -> mask != 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp:28,mask,mask,28,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,2,['mask'],['mask']
Availability,"// llvm.masked.compressstore.*(Src0, Ptr, Mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,mask,masked,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,"['Mask', 'mask']","['Mask', 'masked']"
Availability,"// llvm.masked.scatter.*(Src0, Ptrs, alignment, Mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,mask,masked,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,"['Mask', 'mask']","['Mask', 'masked']"
Availability,"// llvm.masked.store.*(Src0, Ptr, alignment, Mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,mask,masked,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,"['Mask', 'mask']","['Mask', 'masked']"
Availability,"// llvm.ptx.memcpy.const and llvm.ptx.memmove.const need to be modeled as; // TgtMemIntrinsic; // because we need the information that is only available in the ""Value"" type; // of destination; // pointer. In particular, the address space information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:143,avail,available,143,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['avail'],['available']
Availability,// llvm::Error values must be consumed before being destroyed.; // Wrapping an error in fmt_consume explicitly indicates that the formatv_object; // should take ownership and consume it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h:9,Error,Error,9,interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h,2,"['Error', 'error']","['Error', 'error']"
Availability,"// lnk is still alive as we have either fLast; // or the 'new' fFirst->fPrev pointing to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:16,alive,alive,16,core/cont/src/TList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx,2,['alive'],['alive']
Availability,"// loading val into error already, so move it over",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:20,error,error,20,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,// log the error and returns an empty vector;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:11,error,error,11,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,1,['error'],['error']
Availability,"// logl fit (error should be 0.5) set if different than default values (of 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:13,error,error,13,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['error']
Availability,"// look at 1st output neuron to determine type and error function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:51,error,error,51,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['error'],['error']
Availability,"// look for a special case of pointer to a class type (which is a builtin, but it; // is more useful to treat it polymorphically by allowing auto-downcasts)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:146,down,downcasts,146,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['down'],['downcasts']
Availability,"// lookup on existing name in case this was an overload, not a caching, failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:72,failure,failure,72,bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx,1,['failure'],['failure']
Availability,// lookup system register using 12-bit SYSm value.; // Note: the search is uniqued using M1 mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp:92,mask,mask,92,interpreter/llvm-project/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp,2,['mask'],['mask']
Availability,"// loop on the parameter and calculate the errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:43,error,errors,43,hist/hist/src/TF1Helper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx,1,['error'],['errors']
Availability,"// loop over the declared options and check for their availability",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:54,avail,availability,54,tmva/tmva/src/Configurable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx,1,['avail'],['availability']
Availability,"// loop segments from iz-1 down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoXtru.cxx:27,down,down,27,geom/geom/src/TGeoXtru.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoXtru.cxx,1,['down'],['down']
Availability,"// loop1MBB:; // ll dest, 0(ptr); // and Mask', dest, Mask; // bne Mask', ShiftCmpVal, exitMBB",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:41,Mask,Mask,41,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,3,['Mask'],['Mask']
Availability,"// lrs and lrb are the LR's (no logs) = prob(s+b)/prob(b) for; // that choice of s and b within syst. errors in the ensemble. These are; // the MC experiment weights for relating the s+b and b PDF's of the unsmeared; // test statistic (in which cas one can use another test statistic if one likes).; // Now produce the output object.; // The final quantities are computed on-demand form the arrays tss, tsb, lrs and lrb.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:102,error,errors,102,hist/hist/src/TLimit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx,1,['error'],['errors']
Availability,"// main unfolding algorithm. Declared virtual, because other algorithms; // could be implemented; //; // Purpose: unfold y -> x; // Data members required:; // fA: matrix to relate x and y; // fY: measured data points; // fX0: bias on x; // fBiasScale: scale factor for fX0; // fVyy: covariance matrix for y; // fL: regularisation conditions; // fTauSquared: regularisation strength; // fConstraint: whether the constraint is applied; // Data members modified:; // fVyyInv: inverse of input data covariance matrix; // fNdf: number of degrees of freedom; // fEinv: inverse of the matrix needed for unfolding calculations; // fE: the matrix needed for unfolding calculations; // fX: unfolded data points; // fDXDY: derivative of x wrt y (for error propagation); // fVxx: error matrix (covariance matrix) on x; // fAx: estimate of distribution y from unfolded data; // fChi2A: contribution to chi**2 from y-Ax; // fChi2L: contribution to chi**2 from L*(x-x0); // fDXDtauSquared: derivative of x wrt tau; // fDXDAM[0,1]: matrix parts of derivative x wrt A; // fDXDAZ[0,1]: vector parts of derivative x wrt A; // fRhoMax: maximum global correlation coefficient; // fRhoAvg: average global correlation coefficient; // return code:; // fRhoMax if(fRhoMax>=1.0) then the unfolding has failed!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:739,error,error,739,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,2,['error'],['error']
Availability,"// maintaining the correct sum of weights square is not supported when dividing; // bin error resulting from division of profile needs to be checked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:88,error,error,88,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,4,['error'],['error']
Availability,// make CB unreachable and let downstream to delete the block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FlattenCFG.cpp:31,down,downstream,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/FlattenCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FlattenCFG.cpp,1,['down'],['downstream']
Availability,"// make CL values error of the graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:18,error,error,18,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// make a TGraph Errors with the sorted points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:17,Error,Errors,17,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['Error'],['Errors']
Availability,"// make diagonal error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:17,error,error,17,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,"// make error matrix positive defined returning a new corrected minimum error state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:8,error,error,8,math/minuit2/src/MnPosDef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx,2,['error'],['error']
Availability,"// make errors positive for this method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:8,error,errors,8,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['error'],['errors']
Availability,"// make path for binary classification (squared-error ramp, sect 6 in ref 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:48,error,error,48,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['error'],['error']
Availability,"// make sure the iterated over collection remains alive for the duration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:50,alive,alive,50,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['alive'],['alive']
Availability,// make sure the mask is still a mask (wrap arounds may not be),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['mask'],['mask']
Availability,"// make sure there are some events, if not, then the errors are set = 0; // automatically.; //if(bot < 1){} was changed to the next line from recommendation of Jason Seely (28 Nov 2005)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:53,error,errors,53,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// make the diagonals all the current error values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:38,error,error,38,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// make ymax at least 3x bigger than biggest error if has error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:45,error,error,45,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['error'],['error']
Availability,"// making our convolution much more accurate; // Numeric integration of this function suffers from roundoff errors, so the default 1.E-12 accuracy won't be reached.; // By reducing the tolerance, we get rid of a GSL warning, which was picked up by the log checkers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:108,error,errors,108,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,// margin to allow for rounding errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:32,error,errors,32,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// mark class as really not available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:28,avail,available,28,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['avail'],['available']
Availability,"// mark object as really not available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:29,avail,available,29,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['avail'],['available']
Availability,// mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:3,mask,mask,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['mask'],['mask']
Availability,"// mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,mask,mask,3,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['mask'],['mask']
Availability,"// mask = kGCFillStyle;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlDraw.cxx:3,mask,mask,3,gui/guihtml/src/TGHtmlDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlDraw.cxx,1,['mask'],['mask']
Availability,// mask bit index = index % element width,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3,mask,mask,3,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['mask'],['mask']
Availability,"// mask for file owner permissions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,mask,mask,3,core/base/inc/TSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h,1,['mask'],['mask']
Availability,"// mask for group permissions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,mask,mask,3,core/base/inc/TSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h,1,['mask'],['mask']
Availability,"// mask for permissions for others (not in group)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,mask,mask,3,core/base/inc/TSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h,1,['mask'],['mask']
Availability,"// mask linear test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,mask,mask,3,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['mask'],['mask']
Availability,"// mask of items to show",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/inc/ROOT/RHistStatBox.hxx:3,mask,mask,3,hist/histdrawv7/inc/ROOT/RHistStatBox.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/inc/ROOT/RHistStatBox.hxx,1,['mask'],['mask']
Availability,"// mask out length bits, we don't verify their correctness",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3,mask,mask,3,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,2,['mask'],['mask']
Availability,"// mask this; //commonAlgos.push_back( algoType( ""Minuit"", ""Seek"", ""X"", CompareResult(defCmpOpt,5,0.1)) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,mask,mask,3,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['mask'],['mask']
Availability,"// masked va >= x, any vd; //; // pseudoinstruction: vmsge{u}.vx vd, va, x, v0.t, vt; // expansion: vmslt{u}.vx vt, va, x; vmandn.mm vt, v0, vt;; // vmandn.mm vd, vd, v0; vmor.mm vd, vt, vd",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:3,mask,masked,3,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['mask'],['masked']
Availability,"// masked va >= x, vd != v0; //; // pseudoinstruction: vmsge{u}.vx vd, va, x, v0.t; // expansion: vmslt{u}.vx vd, va, x, v0.t; vmxor.mm vd, vd, v0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:3,mask,masked,3,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['mask'],['masked']
Availability,"// masked va >= x, vd == v0; //; // pseudoinstruction: vmsge{u}.vx vd, va, x, v0.t, vt; // expansion: vmslt{u}.vx vt, va, x; vmandn.mm vd, vd, vt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:3,mask,masked,3,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['mask'],['masked']
Availability,"// masked variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:3,mask,masked,3,tmva/tmva/src/VariableRearrangeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx,2,['mask'],['masked']
Availability,"// masking signature of lambda2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testTypeTraits.cxx:3,mask,masking,3,core/foundation/test/testTypeTraits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testTypeTraits.cxx,1,['mask'],['masking']
Availability,"// maximum number of errors for naming; // I. Methods processing the gGeoManager geometry object structure; // 1. Main methods to extract everything from ROOT gGeoManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/inc/TGDMLWrite.h:21,error,errors,21,geom/gdml/inc/TGDMLWrite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/inc/TGDMLWrite.h,1,['error'],['errors']
Availability,"// may own an obs so keep alive here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:26,alive,alive,26,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// may own globs so keep alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,alive,alive,25,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,// maybeDecompress below will error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp:30,error,error,30,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp,1,['error'],['error']
Availability,"// mean error = StdDev / sqrt( Neff )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8,error,error,8,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// means this base with not be available Python-side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:31,avail,available,31,bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,1,['avail'],['available']
Availability,"// med3 for f16 is only available on gfx9+, and not available for v2f16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegBankCombiner.cpp:24,avail,available,24,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegBankCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegBankCombiner.cpp,4,['avail'],['available']
Availability,"// med3 for i16 is only available on gfx9+, and not available for v2i16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegBankCombiner.cpp:24,avail,available,24,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegBankCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegBankCombiner.cpp,2,['avail'],['available']
Availability,"// mem.leak paid for robustness (with possibility ""undelete"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx:21,robust,robustness,21,gui/guibuilder/src/TGuiBldDragManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx,1,['robust'],['robustness']
Availability,"// memset_pattern{4,8,16} is only available on iOS 3.0 and Mac OS X 10.5 and; // later. All versions of watchOS support it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp:34,avail,available,34,interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetLibraryInfo.cpp,1,['avail'],['available']
Availability,// merge an unknown value by using the unknown value's mask to remove bits; // from the result,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegister.cpp:55,mask,mask,55,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegister.cpp,1,['mask'],['mask']
Availability,"// min error; // Double_t riskMin=0; // risk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:7,error,error,7,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// minimize and count eval errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:27,error,errors,27,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx,1,['error'],['errors']
Availability,"// minimize: use ExecuteCommand instead of Minimize to set tolerance and maxiter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:59,toler,tolerance,59,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// minos error calculation will update also FitResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:9,error,error,9,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['error'],['error']
Availability,"// minos errors are set separately when calling Fitter::CalculateMinosErrors(); // globalCC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:9,error,errors,9,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['errors']
Availability,"// minos errors are set separately when calling Fitter::CalculateMinosErrors(); // update global CC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:9,error,errors,9,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['error'],['errors']
Availability,"// misclassification error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx:21,error,error,21,tmva/tmva/src/RuleFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFit.cxx,1,['error'],['error']
Availability,"// monitors convergence of independent test sample; // monitoring histograms (not available for regression)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:82,avail,available,82,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['avail'],['available']
Availability,"// more elaborate search in case of failure (eg. for inner classes on demand)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:36,failure,failure,36,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['failure'],['failure']
Availability,"// move Error updator after Gradient since the Value is cached inside",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:8,Error,Error,8,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,1,['Error'],['Error']
Availability,"// move one line down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:17,down,down,17,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,2,['down'],['down']
Availability,"// move package down button",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:16,down,down,16,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['down'],['down']
Availability,// move the camera down the pointer ray; // this method avoids floating point error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:19,down,down,19,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['down', 'error']","['down', 'error']"
Availability,"// move three lines down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx:20,down,down,20,gui/gui/src/TGTextView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx,1,['down'],['down']
Availability,"// move to next clean segment if downwards",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPgon.cxx:33,down,downwards,33,geom/geom/src/TGeoPgon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPgon.cxx,1,['down'],['downwards']
Availability,"// ms_struct is a request to use the same ABI rules as MSVC. Check; // whether this class uses any C++ features that are implemented; // completely differently in MSVC, and if so, emit a diagnostic.; // That diagnostic defaults to an error, but we allow projects to; // map it down to a warning (or ignore it). It's a fairly common; // practice among users of the ms_struct pragma to mass-annotate; // headers, sweeping up a bunch of types that the project doesn't; // really rely on MSVC-compatible layout for. We must therefore; // support ""ms_struct except for C++ stuff"" as a secondary ABI.; // Don't emit this diagnostic if the feature was enabled as a; // language option (as opposed to via a pragma or attribute), as; // the option -mms-bitfields otherwise essentially makes it impossible; // to build C++ code, unless this diagnostic is turned off.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:234,error,error,234,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,"['down', 'error']","['down', 'error']"
Availability,"// msg().Error(""findSigma"",""%s at lower limit of %g .. error may be underestimated; // (t=%g)"",par->GetName(),par->getMin(),tmu);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:9,Error,Error,9,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,"// msg().Error(""findSigma"",""%s at upper limit of %g .. error may be underestimated; // (t=%g)"",par->GetName(),par->getMax(),tmu);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:9,Error,Error,9,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,"// must calculate error to calculate significance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,error,error,18,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// must keep alive in case is owning the globs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,alive,alive,13,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// mutable can only appear on non-static class members, so it's always; // an error here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:78,error,error,78,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['error'],['error']
Availability,"// namespace Internal; /** \class ROOT::Experimental::RFile; A ROOT file. A ROOT file is an object store: it can serialize any; object for which ROOT I/O is available (generally: an object which has a; dictionary), and it stores the object's data under a key name. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:157,avail,available,157,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['avail'],['available']
Availability,"// namespace Internal; // clang-format off; /**; \class ROOT::Experimental::RNTupleWriter; \ingroup NTuple; \brief An RNTuple that gets filled with entries (data) and writes them to storage. An output ntuple can be filled with entries. The caller has to make sure that the data that gets filled into an ntuple; is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and; writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be; triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx:607,error,errors,607,tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,1,['error'],['errors']
Availability,// namespace RISCVFeatures; // Encode VTYPE into the binary format used by the the VSETVLI instruction which; // is used by our MC layer representation.; //; // Bits | Name | Description; // -----+------------+------------------------------------------------; // 7 | vma | Vector mask agnostic; // 6 | vta | Vector tail agnostic; // 5:3 | vsew[2:0] | Standard element width (SEW) setting; // 2:0 | vlmul[2:0] | Vector register group multiplier (LMUL) setting,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp:280,mask,mask,280,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp,1,['mask'],['mask']
Availability,"// namespace ROOT; ////////////////////////////////////////////////////////////////////////////////; /// Set an errorhandler function. Returns the old handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx:112,error,errorhandler,112,core/foundation/src/TError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx,1,['error'],['errorhandler']
Availability,"// namespace T_WithRValue; // The following is hidden from the Cling interpreter, but available to the; // linker; it allows for testing whether a function return is picked up from; // the compiled instantation or from the interpreter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/templates.cxx:86,avail,available,86,bindings/pyroot/cppyy/cppyy/test/templates.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/templates.cxx,1,['avail'],['available']
Availability,// namespace __hip; // __HIP_OVERLOAD1 is used to resolve function calls with integer argument to; // avoid compilation error due to ambibuity. e.g. floor(5) is resolved with; // floor(double).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h:120,error,error,120,interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_cmath.h,1,['error'],['error']
Availability,"// namespace detail; /// Represents a literal operand in a bitcode record.; ///; /// The value of a literal operand is the same for all instances of the record,; /// so it is only emitted in the abbreviation definition.; ///; /// Note that because this uses a compile-time template, you cannot have a; /// literal operand that is fixed at run-time without dropping down to the; /// raw LLVM APIs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h:365,down,down,365,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h,1,['down'],['down']
Availability,"// namespace detail; /// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:108,error,error,108,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,1,['error'],['error']
Availability,// namespace ento; /// AnalysisConstraints - Set of available constraint models.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:52,avail,available,52,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['avail'],['available']
Availability,"// namespace hashing; // Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:122,avail,available,122,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['avail'],['available']
Availability,"// namespace llvm; /// Fully generic combining of x86 shuffle instructions.; ///; /// This should be the last combine run over the x86 shuffle instructions. Once; /// they have been fully optimized, this will recursively consider all chains; /// of single-use shuffle instructions, build a generic model of the cumulative; /// shuffle operation, and check for simpler instructions which implement this; /// operation. We use this primarily for two purposes:; ///; /// 1) Collapse generic shuffles to specialized single instructions when; /// equivalent. In most cases, this is just an encoding size win, but; /// sometimes we will collapse multiple generic shuffles into a single; /// special-purpose shuffle.; /// 2) Look for sequences of shuffle instructions with 3 or more total; /// instructions, and replace them with the slightly more expensive SSSE3; /// PSHUFB instruction if available. We do this as the last combining step; /// to ensure we avoid using PSHUFB if we can implement the shuffle with; /// a suitable short sequence of other instructions. The PSHUFB will either; /// use a register or have to read from memory and so is slightly (but only; /// slightly) more expensive than the other shuffle instructions.; ///; /// Because this is inherently a quadratic operation (for each shuffle in; /// a chain, we recurse up the chain), the depth is limited to 8 instructions.; /// This should never be an issue in practice as the shuffle lowering doesn't; /// produce sequences of more than 8 instructions.; ///; /// FIXME: We will currently miss some cases where the redundant shuffling; /// would simplify under the threshold for PSHUFB formation because of; /// combine-ordering. To fix this, we should do the redundant instruction; /// combining in this recursive walk.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:884,avail,available,884,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,"['avail', 'redundant']","['available', 'redundant']"
Availability,"// namespace tok; /// Annotates a diagnostic with some code that should be; /// inserted, removed, or replaced to fix the problem.; ///; /// This kind of hint should be used when we are certain that the; /// introduction, removal, or modification of a particular (small!); /// amount of code will correct a compilation error. The compiler; /// should also provide full recovery from such errors, such that; /// suppressing the diagnostic output can still result in successful; /// compilation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:319,error,error,319,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,3,"['error', 'recover']","['error', 'errors', 'recovery']"
Availability,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1045,error,error,1045,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['error'],['error']
Availability,// namespace; // Format of the ABI name:; // _ZGV<isa><mask><vlen><parameters>_<scalarname>[(<redirection>)],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp:55,mask,mask,55,interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,1,['mask'],['mask']
Availability,"// namespace; /// Does the analysis of the provided shuffle masks and performs the requested; /// actions on the vectors with the given shuffle masks. It tries to do it in; /// several steps.; /// 1. If the Base vector is not undef vector, resizing the very first mask to; /// have common VF and perform action for 2 input vectors (including non-undef; /// Base). Other shuffle masks are combined with the resulting after the 1 stage; /// and processed as a shuffle of 2 elements.; /// 2. If the Base is undef vector and have only 1 shuffle mask, perform the; /// action only for 1 vector with the given mask, if it is not the identity; /// mask.; /// 3. If > 2 masks are used, perform the remaining shuffle actions for 2; /// vectors, combing the masks properly between the steps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:60,mask,masks,60,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,9,['mask'],"['mask', 'masks']"
Availability,// namespace; /// Prepares a use bitset for the given mask either for the first argument or; /// for the second.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:54,mask,mask,54,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['mask'],['mask']
Availability,"// namespace; /// Returns the cost of the shuffle instructions with the given \p Kind, vector; /// type \p Tp and optional \p Mask. Adds SLP-specifc cost estimation for insert; /// subvector pattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:126,Mask,Mask,126,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Mask'],['Mask']
Availability,// namespace; /// Strips any positional args and possible argv[0] from a command-line; /// provided by the user to construct a FixedCompilationDatabase.; ///; /// FixedCompilationDatabase requires a command line to be in this format as it; /// constructs the command line for each file by appending the name of the file; /// to be compiled. FixedCompilationDatabase also adds its own argv[0] to the; /// start of the command line although its value is not important as it's just; /// ignored by the Driver invoked by the ClangTool using the; /// FixedCompilationDatabase.; ///; /// FIXME: This functionality should probably be made available by; /// clang::driver::Driver although what the interface should look like is not; /// clear.; ///; /// \param[in] Args Args as provided by the user.; /// \return Resulting stripped command line.; /// \li true if successful.; /// \li false if \c Args cannot be used for compilation jobs (e.g.; /// contains an option like -E or -version).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/CompilationDatabase.cpp:632,avail,available,632,interpreter/llvm-project/clang/lib/Tooling/CompilationDatabase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/CompilationDatabase.cpp,1,['avail'],['available']
Availability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Plot the distribution of pull values for the specified parameter on a newly created frame. If asymmetric; /// errors are calculated in the fit (by MINOS) those will be used in the pull calculation.; ///; /// If the parameters of the models for generation and fit differ, simple heuristics are used to find the; /// corresponding parameters:; /// - Parameters have the same name: They will be used to compute pulls.; /// - Parameters have different names: The position of the fit parameter in the set of fit parameters will be; /// computed. The parameter at the same position in the set of generator parameters will be used.; ///; /// Further options:; /// <table>; /// <tr><th> Arguments <th> Effect; /// <tr><td> FrameRange(double lo, double hi) <td> Set range of frame to given specification; /// <tr><td> FrameBins(int bins) <td> Set default number of bins of frame to given number; /// <tr><td> Frame() <td> Pass supplied named arguments to RooAbsRealLValue::frame() function. See there; /// for list of allowed arguments; /// <tr><td> FitGauss(bool flag) <td> Add a gaussian fit to the frame; /// </table>; ///; /// If no frame specifications are given, the AutoSymRange() feature will be used to set a default range.; /// Any other named argument is passed to the RooAbsData::plotOn(). See that function for allowed options.; ///; /// If you want to have more control over the Gaussian fit to the pull; /// distribution, you can also do it after the call to plotPull():; ///; /// ~~~ {.cpp}; /// RooPlot *frame = mcstudy->plotPull(myVariable, RooFit::Bins(40), RooFit::FitGauss(false));; /// RooRealVar pullMean(""pullMean"",""Mean of pull"",0,-10,10) ;; /// RooRealVar pullSigma(""pullSigma"",""Width of pull"",1,0.1,5) ;; /// pullMean.setPlotLabel(""pull #mu""); // optional (to get nicer plot labels if you want); /// pullSigma.setPlotLabel(""pull #sigma""); // optional; /// RooGaussian pullGauss(""pull",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:210,error,errors,210,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['error'],['errors']
Availability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix.; /// \param[in] other Fit result to test against.; /// \param[in] tol **Relative** tolerance for parameters and NLL.; /// \param[in] tolErr **Relative** tolerance for parameter errors.; /// \param[in] verbose If this function will log to the standard output when comparisons fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:160,toler,tolerances,160,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,5,"['error', 'tolEr', 'toler']","['errors', 'tolErr', 'tolerance', 'tolerances']"
Availability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Write object to I/O buffer.; ///; /// This function assumes that the value in 'obj' is the value stored in; /// a pointer to a ""ptrClass"". The actual type of the object pointed to; /// can be any class derived from ""ptrClass"".; /// Return:; /// - 0: failure; /// - 1: success; /// - 2: truncated success (i.e actual class is missing. Only ptrClass saved.); ///; /// If 'cacheReuse' is true (default) upon seeing an object address a second time,; /// we record the offset where its was written the first time rather than streaming; /// the object a second time.; /// If 'cacheReuse' is false, we always stream the object. This allows the (re)use; /// of temporary object to store different data in the same buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferIO.cxx:350,failure,failure,350,io/io/src/TBufferIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferIO.cxx,1,['failure'],['failure']
Availability,"// namespaces may have seen updates in their list of global functions, which; // are available as ""methods"" even though they're not really that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:85,avail,available,85,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['avail'],['available']
Availability,"// need a copy of data in case of robust fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:34,robust,robust,34,math/minuit/src/TLinearMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx,1,['robust'],['robust']
Availability,"// need do find minimum of log-likelihood in the range to shift function; // to avoid numerical errors when we compute the likelihood (overflows in the exponent); // N.B.: this works for only 1 parameter of interest otherwise Minuit should be used for finding the minimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:96,error,errors,96,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['error'],['errors']
Availability,"// need here to keep alive owned RooProduct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:21,alive,alive,21,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// need to calculate error for any other neuron",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:21,error,error,21,tmva/tmva/src/TNeuron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx,1,['error'],['error']
Availability,"// need to generate in the range otherwise an error in TH1::Merge is correctly produced; // since we cannot merge in that case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:46,error,error,46,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['error']
Availability,"// need to generate in the range otherwise an error in TH1::Merge is produced",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:46,error,error,46,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['error']
Availability,"// need to get constraint mean and error parameters ....; // look for normal gaussian and poisson cases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:35,error,error,35,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// need to keep alive as alt_poi owns its contents",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:16,alive,alive,16,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['alive'],['alive']
Availability,"// need to keep alive as may contain owning globs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:16,alive,alive,16,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// need to look also a case when all errors in y are zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:37,error,errors,37,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// need to print minos errors and globalCC + other info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:23,error,errors,23,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['error'],['errors']
Availability,"// need to provide some min/max value to have a numerical error in; // computation of barycentric coordinates",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:58,error,error,58,math/mathcore/test/testDelaunay2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx,1,['error'],['error']
Availability,"// need to re-implement to solve conflict with TObject::Error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFitResult.h:56,Error,Error,56,hist/hist/inc/TFitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFitResult.h,1,['Error'],['Error']
Availability,"// need to restore values and errors for POI",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:30,error,errors,30,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,1,['error'],['errors']
Availability,"// need to set error by hand since constructor from TH2 does not exist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:15,error,error,15,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['error']
Availability,"// need to specify here full return type since when using the typedef (IMultiGenFunction); // there is an error when using the class in Python (see issue #12391)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:106,error,error,106,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['error'],['error']
Availability,"// need to the replacement here for the error message before",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:40,error,error,40,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['error'],['error']
Availability,"// need to treat case when all errors are zero; // note that by default fitOpt.fCoordError is true",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:31,error,errors,31,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// needed for setting precision ?; // - Compute sum of squares of errors in the bin range; // should maybe use stat[1] ??; // Double_t ey, sumw2=0;; // for (i=hxfirst;i<=hxlast;i++) {; // ey = GetBinError(i);; // sumw2 += ey*ey;; // }; // set all default minimizer options (tolerance, max iterations, etc..)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:66,error,errors,66,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"// needed in case of lazy initialization of failure compiling the expression",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:44,failure,failure,44,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['failure'],['failure']
Availability,"// needed to get the error on the eff.. will only be correct if the histogram is not scaled to ""integral == 1"" Yet;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:21,error,error,21,tmva/tmva/src/ROCCalc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx,1,['error'],['error']
Availability,// negative fov is not an error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:26,error,error,26,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,"// new is assumed; // if directory already exist, print error message and return",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:56,error,error,56,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['error'],['error']
Availability,"// new reference to python object matching cppobj, or 0 on failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.h:59,failure,failure,59,bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.h,1,['failure'],['failure']
Availability,"// newv = undef; // mask = mask & maskbits; // for each elt; // n = extract mask i; // x = extract val n; // newv = insert newv, x, i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:20,mask,mask,20,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,4,['mask'],"['mask', 'maskbits']"
Availability,"// no Error() here since we are allowed to try to read from a non-existing; // file (like ./.rootrc, $HOME/.rootrc, etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:6,Error,Error,6,core/base/src/TEnv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx,1,['Error'],['Error']
Availability,"// no INCREF yet for simple cleanup in case of error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:47,error,error,47,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,1,['error'],['error']
Availability,"// no NLL available so just get whatever limit we can",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:10,avail,available,10,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['avail'],['available']
Availability,"// no NLL available so just get whatever limit we can; // if any of the defined points are 'expected' data don't do obs; // for(auto& hp : *this) {; // if(hp.isExpected) {; // doObs = false; break;; // }; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:10,avail,available,10,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['avail'],['available']
Availability,"// no PM available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:9,avail,available,9,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,3,['avail'],['available']
Availability,"// no bound available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx:12,avail,available,12,gui/fitpanel/src/TFitParametersDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx,1,['avail'],['available']
Availability,"// no chunks with space available, figure out chunk size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:24,avail,available,24,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,2,['avail'],['available']
Availability,"// no common bits, a possible; // candidate anyway.; // Careful, check first the tile and stipple mask bits, as these; // influence nearly all other GC functions... (do the same for; // some other such bits as GCFunction, etc...). Perhaps we should; // allow only exact GC matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGGC.cxx:98,mask,mask,98,gui/gui/src/TGGC.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGGC.cxx,1,['mask'],['mask']
Availability,// no error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.cpp:6,error,error,6,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.cpp,1,['error'],['error']
Availability,"// no error available for robust fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:6,error,error,6,math/minuit/src/TLinearMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx,3,"['avail', 'error', 'robust']","['available', 'error', 'robust']"
Availability,"// no error in X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:6,error,error,6,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['error']
Availability,"// no error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:6,error,error,6,interpreter/cling/lib/Interpreter/ValuePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValuePrinter.cpp,1,['error'],['error']
Availability,"// no forward error for first pixel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx:14,error,error,14,gui/gui/src/TGColorDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx,1,['error'],['error']
Availability,"// no info available when minimization has failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,avail,available,11,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,4,['avail'],['available']
Availability,"// no info available when minimization has failed or has some problems",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,avail,available,11,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['avail'],['available']
Availability,"// no input available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TextInput.h:12,avail,available,12,core/textinput/src/textinput/TextInput.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TextInput.h,1,['avail'],['available']
Availability,"// no inverse hessian available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:22,avail,available,22,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['avail'],['available']
Availability,"// no mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:6,mask,mask,6,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['mask'],['mask']
Availability,"// no matrix is available in case of non-valid fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitResult.h:16,avail,available,16,math/mathcore/inc/Fit/FitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitResult.h,4,['avail'],['available']
Availability,"// no need to use coordinate errors in a pol0 fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:29,error,errors,29,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// no self, set error and lament",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:16,error,error,16,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,1,['error'],['error']
Availability,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:20,avail,available,20,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,3,['avail'],['available']
Availability,"// normalization error value (computed in constructor)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:17,error,error,17,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['error'],['error']
Availability,"// normalize errors also in case you are fitting a Ndim histo with a N-1 function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:13,error,errors,13,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// normalize errors and covariance matrix according to chi2 value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:13,error,errors,13,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['errors']
Availability,"// nostack with errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THStack.cxx:16,error,errors,16,hist/hist/test/test_THStack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THStack.cxx,2,['error'],['errors']
Availability,"// not available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGSystem.cxx:7,avail,available,7,net/netxng/src/TNetXNGSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGSystem.cxx,3,['avail'],['available']
Availability,"// not available for the rest",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:7,avail,available,7,math/mathmore/src/GSLIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx,1,['avail'],['available']
Availability,"// not available in Minuit2; /// number of function calls to reach the minimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:7,avail,available,7,math/minuit/inc/TLinearMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h,3,['avail'],['available']
Availability,"// not available; /// number of function calls to reach the minimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/inc/TFumiliMinimizer.h:7,avail,available,7,math/fumili/inc/TFumiliMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/inc/TFumiliMinimizer.h,1,['avail'],['available']
Availability,"// not compatible; // clarify error message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:30,error,error,30,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['error'],['error']
Availability,"// not found: prepare a full error report",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:29,error,error,29,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['error'],['error']
Availability,"// not needed (by default GPU is now CUDNN if available); // define training strategy separated by a separator ""|""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:46,avail,available,46,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['avail'],['available']
Availability,"// not needed since they are used by default; //dger.Opt().fCoordErrors = true; // use coordinate errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:98,error,errors,98,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['errors']
Availability,"// not needed; /// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:60,error,error,60,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['error'],['error']
Availability,"// not recoverable from here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:7,recover,recoverable,7,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['recover'],['recoverable']
Availability,"// not using observed errors in Pearson chi2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:22,error,errors,22,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// not yet available; // fGradient = true;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:11,avail,available,11,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['avail'],['available']
Availability,"// note that Operand shouldn't be null, but the test helps make dump(); // more tolerant of malformed IR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:80,toler,tolerant,80,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['toler'],['tolerant']
Availability,"// note that h3dW is always a weighted histogram - so we need to compute error in the projection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:73,error,error,73,hist/hist/src/TProfile3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx,1,['error'],['error']
Availability,"// note that if evaluating this for a single channel, until 6.30 is available if you are using Binned mode the pdf; // will need to be part of a Simultaneous",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:68,avail,available,68,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['avail'],['available']
Availability,"// note this function will create memory leak for the TMultiGraph; // but it needs to be kept alive in order to display the canvas",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:94,alive,alive,94,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,1,['alive'],['alive']
Availability,"// note: I have seen that you can get 'full covariance quality' without; // running hesse ... is that expected?; // note: hesse status will be -1 if hesse failed (no covariance matrix); // otherwise the status appears to be whatever was the status before; // note that hesse succeeds even if the cov matrix it calculates is forced pos def. Failure is only; // if it cannot calculate a cov matrix at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:340,Failure,Failure,340,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['Failure'],['Failure']
Availability,"// note: Minuit failure is status code 4, minuit2 that is edm above max",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:16,failure,failure,16,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['failure'],['failure']
Availability,"// note: if we ever changed coords to return clones, would need to keep coords alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,alive,alive,79,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,4,['alive'],['alive']
Availability,"// note: so far this method is inconsistent with the BuildHistogram in ways:; // no projection over other variables; // July2023: made RooRealSumPdf evaluate as a function if doesn't have a floor; // but this method will still evaluate it as a pdf (uses PdfWrapper); // but can get away with it while added NaN recovery to getSimplePropagatedError to pickup raw values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:311,recover,recovery,311,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['recover'],['recovery']
Availability,"// now check if any pars don't have errors defined (not same as error=0) ... if so, use the first pdf (if there is; // one) to try setting values from",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:36,error,errors,36,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['error'],"['error', 'errors']"
Availability,"// now for errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:11,error,errors,11,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['error'],['errors']
Availability,"// now input tolerance for migrad calls inside Minos (MnFunctionCross); // before it was fixed to 0.05; // cut off too small tolerance (they are not needed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:13,toler,tolerance,13,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['toler'],['tolerance']
Availability,"// now loop over bins to calculate the correct errors; // the reason this error calculation looks complex is because of c2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:47,error,errors,47,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['error'],"['error', 'errors']"
Availability,// nullptr means all-one mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['mask'],['mask']
Availability,"// numerical method has a large error for this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:32,error,error,32,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['error'],['error']
Availability,"// objc-receiver:; // expression; // Make sure any typos in the receiver are corrected or diagnosed, so that; // proper recovery can happen. FIXME: Perhaps filter the corrected expr to; // only the things that are valid ObjC receivers?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:120,recover,recovery,120,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['recover'],['recovery']
Availability,"// objc_gc applies to Objective-C pointers or, otherwise, to the; // smallest available pointer type (i.e. 'void*' in 'void**').",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:78,avail,available,78,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['avail'],['available']
Availability,"// off_t lseek(int fildes, off_t offset, int whence);; // In the first case we can not tell for sure if it failed or not.; // A return value different from of the expected offset (that is unknown; // here) may indicate failure. For this reason we do not enforce the errno; // check (can cause false positive).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:219,failure,failure,219,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['failure'],['failure']
Availability,"// offsetof; // Creates enumeration entries used for packing bits into integers. Enumeration; // entries include bit shift amount, bit width, and bit mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AMDHSAKernelDescriptor.h:150,mask,mask,150,interpreter/llvm-project/llvm/include/llvm/Support/AMDHSAKernelDescriptor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AMDHSAKernelDescriptor.h,1,['mask'],['mask']
Availability,"// ok some error occurred, so figure out if we want to retry of throw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:11,error,error,11,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['error'],['error']
Availability,"// on Windows, even __declspec(no_sanitize_address) does not prevent catching; // heap-use-after-free errorswhen using the /fsanitize=address compiler flag; // so don't even try",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:102,error,errorswhen,102,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['error'],['errorswhen']
Availability,"// only _after_ error calculation, or sqrt(v) is taken into account!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:16,error,error,16,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,3,['error'],['error']
Availability,"// only get dlclose error if dlopen & dlsym haven't emited one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformPosix.cpp:20,error,error,20,interpreter/cling/lib/Utils/PlatformPosix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformPosix.cpp,1,['error'],['error']
Availability,"// only move forward if implicit conversions are available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:49,avail,available,49,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['avail'],['available']
Availability,"// only read new info if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizer.cxx:25,avail,available,25,proof/proofplayer/src/TPacketizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizer.cxx,4,['avail'],['available']
Availability,"// only recoverable error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:8,recover,recoverable,8,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,4,"['error', 'recover']","['error', 'recoverable']"
Availability,"// open triangle down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:17,down,down,17,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,2,['down'],['down']
Availability,// operand matched but had errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:27,error,errors,27,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['error'],['errors']
Availability,"// operator==/!= are used in op_richcompare of CPPInstance, which subsequently allows; // comparisons to None; if no operator is available, a hook is installed for lazy; // lookups in the global and/or class namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:129,avail,available,129,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['avail'],['available']
Availability,"// option = ""xy"" return the x versus y projection into a TProfile2D histogram; /// option = ""yx"" return the y versus x projection into a TProfile2D histogram; /// option = ""xz"" return the x versus z projection into a TProfile2D histogram; /// option = ""zx"" return the z versus x projection into a TProfile2D histogram; /// option = ""yz"" return the y versus z projection into a TProfile2D histogram; /// option = ""zy"" return the z versus y projection into a TProfile2D histogram; /// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal; ///; /// option = ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The projection is made for the selected bins only.; /// To select a bin range along an axis, use TAxis::SetRange, eg; /// h3.GetYaxis()->SetRange(23,56);; ///; /// NOTE 1: The generated histogram is named th3name + ""_p"" + option; /// eg if the TH3* h histogram is named ""myhist"", then; /// h->Project3D(""xy""); produces a TProfile2D histogram named ""myhist_pxy"".; /// The following sequence; /// h->Project3DProfile(""xy"");; /// h->Project3DProfile(""xy2"");; /// will generate two TProfile2D histograms named ""myhist_pxy"" and ""myhist_pxy2""; /// So, passing additional characters in the option string one can customize the name.; ///; /// NOTE 2: If a profile of the same type already exists with compatible axes,; /// the profile is reset and filled again with the projected contents of the TH3.; /// In the case of axes incompatibility, an error is reported and a NULL pointer is returned.; ///; /// NOTE 3: The number of entries in the projected profile is estimated from the number of; /// effective entries for all the cells included in the projection.; ///; /// NOTE 4: underflow/overflow are by default excluded from the projection; /// (Note that this is a different default behavior compared to the projection to an histogram); /// To include the underflow and/or overflow use option ""UF"" and/or ""OF""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1775,error,error,1775,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['error'],['error']
Availability,"// option error on coordinate and asymmetric on values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:10,error,error,10,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['error']
Availability,"// order the rest, in fact just invert, as there; // are only downward transitions from here on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:62,down,downward,62,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['down'],['downward']
Availability,"// otherwise build error message and throw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:19,error,error,19,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,1,['error'],['error']
Availability,"// output neuron should have error set all ready",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx:29,error,error,29,tmva/tmva/src/TNeuron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TNeuron.cxx,1,['error'],['error']
Availability,"// output shape data; // saved Start/End.Steps are corrected from initial ONNX for negative/default values; // and are available for each axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Slice.hxx:119,avail,available,119,tmva/sofie/inc/TMVA/ROperator_Slice.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Slice.hxx,1,['avail'],['available']
Availability,"// overrides binomial error used in SamplingDistribution::IntegralAndError",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,error,error,22,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,4,['error'],['error']
Availability,"// overwrite error if dlsym caused one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformPosix.cpp:13,error,error,13,interpreter/cling/lib/Utils/PlatformPosix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformPosix.cpp,1,['error'],['error']
Availability,"// p = gR->ParseEval(""errors"");; // TVectorD err = p.ToVector<Double_t>();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/rtools/src/RMinimizer.cxx:22,error,errors,22,math/rtools/src/RMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/src/RMinimizer.cxx,1,['error'],['errors']
Availability,"// page payload + checksum (if available)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:31,avail,available,31,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['avail'],['available']
Availability,"// par file did not unpack itself in the expected directory, failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:61,failure,failure,61,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,1,['failure'],['failure']
Availability,"// parse line, returns in ans; error code rc; /**; Method to eval R code; \param code R code; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRInterface.h:31,error,error,31,bindings/r/inc/TRInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRInterface.h,1,['error'],['error']
Availability,// parseStatement returned true so may need to emit an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:55,error,error,55,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,3,['error'],['error']
Availability,// partword.cmpxchg.failure:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:20,failure,failure,20,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,1,['failure'],['failure']
Availability,"// pearson chi2 with expected errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:30,error,errors,30,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// perform cast (the call will check TClass and addr, and set python errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:69,error,errors,69,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['error'],['errors']
Availability,"// perform cast (the call will check TClass and addr, and set python errors); // give ownership, for ref-counting, to the python side, if so requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:69,error,errors,69,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['error'],['errors']
Availability,"// perform the fit only if nuisance parameters are available; // get nuisance parameters; // nuisance parameters are the non const parameters from the likelihood parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:51,avail,available,51,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx,1,['avail'],['available']
Availability,"// perform the minimization using the algorithm chosen previously by the user; // By default Migrad is used.; // Return true if the found minimum is valid and update internal cached values of; // minimum values, errors and covariance matrix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:212,error,errors,212,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['error'],['errors']
Availability,"// perform the minimization using the algorithm chosen previously by the user; // By default Migrad is used.; // Return true if the found minimum is valid and update internal cached values of; // minimum values, errors and covariance matrix.; // Status of minimizer is set to:; // migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:212,error,errors,212,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['errors']
Availability,// periodically read data into the new stream tracking while download progress,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:61,down,download,61,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,1,['down'],['download']
Availability,"// point beyond the z limit (up or down); // Check if direction is outgoing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoEltu.cxx:35,down,down,35,geom/geom/src/TGeoEltu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoEltu.cxx,1,['down'],['down']
Availability,"// point inside current (safe) node -> search downwards",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx:46,down,downwards,46,geom/geom/src/TGeoNavigator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx,1,['down'],['downwards']
Availability,"// point z lies on the circumference of the circle (within rounding errors); // defined by the triangle, so there is potential for degeneracy in the; // triangle set (Delaunay triangulation does not give a unique way to split; // a polygon whose points lie on a circle into constituent triangles). Make; // a note of the additional point number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:68,error,errors,68,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['errors']
Availability,"// point z lies on the circumference of the circle (within rounding errors); // defined by the triangle, so there is potential for degeneracy in the; // triangle set (Delaunay triangulation does not give a unique way to split; // a polygon whose points lie on a circle into constituent triangles). Make; // a note of the additional point number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:68,error,errors,68,hist/hist/src/TGraphDelaunay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx,1,['error'],['errors']
Availability,"// poll if the other end is still alive - this needs that we first; // close the write pipe of the other end when the remote end of the; // connection is shutting down in doClose; we'll see that because we; // get a POLLHUP on our inpipe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:34,alive,alive,34,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,2,"['alive', 'down']","['alive', 'down']"
Availability,"// populates StringMap of slices to replace with; error checks for mismatched; // replace flag args, fat files, and duplicate arch_types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:50,error,error,50,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,1,['error'],['error']
Availability,"// postfix-expression: p-e '[' expression ']'; // If we have a array postfix expression that starts on a new line and; // Objective-C is enabled, it is highly likely that the user forgot a; // semicolon after the base expression and that the array postfix-expr is; // actually another message send. In this case, do some look-ahead to see; // if the contents of the square brackets are obviously not a valid; // expression and recover by pretending there is no suffix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:427,recover,recover,427,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['recover'],['recover']
Availability,"// postscript dashes; // get rid of X error bars",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:38,error,error,38,core/base/src/TStyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx,1,['error'],['error']
Availability,"// prefer extrapolation with sigma_mu, if available, if it takes us further; // as shape of p-value curve is usually",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:42,avail,available,42,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['avail'],['available']
Availability,"// prefiterror will be tau ... need 1/sqrt(tau) for error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:52,error,error,52,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['error'],['error']
Availability,"// prepare structure giving bitmap information (negative height indicates a top-down DIB)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/Win32Splash.cxx:80,down,down,80,core/winnt/src/Win32Splash.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/Win32Splash.cxx,1,['down'],['down']
Availability,"// preserve panel alive until connection is closed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/fitpanel.cxx:18,alive,alive,18,tutorials/v7/fitpanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/fitpanel.cxx,1,['alive'],['alive']
Availability,"// presume error already set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:11,error,error,11,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['error'],['error']
Availability,"// prevent compilation error G47C585C4: STL1000: Unexpected compiler; // version, expected Clang 6 or newer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:23,error,error,23,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['error'],['error']
Availability,"// prevent error coming from clang/AST/Attrs.inc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:11,error,error,11,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['error'],['error']
Availability,"// previous risk; // parameters set at point with min error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:54,error,error,54,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// print level; // int fMaxIter; // max number of iterations; // double fAbsTolerance; // absolute tolerance; // double fRelTolerance; // relative tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:99,toler,tolerance,99,math/mathmore/inc/Math/GSLMultiRootFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h,2,['toler'],['tolerance']
Availability,"// print message in case of invalid error also in printLevel0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:36,error,error,36,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['error'],['error']
Availability,"// print out reason of test failures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:28,failure,failures,28,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,2,['failure'],['failures']
Availability,"// print the Minos Error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:19,Error,Error,19,math/minuit2/src/MnPrint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx,1,['Error'],['Error']
Availability,"// print the result in the given stream; // need to add also minos errors , globalCC, etc..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:67,error,errors,67,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['errors']
Availability,"// print title if Minos errors, and title exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:24,error,errors,24,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['errors']
Availability,"// print to debug stream, since these would normally be suppressed, and; // we do not want to increase the error count in the message service...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,error,error,107,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['error'],['error']
Availability,"// printf(""ProcessMiss: pos %ld does not appear to correspond to a buffer in this file.\n"", pos);; // We have gone through all the branches in this file and the requested basket; // doesn't appear to be in any of them. Likely a logic error / bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:234,error,error,234,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['error'],['error']
Availability,"// printf(""available %d total %d \n"", nflen, sumFrames);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGPack.cxx:11,avail,available,11,gui/gui/src/TGPack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGPack.cxx,1,['avail'],['available']
Availability,// promoting a mask type (v*i1) into a register of type i64/i32/i16/i8,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:15,mask,mask,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['mask'],['mask']
Availability,"// propagate correlated systematic shift to output vector; // m1,m2 : coefficients for propagating the errors; // dsys : matrix of correlated shifts from this source; // delta_m =; // sum{i,j} {; // ((*m1)(m,j) * (*fVYAx)(i) - (*m2)(m,i) * (*fX)(j))*dsys(i,j) }; // = sum_j (*m1)(m,j) sum_i dsys(i,j) * (*fVYAx)(i); // - sum_i (*m2)(m,i) sum_j dsys(i,j) * (*fX)(j)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:103,error,errors,103,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['errors']
Availability,"// propagate error matrix vyy to the result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h:13,error,error,13,hist/unfold/inc/TUnfoldSys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldSys.h,1,['error'],['error']
Availability,"// propagate error matrix vyy to the result; // vyy: error matrix on input data fY; // ematrix: output; // binMap: see method GetEmatrix(); // clearEmat: set kTRUE to clear the histogram prior to adding the errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:13,error,error,13,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['error'],"['error', 'errors']"
Availability,// propagate the error if possible,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:17,error,error,17,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['error'],['error']
Availability,"// propagate uncorrelated systematic errors to a covariance matrix; // m0,m1 : coefficients (matrices) for propagating the errors; //; // the error matrix is calculated by standard error propagation, where the; // derivative of the result vector X wrt the matrix A is given by; //; // dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j; //; // where:; // the matrices M0 and M1 are arguments to this function; // the vectors Z0, Z1 : GetDXDAZ(); //; // The matrix A is calculated from a matrix B as; //; // A_ij = B_ij / sum_k B_kj; //; // where k runs over additional indices of B, not present in A.; // (underflow and overflow bins, used for efficiency corrections); //; // define: Norm_j = sum_k B_kj (data member fSumOverY); //; // the derivative of A wrt this input matrix B is given by:; //; // dA_ij / dB_kj = ( delta_ik - A_ij ) * 1/Norm_j; //; // The covariance matrix Vxx is:; //; // Vxx_mn = sum_ijlk [ (dX_m / dA_ij) * (dA_ij / dB_kj) * DB_kj; // * (dX_n / dA_lj) * (dA_lj / dB_kj) ]; //; // where DB_kj is the error on B_kj squared; // Simplify the sum over k:; //; // sum_k [ (dA_ij / dB_kj) * DB_kj * (dA_lj / dB_kj) ]; // = sum_k [ ( delta_ik - A_ij ) * 1/Norm_j * DB_kj *; // * ( delta_lk - A_lj ) * 1/Norm_j ]; // = sum_k [ ( delta_ik*delta_lk - delta_ik*A_lj - delta_lk*A_ij; // + A_ij * A_lj ) * DB_kj / Norm_j^2 ]; //; // introduce normalized errors: Rsq_kj = DB_kj / Norm_j^2; // after summing over k:; // delta_ik*delta_lk*Rsq_kj -> delta_il*Rsq_ij; // delta_ik*A_lj*Rsq_kj -> A_lj*Rsq_ij; // delta_lk*A_ij*Rsq_kj -> A_ij*Rsq_lj; // A_ij*A_lj*Rsq_kj -> A_ij*A_lj*sum_k(Rsq_kj); //; // introduce sum of normalized errors squared: SRsq_j = sum_k(Rsq_kj); //; // Note: Rsq_ij is stored as fDAinRelSq (excludes extra indices of B); // and SRsq_j is stored as fDAinColRelSq (sum includes all indices of B); //; // Vxx_nm = sum_ijl [ (dX_m / dA_ij) * (dX_n / dA_lj); // (delta_il*Rsq_ij - A_lj*Rsq_ij - A_ij*Rsq_lj + A_ij*A_lj *SRsq_j) ]; //; // Vxx_nm = sum_j [ F_mj * F_nj * SRsq_j; // - su",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:37,error,errors,37,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,4,['error'],"['error', 'errors']"
Availability,"// protect against numerical error can make this larger than one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h:29,error,error,29,math/mathmore/src/complex_quartic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h,1,['error'],['error']
Availability,"// protect against numerical errors when M2() is negative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PxPyPzM4D.h:29,error,errors,29,math/genvector/inc/Math/GenVector/PxPyPzM4D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PxPyPzM4D.h,1,['error'],['errors']
Availability,"// psrc is either the original par or the downloaded path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:42,down,downloaded,42,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,1,['down'],['downloaded']
Availability,"// put error wrt par_hat value, even if found better min",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:7,error,error,7,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['error'],['error']
Availability,"// put it in additional row in table; ////////////////////////////////////////////////////////; // Loop down to child classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx:104,down,down,104,html/src/TClassDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx,1,['down'],['down']
Availability,"// put lower tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:13,toler,tolerance,13,math/mathmore/test/StatFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx,2,['toler'],['tolerance']
Availability,"// quadratic sum of all errors from all bins,; // including under/overflow bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:24,error,errors,24,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['errors']
Availability,"// query if the parameter i has the Minos error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:42,error,error,42,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['error']
Availability,"// queue any pages available for reading we can without blocking",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:19,avail,available,19,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,2,['avail'],['available']
Availability,// quick optimization to avoid having to intern strings that are already; // stored reliably elsewhere,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:84,reliab,reliably,84,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['reliab'],['reliably']
Availability,"// r.first will be the rounded error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,error,error,31,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['error'],['error']
Availability,"// rank all the np based on impact ... will use the covariance approximation if full impact not available; // the approxThreshold sets the level below which the approximation will be returned; // e.g. set it to 0 to not do approximation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:96,avail,available,96,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['avail'],['available']
Availability,"// ranking of input variables (not available for cuts)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:35,avail,available,35,tmva/tmva/inc/TMVA/MethodCuts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h,1,['avail'],['available']
Availability,"// re-compute the entries; // in case of error calculation (i.e. when Sumw2() is set); // use the effective entries for the entries; // since this is the only way to estimate them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:41,error,error,41,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,2,['error'],['error']
Availability,"// re-define the default error handler when loading the library",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx:25,error,error,25,math/mathmore/src/GSLError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx,1,['error'],['error']
Availability,"// re-implemented by L.M (9/11/2011) to fix bug https://savannah.cern.ch/bugs/?87251; // following now exactly R implementation (available in library/stats/R/quantile.R ); // which follows precisely Hyndman-Fan paper; // (older implementation had a bug for type =3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:129,avail,available,129,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['avail'],['available']
Availability,"// read d, starting at bit p and mask with m",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:33,mask,mask,33,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['mask'],['mask']
Availability,"// reading a float[] with a TTreeReaderValue should cause an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/leafs.cxx:61,error,error,61,tree/treeplayer/test/leafs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/leafs.cxx,1,['error'],['error']
Availability,"// recover numbers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:3,recover,recover,3,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['recover'],['recover']
Availability,// recover the bind-time world matrices,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:3,recover,recover,3,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,1,['recover'],['recover']
Availability,// redraw palette till the end when contours are available,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:49,avail,available,49,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// redundant (already present in the header), but Windows needs it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDefineBase.cxx:3,redundant,redundant,3,tree/dataframe/src/RDefineBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDefineBase.cxx,1,['redundant'],['redundant']
Availability,"// register a cleanup handler to make sure all BidirMMapPipes are torn; // down, and child processes are sent a SIGTERM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:75,down,down,75,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// regular Texture (image, video, canvas); // use manually created mipmaps if available; // if there are no manual mipmaps; // set 0 level mipmap and then use GL to generate other mipmap levels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:78,avail,available,78,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// relax tolerance for Rosenbrock",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/testGAMinimizer.cxx:9,toler,tolerance,9,math/genetic/test/testGAMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/testGAMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// remap error matrix; // matrix row i -> origI (fXToHist[i]); // origI -> destI (binMap); // destI -> ematBinI (histToLocalBin)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:9,error,error,9,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['error']
Availability,"// remove errors because currently meaningless!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:10,error,errors,10,roofit/xroofit/src/xRooNode_interactive.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx,1,['error'],['errors']
Availability,// remove new analyses when an error occurs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:31,error,error,31,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp,1,['error'],['error']
Availability,"// remove template constructor since is ambiguous; /** Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementing operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integration methods); */; // this is ambiguous; // template<class Function>; // IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; // fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; // SetFunction(f, dim);; // }; /// destructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:396,Error,Error,396,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,2,['Error'],['Error']
Availability,"// report errors as appropriate; return void",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:10,error,errors,10,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,2,['error'],['errors']
Availability,"// report failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:10,failure,failure,10,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['failure'],['failure']
Availability,"// report only this error; the idea here is that all other errors come from; // the bindings (e.g. argument conversion errors), while the exception from; // C++ means that it originated from an otherwise successful call; // bind the original C++ object, rather than constructing from topmsg, as it; // is expected to have informative state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:20,error,error,20,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,3,['error'],"['error', 'errors']"
Availability,"// requested max available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.cpp:17,avail,available,17,core/textinput/src/textinput/TerminalDisplay.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.cpp,1,['avail'],['available']
Availability,"// res = o->getPropagatedError(*fr, normSet);; // // TODO: What if coef has error? - probably need a FuncWrapper class; // if (auto c = _coefs.get<RooAbsReal>(); c) {; // res *= c->getVal(normSet);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:76,error,error,76,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,// res = oldval ^ ((oldval ^ newval) & masktargetdata);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchExpandAtomicPseudoInsts.cpp:39,mask,masktargetdata,39,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchExpandAtomicPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchExpandAtomicPseudoInsts.cpp,1,['mask'],['masktargetdata']
Availability,"// reset content and error; //now loop on all bins and refill",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:21,error,error,21,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// reset content and error; //now loop on all old bins and refill excluding underflow/overflow in; // the axis that has the bin doubled",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:21,error,error,21,hist/hist/src/TProfileHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h,1,['error'],['error']
Availability,"// reset counter for error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx:21,error,error,21,math/mathmore/src/GSLInterpolator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx,1,['error'],['error']
Availability,"// reset error handling flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:9,error,error,9,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['error'],['error']
Availability,"// reset error message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:9,error,error,9,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['error'],['error']
Availability,"// reset the bin error option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17,error,error,17,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// reset to zero --> no error will be calculated on the efficiencies",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:24,error,error,24,tmva/tmva/src/ROCCalc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx,1,['error'],['error']
Availability,"// restore previous error mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:20,error,error,20,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,6,['error'],['error']
Availability,"// restore the error level used for fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:15,error,error,15,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,2,['error'],['error']
Availability,"// result.push_back(MinimumState(seed.Parameters(), seed.Error(), seed.Gradient(), edm, fcn.NumOfCalls()));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:57,Error,Error,57,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['Error'],['Error']
Availability,"// retire pipes with error or end-of-file condition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:21,error,error,21,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['error'],['error']
Availability,"// retrieve from TMinuit minimum parameter values; // and errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:58,error,errors,58,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['errors']
Availability,"// retrieve parameters and errors from TMinuit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:27,error,errors,27,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['errors']
Availability,"// retrieve results (parameter and error matrix); // only if result is OK",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:35,error,error,35,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['error']
Availability,"// retrieve, store, and clear errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:30,error,errors,30,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['error'],['errors']
Availability,"// return 0 for success; // return 1 for failure; // Check that the supplied list has; // the right number of arguments:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx:41,failure,failure,41,roofit/histfactory/src/ParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx,1,['failure'],['failure']
Availability,"// return 13th character and replace it by 'p', getting 14th character; // should NOT result in an error message since operator() does not use; // range checking",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:99,error,error,99,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['error'],['error']
Availability,"// return 13th character and replace it by 't', getting 14th character; // should result in an error message since operator[] uses range checking",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:95,error,error,95,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['error'],['error']
Availability,"// return Hessian Error in case is invalid",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:18,Error,Error,18,math/minuit2/inc/Minuit2/MinosError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h,2,['Error'],['Error']
Availability,"// return an error matrix as histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfold.h:13,error,error,13,hist/unfold/inc/TUnfold.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfold.h,1,['error'],['error']
Availability,"// return error at minimum (set to zero for fixed and constant params)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:10,error,error,10,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['error'],['error']
Availability,"// return error because infinite discrepancy here:; // bin1 != 0 and bin2 =0 in a histogram with all errors zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10,error,error,10,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['error'],"['error', 'errors']"
Availability,"// return error of input RooRealVar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h:10,error,error,10,roofit/roofitcore/inc/RooErrorVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h,1,['error'],['error']
Availability,"// return external error from internal error for parameter i; // err = sigma Value == std::sqrt(cov(i,i))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:19,error,error,19,math/minuit2/src/MnUserTransformation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx,2,['error'],['error']
Availability,"// return gradient step tolerance (set in strategy object)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx:24,toler,tolerance,24,math/minuit2/src/Numerical2PGradientCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx,1,['toler'],['tolerance']
Availability,"// return gradient tolerance (set in strategy object)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx:19,toler,tolerance,19,math/minuit2/src/Numerical2PGradientCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx,1,['toler'],['tolerance']
Availability,"// return lower Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:22,error,error,22,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,6,['error'],['error']
Availability,"// return number of function calls; // if original function does not support gradient it is wrapped in MultiNumGradFunction; // and we have NCalls available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:147,avail,available,147,math/mathmore/src/GSLMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx,1,['avail'],['available']
Availability,"// return number of function evaluations in calculating the integral; //unsigned int NEval() const { return fNEval; }; /// set the relative tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:140,toler,tolerance,140,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,1,['toler'],['tolerance']
Availability,"// return s0.Error();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx:13,Error,Error,13,math/minuit2/src/BFGSErrorUpdator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx,1,['Error'],['Error']
Availability,"// return status of covariance matrix; //-1 - not available (inversion failed or Hesse failed); // 0 - available but not positive defined; // 1 - covariance only approximate; // 2 full matrix but forced pos def; // 3 full accurate matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:50,avail,available,50,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['avail'],['available']
Availability,"// return std::pair(nom,std::max(std::abs(up - nom), std::abs(down - nom)));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:62,down,down,62,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['down'],['down']
Availability,"// return std::vector of double with parameter errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:47,error,errors,47,math/minuit2/src/MnUserParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx,2,['error'],['errors']
Availability,"// return the external covariance matrix from the internal error matrix and the internal parameter value; // the vector of internal parameter is needed for the derivatives (Jacobian of the transformation); // Vext(i,j) = Vint(i,j) * dPext(i)/dPint(i) * dPext(j)/dPint(j)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:59,error,error,59,math/minuit2/src/MnUserTransformation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx,1,['error'],['error']
Availability,"// return the mask indicating which results should be used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:14,mask,mask,14,test/testGenVectorVc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx,1,['mask'],['mask']
Availability,"// return the minos error for parameter i; // if a minimum does not exist an error is returned; // runopt is a flag which specifies if only lower or upper error needs to be run; // if runopt = 0 both, = 1 only lower, + 2 only upper errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:20,error,error,20,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,4,['error'],"['error', 'errors']"
Availability,"// return upper Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:22,error,error,22,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,6,['error'],['error']
Availability,"// returns error on MVA response for given event; // NOTE: must be called AFTER ""EvaluateMVA(...)"" call !",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:11,error,error,11,tmva/tmva/inc/TMVA/Reader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h,1,['error'],['error']
Availability,"// returns the error sigma from the last iteration of the VEGAS algorithm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:15,error,error,15,math/mathmore/src/GSLMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx,1,['error'],['error']
Availability,"// reverse engineering the correct partial error; // the (arbitrary) convention used here is that all samples should have the same relative error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx:43,error,error,43,roofit/hs3/src/JSONFactories_HistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx,2,['error'],['error']
Availability,"// reverse sort second half; // now populate the up and down values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:56,down,down,56,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['down'],['down']
Availability,"// right edge error increments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:14,error,error,14,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['error'],['error']
Availability,"// robust fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:3,robust,robust,3,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['robust'],['robust']
Availability,"// robust fitting - get h parameter using tolerance (t.b. improved)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:3,robust,robust,3,math/minuit/src/TLinearMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx,2,"['robust', 'toler']","['robust', 'tolerance']"
Availability,"// robustness iterations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:3,robust,robustness,3,hist/hist/src/TGraphSmooth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx,1,['robust'],['robustness']
Availability,"// rollback read bytes, this is old buffer without byte count",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,rollback,rollback,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['rollback'],['rollback']
Availability,"// rootcint generates error here, but I decided to implement it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:22,error,error,22,core/dictgen/src/LinkdefReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx,2,['error'],['error']
Availability,"// rootcling pre-includes things such as Rtypes.h. This means that ACLiC can; // call rootcling asking it to create a module for a file with no #includes; // but relying on things from Rtypes.h such as the ClassDef macro.; //; // When rootcling starts building a module, it becomes resilient to the; // outside environment and pre-included files have no effect. This hook; // informs rootcling when a new submodule is being built so that it can; // make Core.Rtypes.h visible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:282,resilien,resilient,282,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['resilien'],['resilient']
Availability,"// rounding error due to cancellation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:12,error,error,12,math/mathcore/src/RichardsonDerivator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx,1,['error'],['error']
Availability,"// rounds error to 1 or 2 sig fig and round value to match that precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:10,error,error,10,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['error'],['error']
Availability,"// run again Minos from new Minimum (also lower error needs to be re-computed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:48,error,error,48,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['error'],['error']
Availability,"// runs python code from string in local namespace with error handling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:56,error,error,56,tmva/pymva/inc/TMVA/PyMethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h,1,['error'],['error']
Availability,"// s3 has to be filled again so that the errors are properly calculated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,error,errors,41,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['errors']
Availability,"// sanity check ... should never happen as otherwise there is apparently; // something odd with the assignment of the leaf nodes (rem: you use the training; // events for this determination of the error rate)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:197,error,error,197,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,2,['error'],['error']
Availability,"// save bin errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12,error,errors,12,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,5,['error'],['errors']
Availability,// save off slot mask of instruction marked with A_PREFER_SLOT3; // and then pin it to slot #3,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,1,['mask'],['mask']
Availability,"// save the normalized errors on hist_A; // to the matrices fDAinRelSq and fDAinColRelSq",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:23,error,errors,23,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['error'],['errors']
Availability,// scale down factor if too large values,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:9,down,down,9,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['down'],['down']
Availability,"// scale tolerance with Up(); // avoid tolerance too smalls (than limits)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:9,toler,tolerance,9,math/minuit2/src/ModularFunctionMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx,2,['toler'],['tolerance']
Availability,"// scaled abs error, eq 20 in RuleFit paper",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:14,error,error,14,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// scaled abs error, eq 20; // This error (df) is large - need to think on how to compensate...; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:14,error,error,14,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,2,['error'],['error']
Availability,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:166,error,error,166,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['error'],"['error', 'errors']"
Availability,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range; // (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); // (force in that case to use errors); // scan is not implemented for TMinuit, the way to return the array is only via the graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:166,error,error,166,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,3,['error'],"['error', 'errors']"
Availability,"// scatter(splat(value), splat(ptr), non-zero-mask) -> store value, ptr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:46,mask,mask,46,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['mask'],['mask']
Availability,"// scheduledNode - As nodes are scheduled, we look to see if there are any; // successor nodes that have a single unscheduled predecessor. If so, that; // single predecessor has a higher priority, since scheduling it will make; // the node available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LatencyPriorityQueue.h:240,avail,available,240,interpreter/llvm-project/llvm/include/llvm/CodeGen/LatencyPriorityQueue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LatencyPriorityQueue.h,2,['avail'],['available']
Availability,"// scroll 1 line down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:17,down,down,17,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['down'],['down']
Availability,"// scroll 2 lines down (a button down is always followed by a button up)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:18,down,down,18,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,2,['down'],['down']
Availability,"// scroll 2 lines up (a button down is always followed by a button up)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:31,down,down,31,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['down'],['down']
Availability,"// scroll down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:10,down,down,10,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,7,['down'],['down']
Availability,"// scroll up or down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSlider.cxx:16,down,down,16,gui/gui/src/TGSlider.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSlider.cxx,1,['down'],['down']
Availability,// searching for the available registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CallingConv.cpp:21,avail,available,21,interpreter/llvm-project/llvm/lib/Target/X86/X86CallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CallingConv.cpp,1,['avail'],['available']
Availability,"// select(mask, mload(,,mask,0), 0) -> mload(,,mask,0); // Load inst is intentionally not checked for hasOneUse()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:10,mask,mask,10,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,3,['mask'],['mask']
Availability,// selectOrSplit requests the allocator to return an available physical; // register if possible and populate a list of new live intervals that; // result from splitting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.cpp:53,avail,available,53,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.cpp,1,['avail'],['available']
Availability,"// serious error has happened -> reset all file descrptors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:11,error,error,11,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['error'],['error']
Availability,"// set CDF if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuranSampler.cxx:14,avail,available,14,math/unuran/src/TUnuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuranSampler.cxx,1,['avail'],['available']
Availability,"// set a python error, if not already done",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx:16,error,error,16,bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx,1,['error'],['error']
Availability,"// set a small tolerance for the tests; // The default of 10*-2 make sometimes Simplex do not converge; //const double gDefaultTolerance = 1.E-4;; // Options to indicate how the test has to be run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:15,toler,tolerance,15,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['toler'],['tolerance']
Availability,"// set all error to 1 for non-empty bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:11,error,error,11,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// set also Hessian if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:23,avail,available,23,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['avail'],['available']
Availability,"// set also new errors in FitConfig",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:16,error,errors,16,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['errors']
Availability,"// set also new parameter values and errors in FitConfig",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:37,error,errors,37,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['errors']
Availability,"// set button down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGButton.cxx:14,down,down,14,gui/gui/src/TGButton.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGButton.cxx,2,['down'],['down']
Availability,"// set const if sumw2 is 0 (i.e. no error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:36,error,error,36,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// set content and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx:19,error,error,19,hist/hist/test/test_TH2Poly_BinError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx,1,['error'],['error']
Availability,"// set correct bin error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:19,error,error,19,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['error'],['error']
Availability,"// set default tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:15,toler,tolerance,15,math/mathmore/src/GSLMultiRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx,1,['toler'],['tolerance']
Availability,"// set discriminator error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx:21,error,error,21,tmva/tmva/src/PDEFoamDiscriminant.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDiscriminant.cxx,1,['error'],['error']
Availability,"// set error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:7,error,error,7,math/minuit2/src/MnUserParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx,2,['error'],['error']
Availability,"// set error = 1 for empty bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:7,error,error,7,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['error']
Availability,"// set error and print level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:7,error,error,7,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,3,['error'],['error']
Availability,"// set error for parameter e (external index)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:7,error,error,7,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,1,['error'],['error']
Availability,"// set error for parameter n",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:7,error,error,7,math/minuit2/src/MnUserParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx,1,['error'],['error']
Availability,"// set error for parameter n (external index)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:7,error,error,7,math/minuit2/src/MnUserTransformation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx,1,['error'],['error']
Availability,"// set error on average target",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:7,error,error,7,tmva/tmva/src/PDEFoamTarget.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx,1,['error'],['error']
Availability,"// set error to 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:7,error,error,7,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// set error, print level, precision and strategy if they have changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:7,error,error,7,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['error']
Availability,"// set flag to compute Minos error to false in FitConfig to avoid that; // following minimizaiton calls perform unwanted Minos error calculations; /// fConfig.SetMinosErrors(false);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:29,error,error,29,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['error']
Availability,"// set global printlevel to the local one so all calls to MN_INFO_MSG can be controlled in the same way; // at exit of this function the BuilderPrintLevelConf object is destructed and automatically the; // previous level will be restored; // double edm = Estimator().Estimate(seed.Gradient(), seed.Error());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:298,Error,Error,298,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['Error'],['Error']
Availability,"// set information about errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:25,error,errors,25,math/mathcore/src/FitConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx,1,['error'],['errors']
Availability,"// set mean target error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx:19,error,error,19,tmva/tmva/src/PDEFoamTarget.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamTarget.cxx,1,['error'],['error']
Availability,"// set parameter error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:17,error,error,17,math/minuit2/src/MnApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx,1,['error'],['error']
Availability,"// set regularisation on a 2-dimensional grid of bins; // start_bin: first bin; // step1: distance between bins in 1st direction; // nbin1: number of bins in 1st direction; // step2: distance between bins in 2nd direction; // nbin2: number of bins in 2nd direction; // return value:; // number of errors (i.e. conditions which have been skipped); // modifies data member fL",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:297,error,errors,297,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['errors']
Availability,"// set regulatisation on a 1-dimensional curve; // start: first bin; // step: distance between neighbouring bins; // nbin: total number of bins; // regmode: regularisation mode; // return value:; // number of errors (i.e. conditions which have been skipped); // modifies data member fL",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:209,error,errors,209,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['error'],['errors']
Availability,"// set status according to bit; // bit 1: lower invalid Minos errors; // bit 2: upper invalid Minos error; // bit 3: invalid because max FCN; // bit 4 : invalid because a new minimum has been found",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:62,error,errors,62,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['error'],"['error', 'errors']"
Availability,"// set the Minos error for parameter i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:17,error,error,17,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['error']
Availability,"// set the default error definition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx:19,error,error,19,math/mathcore/src/MinimizerOptions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx,1,['error'],['error']
Availability,"// set the default tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,toler,tolerance,19,math/mathcore/src/IntegratorOptions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx,5,['toler'],['tolerance']
Availability,"// set the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:11,error,error,11,tmva/tmva/inc/TMVA/TNeuron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h,1,['error'],['error']
Availability,"// set the errors to zero in case of small statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:11,error,errors,11,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['error'],['errors']
Availability,"// set the parameter step size (by default are set to 0.3 of value); // if function provides meaningful error values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:104,error,error,104,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,2,['error'],['error']
Availability,"// set the weight flag checking if error^2 != y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:35,error,error,35,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,2,['error'],['error']
Availability,"// set this if we want to have error=1 for points with zero errors (by default they are skipped); // fitOpt.fUseEmpty = true;; // use coordinate or asym errors in case option is set and type is consistent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:31,error,error,31,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,3,['error'],"['error', 'errors']"
Availability,"// set tolerance , etc...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/demoMinimizer.cxx:7,toler,tolerance,7,math/minuit2/test/MnSim/demoMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/demoMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// set tolerance 1 for tree to be same as in TTTreePlayer::UnBinFIt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx:7,toler,tolerance,7,math/minuit2/test/testNdimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx,3,['toler'],['tolerance']
Availability,"// set values and error for the POI to the best fit values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:18,error,error,18,roofit/roostats/src/LikelihoodIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx,1,['error'],['error']
Availability,"// setGroupSize sets 'SizeInfo' to the size(number of elements) of group; // inside mask a shuffleMask. A mask contains exactly 3 groups, where; // each group is a monotonically increasing sequence with stride 3.; // For example shuffleMask {0,3,6,1,4,7,2,5} => {3,3,2}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:84,mask,mask,84,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,2,['mask'],['mask']
Availability,// setter for control Parameters (getters are not needed so far ); /**; set the desired relative Error; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h:97,Error,Error,97,math/mathcore/inc/Math/Integrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h,4,['Error'],['Error']
Availability,"// setting a new content does not set bin error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx:42,error,error,42,hist/hist/test/test_TH2Poly_BinError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx,1,['error'],['error']
Availability,"// shape the window with the picture mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGShapedFrame.cxx:37,mask,mask,37,gui/gui/src/TGShapedFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGShapedFrame.cxx,1,['mask'],['mask']
Availability,"// shift down, we want the top 52 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:9,down,down,9,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['down'],['down']
Availability,"// shift-cntrl-down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:15,down,down,15,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['down'],['down']
Availability,"// shift-down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:9,down,down,9,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['down'],['down']
Availability,"// should be found, otherwise will be error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:38,error,error,38,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['error'],['error']
Availability,"// should be no need to pass a normSet to a non-pdf (but not verified this); // especially important not to pass in the case we are evaluated RooRealSumPdf as a function! otherwise; // error will be wrong",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:185,error,error,185,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// should be set, otherwise write a generic error msg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPConstructor.cxx:44,error,error,44,bindings/pyroot/cppyy/CPyCppyy/src/CPPConstructor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPConstructor.cxx,1,['error'],['error']
Availability,"// should check here cov matrix status??? (if <3 flag error ?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:54,error,error,54,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['error']
Availability,"// should consider error = 0 as 1 ? Decide to skip points with zero errors; // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:19,error,error,19,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,3,['error'],"['error', 'errors']"
Availability,"// should use half of data for histogram since; // we do not count statistical error from TKDE?; //for (int i = 0; i < 0.5*n; ++i); // h1->Fill(data2[i]);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:79,error,error,79,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['error'],['error']
Availability,"// show minos errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14,error,errors,14,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['errors']
Availability,"// shuf (fneg/fabs X), (fneg/fabs Y), Mask --> fneg/fabs (shuf X, Y, Mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:38,Mask,Mask,38,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['Mask'],['Mask']
Availability,"// shuf (inselt X, ?, IdxC), ?, Mask --> shuf X, ?, Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:32,Mask,Mask,32,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['Mask'],['Mask']
Availability,"// shuf (shuf0 X, Y, Mask0), undef, Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Mask,Mask,36,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Mask'],['Mask']
Availability,"// shuf ?, (inselt X, ?, IdxC), Mask --> shuf ?, X, Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:32,Mask,Mask,32,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['Mask'],['Mask']
Availability,"// shuffle (bitcast X), (bitcast Y), Mask --> bitcast (shuffle X, Y, Mask); //; // if X and Y are of the same (vector) type, and the element size is not; // changed by the bitcasts, we can distribute the bitcasts through the; // shuffle, hopefully reducing the number of instructions. We make sure that; // at least one bitcast only has one use, so we don't *increase* the number of; // instructions here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:37,Mask,Mask,37,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['Mask'],['Mask']
Availability,"// shuffle (cast X), (cast Y), Mask --> cast (shuffle X, Y, Mask)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:31,Mask,Mask,31,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['Mask'],['Mask']
Availability,"// shuffle (concat X, undef), (concat Y, undef), Mask -->; // concat (shuffle X, Y, Mask0), (shuffle X, Y, Mask1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Mask,Mask,49,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Mask'],['Mask']
Availability,"// shuffle (insert ?, Scalar, IndexC), V1, Mask --> insert V1, Scalar, IndexC'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:43,Mask,Mask,43,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['Mask'],['Mask']
Availability,"// shuffle undef, x, mask --> shuffle x, undef, mask'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:21,mask,mask,21,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['mask'],['mask']
Availability,"// shuffle x, x, mask --> shuffle x, undef, mask'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,2,['mask'],['mask']
Availability,"// shufflevector instruction expects a const for the mask argument, i.e., the; // third argument. Do not promote this use in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:53,mask,mask,53,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['mask'],['mask']
Availability,"// shut down the write direction (no more writes from our side)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:8,down,down,8,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// shut down the write direction (no more writes from our side); // drain anything the other end might still want to send",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:8,down,down,8,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// sig=sign of error being calcd",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:15,error,error,15,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['error'],['error']
Availability,// sign extend is vpcmpeq+maskedmove+vpmovdw; // zero extend is vpcmpeq+maskedmove+vpmovdw+vpsrlw,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:26,mask,maskedmove,26,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['mask'],['maskedmove']
Availability,"// significant error at maximum bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THStack.cxx:15,error,error,15,hist/hist/test/test_THStack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THStack.cxx,1,['error'],['error']
Availability,"// significant speedup; // needed because we have no extended pdf and the ToyMC Sampler evaluation returns an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:110,error,error,110,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['error'],['error']
Availability,"// simple echo loop test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,echo,echo,10,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['echo'],['echo']
Availability,"// since RooNLLVar will assume binBoundaries available (not null), we should check bin boundaries; // available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:45,avail,available,45,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,2,['avail'],['available']
Availability,"// sinkMBB:; // and maskedoldval1,oldval,mask; // srl srlres,maskedoldval1,shiftamt; // sign_extend dest,srlres",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:41,mask,mask,41,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,1,['mask'],['mask']
Availability,"// sinkMBB:; // srl srlres, Mask', shiftamt; // sign_extend dest,srlres",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:28,Mask,Mask,28,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,1,['Mask'],['Mask']
Availability,"// skip bins with zero errors or empty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:23,error,errors,23,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// skip computation for x axis : for only one axis no need to use bit mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,mask,mask,70,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['mask'],['mask']
Availability,"// skip computation for y axis : for only one axis no need to use bit mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,mask,mask,70,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['mask'],['mask']
Availability,"// skip computation for z axis : for only one axis no need to use bit mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,mask,mask,70,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['mask'],['mask']
Availability,"// skip points with total error = 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:26,error,error,26,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// skip statistics along x axis, for only one axis no need to use bit mask from GetAxisLabelStatus",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:70,mask,mask,70,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['mask'],['mask']
Availability,// skip this Die and just recurse down,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp:34,down,down,34,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp,1,['down'],['down']
Availability,"// sleep for 1 ms: sleep not necessary, slows things only a bit down; // because the threads are actually doing nothing, which is eventually; // very fast ;-)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx:64,down,down,64,test/threads.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/threads.cxx,1,['down'],['down']
Availability,"// sm_30 intrinsics: __shfl_{up,down,xor}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h:32,down,down,32,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h,1,['down'],['down']
Availability,"// smax(x, 0); // (select (x < 0), x, 0) -> ((x >> (size_in_bits(x)-1))) & x; //; // If the comparison is testing for a positive value, we have to invert; // the sign bit mask, so only do that transform if the target has a; // bitwise 'and not' instruction (the invert is free).; // (select (x > 0), x, 0) -> (~(x >> (size_in_bits(x)-1))) & x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:171,mask,mask,171,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// solves the system for a given set of residuals.; // Assembles the right-hand side appropriate to the; // matrix factored in factor, solves the system using; // the factorization produced there, partitions the; // solution vector into step components, then recovers; // the step components eliminated during the block; // elimination that produced the augmented system form",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpLinSolverBase.h:259,recover,recovers,259,math/quadp/inc/TQpLinSolverBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpLinSolverBase.h,1,['recover'],['recovers']
Availability,"// something went wrong --> display error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:36,error,error,36,test/RootIDE/TGRootIDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx,2,['error'],['error']
Availability,// special case when zoomed out of scale and bin is not available,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:56,avail,available,56,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// special flags to turn off error bar drawing in case the marker cover it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:29,error,error,29,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,3,['error'],['error']
Availability,"// sqlite3_finalize returns the error code of the most recent operation on fQuery.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx:32,error,error,32,tree/dataframe/src/RSqliteDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx,1,['error'],['error']
Availability,"// squeeze MnUserCovariance class; // MnUserCovariance contains the error matrix. Need to invert first to get the hessian, then; // after having squeezed the hessian, need to invert again to get the new error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx:68,error,error,68,math/minuit2/src/MnCovarianceSqueeze.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx,2,['error'],['error']
Availability,"// squeeze the minimum error class; // Remove index-row on the Hessian matrix and the get the new correct error matrix; // (inverse of new Hessian)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx:23,error,error,23,math/minuit2/src/MnCovarianceSqueeze.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx,2,['error'],['error']
Availability,"// stack with errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THStack.cxx:14,error,errors,14,hist/hist/test/test_THStack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THStack.cxx,2,['error'],['errors']
Availability,"// start in a known state even if ""Error"" is encountered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TXTRU.cxx:35,Error,Error,35,graf3d/g3d/src/TXTRU.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TXTRU.cxx,1,['Error'],['Error']
Availability,"// start receiving data on all sockets. Receive data as and when; // they are available on a socket by by using select.; // Exit the loop as soon as all data has been received.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TPSocket.cxx:78,avail,available,78,net/net/src/TPSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TPSocket.cxx,1,['avail'],['available']
Availability,"// static TVirtualFitter *fgFitter; //Current fitter (default TFitter); // static Int_t fgMaxpar; //Maximum number of fit parameters for current fitter; // static Int_t fgMaxiter; //Maximum number of iterations; // static Double_t fgErrorDef; //Error definition (default=1); // static Double_t fgPrecision; //maximum precision; // static TString fgDefault; //name of the default fitter (""Minuit"",""Fumili"",etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h:245,Error,Error,245,hist/hist/inc/TVirtualFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TVirtualFitter.h,1,['Error'],['Error']
Availability,"// static bool IsSupportedClass(TClass *cl); // {; // // Check if the Class is of an unsupported type; // using namespace ROOT::TMetaUtils;; //; // // Check if this is a collection of unique_ptrs; // if (ROOT::ESTLType::kNotSTL != cl->GetCollectionType()) {; // std::vector<std::string> out;; // int i;; // TClassEdit::GetSplit(cl->GetName(), out, i);; // std::string_view containedObjectTypeName(out[1].c_str());; // if (TClassEdit::IsUniquePtr(containedObjectTypeName)) {; // auto clName = cl->GetName();; // // Here we can use the new name for the error message; // Error(""CloseStreamerInfoROOTFile"", ""A collection of unique pointers was selected: %s. These are not supported. If you wish to perform I/O operations with %s, just select the same collection of raw C pointers.\n"", clName, clName);; // return false;; // }; // }; // return true;; //; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/rootpcm/src/rootclingIO.cxx:551,error,error,551,io/rootpcm/src/rootclingIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/rootpcm/src/rootclingIO.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,"// static methods for setting and retrieving the default options; /// Set the default Minimizer type and corresponding algorithms.; /// Here is the list of the available minimizers and their corresponding algorithms.; /// For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it.; ///; /// \anchor ROOTMinimizers; /// ### ROOT Minimizers; ///; /// - Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; /// - Migrad default algorithm based on the variable metric minimizer; /// - Minimize combination of Simplex and Migrad; /// - Simplex minimization algorithm not using the gradient information; /// - Scan brute function scan; /// - Minuit2 New C++ implementation of Minuit (the recommended one); /// - Migrad (default); /// - Minimize; /// - Simplex; /// - Fumili2 new implementation of Fumili integrated in Minuit2; /// - Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; /// - Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); /// - GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; /// - BFGS2 (default); /// - BFGS; /// - ConjugateFR; /// - ConjugatePR; /// - SteepestDescent; /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorithm using only function values and not the gradient.; /// - Genetic Genetic minimization algorithms (see TMVA::Genetic); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h:160,avail,available,160,math/mathcore/inc/Math/MinimizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h,4,"['Avail', 'avail']","['Available', 'available']"
Availability,"// static x(4); // 'x' is not a type; // x(int n); // 'x' is not a type; // x (*p)[]; // 'x' is a type; //; // Since we're in an error case, we can afford to perform a tentative; // parse to determine which case we're in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:129,error,error,129,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['error'],['error']
Availability,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,error,error,30,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,6,['error'],['error']
Availability,"// status bitmask of the available fit results; // 0 = all ok",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:25,avail,available,25,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['avail'],['available']
Availability,"// std::cerr << ""Error in "" << function << "": Access ("" << accesstype << "") to a collection ("" <<; // collection->IsA()->GetName() << "":"" << collection <<; // "") from multiple threads at a time. holder="" << ""0x"" << std::hex << holder << "" readers="" << fReadSet.size() <<; // ""0x"" << std::hex << local << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:17,Error,Error,17,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,1,['Error'],['Error']
Availability,"// std::cerr << ""Error: old= "" << size << "" new="" << fCont.size() << '\n';; // std::cerr << ""Error "" << classRef.GetName() <<; // "" or one of its base classes override TObject::Hash but does not call TROOT::CallRecursiveRemoveIfNeeded; // in its destructor.\n"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:17,Error,Error,17,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,2,['Error'],['Error']
Availability,"// std::chrono::duration<double> elapsed2 = t2-tstart;; // time to compute training and test errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:93,error,errors,93,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['error'],['errors']
Availability,"// std::cout << "" ipar "" << i << "" sigma "" << sqrt(covMatrix(i,i)) << "" rel "" << sqrt(covMatrix(i,i))/std::abs(func->GetParameter(i)) << "" integral "" << integral << "" +/- "" << error << "" "" <<; // error/std::abs(integral) << std::endl;; // estimate numerical error (neglect correlations)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:176,error,error,176,hist/hist/src/TF1Helper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx,3,['error'],['error']
Availability,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:302,error,errors,302,math/minuit2/src/SimplexBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx,1,['error'],['errors']
Availability,"// std::cout << ""ERROR FINDING BIN!"" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,ERROR,ERROR,17,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['ERROR'],['ERROR']
Availability,"// std::cout << ""Error coef "" << i << "" -> "" << fCoefficientsRMS(i) << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,Error,Error,17,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['Error'],['Error']
Availability,"// std::cout << ""Error matrix "" << err << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:17,Error,Error,17,math/minuit2/src/MnPosDef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx,1,['Error'],['Error']
Availability,"// std::cout << ""\ti: "" << i; // << "" min: "";; // std::copy(min.begin(), min.end(), ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" max: "";; // std::copy(max.begin(), max.end(), ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" val: "" << val; // << "" error: "" << error; // << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:277,error,error,277,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['error'],['error']
Availability,"// std::cout << ""\ti: "" << i; // << "" x: "";; // std::copy(x1, x1+ndim, ostream_iterator<double>(std::cout, "" ""));; // std::cout << "" val: "" << value1; // << "" error: "" << error1; // << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:159,error,error,159,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['error']
Availability,"// std::cout << ""boostweight = "" << boostWeight << std::endl;; // ADA boosting, rescaling the weight of the wrong events according to the error level; // over the entire test sample rescaling all the weights to have the same sum, but without; // touching the original weights (changing only the boosted weight of all the events); // first reweight",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:138,error,error,138,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['error'],['error']
Availability,"// std::cout << ""computing error of :"" << h->GetBinCenter(i) << std::endl;; // //fr->floatParsFinal().Print(); fr->covarianceMatrix().Print();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:27,error,error,27,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// std::cout << ""result: \t"";; // std::cout << ig1.Result() << ""\t"" << ""error: \t"" << ig1.Error() << std::endl;; // std::cout << ""sigma: \t"" << ig1.Sigma();; // std::cout << ""\t"" << ""chi2: \t"" << ig1.ChiSqr() << std::endl;; // std::cout << ""\nTime using TF1::IntegralMultiple :\t"" << timer.RealTime() << std::endl;; // std::cout << ""\n------------------------------------"" << std::endl;; // std::cout << ""\t MISER.. \n"" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:72,error,error,72,math/mathcore/test/testIntegrationMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx,2,"['Error', 'error']","['Error', 'error']"
Availability,"// std::cout<<""result.back().Error().Dcovar()= ""<<result.back().Error().Dcovar()<<std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:29,Error,Error,29,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,4,['Error'],['Error']
Availability,"// std::function; // masking signature int(int) of freeFunc1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testTypeTraits.cxx:21,mask,masking,21,core/foundation/test/testTypeTraits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testTypeTraits.cxx,1,['mask'],['masking']
Availability,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case getObject; // has decided to return the owning ptr (for some reason) std::string _title =; // strlen(dataGraph->GetTitle()) ? dataGraph->GetTitle() : GetName(); if (!gROOT->GetStyle(_title.c_str())); // {; // if ( (style = getObject<TStyle>(_title)) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = const_cast<xRooNode&>(*this).acquireNew<TStyle>(_title.c_str(),; // TString::Format(""Style for %s component"", _title.c_str()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(dataGraph);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(dataGraph);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(dataGraph);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:49,alive,alive,49,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case; // getObject has decided to return the owning ptr (for some reason) if; // (!gROOT->GetStyle(h->GetTitle())) {; // if ( (style = getObject<TStyle>(h->GetTitle())) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = acquireNew<TStyle>(h->GetTitle(),; // TString::Format(""Style for %s component"", h->GetTitle()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(h);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(h);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(h);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }; // (TAttLine&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttFill&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttMarker&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:49,alive,alive,49,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// std::string proto;; // if (GetFunctionPrototype(D,proto)); // std::cout<<""\n\tFunction prototype: ""<<str_name + proto;; // else; // std::cout<<""Error in prototype formation"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:147,Error,Error,147,core/dictgen/src/SelectionRules.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx,1,['Error'],['Error']
Availability,"// std::string type_name;; // type_name = GetQualifiedName( instanceType, *clxx );; // fprintf(stderr,""ERROR: Could not findS TST for %s\n"",type_name.c_str());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:103,ERROR,ERROR,103,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['ERROR'],['ERROR']
Availability,"// std::unique_ptr<RooArgSet> _obs(_pdf->getParameters(*pars)); // using this ""trick"" to get observables can; // produce 'error' msg because of RooProdPdf trying to setup partial integrals",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:122,error,error,122,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['error'],['error']
Availability,"// still no error since lazy action",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx:12,error,error,12,tree/dataframe/test/dataframe_helpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx,4,['error'],['error']
Availability,"// stl classes won't be available, so no warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx:24,avail,available,24,html/src/THtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx,2,['avail'],['available']
Availability,"// stop because within tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:23,toler,tolerance,23,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['toler'],['tolerance']
Availability,"// stop boosting if needed when error has reached 0.5; // thought of counting a few steps, but it doesn't seem to be necessary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:32,error,error,32,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['error'],['error']
Availability,"// stop if error gets too small",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:11,error,error,11,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['error'],['error']
Availability,"// storage for cling errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx:21,error,errors,21,tree/dataframe/src/RDFUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx,1,['error'],['errors']
Availability,"// store always the error; // use for the moment bin center (should use bin integral)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:20,error,error,20,math/mathcore/src/DistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx,1,['error'],['error']
Availability,"// store bin errors when scaling since cannot anymore be computed as sqrt(N)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13,error,errors,13,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// store global min results (only if minimization is OK); // ignore cases when Hesse or IMprove return error different than zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:103,error,error,103,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['error'],['error']
Availability,"// store limits in the map; // minos return error limit = minValue +/- error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:44,error,error,44,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,2,['error'],['error']
Availability,"// strip pdfs of constraints (which cancel out in the ratio) to avoid unnecessary computations and computational errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:113,error,errors,113,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,1,['error'],['errors']
Availability,"// strncasecmp() is not available on non-POSIX systems, so define an; // alternative function here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:24,avail,available,24,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,1,['avail'],['available']
Availability,"// struct foo {...} constinit x;; // As shown above, type qualifiers and storage class specifiers absolutely; // can occur after class specifiers according to the grammar. However,; // almost no one actually writes code like this. If we see one of these,; // it is much more likely that someone missed a semi colon and the; // type/storage class specifier we're seeing is part of the *next*; // intended declaration, as in:; //; // struct foo { ... }; // typedef int X;; //; // We'd really like to emit a missing semicolon error instead of emitting; // an error on the 'int' saying that you can't have two type specifiers in; // the same declaration of X. Because of this, we look ahead past this; // token to see if it's a type specifier. If so, we know the code is; // otherwise invalid, so we can produce the expected semi error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:523,error,error,523,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,3,['error'],['error']
Availability,"// struct for dealing of generic Hessian computation, since it is available only in TFormula",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h:66,avail,available,66,hist/hist/inc/Math/WrappedMultiTF1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedMultiTF1.h,1,['avail'],['available']
Availability,"// struct holding options to pass down to TFile and TTree in this action",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:34,down,down,34,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,1,['down'],['down']
Availability,"// style hists according to available styles ... creating if necessary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:28,avail,available,28,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['avail'],['available']
Availability,"// subdir with downloaded PARs, under PackDir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:15,down,downloaded,15,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['down'],['downloaded']
Availability,// subrange mask should not contained in maximum lane mask for the vreg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:12,mask,mask,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,2,['mask'],['mask']
Availability,"// subtract 0.001 because of rounding errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLatex.cxx:38,error,errors,38,graf2d/graf/src/TLatex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLatex.cxx,1,['error'],['errors']
Availability,"// success (-1 == failure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:18,failure,failure,18,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['failure'],['failure']
Availability,"// sum bin content and error if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:23,error,error,23,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['error'],['error']
Availability,"// sum of weight squares are stored to compute errors in h1N histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:47,error,errors,47,hist/hist/src/TProfile2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx,2,['error'],['errors']
Availability,"// sum the bin contents and errors if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:28,error,errors,28,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,2,['error'],['errors']
Availability,"// suppress labels for negligible errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,error,errors,34,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,"// switch off linear fitting in case data has coordinate errors and the option is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:57,error,errors,57,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// switch(bool_expr) {...} is often a programmer error, e.g.; // switch(n && mask) { ... } // Doh - should be ""n & mask"".; // One can always use an if statement instead of switch(bool_expr).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:49,error,error,49,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,3,"['error', 'mask']","['error', 'mask']"
Availability,"// symmetric error for now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,error,error,13,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// symmetrize the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:18,error,error,18,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['error'],['error']
Availability,"// systematic errors and error on x doesn't change",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:14,error,errors,14,hist/hist/src/TGraphMultiErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx,2,['error'],"['error', 'errors']"
Availability,"// take decision to stop if fatal error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:34,error,error,34,tmva/tmva/src/MsgLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx,1,['error'],['error']
Availability,"// take the infinity values out of the error checking!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSpecFuncGamma.cxx:39,error,error,39,math/mathcore/test/testSpecFuncGamma.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSpecFuncGamma.cxx,1,['error'],['error']
Availability,"// targets might be masked (for events where the targets have not been computed yet)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:20,mask,masked,20,tmva/tmva/src/VariableDecorrTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx,2,['mask'],['masked']
Availability,"// tell parent to shut down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:23,down,down,23,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// tell parent we're shutting down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:30,down,down,30,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['down'],['down']
Availability,"// terminate through default handler; // No need to recover our state; there will be no ""next time"":; // the signal raised above will cause the program to quit.; //signal(signum, TerminalConfigUnix__handleSignal);; //sSignalHandlerActive = false;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.cpp:52,recover,recover,52,core/textinput/src/textinput/TerminalConfigUnix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.cpp,1,['recover'],['recover']
Availability,"// test TH2Poly setting and retrieving bin error ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx:43,error,error,43,hist/hist/test/test_TH2Poly_BinError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx,1,['error'],['error']
Availability,"// test error; //typedef double ( * FreeFunc ) ( double);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:8,error,error,8,math/mathmore/test/testGSLIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx,1,['error'],['error']
Availability,"// test fitting using TGraph2D ( chi2 will be larger since errors are 1); // should test with a TGraph2DErrors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:59,error,errors,59,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['errors']
Availability,"// test for bug 10815; // mixing user previous defined functions (available in gROOT); // and pre-defined functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:66,avail,available,66,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['avail'],['available']
Availability,"// test for error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:12,error,error,12,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,2,['error'],['error']
Availability,"// test for error bars or option E",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:12,error,error,12,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// test graph fit (errors are 1) do a re-normalization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:19,error,errors,19,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['errors']
Availability,"// test if enough events are available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:29,avail,available,29,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['avail'],['available']
Availability,"// test if error bars are not outside the limits; // otherwise they are truncated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:11,error,error,11,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// test if the marker is on the frame limits. If ""Yes"", the; // marker will not be drawn and the error bars will be readjusted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:97,error,error,97,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// test option W of ProjectionXY; // The error fails when built with weights. It is not properly calculated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,error,error,41,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['error']
Availability,"// test parameters (use interval of tolPar*err), where err is parameter error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:72,error,error,72,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['error'],['error']
Availability,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:353,error,error,353,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,2,"['error', 'fault']","['error', 'fault']"
Availability,"// the RVec<simple type> field optimization should ignore the mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_bulk.cxx:62,mask,mask,62,tree/ntuple/v7/test/ntuple_bulk.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_bulk.cxx,1,['mask'],['mask']
Availability,"// the Threshold Pivoting parameter may need to be increased during; // the algorithm if poor precision is obtained from the linear; // solves. kThresholdPivoting indicates the largest value we are; // willing to tolerate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h:213,toler,tolerate,213,math/matrix/inc/TDecompSparse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h,1,['toler'],['tolerate']
Availability,"// the actual work this function should do, all the rest is error handling:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:60,error,error,60,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,4,['error'],['error']
Availability,"// the below are set to default values since no info is; // available in rulefit.sum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:60,avail,available,60,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,1,['avail'],['available']
Availability,"// the class is no longer available?!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx:26,avail,available,26,bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,2,['avail'],['available']
Availability,"// the error has been reported",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TEventIter.cxx:7,error,error,7,proof/proofplayer/src/TEventIter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TEventIter.cxx,2,['error'],['error']
Availability,"// the error on the Mva value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:7,error,error,7,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['error'],['error']
Availability,"// the following is not robust, but by design, C++ classes get their; // dictionaries filled after creation (chicken & egg problem as they; // can return themselves in methods), whereas a derived Python class; // with method overrides will have a non-empty dictionary (even if it; // has no methods, it will at least have a module name)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:24,robust,robust,24,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['robust'],['robust']
Availability,"// the references values in the paper have a precision of only two decimal points; // in such a situation, it is natural that we increase the value tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:148,toler,tolerance,148,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['toler'],['tolerance']
Availability,"// the unconstrained space of independent variables. From physical point of; /// view we are interested only in a meaningful solution. Therefore, we have to; /// employ regularisation techniques (e.g. Gold deconvolution) and/or to; /// confine the space of allowed solutions to subspace of positive solutions.; ///; /// \image html TSpectrum_Deconvolution_wide3.jpg Fig. 14 The same spectrum like in Fig. 13, outlined bars show the contents of present components (peaks).; /// \image html TSpectrum_Deconvolution_wide4.jpg Fig. 15 Least squares solution of the system of linear equations without regularisation.; ///; /// ### Example 9 - script Deconvolution_wide.C; ///; /// When we employ Gold deconvolution algorithm we obtain the result given in; /// Fig. 16. One can observe that the resulting spectrum is smooth. On the; /// other hand the method is not able to decompose completely the peaks in the; /// spectrum.; ///; /// Example of Gold deconvolution for closely positioned wide peaks. The original; /// source spectrum is drawn with black color, the spectrum after the deconvolution; /// (10000 iterations) with red color.; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Deconvolution_wide.C; /// End_Macro; ///; /// ### Example 10 - script Deconvolution_wide_boost.C :; ///; /// Further let us employ boosting operation into deconvolution (Fig. 17).; ///; /// The original source spectrum is drawn with black color, the spectrum after; /// the deconvolution with red color. Number of iterations = 200, number of; /// repetitions = 50 and boosting coefficient = 1.2.; ///; /// One can observe that peaks are decomposed practically to delta functions.; /// Number of peaks is correct, positions of big peaks as well as their areas; /// are relatively well estimated. However there is a considerable error in; /// the estimation of the position of small right hand peak.; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Deconvolution_wide_boost.C; /// End_Macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx:8324,error,error,8324,hist/spectrum/src/TSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx,1,['error'],['error']
Availability,// there are some failure and we've narrowed them down,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:18,failure,failure,18,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,2,"['down', 'failure']","['down', 'failure']"
Availability,"// there is error in file=reco_103.root&item=Events;2/PCaloHits_g4SimHits_EcalHitsEE_Sim.&opt=dump;num:10;first:101; // it is workaround, but normally I/O should fail here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:12,error,error,12,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,// there is no failure with the full set of passes/funcs!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:15,failure,failure,15,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,1,['failure'],['failure']
Availability,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson use the one that's a ConstVar as the error to break a tie ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,error,error,78,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,3,['error'],['error']
Availability,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson; // std::cout << p->GetName() << "" extracted "" << prefitVal << "" "" << prefitError << "" from "";; // pConstr->deps().Print();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,error,error,78,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['error'],['error']
Availability,"// there's definitely an error, but we need to narrow it down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:25,error,error,25,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,2,"['down', 'error']","['down', 'error']"
Availability,"// these are copy/paste to work around failure to properly instantiate the template :(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/speed/histspeedtest.cxx:39,failure,failure,39,hist/histv7/speed/histspeedtest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/speed/histspeedtest.cxx,1,['failure'],['failure']
Availability,"// these are used down below to add obs p-values to legend, but up here because can trigger fits that create asimov",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:18,down,down,18,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['down'],['down']
Availability,"// this above fails on Windows - use a comparison with tolerance; // 12 is size of Transform3D internal vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:55,toler,tolerance,55,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['toler'],['tolerance']
Availability,"// this exists to avoid calling update excessively because it slows down x11 ... but still; // need to call update twice if have a legend drawn in order to relocate it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:68,down,down,68,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['down'],['down']
Availability,"// this fails on 32 bits - put a tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:33,toler,tolerance,33,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['toler'],['tolerance']
Availability,"// this happens when no dictionary is available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:38,avail,available,38,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['avail'],['available']
Availability,// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,robust,robust,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['robust'],['robust']
Availability,"// this is for errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:15,error,errors,15,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,1,['error'],['errors']
Availability,// this is index in current available data,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:28,avail,available,28,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['avail'],['available']
Availability,"// this is ok provided fPars (i.e. hypoSpace) stays alive as long as the hypoPoint ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:52,alive,alive,52,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['alive'],['alive']
Availability,"// this is rather error condition, should never happen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:18,error,error,18,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['error'],['error']
Availability,"// this is redundant only with libNew",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:11,redundant,redundant,11,core/cont/src/TBits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx,1,['redundant'],['redundant']
Availability,"// this is the case in which the symbol is not "", space or = and the last symbol read; // (diferent than space) is =. This is a situation which is represented by for example <class name = x""value"">; // this is an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:213,error,error,213,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['error'],['error']
Availability,"// this macro serves to assess the convergence of the MLP ANN. ; // It compares the error estimator for the training and testing samples.; // If overtraining occurred, the estimator for the training sample should ; // monotoneously decrease, while the estimator of the testing sample should ; // show a minimum after which it increases.; // input: - Input file (result from TMVA),; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/annconvergencetest.h:84,error,error,84,tmva/tmvagui/inc/TMVA/annconvergencetest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/annconvergencetest.h,1,['error'],['error']
Availability,"// this macro serves to assess the convergence of the MLP ANN.; // It compares the error estimator for the training and testing samples.; // If overtraining occurred, the estimator for the training sample should; // monotoneously decrease, while the estimator of the testing sample should; // show a minimum after which it increases.; // input: - Input file (result from TMVA),; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/annconvergencetest.cxx:83,error,error,83,tmva/tmvagui/src/annconvergencetest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/annconvergencetest.cxx,1,['error'],['error']
Availability,"// this next thing happens if the par has errors but the covariance matrix is empty; // this only happens if the fit was dodgy, so perhaps best to not even try to recover from this; // screwup ... hence I've commented out this fixup here and will let the errors be nan; // if(errVal==0) {; // Warning(""getPropagatedError"",""Missing variance for %s"",rrv.GetName());; // errVal = rrv.getError();; // V(ivar,ivar) = errVal*errVal;; // }; // Make Plus variation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:42,error,errors,42,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,3,"['error', 'recover']","['errors', 'recover']"
Availability,"// this one is always available but has lower precedence thanks to `...`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx:22,avail,available,22,tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx,1,['avail'],['available']
Availability,"// this should cause an error if we have",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:24,error,error,24,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['error'],['error']
Availability,"// this should never be used but help quiet down some compiler!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:44,down,down,44,core/base/inc/RtypesImp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h,1,['down'],['down']
Availability,"// this should not happen; set an error to prevent core dump and report",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:34,error,error,34,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['error'],['error']
Availability,"// this should throw an error; // we nned to implement a vectorized GetSave(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:24,error,error,24,hist/hist/inc/TF1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h,1,['error'],['error']
Availability,"// this tolerance is used to avoid having negative qmu due to numerical errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:8,toler,tolerance,8,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"// this will set error 1 for the empty bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:17,error,error,17,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['error'],['error']
Availability,"// thisMBB:; // addiu masklsb2,$0,-4 # 0xfffffffc; // and alignedaddr,ptr,masklsb2; // andi ptrlsb2,ptr,3; // sll shiftamt,ptrlsb2,3; // ori maskupper,$0,255 # 0xff; // sll mask,maskupper,shiftamt; // nor mask2,$0,mask; // sll incr2,incr,shiftamt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:141,mask,maskupper,141,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,4,['mask'],"['mask', 'maskupper']"
Availability,"// thisMBB:; // addiu masklsb2,$0,-4 # 0xfffffffc; // and alignedaddr,ptr,masklsb2; // andi ptrlsb2,ptr,3; // xori ptrlsb2,ptrlsb2,3 # Only for BE; // sll shiftamt,ptrlsb2,3; // ori maskupper,$0,255 # 0xff; // sll mask,maskupper,shiftamt; // nor mask2,$0,mask; // andi maskedcmpval,cmpval,255; // sll shiftedcmpval,maskedcmpval,shiftamt; // andi maskednewval,newval,255; // sll shiftednewval,maskednewval,shiftamt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:182,mask,maskupper,182,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,8,['mask'],"['mask', 'maskedcmpval', 'maskednewval', 'maskupper']"
Availability,"// throw on failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx:12,failure,failure,12,core/foundation/v7/test/base_exception.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx,1,['failure'],['failure']
Availability,"// throws exception if ufit not available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:32,avail,available,32,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['avail'],['available']
Availability,"// time to compute training and test errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:37,error,errors,37,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['error'],['errors']
Availability,"// tlk reference count goes down 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:28,down,down,28,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,1,['down'],['down']
Availability,"// to a void an error with VisualC++",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:16,error,error,16,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['error'],['error']
Availability,"// to avoid cases in chi2-test of profiles when error is zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:48,error,error,48,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['error'],['error']
Availability,"// to avoid that following minimization computes automatically the Minos errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:73,error,errors,73,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['error'],['errors']
Availability,"// to run minos I need function minimum class; // redo minimization from current state; // ROOT::Minuit2::FunctionMinimum min =; // GetMinimizer()->Minimize(*GetFCN(),fState, ROOT::Minuit2::MnStrategy(strategy), MaxFunctionCalls(),; // Tolerance());; // fState = min.UserState();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:236,Toler,Tolerance,236,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['Toler'],['Tolerance']
Availability,// to scale down points / lines for picking and outlines,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js:12,down,down,12,ui5/eve7/lib/EveElementsRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js,1,['down'],['down']
Availability,"// to set zero error on X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:15,error,error,15,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['error'],['error']
Availability,"// to seto zero error on X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:16,error,error,16,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,3,['error'],['error']
Availability,"// to show end of error markers, use line width attribute",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,error,error,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['error'],['error']
Availability,// toCharUnitsFromBits rounds down.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:30,down,down,30,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,1,['down'],['down']
Availability,"// todo: narrow this down; // For each kernel, what variables does it access directly or through; // callees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:21,down,down,21,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['down'],['down']
Availability,// tolerance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,toler,tolerance,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['toler'],['tolerance']
Availability,"// tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:3,toler,tolerance,3,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['toler'],['tolerance']
Availability,"// tolerance is 1E-12",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx:3,toler,tolerance,3,math/smatrix/test/testInversion.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx,1,['toler'],['tolerance']
Availability,"// tolerance used when calling Migrad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:3,toler,tolerance,3,math/minuit2/src/MnFunctionCross.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx,1,['toler'],['tolerance']
Availability,"// tolerance; // min->ExecuteCommand(""MIGRAD"",arglist,0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testMinimizer.cxx:3,toler,tolerance,3,math/minuit2/test/testMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testMinimizer.cxx,1,['toler'],['tolerance']
Availability,"// tolerance; //min->ExecuteCommand(""MIGRAD"",arglist,0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,toler,tolerance,3,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,1,['toler'],['tolerance']
Availability,// tprel_add is only used to indicate that a relocation should be emitted; // for an add instruction used in TP-relative addressing. It should not be; // expanded as if representing an actual instruction operand and so to; // encounter it here is an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp:250,error,error,250,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp,1,['error'],['error']
Availability,"// treat errors properly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:9,error,errors,9,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['error'],['errors']
Availability,// triangle-down,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:12,down,down,12,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['down'],['down']
Availability,"// trigger error or don't",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:11,error,error,11,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,1,['error'],['error']
Availability,"// triggered on the second button down within 350ms and within; // 3x3 pixels of the first button down, button up finishes action",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:34,down,down,34,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,2,['down'],['down']
Availability,"// true if an error rate check is to be done",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:14,error,error,14,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['error'],['error']
Availability,"// true indicates a failure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:20,failure,failure,20,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,7,['failure'],['failure']
Availability,"// true on failure, false otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:11,failure,failure,11,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['failure'],['failure']
Availability,"// true on failure, false otherwise; // If no {z} mark was found - Parser doesn't advance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:11,failure,failure,11,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['failure'],['failure']
Availability,"// trust downloaded files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:9,down,downloaded,9,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['down'],['downloaded']
Availability,"// try leaf, otherwise indicate failure by returning a typed null-object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TTreePyz.cxx:32,failure,failure,32,bindings/pyroot/pythonizations/src/TTreePyz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TTreePyz.cxx,1,['failure'],['failure']
Availability,"// try recovering the type_info of this type, no problem if we fail (as long as no one calls GetTypeId)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RJittedDefine.hxx:7,recover,recovering,7,tree/dataframe/inc/ROOT/RDF/RJittedDefine.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RJittedDefine.hxx,1,['recover'],['recovering']
Availability,// try to define scale-down factor,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:23,down,down,23,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['down'],['down']
Availability,"// try to find a triplet (alpha1, alpha2, alpha3) such that; // Error(alpha1)>Error(alpha2)<Error(alpha3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:64,Error,Error,64,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,3,['Error'],['Error']
Availability,"// try to load font (font must be in Root.TTFontPath resource); // to see which fontset we have available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TTF.cxx:96,avail,available,96,graf2d/graf/src/TTF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TTF.cxx,1,['avail'],['available']
Availability,"// try to recompute the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:24,error,error,24,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,2,['error'],['error']
Availability,"// try to reduce some error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:22,error,error,22,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['error'],['error']
Availability,"// try to reduce some error messages; //bool silentMode = (RooMsgService::instance().globalKillBelow() >= RooFit::ERROR || RooMsgService::instance().silentMode()) ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:22,error,error,22,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,// try to select hint with exact match of the position when several hints available,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:74,avail,available,74,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// try with error in X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:12,error,error,12,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,2,['error'],['error']
Availability,"// try-catch block to intercept any exception that may be thrown by Unwrap() so that this; // function never throws but returns RResult::Error instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx:137,Error,Error,137,tree/ntuple/v7/src/RField.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx,1,['Error'],['Error']
Availability,// tryParse() returns true on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:30,error,error,30,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,1,['error'],['error']
Availability,"// uncommenting following line slows down so keep computation for; // zero bincounts; //if (binCount <= 0) continue;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,down,down,37,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['down'],['down']
Availability,"// unconstrained (or at least couldn't determine constraint) ... use par range if no prefit error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:92,error,error,92,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// unconstrained, remove error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,error,error,25,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// uncorrelated systematic error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:27,error,error,27,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['error'],['error']
Availability,"// unsigned const int n_b = fNullDistr->GetSamplingDistribution().size();; // unsigned const int n_sb = fAltDistr->GetSamplingDistribution().size();; // if CLb() == 0 CLs = -1 so return a -1 error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:191,error,error,191,roofit/roostats/src/HypoTestResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx,1,['error'],['error']
Availability,"// unsigned int mask = kGCTile | kGCFillStyle |; // kGCTileStipXOrigin | kGCTileStipYOrigin;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlDraw.cxx:16,mask,mask,16,gui/guihtml/src/TGHtmlDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlDraw.cxx,1,['mask'],['mask']
Availability,"// unsigned int mask;; // mask = kGCTile | kGCFillStyle | kGCGraphicsExposures;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlSizer.cxx:16,mask,mask,16,gui/guihtml/src/TGHtmlSizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlSizer.cxx,2,['mask'],['mask']
Availability,"// unweighted - weighted comparison; // case of error = 0 and content not zero is treated without problems by excluding second chi2 sum; // and can be considered as a data-theory comparison",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:48,error,error,48,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// up & left, right, down, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGToolTip.cxx:21,down,down,21,gui/gui/src/TGToolTip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGToolTip.cxx,1,['down'],['down']
Availability,// update color first so currentColor becomes available for this node,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:46,avail,available,46,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// update error cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx:10,error,error,10,tmva/tmva/src/SVWorkingSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVWorkingSet.cxx,1,['error'],['error']
Availability,"// update error matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:10,error,error,10,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,2,['error'],['error']
Availability,"// update errors; // update global histograms statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10,error,errors,10,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['errors']
Availability,"// update minimizer options when re-doing a Fit or computing Hesse or Minos errors; // create a new minimizer if it is different type; // minimizer type string stored in FitResult is ""minimizer name"" + "" / "" + minimizer algo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:76,error,errors,76,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['error'],['errors']
Availability,"// update the error fields and weights of all pre-synapses, sequential mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:14,error,error,14,tmva/tmva/inc/TMVA/TNeuron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h,1,['error'],['error']
Availability,"// update the error fields of all pre-synapses, batch mode; // to actually update the weights, call adjust synapse weights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:14,error,error,14,tmva/tmva/inc/TMVA/TNeuron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h,1,['error'],['error']
Availability,"// update the x positions to the means for each bin and use poisson asymmetric errors for data ..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,error,errors,79,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['errors']
Availability,"// update user state for new value of up (scaling of errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h:53,error,errors,53,math/minuit2/inc/Minuit2/FunctionMinimum.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h,1,['error'],['errors']
Availability,"// upper error for parameter par",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:9,error,error,9,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['error'],['error']
Availability,"// use C++-side operators if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:29,avail,available,29,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['avail'],['available']
Availability,"// use ROOT error reporting system",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Error.h:12,error,error,12,math/mathcore/inc/Math/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Error.h,2,['error'],['error']
Availability,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:32,error,error,32,math/mathcore/test/stress/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h,7,['error'],['error']
Availability,"// use a static variable to get default minimizer options for error def; // to see if user has changed it later on. If it has not been changed we set; // for the likelihood method an error def of 0.5; // t.b.d : multiply likelihood by 2 so have same error def definition as chi2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:62,error,error,62,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,3,['error'],['error']
Availability,"// use an estimated error from the global histogram scale",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:20,error,error,20,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,4,['error'],['error']
Availability,"// use as approximated error as 1 scaled by a scaling ratio; // estimated from the total sum weight and sum weight squared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:23,error,error,23,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['error'],['error']
Availability,"// use asymptotic error if possible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistError.cxx:18,error,error,18,roofit/roofitcore/src/RooHistError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistError.cxx,1,['error'],['error']
Availability,"// use batch size <= 16 or get numerical error in numrical gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCudnn.cxx:41,error,error,41,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCudnn.cxx,1,['error'],['error']
Availability,// use console error above warning serverity,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:15,error,error,15,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['error'],['error']
Availability,"// use coordinate or asym errors in case option is set and type is consistent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:26,error,errors,26,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['errors']
Availability,"// use current value and error on v as constraint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,error,error,25,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// use default abs tolerance = relative tolerance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:19,toler,tolerance,19,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,['toler'],['tolerance']
Availability,"// use default copy-ctor and assignment operators; // using ParamFunction::operator();; /**; Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""https://www.gnu.org/software/gsl/doc/html/poly.html"">documentation</A> ); For the case of n = 4 by default an analytical algorithm is used from an implementation by; Andrew W. Steiner and Andy Buckley which is a translation from the original Cenrlib routine; (< HREF=""https://cds.cern.ch/record/2050876/files/c208.html"">RRTEQ4</A> ).; Note that depending on the coefficients the result could be not very accurate if the discriminant of the resolvent cubic; equation is very small. In that case it might be more robust to use the numerical method, by calling directly FindNumRoots(). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:791,robust,robust,791,math/mathmore/inc/Math/Polynomial.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h,1,['robust'],['robust']
Availability,"// use empty bin when not using Neyman chisquare (observed error)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:59,error,error,59,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['error']
Availability,"// use expm1 function to avoid errors at small x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:31,error,errors,31,math/mathcore/src/ProbFuncMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx,1,['error'],['errors']
Availability,"// use formula for binomial error in case of weighted events; // expression can be derived using a MLE for a weighted binomial likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:28,error,error,28,roofit/roostats/src/SamplingDistribution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx,1,['error'],['error']
Availability,"// use larger tolerance due to truncation error of Landau",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:14,toler,tolerance,14,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"// use log1p for avoid errors at small z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:23,error,errors,23,math/mathcore/src/QuantFuncMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx,1,['error'],['errors']
Availability,"// use lower value since hitro is not very precise; // use ks for hitro since chi2 gives too big error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx:97,error,error,97,math/unuran/test/unuranMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx,1,['error'],['error']
Availability,// use manually created mipmaps if available; // if there are no manual mipmaps; // set 0 level mipmap and then use GL to generate other mipmap levels,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:35,avail,available,35,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['avail'],['available']
Availability,"// use mask to avoid warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx:7,mask,mask,7,core/unix/src/TUnixSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx,1,['mask'],['mask']
Availability,"// use normal error calculation using variance of MLE with weights (F.James 8.5.2); // this is the same formula used in ROOT for TH1::Divide(""B"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:14,error,error,14,hist/hist/src/TGraphAsymmErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx,2,['error'],['error']
Availability,"// use points either side as error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:29,error,error,29,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['error'],['error']
Availability,"// use pre-retrieved fits if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:29,avail,available,29,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['avail'],['available']
Availability,"// use student quantile in case of normalized errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:46,error,errors,46,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['error'],['errors']
Availability,"// use the PyString macro's to by-pass error checking; do not adopt the buffer,; // as the local TBufferFile can go out of scope (there is no copying)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx:39,error,error,39,bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx,1,['error'],['error']
Availability,// use the concatenated `hi` and `lo` registers; // to store doubleword values; // Fixme: Not triggering the use of both hi and low; // This will generate an error message,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:158,error,error,158,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['error'],['error']
Availability,"// use to keep alive for access from GetStyle below, in case getObject has decided to; // return the owning ptr (for some reason)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,alive,alive,15,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// use tolerance - but never smaller than 1 (default in RooMinimizer)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:7,toler,tolerance,7,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['toler'],['tolerance']
Availability,"// use tolerance factor of 10 smaller than parameter errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx:7,toler,tolerance,7,hist/hist/src/TF1Helper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1Helper.cxx,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"// use tolerance for passing robust parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:7,toler,tolerance,7,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,2,"['robust', 'toler']","['robust', 'tolerance']"
Availability,"// use tolerance to generate int with the desired precision from a real number for hashing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTessellated.cxx:7,toler,tolerance,7,geom/geom/src/TGeoTessellated.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTessellated.cxx,1,['toler'],['tolerance']
Availability,"// used when started by front-end program to signal that; // splash screen can be popped down (TRint::PrintLogo())",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:89,down,down,89,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['down'],['down']
Availability,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of rootcling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,avail,available,37,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['avail'],['available']
Availability,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of; // rootcling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,avail,available,37,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,2,['avail'],['available']
Availability,"// user authentication (does not return in case of failure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:51,failure,failure,51,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['failure'],['failure']
Availability,"// uses most precise hesse settings (step sizes and g2 tolerances)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:55,toler,tolerances,55,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['toler'],['tolerances']
Availability,// utc_clock and utc_time are only available since C++20. Add enough code to; // support formatting date/time in UTC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Chrono.h:35,avail,available,35,interpreter/llvm-project/llvm/include/llvm/Support/Chrono.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Chrono.h,1,['avail'],['available']
Availability,"// v16i8 LD_SPLAT addr; // ======>; // Mask = LVSR/LVSL 0, addr; // LoadLow = LVX 0, addr; // Perm = VPERM LoadLow, LoadLow, Mask; // Splat = VSPLTB 15/0, Perm; //; // v8i16 LD_SPLAT addr; // ======>; // Mask = LVSR/LVSL 0, addr; // LoadLow = LVX 0, addr; // LoadHigh = LVX (LI, 1), addr; // Perm = VPERM LoadLow, LoadHigh, Mask; // Splat = VSPLTH 7/0, Perm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:39,Mask,Mask,39,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,4,['Mask'],['Mask']
Availability,"// v16i8 is a special case, as we have 16 entries but only 8 positional bits; // per entry. We split it into two halves, apply the mask, zip the halves to; // create 8x 16-bit values, and the perform the vector reduce.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:131,mask,mask,131,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,// vXi1 can be efficiently extracted with MOVMSK.; // TODO: AVX512 predicate mask handling.; // NOTE: This doesn't work well for roundtrip scalarization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:77,mask,mask,77,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['mask'],['mask']
Availability,"// vXi32 truncate instructions are available with AVX512F.; // vXi16 truncate instructions are only available with AVX512BW.; // For 256-bit or smaller vectors, we require VLX.; // FIXME: We could widen truncates to 512 to remove the VLX restriction.; // If the result type is 256-bits or larger and we have disable 512-bit; // registers, we should go ahead and use the pack instructions if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:35,avail,available,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['avail'],['available']
Availability,// vXi8 shifts - shift as v8i16 + mask result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,mask,mask,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,// v_cmp_class_* etc. use a 10-bit mask for what operation is checked.; // The result is true if any of these tests are true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h:35,mask,mask,35,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,1,['mask'],['mask']
Availability,"// v_rcp_f32 and v_rsq_f32 do not support denormals, and according to; // the CI documentation has a worst case error of 1 ulp.; // OpenCL requires <= 2.5 ulp for 1.0 / x, so it should always be OK to; // use it as long as we aren't trying to use denormals.; //; // v_rcp_f16 and v_rsq_f16 DO support denormals and 0.51ulp.; // 1 / x -> RCP(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:112,error,error,112,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['error'],['error']
Availability,"// v_rcp_f32 and v_rsq_f32 do not support denormals, and according to; // the CI documentation has a worst case error of 1 ulp.; // OpenCL requires <= 2.5 ulp for 1.0 / x, so it should always be OK to; // use it as long as we aren't trying to use denormals.; //; // v_rcp_f16 and v_rsq_f16 DO support denormals and 0.51ulp.; // 1.0 / sqrt(x) -> rsq(x); // XXX - Is UnsafeFPMath sufficient to do this for f64? The maximum ULP; // error seems really high at 2^29 ULP.; // 1.0 / x -> rcp(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:112,error,error,112,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['error'],['error']
Availability,"// v_rcp_f32 and v_rsq_f32 do not support denormals, and according to; // the CI documentation has a worst case error of 1 ulp.; // OpenCL requires <= 2.5 ulp for 1.0 / x, so it should always be OK; // to use it as long as we aren't trying to use denormals.; //; // v_rcp_f16 and v_rsq_f16 DO support denormals.; // NOTE: v_sqrt and v_rcp will be combined to v_rsq later. So we don't; // insert rsq intrinsic here.; // 1.0 / x -> rcp(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:112,error,error,112,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['error'],['error']
Availability,"// vadc, vsbc are special cases. These instructions have no mask register.; // The destination register could not be V0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:60,mask,mask,60,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['mask'],['mask']
Availability,"// validateOutputConstraint, validateInputConstraint - Checks that; // a constraint is valid and provides information about it.; // FIXME: These should return a real error instead of just true/false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:166,error,error,166,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['error'],['error']
Availability,"// value of h parameter used in robust fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:32,robust,robust,32,hist/hist/inc/Foption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h,1,['robust'],['robust']
Availability,"// values are the keys available in fMap",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RResultMap.hxx:23,avail,available,23,tree/dataframe/inc/ROOT/RDF/RResultMap.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RResultMap.hxx,1,['avail'],['available']
Availability,"// variable index can't be handled in mask registers,; // extend vector to VR512/128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:38,mask,mask,38,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// vcpop sequences, see vreduction-mask.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:35,mask,mask,35,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,1,['mask'],['mask']
Availability,"// vcpop sequences, see vreduction-mask.ll. umax, smin actually only; // cost 2, but we don't have enough info here so we slightly over cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:35,mask,mask,35,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,1,['mask'],['mask']
Availability,// vcpop.m with additional mask and VL operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:27,mask,mask,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,"// vector calls don't get here, unless a method is looked up on an instance, for; // e.g. class methods (C++ static); notify downstream to expect a 'self'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:125,down,downstream,125,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['down'],['downstream']
Availability,"// vector of output errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:20,error,errors,20,math/minuit/inc/TMinuitMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h,1,['error'],['errors']
Availability,"// verbose to catch duplicate errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:30,error,errors,30,roofit/roofitcore/src/RooArgSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx,2,['error'],['errors']
Availability,"// verify whether the dictionary of this class is fully available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:56,avail,available,56,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['avail'],['available']
Availability,// vfirst.m with additional mask and VL operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:28,mask,mask,28,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['mask']
Availability,// virtual void Initialize();; /*! Computes activation of the layer for the given input. The input; * must be in 3D tensor form with the different matrices corresponding to; * different events in the batch. It spatially downsamples the input; * matrices. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h:220,down,downsamples,220,tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/MaxPoolLayer.h,1,['down'],['downsamples']
Availability,"// virtual void SetUp() { }; // FIXME: We cannot rely on TearDown because it is executed at the end of; // every test. This triggers another bug in the dictionary generation phase,; // possibly due to concurrent file system operations.; //virtual void TearDown() {; // If there are failures we want to keep the created files.; //if (!::testing::Test::HasFatalFailure()); // cleanup();; //}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:282,failure,failures,282,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,1,['failure'],['failures']
Availability,"// visit NHotBlocks,; // traverse upwards to entry; // traverse downwards to end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/SpeculateAnalyses.cpp:64,down,downwards,64,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/SpeculateAnalyses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/SpeculateAnalyses.cpp,1,['down'],['downwards']
Availability,"// vmin and vmax aren't available in a scalar form, so we can use; // a NEON instruction with an undef lane instead. This has a performance; // penalty on some cores, so we don't do this unless we have been; // asked to by the core tuning model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:24,avail,available,24,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['avail'],['available']
Availability,"// vmv.v.v doesn't have a mask operand, so we may be able to inflate the; // register class for the destination and merge operands e.g. VRNoV0 -> VR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFoldMasks.cpp:26,mask,mask,26,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFoldMasks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFoldMasks.cpp,1,['mask'],['mask']
Availability,"// void fit1DHist(); // {; // vector<double> min(1);; // min[0] = 0.;; // vector<double> max(1);; // max[0] = 10.;; // vector<int> nbins(1);; // nbins[0] = 10;; // TH1D* h1 = new TH1D(""1D Original Hist Fit"", ""h1-Original"", nbins[0], min[0], max[0]);; // TH1D* h2 = new TH1D(""1D Blanked Hist Fit"", ""h1-Blanked"", nbins[0], min[0], max[0]);; // TF1* f1 = new TF1(""MyGaus"", ""[0]*TMath::Gaus([1],[2])"", min[0], max[0]);; // f1->SetParameters(10., 5., 2.);; // h1->FillRandom(""MyGaus"",1000);; // cout << ""Retrieving the Sparse Data Structure"" << endl;; // ROOT::Fit::SparseData d(h1);; // ROOT::Fit::FillData(d, h1, 0);; // ROOT::Fit::BinData* bd = d.GetBinData();; // cout << ""Filling second histogram"" << endl;; // for ( unsigned int i = 0; i < bd->NPoints(); ++i); // {; // const double* x;; // double value, error;; // x = bd->GetPoint(i, value, error);; // value = (value)?value:-10;; // h2->Fill(x[0], value);; // }; // TCanvas* c = new TCanvas(""Histogram 2D"");; // c->Divide(1,2);; // c->cd(1);; // h1->Draw(""lego2Z"");; // c->cd(2);; // h2->Draw(""lego2Z"");; // // Fit preparation; // bool ret;; // ROOT::Fit::Fitter fitter;; // ROOT::Math::WrappedMultiTF1 wf1(*f1);; // fitter.Config().SetMinimizer(""TMinuit"");; // cout << ""\n ******* Chi2Fit with Original BinData *******"" << endl;; // ROOT::Fit::BinData bdOriginal;; // ROOT::Fit::FillData(bdOriginal, h1, 0);; // ret = fitter.Fit(bdOriginal, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // cout << ""\n ******* Chi2Fit with BinData and NoCeros *******"" << endl;; // ROOT::Fit::BinData* bdNoCeros = d.GetBinDataNoCeros();; // cout << ""bdOriginal:\n"" << bdOriginal << endl;; // cout << ""bdNoCeros:\n"" << *bdNoCeros << endl;; // cout << ""Equals: "" << (bdOriginal == *bdNoCeros) << endl;; // ret = fitter.Fit(*bdNoCeros, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // delete bd;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:806,error,error,806,math/mathcore/test/fit/SparseFit3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx,2,['error'],['error']
Availability,// void rewind(FILE *stream);; // This function indicates error only by setting of 'errno'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:58,error,error,58,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['error'],['error']
Availability,// vpmovwb; // sign extend is vpcmpeq+maskedmove+vpmovdw+vpacksswb; // zero extend is vpcmpeq+maskedmove+vpmovdw+vpsrlw+vpackuswb,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:38,mask,maskedmove,38,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['mask'],['maskedmove']
Availability,// vrgather + cost of generating the mask constant.; // We model this for an unknown mask with a single vrgather.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:37,mask,mask,37,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,2,['mask'],['mask']
Availability,// vt.maskc for XVentanaCondOps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:6,mask,maskc,6,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['maskc']
Availability,// vt.maskcn for XVentanaCondOps.; // FP to 32 bit int conversions for RV64. These are used to keep track of the; // result being sign extended to 64 bit. These saturate out of range inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:6,mask,maskcn,6,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['mask'],['maskcn']
Availability,// walk down chain,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,down,down,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['down'],['down']
Availability,// walk down the postDomTree,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:8,down,down,8,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['down'],['down']
Availability,// wasm.catch() will be lowered down to wasm 'catch' instruction in; // instruction selection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp:32,down,down,32,interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp,2,['down'],['down']
Availability,"// watch for error from ppoll (which is called inside receive functions) caused by SIGTERM from master; // try to dequeue a task",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/worker.cxx:13,error,error,13,roofit/multiprocess/src/worker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/worker.cxx,1,['error'],['error']
Availability,"// we add it to the list of terminated slave infos instead, so that it; // stays available in the .workers persistent file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:81,avail,available,81,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['avail'],['available']
Availability,"// we always do things ourselves -- actually, always delegate further down the line ;-)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:70,down,down,70,roofit/roofitcore/src/RooAddition.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx,1,['down'],['down']
Availability,"// we are at EOL, move down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.cpp:23,down,down,23,core/textinput/src/textinput/TerminalDisplay.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.cpp,1,['down'],['down']
Availability,// we are guaranteed to find an available float register,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:32,avail,available,32,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['avail'],['available']
Availability,"// we are looking downwards",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx:18,down,downwards,18,geom/geom/src/TGeoNavigator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx,1,['down'],['downwards']
Availability,"// we are not using errors in chi2, it is like setting = 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:20,error,errors,20,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// we can be silent now, the error will come later",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPolyFunc.cxx:29,error,error,29,roofit/roofitcore/src/RooPolyFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPolyFunc.cxx,1,['error'],['error']
Availability,"// we can't emit a 64-bit unit; // Use ## as a comment string so that .s files generated by llvm can go; // through the GCC preprocessor without causing an error. This is needed; // because ""clang foo.s"" runs the C preprocessor, which is usually reserved; // for .S files on other systems. Perhaps this is because the file system; // wasn't always case preserving or something.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp:156,error,error,156,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp,1,['error'],['error']
Availability,"// we do not check the return value since we check later if error in X and Y is zero for skipping the point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx:60,error,error,60,hist/hist/src/HFitInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitInterface.cxx,1,['error'],['error']
Availability,"// we do not want to ignore the weights; // if (bEffective && (pass->GetSumw2()->fN == 0 || total->GetSumw2()->fN == 0) ) {; // Warning(""Divide"",""histogram have been computed with weights but the sum of weight squares are not stored in the histogram. Error calculation is performed ignoring the weights"");; // bEffective = false;; // }; //parse option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:251,Error,Error,251,hist/hist/src/TGraphAsymmErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx,1,['Error'],['Error']
Availability,"// we do not want to ignore the weights; // if (bEffective && (pass->GetSumw2()->fN == 0 || total->GetSumw2()->fN == 0) ) {; // Warning(""Divide"",""histogram have been computed with weights but the sum of weight squares are not stored in the; // histogram. Error calculation is performed ignoring the weights""); bEffective = false;; // }; // parse option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx:255,Error,Error,255,hist/hist/src/TGraphMultiErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphMultiErrors.cxx,1,['Error'],['Error']
Availability,"// we have a non-void block with an expression, continue checking; // C99 6.8.6.4p3(136): The return statement is not an assignment. The; // overlap restriction of subclause 6.5.16.1 does not apply to the case of; // function return.; // In C++ the return statement is handled via a copy initialization.; // the C version of which boils down to CheckSingleAssignmentConstraints.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:337,down,down,337,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['down'],['down']
Availability,// we have illegal '<' try to recover,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:30,recover,recover,30,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,2,['recover'],['recover']
Availability,"// we haven't passed all the required features to the model, throw an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TFLiteUtils.cpp:70,error,error,70,interpreter/llvm-project/llvm/lib/Analysis/TFLiteUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TFLiteUtils.cpp,1,['error'],['error']
Availability,// we need mask of all zeros or ones with same size of the other; // operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:11,mask,mask,11,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// we need the errors in weighted likelihood fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:15,error,errors,15,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,1,['error'],['errors']
Availability,"// we reached the current data member before; // reaching the index so we have not written it yet!; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) has not been defined before the array \n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:129,error,error,129,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['error'],['error']
Availability,"// we read back float (scale errors then)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:29,error,errors,29,math/mathcore/test/stress/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx,1,['error'],['errors']
Availability,"// when VDT is not available; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx:19,avail,available,19,tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx,1,['avail'],['available']
Availability,"// when not available; // if (st.Error().HesseFailed() || st.Error().InvertFailed() ) fCovStatus = -1;; // when available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:12,avail,available,12,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,4,"['Error', 'avail']","['Error', 'available']"
Availability,"// when z is neg error is larger in eta when calculated from polar; // since we have a larger error in theta which is closer to pi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx:17,error,error,17,math/genvector/test/coordinates3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx,2,['error'],['error']
Availability,"// while at least some children alive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:32,alive,alive,32,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['alive'],['alive']
Availability,"// will set proper error msg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx:19,error,error,19,bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx,1,['error'],['error']
Availability,// winsock2.h must be included before afunix.h. Briefly turn off clang-format to; // avoid error.; // clang-format off,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp:91,error,error,91,interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp,1,['error'],['error']
Availability,"// with a dense layer (also use not too large batch size or input size to avoid numerical errors)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCudnn.cxx:90,error,errors,90,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCudnn.cxx,1,['error'],['errors']
Availability,"// write back DSE - If we write back the same value we just loaded from; // the same location and haven't passed any intervening writes or ordering; // operations, we can remove the write. The primary benefit is in allowing; // the available load table to remain valid and value forward past where; // the store originally was.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:232,avail,available,232,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['avail'],['available']
Availability,"// write first in "".<file>"" then rename to recover from crash during writing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:43,recover,recover,43,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['recover'],['recover']
Availability,"// x+, y+, z+, z-down 3 /|\ 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x+, y+, z-, z-down 3 / \ 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x+, y-, z+, z-down |/6\| Bottom view",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x+, y-, z-, z-down Top view | | |",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x-, y+, z+, z-down | | |",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x-, y+, z-, z-down |\2/|",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x-, y-, z+, z-down 7 \ / 5; // 8 4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x-, y-, z-, z-down 7 \|/ 5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx:17,down,down,17,graf3d/g3d/src/TView3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TView3D.cxx,1,['down'],['down']
Availability,"// x-error will be the (weighted) standard deviation of the x values ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:5,error,error,5,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['error'],['error']
Availability,"// x86-64 psABI names SHT_X86_64_UNWIND as the canonical type for .eh_frame,; // but GNU as emits SHT_PROGBITS .eh_frame for .cfi_* directives. Don't; // error for SHT_PROGBITS .eh_frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp:154,error,error,154,interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,1,['error'],['error']
Availability,"// x87 FPU Control Word: mask all floating-point exceptions, sets rounding to; // nearest. FPU precision is set to 53 bits on Windows and 64 bits otherwise; // for compatibility with glibc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,mask,mask,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"// xRooNode xRooNode::fitTo(const xRooNode& _data) const {; //; //; // auto _pdf = get<RooAbsPdf>();; // if (!_pdf) throw std::runtime_error(""Not a pdf"");; //; // auto _globs = _data.globs(); // keep alive because may own the globs; // RooArgSet globsSet(_globs.argList());; //; // std::shared_ptr<RooSimultaneous> newPdf;; // if(auto s = get<RooSimultaneous>(); s) {; // auto rangeName = GetRange();; // if (rangeName) {; // // need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231; // std::vector<TString> chanPatterns;; // TStringToken pattern(rangeName, "","");; // while (pattern.NextToken()) {; // chanPatterns.emplace_back(pattern);; // }; // auto& _cat = const_cast<RooAbsCategoryLValue&>(s->indexCat());; // newPdf = std::make_shared<RooSimultaneous>(TString::Format(""%s_reduced"",GetName()),""Reduced model"",_cat);; // for(auto& c : variations()) {; // TString cName(c->GetName());; // cName = cName(cName.Index('=')+1,cName.Length());; // _cat.setLabel(cName);; // bool matchAny=false;; // for(auto& p : chanPatterns) {; // if (cName.Contains(TRegexp(p,true))) { matchAny=true; break; }; // if (_cat.hasRange(p) && _cat.inRange(p)) { matchAny=true; break; }; // }; // if(matchAny) {; // newPdf->addPdf( *c->get<RooAbsPdf>(), cName );; // }; // }; // RooFitResultTree t(newPdf->GetName(),"""",*newPdf);; // auto _fr = std::const_pointer_cast<RooFitResult>(t.fitTo(_data.get<RooAbsData>(), &globsSet));; // xRooNode parent(_data.GetName(),nullptr,*this);; // xRooNode out(_fr->GetName(),/*acquire(_fr)*/ _fr,parent);; // // do full propagation by 'checking' the fr ...; // out.Checked(&out,true);; // return out;; // }; // }; //; //; //; // std::string treeName = TString::Format(""fits_%s"",GetName()).Data();; //; // auto _frt = getObject<TTree>(treeName); // get existing frt; //; // std::shared_ptr<RooFitResultTree> t;; // if (_frt) {; // t = std::make_shared<RooFitResultTree>(_frt.get());; // } else {; // t = std::make_shared<RooFitResultTree>(treeNam",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:200,alive,alive,200,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['alive'],['alive']
Availability,"// zero all bits in mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/ProcessManager.cxx:20,mask,mask,20,roofit/multiprocess/src/ProcessManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/ProcessManager.cxx,1,['mask'],['mask']
Availability,"// zext - if we just need the bottom element then we can mask:; // zext(and(x,c)) -> and(x,c') iff the zext is the only user of the and.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:57,mask,mask,57,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['mask'],['mask']
Availability,"// zext(trunc x) - > and (aext/copy/trunc x), mask; // zext(sext x) -> and (sext x), mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:46,mask,mask,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,2,['mask'],['mask']
Availability,"// {'deviance', 'exponential'}, optional (default='deviance'); //loss function to be optimized. 'deviance' refers to; //deviance (= logistic regression) for classification; //with probabilistic outputs. For loss 'exponential' gradient; //boosting recovers the AdaBoost algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:247,recover,recovers,247,tmva/pymva/inc/TMVA/MethodPyGTB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h,1,['recover'],['recovers']
Availability,// {; // static std::vector<double> err;; // err.resize(fDim);; // return &err.front();; // }; /** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:229,error,errors,229,math/mathmore/inc/Math/GSLNLSMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h,1,['error'],['errors']
Availability,"// ~ICANON - non-canonical = input available immediately, no EOL needed, no processing, line editing disabled; // ~ISIG - don't sent signals on input chars; // ~TOSTOP - don't send SIGTTOU; // ~IEXTEN - disable implementation-defined input processing, don't process spec chars (EOL2, LNEXT...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderUnix.cpp:35,avail,available,35,core/textinput/src/textinput/StreamReaderUnix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderUnix.cpp,1,['avail'],['available']
Availability,"//! Graph with the errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:19,error,errors,19,hist/hist/inc/TKDE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h,1,['error'],['errors']
Availability,"//! light states (on/off) mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLLightSet.h:26,mask,mask,26,graf3d/gl/inc/TGLLightSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLLightSet.h,1,['mask'],['mask']
Availability,"//!< @internal @brief see error()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:26,error,error,26,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['error'],['error']
Availability,"//!Error message in case of checksum/version mismatch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TStreamerElement.h:3,Error,Error,3,core/meta/inc/TStreamerElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TStreamerElement.h,1,['Error'],['Error']
Availability,"//!Indicates whether the ClassInfo is supposed to be available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TClass.h:53,avail,available,53,core/meta/inc/TClass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TClass.h,1,['avail'],['available']
Availability,"//#define TEST_STATIC_CHECK // for testing compiler failures (static check)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:52,failure,failures,52,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['failure'],['failures']
Availability,"//#else; // ERROR(""updating sample weights currently not possible without boost!"");; //#endif",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:12,ERROR,ERROR,12,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['ERROR'],['ERROR']
Availability,"//#endif; /*; * Store trained model to file (only if option 'SaveBestOnly' is NOT activated,; * because we do not want to override the best model checkpoint); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:146,checkpoint,checkpoint,146,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['checkpoint'],['checkpoint']
Availability,"//*-* -------------Check if, in case of inconsistencies, we are requested to; //*-* -------------attempt recovering the file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:105,recover,recovering,105,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['recover'],['recovering']
Availability,"//+1 sigma error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:11,error,error,11,roofit/roostats/src/HypoTestInverterPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx,1,['error'],['error']
Availability,"//+1 so that the line down to 0 is added as well",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCandle.cxx:22,down,down,22,graf2d/graf/src/TCandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCandle.cxx,1,['down'],['down']
Availability,"//- access to the python interpreter ----------------------------------------; // import a python module, making its classes available to Cling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h:125,avail,available,125,bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,1,['avail'],['available']
Availability,"//-- SystemZMachineScheduler.cpp - SystemZ Scheduler Interface -*- C++ -*---==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // -------------------------- Post RA scheduling ---------------------------- //; // SystemZPostRASchedStrategy is a scheduling strategy which is plugged into; // the MachineScheduler. It has a sorted Available set of SUs and a pickNode(); // implementation that looks to optimize decoder grouping and balance the; // usage of processor resources. Scheduler states are saved for the end; // region of each MBB, so that a successor block can learn from it.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.cpp:581,Avail,Available,581,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.cpp,1,['Avail'],['Available']
Availability,"//-- slows down x11 so trying to avoid",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,down,down,11,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['down'],['down']
Availability,"//-- static methods to set configurations; /// set tolerance (absolute and relative); /// relative tolerance is only use to verify the convergence; /// do it is a minor parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:51,toler,tolerance,51,math/mathmore/inc/Math/GSLMultiRootFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h,2,['toler'],['tolerance']
Availability,"//---- ClassDefT macros for templates with one template argument ---------------; // ClassDefT corresponds to ClassDef; // ClassDefT2 goes in the same header as ClassDefT but must be; // outside the class scope; // ClassImpT corresponds to ClassImp; /// This ClassDefT is strictly redundant and is kept only for; /// backward compatibility. \deprecated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:281,redundant,redundant,281,core/base/inc/Rtypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h,1,['redundant'],['redundant']
Availability,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:195,error,errors,195,core/base/inc/Rtypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h,2,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,"//---- Paths & Files -----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. This is a protected function called; /// from the OS specific system classes, like TUnixSystem and TWinNTSystem.; /// Returns the expanded filename or 0 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:592,error,error,592,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['error'],['error']
Availability,"//---- Standard output redirection ---------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Redirect standard output (stdout, stderr) to the specified file.; /// If the file argument is 0 the output is set again to stderr, stdout.; /// The second argument specifies whether the output should be added to the; /// file (""a"", default) or the file be truncated before (""w"").; /// The implementations of this function save internally the current state into; /// a static structure.; ///; /// The call can be made reentrant by specifying the opaque structure pointed; /// by 'h', which is filled with the relevant information. The handle 'h'; /// obtained on the first call must then be used in any subsequent call,; /// included ShowOutput, to display the redirected output.; /// Returns 0 on success, -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:888,error,error,888,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['error'],['error']
Availability,"//---- System, CPU and Memory info ---------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Returns static system info, like OS type, CPU type, number of CPUs; /// RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; /// 0 otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:306,error,error,306,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['error'],['error']
Availability,"//---- error handling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:7,error,error,7,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,1,['error'],['error']
Availability,"//--------------------------------------------------------------------*- C++ -*-; // CLING - the C++ LLVM-based InterpreterG :); // author: Guilherme Amadio <amadio@cern.ch>; //; // This file is dual-licensed: you can choose to license it under the University; // of Illinois Open Source License or the GNU Lesser General Public License. See; // LICENSE.TXT for details.; //------------------------------------------------------------------------------; //; // This file implements a JITEventListener object that tells perf about JITted; // symbols using perf map files (/tmp/perf-%d.map, where %d = pid of process).; //; // Documentation for this perf jit interface is available at:; // https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/jit-interface.txt; //; //------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/PerfJITEventListener.cpp:670,avail,available,670,interpreter/cling/lib/Interpreter/PerfJITEventListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/PerfJITEventListener.cpp,1,['avail'],['available']
Availability,"//------------------------------------------------------------------------------; // CLING - the C++ LLVM-based InterpreterG :); //; // This file is dual-licensed: you can choose to license it under the University; // of Illinois Open Source License or the GNU Lesser General Public License. See; // LICENSE.TXT for details.; //------------------------------------------------------------------------------; // This file contains an error (redefinition of '__my_i') and it gets included; // so all the contents should be reverted from the AST transparently.; // Template specializations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/ErrorRecovery/SubsequentDecls.h:433,error,error,433,interpreter/cling/test/ErrorRecovery/SubsequentDecls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/ErrorRecovery/SubsequentDecls.h,1,['error'],['error']
Availability,"//-----------------------------------------------------------------------; // Write down the targets; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx:84,down,down,84,core/foundation/src/RConversionRuleParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx,1,['down'],['down']
Availability,"//--------------------------------------------------------------------; // Write down the mandatory fields; ///////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx:81,down,down,81,core/foundation/src/RConversionRuleParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx,1,['down'],['down']
Availability,"//-------------------------------------------------------------------; //; // importFromFile(const char *filename); //; // Imports histogrammes from a file with the name ""filename"".; // Opens the file, scans it, if finds an object of the class TH1F or TH2F,; // imports it.; // All the other objects are ignored.; // In case of not a ROOT file returns an error message and takes no further; // action.; // This function is called when a user doubly clicks on the file icon; // in the file list view.; //; //--------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:355,error,error,355,test/histviewer/histaction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx,1,['error'],['error']
Availability,"//------------------------------------------------------------------; /// Extract a uint16_t value from \a *offset_ptr.; ///; /// Extract a single uint16_t from the binary data at the offset; /// pointed to by \a offset_ptr, and update the offset on success.; ///; /// @param[in,out] offset_ptr; /// A pointer to an offset within the data that will be advanced; /// by the appropriate number of bytes if the value is extracted; /// correctly. If the offset is out of bounds or there are not; /// enough bytes to extract this value, the offset will be left; /// unmodified.; ///; /// @param[in,out] Err; /// A pointer to an Error object. Upon return the Error object is set to; /// indicate the result (success/failure) of the function. If the Error; /// object is already set when calling this function, no extraction is; /// performed.; ///; /// @return; /// The extracted uint16_t value.; //------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:623,Error,Error,623,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,4,"['Error', 'failure']","['Error', 'failure']"
Availability,//---; /* the machine roundoff error */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:31,error,error,31,math/mathcore/src/SpecFuncCephes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h,1,['error'],['error']
Availability,"//..and accuracy appropriare; // should not use absolute tolerance especially for sharp peaks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:57,toler,tolerance,57,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,1,['toler'],['tolerance']
Availability,"/// !cond(condition_1: value1, ... , condition_n: value); /// Selects the first value for which condition is true.; /// Otherwise reports an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:141,error,error,141,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['error'],['error']
Availability,"/// '[classname]' - Type of record values that have zero or more superclasses.; ///; /// The list of superclasses is non-redundant, i.e. only contains classes that; /// are not the superclass of some other listed class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:121,redundant,redundant,121,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['redundant'],['redundant']
Availability,/// 0x800 is reserved for compatibility with XLC.; /// Produce a runtime error if the data is not already allocated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:73,error,error,73,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,1,['error'],['error']
Availability,"/// 20 bits to fit in the remaining available space.; /// Note that this makes CXXConstructorDeclBitfields take; /// exactly 64 bits and thus the width of NumCtorInitializers; /// will need to be shrunk if some bit is added to NumDeclContextBitfields,; /// NumFunctionDeclBitfields or CXXConstructorDeclBitfields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:36,avail,available,36,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['avail'],['available']
Availability,"/// <clause> [clause[ [,] clause] ... ]; ///; /// clauses: for error directive; /// 'at' '(' compilation | execution ')'; /// 'severity' '(' fatal | warning ')'; /// 'message' '(' msg-string ')'; /// ....",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:63,error,error,63,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['error'],['error']
Availability,"/// <summary>; /// Enumerates all completed product instances installed.; /// </summary>; /// <param name=""ppEnumInstances"">An enumeration of completed, installed; /// product instances.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:248,failure,failure,248,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Enumerates all product instances.; /// </summary>; /// <param name=""ppEnumInstances"">An enumeration of all product; /// instances.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:211,failure,failure,211,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets a pointer to the <see cref=""ISetupPackageReference""/> that represents; /// the registered product.; /// </summary>; /// <param name=""ppPackage"">Pointer to an instance of <see; /// cref=""ISetupPackageReference""/>. This may be NULL if <see; /// cref=""GetState""/> does not return <see cref=""eComplete""/>.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// packages property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:387,failure,failure,387,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets an array of package references registered to the instance.; /// </summary>; /// <param name=""ppsaPackages"">Pointer to an array of <see; /// cref=""ISetupPackageReference""/>.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// packages property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:258,failure,failure,258,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the build branch of the package.; /// </summary>; /// <param name=""pbstrBranch"">The build branch of the package.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:198,failure,failure,198,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the description of the product installed in this instance.; /// </summary>; /// <param name=""lcid"">The LCID for the description.</param>; /// <param name=""pbstrDescription"">The description of the product installed in; /// this instance.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:322,failure,failure,322,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the display name (title) of the product installed in this instance.; /// </summary>; /// <param name=""lcid"">The LCID for the display name.</param>; /// <param name=""pbstrDisplayName"">The display name (title) of the product; /// installed in this instance.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:341,failure,failure,341,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the general package identifier.; /// </summary>; /// <param name=""pbstrId"">The general package identifier.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:192,failure,failure,192,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the instance identifier (should match the name of the parent instance; /// directory).; /// </summary>; /// <param name=""pbstrInstanceId"">The instance identifier.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:248,failure,failure,248,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the language and optional region identifier.; /// </summary>; /// <param name=""pbstrLanguage"">The language and optional region; /// identifier.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:229,failure,failure,229,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the local date and time when the installation was originally; /// installed.; /// </summary>; /// <param name=""pInstallDate"">The local date and time when the installation; /// was originally installed.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:287,failure,failure,287,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the path to the installation root of the product.; /// </summary>; /// <param name=""pbstrInstallationPath"">The path to the installation root of; /// the product.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:247,failure,failure,247,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the relative path to the product application, if available.; /// </summary>; /// <param name=""pbstrProductPath"">The relative path to the product; /// application, if available.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:73,avail,available,73,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,3,"['avail', 'failure']","['available', 'failure']"
Availability,"/// <summary>; /// Gets the state of the instance.; /// </summary>; /// <param name=""pState"">The state of the instance.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:181,failure,failure,181,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the target process architecture of the package.; /// </summary>; /// <param name=""pbstrChip"">The target process architecture of the; /// package.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:231,failure,failure,231,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the type of the package.; /// </summary>; /// <param name=""pbstrType"">The type of the package.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:180,failure,failure,180,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the unique identifier consisting of all defined tokens.; /// </summary>; /// <param name=""pbstrUniqueId"">The unique identifier consisting of all; /// defined tokens.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_UNEXPECTED if no Id was defined (required).</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:251,failure,failure,251,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the unique name of the installation, often indicating the branch and; /// other information used for telemetry.; /// </summary>; /// <param name=""pbstrInstallationName"">The unique name of the installation,; /// often indicating the branch and other information used for; /// telemetry.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:371,failure,failure,371,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the version of the package.; /// </summary>; /// <param name=""pbstrVersion"">The version of the package.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:189,failure,failure,189,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Gets the version of the product installed in this instance.; /// </summary>; /// <param name=""pbstrInstallationVersion"">The version of the product; /// installed in this instance.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:260,failure,failure,260,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,/// <summary>; /// No reboot is required for the instance.; /// </summary>,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:22,reboot,reboot,22,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['reboot'],['reboot']
Availability,"/// <summary>; /// Parses a dotted quad version string into a 64-bit unsigned integer.; /// </summary>; /// <param name=""pwszVersion"">The dotted quad version string to parse, e.g.; /// 1.2.3.4.</param>; /// <param name=""pullVersion"">A 64-bit unsigned integer representing the; /// version. You can compare this to other versions.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:391,failure,failure,391,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Parses a dotted quad version string into a 64-bit unsigned integer.; /// </summary>; /// <param name=""pwszVersionRange"">The string containing 1 or 2 dotted quad; /// version strings to parse, e.g. [1.0,) that means 1.0.0.0 or newer.</param>; /// <param name=""pullMinVersion"">A 64-bit unsigned integer representing the; /// minimum version, which may be 0. You can compare this to other; /// versions.</param>; /// <param name=""pullMaxVersion"">A 64-bit unsigned integer representing the; /// maximum version, which may be MAXULONGLONG. You can compare this to other; /// versions.</param>; /// <returns>Standard HRESULT indicating success or failure.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:660,failure,failure,660,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// <summary>; /// Resolves the optional relative path to the root path of the instance.; /// </summary>; /// <param name=""pwszRelativePath"">A relative path within the instance to; /// resolve, or NULL to get the root path.</param>; /// <param name=""pbstrAbsolutePath"">The full path to the optional relative; /// path within the instance. If the relative path is NULL, the root path will; /// always terminate in a backslash.</param>; /// <returns>Standard HRESULT indicating success or failure, including; /// E_FILENOTFOUND if the instance state does not exist and E_NOTFOUND if the; /// property is not defined.</returns>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h:487,failure,failure,487,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCSetupApi.h,1,['failure'],['failure']
Availability,"/// @brief Change ownership of a file.; ///; /// @param Owner The owner of the file to change to.; /// @param Group The group of the file to change to.; /// @returns errc::success if successfully updated file ownership, otherwise an; /// error code is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:238,error,error,238,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['error'],['error']
Availability,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:102,error,error,102,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,2,"['error', 'fault']","['error', 'fault']"
Availability,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:98,error,error,98,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,3,['error'],['error']
Availability,"/// @brief Opens the file with the given name in a read-only mode, returning; /// its open file descriptor.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param RealPath If nonnull, extra work is done to determine the real path; /// of the opened file, and that path is stored in this; /// location.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:535,error,error,535,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['error'],['error']
Availability,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:665,error,error,665,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,2,['error'],['error']
Availability,"/// @brief Return false and print error messages if there is any unexpected; /// duplicates BIT constant in the class hierarchy or any of the bits; /// already registered.; /// If verbose is true, also print all the bit declare in this class; /// and all its bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx:34,error,error,34,core/meta/src/TStatusBitsChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx,1,['error'],['error']
Availability,"/// @brief Return the metadata value of type double given the key, or an error if the metadata value is of a non-double; /// type.; /// @param[in] key input key for a given RMetaData instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx:73,error,error,73,tree/dataframe/src/RMetaData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx,1,['error'],['error']
Availability,"/// @brief Return the metadata value of type int given the key, a default int metadata value if the key is not found, or; /// an error if the metadata value is of a non-double type.; /// @param[in] key input key for a given RMetaData instance.; /// @param[in] defaultVal metadata value of type double which is read as default while a given key cannot be found in; /// the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx:129,error,error,129,tree/dataframe/src/RMetaData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx,1,['error'],['error']
Availability,"/// @brief Return the metadata value of type int given the key, a default int metadata value if the key is not found, or; /// an error if the metadata value is of a non-int type.; /// @param[in] key input key for a given RMetaData instance.; /// @param[in] defaultVal metadata value of type int which is read as default while a given key cannot be found in the; /// dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx:129,error,error,129,tree/dataframe/src/RMetaData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx,1,['error'],['error']
Availability,"/// @brief Return the metadata value of type int given the key, a default int metadata value if the key is not found, or; /// an error if the metadata value is of a non-string type.; /// @param[in] key input key for a given RMetaData instance.; /// @param[in] defaultVal metadata value of type string which is read as default while a given key cannot be found in; /// the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx:129,error,error,129,tree/dataframe/src/RMetaData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx,1,['error'],['error']
Availability,"/// @brief Return the metadata value of type int given the key, or an error if the metadata value is of a non-int type.; /// @param[in] key input key for a given RMetaData instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx:70,error,error,70,tree/dataframe/src/RMetaData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx,1,['error'],['error']
Availability,"/// @brief Return the metadata value of type string given the key, or an error if the metadata value is of a non-string; /// type.; /// @param[in] key input key for a given RMetaData instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx:73,error,error,73,tree/dataframe/src/RMetaData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RMetaData.cxx,1,['error'],['error']
Availability,"/// @name High-Level Operations; /// @{; /// ExecuteAction - Execute the provided action against the compiler's; /// CompilerInvocation object.; ///; /// This function makes the following assumptions:; ///; /// - The invocation options should be initialized. This function does not; /// handle the '-help' or '-version' options, clients should handle those; /// directly.; ///; /// - The diagnostics engine should have already been created by the client.; ///; /// - No other CompilerInstance state should have been initialized (this is; /// an unchecked error).; ///; /// - Clients should have initialized any LLVM target features that may be; /// required.; ///; /// - Clients should eventually call llvm_shutdown() upon the completion of; /// this routine to ensure that any managed objects are properly destroyed.; ///; /// Note that this routine may write output to 'stderr'.; ///; /// \param Act - The action to execute.; /// \return - True on success.; //; // FIXME: Eliminate the llvm_shutdown requirement, that should either be part; // of the context or else not CompilerInstance specific.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:555,error,error,555,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['error'],['error']
Availability,"/// @}; /// @name Matching CallDescriptions against a CallExpr; /// @{; /// Returns true if the CallExpr is a call to a function that matches the; /// CallDescription.; ///; /// When available, always prefer matching with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:183,avail,available,183,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,3,['avail'],['available']
Availability,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:36,repair,repairing,36,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,4,"['Repair', 'repair']","['RepairingKind', 'repairing']"
Availability,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:133,error,error,133,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,3,"['error', 'recover']","['error', 'recover', 'recovery']"
Availability,/// @}; /// \defgroup Methods used for reporting warnings and errors:; ///; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h:62,error,errors,62,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,2,['error'],['errors']
Availability,/// @}; /// \name Resizing Operators; /// @{; /// Truncate to new width.; ///; /// Truncate the APInt to a specified width. It is an error to specify a width; /// that is greater than the current width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:133,error,error,133,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['error'],['error']
Availability,"/// @}; /// \returns Whether a 32-bit branch instruction is available in Arm or Thumb; /// state.; ///; /// Used by the LowerTypeTests pass, which constructs an IR inline assembler; /// node containing a jump table in a format suitable for the target, so it; /// needs to know what format of jump table it can legally use.; ///; /// For non-Arm targets, this function isn't used. It defaults to returning; /// false, but it shouldn't matter what it returns anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:60,avail,available,60,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['avail'],['available']
Availability,"/// A ""cursor"" marking a position within a Value.; /// The Value is a tree, and this is the path from the root to the current node.; /// This is used to associate errors with particular subobjects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:163,error,errors,163,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['error'],['errors']
Availability,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:560,Error,Errors,560,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,3,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 16-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel16 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int16; ///; /// Errors:; /// - The result of the fixup expression must fit into an int16, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:457,Error,Errors,457,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,/// A 19-bit PC-relative conditional branch.; ///; /// Represents a PC-relative conditional branch to a target within +/-1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int19; ///; /// Notes:; /// The '19' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 21-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:565,Error,Errors,565,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,3,"['Error', 'error']","['Errors', 'error']"
Availability,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF and MachO relocations.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 28-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:562,Error,Errors,562,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,3,"['Error', 'error']","['Errors', 'error']"
Availability,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 4-byte aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocations. Since the low; /// two bits must be zero (because of the 4-byte alignment of the target) the; /// operand is effectively a signed 28-bit number.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 4-byte aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:547,Error,Errors,547,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,3,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit GOT delta.; ///; /// Delta from the global offset table to the target.; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int32; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:172,Error,Errors,172,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:702,Error,Errors,702,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:709,Error,Errors,709,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:490,Error,Errors,490,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,4,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel32 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:457,Error,Errors,457,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,4,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:150,Error,Errors,150,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:150,Error,Errors,150,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:150,Error,Errors,150,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,4,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:164,Error,Errors,164,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,4,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:164,Error,Errors,164,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A 64-bit GOT delta.; ///; /// Delta from the global offset table to the target; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int64; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:171,Error,Errors,171,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A CRTP base for tables that are built on demand, e.g. Global Offset Tables; /// and Procedure Linkage Tables.; /// The getEntyrForTarget function returns the table entry corresponding to the; /// given target, calling down to the implementation class to build an entry if; /// one does not already exist.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h:222,down,down,222,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h,1,['down'],['down']
Availability,"/// A DomainValue is a bit like LiveIntervals' ValNo, but it also keeps track; /// of execution domains.; ///; /// An open DomainValue represents a set of instructions that can still switch; /// execution domain. Multiple registers may refer to the same open; /// DomainValue - they will eventually be collapsed to the same execution; /// domain.; ///; /// A collapsed DomainValue represents a single register that has been forced; /// into one of more execution domains. There is a separate collapsed; /// DomainValue for each register, but it may contain multiple execution; /// domains. A register value is initially created in a single execution; /// domain, but if we were forced to pay the penalty of a domain crossing, we; /// keep track of the fact that the register is now available in multiple; /// domains.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h:782,avail,available,782,interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,1,['avail'],['available']
Availability,"/// A FILO worklist that prioritizes on re-insertion without duplication.; ///; /// This is very similar to a \c SetVector with the primary difference that; /// while re-insertion does not create a duplicate, it does adjust the; /// visitation order to respect the last insertion point. This can be useful; /// when the visit order needs to be prioritized based on insertion point; /// without actually having duplicate visits.; ///; /// Note that this doesn't prevent re-insertion of elements which have been; /// visited -- if you need to break cycles, a set will still be necessary.; ///; /// The type \c T must be default constructable to a null value that will be; /// ignored. It is an error to insert such a value, and popping elements will; /// never produce such a value. It is expected to be used with common nullable; /// types like pointers or optionals.; ///; /// Internally this uses a vector to store the worklist and a map to identify; /// existing elements in the worklist. Both of these may be customized, but the; /// map must support the basic DenseMap API for mapping from a T to an integer; /// index into the vector.; ///; /// A partial specialization is provided to automatically select a SmallVector; /// and a SmallDenseMap if custom data structures are not provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:692,error,error,692,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,1,['error'],['error']
Availability,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:507,Error,Errors,507,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32/ targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:508,Error,Errors,508,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to Delta64 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta64 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:507,Error,Errors,507,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to Page20 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page20 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT/PLT builder pass inserted; /// by default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:509,Error,Errors,509,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to Page21 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page21 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:505,Error,Errors,505,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to Pageoffset12 pointing at; /// the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:517,Error,Errors,517,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadREXRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadREXRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:545,Error,Errors,545,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:539,Error,Errors,539,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta32FromGOT pointing at the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32FromGOT; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:543,Error,Errors,543,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta64FromGOT; /// pointing at the GOT entry for the original target; ///; /// Indicates that this edge should be transformed into a Delta64FromGOT; /// targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:547,Error,Errors,547,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A Graph object represents a Directed Graph and is used in XRay to compute; /// and store function call graphs and associated statistical information.; ///; /// The graph takes in four template parameters, these are:; /// - VertexAttribute, this is a structure which is stored for each vertex.; /// Must be DefaultConstructible, CopyConstructible, CopyAssignable and; /// Destructible.; /// - EdgeAttribute, this is a structure which is stored for each edge; /// Must be DefaultConstructible, CopyConstructible, CopyAssignable and; /// Destructible.; /// - EdgeAttribute, this is a structure which is stored for each variable; /// - VI, this is a type over which DenseMapInfo is defined and is the type; /// used look up strings, available as VertexIdentifier.; /// - If the built in DenseMapInfo is not defined, provide a specialization; /// class type here.; ///; /// Graph is CopyConstructible, CopyAssignable, MoveConstructible and; /// MoveAssignable but is not EqualityComparible or LessThanComparible.; ///; /// Usage Example Graph with weighted edges and vertices:; /// Graph<int, int, int> G;; ///; /// G[1] = 0;; /// G[2] = 2;; /// G[{1,2}] = 1;; /// G[{2,1}] = -1;; /// for(const auto &v : G.vertices()){; /// // Do something with the vertices in the graph;; /// }; /// for(const auto &e : G.edges()){; /// // Do something with the edges in the graph;; /// }; ///; /// Usage Example with StrRef keys.; /// Graph<int, double, StrRef> StrG;; /// char va[] = ""Vertex A"";; /// char vaa[] = ""Vertex A"";; /// char vb[] = ""Vertex B""; // Vertices are referenced by String Refs.; /// G[va] = 0;; /// G[vb] = 1;; /// G[{va, vb}] = 1.0;; /// cout() << G[vaa] << "" "" << G[{vaa, vb}]; //prints ""0 1.0"".; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h:733,avail,available,733,interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,1,['avail'],['available']
Availability,/// A Mask of resource unit identifiers.; ///; /// There is one bit set for every available resource unit.; /// It defaults to the value of field ResourceSizeMask in ResourceState.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:6,Mask,Mask,6,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,2,"['Mask', 'avail']","['Mask', 'available']"
Availability,"/// A PC-relative REX load of a GOT entry, relaxable if GOT entry target; /// is in-range of the fixup.; ///; /// If the GOT entry target is in-range of the fixup then the load from the; /// GOT may be replaced with a direct memory address calculation.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:343,Error,Errors,343,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:547,Error,Errors,547,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,3,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A PC-relative load of a GOT entry, relaxable if GOT entry target is; /// in-range of the fixup; ///; /// TODO: Explain the optimization; ///; /// Fixup expression; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:229,Error,Errors,229,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A ProcResource can have multiple units.; ///; /// For processor resource groups this field is a mask of contained resource; /// units. It is obtained from ResourceMask by clearing the highest set bit.; /// The number of resource units in a group can be simply computed as the; /// population count of this field.; ///; /// For normal (i.e. non-group) resources, the number of bits set in this mask; /// is equivalent to the number of units declared by the processor model (see; /// field 'NumUnits' in 'ProcResourceUnits').",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:100,mask,mask,100,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,2,['mask'],['mask']
Availability,"/// A RAII object to pop and push slot numbers from a RSlotStack object.; /// After construction the slot number is available as the data member fSlot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/RSlotStack.hxx:116,avail,available,116,core/imt/inc/ROOT/RSlotStack.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/RSlotStack.hxx,1,['avail'],['available']
Availability,"/// A Recipe for widening load/store operations.; /// The recipe uses the following VPValues:; /// - For load: Address, optional mask; /// - For store: Address, stored value, optional mask; /// TODO: We currently execute only per-part unless a specific instance is; /// provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:129,mask,mask,129,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,2,['mask'],['mask']
Availability,/// A RecoveryExpr record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:6,Recover,RecoveryExpr,6,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['Recover'],['RecoveryExpr']
Availability,"/// A TLSDesc entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLSDesc entry for the edge's current target. A TLSDesc entry for the; /// target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:331,Error,Errors,331,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A TLSDesc entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLSDesc entry for the edge's current target. A TLSDesc entry; /// for the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:343,Error,Errors,343,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A TLVP entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLVP entry for the edge's current target. A TLVP entry for the target; /// should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:322,Error,Errors,322,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A TLVP entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLVP entry for the edge's current target. A TLVP entry for; /// the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:334,Error,Errors,334,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A TLVP entry getter/constructor, transformed to; /// Delta32ToTLVPLoadREXRelaxable.; ///; /// Indicates that this edge should be transformed into a; /// Delta32ToTLVPLoadREXRelaxable targeting the TLVP entry for the edge's; /// current target. A TLVP entry for the target should be created if one does; /// not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:378,Error,Errors,378,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'Failure']","['Errors', 'Failure']"
Availability,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:135,alive,alive,135,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,3,"['alive', 'avail']","['alive', 'available']"
Availability,"/// A Trace object represents the records that have been loaded from XRay; /// log files generated by instrumented binaries. We encapsulate the logic of; /// reading the traces in factory functions that populate the Trace object; /// appropriately.; ///; /// Trace objects provide an accessor to an XRayFileHeader which says more about; /// details of the file from which the XRay trace was loaded from.; ///; /// Usage:; ///; /// if (auto TraceOrErr = loadTraceFile(""xray-log.something.xray"")) {; /// auto& T = *TraceOrErr;; /// // T.getFileHeader() will provide information from the trace header.; /// for (const XRayRecord &R : T) {; /// // ... do something with R here.; /// }; /// } else {; /// // Handle the error here.; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h:714,error,error,714,interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h,1,['error'],['error']
Availability,/// A cache of the flags available in enumerations with the flag_bits; /// attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,avail,available,25,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['avail'],['available']
Availability,"/// A cache that maps paths to directory entries (either real or; /// virtual) we have looked up, or an error that occurred when we looked up; /// the directory.; ///; /// The actual Entries for real directories/files are; /// owned by UniqueRealDirs/UniqueRealFiles above, while the Entries; /// for virtual directories/files are owned by; /// VirtualDirectoryEntries/VirtualFileEntries above.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:104,error,error,104,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['error'],['error']
Availability,"/// A cache that maps paths to file entries (either real or; /// virtual) we have looked up, or an error that occurred when we looked up; /// the file.; ///; /// \see SeenDirEntries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:99,error,error,99,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['error'],['error']
Availability,"/// A call may be vectorized in different ways depending on whether we have; /// vectorized variants available and whether the target supports masking.; /// This function analyzes all calls in the function at the supplied VF,; /// makes a decision based on the costs of available options, and stores that; /// decision in a map for use in planning and plan execution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:101,avail,available,101,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,3,"['avail', 'mask']","['available', 'masking']"
Availability,"/// A class representing a position in a DataExtractor, as well as any error; /// encountered during extraction. It enables one to extract a sequence of; /// values without error-checking and then checking for errors in bulk at the; /// end. The class holds an Error object, so failing to check the result of; /// the parse will result in a runtime error. The error flag is sticky and; /// will cause all subsequent extraction functions to fail without even; /// attempting to parse and without updating the Cursor offset. After clearing; /// the error flag, one can again use the Cursor object for parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:71,error,error,71,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,7,"['Error', 'error']","['Error', 'error', 'error-checking', 'errors']"
Availability,"/// A class which abstracts out some details necessary for; /// making a call.; ///; /// It is not actually used directly for storing this information in; /// a FunctionType, although FunctionType does currently use the; /// same bit-pattern.; ///; // If you add a field (say Foo), other than the obvious places (both,; // constructors, compile failures), what you need to update is; // * Operator==; // * getFoo; // * withFoo; // * functionType. Add Foo, getFoo.; // * ASTContext::getFooType; // * ASTContext::mergeFunctionTypes; // * FunctionNoProtoType::Profile; // * FunctionProtoType::Profile; // * TypePrinter::PrintFunctionProto; // * AST read and write; // * Codegen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:345,failure,failures,345,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['failure'],['failures']
Availability,/// A collapsed DomainValue has no instructions to twiddle - it simply keeps; /// track of the domains where the registers are already available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h:135,avail,available,135,interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,1,['avail'],['available']
Availability,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:186,Error,ErrorFn,186,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,3,"['Error', 'error']","['ErrorFn', 'error']"
Availability,/// A custom action enabling the incremental processing functionality.; ///; /// The usual \p FrontendAction expects one call to ExecuteAction and once it; /// sees a call to \p EndSourceFile it deletes some of the important objects; /// such as \p Preprocessor and \p Sema assuming no further input will come.; ///; /// \p IncrementalAction ensures it keep its underlying action's objects alive; /// as long as the \p IncrementalParser needs them.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/IncrementalParser.cpp:390,alive,alive,390,interpreter/llvm-project/clang/lib/Interpreter/IncrementalParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/IncrementalParser.cpp,1,['alive'],['alive']
Availability,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:532,failure,failure,532,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,4,['failure'],['failure']
Availability,"/// A downcast may loose specialization information. E. g.:; /// MutableMap<T, U> : Map; /// The downcast to MutableMap looses the information about the types of the; /// Map (due to the type parameters are not being forwarded to Map), and in; /// general there is no way to recover that information from the; /// declaration. In order to have to most information, lets find the most; /// derived type that has all the type parameters forwarded.; ///; /// Get the a subclass of \p From (which has a lower bound \p To) that do not; /// loose information about type parameters. \p To has to be a subclass of; /// \p From. From has to be specialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:6,down,downcast,6,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,3,"['down', 'recover']","['downcast', 'recover']"
Availability,"/// A factory method that is similar to the above constructor, except; /// this returns an error instead exiting the program on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CommonOptionsParser.h:91,error,error,91,interpreter/llvm-project/clang/include/clang/Tooling/CommonOptionsParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CommonOptionsParser.h,2,['error'],['error']
Availability,"/// A factory, from which one makes pools, from which one creates; /// individual attributes which are deallocated with the pool.; ///; /// Note that it's tolerably cheap to create and destroy one of; /// these as long as you don't actually allocate anything in it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:155,toler,tolerably,155,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,1,['toler'],['tolerably']
Availability,"/// A failable computation over nodes bound by AST matchers, with (limited); /// reflection via the `toString` method.; ///; /// The computation should report any errors though its return value (rather; /// than terminating the program) to enable usage in interactive scenarios like; /// clang-query.; ///; /// This is a central abstraction of the Transformer framework. It is a; /// generalization of `MatchConsumer` and intended to replace it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h:163,error,errors,163,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h,1,['error'],['errors']
Availability,/// A failable computation over nodes bound by AST matchers.; ///; /// The computation should report any errors though its return value (rather; /// than terminating the program) to enable usage in interactive scenarios like; /// clang-query.; ///; /// This is a central abstraction of the Transformer framework.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h:105,error,errors,105,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h,1,['error'],['errors']
Availability,/// A failed initialization sequence. The failure kind tells what; /// happened.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:42,failure,failure,42,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['failure'],['failure']
Availability,"/// A file system according to your operating system.; /// This may be linked to the process's working directory, or maintain its own.; ///; /// Currently, its own working directory is emulated by storing the path and; /// sending absolute paths to llvm::sys::fs:: functions.; /// A more principled approach would be to push this down a level, modelling; /// the working dir as an llvm::sys::fs::WorkingDir or similar.; /// This would enable the use of openat()-style functions on some platforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:330,down,down,330,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['down'],['down']
Availability,/// A function object to call with a resolved symbol map (See AsyncLookupResult); /// or an error if resolution failed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:92,error,error,92,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['error'],['error']
Availability,"/// A generic diagnostic builder for errors which may or may not be deferred.; ///; /// In CUDA, there exist constructs (e.g. variable-length arrays, try/catch); /// which are not allowed to appear inside __device__ functions and are; /// allowed to appear in __host__ __device__ functions only if the host+device; /// function is never codegen'ed.; ///; /// To handle this, we use the notion of ""deferred diagnostics"", where we; /// attach a diagnostic to a FunctionDecl that's emitted iff it's codegen'ed.; ///; /// This class lets you emit either a regular diagnostic, a deferred; /// diagnostic, or no diagnostic at all, according to an argument you pass to; /// its constructor, thus simplifying the process of creating these ""maybe; /// deferred"" diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,error,errors,37,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['errors']
Availability,/// A generic error for subclass handlers that don't want or need to define; /// their own error_category.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h:14,error,error,14,interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h,1,['error'],['error']
Availability,/// A handler for state updates occurring while an HTTPRequest is performed.; /// Can trigger the client to abort the request by returning an Error from any; /// of its methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:142,Error,Error,142,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,1,['Error'],['Error']
Availability,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:380,avail,available,380,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,2,['avail'],['available']
Availability,"/// A helper class to unwrap a type down to a function for the; /// purposes of applying attributes there.; ///; /// Use:; /// FunctionTypeUnwrapper unwrapped(SemaRef, T);; /// if (unwrapped.isFunctionType()) {; /// const FunctionType *fn = unwrapped.get();; /// // change fn somehow; /// T = unwrapped.wrap(fn);; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:36,down,down,36,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['down'],['down']
Availability,"/// A helper function that computes the predicate of the block BB, assuming; /// that the header block of the loop is set to True or the loop mask when; /// tail folding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h:142,mask,mask,142,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,1,['mask'],['mask']
Availability,"/// A helper function that returns the reciprocal of the block probability of; /// predicated blocks. If we return X, we are assuming the predicated block; /// will execute once for every X iterations of the loop header.; ///; /// TODO: We should use actual block probability here, if available. Currently,; /// we always assume predicated blocks have a 50% chance of executing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:285,avail,available,285,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['avail'],['available']
Availability,/// A helper function to collect debug info for the default elements of a; /// block.; ///; /// \returns The next available field offset after the default elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:114,avail,available,114,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['avail'],['available']
Availability,/// A linear path from the error node to the root.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:27,error,error,27,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['error'],['error']
Availability,/// A load candidate for masked gather.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:25,mask,masked,25,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['mask'],['masked']
Availability,/// A location for note diagnostics (when error is found).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:42,error,error,42,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['error'],['error']
Availability,"/// A manager for alias analyses.; ///; /// This class can have analyses registered with it and when run, it will run; /// all of them and aggregate their results into single AA results interface; /// that dispatches across all of the alias analysis results available.; ///; /// Note that the order in which analyses are registered is very significant.; /// That is the order in which the results will be aggregated and queried.; ///; /// This manager effectively wraps the AnalysisManager for registering alias; /// analyses. When you register your alias analysis with this manager, it will; /// ensure the analysis itself is registered with its AnalysisManager.; ///; /// The result of this analysis is only invalidated if one of the particular; /// aggregated AA results end up being invalidated. This removes the need to; /// explicitly preserve the results of `AAManager`. Note that analyses should no; /// longer be registered once the `AAManager` is run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:258,avail,available,258,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['avail'],['available']
Availability,/// A map of available Instruction Converters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp:13,avail,available,13,interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp,1,['avail'],['available']
Availability,"/// A map used to for multiple referenced error check of ComplexSubOperand.; /// ComplexSubOperand can't be referenced multiple from different operands,; /// however multiple references from same operand are allowed since that is; /// how 'same operand checks' are generated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:42,error,error,42,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['error'],['error']
Availability,"/// A mapping from each virtual member function to its set of; /// final overriders.; ///; /// Within a class hierarchy for a given derived class, each virtual; /// member function in that hierarchy has one or more ""final; /// overriders"" (C++ [class.virtual]p2). A final overrider for a; /// virtual function ""f"" is the virtual function that will actually be; /// invoked when dispatching a call to ""f"" through the; /// vtable. Well-formed classes have a single final overrider for each; /// virtual function; in abstract classes, the final overrider for at; /// least one virtual function is a pure virtual function. Due to; /// multiple, virtual inheritance, it is possible for a class to have; /// more than one final overrider. Although this is an error (per C++; /// [class.virtual]p2), it is not considered an error here: the final; /// overrider map can represent multiple final overriders for a; /// method, and it is up to the client to determine whether they are; /// problem. For example, the following class \c D has two final; /// overriders for the virtual function \c A::f(), one in \c C and one; /// in \c D:; ///; /// \code; /// struct A { virtual void f(); };; /// struct B : virtual A { virtual void f(); };; /// struct C : virtual A { virtual void f(); };; /// struct D : B, C { };; /// \endcode; ///; /// This data structure contains a mapping from every virtual; /// function *that does not override an existing virtual function* and; /// in every subobject where that virtual function occurs to the set; /// of virtual functions that override it. Thus, the same virtual; /// function \c A::f can actually occur in multiple subobjects of type; /// \c A due to multiple inheritance, and may be overridden by; /// different virtual functions in each, as in the following example:; ///; /// \code; /// struct A { virtual void f(); };; /// struct B : A { virtual void f(); };; /// struct C : A { virtual void f(); };; /// struct D : B, C { };; /// \endcode; ///; /// Unlike in the p",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h:753,error,error,753,interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,2,['error'],['error']
Availability,/// A mask of all the programming models the host has to support in the; /// current compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:6,mask,mask,6,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,1,['mask'],['mask']
Availability,/// A mask of ready units.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:6,mask,mask,6,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['mask'],['mask']
Availability,"/// A member of a directory, yielded by a directory_iterator.; /// Only information available on most platforms is included.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:84,avail,available,84,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,1,['avail'],['available']
Availability,"/// A method might not be available in the interface indicated by the static; /// type. However it might be available in the tracked type. In order to; /// properly substitute the type parameters we need the declaration context of; /// the method. The more specialized the enclosing class of the method is, the; /// more likely that the parameter substitution will be successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:26,avail,available,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,2,['avail'],['available']
Availability,"/// A mirror of SeenFileEntries to give fake answers for getBypassFile().; ///; /// Don't bother hooking up a BumpPtrAllocator. This should be rarely used,; /// and only on error paths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:173,error,error,173,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['error'],['error']
Availability,"/// A multiple-use def in the same block with no intervening memory or register; /// dependencies; move the def down, nest it with the current instruction, and; /// insert a tee to satisfy the rest of the uses. As an illustration, rewrite; /// this:; ///; /// Reg = INST ... // Def; /// INST ..., Reg, ... // Insert; /// INST ..., Reg, ...; /// INST ..., Reg, ...; ///; /// to this:; ///; /// DefReg = INST ... // Def (to become the new Insert); /// TeeReg, Reg = TEE_... DefReg; /// INST ..., TeeReg, ... // Insert; /// INST ..., Reg, ...; /// INST ..., Reg, ...; ///; /// with DefReg and TeeReg stackified. This eliminates a local.get from the; /// resulting code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:112,down,down,112,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['down'],['down']
Availability,/// A parser for the __llvm_faultmaps section generated by the FaultMaps class; /// declared in llvm/CodeGen/FaultMaps.h. This parser is version locked with; /// with the __llvm_faultmaps section generated by the version of LLVM that; /// includes it. No guarantees are made with respect to forward or backward; /// compatibility.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h:63,Fault,FaultMaps,63,interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/FaultMapParser.h,2,['Fault'],['FaultMaps']
Availability,"/// A pass to do RPO deduction and propagation of function attributes.; ///; /// This pass provides a general RPO or ""top down"" propagation of; /// function attributes. For a few (rare) cases, we can deduce significantly; /// more about function attributes by working in RPO, so this pass; /// provides the complement to the post-order pass above where the majority of; /// deduction is performed.; // FIXME: Currently there is no RPO CGSCC pass structure to slide into and so; // this is a boring module pass, but eventually it should be an RPO CGSCC pass; // when such infrastructure is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:122,down,down,122,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,2,"['avail', 'down']","['available', 'down']"
Availability,"/// A plain 16-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint16; ///; /// Errors:; /// - The target must reside in the low 16-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:122,Error,Errors,122,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,4,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:122,Error,Errors,122,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,8,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A plain 8-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint8; ///; /// Errors:; /// - The target must reside in the low 8-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:120,Error,Errors,120,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:138,error,errors,138,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['error'],['errors']
Availability,/// A recipe for generating conditional branches on the bits of a mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:66,mask,mask,66,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['mask'],['mask']
Availability,/// A recipe for generating the active lane mask for the vector loop that is; /// used to predicate the vector operations.; /// TODO: It would be good to use the existing VPWidenPHIRecipe instead and; /// remove VPActiveLaneMaskPHIRecipe.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:44,mask,mask,44,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['mask'],['mask']
Availability,/// A recipe for vectorizing a phi-node as a sequence of mask-based select; /// instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:57,mask,mask-based,57,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['mask'],['mask-based']
Availability,"/// A refactoring action rule requirement determines when a refactoring action; /// rule can be invoked. The rule can be invoked only when all of the; /// requirements are satisfied.; ///; /// Subclasses must implement the; /// 'Expected<T> evaluate(RefactoringRuleContext &) const' member function.; /// \c T is used to determine the return type that is passed to the; /// refactoring rule's constructor.; /// For example, the \c SourceRangeSelectionRequirement subclass defines; /// 'Expected<SourceRange> evaluate(RefactoringRuleContext &Context) const'; /// function. When this function returns a non-error value, the resulting; /// source range is passed to the specific refactoring action rule; /// constructor (provided all other requirements are satisfied).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:605,error,error,605,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['error'],['error']
Availability,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:430,Error,Errors,430,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,4,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:15,mask,mask,15,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,4,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"/// A resource unit identifier.; ///; /// This is used to identify a specific processor resource unit using a pair; /// of indices where the 'first' index is a processor resource mask, and the; /// 'second' index is an index for a ""sub-resource"" (i.e. unit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:179,mask,mask,179,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['mask'],['mask']
Availability,"/// A runtime availability query.; ///; /// There are 2 ways to spell this node:; /// \code; /// @available(macos 10.10, ios 8, *); // Objective-C; /// __builtin_available(macos 10.10, ios 8, *); // C, C++, and Objective-C; /// \endcode; ///; /// Note that we only need to keep track of one \c VersionTuple here, which is; /// the one that corresponds to the current deployment target. This is meant to; /// be used in the condition of an \c if, but it is also usable as top level; /// expressions.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:14,avail,availability,14,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,2,['avail'],"['availability', 'available']"
Availability,"/// A scoped hash table of the current values of all of our simple; /// scalar expressions.; ///; /// As we walk down the domtree, we look to see if instructions are in this:; /// if so, we replace them with what we find, otherwise we insert them so; /// that dominated values can succeed in their lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:113,down,down,113,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['down'],['down']
Availability,"/// A scoped hash table of the current values of previously encountered; /// memory locations.; ///; /// This allows us to get efficient access to dominating loads or stores when; /// we have a fully redundant load. In addition to the most recent load, we; /// keep track of a generation count of the read, which is compared against; /// the current generation count. The current generation count is incremented; /// after every possibly writing memory operation, which ensures that we only; /// CSE loads with other loads that have no intervening store. Ordering; /// events (such as fences or atomic instructions) increment the generation; /// count as well; essentially, we model these as writes to all possible; /// locations. Note that atomic and/or volatile loads and stores can be; /// present the table; it is the responsibility of the consumer to inspect; /// the atomicity/volatility if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:200,redundant,redundant,200,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['redundant'],['redundant']
Availability,"/// A set of deallocations that should be performed when the; /// ASTContext is destroyed.; // FIXME: We really should have a better mechanism in the ASTContext to; // manage running destructors for types which do variable sized allocation; // within the AST. In some places we thread the AST bump pointer allocator; // into the datastructures which avoids this mess during deallocation but is; // wasteful of memory, and here we require a lot of error prone book keeping; // in order to track and run destructors while we're tearing things down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:447,error,error,447,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,2,"['down', 'error']","['down', 'error']"
Availability,"/// A signed 32-bit pointer value relocation; ///; /// Fixup expression:; /// Fixup <- Target + Addend : int32; ///; /// Errors:; /// - The target must reside in the signed 32-bits([-2**31, 2**32 - 1]) of; /// the address space, otherwise an out-of-range error will be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:121,Error,Errors,121,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Error', 'error']","['Errors', 'error']"
Availability,"/// A simple and fast domtree-based CSE pass.; ///; /// This pass does a simple depth-first walk over the dominator tree,; /// eliminating trivially redundant instructions and using instsimplify to; /// canonicalize things as it goes. It is intended to be fast and catch obvious; /// cases so that instcombine and other passes are more effective. It is; /// expected that a later pass of GVN will catch the interesting/hard cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:149,redundant,redundant,149,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,3,['redundant'],['redundant']
Availability,"/// A simple round-robin selector for processor resource units.; /// Each bit of this mask identifies a sub resource within a group.; ///; /// As an example, lets assume that this is a default policy for a; /// processor resource group composed by the following three units:; /// ResourceA -- 0b001; /// ResourceB -- 0b010; /// ResourceC -- 0b100; ///; /// Field NextInSequenceMask is used to select the next unit from the set of; /// resource units. It defaults to the value of field `ResourceUnitMasks` (in; /// this example, it defaults to mask '0b111').; ///; /// The round-robin selector would firstly select 'ResourceC', then; /// 'ResourceB', and eventually 'ResourceA'. When a resource R is used, the; /// corresponding bit in NextInSequenceMask is cleared. For example, if; /// 'ResourceC' is selected, then the new value of NextInSequenceMask becomes; /// 0xb011.; ///; /// When NextInSequenceMask becomes zero, it is automatically reset to the; /// default value (i.e. ResourceUnitMask).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:86,mask,mask,86,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,2,['mask'],['mask']
Availability,/// A single-use def in the same block with no intervening memory or register; /// dependencies; move the def down and nest it with the current instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:110,down,down,110,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['down'],['down']
Availability,/// A soft instruction can be changed to work in other domains given by mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h:72,mask,mask,72,interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,1,['mask'],['mask']
Availability,"/// A stack object to be created when performing template; /// instantiation.; ///; /// Construction of an object of type \c InstantiatingTemplate; /// pushes the current instantiation onto the stack of active; /// instantiations. If the size of this stack exceeds the maximum; /// number of recursive template instantiations, construction; /// produces an error and evaluates true.; ///; /// Destruction of this object will pop the named instantiation off; /// the stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:357,error,error,357,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,/// A string to prefix to error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h:26,error,error,26,interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h,2,['error'],['error']
Availability,"/// A summary includes information about; /// * function prototype (signature); /// * approach to invalidation,; /// * a list of branches - so, a list of list of ranges,; /// * a list of argument constraints, that must be true on every branch.; /// If these constraints are not satisfied that means a fatal error; /// usually resulting in undefined behaviour.; ///; /// Application of a summary:; /// The signature and argument constraints together contain information; /// about which functions are handled by the summary. The signature can use; /// ""wildcards"", i.e. Irrelevant types. Irrelevant type of a parameter in; /// a signature means that type is not compared to the type of the parameter; /// in the found FunctionDecl. Argument constraints may specify additional; /// rules for the given parameter's type, those rules are checked once the; /// signature is matched.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:307,error,error,307,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['error'],['error']
Availability,/// A symbol query that returns results via a callback when results are; /// ready.; ///; /// makes a callback when all symbols are available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:132,avail,available,132,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['avail'],['available']
Availability,"/// A thread-safe stack of N indexes (0 to size - 1).; /// RSlotStack can be used to safely assign a ""processing slot"" number to; /// each thread in multi-thread applications.; /// In release builds, pop and push operations are unchecked, potentially; /// resulting in undefined behavior if more slot numbers than available are; /// requested.; /// An important design assumption is that a slot will almost always be available; /// when a thread asks for it, and if it is not available it will be very soon,; /// therefore a spinlock is used for synchronization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/RSlotStack.hxx:314,avail,available,314,core/imt/inc/ROOT/RSlotStack.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/RSlotStack.hxx,3,['avail'],['available']
Availability,"/// A trie to efficiently match against the entries of the compilation; /// database in order of matching suffix length.; ///; /// When a clang tool is supposed to operate on a specific file, we have to; /// find the corresponding file in the compilation database. Although entries; /// in the compilation database are keyed by filename, a simple string match; /// is insufficient because of symlinks. Commonly, a project hierarchy looks; /// like this:; /// /<project-root>/src/<path>/<somefile>.cc (used as input for the tool); /// /<project-root>/build/<symlink-to-src>/<path>/<somefile>.cc (stored in DB); ///; /// Furthermore, there might be symlinks inside the source folder or inside the; /// database, so that the same source file is translated with different build; /// options.; ///; /// For a given input file, the \c FileMatchTrie finds its entries in order; /// of matching suffix length. For each suffix length, there might be one or; /// more entries in the database. For each of those entries, it calls; /// \c llvm::sys::fs::equivalent() (injected as \c PathComparator). There might; /// be zero or more entries with the same matching suffix length that are; /// equivalent to the input file. Three cases are distinguished:; /// 0 equivalent files: Continue with the next suffix length.; /// 1 equivalent file: Best match found, return it.; /// >1 equivalent files: Match is ambiguous, return error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h:1410,error,error,1410,interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,1,['error'],['error']
Availability,/// A utility function for allocating memory and checking for allocation; /// failure. The content is not zeroed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:78,failure,failure,78,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['failure'],['failure']
Availability,"/// A utility function for allocating memory, checking for allocation failures,; /// and ensuring the contents are zeroed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:70,failure,failures,70,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['failure'],['failures']
Availability,"/// A utility pass template to force an analysis result to be available.; ///; /// If there are extra arguments at the pass's run level there may also be; /// extra arguments to the analysis manager's \c getResult routine. We can't; /// guess how to effectively map the arguments from one to the other, and so; /// this specialization just ignores them.; ///; /// Specific patterns of run-method extra arguments and analysis manager extra; /// arguments will have to be defined as appropriate specializations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:62,avail,available,62,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['avail'],['available']
Availability,/// A value of ``false`` means that any of the affected ranges were not; /// formatted due to a non-recoverable syntax error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:100,recover,recoverable,100,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,"['error', 'recover']","['error', 'recoverable']"
Availability,"/// A vector select: ""(select vL, vR, (setcc LHS, RHS))"" is best performed with; /// the compare-mask instructions rather than going via NZCV, even if LHS and; /// RHS are really scalar. This replaces any scalar setcc in the above pattern; /// with a vector one followed by a DUP shuffle on the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:97,mask,mask,97,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['mask'],['mask']
Availability,/// A version for when a file descriptor is already available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:52,avail,available,52,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,2,['avail'],['available']
Availability,"/// A very simple error handler that is usually replaced by the TROOT default error handler.; /// The minimal error handler is not serialized across threads, so that output of multi-threaded programs; /// can get scrambled; /// @note `abort()` is only called if `abort_bool` is `true` and `level >= gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx:18,error,error,18,core/foundation/src/TError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx,3,['error'],['error']
Availability,/// A wrapper around an ExplodedGraph that contains a single path from the root; /// to the error node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:92,error,error,92,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['error'],['error']
Availability,/// A wrapper around an ExplodedGraph whose leafs are all error nodes. Can; /// conveniently retrieve bug paths from a single error node to the root.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:58,error,error,58,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,2,['error'],['error']
Availability,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:245,Error,Error,245,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,14,"['Error', 'error', 'redundant']","['Error', 'error', 'redundant']"
Availability,/// A wrapper for holding a mask of the values from X86::AlignBranchBoundaryKind,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:28,mask,mask,28,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp,1,['mask'],['mask']
Availability,/// AV - The actual available value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:20,avail,available,20,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['avail'],['available']
Availability,"/// Abstract base class of cleanup handlers.; ///; /// Derived classes override method recoverResources, which makes actual work on; /// resource recovery.; ///; /// Cleanup handlers are stored in a double list, which is owned and managed by; /// a crash recovery context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h:87,recover,recoverResources,87,interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,3,['recover'],"['recoverResources', 'recovery']"
Availability,/// Abstract call site (ACS) repair callback type; ///; /// The abstract call site repair callback is invoked once on every abstract; /// call site of the replaced function (\see ReplacedFn). The callback needs; /// to provide the operands for the call to the new replacement function.; /// The number and type of the operands appended to the provided vector; /// (second argument) is defined by the number and types determined through; /// the replacement type vector (\see ReplacementTypes). The first argument; /// is the ArgumentReplacementInfo object registered with the Attributor; /// through the registerFunctionSignatureRewrite call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:29,repair,repair,29,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['repair'],['repair']
Availability,"/// Abstract call site (ACS) repair callback, see ACSRepairCBTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:29,repair,repair,29,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['repair'],['repair']
Availability,"/// AbstractCallSite; ///; /// An abstract call site is a wrapper that allows to treat direct,; /// indirect, and callback calls the same. If an abstract call site; /// represents a direct or indirect call site it behaves like a stripped; /// down version of a normal call site object. The abstract call site can; /// also represent a callback call, thus the fact that the initially; /// called function (=broker) may invoke a third one (=callback callee).; /// In this case, the abstract call site hides the middle man, hence the; /// broker function. The result is a representation of the callback call,; /// inside the broker, but in the context of the original call to the broker.; ///; /// There are up to three functions involved when we talk about callback call; /// sites. The caller (1), which invokes the broker function. The broker; /// function (2), that will invoke the callee zero or more times. And finally; /// the callee (3), which is the target of the callback call.; ///; /// The abstract call site will handle the mapping from parameters to arguments; /// depending on the semantic of the broker function. However, it is important; /// to note that the mapping is often partial. Thus, some arguments of the; /// call/invoke instruction are mapped to parameters of the callee while others; /// are not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h:243,down,down,243,interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h,1,['down'],['down']
Availability,"/// Access to a derived version of all the currently owned ObjectFiles. The; /// conversion might be invalid, in which case an Error is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h:127,Error,Error,127,interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,1,['Error'],['Error']
Availability,"/// Access to target class pointer (if available)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfoReference.h:39,avail,available,39,tree/treeplayer/inc/TFormLeafInfoReference.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfoReference.h,1,['avail'],['available']
Availability,/// AccessType - The final access type. May be null if there is no TBAA; /// information available about this access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:89,avail,available,89,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['avail'],['available']
Availability,"/// Account for a location \p mloc being clobbered. Examine the variable; /// locations that will be terminated: and try to recover them by using; /// another location. Optionally, given \p MakeUndef, emit a DBG_VALUE to; /// explicitly terminate a location if it can't be recovered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:124,recover,recover,124,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['recover'],"['recover', 'recovered']"
Availability,"/// ActOnBlockError - If there is an error parsing a block, this callback; /// is invoked to pop the information about the block from the action impl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,error,error,37,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['error'],['error']
Availability,"/// ActOnCXXForRangeStmt - Check and build a C++11 for-range statement.; ///; /// C++11 [stmt.ranged]:; /// A range-based for statement is equivalent to; ///; /// {; /// auto && __range = range-init;; /// for ( auto __begin = begin-expr,; /// __end = end-expr;; /// __begin != __end;; /// ++__begin ) {; /// for-range-declaration = *__begin;; /// statement; /// }; /// }; ///; /// The body of the loop is not available yet, since it cannot be analysed until; /// we have determined the type of the for-range-declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:409,avail,available,409,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['avail'],['available']
Availability,"/// ActOnInitializerError - Given that there was an error parsing an; /// initializer for the given declaration, try to at least re-establish; /// invariants such as whether a variable's type is either dependent or; /// complete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:52,error,error,52,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"/// ActOnLambdaError - If there is an error parsing a lambda, this callback; /// is invoked to pop the information about the lambda.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:38,error,error,38,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,/// ActOnTagDefinitionError - Invoked when there was an unrecoverable; /// error parsing the definition of a tag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:75,error,error,75,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"/// Actually emit an availability diagnostic for a reference to an unavailable; /// decl.; ///; /// \param Ctx The context that the reference occurred in; /// \param ReferringDecl The exact declaration that was referenced.; /// \param OffendingDecl A related decl to \c ReferringDecl that has an; /// availability attribute corresponding to \c K attached to it. Note that this; /// may not be the same as ReferringDecl, i.e. if an EnumDecl is annotated and; /// we refer to a member EnumConstantDecl, ReferringDecl is the EnumConstantDecl; /// and OffendingDecl is the EnumDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:21,avail,availability,21,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,2,['avail'],['availability']
Availability,"/// Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:22,Mask,Mask,22,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,2,['Mask'],['Mask']
Availability,"/// Add Succ as a successor of this MachineBasicBlock. The Predecessors list; /// of Succ is automatically updated. The probability is not provided because; /// BPI is not available (e.g. -O0 is used), in which case edge probabilities; /// won't be used. Using this interface can save some space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:172,avail,available,172,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['avail'],['available']
Availability,"/// Add `input` to the sum.; ///; /// Particularly helpful when filling from a for loop.; /// This function can be inlined and auto-vectorised if; /// the index parameter is used to enumerate *consecutive* fills.; /// Use Add() or Accumulate() when no index is available.; /// \param[in] input Value to accumulate.; /// \param[in] index Index of the value. Determines internal accumulator that this; /// value is added to. Make sure that consecutive fills have consecutive indices; /// to make a loop auto-vectorisable. The actual value of the index does not matter,; /// as long as it is consecutive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:261,avail,available,261,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,1,['avail'],['available']
Availability,/// Add a DAG edge to the given SU with the given predecessor; /// dependence data.; ///; /// \returns true if the edge may be added without creating a cycle OR if an; /// equivalent edge already existed (false indicates failure).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:221,failure,failure,221,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['failure'],['failure']
Availability,"/// Add a bit to this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this |= ~Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:50,Mask,Mask,50,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,2,['Mask'],['Mask']
Availability,/// Add a block to the map. Returns an error if the block overlaps with any; /// existing block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:39,error,error,39,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['error'],['error']
Availability,"/// Add a box with parameter values (and errors) to the specified frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:41,error,errors,41,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,1,['error'],['errors']
Availability,"/// Add a call stack context with the given allocation type to the Trie.; /// The context is represented by the list of stack ids (computed during; /// matching via a debug location hash), expected to be in order from the; /// allocation call down to the bottom of the call stack (i.e. callee to; /// caller order).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h:243,down,down,243,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h,1,['down'],['down']
Availability,/// Add a new line and the required indent before the first Token; /// of the \c UnwrappedLine if there was no structural parsing error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.h:130,error,error,130,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.h,1,['error'],['error']
Availability,"/// Add a pass to the queue of passes to run. This passes ownership of; /// the Pass to the PassManager. When the PassManager is destroyed, the pass; /// will be destroyed as well, so there is no need to delete the pass. This; /// may even destroy the pass right away if it is found to be redundant. This; /// implies that all passes MUST be allocated with 'new'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:289,redundant,redundant,289,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,1,['redundant'],['redundant']
Availability,"/// Add a range of blocks to the map. Returns an error if any block in the; /// range overlaps with any other block in the range, or with any existing; /// block in the map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:49,error,error,49,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['error'],['error']
Availability,"/// Add a range to a bug report.; ///; /// Ranges are used to highlight regions of interest in the source code.; /// They should be at the same source code line as the BugReport location.; /// By default, the source range of the statement corresponding to the error; /// node will be used; add a single invalid range to specify absence of; /// ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:260,error,error,260,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['error'],['error']
Availability,"/// Add a source file to the top of the include stack and; /// start lexing tokens from it instead of the current buffer.; ///; /// Emits a diagnostic, doesn't enter the file, and returns true on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:196,error,error,196,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['error'],['error']
Availability,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:984,avail,available,984,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['avail'],['available']
Availability,"/// Add a stream to the MSF file with the given size, occupying any available; /// blocks that the builder decides to use. This is useful when building a; /// new PDB file from scratch and you don't care what blocks a stream occupies; /// but you just want it to work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:68,avail,available,68,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,1,['avail'],['available']
Availability,"/// Add a stream to the MSF file with the given size, occupying the given; /// list of blocks. This is useful when reading a MSF file and you want a; /// particular stream to occupy the original set of blocks. If the given; /// blocks are already allocated, or if the number of blocks specified is; /// incorrect for the given stream size, this function will return an Error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:369,Error,Error,369,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,1,['Error'],['Error']
Availability,/// Add a virtual register use operand. It is an error for Flags to contain; /// `RegState::Define` when calling this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:49,error,error,49,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,1,['error'],['error']
Availability,/// Add an attribute to the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:28,mask,mask,28,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,1,['mask'],['mask']
Availability,"/// Add an error to the diagnostics.; ///; /// All the context information will be kept on the error message.; /// \return a helper class to allow the caller to pass the arguments for the; /// error message, using the << operator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:11,error,error,11,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,3,['error'],['error']
Availability,"/// Add an external symbol.; /// Some formats (e.g. ELF) allow Symbols to have sizes. For Symbols whose; /// size is not known, you should substitute '0'.; /// The IsWeaklyReferenced argument determines whether the symbol must be; /// present during lookup: Externals that are strongly referenced must be; /// found or an error will be emitted. Externals that are weakly referenced; /// are permitted to be undefined, in which case they are assigned an address; /// of 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:322,error,error,322,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['error'],['error']
Availability,/// Add artificial symbol dependency.; ///; /// The dependent symbol should stay alive as long as the primary is alive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:81,alive,alive,81,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,2,['alive'],['alive']
Availability,/// Add availability attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:8,avail,availability,8,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,1,['avail'],['availability']
Availability,"/// Add free Parameter Name, Value, Error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:36,Error,Error,36,math/minuit2/inc/Minuit2/MnUserParameters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h,1,['Error'],['Error']
Availability,/// Add in the given SMSNode. Uses a free entry in our freelist if; /// available. Returns the index of the added node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:72,avail,available,72,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,1,['avail'],['available']
Availability,/// Add masking operations to stencil out a subregister.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h:8,mask,masking,8,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,1,['mask'],['masking']
Availability,"/// Add objects to a 2D plot.; /// Plot error ellipse in par1 and par2 on frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:40,error,error,40,roofit/roofitcore/inc/RooFitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h,1,['error'],['error']
Availability,/// Add pass P into the PassVector. Update; /// AvailableAnalysis appropriately if ProcessAnalysis is true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:48,Avail,AvailableAnalysis,48,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,2,['Avail'],['AvailableAnalysis']
Availability,"/// Add synthesized debug information to a module.; ///; /// \param M The module to add debug information to.; /// \param Functions A range of functions to add debug information to.; /// \param Banner A prefix string to add to debug/error messages.; /// \param ApplyToMF A call back that will add debug information to the; /// MachineFunction for a Function. If nullptr, then the; /// MachineFunction (if any) will not be modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:233,error,error,233,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,1,['error'],['error']
Availability,"/// Add the given feature requirement to the list of features; /// required by this module.; ///; /// \param Feature The feature that is required by this module (and; /// its submodules).; ///; /// \param RequiredState The required state of this feature: \c true; /// if it must be present, \c false if it must be absent.; ///; /// \param LangOpts The set of language options that will be used to; /// evaluate the availability of this feature.; ///; /// \param Target The target options that will be used to evaluate the; /// availability of this feature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:415,avail,availability,415,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,2,['avail'],['availability']
Availability,/// Add the specified register class as an available regclass for the; /// specified value type. This indicates the selector can handle values of; /// that class natively.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:43,avail,available,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['avail'],['available']
Availability,"/// Add two APFloats, rounding ties to the nearest even.; /// No error checking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:65,error,error,65,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['error'],['error']
Availability,/// AddAvailableValue - Indicate that a rewritten value is available at the; /// end of the specified block with the specified value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:59,avail,available,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,1,['avail'],['available']
Availability,/// AddAvailableValue - Indicate that a rewritten value is available in the; /// specified block with the specified value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp:59,avail,available,59,interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,1,['avail'],['available']
Availability,/// Address of block to recover at. Null for a finally handler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:24,recover,recover,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['recover'],['recover']
Availability,/// Adds 2 input vectors (in form of tree entries) and the mask for their; /// shuffling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:59,mask,mask,59,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['mask'],['mask']
Availability,/// Adds 2 input vectors and the mask for their shuffling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:33,mask,mask,33,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['mask'],['mask']
Availability,"/// Adds a new replacement \p R to the current set of replacements.; /// \p R must have the same file path as all existing replacements.; /// Returns `success` if the replacement is successfully inserted; otherwise,; /// it returns an llvm::Error, i.e. there is a conflict between R and the; /// existing replacements (i.e. they are order-dependent) or R's file path is; /// different from the filepath of existing replacements. Callers must; /// explicitly check the Error returned, and the returned error can be; /// converted to a string message with `llvm::toString()`. This prevents users; /// from adding order-dependent replacements. To control the order in which; /// order-dependent replacements are applied, use merge({R}) with R referring; /// to the changed code after applying all existing replacements.; /// Two replacements A and B are considered order-independent if applying them; /// in either order produces the same result. Note that the range of the; /// replacement that is applied later still refers to the original code.; /// These include (but not restricted to) replacements that:; /// - don't overlap (being directly adjacent is fine) and; /// - are overlapping deletions.; /// - are insertions at the same offset and applying them in either order; /// has the same effect, i.e. X + Y = Y + X when inserting X and Y; /// respectively.; /// - are identical replacements, i.e. applying the same replacement twice; /// is equivalent to applying it once.; /// Examples:; /// 1. Replacement A(0, 0, ""a"") and B(0, 0, ""aa"") are order-independent since; /// applying them in either order gives replacement (0, 0, ""aaa"").; /// However, A(0, 0, ""a"") and B(0, 0, ""b"") are order-dependent since; /// applying A first gives (0, 0, ""ab"") while applying B first gives (B, A,; /// ""ba"").; /// 2. Replacement A(0, 2, ""123"") and B(0, 2, ""123"") are order-independent; /// since applying them in either order gives (0, 2, ""123"").; /// 3. Replacement A(0, 3, ""123"") and B(2, 3, ""321"") are order-",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h:241,Error,Error,241,interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,3,"['Error', 'error']","['Error', 'error']"
Availability,"/// Adds a replacement that inserts \p Text at \p Loc. If this; /// insertion conflicts with an existing insertion (at the same position),; /// this will be inserted before/after the existing insertion depending on; /// \p InsertAfter. Users should use `replace` with `Length=0` instead if they; /// do not want conflict resolving by default. If the conflicting replacement; /// is not an insertion, an error is returned.; ///; /// \returns An llvm::Error carrying ReplacementError on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:403,error,error,403,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,3,"['Error', 'error']","['Error', 'error']"
Availability,"/// Adds a replacement that replaces range [Loc, Loc+Length) with; /// \p Text.; /// \returns An llvm::Error carrying ReplacementError on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:103,Error,Error,103,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,2,"['Error', 'error']","['Error', 'error']"
Availability,/// Adds a replacement that replaces the given Range with; /// ReplacementText.; /// \returns An llvm::Error carrying ReplacementError on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:103,Error,Error,103,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,2,"['Error', 'error']","['Error', 'error']"
Availability,"/// Adds a requirement that another module flag be present and have a; /// specified value after linking is performed. The value must be a metadata; /// pair, where the first element of the pair is the ID of the module flag; /// to be restricted, and the second element of the pair is the value the; /// module flag should be restricted to. This behavior can be used to; /// restrict the allowable results (via triggering of an error) of linking; /// IDs with the **Override** behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:428,error,error,428,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['error'],['error']
Availability,"/// Adds an error with a descriptive tag that helps with identification.; /// If the error is an Error::success(), it is checked and discarded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:12,error,error,12,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,3,"['Error', 'error']","['Error', 'error']"
Availability,/// Adds another one input vector and the mask for the shuffling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:42,mask,mask,42,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,['mask'],['mask']
Availability,"/// Adds live-in registers from basic block \p MBB, taking associated; /// lane masks into consideration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h:80,mask,masks,80,interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,1,['mask'],['masks']
Availability,/// Adds register units covered by physical register \p Reg that are; /// part of the lanemask \p Mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegUnits.h:98,Mask,Mask,98,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegUnits.h,1,['Mask'],['Mask']
Availability,/// Adds run-time bounds checks to memory accessing instructions.; ///; /// \p Or is the condition that should guard the trap.; ///; /// \p GetTrapBB is a callable that returns the trap BB to use on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp:199,failure,failure,199,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp,1,['failure'],['failure']
Availability,/// Adds single input vector (in form of tree entry) and the mask for its; /// shuffling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:61,mask,mask,61,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['mask'],['mask']
Availability,"/// Adds the cost of reshuffling \p E1 and \p E2 (if present), using given; /// mask \p Mask, register number \p Part, that includes \p SliceSize; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:80,mask,mask,80,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,"['Mask', 'mask']","['Mask', 'mask']"
Availability,/// Adjust a 64-bit scaled number down to the appropriate width.; ///; /// \pre Adding 64 to \c Scale will not overflow INT16_MAX.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:34,down,down,34,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['down'],['down']
Availability,/// Adjust the live registers to be the set in Mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:47,Mask,Mask,47,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['Mask'],['Mask']
Availability,"/// Adjust this printing policy for cases where it's known that we're; /// printing C++ code (for instance, if AST dumping reaches a C++-only; /// construct). This should not be used if a real LangOptions object is; /// available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:220,avail,available,220,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,1,['avail'],['available']
Availability,"/// AdjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LatencyPriorityQueue.cpp:114,avail,available,114,interpreter/llvm-project/llvm/lib/CodeGen/LatencyPriorityQueue.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LatencyPriorityQueue.cpp,3,['avail'],['available']
Availability,/// Advance the Cursor position by the given number of bytes. No-op if the; /// cursor is in an error state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:96,error,error,96,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['error'],['error']
Availability,"/// Advance the stream's offset by \p Amount bytes.; ///; /// \returns a success error code if at least \p Amount bytes remain in the; /// stream, otherwise returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:81,error,error,81,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,2,['error'],['error']
Availability,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:66,down,down,66,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,1,['down'],['down']
Availability,"/// After failing to build a precompiled preamble (due to; /// errors in the source that occurs in the preamble), the number of; /// reparses during which we'll skip even trying to precompile the; /// preamble.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:63,error,errors,63,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,1,['error'],['errors']
Availability,"/// After reading ""MACRO("", this method is invoked to read all of the formal; /// arguments specified for the macro invocation. Returns null on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:144,error,error,144,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['error'],['error']
Availability,/// AliveBlocks - Set of blocks in which this value is alive completely; /// through. This is a bit set which uses the basic block number as an; /// index.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveVariables.h:4,Alive,AliveBlocks,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveVariables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveVariables.h,2,"['Alive', 'alive']","['AliveBlocks', 'alive']"
Availability,/// All Required analyses should be available to the pass as it runs! Here; /// we fill in the AnalysisImpls member of the pass so that it can; /// successfully use the getAnalysis() method to retrieve the; /// implementations it needs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:36,avail,available,36,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,1,['avail'],['available']
Availability,/// All available information about a concrete callee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:8,avail,available,8,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,1,['avail'],['available']
Availability,/// All blocks of loop are to be masked to fold tail of scalar iterations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:33,mask,masked,33,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['mask'],['masked']
Availability,/// All errors from the system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:8,error,errors,8,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,1,['error'],['errors']
Availability,/// All kinds of errors that can occur in `atomic compare`,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:17,error,errors,17,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['error'],['errors']
Availability,/// All producer implementations must yield either an Error or a non-nullptr; /// unique_ptr<Record>.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h:54,Error,Error,54,interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h,1,['Error'],['Error']
Availability,"/// All the function redeclarations seen during a class definition that had; /// their exception spec checks delayed, plus the prior declaration they; /// should be checked against. Except during error recovery, the new decl; /// should always be a friend declaration, as that's the only valid way to; /// redeclare a special member before its class is complete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:196,error,error,196,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,"['error', 'recover']","['error', 'recovery']"
Availability,"/// Allocate a TemplateArgumentLoc where all locations have; /// been initialized to the given location.; ///; /// \param Arg The template argument we are producing template argument; /// location information for.; ///; /// \param NTTPType For a declaration template argument, the type of; /// the non-type template parameter that corresponds to this template; /// argument. Can be null if no type sugar is available to add to the; /// type from the template argument.; ///; /// \param Loc The source location to use for the resulting template; /// argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:407,avail,available,407,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['avail'],['available']
Availability,"/// Allocate an array of at least the requested capacity.; ///; /// Return an existing recycled array, or allocate one from Allocator if; /// none are available for recycling.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ArrayRecycler.h:151,avail,available,151,interpreter/llvm-project/llvm/include/llvm/Support/ArrayRecycler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ArrayRecycler.h,1,['avail'],['available']
Availability,/// Allocate and initialize a register mask with @p NumRegister bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:39,mask,mask,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['mask'],['mask']
Availability,"/// AllocateReg - Attempt to allocate one of the specified registers. If none; /// are available, return zero. Otherwise, return the first one available,; /// marking it and any aliases as allocated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:87,avail,available,87,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,2,['avail'],['available']
Availability,"/// AllocateReg - Attempt to allocate one register. If it is not available,; /// return zero. Otherwise, return the register, marking it and any aliases; /// as allocated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:65,avail,available,65,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['avail'],['available']
Availability,/// Allow the target to override the cost of using a callee-saved register for; /// the first time. Default value of 0 means we will use a callee-saved; /// register if it is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:175,avail,available,175,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['avail'],['available']
Availability,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:298,down,down,298,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['down'],['down']
Availability,"/// An RAII helper object ensure that the unique lock file is removed.; ///; /// Ensures that if there is an error or a signal before we finish acquiring the; /// lock, the unique file will be removed. And if we successfully take the lock,; /// the signal handler is left in place so that signals while the lock is held; /// will remove the unique lock file. The caller should ensure there is a; /// matching call to sys::DontRemoveFileOnSignal when the lock is released.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:109,error,error,109,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,1,['error'],['error']
Availability,/// An abstract state for querying live call edges.; /// This interface uses the Attributor's optimistic liveness; /// information to compute the edges that are alive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:161,alive,alive,161,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['alive'],['alive']
Availability,"/// An adapter for std::invoke_result that falls back to std::result_of if the former is not available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/TypeTraits.hxx:93,avail,available,93,core/foundation/inc/ROOT/TypeTraits.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/TypeTraits.hxx,1,['avail'],['available']
Availability,/// An analysis for type-inference for VPValues.; /// It infers the scalar type for a given VPValue by bottom-up traversing; /// through defining recipes until root nodes with known types are reached (e.g.; /// live-ins or load recipes). The types are then propagated top down through; /// operations.; /// Note that the analysis caches the inferred types. A new analysis object must; /// be constructed once a VPlan has been modified in a way that invalidates any; /// of the previously inferred types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanAnalysis.h:272,down,down,272,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanAnalysis.h,1,['down'],['down']
Availability,"/// An atomic change is used to create and group a set of source edits,; /// e.g. replacements or header insertions. Edits in an AtomicChange should be; /// related, e.g. replacements for the same type reference and the corresponding; /// header insertion/deletion.; ///; /// An AtomicChange is uniquely identified by a key and will either be fully; /// applied or not applied at all.; ///; /// Calling setError on an AtomicChange stores the error message and marks it as; /// bad, i.e. none of its source edits will be applied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:442,error,error,442,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,1,['error'],['error']
Availability,"/// An enumeration to represent the transition of states in parsing module; /// fragments and imports. If we are not parsing a C++20 TU, or we find; /// an error in state transition, the state is set to NotACXX20Module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:156,error,error,156,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,/// An error handler callback.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:7,error,error,7,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['error'],['error']
Availability,/// An error occurred during parsing of the scope specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:7,error,error,7,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['error'],['error']
Availability,/// An error occurred while trying to create or find the lock; /// file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:7,error,error,7,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,1,['error'],['error']
Availability,/// An error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:7,error,error,7,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"/// An error that has already been reported.; ///; /// This class is designed to support a function whose callers may need to know; /// whether the function encountered and reported an error but never need to; /// know the nature of that error. For example, the function has a return type; /// of \c Error and always returns either \c ErrorReported or \c ErrorSuccess.; /// That interface is similar to that of a function returning bool to indicate; /// an error except, in the former case, (1) there is no confusion over polarity; /// and (2) the caller must either check the result or explicitly ignore it with; /// a call like \c consumeError.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:7,error,error,7,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,7,"['Error', 'error']","['Error', 'ErrorReported', 'ErrorSuccess', 'error']"
Availability,/// An expression contains semantical error not related to; /// 'omp atomic [update]',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:38,error,error,38,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['error'],['error']
Availability,"/// An in-memory representation of a file system entity that is of interest to; /// the dependency scanning filesystem.; ///; /// It represents one of the following:; /// - opened file with contents and a stat value,; /// - opened file with contents, directive tokens and a stat value,; /// - directory entry with its stat value,; /// - filesystem error.; ///; /// Single instance of this class can be shared across different filenames (e.g.; /// a regular file and a symlink). For this reason the status filename is empty; /// and is only materialized by \c EntryRef that knows the requested filename.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h:348,error,error,348,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,1,['error'],['error']
Availability,"/// An interleave-group may need masking if it resides in a block that needs; /// predication, or in order to mask away gaps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:33,mask,masking,33,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['mask'],"['mask', 'masking']"
Availability,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:648,mask,mask,648,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,1,['mask'],['mask']
Availability,"/// An intrusive list with ownership and callbacks specified/controlled by; /// ilist_traits, only with API safe for polymorphic types.; ///; /// The \p Options parameters are the same as those for \a simple_ilist. See; /// there for a description of what's available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:258,avail,available,258,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,1,['avail'],['available']
Availability,"/// An optimization pass over PathPieces that removes redundant diagnostics; /// generated by both ConditionBRVisitor and TrackConstraintBRVisitor. Both; /// BugReporterVisitors use different methods to generate diagnostics, with; /// one capable of emitting diagnostics in some cases but not in others. This; /// can lead to redundant diagnostic pieces at the same point in a path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:54,redundant,redundant,54,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,2,['redundant'],['redundant']
Availability,"/// An unknown context, in which we are recovering from a parsing; /// error and don't know which completions we should give.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:40,recover,recovering,40,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,2,"['error', 'recover']","['error', 'recovering']"
Availability,"/// Analogous to Fill(), fills the default entry of the model. Returns false at the end of the ntuple.; /// On I/O errors, raises an exception.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx:115,error,errors,115,tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,1,['error'],['errors']
Availability,/// AnalysisDiagClients - Set of available diagnostic clients for rendering; /// analysis results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:33,avail,available,33,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['avail'],['available']
Availability,/// AnalysisPurgeModes - Set of available strategies for dead symbol removal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:32,avail,available,32,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['avail'],['available']
Availability,"/// Analyze pattern \p P, returning a matcher for it if possible.; /// Otherwise, return an Error explaining why we don't support it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:92,Error,Error,92,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,1,['Error'],['Error']
Availability,"/// Analyze the branching code at the end of MBB and parse it into the; /// MachineBranchPredicate structure if possible. Returns false on success; /// and true on failure.; ///; /// If AllowModify is true, then this routine is allowed to modify the basic; /// block (e.g. delete instructions after the unconditional branch).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:164,failure,failure,164,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['failure'],['failure']
Availability,"/// AnalyzeAsmString - Analyze the asm string of the current asm, decomposing; /// it into pieces. If the asm string is erroneous, emit errors and return; /// true, otherwise return false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp:136,error,errors,136,interpreter/llvm-project/clang/lib/AST/Stmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp,1,['error'],['errors']
Availability,"/// AnalyzeAsmString - Analyze the asm string of the current asm, decomposing; /// it into pieces. If the asm string is erroneous, emit errors and return; /// true, otherwise return false. This handles canonicalization and; /// translation of strings from GCC syntax to LLVM IR syntax, and handles; //// flattening of named references like %[foo] to Operand AsmStringPiece's.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:136,error,errors,136,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['error'],['errors']
Availability,/// Analyzes and checks a loop nest for use by a loop transformation.; ///; /// \param Kind The loop transformation directive kind.; /// \param NumLoops How many nested loops the directive is expecting.; /// \param AStmt Associated statement of the transformation directive.; /// \param LoopHelpers [out] The loop analysis result.; /// \param Body [out] The body code nested in \p NumLoops loop.; /// \param OriginalInits [out] Collection of statements and declarations that; /// must have been executed/declared before entering the; /// loop.; ///; /// \return Whether there was any error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:584,error,error,584,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,/// Annotation has failed and emitted an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:41,error,error,41,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['error'],['error']
Availability,/// Appends a fully-formed Block instance into the Profile.; ///; /// Returns an error condition in the following cases:; ///; /// - The PathData component of the Block is empty; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Profile.h:81,error,error,81,interpreter/llvm-project/llvm/include/llvm/XRay/Profile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Profile.h,1,['error'],['error']
Availability,"/// Applies all AtomicChanges in \p Changes to the \p Code.; ///; /// This completely ignores the file path in each change and replaces them with; /// \p FilePath, i.e. callers are responsible for ensuring all changes are for; /// the same file.; ///; /// \returns The changed code if all changes are applied successfully;; /// otherwise, an llvm::Error carrying llvm::StringError is returned (the Error; /// message can be converted to string with `llvm::toString()` and the; /// error_code should be ignored).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:348,Error,Error,348,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,2,['Error'],['Error']
Availability,"/// Applies all replacements in \p Replaces to \p Code.; ///; /// This completely ignores the path stored in each replacement. If all; /// replacements are applied successfully, this returns the code with; /// replacements applied; otherwise, an llvm::Error carrying llvm::StringError; /// is returned (the Error message can be converted to string using; /// `llvm::toString()` and 'std::error_code` in the `Error` should be ignored).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h:252,Error,Error,252,interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,3,['Error'],['Error']
Availability,"/// Applies automatic modifications and produces temporary files; /// and metadata into the \p outputDir path.; ///; /// \param emitPremigrationARCErrors if true all ARC errors will get emitted; /// even if the migrator can fix them, but the function will still return false; /// if all ARC errors can be fixed.; ///; /// \param plistOut if non-empty, it is the file path to store the plist with; /// the pre-migration ARC diagnostics.; ///; /// \returns false if no error is produced, true otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ARCMigrate/ARCMT.h:170,error,errors,170,interpreter/llvm-project/clang/include/clang/ARCMigrate/ARCMT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ARCMigrate/ARCMT.h,3,['error'],"['error', 'errors']"
Availability,"/// Applies the transformations described by \p Config to \p In and writes; /// the result into \p Out. This function does the dispatch based on the; /// format of the input binary (COFF, ELF, MachO or wasm).; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:227,Error,Error,227,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,1,['Error'],['Error']
Availability,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// Writes a result in a file specified by \p Config.OutputFilename.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:181,Error,Error,181,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,1,['Error'],['Error']
Availability,"/// Apply \p Mapping to \p MI. \p RepairPts represents the different; /// mapping action that need to happen for the mapping to be; /// applied.; /// \return True if the mapping was applied sucessfully, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:34,Repair,RepairPts,34,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['Repair'],['RepairPts']
Availability,/// Apply all pending updates to available trees and flush all BasicBlocks; /// awaiting deletion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h:33,avail,available,33,interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,1,['avail'],['available']
Availability,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:39,error,errors,39,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,3,['error'],['errors']
Availability,/// Apply fixes even if there are unfixable errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:44,error,errors,44,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['error'],['errors']
Availability,"/// Apply results of given external covariance matrix. i.e. propagate its errors; /// to all RRV parameter representations and give this matrix instead of the; /// HESSE matrix at the next save() call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:74,error,errors,74,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,1,['error'],['errors']
Availability,"/// Apply the \p Value for given \p Fixup into the provided data fragment, at; /// the offset specified by the fixup and following the fixup kind as; /// appropriate. Errors (such as an out of range fixup value) should be; /// reported via \p Ctx.; /// The \p STI is present only for fragments of type MCRelaxableFragment and; /// MCDataFragment with hasInstructions() == true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:167,Error,Errors,167,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,1,['Error'],['Errors']
Availability,"/// Apply the current let bindings to \a CurRec.; /// \returns true on error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:71,error,error,71,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['error'],['error']
Availability,/// Apply the transformations described by \p Config and \p COFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h:138,Error,Error,138,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,1,['Error'],['Error']
Availability,/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:137,Error,Error,137,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,1,['Error'],['Error']
Availability,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which is treated as a raw binary input, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:183,Error,Error,183,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,1,['Error'],['Error']
Availability,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which must represent an IHex file, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:178,Error,Error,178,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,1,['Error'],['Error']
Availability,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:139,Error,Error,139,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,2,['Error'],['Error']
Availability,/// Apply the transformations described by \p Config and \p WasmConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h:138,Error,Error,138,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,1,['Error'],['Error']
Availability,/// Apply the transformations described by \p Config and \p XCOFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h:139,Error,Error,139,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,1,['Error'],['Error']
Availability,"/// ApplyTypeConstraint - Given a node in a pattern, apply this type; /// constraint to the nodes operands. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, an error; /// is flagged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:207,error,error,207,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['error'],['error']
Availability,"/// ApplyTypeConstraint - Given a node in a pattern, apply this type; /// constraint to the nodes operands. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, flag an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:212,error,error,212,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['error'],['error']
Availability,"/// ApplyTypeConstraints - Apply all of the type constraints relevant to; /// this node and its children in the tree. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, flag an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:222,error,error,222,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,2,['error'],['error']
Availability,"/// ApplyTypeConstraints - Given a node in a pattern, apply the type; /// constraints for this node to the operands of the node. This returns; /// true if it makes a change, false otherwise. If a type contradiction is; /// found, an error is flagged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:233,error,error,233,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['error'],['error']
Availability,/// Are the empty collection symbols available?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:37,avail,available,37,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,1,['avail'],['available']
Availability,"/// As a return value of ReadBulk and ReadBulkImpl(), indicates that the full bulk range was read; /// independent of the provided masks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:131,mask,masks,131,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['mask'],['masks']
Availability,"/// As part of recovering from missing or changed content, produce a; /// fake content cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,recover,recovering,15,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['recover'],['recovering']
Availability,"/// As part of recovering from missing or changed content, produce a; /// fake, non-empty buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,recover,recovering,15,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['recover'],['recovering']
Availability,/// Assert that this is a shufflevector and return the mask. See class; /// ShuffleVectorInst for a description of the mask representation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:55,mask,mask,55,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['mask'],['mask']
Availability,/// Assert that this is a shufflevector and return the mask.; ///; /// TODO: This is a temporary hack until we update the bitcode format for; /// shufflevector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:55,mask,mask,55,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['mask'],['mask']
Availability,/// Asserts that the cached info for \p BB is up-to-date. This helps to catch; /// the usage error of accessing a block without properly invalidating after a; /// previous transform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h:93,error,error,93,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,1,['error'],['error']
Availability,/// Asserts whether or not the contents of this tracking is up-to-date. This; /// helps to catch the usage error of accessing a block without properly; /// invalidating after a previous transform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h:107,error,error,107,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h,1,['error'],['error']
Availability,/// Assign VirtReg to PhysReg.; /// This will mark VirtReg's live range as occupied in the LiveRegMatrix and; /// update VirtRegMap. The live range is expected to be available in PhysReg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h:166,avail,available,166,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h,1,['avail'],['available']
Availability,"/// Assign histogram name to use with fit panel - it should be available in gDirectory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanel.cxx:63,avail,available,63,gui/fitpanelv7/src/RFitPanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanel.cxx,1,['avail'],['available']
Availability,/// Assume that floating-point exceptions are masked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:46,mask,masked,46,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['mask'],['masked']
Availability,/// Attach a type-constraint to a template parameter.; /// \returns true if an error occurred. This can happen if the; /// immediately-declared constraint could not be formed (e.g. incorrect number; /// of arguments for the named concept).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:79,error,error,79,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,"/// Attempt to claim responsibility for new definitions. This method can be; /// used to claim responsibility for symbols that are added to a; /// materialization unit during the compilation process (e.g. literal pool; /// symbols). Symbol linkage rules are the same as for symbols that are; /// defined up front: duplicate strong definitions will result in errors.; /// Duplicate weak definitions will be discarded (in which case they will; /// not be added to this responsibility instance).; ///; /// This method can be used by materialization units that want to add; /// additional symbols at materialization time (e.g. stubs, compile; /// callbacks, metadata).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:358,error,errors,358,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['error'],['errors']
Availability,/// Attempt to constant fold a binary operation with the specified operands.; /// Returns null or a constant expression of the specified operands on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:149,failure,failure,149,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,1,['failure'],['failure']
Availability,/// Attempt to constant fold a compare instruction (icmp/fcmp) with the; /// specified operands. Returns null or a constant expression of the specified; /// operands on failure.; /// Denormal inputs may be flushed based on the denormal handling mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:169,failure,failure,169,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,1,['failure'],['failure']
Availability,"/// Attempt to constant fold a floating point binary operation with the; /// specified operands, applying the denormal handling mod to the operands.; /// Returns null or a constant expression of the specified operands on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:221,failure,failure,221,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,1,['failure'],['failure']
Availability,"/// Attempt to constant fold a shufflevector instruction with the; /// specified operands and mask. See class ShuffleVectorInst for a description; /// of the mask representation. The constant result is returned if successful;; /// if not, null is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:94,mask,mask,94,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,2,['mask'],['mask']
Availability,/// Attempt to constant fold a unary operation with the specified operand.; /// Returns null on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:96,failure,failure,96,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,1,['failure'],['failure']
Availability,/// Attempt to convert pshufb* to shufflevector if the mask is constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:55,mask,mask,55,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['mask'],['mask']
Availability,/// Attempt to convert vpermd/vpermps to shufflevector if the mask is constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:62,mask,mask,62,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['mask'],['mask']
Availability,/// Attempt to convert vpermilvar* to shufflevector if the mask is constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:59,mask,mask,59,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['mask'],['mask']
Availability,/// Attempt to find the PtrState object describing the top down state for; /// pointer Arg. Return a new initialized PtrState describing the top down; /// state for Arg if we do not find one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:59,down,down,59,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,2,['down'],['down']
Availability,"/// Attempt to fold an SSE floating point to integer conversion of a constant; /// floating point. If roundTowardZero is false, the default IEEE rounding is; /// used (toward nearest, ties to even). This matches the behavior of the; /// non-truncating SSE instructions in the default rounding mode. The desired; /// integer type Ty is used to select how many bits are available for the; /// result. Returns null if the conversion cannot be performed, otherwise; /// returns the Constant value resulting from the conversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:368,avail,available,368,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['avail'],['available']
Availability,"/// Attempt to join these two intervals. On failure, this; /// returns false. The output ""SrcInt"" will not have been modified, so we; /// can use this information below to update aliases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:44,failure,failure,44,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['failure'],['failure']
Availability,"/// Attempt to recover from an ill-formed use of a non-dependent name in a; /// template, where the non-dependent name was declared after the template; /// was defined. This is common in code written for a compilers which do not; /// correctly implement two-stage name lookup.; ///; /// Returns true if a viable candidate was found and a diagnostic was issued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:15,recover,recover,15,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['recover'],['recover']
Availability,"/// Attempt to recover from ill-formed use of a non-dependent operator in a; /// template, where the non-dependent operator was declared after the template; /// was defined.; ///; /// Returns true if a viable candidate was found and a diagnostic was issued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:15,recover,recover,15,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['recover'],['recover']
Availability,"/// Attempt to resolve the given module file name to a file entry.; ///; /// \param FileName The name of the module file.; ///; /// \param ExpectedSize The size that the module file is expected to have.; /// If the actual size differs, the resolver should return \c true.; ///; /// \param ExpectedModTime The modification time that the module file is; /// expected to have. If the actual modification time differs, the resolver; /// should return \c true.; ///; /// \param File Will be set to the file if there is one, or null; /// otherwise.; ///; /// \returns True if a file exists but does not meet the size/; /// modification time criteria, false if the file is either available and; /// suitable, or is missing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:673,avail,available,673,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,1,['avail'],['available']
Availability,"/// Attempt to simplify any target nodes based on the demanded bits/elts,; /// returning true on success. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:158,mask,mask,158,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['mask'],"['mask', 'masks']"
Availability,"/// Attempt to simplify any target nodes based on the demanded vector; /// elements, returning true on success. Otherwise, analyze the expression and; /// return a mask of KnownUndef and KnownZero elements for the expression; /// (used to simplify the caller). The KnownUndef/Zero elements may only be; /// accurate for those bits in the DemandedMask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,mask,mask,164,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['mask'],['mask']
Availability,"/// Attempt to sort the pointers in \p VL and return the sorted indices; /// in \p SortedIndices, if reordering is required.; ///; /// Returns 'true' if sorting is legal, otherwise returns 'false'.; ///; /// For example, for a given \p VL of memory accesses in program order, a[i+4],; /// a[i+0], a[i+1] and a[i+7], this function will sort the \p VL and save the; /// sorted indices in \p SortedIndices as a[i+0], a[i+1], a[i+4], a[i+7] and; /// saves the mask for actual memory accesses in program order in; /// \p SortedIndices as <1,2,0,3>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:456,mask,mask,456,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['mask'],['mask']
Availability,"/// Attempts to add visitors to track expression value back to its point of; /// origin.; ///; /// \param N A node ""downstream"" from the evaluation of the statement.; /// \param E The expression value which we are tracking; /// \param R The bug report to which visitors should be attached.; /// \param Opts Tracking options specifying how we are tracking the value.; ///; /// \return Whether or not the function was able to add visitors for this; /// statement. Note that returning \c true does not actually imply; /// that any visitors were added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:116,down,downstream,116,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,1,['down'],['downstream']
Availability,"/// Attempts to assign any available port and interface, returning either the; /// port number or an Error upon failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:27,avail,available,27,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,3,"['Error', 'avail', 'failure']","['Error', 'available', 'failure']"
Availability,"/// Attempts to assign the requested port and interface, returning an Error; /// upon failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:70,Error,Error,70,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,2,"['Error', 'failure']","['Error', 'failure']"
Availability,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:1100,Error,ErrorStr,1100,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,2,"['Error', 'error']","['ErrorStr', 'errors']"
Availability,/// Attempts to do a down cast. Used to model BaseToDerived and C++; /// dynamic_cast.; /// The callback may result in the following 3 scenarios:; /// - Successful cast (ex: derived is subclass of base).; /// - Failed cast (ex: derived is definitely not a subclass of base).; /// The distinction of this case from the next one is necessary to model; /// dynamic_cast.; /// - We don't know (base is a symbolic region and we don't have; /// enough info to determine if the cast will succeed at run time).; /// The function returns an optional with SVal representing the derived class; /// in case of a successful cast and `std::nullopt` otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:21,down,down,21,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,1,['down'],['down']
Availability,/// Attempts to listen for requests on the bound port. Returns an Error if; /// called before binding a port.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:66,Error,Error,66,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,1,['Error'],['Error']
Availability,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:84,error,error,84,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['error'],['error']
Availability,"/// Attempts to merge a block into its predecessor, if possible. The return; /// value indicates success or failure.; /// By default do not merge blocks if BB's predecessor has multiple successors.; /// If PredecessorWithTwoSuccessors = true, the blocks can only be merged; /// if BB's Pred has a branch to BB and to AnotherBB, and BB has a single; /// successor Sing. In this case the branch will be updated with Sing instead of; /// BB, and BB will still be merged into its predecessor and removed.; /// If \p DT is not nullptr, update it directly; in that case, DTU must be; /// nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:108,failure,failure,108,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['failure'],['failure']
Availability,/// Attempts to parse a target data specification string and reports an error; /// if the string is malformed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:72,error,error,72,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['error'],['error']
Availability,"/// Attempts to recover from a call where no functions were found.; ///; /// This function will do one of three things:; /// * Diagnose, recover, and return a recovery expression.; /// * Diagnose, fail to recover, and return ExprError().; /// * Do not diagnose, do not recover, and return ExprResult(). The caller is; /// expected to diagnose as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:16,recover,recover,16,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,5,['recover'],"['recover', 'recovery']"
Availability,"/// Attempts to release the lock in reader mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in reader mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:84,error,error,84,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,1,['error'],['error']
Availability,"/// Attempts to release the lock in writer mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in write mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:84,error,error,84,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,1,['error'],['error']
Availability,/// Attempts to set the alignment of a pointer in the given address space.; /// Returns an error description on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:91,error,error,91,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,2,"['error', 'failure']","['error', 'failure']"
Availability,/// Attempts to set the alignment of the given type. Returns an error; /// description on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:64,error,error,64,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,2,"['error', 'failure']","['error', 'failure']"
Availability,"/// Attempts to unconditionally acquire the lock in reader mode. If the; /// lock is held by a writer, this method will wait until it can acquire; /// the lock.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally acquire the lock in reader mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:196,error,error,196,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,1,['error'],['error']
Availability,"/// Attempts to unconditionally acquire the lock in reader mode. If the; /// lock is held by any readers, this method will wait until it can; /// acquire the lock.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally acquire the lock in writer mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:199,error,error,199,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,1,['error'],['error']
Availability,"/// AttributesMatch - This routine checks list of attributes for two; /// decls. It returns false, if there is a mismatch in kind of; /// attributes seen in the decls. It returns true if the two decls; /// have list of same kind of attributes. Furthermore, when there; /// are availability attributes in the two decls, it sets the; /// AvailabilityArgsMatch to false if availability attributes have; /// different versions, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:277,avail,availability,277,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,3,"['Avail', 'avail']","['AvailabilityArgsMatch', 'availability']"
Availability,/// Augment AvailableAnalysis by adding analysis made available by pass P.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:12,Avail,AvailableAnalysis,12,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,2,"['Avail', 'avail']","['AvailableAnalysis', 'available']"
Availability,"/// AvailabilityAttrsMatch - This routine checks that if comparing two; /// availability attributes, all their components match. It returns; /// true, if not dealing with availability or when all components of; /// availability attributes match. This routine is only called when; /// the attributes are of the same kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:4,Avail,AvailabilityAttrsMatch,4,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,4,"['Avail', 'avail']","['AvailabilityAttrsMatch', 'availability']"
Availability,"/// Available slots in the buffer (zero, if this is not a buffered resource).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:4,Avail,Available,4,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['Avail'],['Available']
Availability,/// AvailableFeatures - The current set of available features.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:4,Avail,AvailableFeatures,4,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,2,"['Avail', 'avail']","['AvailableFeatures', 'available']"
Availability,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:4,Avail,AvailableQueue,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,4,"['Avail', 'avail']","['AvailableQueue', 'available']"
Availability,/// AvailableQueue - The priority queue to use for the available SUnits.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp:4,Avail,AvailableQueue,4,interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,4,"['Avail', 'avail']","['AvailableQueue', 'available']"
Availability,"/// AvailableVals - This keeps track of which value to use on a per-block; /// basis. When we insert PHI nodes, we keep track of them here.; //typedef DenseMap<MachineBasicBlock*, Register> AvailableValsTy;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:4,Avail,AvailableVals,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,2,['Avail'],"['AvailableVals', 'AvailableValsTy']"
Availability,"/// Avoid compiler warning ""has virtual functions but non-virtual destructor; /// [-Wnon-virtual-dtor]"" in derived classes.; ///; /// DOTGraphTraitsPrinter is also used as a mixin for avoiding repeated; /// implementation of printer passes, ie there should be no; /// runtime-polymorphisms/downcasting involving this class and hence no; /// virtual destructor needed. Making this dtor protected stops accidental; /// invocation when the derived class destructor should have been called.; /// Those derived classes sould be marked final to avoid the warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h:290,down,downcasting,290,interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,1,['down'],['downcasting']
Availability,"/// Avoid compiler warning ""has virtual functions but non-virtual destructor; /// [-Wnon-virtual-dtor]"" in derived classes.; ///; /// DOTGraphTraitsViewer is also used as a mixin for avoiding repeated; /// implementation of viewer passes, ie there should be no; /// runtime-polymorphisms/downcasting involving this class and hence no; /// virtual destructor needed. Making this dtor protected stops accidental; /// invocation when the derived class destructor should have been called.; /// Those derived classes sould be marked final to avoid the warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h:288,down,downcasting,288,interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,1,['down'],['downcasting']
Availability,"/// BLOCKINFO_BLOCK is used to define metadata about blocks, for example,; /// standard abbrevs that should be available to all blocks of a specified; /// ID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodeEnums.h:111,avail,available,111,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodeEnums.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodeEnums.h,1,['avail'],['available']
Availability,"/// Base class for all SAH-based, top-down builders.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/top_down_sah_builder.h:38,down,down,38,geom/geom/inc/bvh/v2/top_down_sah_builder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/top_down_sah_builder.h,1,['down'],['down']
Availability,"/// Base class for all errors indicating malformed binary files.; ///; /// Having a subclass for all malformed binary files allows archive-walking; /// code to skip malformed files without having to understand every possible; /// way that a binary file might be malformed.; ///; /// Currently inherits from ECError for easy interoperability with; /// std::error_code, but this will be removed in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:23,error,errors,23,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h,1,['error'],['errors']
Availability,/// Base class for debug information backends. Common functionality related to; /// tracking which variables and scopes are alive at a given PC live here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:124,alive,alive,124,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,1,['alive'],['alive']
Availability,/// Base class for error info classes. Do not extend this directly: Extend; /// the ErrorInfo template subclass instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:19,error,error,19,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['Error', 'error']","['ErrorInfo', 'error']"
Availability,"/// Base class for errors originating in DIA SDK, e.g. COM calls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h:19,error,errors,19,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h,1,['error'],['errors']
Availability,"/// Base class for errors originating in JIT linker, e.g. missing relocation; /// support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:19,error,errors,19,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['error'],['errors']
Availability,/// Base class for errors originating when parsing raw PDB files,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:19,error,errors,19,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,5,['error'],['errors']
Availability,"/// Base class for user error types. Users should declare their error types; /// like:; ///; /// class MyError : public ErrorInfo<MyError> {; /// ....; /// };; ///; /// This class provides an implementation of the ErrorInfoBase::kind; /// method, which is used by the Error RTTI system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:24,error,error,24,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,5,"['Error', 'error']","['Error', 'ErrorInfo', 'ErrorInfoBase', 'error']"
Availability,"/// Base class of cleanup handler that controls recovery of resources of the; /// given type.; ///; /// \tparam Derived Class that uses this class as a base.; /// \tparam T Type of controlled resource.; ///; /// This class serves as a base for its template parameter as implied by; /// Curiously Recurring Template Pattern.; ///; /// This class factors out creation of a cleanup handler. The latter requires; /// knowledge of the current recovery context, which is provided by this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h:48,recover,recovery,48,interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,2,['recover'],['recovery']
Availability,"/// Before emitting the patterns inside the PatFrag, add all necessary code; /// expansions to \p PatFragCEs imported from \p ParentCEs.; ///; /// For a MachineOperand PatFrag parameter, this will fetch the expansion for; /// that operand from \p ParentCEs and add it to \p PatFragCEs. Errors can be; /// emitted if the MachineOperand reference is unbound.; ///; /// For an Immediate PatFrag parameter this simply adds the integer value to; /// \p PatFragCEs as an expansion.; ///; /// \param ParentCEs Contains all of the code expansions declared by the other; /// patterns emitted so far in the pattern list containing; /// this PatFragPattern.; /// \param PatFragCEs Output Code Expansions (usually empty); /// \param DiagLoc Diagnostic loc in case an error occurs.; /// \return `true` on success, `false` on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:286,Error,Errors,286,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,3,"['Error', 'error', 'failure']","['Errors', 'error', 'failure']"
Availability,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:267,failure,failure,267,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['failure'],['failure']
Availability,"/// Behaves the same as handleErrors, except that by contract all errors; /// *must* be handled by the given handlers (i.e. there must be no remaining; /// errors after running the handlers, or llvm_unreachable is called).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:66,error,errors,66,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,['error'],['errors']
Availability,/// Bit mask selecting bits of OverrideMask in serialized representation of; /// FPOptionsOverride.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:8,mask,mask,8,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['mask'],['mask']
Availability,"/// Bitmask of available domains. For an open DomainValue, it is the still; /// possible domains for collapsing. For a collapsed DomainValue it is the; /// domains where the register is available for free.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h:15,avail,available,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,2,['avail'],['available']
Availability,/// Bitset with a bit for each available attribute Attribute::AttrKind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AttributeImpl.h:31,avail,available,31,interpreter/llvm-project/llvm/lib/IR/AttributeImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AttributeImpl.h,1,['avail'],['available']
Availability,"/// Blocking version of lookup above. Returns the resolved symbol map.; /// If WaitUntilReady is true (the default), will not return until all; /// requested symbols are ready (or an error occurs). If WaitUntilReady is; /// false, will return as soon as all requested symbols are resolved,; /// or an error occurs. If WaitUntilReady is false and an error occurs; /// after resolution, the function will return a success value, but the; /// error will be reported via reportErrors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:183,error,error,183,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,4,['error'],['error']
Availability,/// Blocking wait for all the threads to complete and the queue to be empty.; /// It is an error to try to add new tasks while blocking on this call.; /// Calling wait() from a task would deadlock waiting for itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:91,error,error,91,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['error'],['error']
Availability,"/// Bool conversion. Returns true if this Error is in a failure state,; /// and false if it is in an accept state. If the error is in a Success state; /// it will be considered checked.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:42,Error,Error,42,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,3,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,/// Boolean toggled when .secure_log_unique / .secure_log_reset is seen to; /// catch errors if .secure_log_unique appears twice without; /// .secure_log_reset appearing between them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:86,error,errors,86,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['error'],['errors']
Availability,/// Boolean wrapper for outputDiff which handles errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:49,error,errors,49,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,1,['error'],['errors']
Availability,"/// Break \p OrigArgInfo into one or more pieces the calling convention can; /// process, returned in \p SplitArgs. For example, this should break structs; /// down into individual fields.; ///; /// If \p Offsets is non-null, it points to a vector to be filled in; /// with the in-memory offsets of each of the individual values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:160,down,down,160,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,1,['down'],['down']
Availability,/// Break down vectors to the correct number of gpr sized integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h:10,down,down,10,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,1,['down'],['down']
Availability,/// Breaks down a vector \p 'Inst' of N elements into \p NumSubVectors; /// sub vectors of type \p T. Returns the sub-vectors in \p DecomposedVectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:11,down,down,11,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['down'],['down']
Availability,"/// Bridging via __bridge_retain, which makes an ARC object available; /// as a +1 C pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:60,avail,available,60,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,1,['avail'],['available']
Availability,"/// Broken debug info can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:30,recover,recovered,30,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['recover'],['recovered']
Availability,"/// Build a Read-only Pipe type.; ///; /// \param T The type to which we'll be building a Pipe.; ///; /// \param Loc We do not use it for now.; ///; /// \returns A suitable pipe type, if there are no errors. Otherwise, returns a; /// NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:200,error,errors,200,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,"/// Build a VPReplicationRecipe for \p I. If it is predicated, add the mask as; /// last operand. Range.End may be decreased to ensure same recipe behavior; /// from \p Range.Start to \p Range.End.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h:71,mask,mask,71,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,1,['mask'],['mask']
Availability,"/// Build a Write-only Pipe type.; ///; /// \param T The type to which we'll be building a Pipe.; ///; /// \param Loc We do not use it for now.; ///; /// \returns A suitable pipe type, if there are no errors. Otherwise, returns a; /// NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:201,error,errors,201,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,"/// Build a block pointer type.; ///; /// \param T The type to which we'll be building a block pointer.; ///; /// \param Loc The source location, used for diagnostics.; ///; /// \param Entity The name of the entity that involves the block pointer; /// type, if known.; ///; /// \returns A suitable block pointer type, if there are no; /// errors. Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:339,error,errors,339,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,"/// Build a function type.; ///; /// This routine checks the function type according to C++ rules and; /// under the assumption that the result type and parameter types have; /// just been instantiated from a template. It therefore duplicates; /// some of the behavior of GetTypeForDeclarator, but in a much; /// simpler form that is only suitable for this narrow use case.; ///; /// \param T The return type of the function.; ///; /// \param ParamTypes The parameter types of the function. This array; /// will be modified to account for adjustments to the types of the; /// function parameters.; ///; /// \param Loc The location of the entity whose type involves this; /// function type or, if there is no such entity, the location of the; /// type that will have function type.; ///; /// \param Entity The name of the entity that involves the function; /// type, if known.; ///; /// \param EPI Extra information about the function type. Usually this will; /// be taken from an existing function with the same prototype.; ///; /// \returns A suitable function type, if there are no errors. The; /// unqualified type will always be a FunctionProtoType.; /// Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1084,error,errors,1084,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['errors']
Availability,"/// Build a member pointer type \c T Class::*.; ///; /// \param T the type to which the member pointer refers.; /// \param Class the class type into which the member pointer points.; /// \param Loc the location where this type begins; /// \param Entity the name of the entity that will have this member pointer type; ///; /// \returns a member pointer type, if successful, or a NULL type if there was; /// an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:409,error,error,409,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['error']
Availability,"/// Build a new nested-name-specifier for ""identifier::"", as described; /// by ActOnCXXNestedNameSpecifier.; ///; /// \param S Scope in which the nested-name-specifier occurs.; /// \param IdInfo Parser information about an identifier in the; /// nested-name-spec.; /// \param EnteringContext If true, enter the context specified by the; /// nested-name-specifier.; /// \param SS Optional nested name specifier preceding the identifier.; /// \param ScopeLookupResult Provides the result of name lookup within the; /// scope of the nested-name-specifier that was computed at template; /// definition time.; /// \param ErrorRecoveryLookup Specifies if the method is called to improve; /// error recovery and what kind of recovery is performed.; /// \param IsCorrectedToColon If not null, suggestion of replace '::' -> ':'; /// are allowed. The bool value pointed by this parameter is set to; /// 'true' if the identifier is treated as if it was followed by ':',; /// not '::'.; /// \param OnlyNamespace If true, only considers namespaces in lookup.; ///; /// This routine differs only slightly from ActOnCXXNestedNameSpecifier, in; /// that it contains an extra parameter \p ScopeLookupResult, which provides; /// the result of name lookup within the scope of the nested-name-specifier; /// that was computed at template definition time.; ///; /// If ErrorRecoveryLookup is true, then this call is used to improve error; /// recovery. This means that it should not emit diagnostics, it should; /// just return true on failure. It also means it should only return a valid; /// scope if it *knows* that the result is correct. It should not return in a; /// dependent context, for example. Nor will it extend \p SS with the scope; /// specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:616,Error,ErrorRecoveryLookup,616,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,8,"['Error', 'error', 'failure', 'recover']","['ErrorRecoveryLookup', 'error', 'failure', 'recovery']"
Availability,"/// Build a pointer type.; ///; /// \param T The type to which we'll be building a pointer.; ///; /// \param Loc The location of the entity whose type involves this; /// pointer type or, if there is no such entity, the location of the; /// type that will have pointer type.; ///; /// \param Entity The name of the entity that involves the pointer; /// type, if known.; ///; /// \returns A suitable pointer type, if there are no; /// errors. Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:433,error,errors,433,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,"/// Build a reference type.; ///; /// \param T The type to which we'll be building a reference.; ///; /// \param Loc The location of the entity whose type involves this; /// reference type or, if there is no such entity, the location of the; /// type that will have reference type.; ///; /// \param Entity The name of the entity that involves the reference; /// type, if known.; ///; /// \returns A suitable reference type, if there are no; /// errors. Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:445,error,errors,445,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,/// Build a shuffle mask for graph entry which represents a merge of main; /// and alternate operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:20,mask,mask,20,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['mask'],['mask']
Availability,"/// Build an array type.; ///; /// \param T The type of each element in the array.; ///; /// \param ASM C99 array size modifier (e.g., '*', 'static').; ///; /// \param ArraySize Expression describing the size of the array.; ///; /// \param Brackets The range from the opening '[' to the closing ']'.; ///; /// \param Entity The name of the entity that involves the array; /// type, if known.; ///; /// \returns A suitable array type, if there are no errors. Otherwise,; /// returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:450,error,errors,450,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['error'],['errors']
Availability,"/// Build an empty C++1z fold-expression with the given operator.; ///; /// By default, produces the fallback value for the fold-expression, or; /// produce an error if there is no fallback value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:160,error,error,160,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['error'],['error']
Availability,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:230,down,down,230,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['down'],['down']
Availability,"/// Build and insert \p Res = G_SHUFFLE_VECTOR \p Src1, \p Src2, \p Mask; ///; /// \pre setBasicBlock or setMI must have been called.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:68,Mask,Mask,68,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['Mask'],['Mask']
Availability,"/// Build and insert `OldValRes<def>, SuccessRes<def> =; /// G_ATOMIC_CMPXCHG_WITH_SUCCESS Addr, CmpVal, NewVal, MMO`.; ///; /// Atomically replace the value at \p Addr with \p NewVal if it is currently; /// \p CmpVal otherwise leaves it unchanged. Puts the original value from \p; /// Addr in \p Res, along with an s1 indicating whether it was replaced.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p OldValRes must be a generic virtual register of scalar type.; /// \pre \p SuccessRes must be a generic virtual register of scalar type. It; /// will be assigned 0 on failure and 1 on success.; /// \pre \p Addr must be a generic virtual register with pointer type.; /// \pre \p OldValRes, \p CmpVal, and \p NewVal must be generic virtual; /// registers of the same type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:595,failure,failure,595,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['failure'],['failure']
Availability,"/// Build and insert a \p Res = G_IS_FPCLASS \p Src, \p Mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:56,Mask,Mask,56,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['Mask'],['Mask']
Availability,/// Build and return a new assume created from the provided knowledge; /// if the knowledge in the assume is fully redundant this will return nullptr,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:115,redundant,redundant,115,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,1,['redundant'],['redundant']
Availability,"/// BuildCompilation - Construct a compilation object for a command; /// line argument vector.; ///; /// \return A compilation, or 0 if none was built for the given; /// argument vector. A null return value does not necessarily; /// indicate an error condition, the diagnostics should be queried; /// to determine if an error occurred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:245,error,error,245,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,2,['error'],['error']
Availability,"/// BuildOverloadedCallExpr - Given the call expression that calls Fn; /// (which eventually refers to the declaration Func) and the call; /// arguments Args/NumArgs, attempt to resolve the function call down; /// to a specific function. If overload resolution succeeds, returns; /// the call expression produced by overload resolution.; /// Otherwise, emits diagnostics and returns ExprError.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:204,down,down,204,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['down'],['down']
Availability,"/// BuildResolvedCallExpr - Build a call to a resolved expression,; /// i.e. an expression not of \p OverloadTy. The expression should; /// unary-convert to an expression of function-pointer or; /// block-pointer type.; ///; /// \param NDecl the declaration being called, if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:275,avail,available,275,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['avail'],['available']
Availability,/// Builds a string representing ambiguous paths from a; /// specific derived class to different subobjects of the same base; /// class.; ///; /// This function builds a string that can be used in error messages; /// to show the different paths that one can take through the; /// inheritance hierarchy to go from the derived class to different; /// subobjects of a base class. The result looks something like this:; /// @code; /// struct D -> struct B -> struct A; /// struct D -> struct C -> struct A; /// @endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:197,error,error,197,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['error'],['error']
Availability,/// Builds an AST for 'Code' with additional flags.; ///; /// \param Code C++ code.; /// \param Args Additional flags to pass on.; /// \param FileName The file name which 'Code' will be mapped as.; /// \param ToolName The name of the binary running the tool. Standard library; /// header paths will be resolved relative to this.; /// \param PCHContainerOps The PCHContainerOperations for loading and creating; /// clang modules.; ///; /// \param Adjuster A function to filter the command line arguments as specified.; ///; /// \return The resulting AST or null if an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:567,error,error,567,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,1,['error'],['error']
Availability,/// Builds an AST for 'Code'.; ///; /// \param Code C++ code.; /// \param FileName The file name which 'Code' will be mapped as.; /// \param PCHContainerOps The PCHContainerOperations for loading and creating; /// clang modules.; ///; /// \return The resulting AST or null if an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:279,error,error,279,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,1,['error'],['error']
Availability,/// Builds idiomatic source for taking the address of `E`: prefix with `&` but; /// simplify when it already begins with `*`. \returns empty string on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:151,failure,failure,151,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['failure'],['failure']
Availability,/// Builds idiomatic source for the dereferencing of `E`: prefix with `*` but; /// simplify when it already begins with `&`. \returns empty string on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:150,failure,failure,150,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['failure'],['failure']
Availability,/// Bundle the files. Return true if an error was found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:40,error,error,40,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,1,['error'],['error']
Availability,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:16,error,error,16,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,4,"['Error', 'error']","['ErrorOK', 'error', 'error-ok', 'errors']"
Availability,/// ByteArray: the bit mask to apply to bytes loaded from the byte array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:23,mask,mask,23,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['mask'],['mask']
Availability,/// CFGCallback defines methods that should be called when a logical; /// operator error is found when building the CFG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:83,error,error,83,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['error'],['error']
Availability,"/// Cache of all the ToolChains in use by the driver.; ///; /// This maps from the string representation of a triple to a ToolChain; /// created targeting that triple. The driver owns all the ToolChain objects; /// stored in it, and will clean them up when torn down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:262,down,down,262,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['down'],['down']
Availability,/// Cache policy: the maximum size for the cache directory in bytes. A value; /// over the amount of available space on the disk will be reduced to the; /// amount of available space. A value of 0 will be ignored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:101,avail,available,101,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,2,['avail'],['available']
Availability,"/// Cached location ops may be erased during LSR, in which case a poison is; /// required when restoring from the cache. The type of that location is no; /// longer available, so just use int8. The poison will be replaced by one or; /// more locations later when a SCEVDbgValueBuilder selects alternative; /// locations to use for the salvage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:165,avail,available,165,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['avail'],['available']
Availability,"/// Caches the normalized associated constraints of declarations (concepts or; /// constrained declarations). If an error occurred while normalizing the; /// associated constraints of the template or concept, nullptr will be cached; /// here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:116,error,error,116,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,/// Calculate MBFI and all other analyses that's not available and; /// required by BFI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LazyMachineBlockFrequencyInfo.h:53,avail,available,53,interpreter/llvm-project/llvm/include/llvm/CodeGen/LazyMachineBlockFrequencyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LazyMachineBlockFrequencyInfo.h,1,['avail'],['available']
Availability,"/// Calculate errors (or not if ""calc"" == kFALSE)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h:14,error,errors,14,hist/hist/inc/THnBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnBase.h,1,['error'],['errors']
Availability,"/// Calculate the bin content's uncertainty for the given bin, using Poisson; /// statistics on the absolute bin content. Only available if no base provides; /// this functionality. Requires `GetContent()`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:127,avail,available,127,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,2,['avail'],['available']
Availability,"/// CalculateStackSlotUsed - Return whether this argument will use its; /// stack slot (instead of being passed in registers). ArgOffset,; /// AvailableFPRs, and AvailableVRs must hold the current argument; /// position, and will be updated to account for this argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:143,Avail,AvailableFPRs,143,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['Avail'],"['AvailableFPRs', 'AvailableVRs']"
Availability,"/// Calculates the shuffle mask corresponding to the target-specific opcode.; /// If the mask could be calculated, returns it in \p Mask, returns the shuffle; /// operands in \p Ops, and returns true.; /// Sets \p IsUnary to true if only one source is used. Note that this will set; /// IsUnary for shuffles which use a single input multiple times, and in those; /// cases it will adjust the mask to only have indices within that single input.; /// It is an error to call this with non-empty Mask/Ops vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,mask,mask,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,6,"['Mask', 'error', 'mask']","['Mask', 'error', 'mask']"
Availability,"/// Call run(), apply all generated replacements, and immediately save; /// the results to disk.; ///; /// \returns 0 upon success. Non-zero upon failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h:146,failure,failure,146,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,1,['failure'],['failure']
Availability,/// Call the user-provided callback for each entry (including the end-of-list; /// entry) in the location list starting at \p Offset. The callback can return; /// false to terminate the iteration early. Returns an error if it was unable; /// to parse the entire location list correctly. Upon successful termination; /// \p Offset will be updated point past the end of the list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:214,error,error,214,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,1,['error'],['error']
Availability,"/// Call this before applying any other heuristics to the Available queue.; /// Updates the Available/Pending Q's if necessary and returns the single; /// available instruction, or NULL if there are multiple candidates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:58,Avail,Available,58,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,3,"['Avail', 'avail']","['Available', 'available']"
Availability,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:359,checkpoint,checkpoint,359,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,2,['checkpoint'],['checkpoint']
Availability,"/// Call this when the user attempts to do something unsupported, like; /// returning a double without SSE2 enabled on x86_64. This is not fatal, unlike; /// report_fatal_error, so calling code should attempt to recover without; /// crashing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:212,recover,recover,212,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['recover'],['recover']
Availability,"/// Call to handle an incoming message.; ///; /// Returns 'Disconnect' if the message is a 'detach' message from the remote; /// otherwise returns 'Continue'. If the server has moved to an error state,; /// returns an error, which should be reported and treated as a 'Disconnect'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:189,error,error,189,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,2,['error'],['error']
Availability,"/// Callback at the end of processing a single input, to determine; /// if the output files should be erased or not.; ///; /// By default it returns true if a compiler error occurred.; /// This is guaranteed to only be called following a successful call to; /// BeginSourceFileAction (and BeginSourceFile).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:168,error,error,168,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['error'],['error']
Availability,/// Callback at the start of processing a single input.; ///; /// \return True on success; on failure ExecutionAction() and; /// EndSourceFileAction() will not be called.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:94,failure,failure,94,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['failure'],['failure']
Availability,"/// Callback before starting processing a single input, giving the; /// opportunity to modify the CompilerInvocation or do some other action; /// before BeginSourceFileAction is called.; ///; /// \return True on success; on failure BeginSourceFileAction(),; /// ExecuteAction() and EndSourceFileAction() will not be called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:224,failure,failure,224,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['failure'],['failure']
Availability,"/// Callback for Value destruction.; ///; /// Called when this->getValPtr() is destroyed, inside ~Value(), so you; /// may call any non-virtual Value method on getValPtr(), but no subclass; /// methods. If WeakTrackingVH were implemented as a CallbackVH, it would use; /// this; /// method to call setValPtr(NULL). AssertingVH would use this method to; /// cause an assertion failure.; ///; /// All implementations must remove the reference from this object to the; /// Value that's being destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:376,failure,failure,376,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,1,['failure'],['failure']
Availability,"/// Callback invoked when performing code completion in a part of the; /// file where we expect natural language, e.g., a comment, string, or; /// \#error directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:149,error,error,149,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,1,['error'],['error']
Availability,/// Callback to inform the diagnostic client that processing; /// of a source file has ended.; ///; /// The diagnostic client should assume that any objects made available via; /// BeginSourceFile() are inaccessible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:162,avail,available,162,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['avail'],['available']
Availability,"/// Called by JITLink once all defined symbols in the graph have been assigned; /// their final memory locations in the target process. At this point the; /// LinkGraph can be inspected to build a symbol table, however the block; /// content will not generally have been copied to the target location yet.; ///; /// If the client detects an error in the LinkGraph state (e.g. unexpected or; /// missing symbols) they may return an error here. The error will be; /// propagated to notifyFailed and the linker will bail out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:341,error,error,341,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,3,['error'],['error']
Availability,/// Called if some element of this constant is no longer valid.; /// At this point only other constants may be on the use_list for this; /// constant. Any constants on our Use list must also be destroy'd. The; /// implementation must be sure to remove the constant from the list of; /// available cached constants. Implementations should implement; /// destroyConstantImpl to remove constants from any pools/maps they are; /// contained it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:287,avail,available,287,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,1,['avail'],['available']
Availability,/// Called on well-formed '\#pragma omp error'.; /// Error direcitive is allowed in both declared and excutable contexts.; /// Adding InExContext to identify which context is called from.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,error,error,40,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,"['Error', 'error']","['Error', 'error']"
Availability,/// Called on well-formed '\#pragma omp masked taskloop simd' after parsing of; /// the associated statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,mask,masked,40,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['mask'],['masked']
Availability,/// Called on well-formed '\#pragma omp masked taskloop' after parsing of the; /// associated statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,mask,masked,40,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['mask'],['masked']
Availability,/// Called on well-formed '\#pragma omp masked' after parsing of the; // /associated statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,mask,masked,40,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['mask'],['masked']
Availability,/// Called on well-formed '\#pragma omp parallel masked taskloop simd' after; /// parsing of the associated statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,mask,masked,49,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['mask'],['masked']
Availability,/// Called on well-formed '\#pragma omp parallel masked taskloop' after; /// parsing of the associated statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,mask,masked,49,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['mask'],['masked']
Availability,/// Called on well-formed '\#pragma omp parallel masked' after; /// parsing of the associated statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,mask,masked,49,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['mask'],['masked']
Availability,/// Called when const pointers escape.; ///; /// Note: in most cases checkPointerEscape callback is sufficient.; /// \sa checkPointerEscape,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:69,checkPoint,checkPointerEscape,69,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,2,['checkPoint'],['checkPointerEscape']
Availability,"/// Called when the separate crash-recovery thread was finished, to; /// indicate that we don't need to clear the thread-local CurrentContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,recover,recovery,35,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,1,['recover'],['recovery']
Availability,"/// Callee repair callback type; ///; /// The function repair callback is invoked once to rewire the replacement; /// arguments in the body of the new function. The argument replacement info; /// is passed, as build from the registerFunctionSignatureRewrite call, as; /// well as the replacement function and an iteratore to the first; /// replacement argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,repair,repair,11,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['repair'],['repair']
Availability,"/// Callee repair callback, see CalleeRepairCBTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,repair,repair,11,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['repair'],['repair']
Availability,/// Calls BuildAssumeFromInst and if the resulting llvm.assume is valid insert; /// if before I. This is usually what need to be done to salvage the knowledge; /// contained in the instruction I.; /// The AssumptionCache must be provided if it is available or the cache may; /// become silently be invalid.; /// The DominatorTree can optionally be provided to enable cross-block; /// reasoning.; /// This returns if a change was made.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:247,avail,available,247,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,1,['avail'],['available']
Availability,/// Calls getTargetShuffleAndZeroables to resolve a target shuffle mask's inputs; /// and then sets the SM_SentinelUndef and SM_SentinelZero values.; /// Returns true if the target shuffle mask was decoded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:67,mask,mask,67,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,"/// Can an out-of-line inline function serve as a key function?; ///; /// This flag is only useful in ABIs where type data (for example,; /// vtables and type_info objects) are emitted only after processing; /// the definition of a special ""key"" virtual function. (This is safe; /// because the ODR requires that every virtual function be defined; /// somewhere in a program.) This usually permits such data to be; /// emitted in only a single object file, as opposed to redundantly; /// in every object file that requires it.; ///; /// One simple and common definition of ""key function"" is the first; /// virtual function in the class definition which is not defined there.; /// This rule works very well when that function has a non-inline; /// definition in some non-header file. Unfortunately, when that; /// function is defined inline, this rule requires the type data; /// to be emitted weakly, as if there were no key function.; ///; /// The ARM ABI observes that the ODR provides an additional guarantee:; /// a virtual function is always ODR-used, so if it is defined inline,; /// that definition must appear in every translation unit that defines; /// the class. Therefore, there is no reason to allow such functions; /// to serve as key functions.; ///; /// Because this changes the rules for emitting type data,; /// it can cause type data to be emitted with both weak and strong; /// linkage, which is not allowed on all platforms. Therefore,; /// exploiting this observation requires an ABI break and cannot be; /// done on a generic Itanium platform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:471,redundant,redundantly,471,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,1,['redundant'],['redundantly']
Availability,"/// Can node \p N be lowered to an XXPERMDI instruction? If so, set \p Swap; /// if the inputs to the instruction should be swapped and set \p DM to the; /// value for the immediate.; /// Specifically, set \p Swap to true only if \p N can be lowered to XXPERMDI; /// AND element 0 of the result comes from the first input (LE) or second input; /// (BE). Set \p DM to the calculated result (0-3) only if \p N can be lowered.; /// \return true iff the given mask of shuffle node \p N is a XXPERMDI shuffle; /// mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:456,mask,mask,456,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['mask'],['mask']
Availability,"/// Canonical proxy type returned when retrieving the members of a; /// canonical type or as the result of the @c CanQual<T>::getAs member; /// function.; ///; /// The CanProxy type mainly exists as a proxy through which operator-> will; /// look to either map down to a raw T* (e.g., PointerType*) or to a proxy; /// type that provides canonical-type access to the fields of the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h:261,down,down,261,interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,1,['down'],['down']
Availability,"/// Canonicalize \p Path in a manner suitable for a module map file. In; /// particular, this canonicalizes the parent directory separately from the; /// filename so that it does not affect header resolution relative to the; /// modulemap.; ///; /// \returns an error code if any filesystem operations failed. In this case; /// \p Path is not modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:262,error,error,262,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['error'],['error']
Availability,/// Canonicalize a set or clear of a masked set of constant bits to; /// select-of-constants form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:37,mask,masked,37,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['mask'],['masked']
Availability,"/// Canonicalizer for mangled names.; ///; /// This class allows specifying a list of ""equivalent"" manglings. For example,; /// you can specify that Ss is equivalent to; /// NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE; /// and then manglings that refer to libstdc++'s 'std::string' will be; /// considered equivalent to manglings that are the same except that they refer; /// to libc++'s 'std::string'.; ///; /// This can be used when data (eg, profiling data) is available for a version; /// of a program built in a different configuration, with correspondingly; /// different manglings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h:483,avail,available,483,interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,1,['avail'],['available']
Availability,"/// Capture a change in pressure for a single pressure set. UnitInc may be; /// expressed in terms of upward or downward pressure depending on the client; /// and will be dynamically adjusted for current liveness.; ///; /// Pressure increments are tiny, typically 1-2 units, and this is only for; /// heuristics, so we don't check UnitInc overflow. Instead, we may have a; /// higher level assert that pressure is consistent within a region. We also; /// effectively ignore dead defs which don't affect heuristics much.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:112,down,downward,112,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,1,['down'],['downward']
Availability,"/// CapturePred - This does the opposite of ReleasePred. Since SU is being; /// unscheduled, increase the succ left count of its predecessors. Remove; /// them from AvailableQueue if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:165,Avail,AvailableQueue,165,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['Avail'],['AvailableQueue']
Availability,/// Captures the result of checking the availability of a; /// declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:40,avail,availability,40,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['avail'],['availability']
Availability,"/// Carefully run the specified set of pass on the specified/ module,; /// returning the transformed module on success, or a null pointer on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:141,failure,failure,141,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['failure'],['failure']
Availability,/// Carries a Clang diagnostic in an llvm::Error.; ///; /// Users should emit the stored diagnostic using the DiagnosticsEngine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h:43,Error,Error,43,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,1,['Error'],['Error']
Availability,"/// Carries extra error information in replacement-related llvm::Error,; /// e.g. fail applying replacements and replacements conflict.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h:18,error,error,18,interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,2,"['Error', 'error']","['Error', 'error']"
Availability,"/// Certain SIMD instructions with vector element operand are not efficient.; /// Rewrite them into SIMD instructions with vector operands. This rewrite; /// is driven by the latency of the instructions.; /// The instruction of concerns are for the time being FMLA, FMLS, FMUL,; /// and FMULX and hence they are hardcoded.; ///; /// For example:; /// fmla v0.4s, v1.4s, v2.s[1]; ///; /// Is rewritten into; /// dup v3.4s, v2.s[1] // DUP not necessary if redundant; /// fmla v0.4s, v1.4s, v3.4s; ///; /// Return true if the SIMD instruction is modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp:454,redundant,redundant,454,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,1,['redundant'],['redundant']
Availability,/// Certain targets such as MIPS require that some types such as vectors are; /// always broken down into scalars in some contexts. This occurs even if the; /// vector type is legal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:96,down,down,96,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['down'],['down']
Availability,"/// Change message level (and topics) while this object is alive, reset when it goes out of scope.; /// \param[in] lvl The desired message level. Defaults to verbose.; /// \param[in] extraTopics Extra topics to be switched on. These will only switched on in the last stream to prevent; /// all streams are printing. \param[in] removeTopics Message topics to be switched off \param[in]; /// overrideExternalLevel Override the user message level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:59,alive,alive,59,roofit/roofitcore/inc/RooHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h,1,['alive'],['alive']
Availability,/// Change the opcode of MI to execute in Domain.; ///; /// The bit (1 << Domain) must be set in the mask returned from; /// getExecutionDomain(MI).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:101,mask,mask,101,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['mask'],['mask']
Availability,"/// Change the value of this constant.; /// On purpose, this is not `setVal`, as this could be confused with the `setVal`; /// that is available for variables. Constants, however, should remain mostly constant.; /// This function is e.g. useful when reading the constant from a file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h:135,avail,available,135,roofit/roofitcore/inc/RooConstVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h,1,['avail'],['available']
Availability,/// Change values in a shuffle permute mask assuming the two vector operands; /// of length InVecNumElts have swapped position.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:39,mask,mask,39,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['mask'],['mask']
Availability,/// Change values in a shuffle permute mask assuming; /// the two vector operands have swapped position.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:39,mask,mask,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['mask'],['mask']
Availability,/// Check E. If it's in a success state then return the contained reference. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:95,failure,failure,95,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['error', 'failure']","['error', 'failure']"
Availability,/// Check E. If it's in a success state then return the contained value. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:91,failure,failure,91,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['error', 'failure']","['error', 'failure']"
Availability,/// Check Err. If it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:28,failure,failure,28,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['error', 'failure']","['error', 'failure']"
Availability,"/// Check a function for errors, useful for use when debugging a; /// pass.; ///; /// If there are no errors, the function returns false. If an error is found,; /// a message describing the error is written to OS (if non-null) and true is; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:25,error,errors,25,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,4,['error'],"['error', 'errors']"
Availability,"/// Check a module for errors, and report separate error states for IR; /// and debug info errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:23,error,errors,23,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,3,['error'],"['error', 'errors']"
Availability,"/// Check a module for errors.; ///; /// If there are no errors, the function returns false. If an error is; /// found, a message describing the error is written to OS (if; /// non-null) and true is returned.; ///; /// \return true if the module is broken. If BrokenDebugInfo is; /// supplied, DebugInfo verification failures won't be considered as; /// error and instead *BrokenDebugInfo will be set to true. Debug; /// info errors can be ""recovered"" from by stripping the debug info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:23,error,errors,23,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,8,"['error', 'failure', 'recover']","['error', 'errors', 'failures', 'recovered']"
Availability,"/// Check a template argument against its corresponding; /// non-type template parameter.; ///; /// This routine implements the semantics of C++ [temp.arg.nontype].; /// If an error occurred, it returns ExprError(); otherwise, it; /// returns the converted template argument. \p ParamType is the; /// type of the non-type template parameter after it has been instantiated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:176,error,error,176,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,"/// Check a template argument against its corresponding; /// template template parameter.; ///; /// This routine implements the semantics of C++ [temp.arg.template].; /// It returns true if an error occurred, and false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:193,error,error,193,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,"/// Check a template argument against its corresponding; /// template type parameter.; ///; /// This routine implements the semantics of C++ [temp.arg.type]. It; /// returns true if an error occurred, and false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:185,error,error,185,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,/// Check all predecessors and if all of them have the same AvailableVal use; /// it as value for block represented by Info. Return true if singluar value; /// is found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterImpl.h:60,Avail,AvailableVal,60,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterImpl.h,1,['Avail'],['AvailableVal']
Availability,/// Check for operands with placeholder types and complain if found.; /// Returns ExprError() if there was an error and no recovery was possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:110,error,error,110,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,"['error', 'recover']","['error', 'recovery']"
Availability,/// Check for post-frame ptr elimination stack locations as well.; /// This uses a heuristic so it isn't reliable for correctness.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:105,reliab,reliable,105,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['reliab'],['reliable']
Availability,"/// Check for post-frame ptr elimination stack locations as well.; /// This uses a heuristic, so it isn't reliable for correctness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:106,reliab,reliable,106,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['reliab'],['reliable']
Availability,"/// Check for:; /// CERT/STR02-C. ""Sanitize data passed to complex subsystems""; /// CWE-78, ""Failure to Sanitize Data into an OS Command""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:93,Failure,Failure,93,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['Failure'],['Failure']
Availability,/// Check if AArch64::NZCV should be alive in successors of MBB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:37,alive,alive,37,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['alive'],['alive']
Availability,"/// Check if CmpInstr can be substituted by MI.; ///; /// CmpInstr can be substituted:; /// - CmpInstr is either 'ADDS %vreg, 0' or 'SUBS %vreg, 0'; /// - and, MI and CmpInstr are from the same MachineBB; /// - and, condition flags are not alive in successors of the CmpInstr parent; /// - and, if MI opcode is the S form there must be no defs of flags between; /// MI and CmpInstr; /// or if MI opcode is not the S form there must be neither defs of flags; /// nor uses of flags between MI and CmpInstr.; /// - and, if C/V flags are not used after CmpInstr; /// or if N flag is used but MI produces poison value if signed overflow; /// occurs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:240,alive,alive,240,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['alive'],['alive']
Availability,/// Check if IdxExpr is a valid parameter index for a function or; /// instance method D. May output an error.; ///; /// \returns true if IdxExpr is a valid index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:104,error,error,104,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['error'],['error']
Availability,"/// Check if \p RC is a mask register class.; /// I.e., VK* or one of their variant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,mask,mask,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"/// Check if \p Reg is already assigned what is described by \p ValMapping.; /// \p OnlyAssign == true means that \p Reg just needs to be assigned a; /// register bank. I.e., no repairing is necessary to have the; /// assignment match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:178,repair,repairing,178,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['repair'],['repairing']
Availability,/// Check if a G_EXT instruction can handle a shuffle mask \p M when the vector; /// sources of the shuffle are different.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp:54,mask,mask,54,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,1,['mask'],['mask']
Availability,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:45,error,error,45,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"/// Check if a nonblocking call is not matched by a wait.; /// If a memory region is not alive and the last function using the; /// request was a nonblocking call, this is rated as a missing wait.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.h:89,alive,alive,89,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.h,1,['alive'],['alive']
Availability,"/// Check if after \p OrigMI the only portion of super register; /// of the destination register of \p OrigMI that is alive is that; /// destination register.; ///; /// If so, return that super register in \p SuperDestReg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:118,alive,alive,118,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,1,['alive'],['alive']
Availability,/// Check if available pass managers are suitable for this pass or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:13,avail,available,13,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['avail'],['available']
Availability,/// Check if it is profitable to promote \p ToBePromoted; /// by moving downward the transition through.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:72,down,downward,72,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['down'],['downward']
Availability,/// Check if it's ok to try and recover dot pseudo destructor calls on; /// pointer objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:32,recover,recover,32,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['recover'],['recover']
Availability,/// Check if passed in Decl is a pointer type.; /// Note that this function may produce an error message.; /// \return true if the Decl is a pointer type; false otherwise,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:91,error,error,91,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['error'],['error']
Availability,/// Check if the Mask and VL of this operand are compatible with \p Root.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:17,Mask,Mask,17,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['Mask'],['Mask']
Availability,/// Check if the Mask consists of the same element repeated multiple times.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:17,Mask,Mask,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Mask'],['Mask']
Availability,/// Check if the argument \p ArgNum of \p Attr is a ASCII string literal.; /// If not emit an error and return false. If the argument is an identifier it; /// will emit an error with a fixit hint and treat it as if it was a string; /// literal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:94,error,error,94,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,2,['error'],['error']
Availability,"/// Check if the argument \p E is a ASCII string literal. If not emit an error; /// and return false, otherwise set \p Str to the value of the string literal; /// and return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:73,error,error,73,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['error'],['error']
Availability,/// Check if the attribute has at least as many args as Num. May output an; /// error. Returns false if a diagnostic is produced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:80,error,error,80,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,1,['error'],['error']
Availability,/// Check if the attribute has at most as many args as Num. May output an; /// error. Returns false if a diagnostic is produced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:79,error,error,79,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,1,['error'],['error']
Availability,/// Check if the attribute has exactly as many args as Num. May output an; /// error. Returns false if a diagnostic is produced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:79,error,error,79,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,1,['error'],['error']
Availability,"/// Check if the candidates could be combined with a shift instruction, which; /// includes:; /// 1. Truncate instruction; /// 2. And instruction and the imm is a mask of the low bits:; /// imm & (imm+1) == 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:163,mask,mask,163,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['mask'],['mask']
Availability,/// Check if the created time of the profile data file is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CoverageViewOptions.h:58,avail,available,58,interpreter/llvm-project/llvm/tools/llvm-cov/CoverageViewOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CoverageViewOptions.h,1,['avail'],['available']
Availability,/// Check if the given Module has any functions available for exporting; /// in the index. We consider any module present in the ModulePathStringTable; /// to have exported functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:48,avail,available,48,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['avail'],['available']
Availability,/// Check if the given identifier is a name of a register mask.; ///; /// Return null if the identifier isn't a register mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:58,mask,mask,58,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,2,['mask'],['mask']
Availability,"/// Check if the given use (Instruction + OpIdx) of Cst should be converted into; /// a load of a global variable initialized with Cst.; /// A use should be converted if it is legal to do so.; /// For instance, it is not legal to turn the mask operand of a shuffle vector; /// into a load of a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:239,mask,mask,239,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['mask'],['mask']
Availability,/// Check if the instruction in 'IR' can be dispatched during this cycle.; /// Return SC_AVAILABLE if both scheduler and LS resources are available.; ///; /// This method is also responsible for setting field HadTokenStall if; /// IR cannot be dispatched to the Scheduler due to unavailable resources.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:138,avail,available,138,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,1,['avail'],['available']
Availability,/// Check if the load or store instruction \p I should widened for \p; /// Range.Start and potentially masked. Such instructions are handled by a; /// recipe that takes an additional VPInstruction for the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h:103,mask,masked,103,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,2,['mask'],"['mask', 'masked']"
Availability,/// Check if the mask can be mapped to a preliminary shuffle (vperm 64-bit); /// followed by unpack 256-bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"/// Check if the mask can be used in an interleaved store.; //; /// It checks for a more general pattern than the RE-interleave mask.; /// I.e. <x, y, ... z, x+1, y+1, ...z+1, x+2, y+2, ...z+2, ...>; /// E.g. For a Factor of 2 (LaneLen=4): <4, 32, 5, 33, 6, 34, 7, 35>; /// E.g. For a Factor of 3 (LaneLen=4): <4, 32, 16, 5, 33, 17, 6, 34, 18, 7, 35, 19>; /// E.g. For a Factor of 4 (LaneLen=2): <8, 2, 12, 4, 9, 3, 13, 5>; ///; /// The particular case of an RE-interleave mask is:; /// I.e. <0, LaneLen, ... , LaneLen*(Factor - 1), 1, LaneLen + 1, ...>; /// E.g. For a Factor of 2 (LaneLen=4): <0, 4, 1, 5, 2, 6, 3, 7>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,3,['mask'],['mask']
Availability,"/// Check if the mask is a DE-interleave mask for an interleaved load.; ///; /// E.g. DE-interleave masks (Factor = 2) could be:; /// <0, 2, 4, 6> (mask of index 0 to extract even elements); /// <1, 3, 5, 7> (mask of index 1 to extract odd elements)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,5,['mask'],"['mask', 'masks']"
Availability,"/// Check if the mask is a DE-interleave mask of the given factor; /// \p Factor like:; /// <Index, Index+Factor, ..., Index+(NumElts-1)*Factor>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp:17,mask,mask,17,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,2,['mask'],['mask']
Availability,/// Check if the resources occupied by a machine instruction are available; /// in the current state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:65,avail,available,65,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['avail'],['available']
Availability,"/// Check if this is a constant splat, and if so, find the; /// smallest element size that splats the vector. If MinSplatBits is; /// nonzero, the element size must be at least that large. Note that the; /// splat element may be the entire vector (i.e., a one element vector).; /// Returns the splat element value in SplatValue. Any undefined bits in; /// that value are zero, and the corresponding bits in the SplatUndef mask; /// are set. The SplatBitSize value is set to the splat element size in; /// bits. HasAnyUndefs is set to true if any bits in the vector are; /// undefined. isBigEndian describes the endianness of the target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:422,mask,mask,422,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['mask'],['mask']
Availability,/// Check if this operand is compatible with the given \p Mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:58,Mask,Mask,58,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['Mask'],['Mask']
Availability,/// Check original debug information after a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:304,error,error,304,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,2,['error'],['error']
Availability,"/// Check specified statement that it is suitable for 'atomic update'; /// constructs and extract 'x', 'expr' and Operation from the original; /// expression. If DiagId and NoteId == 0, then only check is performed; /// without error notification.; /// \param DiagId Diagnostic which should be emitted if error is found.; /// \param NoteId Diagnostic note for the main error message.; /// \return true if statement is not an update expression, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:228,error,error,228,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['error'],['error']
Availability,"/// Check supports recovering, runtime has both fatal (noreturn) and; /// non-fatal handlers for this check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:19,recover,recovering,19,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['recover'],['recovering']
Availability,"/// Check that E is a non-error, then drop it.; /// If E is an error, llvm_unreachable will be called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:26,error,error,26,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,['error'],['error']
Availability,"/// Check that \p Args can be parsed and re-serialized without change,; /// emiting diagnostics for any differences.; ///; /// This check is only suitable for command-lines that are expected to already; /// be canonical.; ///; /// \return false if there are any errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:262,error,errors,262,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,1,['error'],['errors']
Availability,/// Check that a reinterpret_cast\<DestType\>(SrcExpr) is not used as upcast; /// or downcast between respective pointers or references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:85,down,downcast,85,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['down'],['downcast']
Availability,"/// Check that the Mask is compatible with the RegBank.; /// Indeed, if the RegBank cannot accomadate the ""active bits"" of the mask,; /// there is no way this mapping is valid.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:19,Mask,Mask,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,2,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"/// Check that the given Index expression is a valid array designator; /// value. This is essentially just a wrapper around; /// VerifyIntegerConstantExpression that also checks for negative values; /// and produces a reasonable diagnostic if there is a; /// failure. Returns the index expression, possibly with an implicit cast; /// added, on success. If everything went okay, Value will receive the; /// value of the constant expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:259,failure,failure,259,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['failure'],['failure']
Availability,"/// Check that the given field is initialized within a constexpr constructor.; ///; /// \param Dcl The constexpr constructor being checked.; /// \param Field The field being checked. This may be a member of an anonymous; /// struct or union nested within the class being checked.; /// \param Inits All declarations, including anonymous struct/union members and; /// indirect members, for which any initialization was provided.; /// \param Diagnosed Whether we've emitted the error message yet. Used to attach; /// multiple notes for different members to the same error.; /// \param Kind Whether we're diagnosing a constructor as written or determining; /// whether the formal requirements are satisfied.; /// \return \c false if we're checking for validity and the constructor does; /// not satisfy the requirements on a constexpr constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:475,error,error,475,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,['error'],['error']
Availability,"/// Check that the given module is available, producing a diagnostic if not.; /// \return \c true if the check failed (because the module is not available).; /// \c false if the module appears to be usable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:35,avail,available,35,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,2,['avail'],['available']
Availability,"/// Check that the given object is a suitable pointer to a heap allocation that; /// still exists and is of the right kind for the purpose of a deletion.; ///; /// On success, returns the heap allocation to deallocate. On failure, produces; /// a diagnostic and returns std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:222,failure,failure,222,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['failure'],['failure']
Availability,"/// Check that the given template argument corresponds to the given; /// template parameter.; ///; /// \param Param The template parameter against which the argument will be; /// checked.; ///; /// \param Arg The template argument, which may be updated due to conversions.; ///; /// \param Template The template in which the template argument resides.; ///; /// \param TemplateLoc The location of the template name for the template; /// whose argument list we're matching.; ///; /// \param RAngleLoc The location of the right angle bracket ('>') that closes; /// the template argument list.; ///; /// \param ArgumentPackIndex The index into the argument pack where this; /// argument will be placed. Only valid if the parameter is a parameter pack.; ///; /// \param Converted The checked, converted argument will be added to the; /// end of this small vector.; ///; /// \param CTAK Describes how we arrived at this particular template argument:; /// explicitly written, deduced, etc.; ///; /// \returns true on error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:1011,error,error,1011,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1089,error,error,1089,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,3,['error'],['error']
Availability,"/// Check that the mask is shuffling N byte elements. Within each N byte; /// element of the mask, the indices could be either in increasing or; /// decreasing order as long as they are consecutive.; /// \param[in] N the shuffle vector SD Node to analyze; /// \param[in] Width the element width in bytes, could be 2/4/8/16 (HalfWord/; /// Word/DoubleWord/QuadWord).; /// \param[in] StepLen the delta indices number among the N byte element, if; /// the mask is in increasing/decreasing order then it is 1/-1.; /// \return true iff the mask is shuffling N byte elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:19,mask,mask,19,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,4,['mask'],['mask']
Availability,/// Check that the stream (in StreamVal) is not NULL.; /// If it can only be NULL a fatal error is emitted and nullptr returned.; /// Otherwise the return value is a new state where the stream is constrained; /// to be non-null.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:90,error,error,90,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['error'],['error']
Availability,"/// Check that the stream has not an invalid (""indeterminate"") file position,; /// generate warning for it.; /// (EOF is not an invalid position.); /// The returned state can be nullptr if a fatal error was generated.; /// It can return non-null state if the stream has not an invalid position or; /// there is execution path with non-invalid position.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:197,error,error,197,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['error'],['error']
Availability,"/// Check that the stream is the opened state.; /// If the stream is known to be not opened an error is generated; /// and nullptr returned, otherwise the original state is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:95,error,error,95,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['error'],['error']
Availability,"/// Check that the value argument for __builtin_is_aligned(value, alignment) and; /// __builtin_aligned_{up,down}(value, alignment) is an integer or a pointer; /// type (but not a function pointer) and that the alignment is a power-of-two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:108,down,down,108,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['down'],['down']
Availability,/// Check that this Expected<T> is an error of type ErrT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:38,error,error,38,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['error'],['error']
Availability,"/// Check the \p FoundKind against the \p ExpectedKind, if not issue an error; /// that the ""end"" matching the ""begin"" directive of kind \p BeginKind was not; /// found. Finally, if the expected kind was found or if \p SkipUntilOpenMPEnd; /// is set, skip ahead using the helper `skipUntilPragmaOpenMPEnd`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:72,error,error,72,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['error'],['error']
Availability,/// Check the arguments to '__builtin_va_start' or '__builtin_ms_va_start'; /// for validity. Emit an error and return true on failure; return false; /// on success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:102,error,error,102,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,2,"['error', 'failure']","['error', 'failure']"
Availability,/// Check the header and detect any errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/Header.cpp:36,error,errors,36,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/Header.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/Header.cpp,1,['error'],['errors']
Availability,"/// Check the legality of the 'whence' argument of 'fseek'.; /// Generate error and return nullptr if it is found to be illegal.; /// Otherwise returns the state.; /// (State is not changed here because the ""whence"" value is already known.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:74,error,error,74,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['error'],['error']
Availability,"/// Check the non-type template arguments of a class template; /// partial specialization according to C++ [temp.class.spec]p9.; ///; /// \param TemplateNameLoc the location of the template name.; /// \param PrimaryTemplate the template parameters of the primary class; /// template.; /// \param NumExplicit the number of explicitly-specified template arguments.; /// \param TemplateArgs the template arguments of the class template; /// partial specialization.; ///; /// \returns \c true if there was an error, \c false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:505,error,error,505,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,"/// Check the preprocessor options deserialized from the control block; /// against the preprocessor options in an existing preprocessor.; ///; /// \param Diags If non-null, produce diagnostics for any mismatches incurred.; /// \param Validation If set to OptionValidateNone, ignore differences in; /// preprocessor options. If set to OptionValidateContradictions,; /// require that options passed both in the AST file and on the command; /// line (-D or -U) match, but tolerate options missing in one or the; /// other. If set to OptionValidateContradictions, require that there; /// are no differences in the options between the two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:470,toler,tolerate,470,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['toler'],['tolerate']
Availability,"/// Check the scope of an explicit instantiation.; ///; /// \returns true if a serious error occurs, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:87,error,error,87,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['error'],['error']
Availability,"/// Check the target or target_version attribute of the function for; /// MultiVersion validity.; ///; /// Returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:136,error,error,136,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['error'],['error']
Availability,"/// Check the validity of a mulitversion function declaration.; /// Also sets the multiversion'ness' of the function itself.; ///; /// This sets NewFD->isInvalidDecl() to true if there was an error.; ///; /// Returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:192,error,error,192,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['error'],['error']
Availability,"/// Check the validity of a multiversion function declaration that is the; /// first of its kind. Also sets the multiversion'ness' of the function itself.; ///; /// This sets NewFD->isInvalidDecl() to true if there was an error.; ///; /// Returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:222,error,error,222,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['error'],['error']
Availability,"/// Check to see if IVal is something that provides a value as specified by; /// MaskInfo. If so, replace the specified store with a narrower store of; /// truncated IVal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Mask,MaskInfo,81,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Mask'],['MaskInfo']
Availability,"/// Check to see if V is (and load (ptr), imm), where the load is having; /// specific bytes cleared out. If so, return the byte size being masked out; /// and the shift amount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:140,mask,masked,140,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['mask'],['masked']
Availability,"/// Check to see if any of the pending instructions are ready to issue. If; /// so, add them to the available queue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:100,avail,available,100,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['avail'],['available']
Availability,/// Check whether 'this' shows up in the attributes of the given; /// static member function.; ///; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:124,error,error,124,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,/// Check whether 'this' shows up in the type of a static member; /// function after the (naturally empty) cv-qualifier-seq would be.; ///; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:164,error,error,164,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"/// Check whether a compaction lowering can be done by dropping even/odd; /// elements and compute how many times even/odd elements must be dropped.; ///; /// This handles shuffles which take every Nth element where N is a power of; /// two. Example shuffle masks:; ///; /// (even); /// N = 1: 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14; /// N = 1: 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30; /// N = 2: 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12; /// N = 2: 0, 4, 8, 12, 16, 20, 24, 28, 0, 4, 8, 12, 16, 20, 24, 28; /// N = 3: 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8; /// N = 3: 0, 8, 16, 24, 0, 8, 16, 24, 0, 8, 16, 24, 0, 8, 16, 24; ///; /// (odd); /// N = 1: 1, 3, 5, 7, 9, 11, 13, 15, 0, 2, 4, 6, 8, 10, 12, 14; /// N = 1: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31; ///; /// Any of these lanes can of course be undef.; ///; /// This routine only supports N <= 3.; /// FIXME: Evaluate whether either AVX or AVX-512 have any opportunities here; /// for larger N.; ///; /// \returns N above, or the number of times even/odd elements must be dropped; /// if there is such a number. Otherwise returns zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:258,mask,masks,258,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,"/// Check whether a specialization is well-formed in the current; /// context.; ///; /// This routine determines whether a template specialization can be declared; /// in the current context (C++ [temp.expl.spec]p2).; ///; /// \param S the semantic analysis object for which this check is being; /// performed.; ///; /// \param Specialized the entity being specialized or instantiated, which; /// may be a kind of template (class template, function template, etc.) or; /// a member of a class template (member function, static data member,; /// member class).; ///; /// \param PrevDecl the previous declaration of this entity, if any.; ///; /// \param Loc the location of the explicit specialization or instantiation of; /// this entity.; ///; /// \param IsPartialSpecialization whether this is a partial specialization of; /// a class template.; ///; /// \returns true if there was an error that we cannot recover from, false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:886,error,error,886,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,"['error', 'recover']","['error', 'recover']"
Availability,/// Check whether one error is a subclass of another.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:22,error,error,22,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['error'],['error']
Availability,"/// Check whether or not GlobalISel should abort on error.; /// When this is disabled, GlobalISel will fall back on SDISel instead of; /// erroring out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:52,error,error,52,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,4,['error'],"['error', 'erroring']"
Availability,/// Check whether specified \p CUDie is a Clang module reference.; /// if \p Quiet is false then display error messages.; /// \return first == true if CUDie is a Clang module reference.; /// second == true if module is already loaded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:105,error,error,105,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,2,['error'],['error']
Availability,"/// Check whether the given expression is a valid constraint expression.; /// A diagnostic is emitted if it is not, false is returned, and; /// PossibleNonPrimary will be set to true if the failure might be due to a; /// non-primary expression being used as an atomic constraint.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:190,failure,failure,190,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['failure'],['failure']
Availability,"/// Check whether the given function decl's trailing requires clause is; /// satisfied, if any. Returns false and updates Satisfaction with the; /// satisfaction verdict if successful, emits a diagnostic and returns true if; /// an error occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:232,error,error,232,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['error'],['error']
Availability,"/// Check whether the given method, which must be in the 'init'; /// family, is a valid member of that family.; ///; /// \param receiverTypeIfCall - if null, check this as if declaring it;; /// if non-null, check this as if making a call to it with the given; /// receiver type; ///; /// \return true to indicate that there was an error and appropriate; /// actions were taken",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:331,error,error,331,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['error'],['error']
Availability,/// Check whether the library function is available on target and also that; /// it in the current Module is a Function with the right type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:42,avail,available,42,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,1,['avail'],['available']
Availability,/// Check whether the overloaded floating point function; /// corresponding to \a Ty is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:88,avail,available,88,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,1,['avail'],['available']
Availability,/// Check whether we can cheaply express the requested SCEV in terms of; /// the available PHI SCEV by truncation and/or inversion of the step.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:81,avail,available,81,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['avail'],['available']
Availability,"/// Check whether we're allowed to call Callee from the current context.; ///; /// - If the call is never allowed in a semantically-correct program; /// (CFP_Never), emits an error and returns false.; ///; /// - If the call is allowed in semantically-correct programs, but only if; /// it's never codegen'ed (CFP_WrongSide), creates a deferred diagnostic to; /// be emitted if and when the caller is codegen'ed, and returns true.; ///; /// Will only create deferred diagnostics for a given SourceLocation once,; /// so you can safely call this multiple times without generating duplicate; /// deferred errors.; ///; /// - Otherwise, returns true without emitting any diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:175,error,error,175,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['error'],"['error', 'errors']"
Availability,"/// Check whether we're in an extern inline function and referring to a; /// variable or function with internal linkage (C11 6.7.4p3).; ///; /// This is only a warning because we used to silently accept this code, but; /// in many cases it will not behave correctly. This is not enabled in C++ mode; /// because the restriction language is a bit weaker (C++11 [basic.def.odr]p6); /// and so while there may still be user mistakes, most of the time we can't; /// prove that there are errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:483,error,errors,483,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['error'],['errors']
Availability,"/// CheckBooleanCondition - Diagnose problems involving the use of; /// the given expression as a boolean condition (e.g. in an if; /// statement). Also performs the standard function and array; /// decays, possibly changing the input variable.; ///; /// \param Loc - A location associated with the condition, e.g. the; /// 'if' keyword.; /// \return true iff there were any errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:375,error,errors,375,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['errors']
Availability,/// CheckCallReturnType - Checks that a call expression's return type is; /// complete. Returns true on failure. The location passed in is the location; /// that best represents the call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:104,failure,failure,104,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['failure'],['failure']
Availability,"/// CheckConstructorDeclarator - Called by ActOnDeclarator to check; /// the well-formedness of the constructor declarator @p D with type @p; /// R. If there are any errors in the declarator, this routine will; /// emit diagnostics and set the invalid bit to true. In any case, the type; /// will be updated to reflect a well-formed type for the constructor and; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:166,error,errors,166,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['error'],['errors']
Availability,"/// CheckConversionDeclarator - Called by ActOnDeclarator to check the; /// well-formednes of the conversion function declarator @p D with; /// type @p R. If there are any errors in the declarator, this routine; /// will emit diagnostics and return true. Otherwise, it will return; /// false. Either way, the type @p R will be updated to reflect a; /// well-formed type for the conversion operator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:172,error,errors,172,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['error'],['errors']
Availability,"/// CheckDerivedToBaseConversion - Check whether the Derived-to-Base; /// conversion (where Derived and Base are class types) is; /// well-formed, meaning that the conversion is unambiguous (and; /// that all of the base classes are accessible). Returns true; /// and emits a diagnostic if the code is ill-formed, returns false; /// otherwise. Loc is the location where this routine should point to; /// if there is an error, and Range is the source range to highlight; /// if there is an error.; ///; /// If either InaccessibleBaseID or AmbiguousBaseConvID are 0, then the; /// diagnostic for the respective type of error will be suppressed, but the; /// check for ill-formed code will still be performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:419,error,error,419,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,3,['error'],['error']
Availability,"/// CheckDestructor - Checks a fully-formed destructor definition for; /// well-formedness, issuing any diagnostics required. Returns true; /// on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:147,error,error,147,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['error'],['error']
Availability,"/// CheckDestructorDeclarator - Called by ActOnDeclarator to check; /// the well-formednes of the destructor declarator @p D with type @p; /// R. If there are any errors in the declarator, this routine will; /// emit diagnostics and set the declarator to invalid. Even if this happens,; /// will be updated to reflect a well-formed type for the destructor and; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:163,error,errors,163,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['error'],['errors']
Availability,/// CheckDynamicCast - Check that a dynamic_cast\<DestType\>(SrcExpr) is valid.; /// Refer to C++ 5.2.7 for details. Dynamic casts are used mostly for runtime-; /// checked downcasts in class hierarchies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:173,down,downcasts,173,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['down'],['downcasts']
Availability,"/// CheckForModifiableLvalue - Verify that E is a modifiable lvalue. If not,; /// emit an error and return true. If so, return false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:90,error,error,90,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['error'],['error']
Availability,"/// CheckMemberPointerConversion - Check the member pointer conversion from the; /// expression From to the type ToType. This routine checks for ambiguous or; /// virtual or inaccessible base-to-derived member pointer conversions; /// for which IsMemberPointerConversion has already returned true. It returns; /// true and produces a diagnostic if there was an error, or returns false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:361,error,error,361,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['error'],['error']
Availability,"/// CheckPointerConversion - Check the pointer conversion from the; /// expression From to the type ToType. This routine checks for; /// ambiguous or inaccessible derived-to-base pointer; /// conversions for which IsPointerConversion has already returned; /// true. It returns true and produces a diagnostic if there was an; /// error, or returns false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:4,CheckPoint,CheckPointerConversion,4,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,2,"['CheckPoint', 'error']","['CheckPointerConversion', 'error']"
Availability,/// Checks deserialized declarations and emits error if a name; /// matches one given in command-line using -error-on-deserialized-decl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:47,error,error,47,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,2,['error'],"['error', 'error-on-deserialized-decl']"
Availability,/// Checks for the availability of unit 'SubResMask' in the group.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:19,avail,availability,19,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['avail'],['availability']
Availability,"/// Checks function calls when a FunctionDecl or a NamedDecl is not available,; /// such as function pointers returned from functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:68,avail,available,68,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['avail'],['available']
Availability,"/// Checks if the gathered \p VL can be represented as a single register; /// shuffle(s) of previous tree entries.; /// \param TE Tree entry checked for permutation.; /// \param VL List of scalars (a subset of the TE scalar), checked for; /// permutations. Must form single-register vector.; /// \returns ShuffleKind, if gathered values can be represented as shuffles of; /// previous tree entries. \p Part of \p Mask is filled with the shuffle mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:413,Mask,Mask,413,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"/// Checks if the gathered \p VL can be represented as multi-register; /// shuffle(s) of previous tree entries.; /// \param TE Tree entry checked for permutation.; /// \param VL List of scalars (a subset of the TE scalar), checked for; /// permutations.; /// \returns per-register series of ShuffleKind, if gathered values can be; /// represented as shuffles of previous tree entries. \p Mask is filled with; /// the shuffle mask (also on per-register base).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:388,Mask,Mask,388,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,"['Mask', 'mask']","['Mask', 'mask']"
Availability,/// Checks if the given \p TE is a gather node with clustered reused scalars; /// and reorders it per given \p Mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:111,Mask,Mask,111,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Mask'],['Mask']
Availability,"/// Checks if the given mask is a ""clustered"" mask with the same clusters of; /// size \p Sz, which are not identity submasks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:24,mask,mask,24,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['mask'],['mask']
Availability,"/// Checks if the given type is supported by RNTuple. In case of success, the result vector is empty.; /// Otherwise there is an error record for each failing sub field (sub type).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:129,error,error,129,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['error'],['error']
Availability,"/// Checks if the given value is actually an undefined constant vector.; /// Also, if the \p UseMask is not empty, tries to check if the non-masked; /// elements actually mask the insertelement buildvector, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:141,mask,masked,141,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['mask'],"['mask', 'masked']"
Availability,/// Checks if the mask is an identity mask.; /// \param IsStrict if is true the function returns false if mask size does; /// not match vector size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:18,mask,mask,18,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,['mask'],['mask']
Availability,"/// Checks if the shuffle mask takes subsequent elements; /// alternately from two vectors.; /// For example <0, 5, 2, 7> or <8, 1, 10, 3, 12, 5, 14, 7> are both correct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:26,mask,mask,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,"/// Checks if the vector of instructions can be represented as a shuffle, like:; /// %x0 = extractelement <4 x i8> %x, i32 0; /// %x3 = extractelement <4 x i8> %x, i32 3; /// %y1 = extractelement <4 x i8> %y, i32 1; /// %y2 = extractelement <4 x i8> %y, i32 2; /// %x0x0 = mul i8 %x0, %x0; /// %x3x3 = mul i8 %x3, %x3; /// %y1y1 = mul i8 %y1, %y1; /// %y2y2 = mul i8 %y2, %y2; /// %ins1 = insertelement <4 x i8> poison, i8 %x0x0, i32 0; /// %ins2 = insertelement <4 x i8> %ins1, i8 %x3x3, i32 1; /// %ins3 = insertelement <4 x i8> %ins2, i8 %y1y1, i32 2; /// %ins4 = insertelement <4 x i8> %ins3, i8 %y2y2, i32 3; /// ret <4 x i8> %ins4; /// can be transformed into:; /// %1 = shufflevector <4 x i8> %x, <4 x i8> %y, <4 x i32> <i32 0, i32 3, i32 5,; /// i32 6>; /// %2 = mul <4 x i8> %1, %1; /// ret <4 x i8> %2; /// Mask will return the Shuffle Mask equivalent to the extracted elements.; /// TODO: Can we split off and reuse the shuffle mask detection from; /// ShuffleVectorInst/getShuffleCost?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:817,Mask,Mask,817,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"/// Checks if there is an available slot in the resource buffer.; ///; /// Returns RS_BUFFER_AVAILABLE if this is not a buffered resource, or if; /// there is a slot available.; ///; /// Returns RS_RESERVED if this buffered resource is a dispatch hazard, and it; /// is reserved.; ///; /// Returns RS_BUFFER_UNAVAILABLE if there are no available slots.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:26,avail,available,26,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,3,['avail'],['available']
Availability,/// Checks that a call expression's argument count is at least the desired; /// number. This is useful when doing custom type-checking on a variadic; /// function. Returns true on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:180,error,error,180,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['error'],['error']
Availability,/// Checks that a call expression's argument count is at most the desired; /// number. This is useful when doing custom type-checking on a variadic; /// function. Returns true on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:179,error,error,179,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['error'],['error']
Availability,/// Checks that a call expression's argument count is in the desired range. This; /// is useful when doing custom type-checking on a variadic function. Returns; /// true on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:173,error,error,173,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['error'],['error']
Availability,/// Checks that a call expression's argument count is the desired number.; /// This is useful when doing custom type-checking. Returns true on error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:143,error,error,143,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['error'],['error']
Availability,/// Checks that the Objective-C declaration is declared in the global scope.; /// Emits an error and marks the declaration as invalid if it's not declared; /// in the global scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:91,error,error,91,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"/// Checks that the given nested-name qualifier used in a using decl; /// in the current context is appropriately related to the current; /// scope. If an error is found, diagnoses it and returns true.; /// R is nullptr, if the caller has not (yet) done a lookup, otherwise it's the; /// result of that lookup. UD is likewise nullptr, except when we have an; /// already-populated UsingDecl whose shadow decls contain the same information; /// (i.e. we're instantiating a UsingDecl with non-dependent scope).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:155,error,error,155,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['error'],['error']
Availability,"/// Checks the given mask, and determines whether said mask is deinterleaving.; ///; /// To be deinterleaving, a mask must increment in steps of 2, and either start; /// with 0 or 1.; /// (e.g. an 8x vector deinterleaving mask would be either <0, 2, 4, 6> or; /// <1, 3, 5, 7>).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp:21,mask,mask,21,interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,4,['mask'],['mask']
Availability,"/// Checks the given mask, and determines whether said mask is interleaving.; ///; /// To be interleaving, a mask must alternate between `i` and `i + (Length /; /// 2)`, and must contain all numbers within the range of `[0..Length)` (e.g. a; /// 4x vector interleaving mask would be <0, 2, 1, 3>).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp:21,mask,mask,21,interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,4,['mask'],['mask']
Availability,/// Checks the input to FileCheck provided in the \p Buffer against the; /// expected strings read from the check file and record diagnostics emitted; /// in \p Diags. Errors are recorded against \p SM.; ///; /// \returns false if the input fails to satisfy the checks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:168,Error,Errors,168,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,1,['Error'],['Errors']
Availability,"/// Checks the validity of a template parameter list, possibly; /// considering the template parameter list from a previous; /// declaration.; ///; /// If an ""old"" template parameter list is provided, it must be; /// equivalent (per TemplateParameterListsAreEqual) to the ""new""; /// template parameter list.; ///; /// \param NewParams Template parameter list for a new template; /// declaration. This template parameter list will be updated with any; /// default arguments that are carried through from the previous; /// template parameter list.; ///; /// \param OldParams If provided, template parameter list from a; /// previous declaration of the same template. Default template; /// arguments will be merged from the old template parameter list to; /// the new template parameter list.; ///; /// \param TPC Describes the context in which we are checking the given; /// template parameter list.; ///; /// \param SkipBody If we might have already made a prior merged definition; /// of this template visible, the corresponding body-skipping information.; /// Default argument redefinition is not an error when skipping such a body,; /// because (under the ODR) we can assume the default arguments are the same; /// as the prior merged definition.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:1101,error,error,1101,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,['error'],['error']
Availability,/// Checks to see if the @p O ObjectFile is a Mach-O file and if it is and there; /// is a list of architecture flags specified then check to make sure this; /// Mach-O file is one of those architectures or all architectures was; /// specificed. If not then an error is generated and this routine returns; /// false. Else it returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:261,error,error,261,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,1,['error'],['error']
Availability,"/// Checks whether a shuffle mask is equivalent to an explicit list of; /// arguments.; ///; /// This is a fast way to test a shuffle mask against a fixed pattern:; ///; /// if (isShuffleEquivalent(Mask, 3, 2, {1, 0})) { ... }; ///; /// It returns true if the mask is exactly as wide as the argument list, and; /// each element of the mask is either -1 (signifying undef) or the value given; /// in the argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:29,mask,mask,29,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,5,"['Mask', 'mask']","['Mask', 'mask']"
Availability,"/// Checks whether a target shuffle mask is equivalent to an explicit pattern.; ///; /// The masks must be exactly the same width.; ///; /// If an element in Mask matches SM_SentinelUndef (-1) then the corresponding; /// value in ExpectedMask is always accepted. Otherwise the indices must match.; ///; /// SM_SentinelZero is accepted as a valid negative index but must match in; /// both, or via a known bits test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:36,mask,mask,36,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,"['Mask', 'mask']","['Mask', 'mask', 'masks']"
Availability,"/// Checks whether the cursor is valid (i.e. no errors were encountered). In; /// case of errors, this does not clear the error flag -- one must call; /// takeError() instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:48,error,errors,48,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,3,['error'],"['error', 'errors']"
Availability,/// Checks whether the vector elements referenced by two shuffle masks are; /// equivalent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:65,mask,masks,65,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['masks']
Availability,"/// Choose between local column names or default column names, throw in case of errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:80,error,errors,80,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['error'],['errors']
Availability,"/// Chooses between multiple stencils, based on the presence of bound nodes. \p; /// CaseStencils takes a vector of (ID, \c Stencil) pairs and checks each ID in; /// order to see if it's bound to a node. If so, the associated \c Stencil is; /// run and all other cases are ignored. An optional \p DefaultStencil can be; /// provided to be run if all cases are exhausted beacause none of the provided; /// IDs are bound. If no default case is provided and all cases are exhausted,; /// the stencil will fail with error `llvm::errc::result_out_of_range`.; ///; /// For example, say one matches a statement's type with:; /// anyOf(; /// qualType(isInteger()).bind(""int""),; /// qualType(realFloatingPointType()).bind(""float""),; /// qualType(isAnyCharacter()).bind(""char""),; /// booleanType().bind(""bool"")); ///; /// Then, one can decide in a stencil how to construct a literal.; /// cat(""a = "",; /// selectBound(; /// {{""int"", cat(""0"")},; /// {""float"", cat(""0.0"")},; /// {""char"", cat(""'\\0'"")},; /// {""bool"", cat(""false"")}})); ///; /// In addition, one could supply a default case for all other types:; /// selectBound(; /// {{""int"", cat(""0"")},; /// ...; /// {""bool"", cat(""false"")}},; /// cat(""{}""))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h:512,error,error,512,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,1,['error'],['error']
Availability,/// Class defining a parser context.; ///; /// Used by the parser to specify (possibly recursive) contexts where the; /// parsing/construction can fail. Any error triggered within a context will; /// keep information about the context chain.; /// This class should be used as a RAII instance in the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:157,error,error,157,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,1,['error'],['error']
Availability,/// Class to represent an error holding a diagnostic with location information; /// used when printing it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:26,error,error,26,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['error'],['error']
Availability,/// Class to represent an overflow error that might result when manipulating a; /// value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:35,error,error,35,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['error'],['error']
Availability,"/// Class to represent an undefined variable error, which quotes that; /// variable's name when printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:45,error,error,45,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['error'],['error']
Availability,/// Classification failed; an error has been produced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,error,error,30,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['error'],['error']
Availability,"/// Classify (icmp eq (A & B), C) and (icmp ne (A & B), C) as matching patterns; /// that can be simplified.; /// One of A and B is considered the mask. The other is the value. This is; /// described as the ""AMask"" or ""BMask"" part of the enum. If the enum contains; /// only ""Mask"", then both A and B can be considered masks. If A is the mask,; /// then it was proven that (A & C) == C. This is trivial if C == A or C == 0.; /// If both A and C are constants, this proof is also easy.; /// For the following explanations, we assume that A is the mask.; ///; /// ""AllOnes"" declares that the comparison is true only if (A & B) == A or all; /// bits of A are set in B.; /// Example: (icmp eq (A & 3), 3) -> AMask_AllOnes; ///; /// ""AllZeros"" declares that the comparison is true only if (A & B) == 0 or all; /// bits of A are cleared in B.; /// Example: (icmp eq (A & 3), 0) -> Mask_AllZeroes; ///; /// ""Mixed"" declares that (A & B) == C and C might or might not contain any; /// number of one bits and zero bits.; /// Example: (icmp eq (A & 3), 1) -> AMask_Mixed; ///; /// ""Not"" means that in above descriptions ""=="" should be replaced by ""!="".; /// Example: (icmp ne (A & 3), 3) -> AMask_NotAllOnes; ///; /// If the mask A contains a single bit, then the following is equivalent:; /// (icmp eq (A & B), A) equals (icmp ne (A & B), 0); /// (icmp ne (A & B), A) equals (icmp eq (A & B), 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:147,mask,mask,147,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,6,"['Mask', 'mask']","['Mask', 'mask', 'masks']"
Availability,/// Clean up any erroneous/redundant code in the given \p Ranges in \p; /// Code.; ///; /// Returns the ``Replacements`` that clean up all \p Ranges in \p Code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:27,redundant,redundant,27,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['redundant'],['redundant']
Availability,/// CleanupFile - Delete a given file.; ///; /// \param IssueErrors - Report failures as errors.; /// \return Whether the file was removed successfully.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:77,failure,failures,77,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,2,"['error', 'failure']","['errors', 'failures']"
Availability,/// CleanupFileList - Remove the files in the given list.; ///; /// \param IssueErrors - Report failures as errors.; /// \return Whether all files were removed successfully.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:96,failure,failures,96,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,2,"['error', 'failure']","['errors', 'failures']"
Availability,"/// CleanupFileMap - Remove the files in the given map.; ///; /// \param JA - If specified, only delete the files associated with this; /// JobAction. Otherwise, delete all files in the map.; /// \param IssueErrors - Report failures as errors.; /// \return Whether all files were removed successfully.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:224,failure,failures,224,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,2,"['error', 'failure']","['errors', 'failures']"
Availability,"/// Clear a bit in this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:52,Mask,Mask,52,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,2,['Mask'],['Mask']
Availability,"/// Clear all memory not needed downstream.; ///; /// Releases all memory not used downstream. In particular, saves Freqs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp:32,down,downstream,32,interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,2,['down'],['downstream']
Availability,"/// Clear any bits in this vector that are set in Mask. Don't resize.; /// This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:50,Mask,Mask,50,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,2,['Mask'],['Mask']
Availability,/// Clear the current error and return a successful one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:22,error,error,22,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,1,['error'],['error']
Availability,/// Clear the error message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:14,error,error,14,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['error'],['error']
Availability,/// Clears the namespace of this declaration.; ///; /// This is useful if we want this declaration to be available for; /// redeclaration lookup but otherwise hidden for ordinary name lookups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:105,avail,available,105,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['avail'],['available']
Availability,"/// Client code should call this function as soon as the Preprocessor has; /// either completed lexing the macro's definition tokens, or an error; /// occurred and the context is being exited. This function is idempotent; /// (might be explicitly called, and then reinvoked via the destructor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h:140,error,error,140,interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h,1,['error'],['error']
Availability,"/// Clone this scope, and all outer scopes, down to the given; /// outermost scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:44,down,down,44,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,1,['down'],['down']
Availability,/// Code completion occurred on the right-hand side of a member; /// access expression using the arrow operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:222,avail,available,222,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['avail'],['available']
Availability,/// Code completion occurred on the right-hand side of a member; /// access expression using the dot operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:220,avail,available,220,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['avail'],['available']
Availability,/// Code completion occurred on the right-hand side of an Objective-C; /// property access expression.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:212,avail,available,212,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['avail'],['available']
Availability,"/// Code completion occurs within the body of a function on a; /// recovery path, where we do not have a specific handle on our position; /// in the grammar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:67,recover,recovery,67,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['recover'],['recovery']
Availability,/// Code that should be replaced to correct the error. Empty for an; /// insertion hint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:48,error,error,48,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['error'],['error']
Availability,"/// CodeInjector is an interface which is responsible for injecting AST; /// of function definitions that may not be available in the original source.; ///; /// The getBody function will be called each time the static analyzer examines a; /// function call that has no definition available in the current translation; /// unit. If the returned statement is not a null pointer, it is assumed to be; /// the body of a function which will be used for the analysis. The source of; /// the body can be arbitrary, but it is advised to use memoization to avoid; /// unnecessary reparsing of the external source that provides the body of the; /// functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CodeInjector.h:117,avail,available,117,interpreter/llvm-project/clang/include/clang/Analysis/CodeInjector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CodeInjector.h,2,['avail'],['available']
Availability,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,failure,failure,16,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,['failure'],['failure']
Availability,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:16,failure,failure,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,2,['failure'],['failure']
Availability,"/// Collect blocks in the given loop that are to be placed.; ///; /// When profile data is available, exclude cold blocks from the returned set;; /// otherwise, collect all blocks in the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:91,avail,available,91,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['avail'],['available']
Availability,/// Collect lifetime intrinsic calls to check for use-after-scope; /// errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:71,error,errors,71,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['error'],['errors']
Availability,/// Collect original debug information before a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:307,error,error,307,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,2,['error'],['error']
Availability,/// Collect the killed registers in the ELSE region which are not alive through; /// the whole THEN region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp:66,alive,alive,66,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,1,['alive'],['alive']
Availability,"/// Collect the module dependency in P1689 format for C++20 named modules.; ///; /// \param MakeformatOutput The output parameter for dependency information; /// in make format if the command line requires to generate make-format; /// dependency information by `-MD -MF <dep_file>`.; ///; /// \param MakeformatOutputPath The output parameter for the path to; /// \param MakeformatOutput.; ///; /// \returns A \c StringError with the diagnostic output if clang errors; /// occurred, P1689 dependency format rules otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:460,error,errors,460,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['error'],['errors']
Availability,"/// Collection of named constants per fixup kind; ///; /// Mandatory entries:; /// Opcode - Values of the op-code bits in the instruction, with; /// unaffected bits nulled; /// OpcodeMask - Mask with all bits set that encode the op-code; ///; /// Other common entries:; /// ImmMask - Mask with all bits set that encode the immediate value; /// RegMask - Mask with all bits set that encode the register; ///; /// Specializations can add further custom fields without restrictions.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:190,Mask,Mask,190,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,3,['Mask'],['Mask']
Availability,/// Collection of register mask operands that have been observed. Second part; /// of pair indicates the instruction that they happened in. Used to; /// reconstruct where defs happened if we start tracking a location later; /// on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:27,mask,mask,27,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['mask'],['mask']
Availability,"/// Collects an expected integer value from a given argument index in a remark.; ///; /// \p Remark - The remark.; /// \p ArgIdx - The index where the integer value should be found.; /// \p ExpectedKeyName - The expected key name for the index; /// (e.g. ""InstructionCount""); ///; /// \returns the integer value at the index if it exists, and the key-value pair; /// is what is expected. Otherwise, returns an Error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:410,Error,Error,410,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,1,['Error'],['Error']
Availability,"/// ColonIsSacred - When this is false, we aggressively try to recover from; /// code like ""foo : bar"" as if it were a typo for ""foo :: bar"". This is not; /// safe in case statements and a few other things. This is managed by the; /// ColonProtectionRAIIObject RAII object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:63,recover,recover,63,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['recover'],['recover']
Availability,"/// ColonProtectionRAIIObject - This sets the Parser::ColonIsSacred bool and; /// restores it when destroyed. This says that ""foo:"" should not be; /// considered a possible typo for ""foo::"" for error recovery purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:194,error,error,194,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,2,"['error', 'recover']","['error', 'recovery']"
Availability,/// Combine a translation of the SCEV and the IV to create an expression that; /// recovers a location's value.; /// returns true if an expression was created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:83,recover,recovers,83,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['recover'],['recovers']
Availability,"/// Combine an arbitrary chain of shuffles into a single instruction if; /// possible.; ///; /// This is the leaf of the recursive combine below. When we have found some; /// chain of single-use x86 shuffle instructions and accumulated the combined; /// shuffle mask represented by them, this will try to pattern match that mask; /// into either a single instruction if there is a special purpose instruction; /// for this operation, or into a PSHUFB instruction which is a fully general; /// instruction but should only be used to replace chains over a certain depth.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:262,mask,mask,262,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['mask'],['mask']
Availability,/// Combine the checks in \p Checks into a smaller set of checks and append; /// them into \p CombinedChecks. Return true on success (i.e. all of checks; /// in \p Checks were combined into \p CombinedChecks). Clobbers \p Checks; /// and \p CombinedChecks on success and on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp:274,failure,failure,274,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,1,['failure'],['failure']
Availability,/// Combined mask for all applied operands and masks. It is built during; /// analysis and actual emission of shuffle vector instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:13,mask,mask,13,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['mask'],"['mask', 'masks']"
Availability,"/// Common base class for representing values projected from a statepoint.; /// Currently, the only projections available are gc.result and gc.relocate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:112,avail,available,112,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['avail'],['available']
Availability,"/// Common helper used by \c widenGuard and \c isWideningCondProfitable. Try; /// to generate an expression computing the logical AND of \p ChecksToHoist; /// and \p ChecksToWiden. Return true if the expression computing the AND is; /// only as expensive as computing one of the set of expressions. If \p; /// InsertPt is true then actually generate the resulting expression, make it; /// available at \p InsertPt and return it in \p Result (else no change to the; /// IR is made).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp:389,avail,available,389,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GuardWidening.cpp,1,['avail'],['available']
Availability,"/// Compare fallible iterators for equality.; ///; /// Returns true if both LHS and RHS are end-of-range values, or if both are; /// non-end-of-range values whose underlying iterator values compare equal.; ///; /// If this is a comparison between an end-of-range iterator and a; /// non-end-of-range iterator, then the Error (referenced by the; /// non-end-of-range value) is marked as checked: Since all; /// increment/decrement operations result in an end-of-range value, comparing; /// false against end-of-range is equivalent to checking that the Error value; /// is success. This flag management enables early returns from loop bodies; /// without redundant Error checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:319,Error,Error,319,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,4,"['Error', 'redundant']","['Error', 'redundant']"
Availability,"/// Compile a module file for the given module in a separate compiler instance,; /// using the options provided by the importing compiler instance. Returns true; /// if the module was built without errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:198,error,errors,198,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['errors']
Availability,"/// Compile a module file for the given module, using the options; /// provided by the importing compiler instance. Returns true if the module; /// was built without errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:166,error,errors,166,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['errors']
Availability,"/// Compile a module in a separate compiler instance and read the AST,; /// returning true if the module compiles without errors, potentially using a; /// lock manager to avoid building the same module in multiple compiler; /// instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:122,error,errors,122,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['errors']
Availability,"/// Compile a module in a separate compiler instance and read the AST,; /// returning true if the module compiles without errors, using a lock manager; /// to avoid building the same module in multiple compiler instances.; ///; /// Uses a lock file manager and exponential backoff to reduce the chances that; /// multiple instances will compete to create the same module. On timeout,; /// deletes the lock file in order to avoid deadlock from crashing processes or; /// bugs in the lock file manager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:122,error,errors,122,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['errors']
Availability,"/// Compile a module in a separate compiler instance and read the AST,; /// returning true if the module compiles without errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:122,error,errors,122,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['error'],['errors']
Availability,"/// Compile the specified program from bitcode to code understood by the CC; /// driver (either C or asm). Returns an error if the code generator fails,,; /// otherwise, the type of code emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h:118,error,error,118,interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h,1,['error'],['error']
Availability,/// Complete BTF type generation after all related DebugInfo types; /// have been visited so their BTF type id's are available; /// for cross referece.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h:117,avail,available,117,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,1,['avail'],['available']
Availability,"/// Complete an expression at the given offset.; ///; /// \param S The Sema instance that will help the parser; /// construct the matchers. If null, it uses the default registry.; ///; /// \param NamedValues A map of precomputed named values. This provides; /// the dictionary for the <NamedValue> rule of the grammar.; /// If null, it is ignored.; ///; /// \return The list of completions, which may be empty if there are no; /// available completions or if an error occurred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:431,avail,available,431,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,2,"['avail', 'error']","['available', 'error']"
Availability,"/// Compute a map of integer instructions to their minimum legal type; /// size.; ///; /// C semantics force sub-int-sized values (e.g. i8, i16) to be promoted to int; /// type (e.g. i32) whenever arithmetic is performed on them.; ///; /// For targets with native i8 or i16 operations, usually InstCombine can shrink; /// the arithmetic type down again. However InstCombine refuses to create; /// illegal types, so for targets without i8 or i16 registers, the lengthening; /// and shrinking remains.; ///; /// Most SIMD ISAs (e.g. NEON) however support vectors of i8 or i16 even when; /// their scalar equivalents do not, so during vectorization it is important to; /// remove these lengthens and truncates when deciding the profitability of; /// vectorization.; ///; /// This function analyzes the given range of instructions and determines the; /// minimum type size each can be converted to. It attempts to remove or; /// minimize type size changes across each def-use chain, so for example in the; /// following code:; ///; /// %1 = load i8, i8*; /// %2 = add i8 %1, 2; /// %3 = load i16, i16*; /// %4 = zext i8 %2 to i32; /// %5 = zext i16 %3 to i32; /// %6 = add i32 %4, %5; /// %7 = trunc i32 %6 to i16; ///; /// Instruction %6 must be done at least in i16, so computeMinimumValueSizes; /// will return: {%1: 16, %2: 16, %3: 16, %4: 16, %5: 16, %6: 16, %7: 16}.; ///; /// If the optional TargetTransformInfo is provided, this function tries harder; /// to do less work by only looking at illegal types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:342,down,down,342,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['down'],['down']
Availability,/// Compute alive bits of one addition operand from alive output and known; /// operand bits,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DemandedBits.h:12,alive,alive,12,interpreter/llvm-project/llvm/include/llvm/Analysis/DemandedBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DemandedBits.h,2,['alive'],['alive']
Availability,/// Compute alive bits of one subtraction operand from alive output and known; /// operand bits,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DemandedBits.h:12,alive,alive,12,interpreter/llvm-project/llvm/include/llvm/Analysis/DemandedBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DemandedBits.h,2,['alive'],['alive']
Availability,"/// Compute an APInt containing numBits highbits from this APInt.; ///; /// Get an APInt with the same BitWidth as this APInt, just zero mask the low; /// bits and right shift to the least significant bit.; ///; /// \returns the high ""numBits"" bits of this APInt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:137,mask,mask,137,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['mask'],['mask']
Availability,"/// Compute an APInt containing numBits lowbits from this APInt.; ///; /// Get an APInt with the same BitWidth as this APInt, just zero mask the high; /// bits.; ///; /// \returns the low ""numBits"" bits of this APInt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:136,mask,mask,136,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['mask'],['mask']
Availability,/// Compute and return the use operand latency of a given itinerary; /// class and operand index if the value is produced by an instruction of the; /// specified itinerary class and def operand index. Return std::nullopt if; /// the information is not available for the operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h:252,avail,available,252,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrItineraries.h,1,['avail'],['available']
Availability,/// Compute hotness from IR value (currently assumed to be a block) if PGO is; /// available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h:83,avail,available,83,interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,2,['avail'],['available']
Availability,/// Compute masked bits for the condition of a switch; /// and use it to remove dead cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:12,mask,masked,12,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['mask'],['masked']
Availability,/// Compute operand latency based on the available machine model.; ///; /// Compute and return the latency of the given data dependent def and use; /// when the operand indices are already known. UseMI may be NULL for an; /// unknown user.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:41,avail,available,41,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,1,['avail'],['available']
Availability,"/// Compute remaining latency. We need this both to determine whether the; /// overall schedule has become latency-limited and whether the instructions; /// outside this zone are resource or latency limited.; ///; /// The ""dependent"" latency is updated incrementally during scheduling as the; /// max height/depth of scheduled nodes minus the cycles since it was; /// scheduled:; /// DLat = max (N.depth - (CurrCycle - N.ReadyCycle) for N in Zone; ///; /// The ""independent"" latency is the max ready queue depth:; /// ILat = max N.depth for N in Available|Pending; ///; /// RemainingLatency is the greater of independent and dependent latency.; ///; /// These computations are expensive, especially in DAGs with many edges, so; /// only do them if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:546,Avail,Available,546,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['Avail'],['Available']
Availability,"/// Compute the AST consumer arguments that will be used to; /// create the PCHGenerator instance returned by CreateASTConsumer.; ///; /// \returns false if an error occurred, true otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:160,error,error,160,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,1,['error'],['error']
Availability,"/// Compute the AvailableOut set for BB, based on the BasicBlockState BBS,; /// which is the BasicBlockState for BB.; /// ContributionChanged is set when the verifier runs for the first time; /// (in this case Contribution was changed from 'empty' to its initial state); /// or when Contribution of this BB was changed since last computation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:16,Avail,AvailableOut,16,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['Avail'],['AvailableOut']
Availability,/// Compute the begin and end locations from the decomposed form.; /// The locations of the semantic form are not reliable if this is; /// a reversed expression.; //@{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:114,reliab,reliable,114,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['reliab'],['reliable']
Availability,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:80,repair,repairing,80,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,3,"['Repair', 'repair']","['RepairPts', 'repairing']"
Availability,"/// Compute the instruction latency based on the available machine; /// model.; ///; /// Compute and return the expected latency of this instruction independent of; /// a particular use. computeOperandLatency is the preferred API, but this is; /// occasionally useful to help estimate instruction cost.; ///; /// If UseDefaultDefLatency is false and no new machine sched model is; /// present this method falls back to TII->getInstrLatency with an empty; /// instruction itinerary (this is so we preserve the previous behavior of the; /// if converter after moving it to TargetSchedModel).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:49,avail,available,49,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,1,['avail'],['available']
Availability,"/// Compute the intersection of two locksets and issue warnings for any; /// locks in the symmetric difference.; ///; /// This function is used at a merge point in the CFG when comparing the lockset; /// of each branch being merged. For example, given the following sequence:; /// A; if () then B; else C; D; we need to check that the lockset after B and C; /// are the same. In the event of a difference, we use the intersection of these; /// two locksets at the start of D.; ///; /// \param EntrySet A lockset for entry into a (possibly new) block.; /// \param ExitSet The lockset on exiting a preceding block.; /// \param JoinLoc The location of the join point for error reporting; /// \param EntryLEK The warning if a mutex is missing from \p EntrySet.; /// \param ExitLEK The warning if a mutex is missing from \p ExitSet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:668,error,error,668,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['error'],['error']
Availability,"/// Compute the max cyclic critical path through the DAG. The scheduling DAG; /// only provides the critical path for single block loops. To handle loops that; /// span blocks, we could use the vreg path latencies provided by; /// MachineTraceMetrics instead. However, MachineTraceMetrics is not currently; /// available for use in the scheduler.; ///; /// The cyclic path estimation identifies a def-use pair that crosses the back; /// edge and considers the depth and height of the nodes. For example, consider; /// the following instruction sequence where each instruction has unit latency; /// and defines an eponymous virtual register:; ///; /// a->b(a,c)->c(b)->d(c)->exit; ///; /// The cyclic critical path is a two cycles: b->c->b; /// The acyclic critical path is four cycles: a->b->c->d->exit; /// LiveOutHeight = height(c) = len(c->d->exit) = 2; /// LiveOutDepth = depth(c) + 1 = len(a->b->c) + 1 = 3; /// LiveInHeight = height(b) + 1 = len(b->c->d->exit) + 1 = 4; /// LiveInDepth = depth(b) = len(a->b) = 1; ///; /// LiveOutDepth - LiveInDepth = 3 - 1 = 2; /// LiveInHeight - LiveOutHeight = 4 - 2 = 2; /// CyclicCriticalPath = min(2, 2) = 2; ///; /// This could be relevant to PostRA scheduling, but is currently implemented; /// assuming LiveIntervals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:311,avail,available,311,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['avail'],['available']
Availability,"/// Compute the memdep value for BB with Pointer/PointeeSize using either; /// cached information in Cache or by doing a lookup (which may use dirty cache; /// info if available).; ///; /// If we do a lookup, add the result to the cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:168,avail,available,168,interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,1,['avail'],['available']
Availability,/// Compute the number of possible unique paths from an entry to an exit; /// which pass through this block. This is only valid after both the; /// top-down and bottom-up traversals are complete.; ///; /// Returns true if overflow occurred. Returns false if overflow did not; /// occur.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:152,down,down,152,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['down'],['down']
Availability,"/// Compute the stall cycles based on this SUnit's ready time. Heuristics treat; /// these ""soft stalls"" differently than the hard stall cycles based on CPU; /// resources and computed by checkHazard(). A fully in-order model; /// (MicroOpBufferSize==0) will not make use of this since instructions are not; /// available for scheduling until they are ready. However, a weaker in-order; /// model may use this for heuristics. For example, if a processor has in-order; /// behavior when reading certain resources, this may come into play.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:312,avail,available,312,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['avail'],['available']
Availability,"/// Compute whether each element of a shuffle is zeroable.; ///; /// A ""zeroable"" vector shuffle element is one which can be lowered to zero.; /// Either it is an undef element in the shuffle mask, the element of the input; /// referenced is undef, or the element of the input referenced is known to be; /// zero. Many x86 shuffles can zero lanes cheaply and we often want to handle; /// as many lanes with this technique as possible to simplify the remaining; /// shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:192,mask,mask,192,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['mask'],['mask']
Availability,/// Computes A * B. When computation wraps around sets the error and returns; /// false. Otherwise assigns the result to A and returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/RustDemangle.cpp:59,error,error,59,interpreter/llvm-project/llvm/lib/Demangle/RustDemangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/RustDemangle.cpp,1,['error'],['error']
Availability,/// Computes A + B. When computation wraps around sets the error and returns; /// false. Otherwise assigns the result to A and returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/RustDemangle.cpp:59,error,error,59,interpreter/llvm-project/llvm/lib/Demangle/RustDemangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/RustDemangle.cpp,1,['error'],['error']
Availability,/// Computes a lane mask for each register unit enumerated by a physical; /// register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:20,mask,mask,20,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,1,['mask'],['mask']
Availability,"/// Computes a range for the induction variable (IndVar) in which the range; /// check is redundant and can be constant-folded away. The induction; /// variable is not required to be the canonical {0,+,1} induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:90,redundant,redundant,90,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,1,['redundant'],['redundant']
Availability,"/// Computes the dot product of the two 128-bit vectors of [2 x double]; /// and returns it in the elements of the 128-bit result vector of; /// [2 x double].; ///; /// The immediate integer operand controls which input; /// elements will contribute to the dot product, and where the final results; /// are returned.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// __m128d _mm_dp_pd(__m128d X, __m128d Y, const int M);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VDPPD / DPPD </c> instruction.; ///; /// \param X; /// A 128-bit vector of [2 x double].; /// \param Y; /// A 128-bit vector of [2 x double].; /// \param M; /// An immediate integer operand. Mask bits [5:4] determine which elements; /// of the input vectors are used, with bit [4] corresponding to the lowest; /// element and bit [5] corresponding to the highest element of each of [2 x; /// double] vector. If a bit is set, the corresponding elements from the two; /// input vectors are used as an input for dot product; otherwise that input; /// is treated as zero. Bits [1:0] determine which elements of the result; /// will receive a copy of the final dot product, with bit [0] corresponding; /// to the lowest element and bit [1] corresponding to the highest element of; /// each [2 x double] vector. If a bit is set, the dot product is returned in; /// the corresponding element; otherwise that element is set to zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:681,Mask,Mask,681,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,1,['Mask'],['Mask']
Availability,"/// Computing a type for the function argument may require running; /// overloading, so we postpone its computation until it is actually needed.; ///; /// Clients should be very careful when using this function, as it stores a; /// function_ref, clients should make sure all calls to get() with the same; /// location happen while function_ref is alive.; ///; /// The callback should also emit signature help as a side-effect, but only; /// if the completion point has been reached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:347,alive,alive,347,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['alive'],['alive']
Availability,/// Concatenate a source file path and/or name with a std::error_code ; /// to form an Error object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:87,Error,Error,87,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['Error'],['Error']
Availability,/// Concatenate a source file path and/or name with an Error. The resulting; /// Error is unchecked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:55,Error,Error,55,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,['Error'],['Error']
Availability,/// Concatenate a source file path and/or name with line number and an Error.; /// The resulting Error is unchecked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:71,Error,Error,71,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,['Error'],['Error']
Availability,/// Concatenate a source file path and/or name with line number and; /// std::error_code to form an Error object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:100,Error,Error,100,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['Error'],['Error']
Availability,"/// Concatenate errors. The resulting Error is unchecked, and contains the; /// ErrorInfo(s), if any, contained in E1, followed by the; /// ErrorInfo(s), if any, contained in E2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:16,error,errors,16,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,4,"['Error', 'error']","['Error', 'ErrorInfo', 'errors']"
Availability,"/// Concrete class used by the front-end to report problems and issues.; ///; /// This massages the diagnostics (e.g. handling things like ""report warnings; /// as errors"" and passes them off to the DiagnosticConsumer for reporting to; /// the user. DiagnosticsEngine is tied to one translation unit and one; /// SourceManager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:164,error,errors,164,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['error'],['errors']
Availability,"/// CondState represents the evaluation of a condition in an executed test; /// vector, which can be True or False. A DontCare is used to mask an; /// unevaluatable condition resulting from short-circuit behavior of logical; /// operators in languages like C/C++. When comparing the evaluation of a; /// condition across executed test vectors, comparisons against a DontCare; /// are effectively ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:138,mask,mask,138,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['mask'],['mask']
Availability,"/// Conditionally gathers eight 32-bit floating-point values, either from the; /// 256-bit vector of [8 x float] in \a a, or from memory \a m using scaled; /// indexes from the 256-bit vector of [8 x i32] in \a i. The 256-bit vector; /// of [8 x float] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 7; /// j := element*32; /// k := element*32; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256 _mm256_mask_i32gather_ps(__m256 a, const float *m, __m256i i,; /// __m256 mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERDPS instruction.; ///; /// \param a; /// A 256-bit vector of [8 x float] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 256-bit vector of [8 x i32] containing signed indexes into \a m.; /// \param mask; /// A 256-bit vector of [8 x float] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 256-bit vector of [8 x float] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:259,mask,mask,259,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers eight 32-bit integer values, either from the; /// 256-bit vector of [8 x i32] in \a a, or from memory \a m using scaled; /// indexes from the 256-bit vector of [8 x i32] in \a i. The 256-bit vector; /// of [8 x i32] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 7; /// j := element*32; /// k := element*32; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_mask_i32gather_epi32(__m256i a, const int *m, __m256i i,; /// __m256i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERDD instruction.; ///; /// \param a; /// A 256-bit vector of [8 x i32] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 256-bit vector of [8 x i32] containing signed indexes into \a m.; /// \param mask; /// A 256-bit vector of [8 x i32] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 256-bit vector of [8 x i32] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:248,mask,mask,248,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 32-bit floating-point values, either from the; /// 128-bit vector of [4 x float] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [4 x i32] in \a i. The 128-bit vector; /// of [4 x float] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*32; /// k := element*32; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128 _mm_mask_i32gather_ps(__m128 a, const float *m, __m128i i,; /// __m128 mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERDPS instruction.; ///; /// \param a; /// A 128-bit vector of [4 x float] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [4 x i32] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [4 x float] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [4 x float] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:258,mask,mask,258,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 32-bit floating-point values, either from the; /// 128-bit vector of [4 x float] in \a a, or from memory \a m using scaled; /// indexes from the 256-bit vector of [4 x i64] in \a i. The 128-bit vector; /// of [4 x float] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*32; /// k := element*64; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128 _mm256_mask_i64gather_ps(__m128 a, const float *m, __m256i i,; /// __m128 mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERQPS instruction.; ///; /// \param a; /// A 128-bit vector of [4 x float] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 256-bit vector of [4 x i64] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [4 x float] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [4 x float] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:258,mask,mask,258,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 32-bit integer values, either from the; /// 128-bit vector of [4 x i32] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [4 x i32] in \a i. The 128-bit vector; /// of [4 x i32] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*32; /// k := element*32; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_mask_i32gather_epi32(__m128i a, const int *m, __m128i i,; /// __m128i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERDD instruction.; ///; /// \param a; /// A 128-bit vector of [4 x i32] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [4 x i32] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [4 x i32] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [4 x i32] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:247,mask,mask,247,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 32-bit integer values, either from the; /// 128-bit vector of [4 x i32] in \a a, or from memory \a m using scaled; /// indexes from the 256-bit vector of [4 x i64] in \a i. The 128-bit vector; /// of [4 x i32] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*32; /// k := element*64; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm256_mask_i64gather_epi32(__m128i a, const int *m, __m256i i,; /// __m128i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERQD instruction.; ///; /// \param a; /// A 128-bit vector of [4 x i32] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 256-bit vector of [4 x i64] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [4 x i32] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [4 x i32] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:247,mask,mask,247,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 64-bit floating-point values, either from the; /// 256-bit vector of [4 x double] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [4 x i32] in \a i. The 256-bit vector; /// of [4 x double] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*64; /// k := element*32; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256d _mm256_mask_i32gather_pd(__m256d a, const double *m, __m128i i,; /// __m256d mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERDPD instruction.; ///; /// \param a; /// A 256-bit vector of [4 x double] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [4 x i32] containing signed indexes into \a m.; /// \param mask; /// A 256-bit vector of [4 x double] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 256-bit vector of [4 x double] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:260,mask,mask,260,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 64-bit floating-point values, either from the; /// 256-bit vector of [4 x double] in \a a, or from memory \a m using scaled; /// indexes from the 256-bit vector of [4 x i64] in \a i. The 256-bit vector; /// of [4 x double] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*64; /// k := element*64; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256d _mm256_mask_i64gather_pd(__m256d a, const double *m, __m256i i,; /// __m256d mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERQPD instruction.; ///; /// \param a; /// A 256-bit vector of [4 x double] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 256-bit vector of [4 x i64] containing signed indexes into \a m.; /// \param mask; /// A 256-bit vector of [4 x double] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 256-bit vector of [4 x double] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:260,mask,mask,260,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 64-bit integer values, either from the; /// 256-bit vector of [4 x i64] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [4 x i32] in \a i. The 256-bit vector; /// of [4 x i64] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*64; /// k := element*32; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_mask_i32gather_epi64(__m256i a, const long long *m,; /// __m128i i, __m256i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERDQ instruction.; ///; /// \param a; /// A 256-bit vector of [4 x i64] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [4 x i32] containing signed indexes into \a m.; /// \param mask; /// A 256-bit vector of [4 x i64] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 256-bit vector of [4 x i64] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:247,mask,mask,247,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers four 64-bit integer values, either from the; /// 256-bit vector of [4 x i64] in \a a, or from memory \a m using scaled; /// indexes from the 256-bit vector of [4 x i64] in \a i. The 256-bit vector; /// of [4 x i64] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 3; /// j := element*64; /// k := element*64; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_mask_i64gather_epi64(__m256i a, const long long *m,; /// __m256i i, __m256i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERQQ instruction.; ///; /// \param a; /// A 256-bit vector of [4 x i64] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 256-bit vector of [4 x i64] containing signed indexes into \a m.; /// \param mask; /// A 256-bit vector of [4 x i64] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 256-bit vector of [4 x i64] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:247,mask,mask,247,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers two 32-bit floating-point values, either from the; /// 128-bit vector of [4 x float] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [2 x i64] in \a i. The 128-bit vector; /// of [4 x float] in \a mask determines the source for the lower two; /// elements. The upper two elements of the result are zeroed.; ///; /// \code{.operation}; /// FOR element := 0 to 1; /// j := element*32; /// k := element*64; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// result[127:64] := 0; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128 _mm_mask_i64gather_ps(__m128 a, const float *m, __m128i i,; /// __m128 mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERQPS instruction.; ///; /// \param a; /// A 128-bit vector of [4 x float] used as the source when a mask bit is; /// zero. Only the first two elements are used.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [2 x i64] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [4 x float] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory. Only the first; /// two elements are used.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [4 x float] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:257,mask,mask,257,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers two 32-bit integer values, either from the; /// 128-bit vector of [4 x i32] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [2 x i64] in \a i. The 128-bit vector; /// of [4 x i32] in \a mask determines the source for the lower two; /// elements. The upper two elements of the result are zeroed.; ///; /// \code{.operation}; /// FOR element := 0 to 1; /// j := element*32; /// k := element*64; /// IF mask[j+31] == 0; /// result[j+31:j] := a[j+31:j]; /// ELSE; /// result[j+31:j] := Load32(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// result[127:64] := 0; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_mask_i64gather_epi32(__m128i a, const int *m, __m128i i,; /// __m128i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERQD instruction.; ///; /// \param a; /// A 128-bit vector of [4 x i32] used as the source when a mask bit is; /// zero. Only the first two elements are used.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [2 x i64] containing indexes into \a m.; /// \param mask; /// A 128-bit vector of [4 x i32] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory. Only the first two elements; /// are used.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [4 x i32] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:246,mask,mask,246,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers two 64-bit floating-point values, either from the; /// 128-bit vector of [2 x double] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [2 x i64] in \a i. The 128-bit vector; /// of [2 x double] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 1; /// j := element*64; /// k := element*64; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128d _mm_mask_i64gather_pd(__m128d a, const double *m, __m128i i,; /// __m128d mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERQPD instruction.; ///; /// \param a; /// A 128-bit vector of [2 x double] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [2 x i64] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [2 x double] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [2 x double] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:259,mask,mask,259,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers two 64-bit floating-point values, either from the; /// 128-bit vector of [2 x double] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [4 x i32] in \a i. The 128-bit vector; /// of [2 x double] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 1; /// j := element*64; /// k := element*32; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128d _mm_mask_i32gather_pd(__m128d a, const double *m, __m128i i,; /// __m128d mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VGATHERDPD instruction.; ///; /// \param a; /// A 128-bit vector of [2 x double] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [4 x i32] containing signed indexes into \a m. Only; /// the first two elements are used.; /// \param mask; /// A 128-bit vector of [2 x double] containing the mask. The most; /// significant bit of each element in the mask vector represents the mask; /// bits. If a mask bit is zero, the corresponding value from vector \a a; /// is gathered; otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [2 x double] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:259,mask,mask,259,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers two 64-bit integer values, either from the; /// 128-bit vector of [2 x i64] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [2 x i64] in \a i. The 128-bit vector; /// of [2 x i64] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 1; /// j := element*64; /// k := element*64; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+63:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_mask_i64gather_epi64(__m128i a, const long long *m, __m128i i,; /// __m128i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERQQ instruction.; ///; /// \param a; /// A 128-bit vector of [2 x i64] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [2 x i64] containing signed indexes into \a m.; /// \param mask; /// A 128-bit vector of [2 x i64] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [2 x i64] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:246,mask,mask,246,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally gathers two 64-bit integer values, either from the; /// 128-bit vector of [2 x i64] in \a a, or from memory \a m using scaled; /// indexes from the 128-bit vector of [4 x i32] in \a i. The 128-bit vector; /// of [2 x i64] in \a mask determines the source for each element.; ///; /// \code{.operation}; /// FOR element := 0 to 1; /// j := element*64; /// k := element*32; /// IF mask[j+63] == 0; /// result[j+63:j] := a[j+63:j]; /// ELSE; /// result[j+63:j] := Load64(m + SignExtend(i[k+31:k])*s); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_mask_i32gather_epi64(__m128i a, const long long *m, __m128i i,; /// __m128i mask, const int s);; /// \endcode; ///; /// This intrinsic corresponds to the \c VPGATHERDQ instruction.; ///; /// \param a; /// A 128-bit vector of [2 x i64] used as the source when a mask bit is; /// zero.; /// \param m; /// A pointer to the memory used for loading values.; /// \param i; /// A 128-bit vector of [4 x i32] containing signed indexes into \a m. Only; /// the first two elements are used.; /// \param mask; /// A 128-bit vector of [2 x i64] containing the mask. The most significant; /// bit of each element in the mask vector represents the mask bits. If a; /// mask bit is zero, the corresponding value from vector \a a is gathered;; /// otherwise the value is loaded from memory.; /// \param s; /// A literal constant scale factor for the indexes in \a i. Must be; /// 1, 2, 4, or 8.; /// \returns A 128-bit vector of [2 x i64] containing the gathered values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:246,mask,mask,246,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,9,['mask'],['mask']
Availability,"/// Conditionally loads double-precision floating point elements from a; /// memory location pointed to by \a __p into a 256-bit vector of; /// [4 x double], depending on the mask bits associated with each data; /// element.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VMASKMOVPD </c> instruction.; ///; /// \param __p; /// A pointer to a memory location that contains the double-precision; /// floating point values.; /// \param __m; /// A 256-bit integer vector of [4 x quadword] containing the mask. The most; /// significant bit of each quadword element represents the mask bits. If a; /// mask bit is zero, the corresponding value in the memory location is not; /// loaded and the corresponding field in the return value is set to zero.; /// \returns A 256-bit vector of [4 x double] containing the loaded values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:175,mask,mask,175,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,4,['mask'],['mask']
Availability,"/// Conditionally loads eight 32-bit integer elements from memory \a __X, if; /// the most significant bit of the corresponding element in the mask; /// \a __M is set; otherwise, sets that element of the result to zero.; /// Returns the 256-bit [8 x i32] result.; ///; /// \code{.operation}; /// FOR i := 0 TO 7; /// j := i*32; /// IF __M[j+31] == 1; /// result[j+31:j] := Load32(__X+(i*4)); /// ELSE; /// result[j+31:j] := 0; /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVD instruction.; ///; /// \param __X; /// A pointer to the memory used for loading values.; /// \param __M; /// A 256-bit vector of [8 x i32] containing the mask bits.; /// \returns A 256-bit vector of [8 x i32] containing the loaded or zeroed; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:143,mask,mask,143,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally loads four 32-bit integer elements from memory \a __X, if; /// the most significant bit of the corresponding element in the mask; /// \a __M is set; otherwise, sets that element of the result to zero.; /// Returns the 128-bit [4 x i32] result.; ///; /// \code{.operation}; /// FOR i := 0 TO 3; /// j := i*32; /// IF __M[j+31] == 1; /// result[j+31:j] := Load32(__X+(i*4)); /// ELSE; /// result[j+31:j] := 0; /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVD instruction.; ///; /// \param __X; /// A pointer to the memory used for loading values.; /// \param __M; /// A 128-bit vector of [4 x i32] containing the mask bits.; /// \returns A 128-bit vector of [4 x i32] containing the loaded or zeroed; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:142,mask,mask,142,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally loads four 64-bit integer elements from memory \a __X, if; /// the most significant bit of the corresponding element in the mask; /// \a __M is set; otherwise, sets that element of the result to zero.; /// Returns the 256-bit [4 x i64] result.; ///; /// \code{.operation}; /// FOR i := 0 TO 3; /// j := i*64; /// IF __M[j+63] == 1; /// result[j+63:j] := Load64(__X+(i*8)); /// ELSE; /// result[j+63:j] := 0; /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVQ instruction.; ///; /// \param __X; /// A pointer to the memory used for loading values.; /// \param __M; /// A 256-bit vector of [4 x i64] containing the mask bits.; /// \returns A 256-bit vector of [4 x i64] containing the loaded or zeroed; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:142,mask,mask,142,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally loads single-precision floating point elements from a; /// memory location pointed to by \a __p into a 128-bit vector of; /// [4 x float], depending on the mask bits associated with each data; /// element.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VMASKMOVPS </c> instruction.; ///; /// \param __p; /// A pointer to a memory location that contains the single-precision; /// floating point values.; /// \param __m; /// A 128-bit integer vector containing the mask. The most significant bit of; /// each data element represents the mask bits. If a mask bit is zero, the; /// corresponding value in the memory location is not loaded and the; /// corresponding field in the return value is set to zero.; /// \returns A 128-bit vector of [4 x float] containing the loaded values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:174,mask,mask,174,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,4,['mask'],['mask']
Availability,"/// Conditionally loads single-precision floating point elements from a; /// memory location pointed to by \a __p into a 256-bit vector of; /// [8 x float], depending on the mask bits associated with each data; /// element.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VMASKMOVPS </c> instruction.; ///; /// \param __p; /// A pointer to a memory location that contains the single-precision; /// floating point values.; /// \param __m; /// A 256-bit integer vector of [8 x dword] containing the mask. The most; /// significant bit of each dword element represents the mask bits. If a mask; /// bit is zero, the corresponding value in the memory location is not loaded; /// and the corresponding field in the return value is set to zero.; /// \returns A 256-bit vector of [8 x float] containing the loaded values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:174,mask,mask,174,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,4,['mask'],['mask']
Availability,"/// Conditionally loads two 64-bit integer elements from memory \a __X, if; /// the most significant bit of the corresponding element in the mask; /// \a __M is set; otherwise, sets that element of the result to zero.; /// Returns the 128-bit [2 x i64] result.; ///; /// \code{.operation}; /// FOR i := 0 TO 1; /// j := i*64; /// IF __M[j+63] == 1; /// result[j+63:j] := Load64(__X+(i*8)); /// ELSE; /// result[j+63:j] := 0; /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVQ instruction.; ///; /// \param __X; /// A pointer to the memory used for loading values.; /// \param __M; /// A 128-bit vector of [2 x i64] containing the mask bits.; /// \returns A 128-bit vector of [2 x i64] containing the loaded or zeroed; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:141,mask,mask,141,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally stores eight 32-bit integer elements from the 256-bit vector; /// of [8 x i32] in \a __Y to memory \a __X, if the most significant bit of; /// the corresponding element in the mask \a __M is set; otherwise, the; /// memory element is unchanged.; ///; /// \code{.operation}; /// FOR i := 0 TO 7; /// j := i*32; /// IF __M[j+31] == 1; /// Store32(__X+(i*4), __Y[j+31:j]); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVD instruction.; ///; /// \param __X; /// A pointer to the memory used for storing values.; /// \param __M; /// A 256-bit vector of [8 x i32] containing the mask bits.; /// \param __Y; /// A 256-bit vector of [8 x i32] containing the values to store.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:194,mask,mask,194,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally stores four 32-bit integer elements from the 128-bit vector; /// of [4 x i32] in \a __Y to memory \a __X, if the most significant bit of; /// the corresponding element in the mask \a __M is set; otherwise, the; /// memory element is unchanged.; ///; /// \code{.operation}; /// FOR i := 0 TO 3; /// j := i*32; /// IF __M[j+31] == 1; /// Store32(__X+(i*4), __Y[j+31:j]); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVD instruction.; ///; /// \param __X; /// A pointer to the memory used for storing values.; /// \param __M; /// A 128-bit vector of [4 x i32] containing the mask bits.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing the values to store.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:193,mask,mask,193,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally stores four 64-bit integer elements from the 256-bit vector; /// of [4 x i64] in \a __Y to memory \a __X, if the most significant bit of; /// the corresponding element in the mask \a __M is set; otherwise, the; /// memory element is unchanged.; ///; /// \code{.operation}; /// FOR i := 0 TO 3; /// j := i*64; /// IF __M[j+63] == 1; /// Store64(__X+(i*8), __Y[j+63:j]); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVQ instruction.; ///; /// \param __X; /// A pointer to the memory used for storing values.; /// \param __M; /// A 256-bit vector of [4 x i64] containing the mask bits.; /// \param __Y; /// A 256-bit vector of [4 x i64] containing the values to store.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:193,mask,mask,193,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,"/// Conditionally stores two 64-bit integer elements from the 128-bit vector; /// of [2 x i64] in \a __Y to memory \a __X, if the most significant bit of; /// the corresponding element in the mask \a __M is set; otherwise, the; /// memory element is unchanged.; ///; /// \code{.operation}; /// FOR i := 0 TO 1; /// j := i*64; /// IF __M[j+63] == 1; /// Store64(__X+(i*8), __Y[j+63:j]); /// FI; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMASKMOVQ instruction.; ///; /// \param __X; /// A pointer to the memory used for storing values.; /// \param __M; /// A 128-bit vector of [2 x i64] containing the mask bits.; /// \param __Y; /// A 128-bit vector of [2 x i64] containing the values to store.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:192,mask,mask,192,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['mask'],['mask']
Availability,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:264,avail,available,264,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['avail'],['available']
Availability,/// ConflictMarkerKind - Kinds of conflict marker which the lexer might be; /// recovering from.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:80,recover,recovering,80,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['recover'],['recovering']
